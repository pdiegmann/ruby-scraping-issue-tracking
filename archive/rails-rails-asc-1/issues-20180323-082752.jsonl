{"reactions": {}, "text": "(The last pull request came with bad commit, sorry about that)\n\nThere was an error on CI regarding unable to require arel gem from source when testing application build for a while ago. It seems to me like there's a permission problem on the process of cloning the application and removing Gemfile. This would make sure that the temporary application got removed every time the build is run.\n\nThis one is for master. I've also add change for 3-0-stable but would like to test if this one is working first.\n\nThank you\n", "labels": [], "number": 32, "updated_at": "2014-06-19 10:59:38", "user": 4912, "closed_at": "2010-09-18 19:56:05", "id": 322742, "title": "Removing railties/tmp folder on every CI build", "url": "https://api.github.com/repos/rails/rails/issues/32", "created_at": "2010-09-18 19:54:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "(The last two pull request came with bad commit, sorry about that)\n\nThere was an error on CI regarding unable to require arel gem from source when testing application build for a while ago. It seems to me like there's a permission problem on the process of cloning the application and removing Gemfile. This would make sure that the temporary application got removed every time the build is run.\n\nThis one is for master. I've also add change for 3-0-stable but would like to test if this one is working first.\n\nThank you\n", "labels": [], "number": 33, "updated_at": "2014-06-19 11:01:25", "user": 4912, "closed_at": "2011-01-14 18:55:35", "id": 322744, "title": "Removing railties/tmp folder on every CI build", "url": "https://api.github.com/repos/rails/rails/issues/33", "created_at": "2010-09-18 19:56:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665253", "text": "Hm. Not sure whether this should be in the ci runner or in the railties rakefile.\n", "created_at": "2011-01-10 00:11:33", "user": 199, "id": 665253}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/678454", "text": "Hmm ... I think this patch somehow got applied on `master` which solved the problem. I actually forgot that I've open an issue here too. Thank you for stopping by :)\n", "created_at": "2011-01-14 18:55:35", "user": 4912, "id": 678454}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "associated ticket here:\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5660-activeresource-should-work-for-non-generated-ids\n\nThis ActiveResource patch allows you to override your resource to work with custom primary keys not generated by the server\n", "labels": [], "number": 34, "updated_at": "2014-06-19 11:01:25", "user": 206662, "closed_at": "2010-10-15 21:58:37", "id": 323053, "title": "ActiveResource should work for non-generated ids", "url": "https://api.github.com/repos/rails/rails/issues/34", "created_at": "2010-09-19 03:25:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1900289", "text": "I don't see this changes in activeresource-3.0.10, has this been merged?\n", "created_at": "2011-08-25 14:27:16", "user": 124441, "id": 1900289}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "First commit fixes running engine tests in isolation (like: ruby -I railties/test/ railties/test/railties/engine_test.rb ). Second is just removing unnecessary output on engine tests.\n", "labels": [], "number": 35, "updated_at": "2014-06-19 11:01:25", "user": 5004, "closed_at": "2010-09-19 15:10:55", "id": 323494, "title": "Fix running engine tests in isolation", "url": "https://api.github.com/repos/rails/rails/issues/35", "created_at": "2010-09-19 15:08:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, there is a rake task to copy migrations from railties: rake railties:copy_migrations\n\nIt would be nice to give user a warning when doing db:migrate with not copied migrations and say how to copy them.\n", "labels": [], "number": 36, "updated_at": "2014-06-19 11:01:25", "user": 5004, "closed_at": "2010-10-13 06:23:25", "id": 323545, "title": "Warning on uncopied migrations from railties", "url": "https://api.github.com/repos/rails/rails/issues/36", "created_at": "2010-09-19 16:28:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/465360", "text": "This is not relevant by now, copying migrations has been changed.\n", "created_at": "2010-10-13 06:22:57", "user": 5004, "id": 465360}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, I been working on this:\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5631-activeresourcemissingprefixparam-proposal\n\nbut I figured out that the last changes on activeresource maybe will broke my\npatch, so I forked rails and I did my commits on my fork on **master** and **3-0-stable**, I'm going to apply my changes for 2.3 soon I will send it a new pull request.\n\nThanks in advance.\n\nGast√≥n Ramos\n", "labels": [], "number": 37, "updated_at": "2014-06-14 17:22:24", "user": 10948, "closed_at": "2010-09-27 16:03:28", "id": 323963, "title": "Active Resource should warn about missing prefix value", "url": "https://api.github.com/repos/rails/rails/issues/37", "created_at": "2010-09-20 01:11:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/422112", "text": "Hey, nice work.\n\nI'll pull in and test it out today.\n", "created_at": "2010-09-22 03:28:34", "user": 3366, "id": 422112}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/422113", "text": "Ideally, your pull request wouldn't have a merge commit in there.  Please in the future rebase your work.  Makes life easier for me in committing.\n", "created_at": "2010-09-22 03:29:21", "user": 3366, "id": 422113}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/422764", "text": "Thanks for the advice!\n", "created_at": "2010-09-22 11:59:40", "user": 10948, "id": 422764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/428101", "text": "Do you need that I remove the merge commit and do the pull request again?\n", "created_at": "2010-09-24 17:45:19", "user": 10948, "id": 428101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/432375", "text": "Hi there Gramos,\n\nI totally forgot about this.\n\nIf you could rebase against master without the merge, and do another pull request, that would be fantastic.  I'll take a look at it tomorrow morning and see how we go.\n\nAs for associations, yes, good idea.  For that I would request you post your idea to rails-core and have a discussion on the implementation first.\n\nThanks for your work, look forward to your pull request tomorrow morning my time :)\n\nMikel\n", "created_at": "2010-09-27 16:03:28", "user": 3366, "id": 432375}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit adds 2 more changes in behaviour after using \"namespace Blog\" method in Rails::Engine\n", "labels": [], "number": 38, "updated_at": "2014-06-19 10:59:38", "user": 5004, "closed_at": "2010-09-20 21:55:39", "id": 325209, "title": "List all of the isolated engine chanes in Rails::Engine documantation", "url": "https://api.github.com/repos/rails/rails/issues/38", "created_at": "2010-09-20 19:29:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm just localizing Humpyard and as it has namespaced models like Humpyard::Elements::TextElement it would be in the I18n yml:\n\n```\nactiverecord:\n  models:\n    humpyard/elements/text_element: 'Text Element'\n  attributes:\n    humpyard/elements/text_element:\n      content: 'Content'\n      display_from: 'Display from'\n```\n\nThis ist not very nice to read and I would have to redefine common fields like \"display_from\", which exists for all Humpyard::Elements:: models.\nSo I wrote a patch where the namespaced model translation could be in a namespaced yml/format:\n\n```\nactiverecord:\n  models:\n    humpyard:\n      elements:\n        text_element: 'Text element'\n  attributes:\n    humpyard:\n      elements:\n        display_from: 'Display from'\n        text_element:\n          content: 'Content'\n```\n\nNote the fallback to 'activerecord.attributes.humpyard.elements.display_from for the common field. This is of course a simple example - when you have many Humpyard::Pages::\\* and Humpyard::Elements::\\* this syntax makes much more sense than it may look like. ;-)\n\nCU\nStarPeak\n", "labels": [], "number": 39, "updated_at": "2014-06-19 11:01:25", "user": 11974, "closed_at": "2010-09-21 14:24:28", "id": 325558, "title": "Namespacesd Models and model_name.human/human_attribute_for", "url": "https://api.github.com/repos/rails/rails/issues/39", "created_at": "2010-09-20 23:11:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/419702", "text": "Duplicate of https://rails.lighthouseapp.com/projects/8994/tickets/5572 in LH.\n", "created_at": "2010-09-21 07:24:28", "user": 9582, "id": 419702}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/419889", "text": "Ok - should have had a deeper look into the tickets :-)\n\nThe patch is much more improved than mine - but misses the fallback to module's attribute_name lookup.\nAs I found out there are often the same attributes inside a module I think it would be a good idea to implement it in that patch.\nIf you would like I would implement that into the patch from the ticket 5572.\n", "created_at": "2010-09-21 09:22:29", "user": 11974, "id": 419889}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/419893", "text": "Please do provide another patch in that ticket. You can consider that your patch will be applied after the one already attached there.\n", "created_at": "2010-09-21 09:24:01", "user": 9582, "id": 419893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/419930", "text": "Ok - I than would expand the given patch later the day as I have to go to a customer now. I think it will be in lighthouse in about 10 hours. \nThe code is almost there (I think I could take the loop from this commit using the i18n_key function) and I would even write a test for it this time. :-) \n", "created_at": "2010-09-21 09:38:55", "user": 11974, "id": 419930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/419933", "text": "Awesome! And writing a test is your only option! ;)\n", "created_at": "2010-09-21 09:40:47", "user": 9582, "id": 419933}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/421034", "text": "I took the option to write tests and pushed changes here as well as as a patch on lighthouse in the corresponding bug.\n\nAlso the tests from the patch were not running as PersonModule::Person.new does not take argument_hash - so I fixed that, too.\n\nAnd github is telling me, that it only lasted 8 hours to publish the patch, not 10 as estimated. ;-)\n", "created_at": "2010-09-21 18:35:48", "user": 11974, "id": 421034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/439267", "text": "Hi\n\nDid you see the patch in https://rails.lighthouseapp.com/projects/8994/tickets/5572 ?\nI just ask because you didn't respond and I assume that you just lost track on the ticket :)\n\nSven\n", "created_at": "2010-09-30 13:15:27", "user": 11974, "id": 439267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/439278", "text": "Yes, I am aware of the changes in the ticket! I just need to find sometime to discuss it with other core members as I am not sure if we want to make the errors messages lookup slower than it already is today.\n", "created_at": "2010-09-30 13:18:30", "user": 9582, "id": 439278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/439300", "text": "For me it is more important to have the fallback on attribute names than on error messages - I just did the error messages part to complete the fallback cases.\nError messages are either the standard values for the type, could easily be set to non default I18n-Stings in validations (e.g. the :cannot_be_before_display_from error in the PublishRangeValidator in Humpyard) or are model specific in the most cases.\n", "created_at": "2010-09-30 13:32:33", "user": 11974, "id": 439300}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Valim,\n\nI have a problem with ActiveRecord default_timezone because the railtie.rb change it to :utc\n\nI created a ticket on lighthouse: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5679-activerecordbasedefault_timezone\n\nPlease consider this pull request\n\ntk's\n", "labels": [], "number": 40, "updated_at": "2014-06-19 10:59:38", "user": 4888, "closed_at": "2010-09-22 07:53:06", "id": 327483, "title": "ActiveRecord::Base.default_timezone", "url": "https://api.github.com/repos/rails/rails/issues/40", "created_at": "2010-09-22 04:02:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 41, "updated_at": "2014-06-19 11:01:24", "user": 175494, "closed_at": "2010-10-26 07:53:26", "id": 330029, "title": "fix for https://rails.lighthouseapp.com/projects/8994", "url": "https://api.github.com/repos/rails/rails/issues/41", "created_at": "2010-09-23 15:46:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/426596", "text": "ooops, the correct link is: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5690-should-be-escaped-in-urls\n", "created_at": "2010-09-24 00:10:10", "user": 175494, "id": 426596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/426703", "text": "Test case?\n", "created_at": "2010-09-24 01:29:09", "user": 98601, "id": 426703}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/5570-fragment-cache-logging-fails-in-30-when-fragment-path-contains-printf-chars-eg-a\n", "labels": [], "number": 42, "updated_at": "2014-06-19 10:59:38", "user": 150485, "closed_at": "2010-09-25 06:14:07", "id": 330530, "title": "Fix logging when cache key contains % sign", "url": "https://api.github.com/repos/rails/rails/issues/42", "created_at": "2010-09-23 21:13:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/426313", "text": "Oops, seems like when you push to repo pull request gets updated...\n", "created_at": "2010-09-23 21:22:47", "user": 150485, "id": 426313}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/4429-templates-that-use-with_options\n", "labels": [], "number": 43, "updated_at": "2014-06-19 10:59:38", "user": 150485, "closed_at": "2010-09-23 21:49:12", "id": 330579, "title": "Template with options", "url": "https://api.github.com/repos/rails/rails/issues/43", "created_at": "2010-09-23 21:44:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/426391", "text": "This has already been fixed in master.\n", "created_at": "2010-09-23 21:49:12", "user": 9582, "id": 426391}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`block_helper` already defined in `BlockTestCase`\n", "labels": [], "number": 44, "updated_at": "2014-06-19 10:59:39", "user": 150485, "closed_at": "2010-09-25 07:19:12", "id": 330671, "title": "AV test helper DRYup", "url": "https://api.github.com/repos/rails/rails/issues/44", "created_at": "2010-09-23 22:38:34", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Got warnings using http://github.com/adzap/validates_timeliness\n", "labels": [], "number": 45, "updated_at": "2014-06-19 10:59:38", "user": 198371, "closed_at": "2010-09-24 11:57:15", "id": 331325, "title": "Untitled", "url": "https://api.github.com/repos/rails/rails/issues/45", "created_at": "2010-09-24 11:53:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/427417", "text": "Column#type is implemented by Rails ActiveRecord. It seems someone is passing an invalid object as column. A test case is welcome in order to understand the issue.\n", "created_at": "2010-09-24 11:57:15", "user": 9582, "id": 427417}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Modified Net::HTTP.get to follow a HTTP redirect. It makes sense because the method returns the response body. Also moved uri.rb from core_ext root to the ./net folder.\n", "labels": [], "number": 46, "updated_at": "2014-06-19 11:01:24", "user": 143682, "closed_at": "2010-09-26 23:23:40", "id": 332259, "title": "Untitled", "url": "https://api.github.com/repos/rails/rails/issues/46", "created_at": "2010-09-24 23:36:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See commit messages and https://rails.lighthouseapp.com/projects/8994/tickets/5320\n", "labels": [], "number": 47, "updated_at": "2014-06-19 10:59:39", "user": 98601, "closed_at": "2010-09-25 08:58:40", "id": 332342, "title": "ActionDispatch::TestResponse duplicates Rack::Response functionality", "url": "https://api.github.com/repos/rails/rails/issues/47", "created_at": "2010-09-25 00:53:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/429122", "text": "Applied.\n", "created_at": "2010-09-25 08:58:40", "user": 9582, "id": 429122}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/5366\n", "labels": [], "number": 48, "updated_at": "2014-06-19 10:59:39", "user": 98601, "closed_at": "2010-09-25 08:59:59", "id": 332344, "title": "Don't act destructively on ActiveModel::Name#human options hash", "url": "https://api.github.com/repos/rails/rails/issues/48", "created_at": "2010-09-25 00:57:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/429124", "text": "Applied.\n", "created_at": "2010-09-25 08:59:59", "user": 9582, "id": 429124}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previously, #inspect would produce #<ActionView::Template::Error: ActionView::Template::Error>, which is not very useful.\n", "labels": [], "number": 49, "updated_at": "2014-06-19 11:01:23", "user": 98601, "closed_at": "2011-01-18 18:54:51", "id": 332375, "title": "Ensure original exception message is present in both Template::Error#message and Template::Error#inspect.", "url": "https://api.github.com/repos/rails/rails/issues/49", "created_at": "2010-09-25 01:45:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665220", "text": "What's the reason behind removing the Deprecation.silence?\n", "created_at": "2011-01-10 00:00:23", "user": 199, "id": 665220}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665298", "text": "Removing it doesn't produce any deprecation warnings, so I think the deprecation that it was silencing must be long gone. You added it back in 2006 with 495f113e57c5b5db883c9a395aa80f8ccfc171bf -- any recollection of what the warning was?\n", "created_at": "2011-01-10 00:45:16", "user": 98601, "id": 665298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/687473", "text": "Reusing the superclass message method seems good to me.  I've merged this in to master.\n", "created_at": "2011-01-18 18:54:51", "user": 3124, "id": 687473}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`block_helper` already defined in `BlockTestCase`\n", "labels": [], "number": 50, "updated_at": "2014-06-19 10:59:39", "user": 150485, "closed_at": "2010-09-25 16:03:16", "id": 332564, "title": "AV tests dryup", "url": "https://api.github.com/repos/rails/rails/issues/50", "created_at": "2010-09-25 07:32:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/429128", "text": "Applied. If you also added a patch to LH, please assign it to me so I can close it! Thanks!\n", "created_at": "2010-09-25 09:03:17", "user": 9582, "id": 429128}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/5570-fragment-cache-logging-fails-in-30-when-fragment-path-contains-printf-chars-eg-a\n", "labels": [], "number": 51, "updated_at": "2014-06-19 10:59:39", "user": 150485, "closed_at": "2010-09-25 09:04:38", "id": 332566, "title": "AC LogSubscriber fix", "url": "https://api.github.com/repos/rails/rails/issues/51", "created_at": "2010-09-25 07:37:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/429131", "text": "Applied.\n", "created_at": "2010-09-25 09:04:38", "user": 9582, "id": 429131}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/5551-patch-fix-warning-method-redefined-in-attr_accessor_with_default-for-ruby-192\n", "labels": [], "number": 52, "updated_at": "2014-06-19 10:59:39", "user": 150485, "closed_at": "2010-09-26 06:23:38", "id": 332573, "title": "attr_accessor_with_default", "url": "https://api.github.com/repos/rails/rails/issues/52", "created_at": "2010-09-25 08:00:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/429147", "text": "Pull request was applied. I'm closing this issue.\n", "created_at": "2010-09-25 09:26:57", "user": 150485, "id": 429147}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 53, "updated_at": "2014-06-19 11:01:23", "user": 150485, "closed_at": "2011-01-10 00:01:18", "id": 332989, "title": "Circular require fix", "url": "https://api.github.com/repos/rails/rails/issues/53", "created_at": "2010-09-25 19:01:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665230", "text": "These are intentionally circular requires, so you can <code>require 'active_record/railtie'</code> directly. So the warning is safe to ignore.\n", "created_at": "2011-01-10 00:01:18", "user": 199, "id": 665230}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 54, "updated_at": "2014-06-19 11:01:23", "user": 150485, "closed_at": "2010-09-27 20:57:58", "id": 333046, "title": "Uri obsolete warning fix", "url": "https://api.github.com/repos/rails/rails/issues/54", "created_at": "2010-09-25 20:13:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've been working on removing 1.9.2 warnings. There are a lot more on actionpack but i will continue working on this, is the only module that has disabled warnings in its Rakefile and i suppose it's because there are so many of them.\n", "labels": [], "number": 55, "updated_at": "2014-06-14 03:58:28", "user": 3359, "closed_at": "2010-09-28 02:02:17", "id": 334978, "title": "1.9.2 warnings", "url": "https://api.github.com/repos/rails/rails/issues/55", "created_at": "2010-09-27 14:23:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/432910", "text": "Applied! :D\n", "created_at": "2010-09-27 19:33:41", "user": 9582, "id": 432910}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A couple of ActionPack/ActiveSupport performance fixes/refactorings.\n", "labels": [], "number": 56, "updated_at": "2014-06-16 06:47:09", "user": 15688, "closed_at": "2010-09-27 18:20:01", "id": 335146, "title": "Performance enhancements", "url": "https://api.github.com/repos/rails/rails/issues/56", "created_at": "2010-09-27 16:03:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/432564", "text": "Hey mate, it looks really good. There is only one change I would like to discuss with you, which is about the crystalize approach. Instead of compiling everything at a given point, maybe we could compile the first time the method is called?\n\nThis is because I believe several options are not in the Configurable hash at the end of the initialization process. What do you think?\n", "created_at": "2010-09-27 17:13:40", "user": 9582, "id": 432564}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, I been working on this:\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5631-activeresourcemissingprefixparam-proposal\n\nbut I figured out that the last changes on activeresource maybe will broke my\npatch, so I forked rails and I did my commits on my fork on are-missing-prefix-value branch\n\nThanks in advance.\n\nGast√≥n Ramos\n", "labels": [], "number": 57, "updated_at": "2014-06-14 05:34:15", "user": 10948, "closed_at": "2010-09-27 19:33:30", "id": 335394, "title": "Active Resource should warn about missing prefix value", "url": "https://api.github.com/repos/rails/rails/issues/57", "created_at": "2010-09-27 18:35:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As suggested on:\n\nhttp://github.com/rails/rails/commit/2f326b7f27349b933fe617d83b3f80c6573ce5d8#commitcomment-156519\n\nI moved uri parser to AS, and reused it in ARes/AP.\n", "labels": [], "number": 58, "updated_at": "2014-06-19 11:01:22", "user": 3359, "closed_at": "2010-09-28 15:51:38", "id": 335916, "title": "Move uri_parser to AS", "url": "https://api.github.com/repos/rails/rails/issues/58", "created_at": "2010-09-28 00:01:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 59, "updated_at": "2014-06-14 19:07:45", "user": 3359, "closed_at": "2010-09-30 12:44:23", "id": 336909, "title": "2 3 stable", "url": "https://api.github.com/repos/rails/rails/issues/59", "created_at": "2010-09-28 15:34:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I fixed almost (2 or 3 left for tomorrow) warnings in ActionPack, and enabled warnings like every other module in Rails does, now that they can be read.\n", "labels": [], "number": 60, "updated_at": "2014-07-03 03:39:54", "user": 3359, "closed_at": "2010-09-29 16:29:44", "id": 337485, "title": "Fixed almost every warning in ActionPack ", "url": "https://api.github.com/repos/rails/rails/issues/60", "created_at": "2010-09-28 21:53:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/436047", "text": "Emilio, it looks good, but someplaces you use: (@_var ||= nil) which I consider rather to be a smell. This just slows down runtime execution if it is inside a method instead of the proper place (which is inside the initialize method).\n", "created_at": "2010-09-29 08:04:34", "user": 9582, "id": 436047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/436155", "text": "Emilio, I pushed your changes with a follow up commit! Thanks! :D\n", "created_at": "2010-09-29 09:31:51", "user": 9582, "id": 436155}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove more warnings and fixes test behaviour.\n", "labels": [], "number": 61, "updated_at": "2014-07-03 03:40:00", "user": 3359, "closed_at": "2010-09-29 18:30:18", "id": 338974, "title": "Remove more warnings on AP.", "url": "https://api.github.com/repos/rails/rails/issues/61", "created_at": "2010-09-29 16:05:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use detect instead find to prevent this error:\n\nGenerating data...\nInserting 10,000 users and exhibits...\nsh: [mysqldump]: command not found\n", "labels": [], "number": 62, "updated_at": "2014-07-03 03:40:05", "user": 3359, "closed_at": "2010-09-30 11:42:51", "id": 339006, "title": "Fix profile script", "url": "https://api.github.com/repos/rails/rails/issues/62", "created_at": "2010-09-29 16:25:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 63, "updated_at": "2014-06-26 11:44:10", "user": 3359, "closed_at": "2010-09-30 14:09:37", "id": 340617, "title": "Update AR's performance script", "url": "https://api.github.com/repos/rails/rails/issues/63", "created_at": "2010-09-30 12:55:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "NilClass.type is no longer defined in Ruby 1.9 and causes ActiveRecord::Base.to_xml to fail with message: undefined method `type' for nil:NilClass\n", "labels": [], "number": 64, "updated_at": "2014-07-03 03:40:10", "user": 100993, "closed_at": "2010-11-14 09:27:27", "id": 341074, "title": "to_xml doesn't work in such case: Event.select('title as t').to_xml [#4840 state:resolved] ", "url": "https://api.github.com/repos/rails/rails/issues/64", "created_at": "2010-09-30 17:16:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/472031", "text": "Exactly.\n", "created_at": "2010-10-15 21:59:50", "user": 9582, "id": 472031}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/540304", "text": "You need to explicitly check if columns_hash[name] returns something. If so, we call type in it, otherwise, we should return \"nil.class\".\n", "created_at": "2010-11-14 09:27:27", "user": 9582, "id": 540304}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Refactor AssociationCollection include_in_memory? method to use .any?\n", "labels": [], "number": 65, "updated_at": "2014-07-03 03:40:13", "user": 26328, "closed_at": "2010-10-04 13:51:23", "id": 341659, "title": "Association refactoring", "url": "https://api.github.com/repos/rails/rails/issues/65", "created_at": "2010-09-30 23:31:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As discussed on http://github.com/rails/rails/commit/6807b080996ee4bd6b80abb4f5e9964632c421c8#commitcomment-159080 and via Twitter with Jose and Yehuda, this patch add model_name at the instance level as well. Lint is updated,  a couple of tests have been added and all ActiveModel and ActionPack tests are still passing.\n\nI think I caught all of the places that we'd want to/it'd make sense to call model_name on the instance, first -- but if I missed any, please let me know.\n\nThanks!\n", "labels": [], "number": 66, "updated_at": "2014-06-18 17:54:49", "user": 14947, "closed_at": "2010-10-15 21:58:38", "id": 341680, "title": "model_name at the instance level", "url": "https://api.github.com/repos/rails/rails/issues/66", "created_at": "2010-09-30 23:51:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/446388", "text": "Mate, I was checking this out and I am not very confortable with moving this method to the instance. The main reason is that we would need to have both class and instance methods, so we are just making the API more confusing.\n\nI believe that maybe the best solution is to implement User.to_model at the class level as well, that ensures it responds to model_name. What do you think?\n\nAnd one question, do you try to support multiple ORMs in metasearch as well?\n", "created_at": "2010-10-04 14:17:00", "user": 9582, "id": 446388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/446419", "text": "Thanks for checking it out, Jos√©.\n\nI'm not sure I follow how a class-level to_model resolves the problem this patch was intended to address -- that is, the desire to allow instance-specific details to influence certain attributes of the ActiveModel::Name, as in http://github.com/ernie/meta_search/blob/arel-2.0/lib/meta_search/model_compatibility.rb#L38 or the included test.\n\nThat being said, while I clearly have a use case for something like this, if it's not really something that many others might get some use out of, I can find a different workaround in my code. It just seems like it would add extra utility to FormBuilder, etc to allow an instance to have some influence over the routes that get generated for it.\n\nAs for additional ORM support, not at this time. I make use of AR's JoinDependency to do some of the heavy lifting in Builder, so I haven't gone through the pain of a refactor, in the absence of actual requests for DM support, etc.\n", "created_at": "2010-10-04 14:33:11", "user": 14947, "id": 446419}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/446450", "text": "I see what you are trying to achieve, but my gut reaction says that we should not use model_name for it (it is supposed to be an immutable structure).\n\nWhy do you need to change route_key? So the form will point to an specific URL?\n\nAnother question is, the reason you first provided this patch is because we had a bug (we were not calling to_model in a place where we were supposed to). Is it still a bug?\n\nThanks for your time! :D\n", "created_at": "2010-10-04 14:46:09", "user": 9582, "id": 446450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/446468", "text": "Jos√© -- I see what you mean. I had thought that allowing the instance to override its class's default model_name might be an acceptable workaround to the immutable copy at the class level, but if the immutable \"model name\" is in fact a philosophical decision, beyond just a technical one, then I can see that having an instance method called \"model name\" is at the very least misleading.\n\nYes, I wanted to override the default destination URL. My initial attempt was to catch it in an override to :url in apply_form_for_options! instead, but it wasn't working at the time.... I got sidetracked when debugging that problem when I saw the apparently missing to_model call that started the initial discussion -- which, to answer your second question, is still (I think) a bug.\n", "created_at": "2010-10-04 15:00:42", "user": 14947, "id": 446468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/446483", "text": "Yes, I would try to handle this issue as you said: by handling :url in apply_form_for_options!. Let me know if there is anything Rails can do to make this task easier for you.\n\nAnd do you think you can provide a patch for the remaining to_model issue?\n\nThanks!\n", "created_at": "2010-10-04 15:08:36", "user": 9582, "id": 446483}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/446829", "text": "Sure. Pretty sure the fix itself can be summarized in http://gist.github.com/610121 -- if there's a specific place I can put some tests for it, let me know. Might also make sense to make it public and have form_helper.rb use it instead?\n", "created_at": "2010-10-04 17:39:12", "user": 14947, "id": 446829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/446998", "text": "I believe tests for this can go in here:\n\nhttp://github.com/rails/rails/blob/master/activemodel/test/cases/naming_test.rb\n\nWhat do you think?\n", "created_at": "2010-10-04 18:51:28", "user": 9582, "id": 446998}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/447040", "text": "Gist updated w/test:\n\nhttp://gist.github.com/610121\n", "created_at": "2010-10-04 19:06:51", "user": 14947, "id": 447040}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently javascript_include_tag and stylesheet_tag don't mark attributes that contain slashes as html_safe. (specifically src and type for JS, href for CSS)\n\nThis patch fixes that. Actionpack tests pass.\n", "labels": [], "number": 67, "updated_at": "2014-06-16 20:16:26", "user": 7475, "closed_at": "2010-11-16 08:11:22", "id": 342864, "title": "Fix html escaping for javascript and stylesheet helpers", "url": "https://api.github.com/repos/rails/rails/issues/67", "created_at": "2010-10-01 18:30:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/442377", "text": "It needs tests!\n", "created_at": "2010-10-01 18:41:34", "user": 9582, "id": 442377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/442390", "text": "Will add tests and request again.\n", "created_at": "2010-10-01 18:45:04", "user": 7475, "id": 442390}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Related to this post:\nhttp://groups.google.com/group/rubyonrails-core/browse_thread/thread/15d57967f94c5561\n\nI added a basic first version of associations to Active Resource, it try follow the same behaviour than Active Record, at the moment it support only one-to-one and one-to-many associations, I'll be happy to continue working on this.\n\nGast√≥n Ramos\n", "labels": [], "number": 68, "updated_at": "2014-07-03 03:40:25", "user": 10948, "closed_at": "2010-10-06 13:40:27", "id": 348453, "title": "Active Resource Associations", "url": "https://api.github.com/repos/rails/rails/issues/68", "created_at": "2010-10-05 20:57:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/450708", "text": "+1\n", "created_at": "2010-10-06 08:09:47", "user": 4709, "id": 450708}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/451206", "text": "This pull request is wrong I did a mistake with the git rebase, I did a new fresh pull request:\nhttp://github.com/rails/rails/pull/70\n", "created_at": "2010-10-06 13:27:51", "user": 10948, "id": 451206}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I fixed what appears to be a copy/paste bug in activesupport/lib/active_support/xml_mini.rb\n", "labels": [], "number": 69, "updated_at": "2014-06-26 15:51:46", "user": 10308, "closed_at": "2010-10-06 15:51:25", "id": 348841, "title": "Fix copy/paste bug", "url": "https://api.github.com/repos/rails/rails/issues/69", "created_at": "2010-10-06 02:28:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I figured out that my last pull request http://github.com/rails/rails/pull/68 is wrong, so I did this new one with the right commits, thanks and I'm sorry for the mistake.\n", "labels": [], "number": 70, "updated_at": "2014-06-26 18:03:31", "user": 10948, "closed_at": "2010-10-15 21:58:35", "id": 349480, "title": "Active Resource Associations", "url": "https://api.github.com/repos/rails/rails/issues/70", "created_at": "2010-10-06 13:26:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/452429", "text": "I have just one question from looking at your tests. What if instead of hitting \"/project_managers.xml?project_id=2\", I would like my association to hit \"/projects/2/project_managers\"? Is that possible to achieve with the current code?\n", "created_at": "2010-10-06 21:01:53", "user": 9582, "id": 452429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/452648", "text": "With the current code not, bu I could add an option like this:\n\nhas_many :from => \"/projects/2/project_managers\"\n\nthis is  a first tiny version, I can do more work and implement new ideas after my patch is merged to rails.\n\nDo you think that is better use this route by default? \"/projects/2/project_managers\"\n", "created_at": "2010-10-06 22:45:11", "user": 10948, "id": 452648}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/452651", "text": "sorry I mean has_many :from => \"/projects/:id/project_managers\"\n", "created_at": "2010-10-06 22:46:48", "user": 10948, "id": 452651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/453814", "text": "Nice work.  I like it.\n", "created_at": "2010-10-07 13:29:08", "user": 173, "id": 453814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2770750", "text": "This doesn't appear to have been merged into rails. Should it still be open?\n", "created_at": "2011-11-17 01:04:07", "user": 524, "id": 2770750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2792022", "text": "I would like to see the reasons why will not be merge in a comment here.\n", "created_at": "2011-11-18 17:49:27", "user": 10948, "id": 2792022}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2792041", "text": "I would like to see the reasons why will not be merge here, as a comment\n", "created_at": "2011-11-18 17:51:05", "user": 10948, "id": 2792041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3438579", "text": "What is the status of this pull?\n", "created_at": "2012-01-10 22:41:59", "user": 1833, "id": 3438579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3854130", "text": "Seems like a great feature, I'd definitely like to see it updated to support the standard nested resource route before merge though.\n", "created_at": "2012-02-07 19:13:17", "user": 50139, "id": 3854130}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 71, "updated_at": "2014-11-28 18:29:52", "user": 47848, "closed_at": "2010-10-06 23:03:04", "id": 349751, "title": "Fixes typo", "url": "https://api.github.com/repos/rails/rails/issues/71", "created_at": "2010-10-06 15:59:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/451649", "text": "Applied, thank you.\n\nYou could also fix this directly via docrails if you prefer, it has public write access.\n", "created_at": "2010-10-06 16:05:00", "user": 3387, "id": 451649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/64919717", "text": ":heart: :heart: :heart: \n", "created_at": "2014-11-28 18:29:52", "user": 833383, "id": 64919717}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "'Hardware\" current pluralizes into \"Hardwares\", should still be \"Hardware\"\n", "labels": [], "number": 72, "updated_at": "2017-08-30 21:42:36", "user": 246978, "closed_at": "2010-10-07 00:11:42", "id": 349873, "title": "Plural of hardware", "url": "https://api.github.com/repos/rails/rails/issues/72", "created_at": "2010-10-06 17:10:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/451833", "text": "Rails has a politic of not adding new inflections to the inflection. Please handle it in your application.\n", "created_at": "2010-10-06 17:11:42", "user": 9582, "id": 451833}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/451837", "text": ":(\n", "created_at": "2010-10-06 17:12:49", "user": 246978, "id": 451837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/451841", "text": ":)\n", "created_at": "2010-10-06 17:13:28", "user": 9582, "id": 451841}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/452097", "text": "That's interesting, is it documented somewhere ?\nWhat would be the rationale behind it ?\n", "created_at": "2010-10-06 18:42:58", "user": 33329, "id": 452097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/452105", "text": "I found this blog post http://softwareas.com/bitten-by-rails-pluralizationinflection\nOne of the commenters suggested adding it to /config/initializers/inflections.rb\nThere are examples there commented out\n", "created_at": "2010-10-06 18:46:49", "user": 246978, "id": 452105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/452145", "text": "I meant documentation regarding this \"politic\"\n", "created_at": "2010-10-06 19:01:12", "user": 33329, "id": 452145}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 73, "updated_at": "2014-07-03 03:40:45", "user": 278, "closed_at": "2010-10-07 02:32:06", "id": 350159, "title": "Removes code duplication by meta programmatically generating class instance variable reader", "url": "https://api.github.com/repos/rails/rails/issues/73", "created_at": "2010-10-06 19:25:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/452225", "text": "Good initiative! But I believe that code could instead be refactored to use the new class_attribute instead. What do you think?\n", "created_at": "2010-10-06 19:32:06", "user": 9582, "id": 452225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/452237", "text": "Not without major surgery. class_attribute relies on captured variable on the callstack (it doesn't use class instance variable underneath) and class_attribute insists on defining class writer for attributes.\n", "created_at": "2010-10-06 19:39:15", "user": 278, "id": 452237}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/452245", "text": "It would be good to have a reader for reading class instance variables btw, otherwise we can make the method \"inheritable_class_instance_reader\" local as well.\n", "created_at": "2010-10-06 19:41:25", "user": 278, "id": 452245}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "HttpMock do not replace the response if it exists and it should replace it:\n\nrequire 'active_resource'\nActiveResource::HttpMock.respond_to do |mock|\n   mock.send(:get, \"/people/1\", {}, \"XML1\")\nend\n\nActiveResource::HttpMock.responses.length \n# => 1\n\nget_matz = ActiveResource::Request.new(:get, '/people/1', nil)\nok_response = ActiveResource::Response.new(\"\", 200, {})\n\nActiveResource::HttpMock.respond_to({get_matz => ok_response}, false)\nActiveResource::HttpMock.responses.length\n# => 2\n\nMy patch solve this problem.\nThanks.\n", "labels": [], "number": 74, "updated_at": "2014-07-03 03:40:50", "user": 10948, "closed_at": "2010-10-15 21:58:33", "id": 350484, "title": "Fix ActiveResource::HttpMock.respond_to method do not replace the response ", "url": "https://api.github.com/repos/rails/rails/issues/74", "created_at": "2010-10-06 22:32:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 75, "updated_at": "2014-07-03 03:40:56", "user": 4531, "closed_at": "2010-10-08 07:14:32", "id": 352715, "title": "Just a quick typo fix", "url": "https://api.github.com/repos/rails/rails/issues/75", "created_at": "2010-10-08 07:04:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/455689", "text": "Applied.\n", "created_at": "2010-10-08 07:14:32", "user": 9582, "id": 455689}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is the implementation of Identity Map for ActiveRecord, Marcin Raczkowski's project for Ruby Summer Of Code (http://rubysoc.org/projects):\n\nProject #12: ActiveRecord Identity Map \n\nOur goal is provide plugable identity map implementation for ActiveRecord. An identity map is a design pattern used to improve performance by providing a in-memory cache to prevent duplicate retrieval of the same object data from the database, in our case in context of the same request or thread.\n\nIf the requested data has already been loaded from the database, the identity map returns the same instance of the already instantiated object, but if it has not been loaded yet, it loads it and stores the new object in the map. The main gains of this project will be performance improvement and memory consumption reduction.\n", "labels": [], "number": 76, "updated_at": "2014-06-13 12:24:01", "user": 3359, "closed_at": "2011-02-18 19:44:20", "id": 353260, "title": "Identity map", "url": "https://api.github.com/repos/rails/rails/issues/76", "created_at": "2010-10-08 15:04:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/456448", "text": "Just one note, for those interested in trying it out, you need to add to your Gemfile:\n\ngem \"rails\", :git => \"git://github.com/miloops/rails.git\", :branch => \"identity_map\"\ngem \"weakling\", :git => \"git://github.com/swistak/weakling.git\"\ngem \"rack\", :git => \"git://github.com/rack/rack.git\"\ngem \"arel\", :git => \"git://github.com/rails/arel.git\"\n", "created_at": "2010-10-08 15:22:05", "user": 9582, "id": 456448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/456460", "text": "Great stuff! This is very useful in large projects where each request has to load e.g. a \"user\" model or another context every time. We rolled our own customer Identity Map implementation in a very large app and definitely observed increased performance so I'm glad an official solution is in the works. Thanks!\n", "created_at": "2010-10-08 15:26:44", "user": 2923, "id": 456460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/456467", "text": "Awesome work!\n", "created_at": "2010-10-08 15:28:53", "user": 4595, "id": 456467}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/456657", "text": "This is amazing! I think the best feature is being able to validate on both sides of an association without having to manually stitch them together in the controller.\n\n@author.books.build\n\nbook validates_presence_of :author and author validates_presence_of :book\n\ndoing b = author.books.build; b.author = @author was frustrating at best!\n", "created_at": "2010-10-08 16:46:52", "user": 3238, "id": 456657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/457333", "text": "Nice! I would love to write controller specs with mocking #save without having to mock .find:\n\n<pre>\nsite = Factory :site\nsite.should_receive(:update_attributes).with('foo' => 'bar').and_return(true)\nput :update, :id => site.to_param, :site => { :foo => \"bar\" }\nresponse.should redirect_to(site_url(site))\n</pre>\n\n\nThis actually works now!\n\nAnyway, I've tried it on two real live Rails 3.0 apps and put them on rails master and miloops identimap_branch.\n\nThe first app showed no difference in performance. It has 332 examples, all 3 versions took around 20 seconds to run and around 118MB of RAM used. In the identity_map branch there was one failing spec.\n\nA second project (544 specs) did show some differences between Rails 3.0 and the master branch, but no difference in performance in the identity_map branch. But there were a lot of failing specs though.\n\n3.0 stable: 35 seconds, 272MB, 0 failing specs\nmaster: 29 seconds, 260MB, 2 failing specs\nidentity_map: 29 seconds 260MB, 13 failing specs\n\nThese weren't real benchmarks or anything, I just ran `rake spec` and observed memory usage myself.\nThe failing specs were all different errors, but all related to updating and finding records.\n\nOh, I couldn't get cucumber to run on master or identity_map, which is a shame, because that would've been more representative of real usage.\n", "created_at": "2010-10-08 22:40:02", "user": 12692, "id": 457333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/457341", "text": "_Awesome_ feedback Iain! If you have some extra time, do you think you can give us more information about these extra errors you got?\n", "created_at": "2010-10-08 22:43:57", "user": 9582, "id": 457341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/457416", "text": "It's past midnight here, so I'll be brief:\n\nFrom the first app, a test that failed only in the identity_map branch:\n\n<pre>\nsite = Factory :site\nother_site = Factory :site\nrecruiter = Factory :recruiter, :first_name => \"before-update\", :site_id => site.id\nattrs = Factory.attributes_for(:recruiter, :first_name => \"after-update\", :site_id => other_site.id)\nput :update, :id => recruiter.to_param, :recruiter => attrs\nrecruiter.reload.first_name.should == \"after-update\" # succeeds\nrecruiter.site.should == other_site # fails, still pointing to site, not other_site.\n</pre>\n\n\nI can't really see what's wrong here and why the first_name field does update, but the site_id doesn't. Especially since it works in 3.0 and rails-master. It might be authentication/authorization that doesn't go quite well, because certain signed in users are not allowed to change the site_id. (I'm using devise, cancan and inherited_resources in this controller).\n\nThe other project has been around for a lot longer (was started with rails 3.0.0.beta, if I remember correctly) and has a lot more gem dependencies.\n\nThere were some errors I can understand that come from the identity map. I have these classes:\n\n<pre>\nclass User &lt; ActiveRecord::Base\nend\nmodule Authentication\n  class User &lt; ::User\n  end\nend\n</pre>\n\n\nAnd it sometimes picks the wrong one. This pattern sounded really cool when I first heard about it, but caused me nothing but headaches, but that's besides the point.\n\nI got this one a couple of times:\n\n<pre>\nput :update, :project_id => project.id, :id => comment.id, :comment => { :body => \"\" }, :format => :js\nJSON.parse(response.body).should have_key('errors') # fails\n</pre>\n\n\nAnd some that look like this:\n\n<pre>\nuser = Factory :user\ncomment1 = Factory :comment, :user => user\ncomment2 = Factory :comment, :user => user\nsubject.comments &lt;&lt; comment1 &lt;&lt; comment2\nsubject.save!\nsubject.reload.comments.should == [ comment1, comment2 ]\n</pre>\n\n\nWhere I get just one comment instead of both. But when I removed the call to `reload` it worked again.\nIt works without the reload in 3.0 too, and I'm not entirely sure why I put it there in the first place. I guess putting reload in is one of the first things I try to do when debugging something.\n\nI guess the majority of failing specs fail because they happened to be accidentally passing before. I found a couple instances where I was testing the wrong object. So I think this update will be a huge improvement and help you find bugs faster than before.\n\nEdit: well, that didn't turn out to be very brief at all! :)\n", "created_at": "2010-10-08 23:25:09", "user": 12692, "id": 457416}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/469085", "text": "Hey Iain, you should try it now, in the latests commits i added a middleware to flush identity map on each requests, flush IM on tests and many other things that you can check out in today's commits.\n\nFeel free to add me on IM miloops at gmail in case to discuss any problem you are having.\n", "created_at": "2010-10-14 19:24:37", "user": 3359, "id": 469085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/469175", "text": "It seems to work fine when running the the server, but I still have some issues running my specs. Like this one:\n\n<pre>\n  subject { Factory.build :profile, :first_name => \"Jan\" }\n  it \"accepts utf8\" do\n    subject.first_name = \"‚òÉ\"\n    subject.save!\n    subject.reload.first_name.should == \"‚òÉ\"\n  end\n</pre>\n\n\nWhen I run `rake spec:models`, or `rspec spec/models/profile_spec.rb`, it works passes.\nWhen I run `rake spec` it fails. Weirdly enough, it returns the default value from the factory, even though I never mention that in my specs:\n\n<pre>\n  6) Profile accepts utf8\n     Failure/Error: subject.reload.first_name.should == \"‚òÉ\"\n     expected: \"\\342\\230\\203\",\n          got: \"Kees\" (using ==)\n     # ./spec/models/profile_spec.rb:34\n</pre>\n\n\nI don't have any time anymore tonight, but I'll be happy to discuss it with you soon.\n", "created_at": "2010-10-14 20:07:13", "user": 12692, "id": 469175}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/469255", "text": "Iain, you are using rspec, so a callback that we added to ActiveSupport::TestCase is not being executed. Please try adding the code below (it should run before each test in the whole suite):\n\n```\nbefore(:each) do\n  ActiveRecord::IdentityMap.clear\nend\n```\n\nIt will likely solve the issue. :)\n", "created_at": "2010-10-14 20:35:14", "user": 9582, "id": 469255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/472054", "text": "I found one bug in rails master (not specific to identity map):\n\n<pre>\n>> Project.select(:id).map(&:id)\n  Project Load (2.6ms)  SELECT 'id' FROM `projects`\n=> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, etc...\n>> Project.select('id').map(&:id)\n  Project Load (0.7ms)  SELECT id FROM `projects`\n=> [7, 16, 76, 92, 98, 101, 102, 116, etc....\n</pre>\n\n\nOn a more related note, the only other issue I could find was that ActiveRecord::IdentityMap.clear doesn't clear the aggregation cache. I'm not sure whether it should, but it is something that broke my controller spec:\n\n<pre>\nit \"shows errors for invalid comment when html\" do\n  comment.clear_aggregation_cache\n  put :update, :project_id => project.id, :id => comment.id, :comment => { :body => \"\" }\n  assigns(:comment).should_not be_valid # fails without the clear_aggregation_cache 2 lines up\n  response.should render_template(:edit)\nend\n</pre>\n\n\nI couldn't find anything else.\n", "created_at": "2010-10-15 22:12:20", "user": 12692, "id": 472054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/669509", "text": "Jose,\n\nHow does this mesh with Rack::FiberPool and EventMachine-based DB adapters that run every request in its own fiber?\n\nThanks for your work on this,\n\n-Alex\n", "created_at": "2011-01-11 16:45:55", "user": 15478, "id": 669509}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1003082", "text": "AWESOME!\n", "created_at": "2011-04-14 19:23:18", "user": 28212, "id": 1003082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1058327", "text": "very cool! i am waiting for release in stable\n", "created_at": "2011-04-26 14:04:56", "user": 226270, "id": 1058327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1060165", "text": "Why is this tied to ActiveRecord and not an ActiveModel functionality? \nI wanted to add support for SimplyStored (CouchDB wrapper) but it seems wrong to require ActiveRecord...\n", "created_at": "2011-04-26 19:27:28", "user": 5873, "id": 1060165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1060176", "text": "I believe the part of IdentityMap that is agnostic is actually quite small. Most of concerns are actually in cleaning up the identity map and identifying all the situations that require so. If you think there is a significant part of the identity map that could be moved to ActiveModel, please do provide a patch!\n", "created_at": "2011-04-26 19:29:45", "user": 9582, "id": 1060176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1060241", "text": "I'm taking about https://github.com/rails/rails/blob/master/activerecord/lib/active_record/identity_map.rb\n\nThis looks totaly generic to me and could be copied for my SimplyStored IdentityMap. I'll see that I extract it.\n", "created_at": "2011-04-26 19:42:43", "user": 5873, "id": 1060241}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 77, "updated_at": "2014-07-03 03:41:04", "user": 4371, "closed_at": "2010-10-10 06:34:09", "id": 355151, "title": "Untitled", "url": "https://api.github.com/repos/rails/rails/issues/77", "created_at": "2010-10-10 04:15:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/458987", "text": "Thanks for the patch but we need the backslash, otherwise it appears marked as a class in the final docs.\n", "created_at": "2010-10-10 06:34:09", "user": 9582, "id": 458987}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 78, "updated_at": "2014-07-03 03:41:08", "user": 150485, "closed_at": "2010-10-13 02:51:04", "id": 359277, "title": "Doc typo fix", "url": "https://api.github.com/repos/rails/rails/issues/78", "created_at": "2010-10-12 19:48:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/464371", "text": "Please push it straight to lifo/docrails instead.\n", "created_at": "2010-10-12 19:51:05", "user": 9582, "id": 464371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/464374", "text": "ok, sure\n", "created_at": "2010-10-12 19:52:41", "user": 150485, "id": 464374}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Copying static assets to application's public directory is saner way of handling engines' assets. This commits remove railties:create_symlinks rake task in favor of foo:install:assets (where foo is engine's name).\n\nThe implementation is really straightforward and simple, all the files from engine's public directory are copied to application. It is done with Generators::Base#copy_file, so if files differ user will be asked if the file should be replaced.\n\nI don't see a need for anything more sophisticated, as in 3.1 preferred way of handling assets will be to keep them in app/assets and API behind that will be probably used to properly handle engines' assets.\n", "labels": [], "number": 79, "updated_at": "2014-07-03 03:41:10", "user": 5004, "closed_at": "2010-10-15 21:57:17", "id": 361524, "title": "rake foo:install:assets instead of create_symlinks for engines", "url": "https://api.github.com/repos/rails/rails/issues/79", "created_at": "2010-10-14 00:04:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "No need to define `#caching_allowed` here. It's already defined in http://github.com/rails/rails/blob/master/actionpack/lib/action_controller/caching.rb#L70-72\n", "labels": [], "number": 80, "updated_at": "2014-07-03 03:41:17", "user": 150485, "closed_at": "2010-10-18 19:31:22", "id": 366635, "title": "Cache DRYup", "url": "https://api.github.com/repos/rails/rails/issues/80", "created_at": "2010-10-17 10:37:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/474634", "text": "krekoten the change seems good. But two things first can you add a test case for caching_allowed? and also status should be always an integer unless you have a failing test for this.\n", "created_at": "2010-10-17 22:34:58", "user": 52642, "id": 474634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/475108", "text": "Hi spastorino! There are already test cases [here](http://github.com/rails/rails/blob/master/actionpack/test/controller/caching_test.rb#L90-94) and [here](http://github.com/rails/rails/blob/master/actionpack/test/controller/caching_test.rb#L126-136) for `#caching_allowed?`. Also there is [test case](http://github.com/rails/rails/blob/master/actionpack/test/controller/caching_test.rb#L181-184) which shows that status not always `Integer`. But if you want I can provide more specifically test case with status `200 OK`.\n\nThank you in advance!\n", "created_at": "2010-10-18 07:51:02", "user": 150485, "id": 475108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/475742", "text": "Santiago, what do you think of it now?\n", "created_at": "2010-10-18 14:54:43", "user": 150485, "id": 475742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/476046", "text": "Looks great. But two things first I don't like the tests DRYup commit because makes the tests less readable and is not a huge win.\nAlso I prefer if you join the latest two commits so we have in one commit the to_i stuff with its tests.\n\nSo +1 on http://github.com/krekoten/rails/commit/dda7d48d82290de39b2668710e1746fb6e102d90 and please merge http://github.com/krekoten/rails/commit/218278503ac6d8049d11d245b4df8cb2c1789a2c and http://github.com/krekoten/rails/commit/07f3e09d7f514ddeec9dc1738274746017d98bf1 and I will apply ASAP.\n\nThanks a lot, ;)\n", "created_at": "2010-10-18 17:02:05", "user": 52642, "id": 476046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/476367", "text": "Sure, I'll create another pull request. Btw, I found that you were right. `#to_i` is not needed in `#cache_allowed?`. It is still possible to specify custom status code and get error but it's not cache problem. I'll create another pull request for status issue too.\n", "created_at": "2010-10-18 18:54:29", "user": 150485, "id": 476367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/476371", "text": "No need for new pull request :) Just deleted and created branch again.\n", "created_at": "2010-10-18 18:56:21", "user": 150485, "id": 476371}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Tiny DRYup and refactoring to interface.\n", "labels": [], "number": 81, "updated_at": "2014-07-03 03:41:19", "user": 150485, "closed_at": "2010-10-18 03:20:27", "id": 367099, "title": "Interface not implementation", "url": "https://api.github.com/repos/rails/rails/issues/81", "created_at": "2010-10-17 19:40:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/474441", "text": "This is the done way it is done for performance reasons. Accessing a method is slower than accessing an instance variable. Accessing a method that always executes a ||= {}, is even slower. We need this fast because we may execute this more than one time during the request.\n", "created_at": "2010-10-17 20:20:27", "user": 9582, "id": 474441}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/474445", "text": "ok. thx for tip.\n", "created_at": "2010-10-17 20:23:23", "user": 150485, "id": 474445}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/474454", "text": "Btw, instance variables should be initialized in the initialize method, not using @foo ||= {} pattern.\n", "created_at": "2010-10-17 20:27:18", "user": 9582, "id": 474454}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/474475", "text": "Ok, I agree. But if we care about performance, than why use local var in `set_conditional_cache_control!` alongside with @cache_control itself? And also `attr_reader :etag` would be faster than `def etag`. If you are ok with such changes I can create new pull request. What do you think?\n\nThank you in advance!\n", "created_at": "2010-10-17 20:40:31", "user": 150485, "id": 474475}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/474478", "text": "Looking up a local var is faster than an instance var. attr_reader :etag sounds great.\n", "created_at": "2010-10-17 20:42:18", "user": 9582, "id": 474478}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[Benchmark](http://gist.github.com/631282)\n", "labels": [], "number": 82, "updated_at": "2014-07-03 03:41:23", "user": 150485, "closed_at": "2010-10-17 22:58:28", "id": 367200, "title": "Little speedup", "url": "https://api.github.com/repos/rails/rails/issues/82", "created_at": "2010-10-17 21:13:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Update prototype javascript files to last versions\n", "labels": [], "number": 83, "updated_at": "2014-07-03 03:41:26", "user": 10926, "closed_at": "2011-01-10 19:22:55", "id": 368003, "title": "Update prototype js", "url": "https://api.github.com/repos/rails/rails/issues/83", "created_at": "2010-10-18 10:31:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665251", "text": "Cool. Could you bump to the new 1.7 release?\n", "created_at": "2011-01-10 00:10:17", "user": 199, "id": 665251}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/667088", "text": "Not needed in master\n", "created_at": "2011-01-10 19:22:55", "user": 10926, "id": 667088}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1727236", "text": "please upgrade prototype.js to 1.7 to resolve ie9 ajax issue.\n\nsee issue #1970 and comments by Matt S at http://stackoverflow.com/questions/3772450/rails-3-method-delete-doesnt-work-in-internet-explorer\n", "created_at": "2011-08-04 14:09:06", "user": 445459, "id": 1727236}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 84, "updated_at": "2014-06-29 04:39:16", "user": 150485, "closed_at": "2010-10-18 19:34:27", "id": 368873, "title": "Response status code", "url": "https://api.github.com/repos/rails/rails/issues/84", "created_at": "2010-10-18 19:04:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 85, "updated_at": "2014-06-25 23:18:00", "user": 150485, "closed_at": "2011-01-10 00:09:19", "id": 369183, "title": "Show exception refactoring", "url": "https://api.github.com/repos/rails/rails/issues/85", "created_at": "2010-10-18 21:12:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665248", "text": "Thanks!\n", "created_at": "2011-01-10 00:09:19", "user": 199, "id": 665248}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Instead of dropping and adding and index use ALTER INDEX ... RENAME TO ... syntax\n", "labels": [], "number": 86, "updated_at": "2014-06-26 14:17:35", "user": 70491, "closed_at": "2010-10-19 13:03:22", "id": 369468, "title": "Postgres - faster index renaming ", "url": "https://api.github.com/repos/rails/rails/issues/86", "created_at": "2010-10-19 00:23:48", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Should fix: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5818-character-in-column-name-causes-activemodel-error#ticket-5818-4\n", "labels": [], "number": 87, "updated_at": "2014-07-03 03:41:41", "user": 65587, "closed_at": "2010-11-14 09:25:44", "id": 379030, "title": "Fix 5818", "url": "https://api.github.com/repos/rails/rails/issues/87", "created_at": "2010-10-24 09:47:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add support for Object#try to just invoke a block if no method to be called has been given. This replaces the need for other hacks like unless_blank? { code } and if_present? { code } off of an existing method and paradigm.\n\nExample:\n\n```\n@person = Struct.new(:first_name, :last_name).new(\"David\", \"Heinemeier Hansson\")\n@person.try { |p| \"#{p.first_name} #{p.last_name}\" } # => \"David Heinemeier Hansson\"\n```\n", "labels": [], "number": 88, "updated_at": "2014-06-26 16:59:31", "user": 348, "closed_at": "2010-11-14 09:25:40", "id": 383886, "title": "Try block", "url": "https://api.github.com/repos/rails/rails/issues/88", "created_at": "2010-10-26 22:22:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "No biggie...\n", "labels": [], "number": 89, "updated_at": "2014-07-03 03:41:46", "user": 121322, "closed_at": "2010-10-28 21:40:29", "id": 387879, "title": "README.rdoc - all references to Rails prefixed with a backslash...", "url": "https://api.github.com/repos/rails/rails/issues/89", "created_at": "2010-10-28 21:22:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/500669", "text": "Thanks.\n\nThese are necessary nonetheless: they prevent RDoc from autolinking the word Rails. This README.rdoc is the home page of the API.\n", "created_at": "2010-10-28 21:40:29", "user": 3387, "id": 500669}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added missing AS require to active_model/naming.rb\n\nWe saw a failing spec when running the DataMapper\nActiveModel compliance specs for dm-active_model.\n\n  ActiveModel::Naming#model_name\n\nrelies on the Module#parents method defined in\n\n  active_support/core_ext/module/introspection.rb\n\nAdding the appropriate require statement of course\nfixed our specs.\n", "labels": [], "number": 90, "updated_at": "2014-06-25 04:41:00", "user": 1186, "closed_at": "2010-11-03 02:21:30", "id": 388926, "title": "Added missing AS require to active_model/naming.rb", "url": "https://api.github.com/repos/rails/rails/issues/90", "created_at": "2010-10-29 12:57:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/513691", "text": "This was applied on master.\nI haven't check it but Is this not an issue on 3-0-stable?.\nThanks!.\n", "created_at": "2010-11-03 02:21:30", "user": 52642, "id": 513691}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently if you pass a single hash to respond_with, it assumes it is the options hash, but if there's a single argument, I think the more correct assumption is that it is the resource. This commit adds a special case for a single argument to avoid calling `extract_options!`\n", "labels": [], "number": 91, "updated_at": "2014-07-03 03:41:52", "user": 1839, "closed_at": "2010-11-05 22:58:42", "id": 401693, "title": "fix respond_with when responding with a simple hash", "url": "https://api.github.com/repos/rails/rails/issues/91", "created_at": "2010-11-05 02:35:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Commit\n3146aa68fd03ea4392b45f1c8771675a9c850471 Fixes queries using limits and punctuation in order, removes order(\"col1, col2\") usage in favor of order([\"col1\", \"col2\"})\nadded tests test_finding_with_complex_order and test_finding_with_complex_order_and_limit with complex functions and one particular function RADIANS is not available in Oracle. I modified these tests to pass on Oracle.\n\nAnd it would be good not to include such database specific functions in general test as it might fail also on many other less popular databases as well.\n", "labels": [], "number": 92, "updated_at": "2014-06-26 22:35:22", "user": 4736, "closed_at": "2010-11-06 23:10:14", "id": 404154, "title": "fixed test_finding_with_complex_order and test_finding_with_complex_order_and_limit for Oracle", "url": "https://api.github.com/repos/rails/rails/issues/92", "created_at": "2010-11-06 17:10:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/522853", "text": "It seems that REPLACE function is one of the few functions which has the same name and syntax in all main databases (see http://troels.arvin.dk/db/rdbms/#functions-REPLACE) - tested that it works on MySQL, PostgreSQL, SQLite3, Oracle. According to included link it should work also on MS SQL and DB2.\n\nCreated new pull request https://github.com/rails/rails/pull/93\n", "created_at": "2010-11-06 21:15:18", "user": 4736, "id": 522853}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This replaces previous pull request https://github.com/rails/rails/pull/92\n\nRedefined test_finding_with_complex_order_and_limit and test_finding_with_complex_order to use REPLACE functions which seems to be one of the rare functions which has the same name and syntax in all main databases (see http://troels.arvin.dk/db/rdbms/#functions-REPLACE).\n", "labels": [], "number": 93, "updated_at": "2014-06-30 02:08:12", "user": 4736, "closed_at": "2010-11-07 12:00:33", "id": 404407, "title": "Order by complex function", "url": "https://api.github.com/repos/rails/rails/issues/93", "created_at": "2010-11-06 21:12:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/522968", "text": "Hey rsim, your new query doesn't make PostgreSQL fail without my new code so is actually not testing as expected :(.\nWe need something like ...\nTag.includes(:taggings).order(\"REPLACE('abc', taggings.super_tag_id, taggings.super_tag_id)\").limit(1).to_a\nJust change it and test it on each db ;).\nThanks again.\n", "created_at": "2010-11-06 22:41:48", "user": 52642, "id": 522968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/523502", "text": "I updated tests to use REPLACE('abc', taggings.taggable_type, taggings.taggable_type) as PostgreSQL didn't do automatic conversion from integer to string in REPLACE arguments.\n\nIn addition I fixed PostgreSQL adapter bug that it did not correctly remove ASC/DESC modifiers if there was space inside complex function (after comma).\n\nIs it now good enough? :)\n", "created_at": "2010-11-07 09:09:45", "user": 4736, "id": 523502}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've prepared a generator for rails plugins, which generates basic structure for rails extension:\n- lib dir with\n- tests with dummy application at test/dummy (the easiest way to test rails extension is to run tests with real rails app)\n- gemspec\n\nIt's very similar to http://github.com/josevalim/enginex, but ported to rails with support for PluginBuilder (like AppBuilder) and templates (eg. `rails plugin new foo -m some_template.rb`).\n\nThere is also --full option which will generate integration tests, which is handy when you want to make a rails engine. To create mountable engine you can pass --mountable option, which will additionally create routes file and engine definition and automatically mount engine in dummy application.\n", "labels": [], "number": 94, "updated_at": "2014-07-03 03:42:01", "user": 5004, "closed_at": "2010-11-11 19:03:06", "id": 404438, "title": "`rails plugin new` generator", "url": "https://api.github.com/repos/rails/rails/issues/94", "created_at": "2010-11-06 21:41:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just added a method assert_valid, it always helpful for me when i'm testing something.\nAll tests are passing and the TestCase documentation was updated.\n", "labels": [], "number": 95, "updated_at": "2014-06-13 12:17:17", "user": 105491, "closed_at": "2010-11-09 16:52:02", "id": 407872, "title": "Added assert_valid for ActiveSupport::TestCase", "url": "https://api.github.com/repos/rails/rails/issues/95", "created_at": "2010-11-09 00:09:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/528340", "text": "In general these kind of assertions have been traditionally avoided. assert @model.valid? is preferred.\n\nThe only exception that I remember is assert_blank. That one is provided because T::U has assert_nil, and blank is kinda Rails' nil in practice so to speak. It deserves an assertion like assert_nil. Then assert_present goes for symmetry.\n", "created_at": "2010-11-09 08:52:02", "user": 3387, "id": 528340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/529904", "text": "For what it's worth, we actually added this assertion back into our rails project after it was deprecated, since assert_valid displays the validation errors, while assert @model.valid? just displays '<false> should be true.', which is totally unhelpful. Sure, you can stuff those into the 'message' parameter, but then you're typing \"Model should be valid: #{@model.errors.full_messages.join('\\n')}\" every time you try to assert the validity of a model, which you'll eventually DRY into a custom assertion method.\n\nNot that I'd necessarily want Rails to provide it, but I can see why this particular custom assertion would be useful.\n", "created_at": "2010-11-09 20:20:32", "user": 1020, "id": 529904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/529930", "text": "Thank's fxn  and justinweiss that was exactly what i mean, anyway i will provide this assertion as a library for my projects, thanks again for the heads up.\n", "created_at": "2010-11-09 20:33:22", "user": 105491, "id": 529930}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For ticket:\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5936-sharedmethods-functionality-for-activesupportconcern\n\n-Matt\n", "labels": [], "number": 96, "updated_at": "2014-07-03 03:42:09", "user": 14773, "closed_at": "2010-11-14 09:20:34", "id": 408284, "title": "SharedMethods to Concern", "url": "https://api.github.com/repos/rails/rails/issues/96", "created_at": "2010-11-09 06:23:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The current documentation says: 'The validation process on save can be skipped by passing false.'.\nBut it was deprecated, so it should say: The validation process on save can be skipped by passing :validate => false\".\n", "labels": [], "number": 97, "updated_at": "2014-07-03 03:42:12", "user": 21772, "closed_at": "2010-11-10 07:46:09", "id": 410066, "title": "Updates documentation for save method in ActiveRecord::Validations.", "url": "https://api.github.com/repos/rails/rails/issues/97", "created_at": "2010-11-10 01:51:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/531062", "text": "Could you please send documentation fixes to github.com/lifo/docrails? it is a public repository and everyone can commit in it. Thanks!\n", "created_at": "2010-11-10 07:46:09", "user": 9582, "id": 531062}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This should fix https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5953\n\nLighthouse doesnt want my diff so I'm doing a pull request.. I hope this is the new way of doing it :)\n", "labels": [], "number": 98, "updated_at": "2014-06-19 08:28:39", "user": 108369, "closed_at": "2010-11-14 09:20:11", "id": 413347, "title": "5953 sti type is not updatable", "url": "https://api.github.com/repos/rails/rails/issues/98", "created_at": "2010-11-11 17:53:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Replaces the message:\n`ActiveRecord::RecordNotFound: Couldn't find Foo with ID=1`\n\nby:\n`ActiveRecord::RecordNotFound: Couldn't find Foo with my_primary_key=1`\n", "labels": [], "number": 99, "updated_at": "2014-06-26 15:28:00", "user": 108369, "closed_at": "2010-11-12 22:15:40", "id": 415880, "title": "AR::RecordNotFound explicit message", "url": "https://api.github.com/repos/rails/rails/issues/99", "created_at": "2010-11-12 21:59:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/538004", "text": "Sweet! Could you please add a test using a non-default primary key?\n", "created_at": "2010-11-12 22:15:40", "user": 9582, "id": 538004}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 100, "updated_at": "2014-06-26 16:59:33", "user": 108369, "closed_at": "2010-11-12 22:32:36", "id": 415925, "title": "Nicer error message on AR::RecordNotFound exceptions", "url": "https://api.github.com/repos/rails/rails/issues/100", "created_at": "2010-11-12 22:31:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/538044", "text": "Applied. thanks.\n", "created_at": "2010-11-12 22:32:36", "user": 9582, "id": 538044}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Link to LH : https://rails.lighthouseapp.com/projects/8994/tickets/5277-rails-300rc-responds-strangely-to-empty-accept-header\n", "labels": [], "number": 101, "updated_at": "2014-06-27 05:56:31", "user": 108369, "closed_at": "2010-11-14 17:19:17", "id": 417373, "title": "Lighthouse/5277: Empty HTTP_ACCEPT means the clients accept all media types", "url": "https://api.github.com/repos/rails/rails/issues/101", "created_at": "2010-11-13 22:53:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/540301", "text": "The patch looks almost good! I would just set a default accept header in the accepts method and not in formats. And could I ask you to send the patches to LH instead if we have an open ticket? Otherwise the discussion is broken in two different places. Thanks!\n", "created_at": "2010-11-14 09:19:17", "user": 9582, "id": 540301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/541257", "text": "Ugh, it seems github lost our comments. :)\n\nSo, can you please send a new pull request with all the commits that need to be included? Thanks a lot :)\n", "created_at": "2010-11-15 09:04:26", "user": 9582, "id": 541257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/541265", "text": "Eheh no prob: https://github.com/rails/rails/pull/104\n", "created_at": "2010-11-15 09:08:35", "user": 108369, "id": 541265}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Link to lighthouse issue:\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5956-hashwithindifferentaccess-should-not-change-the-class-of-an-array#ticket-5956-5\n", "labels": [], "number": 102, "updated_at": "2014-06-16 00:22:51", "user": 35866, "closed_at": "2010-11-14 17:15:03", "id": 417786, "title": "LH#5956 Hash with indifferent access should not change array subclass", "url": "https://api.github.com/repos/rails/rails/issues/102", "created_at": "2010-11-14 07:18:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/540243", "text": "+1\n", "created_at": "2010-11-14 07:40:50", "user": 108369, "id": 540243}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/540297", "text": "Applied.\n", "created_at": "2010-11-14 09:15:04", "user": 9582, "id": 540297}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Some quick wins in both test and libs (ActiveRecord and ActionPack):\n- Used `map` + `join` instead of `inject`\n- Used `collect` + `sum` instead of `inject`\n- Preferred duck-typing (ie `respond_to?`) over `is_a?`\n", "labels": [], "number": 103, "updated_at": "2014-07-03 03:42:30", "user": 108369, "closed_at": "2010-11-27 08:38:46", "id": 418128, "title": "Small performance improvements", "url": "https://api.github.com/repos/rails/rails/issues/103", "created_at": "2010-11-15 00:11:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/540855", "text": "It looks like all \"inject replacement\" in these patches is done in tests (except for 3c89666).  I'd rather we don't change the tests.  Those places using inject in the tests are not hotspots for performance issues.\n", "created_at": "2010-11-15 02:44:04", "user": 3124, "id": 540855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/541128", "text": "Hi Aaron, thanks for taking time to read the code.\n\nI started to look at the test code because I probably ran the test suite for ActiveRecord a thousand time this weekend and started to feel like it could be just a little bit faster.\n\nTell me if you want me to isolate the changes I've done on AR::Base (3c89666) or if you want to cherry-pick it.\n", "created_at": "2010-11-15 07:15:13", "user": 108369, "id": 541128}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "New pull request asked [here](https://github.com/rails/rails/pull/101#issuecomment-541257) due to yesterday's outage that lost our comments.\n", "labels": [], "number": 104, "updated_at": "2014-07-03 03:42:36", "user": 108369, "closed_at": "2011-02-01 21:05:20", "id": 418655, "title": "Lighthouse/5277 2", "url": "https://api.github.com/repos/rails/rails/issues/104", "created_at": "2010-11-15 09:08:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/541279", "text": "Should I apply just this commit? Should I also include the test case from previously?\n", "created_at": "2010-11-15 09:18:04", "user": 9582, "id": 541279}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/541292", "text": "The test case should be included yes: https://github.com/cesario/rails/commit/121072103522a3920961bc44b63d1bf3987234b9\n\nThis was a patch provided by `egh`, I forgot to put it in the new pull request.\n\nTell me if you want to cherry-pick or if I should just repush my local repo and give you the link. Sorry about this.\n", "created_at": "2010-11-15 09:25:48", "user": 108369, "id": 541292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/541296", "text": "No problem, I can cherry-pick it.\n", "created_at": "2010-11-15 09:28:40", "user": 9582, "id": 541296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/582271", "text": "With the last update Neeraj and you have done on master, is this pull request still needed?\n", "created_at": "2010-12-01 23:11:03", "user": 108369, "id": 582271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/730088", "text": "cesario I'm closing this pull request please feel free to reopen it if the issue still exists\n", "created_at": "2011-02-01 21:05:20", "user": 52642, "id": 730088}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix misspelling of 'deprecation' in plugin_generator.\n", "labels": [], "number": 105, "updated_at": "2014-07-03 03:42:38", "user": 30452, "closed_at": "2010-11-16 07:37:44", "id": 421363, "title": "Plugin gen typos", "url": "https://api.github.com/repos/rails/rails/issues/105", "created_at": "2010-11-16 05:28:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "From commit message:\n    In older rails versions there was a way to use only helpers from\n    helper file corresponding to current controller and you could also\n    include all helpers by saying 'helper :all' in controller. This config\n    allows to return to older behavior by setting it to false.\n", "labels": [], "number": 106, "updated_at": "2014-06-12 15:43:51", "user": 5004, "closed_at": "2010-11-17 23:27:32", "id": 425190, "title": "config.action_controller.include_all_helpers", "url": "https://api.github.com/repos/rails/rails/issues/106", "created_at": "2010-11-17 23:15:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is the issue on 3-0-stable: https://rails.lighthouseapp.com/projects/8994/tickets/5878-railtie-initializers-are-not-executed-in-rake-tasks and it works on edge. This commit contains simple test to ensure that this will not be broken again.\n", "labels": [], "number": 107, "updated_at": "2014-06-26 18:40:17", "user": 5004, "closed_at": "2010-11-18 17:07:48", "id": 426506, "title": "test to ensure that initializers are executed in rake tasks", "url": "https://api.github.com/repos/rails/rails/issues/107", "created_at": "2010-11-18 16:27:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, button_to's generated form element is hard coded to having the class \"button_to\".\n\nThis is somewhat inconvenient when trying to hook forms for ajax trickery, as the only class you control is the class of the submit element.\n\nIf, for instance, you've got several actions rendered as button_to, the only way to properly hook the submits would be to use 'form:has(.some-action-class)' selectors, which is quite convoluted.\n\nThis patch adds the :form_class modifier to button_to's html_options.\n", "labels": [], "number": 108, "updated_at": "2014-06-26 18:40:19", "user": 1037, "closed_at": "2011-02-01 21:12:42", "id": 428971, "title": "Customizable form class", "url": "https://api.github.com/repos/rails/rails/issues/108", "created_at": "2010-11-19 18:33:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/695910", "text": "This is great! I need it right now.\n", "created_at": "2011-01-21 13:34:17", "user": 221614, "id": 695910}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/730122", "text": "Applied thanks :)\n", "created_at": "2011-02-01 21:12:42", "user": 52642, "id": 730122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1399686", "text": "Will this patch be available on 3.0.x versions?\n", "created_at": "2011-06-19 23:21:31", "user": 9344, "id": 1399686}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 109, "updated_at": "2014-06-26 18:40:22", "user": 17034, "closed_at": "2011-01-10 00:07:38", "id": 429304, "title": "Merged ActiveRecord changelog changes from 3-0-stable to master", "url": "https://api.github.com/repos/rails/rails/issues/109", "created_at": "2010-11-19 21:49:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665244", "text": "Thanks!\n", "created_at": "2011-01-10 00:07:38", "user": 199, "id": 665244}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I removed unneeded local variables that were defined in ActiveRecord and a few explicit returns.\n", "labels": [], "number": 110, "updated_at": "2014-06-26 18:40:24", "user": 3359, "closed_at": "2010-11-20 17:04:43", "id": 430195, "title": "Active Record goodness", "url": "https://api.github.com/repos/rails/rails/issues/110", "created_at": "2010-11-20 17:01:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/555787", "text": "Grrr sent wrong branch pull request, sorry!\n", "created_at": "2010-11-20 17:04:04", "user": 3359, "id": 555787}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I removed unneeded local variables that were defined in ActiveRecord and a few explicit returns.\n", "labels": [], "number": 111, "updated_at": "2014-06-26 18:04:18", "user": 3359, "closed_at": "2011-01-09 23:26:59", "id": 430199, "title": "Active Record goodness", "url": "https://api.github.com/repos/rails/rails/issues/111", "created_at": "2010-11-20 17:05:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665158", "text": "Looks like these were already merged. Thanks Emilio!\n", "created_at": "2011-01-09 23:26:59", "user": 199, "id": 665158}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As suggested by Aaron in email removed redundant database configuration \"ids_in_list_limit \" from abstract_adapter in favor of using \"in_clause_length\" from database_limits.rb\n", "labels": [], "number": 112, "updated_at": "2014-06-20 23:59:27", "user": 12577, "closed_at": "2011-01-19 02:56:27", "id": 433388, "title": "Removed ids_in_list_limit in favor of in_clause_length defined in database_limits.rb ", "url": "https://api.github.com/repos/rails/rails/issues/112", "created_at": "2010-11-22 22:16:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/560876", "text": "I think the default value for in_clause_length method should be changed to nil (meaning no limit) and not 65535 as it is now. I think 65535 value was put just as a placeholder - cannot find that e.g. MySQL has such limit.\n", "created_at": "2010-11-23 07:53:31", "user": 4736, "id": 560876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/561589", "text": "I agree with Raimonds comment and removed the arbitrary 65535 default in another commit\n", "created_at": "2010-11-23 15:01:43", "user": 12577, "id": 561589}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/687481", "text": "This is already merged to master, so I'm closing.\n", "created_at": "2011-01-18 18:56:27", "user": 3124, "id": 687481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/687522", "text": "I think there is one patch that was never merged to change the default limit to nil https://github.com/alexrothenberg/rails/commit/30cf3cc8dbc6a920ae24a88f7cf59d55656a8e1d\n", "created_at": "2011-01-18 19:06:37", "user": 12577, "id": 687522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/687779", "text": "It seems to be there: https://github.com/rails/rails/commit/deb90d94\n", "created_at": "2011-01-18 20:17:02", "user": 3124, "id": 687779}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/687831", "text": "You're totally right.  I'm sorry to be confused :)\n", "created_at": "2011-01-18 20:31:38", "user": 12577, "id": 687831}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The [last changes in the CHANGELOG](https://github.com/rails/rails/blob/0456feab1198456069d4b5a9da221e6fd818e3da/activerecord/CHANGELOG#L3-L12) makes it clear that AR::Base.dup returns an object where new_record? is true. The attached patch clears the timestamps (if they exist) when calling `dup`. If we don't want that behavior though, we should document that `dup` preserves these AR-managed attributes.\n\nIn any case we should also close/mark as invalid that ticket [AR::Clone does not clear out timestamps](https://rails.lighthouseapp.com/projects/8994/tickets/4538-activerecordclone-does-not-clear-out-timestamps)\n", "labels": [], "number": 113, "updated_at": "2014-06-26 18:40:56", "user": 108369, "closed_at": "2010-11-24 19:26:17", "id": 436276, "title": "Dup reset timestamps", "url": "https://api.github.com/repos/rails/rails/issues/113", "created_at": "2010-11-24 08:46:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/563612", "text": "I think the docs should also mention the details about callbacks.\n", "created_at": "2010-11-24 09:17:34", "user": 3387, "id": 563612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/564563", "text": "@cesario perfect, thanks.  I will apply this.\n\n@fxn Not sure where we document this stuff.  The behavior of dup is basically what clone used to do.  If we documented clone somewhere, we need to change it to say \"dup\".\n", "created_at": "2010-11-24 17:17:45", "user": 3124, "id": 564563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/564845", "text": "Here's another pull request documenting the dup behavior, and fixing the typo.\nhttps://github.com/rails/rails/pull/114\n\nThanks!\n", "created_at": "2010-11-24 18:59:51", "user": 108369, "id": 564845}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Here are two changes, fixing the small typo and document that the shallow copy issues by dup does not preserve timestamps. \n", "labels": [], "number": 114, "updated_at": "2014-06-26 18:40:58", "user": 108369, "closed_at": "2010-11-24 19:01:44", "id": 437277, "title": "Polish pull request 113: typo + documentation", "url": "https://api.github.com/repos/rails/rails/issues/114", "created_at": "2010-11-24 18:59:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/564848", "text": "Applied, thanks!\n", "created_at": "2010-11-24 19:01:44", "user": 3124, "id": 564848}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These commits fix https://rails.lighthouseapp.com/projects/8994/tickets/4840-to_xml-doesnt-work-in-such-case-eventselecttitle-as-tto_xml\n", "labels": [], "number": 115, "updated_at": "2014-06-26 18:41:00", "user": 108369, "closed_at": "2010-12-15 22:01:52", "id": 437585, "title": "#LH4840 to_xml doesn't work in such case: Event.select('title as t').to_xml", "url": "https://api.github.com/repos/rails/rails/issues/115", "created_at": "2010-11-24 21:40:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/614725", "text": "I've merged this in.  Thanks guys!\n", "created_at": "2010-12-15 22:01:52", "user": 3124, "id": 614725}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "RubyGems < 1.4 loaded the thread library that provides mutex.\n\nRubyGems 1.4 will not do this, and this will cause even rake tasks to explode with:\n\n```\nuninitialized constant ActiveSupport::Dependencies::Mutex\n```\n\nThis needs backporting to other releases, and i'd strongly recommend getting some point release fixes out soon so that when RubyGems 1.4 is released, all our users don't suffer for updating.\n\nThanks.\n", "labels": [], "number": 116, "updated_at": "2014-06-26 18:41:03", "user": 348, "closed_at": "2010-11-25 06:47:46", "id": 437663, "title": "Mutex", "url": "https://api.github.com/repos/rails/rails/issues/116", "created_at": "2010-11-24 22:25:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/565400", "text": "Applied, thanks!\n", "created_at": "2010-11-24 22:47:46", "user": 3124, "id": 565400}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/847914", "text": "Thanks\n", "created_at": "2011-03-08 16:59:01", "user": 12530, "id": 847914}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "You might not like the rubygems removal, so feel free to back out of that. On 1.8, rake is installed by rubygems, and on 1.9, gem_prelude provides rubygems loading capabilities through require, so it shouldn't be necessary.\n\nRake is always loaded prior to loading a rakefile, so `require 'rake'` is always unnecessary.\n", "labels": [], "number": 117, "updated_at": "2014-06-12 23:26:06", "user": 348, "closed_at": "2010-11-25 06:50:04", "id": 437665, "title": "Idioms - Rakefiles shouldn't need to require rake (or rubygems)", "url": "https://api.github.com/repos/rails/rails/issues/117", "created_at": "2010-11-24 22:27:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/565409", "text": "Applied, thanks!  :-D\n", "created_at": "2010-11-24 22:50:04", "user": 3124, "id": 565409}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/565523", "text": "Wait, how can the Rakefile possibly work without requiring Rake?\n", "created_at": "2010-11-24 23:55:13", "user": 3124, "id": 565523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/565524", "text": "Sorry, forgot to add this in the last comment.\n\n![trollface](http://paradoxdgn.com/junk/avatars/trollface.jpg)\n", "created_at": "2010-11-24 23:56:36", "user": 3124, "id": 565524}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removed the hard-coded timestamp values in `AR::Base#clear_timestamp_attributes`\n", "labels": [], "number": 118, "updated_at": "2014-06-26 18:41:05", "user": 108369, "closed_at": "2011-02-02 14:45:47", "id": 441484, "title": "Removed the hard-coded timestamp values in AR::Base#clear_timestamp_attributes", "url": "https://api.github.com/repos/rails/rails/issues/118", "created_at": "2010-11-27 08:07:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665233", "text": "Looks good. Needs a test case. Thanks!\n", "created_at": "2011-01-10 00:02:13", "user": 199, "id": 665233}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/707594", "text": "GH is nicely handling my force push... In any case i've pushed a [new branch out of master](https://github.com/cesario/rails/tree/dry_up_timestamps_v2) just in case...\n\nThanks Jeremy!\n", "created_at": "2011-01-25 22:45:14", "user": 108369, "id": 707594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/730585", "text": "Can you merge the tests with the commits please, it's easier to review and in the future if we have problems git blame will show you better results ;).\nThanks.\n", "created_at": "2011-02-01 23:21:28", "user": 52642, "id": 730585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/731490", "text": "Hey Santiago,\nI believe the commits are quite consistent:\n- added new tests to untested methods in b7054f2, adb1c5b, fb9c78a and 8beb677.\n- added new private methods in a9b4f90 and 87578de (test + implementation)\n- refactor the code to remove hard coded values in 5e765b2.\n\nShould I just rebase it all?\n", "created_at": "2011-02-02 07:03:44", "user": 108369, "id": 731490}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/732398", "text": "Applied thanks.\n", "created_at": "2011-02-02 14:45:47", "user": 52642, "id": 732398}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "LH won't let me attach diffs...\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5505\n", "labels": [], "number": 119, "updated_at": "2014-06-23 21:52:27", "user": 108369, "closed_at": "2011-02-09 20:32:27", "id": 441542, "title": "LH#5505 ActiveRecord::Base.touch won't dump optimistic locking column.", "url": "https://api.github.com/repos/rails/rails/issues/119", "created_at": "2010-11-27 10:20:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665239", "text": "This duplicates the lock version increment. Could that be extracted?\n", "created_at": "2011-01-10 00:04:48", "user": 199, "id": 665239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/755114", "text": "Pushed\n", "created_at": "2011-02-09 20:32:27", "user": 52642, "id": 755114}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey all, just a small fix for polymorphic belongs_to associations here. The associationproxy should be generating conditions for the association_class instead of using reflection.sanitized_conditions, since that will just give a NameError on something like Note::Notable.\n", "labels": [], "number": 120, "updated_at": "2014-06-26 18:41:11", "user": 14947, "closed_at": "2011-01-07 09:12:59", "id": 441833, "title": "Fix for polymorphic belongs to associationproxy raising errors when loading target", "url": "https://api.github.com/repos/rails/rails/issues/120", "created_at": "2010-11-27 18:16:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/659342", "text": "Disregard this pull request. Here's an updated patch against 3-0-stable: https://gist.github.com/768941 and master: https://gist.github.com/768943\n", "created_at": "2011-01-07 01:12:59", "user": 14947, "id": 659342}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Implements nested through associations. Fully tested and verified. Please see this ticket:\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1152\n", "labels": [], "number": 121, "updated_at": "2014-06-12 20:26:04", "user": 1979, "closed_at": "2011-03-22 17:11:27", "id": 443985, "title": "Nested through associations", "url": "https://api.github.com/repos/rails/rails/issues/121", "created_at": "2010-11-29 10:24:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/572582", "text": "Hey mate, thanks for the pull request. But could you please send this request to Rails mailing list and get feedback from more people?\n\nAt first, I am -1 on this feature. Rails has_many :through, without being nested, already have a few limitations that I really would like to see fixed before adding more complexity. For example, in the case \"User has many groups through subscriptions\", the following does not work:\n\n```\ngroup = user.groups.build\ngroup.save\n```\n\nAs it does not save the associated object subscriptions. Calling .create() works as expected though. The lack of the ability to support a dependent option (like :destroy, :delete) for the associated record is also another limitation (currently we have dangling records). We can find others examples in LH.\n", "created_at": "2010-11-29 10:31:06", "user": 9582, "id": 572582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/581826", "text": "Hi Jose,\n\nThanks for your response.\n\nI did actually bring this up a while ago on the mailing list, see here: http://groups.google.com/group/rubyonrails-core/browse_thread/thread/e103defa9172f142\n\nTo prevent the discussion being split over the ML, Lighthouse _and_ Github, I'm going to respond to you there :)\n\nJon\n", "created_at": "2010-12-01 20:10:37", "user": 1979, "id": 581826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665175", "text": "+1 on this, though it should be clear nested associations are read-only.\n", "created_at": "2011-01-09 23:33:28", "user": 199, "id": 665175}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/669341", "text": "Thanks for the +1 Jeremy. At the moment I am focussing on refactoring/fixing pretty much the whole of the associations code, and then fixing up some outstanding issues with :through associations. I've made some decent progress but there is a way to go yet. As a result my patch is somewhat stale now, so after I've done that I'll update the patch and hopefully we can get it merged. I'll get there eventually :)\n", "created_at": "2011-01-11 15:45:17", "user": 1979, "id": 669341}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "here is the lighthouse ticket\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/5635-postgresql_adapter-doesnt-disable-referential-integrity-for-pg-90\n\nthe gist is;\n\nrails tests are broken on postgres 9.0.1, if using foreign keys\n", "labels": [], "number": 122, "updated_at": "2014-07-03 03:43:43", "user": 8659, "closed_at": "2010-12-09 19:54:55", "id": 445947, "title": "Disable keys for postgres 9.0.1is broken", "url": "https://api.github.com/repos/rails/rails/issues/122", "created_at": "2010-11-30 07:06:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2583784", "text": "Is there any way to see this picked into the 2.3 line?\n", "created_at": "2011-10-31 21:45:57", "user": 41178, "id": 2583784}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 123, "updated_at": "2014-06-24 16:53:03", "user": 150485, "closed_at": "2010-11-30 19:39:36", "id": 446828, "title": "ActiveModel::Errors#to_json generates wrong json string when field has multiple errors", "url": "https://api.github.com/repos/rails/rails/issues/123", "created_at": "2010-11-30 14:57:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/576670", "text": "Why the definition currently in as_json is not enough? What is the difference in the output?\n", "created_at": "2010-11-30 15:01:10", "user": 9582, "id": 576670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/576753", "text": "`{\"name\":\"can not be blank\",\"name\":\"can not be nil\"}` is generated, but it should be\n`{\"name\":[\"can not be blank\",\"can not be nil\"]}`. Currently when you'll try to create object from generated string you'll lose all messages for field except last.\n", "created_at": "2010-11-30 15:06:35", "user": 150485, "id": 576753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/577050", "text": "Hrm, maybe we should change encode_json in ActiveSupport::OrderedHash then? Because if AM::Errors exhibit this weird behavior, I would expect the same to be happening to AS::OrderedHash (as the former inherits from the latter).\n", "created_at": "2010-11-30 15:26:24", "user": 9582, "id": 577050}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/577148", "text": "This issue exists because of overridden `#each`. To fix this I used `#each_pair` in `#encode_json` instead of `#map` which used in `ActiveSupport::OrderedHash#encode_json`. So logic in `ActiveModel::Errors#encode_json` is specific to it.\n", "created_at": "2010-11-30 15:33:01", "user": 150485, "id": 577148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/577163", "text": "Sweet! One last question, as we are overriding encode_json, do we still need to implement as_json or it can be removed?\n", "created_at": "2010-11-30 15:33:55", "user": 9582, "id": 577163}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/577385", "text": "We need it.\n", "created_at": "2010-11-30 15:47:04", "user": 150485, "id": 577385}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If you want to override the value of include_root_in_json for a specific controller and action there is currently no thread-safe way of doing that.\n\nNow you can call @contact.to_json(:root => true) to always have a root, :root => false to always omit the root and :root => 'whatever' now always includes the root 'whatever' (previously it wouldn't include the custom root if specified when include_root_in_json was false).\n", "labels": [], "number": 124, "updated_at": "2014-06-27 10:21:44", "user": 294954, "closed_at": "2010-12-04 04:27:39", "id": 448165, "title": "Allow to_json to override the value of include_root_in_json", "url": "https://api.github.com/repos/rails/rails/issues/124", "created_at": "2010-11-30 22:33:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/587720", "text": "Gah, git newb here. Sorry. I don't want to pull all those other commits.\n", "created_at": "2010-12-04 04:26:52", "user": 294954, "id": 587720}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The recently added support for --javascript and --skip_javascript options checks for the wrong option when determining whether or not to copy the script.aculo.us JS files. Simple one-line patch plus tests resolves it. Lighthouse ticket coming in a jiffy :-)\n", "labels": [], "number": 125, "updated_at": "2014-06-26 18:41:15", "user": 13277, "closed_at": "2010-12-16 16:21:49", "id": 454049, "title": "app generator not including script.aculo.us with Prototype", "url": "https://api.github.com/repos/rails/rails/issues/125", "created_at": "2010-12-03 15:05:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/586322", "text": "[Lighthouse ticket](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6112-app-generator-not-including-scriptaculous-with-prototype).\n", "created_at": "2010-12-03 15:07:40", "user": 13277, "id": 586322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/601962", "text": "+1 on this, looks good to me. \n", "created_at": "2010-12-10 08:13:40", "user": 5004, "id": 601962}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If you used actionmailer, master-branch would not install with bundler due to dependency-issues, which have been sorted out in this commit. The only thing it does is bring the i18n-dependency of actionpack and activemodel up to ~>0.5.0 (same as actionmailer).\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6105-rails-3-cannot-be-installed-from-scratch-due-to-failed-dependency-on-i18n-050\n", "labels": [], "number": 126, "updated_at": "2014-07-03 03:43:58", "user": 8467, "closed_at": "2010-12-04 17:08:07", "id": 455515, "title": "Fixed bug #6105 - Rails 3 cannot be installed from scratch due to failed dependency on i18n 0.5.0", "url": "https://api.github.com/repos/rails/rails/issues/126", "created_at": "2010-12-04 08:56:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I replaced nested ifs with case/when and removed unused variable\n", "labels": [], "number": 127, "updated_at": "2014-07-03 03:44:01", "user": 14978, "closed_at": "2010-12-08 07:01:07", "id": 461123, "title": "ActiveSupport Callbacks clean up", "url": "https://api.github.com/repos/rails/rails/issues/127", "created_at": "2010-12-07 17:35:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/595519", "text": "The firsts two are pushed.\nIn the last one https://github.com/pahanix/rails/commit/5f89e075223dd7f14b8974fc2d6b27671296ef00 seems like you're removing a cache.\n", "created_at": "2010-12-07 23:01:08", "user": 52642, "id": 595519}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, when you maintain an engine and test it against dummy application, there is no way to easily manage database, especially when you need to have migrations in test/dummy application. These patches adds application's tasks to engine's Rakefile namespaced with :app prefix. Additionaly all the tasks in db namespace that deal with migrations, load migrations from both application and engine, so when you call:\n\n```\nrake app:db:migrate\n```\n\nall migrations will be executed.\n", "labels": [], "number": 128, "updated_at": "2014-07-03 03:44:06", "user": 5004, "closed_at": "2010-12-09 15:09:26", "id": 464888, "title": "rake tasks for managing db while engine development and testing", "url": "https://api.github.com/repos/rails/rails/issues/128", "created_at": "2010-12-09 11:05:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adds support to have namespace validators that aren't inside the model itself.\n\n`validates :attr, :'namespace/some' => true` looks for `Namespace::SomeValidator`\n", "labels": [], "number": 129, "updated_at": "2014-06-26 18:41:17", "user": 294954, "closed_at": "2010-12-11 19:31:38", "id": 465684, "title": "Namespaced validators", "url": "https://api.github.com/repos/rails/rails/issues/129", "created_at": "2010-12-09 18:40:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/601964", "text": "Commit looks fine and I think that this is expected behavior.\n", "created_at": "2010-12-10 08:15:10", "user": 5004, "id": 601964}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 130, "updated_at": "2014-06-26 15:28:03", "user": 5004, "closed_at": "2010-12-10 08:04:59", "id": 466594, "title": "require Array.wrap in migration.rb", "url": "https://api.github.com/repos/rails/rails/issues/130", "created_at": "2010-12-10 03:11:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6140-rails-3-generators-wont-invoke-custom-generators\n", "labels": [], "number": 131, "updated_at": "2014-06-26 18:41:21", "user": 5004, "closed_at": "2010-12-11 17:21:47", "id": 467351, "title": "Namespacing generators (#6140)", "url": "https://api.github.com/repos/rails/rails/issues/131", "created_at": "2010-12-10 14:00:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There was an issue that belongs_to associations with autosave enabled calls save and all callbacks every time the parent record was saved. This results in unexpected behaviour. I've changed this to only call save if the associated record is changed.\n", "labels": [], "number": 132, "updated_at": "2014-06-26 18:41:24", "user": 26935, "closed_at": "2011-05-07 10:08:06", "id": 471742, "title": "Lighthouse 3353", "url": "https://api.github.com/repos/rails/rails/issues/132", "created_at": "2010-12-13 14:15:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/781489", "text": "I believe this can be pushed to the 3-0-stable branch as well\n", "created_at": "2011-02-17 10:52:10", "user": 26935, "id": 781489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064261", "text": "This looks good, do you test to make sure assocs are not saved if they have not changed?\n", "created_at": "2011-04-27 13:41:20", "user": 8701, "id": 1064261}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064308", "text": "This seems to be already in master:\n\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/autosave_association.rb#L394\nTest: https://github.com/rails/rails/blob/master/activerecord/test/cases/autosave_association_test.rb#L683\n", "created_at": "2011-04-27 13:51:52", "user": 3359, "id": 1064308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064606", "text": "I added an extra test to check if save is indeed not called when the associated record has not changed.\nThis pull request is indeed already in master for some time. What should i do to get this in a stable release soon?\n", "created_at": "2011-04-27 14:45:41", "user": 26935, "id": 1064606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115049", "text": "@chielwester Rails 3.1 is getting released soon, so I am closing this issue. When 3.1 is out and you feel you need this on 3-0-stable, please reopen the issue. Thanks for your pull request.\n", "created_at": "2011-05-07 10:08:06", "user": 9582, "id": 1115049}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I realize there are plenty of good reasons not to further pollute Enumerable, but I get a lot of use out of this method, and I think other people would find it handy as well.\n", "labels": [], "number": 133, "updated_at": "2014-06-26 18:41:26", "user": 1284, "closed_at": "2010-12-13 17:39:37", "id": 472121, "title": "Enumerable#except", "url": "https://api.github.com/repos/rails/rails/issues/133", "created_at": "2010-12-13 16:46:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/608511", "text": "```\nirb(main):001:0> [1,2,3,4,5] - [2,4]\n=> [1, 3, 5]\nirb(main):002:0> \n```\n", "created_at": "2010-12-13 17:28:39", "user": 3124, "id": 608511}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Regarding to comments for https://github.com/rails/rails/commit/3b9120fa52b76fb8591fe1d0db85d1a940e867d0\n", "labels": [], "number": 134, "updated_at": "2014-06-26 18:41:28", "user": 70491, "closed_at": "2011-02-02 00:51:35", "id": 480371, "title": "Configurable generation of add_index for references columns", "url": "https://api.github.com/repos/rails/rails/issues/134", "created_at": "2010-12-17 16:13:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/618988", "text": "Looks almost perfect. Could we have some tests? :)\n\nTo run railties tests faster, you can do this from railties directory:\n\nrake test TEST_DIR=generators\n", "created_at": "2010-12-17 16:22:30", "user": 9582, "id": 618988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/619100", "text": "You can also do\nruby -I railties/test railties/test/generators/migration_generator_test.rb\n\n:)\n", "created_at": "2010-12-17 17:12:03", "user": 5004, "id": 619100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/619112", "text": "Yes! But remember to run all generators tests to ensure we won't have regressions. :)\n", "created_at": "2010-12-17 17:15:40", "user": 9582, "id": 619112}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/619552", "text": "yeah tests, shame on me ;)\n", "created_at": "2010-12-17 20:30:52", "user": 70491, "id": 619552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/666127", "text": "could we get on with this? ;)\n", "created_at": "2011-01-10 12:39:36", "user": 70491, "id": 666127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/728759", "text": "miomnicki looks perfect for me can you merge the tests and fix in one commit, I will push it as soon as you merge it.\nThanks for your work :)\n", "created_at": "2011-02-01 15:15:17", "user": 52642, "id": 728759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/729065", "text": "@spastorino I've just merged it.\n\nThanks!\n", "created_at": "2011-02-01 16:30:44", "user": 70491, "id": 729065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/729078", "text": "miomnicki sorry but doesn't apply cleanly on master :(.\nCan you rebase it?\n", "created_at": "2011-02-01 16:35:10", "user": 52642, "id": 729078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/730456", "text": "@spastorino, done. I hope it will be fine eventually ;)\n", "created_at": "2011-02-01 22:43:40", "user": 70491, "id": 730456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/730848", "text": "Pushed, thanks :)\n", "created_at": "2011-02-02 00:51:35", "user": 52642, "id": 730848}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I took some pieces of (ActiveValidators)[https://github.com/cesario/activevalidators] and added it to ActiveModel.\n\n```\nhas_secure_password :strength => :strong\n```\n\nnow accepts an option`:strength`, which can be `weak`, `medium` and `strong`\n\nBy default the 7 chars policy + WEAK_PASSWORD array are evaluated, if they are all OK, the `strength` will use the right regex.\n", "labels": [], "number": 135, "updated_at": "2014-06-26 18:41:31", "user": 108369, "closed_at": "2010-12-19 19:48:24", "id": 482622, "title": "SecurePassword with a standalone PasswordValidator", "url": "https://api.github.com/repos/rails/rails/issues/135", "created_at": "2010-12-19 09:25:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/622331", "text": "This is really poorly implemented. \n\n<pre>\nrecord.errors.add(:password, \"is too weak and common\")\n</pre>\n\n\n1) Errors are added on :password attribute instead of the attribute user wanted to validate\n2) Previous implementation was I18n aware. This is not. English message is always added.\n\nNice idea but needs much better implementation in my opinion.\n", "created_at": "2010-12-19 11:02:40", "user": 65587, "id": 622331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/622335", "text": "Agreed. Do you see anything else that should be improved?\n\nThanks for your review!\n", "created_at": "2010-12-19 11:05:19", "user": 108369, "id": 622335}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/622381", "text": "Thanks for the pull requests, the SecurePassword module is meant to be very very simple. We have a huge amount of authentication solutions today and if someone wants something more robust, with several options, I recommend them to use it, not Rails one.\n", "created_at": "2010-12-19 11:48:24", "user": 9582, "id": 622381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/622409", "text": "Alright, thanks anyway for reviewing it :)\n", "created_at": "2010-12-19 12:13:33", "user": 108369, "id": 622409}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Cleans up tests a bit.\n", "labels": [], "number": 136, "updated_at": "2014-06-26 18:41:34", "user": 98601, "closed_at": "2010-12-20 03:30:08", "id": 483132, "title": "Use assert_body", "url": "https://api.github.com/repos/rails/rails/issues/136", "created_at": "2010-12-19 20:10:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/623590", "text": "Committed in 916c25aeeeab6ef0f2375a6063fb36a43ed55346\n", "created_at": "2010-12-20 03:30:08", "user": 98601, "id": 623590}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2873\n\nDefer reloading until #close is called on request body [#2873 state:resolved]\n\nReloading in the ActionDispatch::Callback middleware's after hook\nwas problematic with streaming responses such as the following:\n\n```\nself.response_body = lambda do |response, output|\n  # code here which refers to application models\nend\n```\n\nA new middleware, ActionDispatch::Reloader, provides an appropriate\ncallback hook and is responsible for lock management. It is included\nin the stack only in the !config.cache_classes case.\n\nBased on the implementation on the 2-3-stable branch and patches\nby Hongli Lai hongli@phusion.nl. His patches included locking\naround the request cycle; this is now handled by Rack::Lock\n(https://github.com/rack/rack/issues/issue/87/).\n", "labels": [], "number": 137, "updated_at": "2014-06-14 21:42:15", "user": 98601, "closed_at": "2010-12-22 03:37:07", "id": 483161, "title": "Defer reloading until #close is called on request body", "url": "https://api.github.com/repos/rails/rails/issues/137", "created_at": "2010-12-19 20:33:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/623043", "text": "Hey, thanks for the pull request. However, I am not quite comfortable with this approach. Using .extend in runtime is slow (as it busts Ruby's method cache) and the patch also introduces a new API that is quite similar to AS::Callbacks.\n\nThe best way to solve the first problem is to have a callbacks system in the response, something like response.close_callback { }, and the block would be called once close! is invoked. Then the current AD::Callback middleware would simply do something like:\n\n```\nif response.respond_to?(:close) && response.respond_to?(:close_callback)\n  response.close_callback { _run_after_callbacks }\nelse\n  _run_after_callbacks\nend\n```\n\nBut we would need to break _run_call_callbacks in AD::Callback in two. The only problem with this approach, afaik, is that it is non deterministic when stuff gets unloaded. Maybe we could use a proxy to wrap objects that do not respond to close! and ensure it gets called in all cases. Not sure of the performance hit as well though.\n", "created_at": "2010-12-19 21:00:34", "user": 9582, "id": 623043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/623052", "text": "Is performance really a concern here? This is development mode functionality and reloading is almost certainly going to bust the method cache anyway.\n\nCan you explain your second concern? I'm not sure what duplication you are referring to.\n", "created_at": "2010-12-19 21:05:22", "user": 98601, "id": 623052}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/623084", "text": "Oh, snap! You are right, if this is only for development, there is no need to worry with performance.\n\nThe second problem was about introducing a new class. I would vote to have AD::Callbacks.to_reload instead of AD::Reload.to_reload. We already have the information if we should run it in each request or not inside the middleware: https://github.com/bigfix/rails/blob/732669640c8ed4c9955bfeb8f58fa87c1631029a/actionpack/lib/action_dispatch/middleware/callbacks.rb#L47\n\nOne last thing is that the \"railties/lib/rails/console/app.rb\" change is wrong. If we had AD::Callbacks and AD::Reloader, both should be called, because stuff like reloading I18n or setting observers occurs in AD::Callbacks and after your change, it won't happen again. Not your fault, as we probably don't have tests for this area (Rails 2.3 legacy :()\n", "created_at": "2010-12-19 21:25:13", "user": 9582, "id": 623084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/623223", "text": "I added some commits as you suggest but I'm not really happy with this approach. It has several code smells:\n- AD::Callbacks has 3-4 responsibilities: preparation, reloading, before/after callbacks -- SRP violation.\n- A boolean flag (prepare_each_request/development_mode) that affects control flow in a non-trivial manner.\n- Increased coupling in the assumption that development mode = !config.cache_classes = prepare_each_request.\n\nhttps://github.com/bigfix/rails/commit/a83b36a7cb162a711b4e0c9cec1433f16c0b8328#commitcomment-221642\n", "created_at": "2010-12-19 22:39:00", "user": 98601, "id": 623223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/623256", "text": "I wouldn't say it has 3-4 responsibilities, because we wouldn't create 1 class for each callback. But I definitely agree it has two: execute request callbacks and execute reload-like callbacks. before and after callbacks fits the first description, to_prepare and to_reload the second. So I am ok if we split these in two middlewares, one being AD::Reload, just be careful with:\n\n1) to_prepare is like before() for Reload and to_reload is after(). The difference though, is that to_prepare is executed when the middleware is initialized. This is not necessarily good and we should remove it as the middleware will never be initialized in production once it is part of AD::Reload, so we will need to add an initializer here (https://github.com/bigfix/rails/blob/master/railties/lib/rails/application/finisher.rb#L37). That should work like this:\n\n```\ninitializer :run_prepare_callbacks do\n  ActionDispatch::Reloader.prepare!\nend\n```\n\n2) Backward compatibility. Maybe AD::Callbacks.to_prepare can delegate to AD::Reload.to_prepare. We can worry about adding a deprecation warning later.\n\nThanks for the patience and the feedback. I believe we are coming up with the right solution. :D\n", "created_at": "2010-12-19 22:57:21", "user": 9582, "id": 623256}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/623266", "text": "Yeah, I like that approach. Thanks for your help Jos√©.\n\nI will probably rewrite the git history to remove some of the false starts -- is that OK?\n", "created_at": "2010-12-19 23:03:45", "user": 98601, "id": 623266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/623271", "text": "Sure, that is perfect. I am going to zzzz now, I will check what you push in ~8h. :D\n", "created_at": "2010-12-19 23:05:02", "user": 9582, "id": 623271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/628943", "text": "Committed in e683ab7c390f26e110387822c7ffb5ac6aafebca\n", "created_at": "2010-12-22 03:37:07", "user": 98601, "id": 628943}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Pretty self explanatory, tests an obj against a number of other objects to make sure it does NOT match any of them. Leverages case comparison, so arbitrary argument types resulting in nonsense tests are ignored (eg a regex against a hash)\n\nGood, for example, for checking a password against a variety of restrictions:\n    weak_passwords = ['qwerty', '123456', /passwo?r?d/]\n    user.password.avoids?(*weak_passwords)\n\nWas more topical yesterday when SecurePassword still had some passwd strength code floating around, but as a reverse #include? it's a better option than weak_passwords.include?(password) and has value in other situations as well.\n", "labels": [], "number": 138, "updated_at": "2014-06-13 02:59:15", "user": 3483, "closed_at": "2010-12-24 03:14:38", "id": 485712, "title": "Object#avoids? for checking against several objects/patterns at once", "url": "https://api.github.com/repos/rails/rails/issues/138", "created_at": "2010-12-21 07:09:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/627787", "text": "I've been wanting this for some time too, but I haven't been able to come up with a good name for it. I don't think #avoids? is it. But I'm all ears for something better.\n", "created_at": "2010-12-21 18:03:11", "user": 2741, "id": 627787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632535", "text": "Perhaps we could do the opposite and have `obj.matches?('foo', /bar/)`.\n", "created_at": "2010-12-23 17:51:35", "user": 1979, "id": 632535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632546", "text": "Jon, I'm not sure I understand what this would do or how it relates to checking whether obj is in a given array?\n", "created_at": "2010-12-23 18:02:18", "user": 2741, "id": 632546}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632559", "text": "It would iterate each of the arguments are check them against `obj`, using `===`. Here's an implementation:\n\n```\nrequire 'active_support/core_ext/object/blank'\n\nclass Object\n  def matches?(*args)\n    args.find { |arg| arg === self }.present?\n  end\nend\n\n'foo'.matches?('foo', /bar/) # => true\n'bar'.matches?('foo', /bar/) # => true\n'barkeeper'.matches?('foo', /bar/) # => true\n'zookeeper'.matches?('foo', /bar/) # => false\n```\n", "created_at": "2010-12-23 18:10:12", "user": 1979, "id": 632559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632564", "text": "I must be dense. I still don't understand how this relates to the original patch? How is this going to help with checking whether the object is in an array or not?\n", "created_at": "2010-12-23 18:12:53", "user": 2741, "id": 632564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632567", "text": "Another thought on naming: could have `obj.included_in?` and `obj.excluded_from?`, though those names tend to imply equality in the sense of `==` rather than `===`.\n", "created_at": "2010-12-23 18:13:46", "user": 1979, "id": 632567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632569", "text": "It would be used like so:\n\n```\nweak_passwords = ['qwerty', '123456', /passwo?r?d/]\nif user.password.matches?(*weak_passwords)\n  raise \"error\"\nend\n```\n\nRather than the original which would be:\n\n```\nweak_passwords = ['qwerty', '123456', /passwo?r?d/]\nunless user.password.avoids?(*weak_passwords)\n  raise \"error\"\nend\n```\n", "created_at": "2010-12-23 18:15:27", "user": 1979, "id": 632569}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632576", "text": "If you're going for the positive, I much prefer Object#in? I don't like included_in and excluded_from at all. This is why all this stopped last I looked at it. It was preferable just to do weak_passwords.include?(user.password)\n", "created_at": "2010-12-23 18:20:10", "user": 2741, "id": 632576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632652", "text": "I've still been spending some brain time on this, but haven't come up with anything solid. I like the idea of something that works reverse of #include? for certain situations. #avoids? works well, in my mind (for readability), but only in a limited set of contexts. \n\nuser.password.avoids?(_weak_passwords) makes a good amount of sense to me.\n2.avoids?(_odd_numbers), and most other contexts, does not.\n\n2.is_not?(odd) makes sense, but that odd variable, on it's own, is obfuscated.\n\nThe best alternatives I've come up with are #contradicts?, #contrasts?, and #counters?, with #negates? in a distance fourth. None are overwhelmingly meaningful. I bet there's a good word for this in Navajo...\n", "created_at": "2010-12-23 19:12:02", "user": 3483, "id": 632652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632659", "text": "farski, there's a distinct possibility that there simply isn't a good name for this. And if there isn't, it's not worth having as a method. I'd just stick with Array#exclude?(obj) and Array#include?(obj). Let's reopen if a stroke of genius comes through and reveals the perfect name.\n", "created_at": "2010-12-23 19:14:38", "user": 2741, "id": 632659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/723604", "text": "Without knowing about this discussion, rubyduo and I have submitted a patch in Lighthouse for Object#in?, which seems like a less awkward alternative to Enumerable#include?\n\nThe Rails Core mailing list discussion is here: http://is.gd/MjQD5D\nThe ticket is here: http://is.gd/mTLfJv\n\nIt's slightly different from this proposal in that it works simply by calling include? on the parameter. This means it will work with an Array, Hash, String, Range, or anything else that supports include? but it won't allow an array of Regexp's.\n", "created_at": "2011-01-31 00:56:14", "user": 16927, "id": 723604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1278353", "text": "I think `Object#in?` is the perfect name for this‚Äîwhy doesn‚Äôt it work? Doing `['a', 'b', 'c'].include?('b')` just reads backwards to me‚Äî`'b'.in?('a', 'b', 'c')` is so much more natural. If `Object#in?` really is no good, as an alternative I propose `#one_of?`: `'b'.one_of?('a', 'b', 'c')`.\n\nI thought this exact thing had been added to Rails years ago and I was just momentarily perplexed when I was trying to make it work and couldn‚Äôt find any mention of it in the documentation or anywhere. Quickly googling shows that this precise functionality (with the exact same method name) has been invented and reinvented all over the place‚Äîhere‚Äôs a post from 2007 suggesting it: http://snippets.dzone.com/posts/show/3516.\n\nMajor plus one to this.\n", "created_at": "2011-06-02 01:05:47", "user": 145600, "id": 1278353}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed retrieval of primary key value in Ralation#insert method.\n\nPreviously primary key value was always assigned nil which caused Oracle enhanced adapter failing tests.\n", "labels": [], "number": 139, "updated_at": "2014-06-26 18:41:50", "user": 4736, "closed_at": "2010-12-23 15:22:16", "id": 490032, "title": "Relation insert fix (was causing test failures on Oracle)", "url": "https://api.github.com/repos/rails/rails/issues/139", "created_at": "2010-12-23 14:00:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632252", "text": "Applied on master.  Thank you very much!\n", "created_at": "2010-12-23 15:22:16", "user": 3124, "id": 632252}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is additional fix for commit\n\nebc47465a5865ab91dc7d058d2d8a0cc961510d7 Respect the default_scope on a join model when reading a through association\n\nwhich otherwise was failing on Oracle (as it returned fixture comments in different order).\n", "labels": [], "number": 140, "updated_at": "2014-07-03 03:44:53", "user": 4736, "closed_at": "2010-12-23 15:20:18", "id": 490121, "title": "Default scope tests fix", "url": "https://api.github.com/repos/rails/rails/issues/140", "created_at": "2010-12-23 15:16:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/632247", "text": "Applied on master.  Thanks!\n", "created_at": "2010-12-23 15:20:18", "user": 3124, "id": 632247}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is just a backport of tests from edge for regression purposes.\n", "labels": [], "number": 141, "updated_at": "2014-06-19 01:42:33", "user": 35866, "closed_at": "2010-12-23 17:39:49", "id": 490323, "title": "Add missing tests for subclassed arrays", "url": "https://api.github.com/repos/rails/rails/issues/141", "created_at": "2010-12-23 17:19:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a backport of tests from master for regression purposes.\n", "labels": [], "number": 142, "updated_at": "2014-06-16 23:53:18", "user": 35866, "closed_at": "2011-01-09 23:40:48", "id": 490378, "title": "Add missing tests for subclassed arrays", "url": "https://api.github.com/repos/rails/rails/issues/142", "created_at": "2010-12-23 17:49:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665181", "text": "Thanks!\n", "created_at": "2011-01-09 23:40:48", "user": 199, "id": 665181}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've added button_tag helper and tests that allow the creation of button element in Rails views. This clearly has several advantages over the normal input tag with submit type, as it has support for much richer content due to the change in the HTML structure:\n\n```\n<button type=\"submit|reset|button\">\n  <strong><em>Save changes</em></strong>\n</button>\n```\n\nPlease have a look. Thanks!\n", "labels": [], "number": 143, "updated_at": "2014-07-03 03:45:05", "user": 16111, "closed_at": "2011-01-09 23:24:04", "id": 490530, "title": "`button_tag` helper", "url": "https://api.github.com/repos/rails/rails/issues/143", "created_at": "2010-12-23 19:54:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665151", "text": "Thanks!\n", "created_at": "2011-01-09 23:24:04", "user": 199, "id": 665151}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am trying to simplify the **numericality** validator a little by allowing something like\n\n<pre>validates :price_range, :numericality => {:within => 10..20}</pre>\n\n\ninstead of \n\n<pre>validates :price_range, :numericality => {:greater_than_or_equal_to => 10, :less_than_or_equal_to => 20}</pre>\n\n\nIt looks to me like the _:within_ option currently only works for the length of an attribute?\n\nI tried to add a test case and an update to the translation file, but I don't know enough about the Rails internals for validations and how it works behind the scenes. \n", "labels": [], "number": 144, "updated_at": "2014-06-29 15:07:37", "user": 125005, "closed_at": "2010-12-24 07:42:00", "id": 490678, "title": "Numericality :within validator", "url": "https://api.github.com/repos/rails/rails/issues/144", "created_at": "2010-12-23 21:30:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/633437", "text": "You don't need to add a new translation option. You just need to break :within into two options. For example: :within => 10..20 should become :less_than_or_equal_to => 20 and :greater_than_or_equal_to => 10. I believe this is how the length validator behaves.\n", "created_at": "2010-12-24 07:42:00", "user": 9582, "id": 633437}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/2988-authenticity_token-option-for-form_tag\n", "labels": [], "number": 145, "updated_at": "2014-07-03 03:45:12", "user": 88061, "closed_at": "2011-01-09 23:55:52", "id": 494388, "title": "LH#2988 authenticity_token option for form_tag", "url": "https://api.github.com/repos/rails/rails/issues/145", "created_at": "2010-12-27 22:49:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665214", "text": "Thanks!\n", "created_at": "2011-01-09 23:55:52", "user": 199, "id": 665214}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Don't assume that the arity of active record method was not changed. Someone could extend the method so it takes some options and provides defaults.\n\nFor example: I extended destroy to work with validations and have a definition\nlike def destroy(options = {}).\n", "labels": [], "number": 146, "updated_at": "2014-06-26 18:41:54", "user": 65587, "closed_at": "2011-04-27 13:30:36", "id": 495264, "title": "Fix destroy arity", "url": "https://api.github.com/repos/rails/rails/issues/146", "created_at": "2010-12-28 16:04:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665169", "text": "Looks good. Needs a failing test. Thanks!\n", "created_at": "2011-01-09 23:31:39", "user": 199, "id": 665169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/667491", "text": "Ok, I will provide a test.\n", "created_at": "2011-01-10 21:49:24", "user": 65587, "id": 667491}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/755181", "text": "Hey paneq,\n\nI tried to create a failing test case for this issue but I could not replicate the case.\n\nHere is the abstract of [my test](https://gist.github.com/818728).\n\nFrom my understanding you are overriding the destroy method in your class, doing some custom checks/logic, and then calling super so the original destroy runs? Please correct me if I am misunderstanding something.\n\nThanks,\n\nJosh\n", "created_at": "2011-02-09 20:45:27", "user": 8701, "id": 755181}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064198", "text": "Please reopen if a test emerges.\n", "created_at": "2011-04-27 13:30:37", "user": 2741, "id": 1064198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064877", "text": "I will. I am on holiday right now so I finally have time to deal with it.\n", "created_at": "2011-04-27 15:17:53", "user": 65587, "id": 1064877}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/6036-id-is-inproperly-escaped-on-postgresql-statements-when-primary-key-is-a-string\n\nThis bug has already been fixed. However it tourned out that not completely.\n", "labels": [], "number": 147, "updated_at": "2014-07-03 03:45:19", "user": 65587, "closed_at": "2011-01-03 17:21:45", "id": 500095, "title": "Fix #6036", "url": "https://api.github.com/repos/rails/rails/issues/147", "created_at": "2010-12-31 13:22:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/650024", "text": "Applied, thanks!\n", "created_at": "2011-01-03 17:21:45", "user": 3124, "id": 650024}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6036-id-is-inproperly-escaped-on-postgresql-statements-when-primary-key-is-a-string\n\nThis bug has already been fixed, however one more failing test case was found.\n\nThis is the test case and fix for 3.0-stable.\n", "labels": [], "number": 148, "updated_at": "2014-07-03 03:45:22", "user": 65587, "closed_at": "2011-01-03 17:25:35", "id": 500131, "title": "Fix for bug #6036", "url": "https://api.github.com/repos/rails/rails/issues/148", "created_at": "2010-12-31 14:14:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/650028", "text": "Applied, thanks!\n", "created_at": "2011-01-03 17:25:35", "user": 3124, "id": 650028}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using the words from diveintohtml5.org[1]:\n\n\"You should always specify a character encoding on every HTML page you serve. Not specifying an encoding can lead to security vulnerabilities[2].\"\n\n[1] http://diveintohtml5.org/semantics.html#encoding\n[2] http://code.google.com/p/doctype/wiki/ArticleUtf7\n", "labels": [], "number": 149, "updated_at": "2014-07-03 03:45:26", "user": 91538, "closed_at": "2011-01-03 19:16:17", "id": 503160, "title": "Specify a character encoding on application layout page", "url": "https://api.github.com/repos/rails/rails/issues/149", "created_at": "2011-01-03 11:14:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/648721", "text": "We already send the charset as part of the headers, so it's not also needed in the HTML.\n", "created_at": "2011-01-03 11:16:17", "user": 2741, "id": 648721}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Otherwise when using external ActiveRecord adapters (e.g. Oracle) database_statements might be loaded before active_support/core_ext/module/deprecation which results in NoMethodError (commit 60cf65def805995bcca184c40b44bb01d86a48aa added \"deprecate\" call to database_statements.rb)\n", "labels": [], "number": 150, "updated_at": "2014-06-18 11:58:28", "user": 4736, "closed_at": "2011-01-04 23:26:09", "id": 505379, "title": "Require ActiveSupport deprecatation file before using deprecate method in database_statements", "url": "https://api.github.com/repos/rails/rails/issues/150", "created_at": "2011-01-04 09:24:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previous version (after commit 3103296a61709e808aa89c3d37cf22bcdbc5a675) was generating wrong SQL for Oracle when calling exists? method on HABTM association (see errors at https://gist.github.com/9ced68fffb09279af338).\n\n\"exists?\" method is simplified to select just constant 1 (previously was selecting primary key value) - as just result existence is verified then there is no need to select primary key value. Previous version was also conflicting with Oracle with HABTM as then primary key value was selected twice which conflicted with subquery generated for simulating LIMIT clause.\n\nAfter this patch tests on Oracle are passing as well as I tested that this patch is working on SQLite3, MySQL and PostgreSQL.\n", "labels": [], "number": 151, "updated_at": "2014-06-26 18:41:57", "user": 4736, "closed_at": "2011-01-04 23:26:12", "id": 505872, "title": "Explicitly select * from has_and_belongs_to_many association tables, simplify exists? query", "url": "https://api.github.com/repos/rails/rails/issues/151", "created_at": "2011-01-04 15:12:34", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As the subject says. \n", "labels": [], "number": 152, "updated_at": "2014-06-26 18:41:59", "user": 445484, "closed_at": "2011-01-05 12:24:56", "id": 507856, "title": "Fix subtle bug with difference between behavior of empty? and blank? for ActiveModel::Error", "url": "https://api.github.com/repos/rails/rails/issues/152", "created_at": "2011-01-05 11:59:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/654638", "text": "Great, thanks for the fix!\n", "created_at": "2011-01-05 12:24:56", "user": 9582, "id": 654638}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6256-patch-select-helpers-with-boolean-attributes\n", "labels": [], "number": 153, "updated_at": "2014-06-26 15:28:05", "user": 21326, "closed_at": "2011-01-09 23:48:43", "id": 508785, "title": "LH#6256 select helpers with boolean attributes", "url": "https://api.github.com/repos/rails/rails/issues/153", "created_at": "2011-01-05 19:42:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665194", "text": "Thanks!\n", "created_at": "2011-01-09 23:48:43", "user": 199, "id": 665194}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Without this, db:test:prepare fails, when the db/schema.rb contains references to functions or tables that are defined in a non-standard template, making it quite difficult to write/run tests against the project.\n\nThe case that prompted this patch is a template database with postGIS specific language, tables, and functions.\n", "labels": [], "number": 154, "updated_at": "2016-04-07 19:08:29", "user": 276834, "closed_at": "2011-01-09 23:37:19", "id": 510121, "title": "Adding postgresql template option when executing db:test:clone_structure", "url": "https://api.github.com/repos/rails/rails/issues/154", "created_at": "2011-01-06 11:27:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665179", "text": "Thanks!\n", "created_at": "2011-01-09 23:37:19", "user": 199, "id": 665179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/207052726", "text": "Way to go, @kytrinyx ! :smile: \n", "created_at": "2016-04-07 19:08:29", "user": 1141717, "id": 207052726}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 155, "updated_at": "2014-07-03 03:45:44", "user": 361912, "closed_at": "2011-01-07 03:48:49", "id": 510713, "title": "mem_cache_store options merge", "url": "https://api.github.com/repos/rails/rails/issues/155", "created_at": "2011-01-06 16:57:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/658535", "text": "This patch is wrong, sorry.\n", "created_at": "2011-01-06 19:48:49", "user": 361912, "id": 658535}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While working on the equivalent patch for `Time#to_datetime`, I learned that Ruby 1.8.7+ already provides a definition which correctly handles fractional seconds. Since 1.8.6 is not supported by Rails 3, I simply removed the unused AS definition.\n\nTested on 1.8.7, 1.9.2, and JRuby 1.5.6.\n", "labels": [], "number": 156, "updated_at": "2014-06-19 14:26:28", "user": 98601, "closed_at": "2011-02-03 15:19:28", "id": 511310, "title": "Support fractional seconds in DateTime#to_time", "url": "https://api.github.com/repos/rails/rails/issues/156", "created_at": "2011-01-06 21:44:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665109", "text": "+1 nice catch\n", "created_at": "2011-01-09 22:57:42", "user": 199, "id": 665109}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665131", "text": "<pre>sec_fraction * (RUBY_VERSION &lt; '1.9' ? 86400000000 : 1000000)</pre>\n\n\nDoes this work on JRuby, Rubinius, etc?\n", "created_at": "2011-01-09 23:08:38", "user": 199, "id": 665131}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665292", "text": "Yes, originally tested on 1.8.7, 1.9.2, and JRuby 1.5.6, and I tested Rubinius just now.\n", "created_at": "2011-01-10 00:36:52", "user": 98601, "id": 665292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/736042", "text": "Applied thanks :).\n", "created_at": "2011-02-03 15:19:28", "user": 52642, "id": 736042}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 157, "updated_at": "2014-06-26 08:24:43", "user": 361912, "closed_at": "2011-01-09 23:13:51", "id": 514231, "title": "association_preload.rb:336: warning: Object#type is deprecated", "url": "https://api.github.com/repos/rails/rails/issues/157", "created_at": "2011-01-08 10:48:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/665135", "text": "Thanks!\n", "created_at": "2011-01-09 23:13:51", "user": 199, "id": 665135}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 158, "updated_at": "2014-07-03 03:45:53", "user": 361912, "closed_at": "2011-01-10 15:00:07", "id": 517488, "title": "association_preload.rb:336: warning: Object#type is deprecated - proper fix", "url": "https://api.github.com/repos/rails/rails/issues/158", "created_at": "2011-01-10 14:46:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 159, "updated_at": "2014-06-26 18:42:08", "user": 361912, "closed_at": "2011-01-10 19:34:47", "id": 517537, "title": "association_preload.rb:336: warning: Object#type is deprecated", "url": "https://api.github.com/repos/rails/rails/issues/159", "created_at": "2011-01-10 15:16:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/667119", "text": "Applied, thanks.\n", "created_at": "2011-01-10 19:34:47", "user": 3124, "id": 667119}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In previous version if database adapter (e.g. SQLite and Oracle) returned non-String calculated values then type_cast_using_column converted decimal average value of intefer field to integer value. Now operation parameter is always checked to decide which conversion of calculated value should be done.\n\nThis is fix for Lighthouse issue #6103\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6103-average-returns-integer-values-instead-of-decimals\nand is fixing bug that was introduced by commit 0a8eaff3d16fbf48259319ff17e2fe8f6cb3d450\n\nThis should be applied to master branch as well.\n", "labels": [], "number": 160, "updated_at": "2014-06-26 15:51:50", "user": 4736, "closed_at": "2011-01-19 00:03:23", "id": 517748, "title": "Always return decimal average of integer fields", "url": "https://api.github.com/repos/rails/rails/issues/160", "created_at": "2011-01-10 17:09:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/667632", "text": "This breaks the mysql2 tests:\n\n```\n  1) Error:\ntest_average_with_from_option(CalculationsTest):\nNoMethodError: undefined method `to_d' for #<BigDecimal:104c80690,'0.53E2',9(18)>\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:279:in `type_cast_calculated_value'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:207:in `execute_simple_calculation'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:182:in `perform_calculation'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:152:in `calculate'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:66:in `average'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/base.rb:442:in `average'\n    test/cases/calculations_test.rb:339:in `test_average_with_from_option'\n    /Users/apatterson/.local/lib/ruby/gems/1.9.1/gems/mocha-0.9.10/lib/mocha/integration/mini_test/version_142_and_above.rb:27:in `run'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `block in run'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/callbacks.rb:418:in `_run_setup_callbacks'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:34:in `run'\n\n  2) Error:\ntest_should_average_field(CalculationsTest):\nNoMethodError: undefined method `to_d' for #<BigDecimal:106020448,'0.53E2',9(18)>\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:279:in `type_cast_calculated_value'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:207:in `execute_simple_calculation'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:182:in `perform_calculation'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:152:in `calculate'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:66:in `average'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/base.rb:442:in `average'\n    test/cases/calculations_test.rb:22:in `test_should_average_field'\n    /Users/apatterson/.local/lib/ruby/gems/1.9.1/gems/mocha-0.9.10/lib/mocha/integration/mini_test/version_142_and_above.rb:27:in `run'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `block in run'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/callbacks.rb:418:in `_run_setup_callbacks'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:34:in `run'\n\n  3) Error:\ntest_should_return_decimal_average_of_integer_field(CalculationsTest):\nNoMethodError: undefined method `to_d' for #<BigDecimal:10499c578,'0.35E1',18(18)>\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:279:in `type_cast_calculated_value'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:207:in `execute_simple_calculation'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:182:in `perform_calculation'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:152:in `calculate'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:66:in `average'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/base.rb:442:in `average'\n    test/cases/calculations_test.rb:27:in `test_should_return_decimal_average_of_integer_field'\n    /Users/apatterson/.local/lib/ruby/gems/1.9.1/gems/mocha-0.9.10/lib/mocha/integration/mini_test/version_142_and_above.rb:27:in `run'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `block in run'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/callbacks.rb:418:in `_run_setup_callbacks'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:34:in `run'\n\n  4) Error:\ntest_delegates_finds_and_calculations_to_the_base_class(NamedScopeTest):\nNoMethodError: undefined method `to_d' for #<BigDecimal:104903a58,'0.5E0',9(18)>\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:279:in `type_cast_calculated_value'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:207:in `execute_simple_calculation'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:182:in `perform_calculation'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:152:in `calculate'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/relation/calculations.rb:66:in `average'\n    /Users/apatterson/git/rails/activerecord/lib/active_record/base.rb:442:in `average'\n    test/cases/named_scope_test.rb:47:in `test_delegates_finds_and_calculations_to_the_base_class'\n    /Users/apatterson/.local/lib/ruby/gems/1.9.1/gems/mocha-0.9.10/lib/mocha/integration/mini_test/version_142_and_above.rb:27:in `run'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `block in run'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/callbacks.rb:418:in `_run_setup_callbacks'\n    /Users/apatterson/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:34:in `run'\n\n2433 tests, 7757 assertions, 0 failures, 4 errors, 0 skips\n```\n", "created_at": "2011-01-10 22:36:15", "user": 3124, "id": 667632}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/688452", "text": "Closing this since it's in master\n", "created_at": "2011-01-19 00:03:23", "user": 3124, "id": 688452}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Seems better to include an example of a still maintained, up to date gem.\n", "labels": [], "number": 161, "updated_at": "2014-07-03 03:46:02", "user": 4138, "closed_at": "2011-02-01 07:13:27", "id": 517999, "title": "More contemporary example in Gemfile", "url": "https://api.github.com/repos/rails/rails/issues/161", "created_at": "2011-01-10 19:03:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/720682", "text": "Wesley, can you rebase against head?  Has been another update to the Gemfile and saves having to include a merge.  Otherwise, let me know and I'll just apply it myself.\n\nMikel\n", "created_at": "2011-01-29 13:13:49", "user": 3366, "id": 720682}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/721113", "text": "Just rebased that and sorted out the resulting conflict.  Let me know if you need anything else.\nThanks!\nwes\n", "created_at": "2011-01-29 18:33:44", "user": 4138, "id": 721113}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/726801", "text": "Pushed, Thanks Wesley :)\n", "created_at": "2011-01-31 23:13:27", "user": 52642, "id": 726801}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Seems that a little mistake happened in last commit in this file. raise should be in rescue section like it was before. This broke [cucumber-rails](https://github.com/aslakhellesoy/cucumber-rails/issues#issue/95)\n", "labels": [], "number": 162, "updated_at": "2014-07-03 03:46:04", "user": 100999, "closed_at": "2011-01-17 17:27:58", "id": 521771, "title": "Show exceptions fix", "url": "https://api.github.com/repos/rails/rails/issues/162", "created_at": "2011-01-12 11:08:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/671556", "text": "Can we have tests?\n", "created_at": "2011-01-12 11:17:42", "user": 9582, "id": 671556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/671643", "text": "If this is necessary, I'll try to add test as soon as possible.\n", "created_at": "2011-01-12 12:05:36", "user": 100999, "id": 671643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/671648", "text": "It is required to ensure we won't have regressions (again).\n", "created_at": "2011-01-12 12:11:51", "user": 9582, "id": 671648}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/684055", "text": "[fixed by tenderlove](https://github.com/rails/rails/commit/1d9c555297c15b6d5212e65c1afec718e043ce45)\n", "created_at": "2011-01-17 17:27:58", "user": 100999, "id": 684055}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The db:fixtures:load rake task allows specifying a comma list of which fixtures to load as FIXTURES. However, it incorrectly strips the last 4 characters off each table name since 8ec085bf1804770a547894967fcdee24087fda87.\n\n$ rake db:fixtures:load FIXTURES=products\nrake aborted!\nCould not find /home/jhawthorn/example/test/fixtures/prod.yml or /home/jhawthorn/example/test/fixtures/prod.csv\n", "labels": [], "number": 163, "updated_at": "2014-06-14 11:40:36", "user": 131752, "closed_at": "2011-02-06 20:58:27", "id": 523368, "title": "LH#6061 rake db:fixtures:load with FIXTURES=tables is broken", "url": "https://api.github.com/repos/rails/rails/issues/163", "created_at": "2011-01-12 23:23:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/734541", "text": "Can you provide a test case?\n", "created_at": "2011-02-03 02:48:37", "user": 52642, "id": 734541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/742705", "text": "added a test which fails on master\n", "created_at": "2011-02-06 00:58:16", "user": 131752, "id": 742705}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/744368", "text": "jhawthorn, pushed thanks.\n", "created_at": "2011-02-06 20:58:27", "user": 52642, "id": 744368}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`rails new` produces a `.gitignore` file that uses Ruby-style globbing that git doesn't recognize (`tmp/**/*`). As a result, something like `tmp/foo.rb` would not be ignored.\n\nA simple `tmp/` should ignore the `tmp` directory - whatever it contains in terms of files or sub-directories..\n", "labels": [], "number": 164, "updated_at": "2014-07-03 03:46:10", "user": 62958, "closed_at": "2011-01-29 21:06:40", "id": 527351, "title": "Small fix to the default rails .gitignore", "url": "https://api.github.com/repos/rails/rails/issues/164", "created_at": "2011-01-14 17:09:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/678163", "text": "Isn't just `tmp` good enough? We should be consistent between `.bundle` and `tmp/`.\n", "created_at": "2011-01-14 17:12:25", "user": 294954, "id": 678163}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/720672", "text": "tmp would ignore any file that is called tmp.  tmp/ is correct.\n\nPulled and pushed, thanks for the fix.\n", "created_at": "2011-01-29 13:06:40", "user": 3366, "id": 720672}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/726053", "text": "For the record, gitignore passes in any ignore line with an `*` that also has a `/` to the system's `fnmatch`. So while gitignore doesn't say it recognizes `tmp/**/*` it does get passed to the system which most likely does recognize it.\n\nFrom `man gitignore`\n", "created_at": "2011-01-31 19:57:53", "user": 294954, "id": 726053}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/726698", "text": "Yup, I put that imprecisely: git recognizes the phrase `tmp/**/*`, but it interprets that syntax differently from Ruby. A file `tmp/foo.rb` would _not_ be ignored by `git` using the old gitignore file, and I thought that was a mistake. (That is, I'm still assuming that whoever wrote the original gitignore file wanted to ignore the tmp directory and anything in it, to whatever depth.)\n", "created_at": "2011-01-31 22:39:37", "user": 62958, "id": 726698}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The generated _run_<name>_callbacks method is not (or should not be) a public interface.\n", "labels": [], "number": 165, "updated_at": "2014-06-14 22:53:09", "user": 98601, "closed_at": "2011-01-31 21:46:41", "id": 533415, "title": "Use run_callbacks", "url": "https://api.github.com/repos/rails/rails/issues/165", "created_at": "2011-01-18 05:33:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/726468", "text": "Applied thanks :).\n", "created_at": "2011-01-31 21:46:41", "user": 52642, "id": 726468}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://github.com/evanphx/rubinius/issues/issue/11\nhttps://github.com/evanphx/rubinius/commit/2fccbb5dad5cb3f5414d635547290538cfc0a2d4\n\nThis commit removes its use in Rails. Besides removing code which is now dead on all existing interpreters, it's probably not good practice to rely on the behavior of a non-standard extension.\n", "labels": [], "number": 166, "updated_at": "2014-06-25 17:34:33", "user": 98601, "closed_at": "2011-01-18 15:56:57", "id": 533430, "title": "Class.__subclasses__ was removed from Rubinius", "url": "https://api.github.com/repos/rails/rails/issues/166", "created_at": "2011-01-18 05:41:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/686767", "text": "Committed cc446eee99b9e480637ea8792349068d2c98fc85\n", "created_at": "2011-01-18 15:56:57", "user": 98601, "id": 686767}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi there\n\nI fixed a bug in ActiveResource::HttpMock.\n\nI wrote this test to capture the case:\n\n```\ntest \"allows you to replace the existing reponse with the same request by calling a block\" do\n  ActiveResource::HttpMock.respond_to do |mock|\n    mock.send(:get, \"/people/1\", {}, \"XML1\")\n  end\n  assert_equal 1, ActiveResource::HttpMock.responses.length\n\n  ActiveResource::HttpMock.respond_to(false) do |mock|\n    mock.send(:get, \"/people/1\", {}, \"XML2\")\n  end\n  assert_equal 1, ActiveResource::HttpMock.responses.length\nend\n```\n\nBasically, redefining the GET /people/1 mock would create a duplicate response in HttpMock. When you actually ran the mocks it would end up using the _first_ one defined, not the _last_ one.\n\nAll fixed now :)\n\nJosh\n", "labels": [], "number": 167, "updated_at": "2014-07-03 03:46:23", "user": 3614, "closed_at": "2011-02-09 21:30:21", "id": 533590, "title": "Fixed a bug where ActiveResource::HttpMock would not replace an existing response when passing a block to the respond_to method", "url": "https://api.github.com/repos/rails/rails/issues/167", "created_at": "2011-01-18 08:34:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/747797", "text": "+1\n\nThe patch fixes HttpMock to work as it's expected from the documentation, tests pass and solution is good.\n", "created_at": "2011-02-07 22:10:13", "user": 1005, "id": 747797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/755482", "text": "Pushed\n", "created_at": "2011-02-09 21:30:21", "user": 52642, "id": 755482}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Clean up YAML deprecation warnings for ActiveSupport and use Psych whenever available\n", "labels": [], "number": 168, "updated_at": "2014-07-03 03:46:27", "user": 386, "closed_at": "2011-01-28 23:02:08", "id": 536702, "title": "Clean up YAML deprecation warnings for ActiveSupport and use Psych whenever available", "url": "https://api.github.com/repos/rails/rails/issues/168", "created_at": "2011-01-19 14:17:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/719651", "text": "I had to modify much of this, but the YAML deprecation warnings should be gone in master now.\n", "created_at": "2011-01-28 23:02:08", "user": 3124, "id": 719651}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previous implementation was throwing exceptions when default_scope was called multiple times for the same model. This fix uses the old finder merging (using construct_finder_arel method) for non-lambda arguments and recursive lambdas when necessary.\n\nMore info in ticket #1812 on lighthouse.\n", "labels": [], "number": 169, "updated_at": "2014-06-18 22:14:45", "user": 29783, "closed_at": "2011-04-30 09:07:57", "id": 538095, "title": "Lambda default scope", "url": "https://api.github.com/repos/rails/rails/issues/169", "created_at": "2011-01-20 00:22:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/693229", "text": "`var.is_a?(Proc)` isn't how you should check for lambdas. You should check if `var.responds_to?(:call)` to accept anything the user may provide.\n", "created_at": "2011-01-20 16:50:52", "user": 294954, "id": 693229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/693326", "text": "I've used kind_of? because for unknown reason I imagined that ActiveRecord::Relation responds to :call and that I'd be using lambda where it isn't necessary. I've done some tests now and it turned out otherwise.\n\nAbove is a commit that uses respond_to. Thanks for the tip.\n", "created_at": "2011-01-20 17:23:00", "user": 29783, "id": 693326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/719984", "text": "Tests?\n", "created_at": "2011-01-29 02:01:07", "user": 3124, "id": 719984}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/720386", "text": "I'll add some.\n", "created_at": "2011-01-29 08:14:19", "user": 29783, "id": 720386}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/724033", "text": "Read a comment here:\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1812-default_scope-cant-take-procs#ticket-1812-70\n", "created_at": "2011-01-31 06:08:54", "user": 29783, "id": 724033}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/725946", "text": "Can you explain what the `without_default` is for?\n\nAlso, it would simplify the code if you initialize the `@without_default` instance variable in `def initialize`. Then if you update `initialize_copy`, you don't need to repeat the assignments (I think).  TBH, this `without_default` business scares me because I don't understand it.\n", "created_at": "2011-01-31 19:31:08", "user": 3124, "id": 725946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/726659", "text": "without_default isn't initialized because it returns \"self\" if absent.\n\nWithout_default literally means \"without default scope\" - it's a copy of self without statements added by default_scope. Check default_scope implementation - it always returns relation whose @without_default is set to empty relation. From then on every modification applied to a relation is also applied to it's without_default copy. This means that we can extract relation unobscured by current state (or rather evaluation in case of lambdas) of default scope from arguments passed to default_scope() and scope() methods.\n\nConsider calling this when a default_scope is already present on a class:\ndefault_scope order(:created_at).limit(50)\n\norder(...) and limit(...) are first evaluated in the context of the current default scope. Then the resulting ActiveRecord::Relation is passed to default_scope method which will merge it into existing default scope stack. To avoid merging old calculations into lambas or relations which produced them we call without_default and extract only what the user actually passed  - order(:created_at).limit(50).\n\nIn the end the result is as if the user called:\ndefault_scope unscoped.order(:created_at).limit(50)\n\nBut without him actually having to think about unscoping his relations.\n\nThose two statements should be equal:\nunscoped.where(...).order().limit().red.published\nwhere(...).order().limit().red.published.without_default\n", "created_at": "2011-01-31 22:28:00", "user": 29783, "id": 726659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/726744", "text": "Do we need to differentiate between the instance variable being set or not?  Why not initialize it to `self`?\n\nTypically doing a `defined?` check on an instance variable seems like a code smell to me.\n\nAlso, is `without_default` supposed to be a user facing method?  If so, can you add tests to define it's behavior?\n", "created_at": "2011-01-31 22:55:32", "user": 3124, "id": 726744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/726804", "text": "I'm checking it so that we don't perform all the unnecessary calculations on scopes that don't contain bits from the default scope. Note that:\n\n```\nsome_relation = unscoped.red.published.where(...)\nsome_relation.__id__ == some_relation.without_default.__id__\n```\n\nThe separate whithout_default \"branch\" is maintained only when necessary.\n\nI'm not sure whether it should be user facing. It's definitely a hack. I think building a relation from unscoped is preferred, but given current API we sometimes need to \"add\" it to relations we receive as arguments retroactively. It's not there to be a feature on it's own. We might find a better way to implement default and named scopes in the future and I wouldn't weep telling this method bye bye.\n", "created_at": "2011-01-31 23:14:28", "user": 29783, "id": 726804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/726817", "text": "Cool.  I really don't want to add this method if I don't have to.  Are the tests that you added comprehensive enough that I can gut the implementation and maintain the functionality?\n", "created_at": "2011-01-31 23:18:37", "user": 3124, "id": 726817}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/726850", "text": "Umm, I think. I can add some more or make those better. Those tests rely on unmodified fixture since I only check results count. I could make them better by verifying result attributes.\n\nLet's see what you come up with and if you provide me with a link to your branch I'll do some testing on my own and add more/better tests if needed.\n\nIf modifying rails API with 3.1 would be an option then this whole thing could be easily implemented by requiring users to define default and named scopes with blocks. Like:\n\nscope :published { where(:published => true) }\n\nInside scope method we would run the block proc inside unscoped.scoping { } and get a relation clean from whatever default scope currently returns. The only problem is that currently the block argument to scope is used to pass extensions.\n\nBut if you want to keep the API unchanged then I'm happy to see your take at the implementation.\n", "created_at": "2011-01-31 23:30:53", "user": 29783, "id": 726850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/727035", "text": "I would like to take a whack at getting these tests to pass without `without_default`.  If you think there should be more tests, please add them.\n\nOn a side note, I don't like the \"block extends things\" api.  But, I'm not sure that I can remove it for Rails 3.1.  It seems a better api would be something like this:\n\n```\nscope :published, Module.new {\n  def some_extention\n    ...\n  end\n}\n```\n\nI'll see what I can do.\n", "created_at": "2011-02-01 00:30:34", "user": 3124, "id": 727035}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/727072", "text": "The problem is also that we couldn't transition by keeping the current syntax with a deprecation warning. It doesn't make sense to tell people that this new \"lambdas in default_scope\" feature may not work properly if you or your gems authors declare your named or default scopes the old way.\n\nI'll try to add more tests later this week. The ones you have in a commit above don't rely on `without_default` so you're ok to check your code against them.\n", "created_at": "2011-02-01 00:47:56", "user": 29783, "id": 727072}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/727099", "text": "So is the `without_default` stuff required to fix this ticket?\n\nI would really appreciate `default_scope` tests that require the use of `without_default` to pass.  Thanks.\n", "created_at": "2011-02-01 00:59:23", "user": 3124, "id": 727099}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/727242", "text": "`without_default` is just my way of getting default_scope to work properly. The tests don't refer to it directly so that alternative implementations can pass them as long as default_scope produces correct results. If you just remove my code and run the tests, they will fail. If you fix default and named scopes with some better code then you should be ok to use my tests.\n", "created_at": "2011-02-01 02:10:45", "user": 29783, "id": 727242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/727450", "text": "Great!  Thank you very much!\n", "created_at": "2011-02-01 04:09:41", "user": 3124, "id": 727450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/884946", "text": "For anyone ever reading this pull request. I've started a discussion on core with suggestion to change scope syntax. This would make this pull request obsolete. I think the syntax change is certainly a better way of resolving this issue than a hacky work around like this one.\n\nhttp://groups.google.com/group/rubyonrails-core/browse_thread/thread/151882ad7f48b3dd\n", "created_at": "2011-03-17 13:13:25", "user": 29783, "id": 884946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1080260", "text": "I've heard the issue is fixed now. I haven't tested yet - I'll do that next week. I'm closing the pull request anyway. The patches that were pulled to master are a better solution that those here. I may send another pull request just with AR test cases.\n\nCheers!\n", "created_at": "2011-04-30 09:07:58", "user": 29783, "id": 1080260}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 170, "updated_at": "2014-07-03 03:46:38", "user": 347921, "closed_at": "2011-01-27 09:40:11", "id": 542049, "title": "Little fix in RDoc", "url": "https://api.github.com/repos/rails/rails/issues/170", "created_at": "2011-01-21 18:24:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/699432", "text": "I think the ends are fine, except they have too much indent.\n", "created_at": "2011-01-22 22:05:09", "user": 3387, "id": 699432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/714254", "text": "Oh, sorry, that end closes \"class\".\n", "created_at": "2011-01-27 09:40:11", "user": 347921, "id": 714254}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Will force a limit(1) on the scope.\n\nCurrently when calling #first on a scope it does the full query through the method_missing fallback. (calls #to_a) If we're calling #first there is no reason to query for the rest of that data.\n", "labels": [], "number": 171, "updated_at": "2014-06-18 12:36:06", "user": 18524, "closed_at": "2011-02-03 11:05:05", "id": 548869, "title": "ActiveRecord::Relation#first convenience method", "url": "https://api.github.com/repos/rails/rails/issues/171", "created_at": "2011-01-25 04:52:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/734571", "text": "This actually works already:\n\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/finder_methods.rb#L337-343\n", "created_at": "2011-02-03 03:05:05", "user": 197, "id": 734571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/734575", "text": "Why not just alias that as #first then?\n", "created_at": "2011-02-03 03:06:34", "user": 18524, "id": 734575}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/734611", "text": "first already calls find_first if you call it without arguments:\n\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/finder_methods.rb#L114-124\n", "created_at": "2011-02-03 03:28:42", "user": 197, "id": 734611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/734613", "text": "Sweet, thanks!\n", "created_at": "2011-02-03 03:30:04", "user": 18524, "id": 734613}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a small fix on ActiveModel::SecurePassword module.\n\nCurrently, `attr_protected(:password_digest)` is called always if the model class responds to `:attr_protected`.\n\nWhen the model class has called `attr_accssible`, `attr_protected` should not be called.\n\nIt changes the active mass assignment authorizer from WhiteList to BlackList. That nullifies the existing protection.\n", "labels": [], "number": 172, "updated_at": "2014-07-01 18:39:30", "user": 5565, "closed_at": "2011-02-09 20:35:37", "id": 551322, "title": "password_digest should be protected by active authorizer", "url": "https://api.github.com/repos/rails/rails/issues/172", "created_at": "2011-01-26 02:53:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/736127", "text": "Kuroda thanks for your pull request with nice tests! I have another proposal to fix the issue though, what if we just overwrite this method inside SecurePassword: https://github.com/kuroda/rails/blob/f126895d58134476435a8aa6e5f1f0ba13ca341a/activemodel/lib/active_model/mass_assignment_security.rb#L145-147\n\nThe following will do the trick:\n\n```\ndef attributes_protected_by_default\n  super + [:password_digest]\nend\n```\n\nAnd we would have the same result without checking for authorizers. This is the same API used by ActiveRecord to set defaults, so it is safe to use.\n", "created_at": "2011-02-03 15:46:47", "user": 9582, "id": 736127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/738769", "text": "Hi Jose,\n\nThank you for precise comment. I will do homework this weekend.\n", "created_at": "2011-02-04 11:22:32", "user": 5565, "id": 738769}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/742956", "text": "Hi Jose,\n\nI made modifications following your suggestion.\n\nTwo remarks:\n1. I define `attributes_protected_by_default` within `has_secure_password` method to ensure `ActiveModel::MassAssignmentSecurity` has been included.\n2. 'password_digest' must be a string instead of symbol.\n", "created_at": "2011-02-06 04:44:47", "user": 5565, "id": 742956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/753315", "text": "kuroda can you please provide one patch only with the right solution?\n", "created_at": "2011-02-09 10:52:02", "user": 52642, "id": 753315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/753617", "text": "I squashed two commits into one and pushed into a new branch `kuroda:secure_password_patch`.\n\nWhat should I do, then? Should I make a pull request again?\n\nI am not well accustomed with the Github operations. Please advise me.\n", "created_at": "2011-02-09 13:01:47", "user": 5565, "id": 753617}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/753967", "text": "spastorino,\n\nFinally, I managed to make a single patch.\n", "created_at": "2011-02-09 15:00:59", "user": 5565, "id": 753967}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/755121", "text": "Pushed thanks\n", "created_at": "2011-02-09 20:35:37", "user": 52642, "id": 755121}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is as per \"exit\" documentation here: http://www.ruby-doc.org/core/classes/Kernel.html#M001444\n\nUse case: In my library I want to run system(\"rails new inside_existing_rails_dir\") but that fails because you can't initialize an application while inside the directory of another.  However, I as a library author may assume it worked because $? == 0 as below (in irb):\n\n```\n> `rails new inside_existing_rails_dir`\n   => \"Can't initialize a new Rails application within the directory of another, please change to a non-Rails directory first.\\nType 'rails' for help.\\n\" \n> $? == 0\n   => true\n```\n\nThanks!\n", "labels": [], "number": 173, "updated_at": "2014-06-12 21:08:43", "user": 10128, "closed_at": "2011-01-29 16:52:06", "id": 557012, "title": "Return a non-zero exit code when commands fail", "url": "https://api.github.com/repos/rails/rails/issues/173", "created_at": "2011-01-27 20:21:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/716043", "text": "Can we have tests? We have a few tests in railties that calls those executables and they would be a good place to test it.\n", "created_at": "2011-01-27 20:37:00", "user": 9582, "id": 716043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/716684", "text": "Sure, can you give me a hint as to which tests currently test rails as if they are at the command line of an existing rails application?\nThanks\n", "created_at": "2011-01-28 00:18:29", "user": 10128, "id": 716684}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/717338", "text": "There are a few places, for example:\n\n1) https://github.com/rails/rails/blob/master/railties/test/isolation/abstract_unit.rb#L264\n\nHere we access the bin file directly and invoke it.\n\n2) https://github.com/rails/rails/blob/master/railties/test/application/rake_test.rb#L68-71\n\nSimilarly, here we go inside an application (created with the command above) and run generators and migrations.\n\nThese are examples of code that do something similar, if you are wondering the best place to put your test though, I suggest this file: https://github.com/rails/rails/blob/master/railties/test/generators/app_generator_test.rb\n", "created_at": "2011-01-28 07:20:32", "user": 9582, "id": 717338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/717342", "text": "Thank you Jos√©\n", "created_at": "2011-01-28 07:21:58", "user": 10128, "id": 717342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/720113", "text": "I've added a couple of tests and made exit code non zero in more places.\n\nI'm having trouble suppressing output of `rails new test` (backticked) because it's raising a `Thor::Error` which puts in a way that `silence(:stdout)` and `silence(:stderr)` don't work with (as it's running in its own process I'd say).\n\nIs there a way to suppress the output of `rails new test` or is it just not important?\n\nThanks\n", "created_at": "2011-01-29 03:37:30", "user": 10128, "id": 720113}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/720395", "text": "It would be nice to supress it, but I am not sure how as well. Using system() instead of backticks don't solve the issue?\n", "created_at": "2011-01-29 08:24:26", "user": 9582, "id": 720395}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/720408", "text": "Unfortunately not. The test is not strictly necessary but improves the coverage for this feature\n", "created_at": "2011-01-29 08:37:30", "user": 10128, "id": 720408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/720419", "text": "Ok, applied thanks!\n", "created_at": "2011-01-29 08:52:06", "user": 9582, "id": 720419}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/735263", "text": "Could this go into 3.0.4 too? If so I can work up a pull request for the 3.0 stable branch.\nThanks\n", "created_at": "2011-02-03 09:39:20", "user": 10128, "id": 735263}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Extension modules defined on associations are added to the association proxy itself, but are not propagated to scopes created from that association proxy.  This commit fixes that.\n\n(The two assertions in the test case cover both built-in scope methods such as `where`, `limit`, etc., as well as scopes defined on the target class of the association.  During initial development, I tried a solution that addressed built-in scopes but failed for named scopes on the target class.)\n", "labels": [], "number": 174, "updated_at": "2014-07-03 03:46:51", "user": 959, "closed_at": "2011-01-31 17:56:03", "id": 560530, "title": "Propagate association extensions to scopes called on the association.", "url": "https://api.github.com/repos/rails/rails/issues/174", "created_at": "2011-01-29 00:23:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/720114", "text": "Can you rebase your patch please? it doesn't apply cleanly on master anymore.\n", "created_at": "2011-01-29 03:38:58", "user": 52642, "id": 720114}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Following line is redundant and I've removed it from dependencies.rb:\n\n```\nrescue NoMethodError then raise \n```\n", "labels": [], "number": 175, "updated_at": "2014-07-03 03:46:54", "user": 386, "closed_at": "2011-01-30 01:13:15", "id": 561316, "title": "Remove redundant line", "url": "https://api.github.com/repos/rails/rails/issues/175", "created_at": "2011-01-29 17:05:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The documentation siad that path would add a prefix, however that's not what it does. For isntance, `resource :posts, :path => 'notas'` would display on `rake routes`:\n\n```\nGET    /notas(.:format)            {:action=>\"index\", :controller=>\"posts\"}\nPOST   /notas(.:format)            {:action=>\"create\", :controller=>\"posts\"}\nGET    /notas/crear(.:format)      {:action=>\"new\", :controller=>\"posts\"}\nGET    /notas/:id/editar(.:format) {:action=>\"edit\", :controller=>\"posts\"}\nGET    /notas/:id(.:format)        {:action=>\"show\", :controller=>\"posts\"}\nPUT    /notas/:id(.:format)        {:action=>\"update\", :controller=>\"posts\"}\nDELETE /notas/:id(.:format)        {:action=>\"destroy\", :controller=>\"posts\"}\n```\n", "labels": [], "number": 176, "updated_at": "2014-07-03 03:46:57", "user": 125900, "closed_at": "2011-01-31 14:47:17", "id": 564313, "title": "Fixes a documentation issue in ActionDispatch::Routing:Mapper::Resources::resource", "url": "https://api.github.com/repos/rails/rails/issues/176", "created_at": "2011-01-31 14:37:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/724911", "text": "Please patch it directly in https://github.com/lifo/docrails. Everyone can push there and is the official repo for docs, thanks.\n", "created_at": "2011-01-31 14:47:17", "user": 52642, "id": 724911}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Extension modules defined on associations are added to the association proxy itself, but are not propagated to scopes created from that association proxy.  This commit fixes that.\n\n(The two assertions in the test case cover both built-in scope methods such as `where`, `limit`, etc., as well as scopes defined on the target class of the association.  During initial development, I tried a solution that addressed built-in scopes but failed for named scopes on the target class.)\n", "labels": [], "number": 177, "updated_at": "2014-06-20 07:31:07", "user": 959, "closed_at": "2011-02-01 14:40:12", "id": 564839, "title": "Propagate association extensions to scopes called on the association.", "url": "https://api.github.com/repos/rails/rails/issues/177", "created_at": "2011-01-31 17:56:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/725621", "text": "Tried this again due to carelessly screwing up the previous pull request.  (Thanks to Matthew McCullough for helping me recover.)\n", "created_at": "2011-01-31 18:04:02", "user": 959, "id": 725621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/728659", "text": "Applied, thanks.\n", "created_at": "2011-02-01 14:40:12", "user": 52642, "id": 728659}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While running some cucumber features I came across a failing cuke that at first glance seemed to be a simple case of a missing translation. In fact, the translation was not missing at all and was rendered properly when viewing the same page in development.\n\nI traced the issue to the fact that in certain cases, when config.cache_classes is true (e.g. in cucumber environments), eager loading of various initializers triggers loading of app models (e.g. via observers). The I18n load path is setup (e.g. config/locales/*.{rb,yml} added to it) via an after_initialize hook but in this particular case, active record models that have been loaded via eagerly loaded initializers (e.g.) and use I18n (.e.g validation messages) don't see the fully loaded load path and thus we get the missing translation issue.\n\nIn my opinion, the I18n load path setup should happen before any eager loading is done so that it's completely setup if any AR models are eagerly loaded.\n\nThis pull request contains both a fix and a test that fails without the fix but passes with it.\n\nSee also: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6353-i18n-load-path-needs-to-be-setup-before-eager-loading\n", "labels": [], "number": 178, "updated_at": "2014-07-03 03:47:02", "user": 494, "closed_at": "2011-02-01 23:48:40", "id": 567171, "title": "Fix i18n load path setup when eager loading", "url": "https://api.github.com/repos/rails/rails/issues/178", "created_at": "2011-02-01 15:26:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/728822", "text": "Hey, thanks for the patch! This looks almost good, but unfortunately, it will make that block of code be executed twice when eager load happens. Maybe we can move that Proc to a method and ensure it will happen only once?\n", "created_at": "2011-02-01 15:30:02", "user": 9582, "id": 728822}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/728897", "text": "Hi Jos√©,\n\nYeah I was also thinking that and I'll try and restructure the code to do so. I was aware of this possibility and I double checked the I18n#load_path in various cases and it never appeared to have duplicate entries but I'll sleep better if I ensure it's only ever executed once. I'll send another pull request pronto :) \n", "created_at": "2011-02-01 15:48:40", "user": 494, "id": 728897}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/729087", "text": "Closed this and opened: https://github.com/rails/rails/pull/179\n", "created_at": "2011-02-01 16:38:20", "user": 494, "id": 729087}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While running some cucumber features I came across a failing cuke that at first glance seemed to be a simple case of a missing translation. In fact, the translation was not missing at all and was rendered properly when viewing the same page in development.\n\nI traced the issue to the fact that in certain cases, when config.cache_classes is true (e.g. in cucumber environments), eager loading of various initializers triggers loading of app models (e.g. via observers). The I18n load path is setup (e.g. config/locales/*.{rb,yml} added to it) via an after_initialize hook but in this particular case, active record models that have been loaded via eagerly loaded initializers (e.g.) and use I18n (.e.g validation messages) don't see the fully loaded load path and thus we get the missing translation issue.\n\nIn my opinion, the I18n load path setup should happen before any eager loading is done so that it's completely setup if any AR models are eagerly loaded.\n\nThis pull request contains both a fix and a test that fails without the fix but passes with it.\n\nSee also: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6353-i18n-load-path-needs-to-be-setup-before-eager-loading\n", "labels": [], "number": 179, "updated_at": "2014-06-13 12:07:55", "user": 494, "closed_at": "2011-02-02 01:43:52", "id": 567293, "title": "Fix i18n load path setup when eager loading", "url": "https://api.github.com/repos/rails/rails/issues/179", "created_at": "2011-02-01 16:16:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/729353", "text": "Applied to both master and 3-0-stable. Thanks saimonmoore\n", "created_at": "2011-02-01 17:43:52", "user": 52642, "id": 729353}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/731657", "text": "My pleasure. Glad to finally be able to contribute back.\n", "created_at": "2011-02-02 09:08:26", "user": 494, "id": 731657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1733540", "text": "Hi guys, I have a rails 2.3.8 app that is hitting the same problem. Do you know is there any way I can port this patch?\n", "created_at": "2011-08-05 07:44:50", "user": 181485, "id": 1733540}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "test_read_attributes_before_type_cast_on_datetime previously had already condition for Oracle adapter but it was deleted by commit 817e37013610c8e8866197594d5e408b4d5daec5. Now I added back this condition as Oracle adapter returns Time value before type cast on datetime attributes.\n\nThis patch should be applied to 3-0-stable branch as well where this mentioned commit was applied as well.\n", "labels": [], "number": 180, "updated_at": "2014-07-03 03:47:10", "user": 4736, "closed_at": "2011-02-03 01:23:58", "id": 570260, "title": "fix for test_read_attributes_before_type_cast_on_datetime - Oracle adapter also returns Time value", "url": "https://api.github.com/repos/rails/rails/issues/180", "created_at": "2011-02-02 16:57:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/732911", "text": "Applied, thanks.\n", "created_at": "2011-02-02 17:23:58", "user": 3124, "id": 732911}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Now that Rails.root is a Pathname, it seems like you should be able to do this:\n\n```\nconfig.action_controller.page_cache_directory = Rails.root.join(\"public/cache\")\n```\n\nThis patch (and test) allow you to do that. Without it, you get inexplicable and impenetrable 500 errors with logs that (super helpfully) look like this:\n\n```\nStarted GET \"/\" for 127.0.0.1 at Sat Feb 05 15:19:06 -0800 2011\n  Processing by MediaController#index as XML\nRendered media/index.xml.builder (0.2ms)\nWrite page /index.html (0.4ms)\nCompleted   in 6ms\n\nErrno::ENOENT (No such file or directory - ):\n```\n", "labels": [], "number": 181, "updated_at": "2014-06-18 13:38:41", "user": 78, "closed_at": "2011-02-06 20:29:23", "id": 577790, "title": "Allow page cache location to be set to a Pathname", "url": "https://api.github.com/repos/rails/rails/issues/181", "created_at": "2011-02-05 23:59:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/744298", "text": "Pushed, thanks.\n", "created_at": "2011-02-06 20:29:23", "user": 52642, "id": 744298}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is the same patch with the one written inline here: https://github.com/rails/rails/commit/c8b7606734cc556ae17a9dd5bb12994a3cff6b7e#L0R41\nJust in case none of you were watching the comment above.\n", "labels": [], "number": 182, "updated_at": "2014-07-03 03:47:15", "user": 11493, "closed_at": "2011-02-07 11:52:53", "id": 579376, "title": "avoid nil.dup in time_zone_conversion", "url": "https://api.github.com/repos/rails/rails/issues/182", "created_at": "2011-02-07 00:15:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/744743", "text": "Can you provide a test case please?, thanks.\n", "created_at": "2011-02-07 01:19:01", "user": 52642, "id": 744743}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/744876", "text": "```\nFrom e3fe99cd36742f463818ae5535a6d927a2969b03 Mon Sep 17 00:00:00 2001\nFrom: Nick Ragaz <nick.ragaz@gmail.com>\nDate: Sun, 6 Feb 2011 22:07:21 -0500\nSubject: [PATCH 1/1] Avoid Cant Dup NilClass exception when setting a time/date attribute to nil\n\n---\n activerecord/test/cases/attribute_methods_test.rb  |    8 ++++++++\n 1 files changed, 8 insertions(+), 0 deletions(-)\n\ndiff --git a/activerecord/test/cases/attribute_methods_test.rb b/activerecord/test/cases/attribute_methods_test.rb\nindex 24a3778..fa06c02 100644\n--- a/activerecord/test/cases/attribute_methods_test.rb\n+++ b/activerecord/test/cases/attribute_methods_test.rb\n@@ -515,6 +515,14 @@ class AttributeMethodsTest < ActiveRecord::TestCase\n       assert_nil record.written_on\n     end\n   end\n+  \n+  def test_setting_time_zone_aware_attribute_to_nil_returns_nil\n+    in_time_zone \"Pacific Time (US & Canada)\" do\n+      record   = @target.new\n+      record.written_on = nil\n+      assert_nil record.written_on\n+    end\n+  end\n\n   def test_setting_time_zone_aware_attribute_interprets_time_zone_unaware_string_in_time_zone\n     time_string = 'Tue Jan 01 00:00:00 2008'\n-- \n1.7.3.5\n```\n", "created_at": "2011-02-07 03:14:28", "user": 10078, "id": 744876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/745724", "text": "Pushed\n", "created_at": "2011-02-07 11:52:53", "user": 52642, "id": 745724}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a fix for this comment. https://github.com/rails/rails/commit/c8b7606734cc556ae17a9dd5bb12994a3cff6b7e#L1R130\nRemoved a to_s call and made the test a bit more meaningful.\n", "labels": [], "number": 183, "updated_at": "2014-07-03 03:47:18", "user": 11493, "closed_at": "2011-02-07 19:52:45", "id": 580054, "title": "Needless to_s in attribute methods test", "url": "https://api.github.com/repos/rails/rails/issues/183", "created_at": "2011-02-07 11:04:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/745723", "text": "Pushed\n", "created_at": "2011-02-07 11:52:46", "user": 52642, "id": 745723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/745727", "text": "Thanks for your quick work!\n", "created_at": "2011-02-07 11:54:02", "user": 11493, "id": 745727}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previously serialized_attributes were kept as class attribute of ActiveRecord::Base - if some attribute was defined as serialized in one subclass then it was serialized in all other subclasses as well (if it had the same name).\n", "labels": [], "number": 184, "updated_at": "2014-07-03 03:47:21", "user": 4736, "closed_at": "2011-02-09 17:18:59", "id": 585618, "title": "Bugfix for serialized_attributes to be class specific", "url": "https://api.github.com/repos/rails/rails/issues/184", "created_at": "2011-02-09 11:13:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/754472", "text": "applied and pushed.  thanks!\n", "created_at": "2011-02-09 17:18:59", "user": 3124, "id": 754472}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If you do this on Ruby 1.9 (or any encoding aware Ruby) it will get pissed:\n\n```\nTPS_REPORT_TOPICS = { 'synergy' => \"Synergy\", 'rev_stream' => \"Revenue Streams\" }\n\nclass ActionController::TestCase\n  #...\n  test \"can create a TPS report with a topic\" do\n    post :create, :tps_report => { :topic => TPS_REPORT_TOPICS.keys.first }\n  end\nend\n```\n\nSince rails tries to force encoding in-place (in ActionDispatch::Http::Parameters#encode_params) on all strings that are passed in, it will raise an error if it gets a frozen string.\n\nI included a patch that dups all strings that are passed as parameters so that rails doesn't do in-place encoding on the strings that are passed in\n", "labels": [], "number": 185, "updated_at": "2014-07-03 03:47:24", "user": 40791, "closed_at": "2011-04-27 20:08:10", "id": 586664, "title": "ActionController::TestCase#process barfs if it gets any frozen values as params", "url": "https://api.github.com/repos/rails/rails/issues/185", "created_at": "2011-02-09 18:28:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064197", "text": "Why are you passing frozen strings as parameters in the first place?\n", "created_at": "2011-04-27 13:30:09", "user": 2741, "id": 1064197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1066327", "text": "You wouldn't intentionally pass a frozen string, but Ruby (1.9 for me) freezes string keys in hash constants, for example.  So if you use a key from the constant hash like in my example, you'll get a frozen string error.  That's pretty confusing, because you don't expect the strings you pass to get/post/put/etc to get modified. In order to get the above example to work with the current code, you have to dup the key that you're passing in...\n", "created_at": "2011-04-27 19:53:00", "user": 40791, "id": 1066327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1066408", "text": "I buy that. Applied!\n", "created_at": "2011-04-27 20:08:10", "user": 2741, "id": 1066408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1066431", "text": "Thanks! You da man\n", "created_at": "2011-04-27 20:13:18", "user": 40791, "id": 1066431}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The message wrongly says that ActiveRecord::Base#class_name will be removed in Rails 2.3.9, but it is still available in 2.3.10 and now 2.3.11.\n", "labels": [], "number": 186, "updated_at": "2014-06-14 13:15:20", "user": 146214, "closed_at": "2011-02-20 15:33:08", "id": 590044, "title": "Fixes deprecation message for ActiveRecord::Base#class_name", "url": "https://api.github.com/repos/rails/rails/issues/186", "created_at": "2011-02-10 19:25:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/790578", "text": "Pushed\n", "created_at": "2011-02-20 15:33:08", "user": 52642, "id": 790578}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey there, while running SimpleForm tests on 3.0.4, I got this missing require and I had to add it manually before requiring `action_view/test_case`. Here is the line that calls the `deprecate` method:\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/request.rb#L138\n\nI believe this can be safely applied on both master and 3-0-stable branch.\nThanks.\n", "labels": [], "number": 187, "updated_at": "2014-07-03 03:47:30", "user": 26328, "closed_at": "2011-02-11 15:31:03", "id": 591660, "title": "Missing require on ActionDispatch", "url": "https://api.github.com/repos/rails/rails/issues/187", "created_at": "2011-02-11 11:44:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/762534", "text": "got this here on restfulie, +1\n", "created_at": "2011-02-11 11:51:29", "user": 66734, "id": 762534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/763109", "text": "Thanks guys, pushed!.\n", "created_at": "2011-02-11 15:31:03", "user": 52642, "id": 763109}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ActiveRecord::Relation where clauses hash syntax accepts an ActiveRecord::Relation as a value, but it maps the relation to ids when it could just use a subquery.  By converting the Relation to an ast we can now accept any subquery.\n\nModel.where(:id => AnotherModel.some_scope.select(:some_id))\n\nwill only run one query and it supports references to tables from the outer query.\n\nHave corresponded with @tenderlove on this.\n", "labels": [], "number": 188, "updated_at": "2014-06-18 20:39:23", "user": 342191, "closed_at": "2011-02-16 19:47:30", "id": 592819, "title": "Relation subqueries", "url": "https://api.github.com/repos/rails/rails/issues/188", "created_at": "2011-02-11 20:46:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/779300", "text": "Merged to master and pushed.  Thanks.\n", "created_at": "2011-02-16 19:47:30", "user": 3124, "id": 779300}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `button_tag` helper isn't very helpful at the moment for two reasons:\n- it defaults the `type` attribute to `\"button\"`, which is unexpected since `type=\"submit\"` is HTML's default for the `<button>` element; and\n- it doesn't take a block, but the main reason to use `<button>` (instead of `<input type=\"submit\">` et al) is that you want to include styled text or other elements like images.\n\nThese two commits fix the implementation, tests and docs for these two issues respectively.\n", "labels": [], "number": 189, "updated_at": "2014-06-14 21:38:49", "user": 3192, "closed_at": "2011-02-12 15:52:14", "id": 593851, "title": "Make button_tag more helpful", "url": "https://api.github.com/repos/rails/rails/issues/189", "created_at": "2011-02-12 12:38:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/765773", "text": "Pushed thanks.\n", "created_at": "2011-02-12 15:52:14", "user": 52642, "id": 765773}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "No need to send a query when all we need is a tiny ping packet ;)\n", "labels": [], "number": 190, "updated_at": "2014-06-28 16:27:46", "user": 11571, "closed_at": "2011-02-13 00:58:49", "id": 594747, "title": "switch over to Mysql2::Client#ping for the mysql2 connection check", "url": "https://api.github.com/repos/rails/rails/issues/190", "created_at": "2011-02-13 00:56:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/766774", "text": "merged and pushed.  Thank you!\n", "created_at": "2011-02-13 00:58:49", "user": 3124, "id": 766774}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I updated the test to include a test for ActiveModel style validation.\n", "labels": [], "number": 191, "updated_at": "2014-06-26 16:59:34", "user": 233615, "closed_at": "2011-02-15 14:04:55", "id": 596484, "title": "ActiveResource Client Validation Tests", "url": "https://api.github.com/repos/rails/rails/issues/191", "created_at": "2011-02-14 00:37:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/774005", "text": "Pushed\n", "created_at": "2011-02-15 14:04:55", "user": 52642, "id": 774005}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed broken link to postgresql documentation\n", "labels": [], "number": 192, "updated_at": "2014-07-02 18:07:05", "user": 3313, "closed_at": "2011-02-15 14:02:28", "id": 600421, "title": "Documentation fix", "url": "https://api.github.com/repos/rails/rails/issues/192", "created_at": "2011-02-15 13:59:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/774001", "text": "Pushed, thanks. BTW you can directly push API and guides changes to http://github.com/lifo/docrails\n", "created_at": "2011-02-15 14:02:28", "user": 52642, "id": 774001}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Detailed write up of problem on Lighthouse https://rails.lighthouseapp.com/projects/8994/tickets/6402\n", "labels": [], "number": 193, "updated_at": "2014-07-03 03:47:48", "user": 269, "closed_at": "2011-04-11 23:17:57", "id": 611002, "title": "Fixes #6402 observer callbacks fired multiple times on 3.0.4", "url": "https://api.github.com/repos/rails/rails/issues/193", "created_at": "2011-02-19 05:27:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986704", "text": "This was pulled in, so I'm closing this pull request. :heart:\n", "created_at": "2011-04-11 23:17:57", "user": 3124, "id": 986704}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think a fairly large portion of the people hacking on rails might be using rvm. It might be time to add the .rvmrc to .gitignore so that peoples personal ruby version/gemset don't accidentally get pushed up to rails/rails. \n", "labels": [], "number": 194, "updated_at": "2014-06-13 08:17:11", "user": 1016, "closed_at": "2011-02-21 17:20:09", "id": 614275, "title": "Add rvmrc to gitignore", "url": "https://api.github.com/repos/rails/rails/issues/194", "created_at": "2011-02-21 07:48:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/792262", "text": "Is there a time you actually want to share your .rvmrc? .rvmrc is in my ~/.gitignore\n", "created_at": "2011-02-21 07:59:54", "user": 9582, "id": 792262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/792270", "text": "Sure. Almost every project I work on with teams has an .rvmrc checked in that keeps everyone on the same ruby with a gemset named after the project. The exceptions would be gems, libraries, etc. \n", "created_at": "2011-02-21 08:06:36", "user": 1016, "id": 792270}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/792403", "text": "Yeah, I don't share even those. But as YMMV, I have applied your commit, thanks!\n", "created_at": "2011-02-21 09:20:09", "user": 9582, "id": 792403}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/793751", "text": "This has been merged now so the discussion is moot, but as a point of principle (see comments on cd12c369961a612f6b083fc0e3b877cf59b737f4) you should have `.rvmrc` in your global `.gitignore` and then explicitly `git add -f` it in any projects where you want to share it, rather than madly adding it to the individual `.gitignore`s of every project where you don't want to share it.\n\nWhether omitting `.rvmrc` from Rails' `.gitignore` would communicate this point to anyone on the planet is, I suppose, a pretty academic consideration.\n", "created_at": "2011-02-21 16:45:08", "user": 3192, "id": 793751}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/793915", "text": "No disagreements from me. Thats just not my workflow. I almost always commit a .rvmrc to the apps I'm working on, and always(almost) ignore them in the libraries.\n", "created_at": "2011-02-21 17:24:58", "user": 1016, "id": 793915}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'd like to use the :include option with non-AR classes.\n\nThis pull request includes some preliminary clean up and test organization. The meat is in the final commit:\n\nThis commit moves support for the :include serialization option for\nserializing associated objects out of ActiveRecord in into ActiveModel.\nThe following methods support the :include option:\n- serializable_hash\n- to_json\n- to_xml\n\nInstances must respond to methods named by the values of the :includes\narray (or keys of the :includes hash). If an association method returns\nan object that is_a?(Enumerable) (which AR collection proxies do), it\nis assumed to be a collection association, and its elements must respond\nto :serializable_hash. Otherwise it must respond to :serializable_hash\nitself.\n\nThere's a bit more documentation and test reorganization that should happen (for instance a lot of the AR serialization tests should be refactored to AM tests), but I wanted to get some feedback before I went any further.\n", "labels": ["activemodel"], "number": 195, "updated_at": "2014-06-21 02:42:34", "user": 98601, "closed_at": "2011-07-18 13:50:44", "id": 616964, "title": "ActiveModel support for the :include serialization option", "url": "https://api.github.com/repos/rails/rails/issues/195", "created_at": "2011-02-22 07:05:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1043289", "text": "That is exactly what I need. Moreover, this is a more consistent approach.\n\n+1\n", "created_at": "2011-04-22 09:01:25", "user": 26732, "id": 1043289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1090132", "text": "Please remember to update the guides with this change in order to consider this a complete pull request.\n", "created_at": "2011-05-02 19:32:46", "user": 83449, "id": 1090132}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115054", "text": "@jfirebaugh looks good. Just one small thing, could you please not remove tests from AR? It is ok to have a bit of duplication in AR and AMo tests. Thanks!\n", "created_at": "2011-05-07 10:10:24", "user": 9582, "id": 1115054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1271876", "text": "@jfirebaugh would you mind update your pull request according to the feedback? Thank you :)\n", "created_at": "2011-06-01 03:29:44", "user": 4912, "id": 1271876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1590963", "text": "I've rebased the commits onto current master, fixed a few problems, and added AM-level tests for `to_xml` with `:include`.\n\nPassing all activemodel and activerecord specs. No AR specs were removed (well, there was one that was duplicating an existing AR spec, but I didn't remove duplication between AR and AMo).\n\n@smartinez87 I don't see anywhere in the guides where this is covered.\n", "created_at": "2011-07-17 18:40:34", "user": 98601, "id": 1590963}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1912705", "text": "It seems that `:include` option is totally replicate the functionality of `:methods` now. The only difference is nesting that is only available for `:include`. \n\nWhy do we need both of them? Can we just add ability of nested attributes for `:methods`(as more natural) and drop `:include`? Because `:include` now looks like a historical feature.\n", "created_at": "2011-08-26 13:52:20", "user": 122436, "id": 1912705}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1913429", "text": "I don't think it makes much sense to couple those two options. What if we want to add more features to :include in the feature that does not make sense for :methods? However, if we can refactor more the code with this behavior in mind, the refactoring is welcome. :)\n", "created_at": "2011-08-26 15:09:52", "user": 9582, "id": 1913429}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi! I'd like to include a JSON Column encoder to use with ActiveRecord::Base `serialize`. Now it only supports YAML.\n\nWhat I don't quite like is that, since `serialize` already has a last argument with a default, the `options` hash isn't so comfortable to use. In my pull request to serialize a column with JSON you must do this:\n\n```\nclass Post < ActiveRecord::Base\n  serialize :data, Hash, :format => :json\nend\n```\n\nYou can't omit the `Hash` part if you want to specify a `:format`, and I don't like that. How would you improve this?\n", "labels": [], "number": 196, "updated_at": "2014-07-01 13:34:06", "user": 83234, "closed_at": "2011-05-03 04:07:41", "id": 623987, "title": "Serializable ActiveRecord columns with JSON", "url": "https://api.github.com/repos/rails/rails/issues/196", "created_at": "2011-02-24 14:18:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/853339", "text": "You may want to check this article about custom serializers: http://edgerails.info/articles/what-s-new-in-edge-rails/2011/03/09/custom-activerecord-attribute-serialization/index.html\n", "created_at": "2011-03-09 20:46:55", "user": 5254, "id": 853339}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1092017", "text": "You can either change the signature to use `*args` and `args.extract_options!` to support an optional hash argument.  Or you'll have to do something where you check something like `if class_name.is_a? Hash`.\n\nFor now I'd prefer we split the pull request in two, apply a JSONColumn (with @miloops' suggested improvements) and then think about some syntactic sugar for the serialize method if needs be\n", "created_at": "2011-05-03 04:07:41", "user": 197, "id": 1092017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2268001", "text": "@oriolgual I tried to [find an open issue or a pull request](https://gist.github.com/rails/rails/issues/search?q=serialize%20json) that covers the idea of adding Coders::JSONColumn to go along with Coders::YAMLColumn but didn't find one.\n", "created_at": "2011-10-03 01:09:44", "user": 4126, "id": 2268001}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes a couple of issues that I have encountered while using postgres tesearch functionality:\n\n  #6073 - Patch by Robert Sosinski (www.robertsosinski.com) adding the tsvector data type\n\n  #6382 - Patch to fix money_precision= setting the variable in the wrong class\n", "labels": ["activerecord"], "number": 197, "updated_at": "2014-07-03 03:48:06", "user": 221133, "closed_at": "2011-07-23 18:37:02", "id": 636156, "title": "Fixes #6073, #6383 - Postgres added tsvector type, and fixed money_precision= NoMethodError", "url": "https://api.github.com/repos/rails/rails/issues/197", "created_at": "2011-03-01 00:35:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/820526", "text": "Any chance we could get a test for this?\n", "created_at": "2011-03-01 00:37:49", "user": 3124, "id": 820526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1048308", "text": "I've written some simple tests to support the PostgreSQL tsvector data type patch for #6073.\n\nWriting these tests has raised some questions. Whilst we can now schema dump without fear, is the data type useful on it's own? I can't think of a case where I would use the tsvector type without a trigger and of course that is not something that is presently supported in the schema DSL (or perhaps I've missed something?).\n\nTests are here, on the tsvector_tests_6073 branch:\nhttps://github.com/scottlowe/rails/commits/tsvector_tests_6073\n\n_EDIT:_\n\nI have read the Rails submission guidelines and have now created a patch and attached it to Lighthouse ticket #6073:\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6073\n", "created_at": "2011-04-23 20:19:04", "user": 241747, "id": 1048308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1271912", "text": "@tenderlove can I get your feedback on his test here? https://github.com/scottlowe/rails/commit/395902b50334e8fff80d136d23d4f872200ff93e\n\nIf you said yes, I think we can merge this pull request and then cherry-pick that commit.\n", "created_at": "2011-06-01 03:40:11", "user": 4912, "id": 1271912}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1273666", "text": "I would be more than happy to write additional tests or amend what is there, if there is an appetite for it.\n", "created_at": "2011-06-01 11:15:53", "user": 241747, "id": 1273666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275223", "text": "@scottlowe no, this is good.  I'll merge it in.\n", "created_at": "2011-06-01 15:53:27", "user": 3124, "id": 1275223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1491468", "text": "Was this ever merged in? @tenderlove\n", "created_at": "2011-07-03 05:39:03", "user": 383250, "id": 1491468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1578218", "text": "the tsvector support got merged with this pull request https://github.com/rails/rails/pull/310\n", "created_at": "2011-07-15 07:55:16", "user": 29251, "id": 1578218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1636753", "text": "Recommend this ticket be closed, no further action is appears to be required.\n", "created_at": "2011-07-23 07:53:40", "user": 1714, "id": 1636753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1821862", "text": "Could someone pull this in to 3-0-stable as it is getting tiresome hand patching it in every time I deploy a 3.0 based app.\n", "created_at": "2011-08-17 00:05:16", "user": 5929, "id": 1821862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3169647", "text": "Agreed, please, merge in rails 3 :)\n", "created_at": "2011-12-15 21:50:36", "user": 58552, "id": 3169647}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As described in Rails issue 6440](https://rails.lighthouseapp.com/projects/8994/tickets/6440-session-reset-undefined-method-destroy-for-hash), when reset_session is called on the request twice, an error is thrown.  The error is thrown because the first reset_session sets the session to a hash, which no longer has a destroy method.  Thus, the second call throws a \"undefined method `destroy' for {}:Hash\" error.\n\nThe pull request has two commits.  The first is a unit test that executes the bug and the second is a patch that checks that session can respond to destroy before calling it.\n", "labels": [], "number": 198, "updated_at": "2014-06-19 02:08:11", "user": 14490, "closed_at": "2011-04-28 07:40:03", "id": 636501, "title": "Patch for issue 6440 - Session Reset undefined method `destroy' for {}:Hash ", "url": "https://api.github.com/repos/rails/rails/issues/198", "created_at": "2011-03-01 04:00:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/896235", "text": "We are seeing this problem in our app since upgrading to Rails 2.3.11 from 2.3.10.   It would be great if this could be made available in 2.3.12.\n", "created_at": "2011-03-20 20:45:14", "user": 97888, "id": 896235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/946379", "text": "+1\n", "created_at": "2011-04-01 17:42:06", "user": 5054, "id": 946379}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/946399", "text": "note: this was already fixed in 3.\\* \n\nhttps://github.com/rails/rails/commit/653acac069e66f53b791caa4838a1e25de905f31\n", "created_at": "2011-04-01 17:48:19", "user": 5054, "id": 946399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064176", "text": "@josevalim, can you apply this to 3-0-stable too?\n", "created_at": "2011-04-27 13:25:26", "user": 2741, "id": 1064176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064193", "text": "It is fixed in 3-0-stable. Do you mean 2-3-stable?\n", "created_at": "2011-04-27 13:29:05", "user": 9582, "id": 1064193}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064350", "text": "Yes, 2-3-stable, sorry.\n\nOn Apr 27, 2011, at 7:29 AM, josevalim wrote:\n\n> It is fixed in 3-0-stable. Do you mean 2-3-stable?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/198#issuecomment-1064193\n\n## \n\nDavid Heinemeier Hansson\n", "created_at": "2011-04-27 13:59:35", "user": 2741, "id": 1064350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068661", "text": "Merged.\n", "created_at": "2011-04-28 07:40:03", "user": 9582, "id": 1068661}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 199, "updated_at": "2014-07-03 03:48:13", "user": 47848, "closed_at": "2011-04-27 13:14:08", "id": 643477, "title": "Using accessor instead of ivar", "url": "https://api.github.com/repos/rails/rails/issues/199", "created_at": "2011-03-03 14:31:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981883", "text": "This will likely be much slower than accessing the instance variable directly, as it adds a method dispatch. Though the dispatch can be optimized away by the runtime in some cases, it doesn't help.\n", "created_at": "2011-04-11 01:56:20", "user": 6351, "id": 981883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/983453", "text": "I agree with you. My intention is to keep the standard, since all the methods on this file call the accessor instead of the instance variable.\n", "created_at": "2011-04-11 12:53:36", "user": 47848, "id": 983453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1052423", "text": "+1 for consistency then! :-)\n", "created_at": "2011-04-25 10:22:19", "user": 6351, "id": 1052423}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1063651", "text": "although I would usually say consistency is good, any slowdown in routing and dispatching is bad, so -1 from me\n", "created_at": "2011-04-27 11:16:11", "user": 8701, "id": 1063651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1063796", "text": "-1 from me too‚Ä¶ routing needs to be as fast as possible.\n", "created_at": "2011-04-27 12:00:22", "user": 4560, "id": 1063796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064121", "text": "Ok. I'm closing this pull request. Thank you guys for review it.\n", "created_at": "2011-04-27 13:14:09", "user": 47848, "id": 1064121}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The way ActiveModel computes the type of serializable methods and attributes, any that return nil will be described as being YAML. \n\nThis produces XML like:\n\n```\n<person>\n  <name>John Doe</name>\n  <preferences type=\"yaml\" nil=\"true\"></preferences>\n</person>\n```\n\nHowever, in many cases, the 'type=\"yaml\"' part is unnecessary, and potentially misleading.\n\nWith this patch, the equivalent to the above XML would be:\n\n```\n<person>\n  <name>John Doe</name>\n  <preferences nil=\"true\"></preferences>\n</person>\n```\n", "labels": [], "number": 200, "updated_at": "2014-07-03 03:48:16", "user": 2077, "closed_at": "2011-05-10 16:40:09", "id": 645249, "title": "Serialized methods that return nil should not be considered YAML", "url": "https://api.github.com/repos/rails/rails/issues/200", "created_at": "2011-03-03 22:37:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115069", "text": "Could you please rebase this pull request? Thanks a lot!\n", "created_at": "2011-05-07 10:21:50", "user": 9582, "id": 1115069}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello, this may be the wrong forum for a patch like this, but Lighthouse isn't accepting my wordy writeup due to apparent spamminess, so I'm submitting it as a pull request instead.  Let me know if I'm out of line.\n\nThis patch is related to:\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5060\n\nI've got a different approach to the problem that seems (to me) to be more semantically \"correct\" and has some performance bennies as well.\n\nI propose changing the semantics to make :limit and :offset happen before count, which makes them consistent with the other ActiveRecord aggregate calculations -- e.g. sum(:limit => foo) operates only on the limited rows.\n\nIf we do that, then there are two performance wins:\n1. If the app developer desires a count of a limited set (e.g. the number of records that will be shown on the next page) of a ginormous table, they won't have to choose between instantiating the records (to use Array#length) and having the database count every row in the table that matches before returning.  With this approach, the database will shortcut its count as soon as it collects offset + limit rows.\n2. If an app ever does a count(:limit => 0) in some corner case, we don't have to hit the database at all.  We can just return zero.\n\nAs well as the fact that then count == length == size, so this issue is resolved.\n\nAttached is a patch that implements what I described.  Note that I also changed the tests for issue 6268, as if this approach is acceptable, those constraints would no longer apply.\n\nOn the \"why'd he do that?\" side of things, since Arel doesn't support subqueries, there's some trickery to make that happen in calculations.build_count_subquery.  I'd really like to be able to do this inside Arel, but it appears that's not possible right now.  Given that relational algebra doesn't define limit and offset, Arel could alternatively change the behavior of its own count operation for future versions in a similar way without opening the floodgates to generic subqueries.\n\nAdmittedly this patch is pretty edgy because of the Arel workaround, so even if you buy the semantic change, I could see wanting to change the behavior at the Arel layer instead.  I just wanted to submit this as a proof of concept (all tests pass on the 4 default DB drivers) and see what people think.  Likewise, there may be legitimate reasons that this approach isn't desirable.  Please let me know what you think and I'll be glad to move the ball forward.\n\nThanks,\n-john\n", "labels": [], "number": 201, "updated_at": "2014-06-15 10:33:11", "user": 40619, "closed_at": "2011-03-30 16:55:46", "id": 645844, "title": "Count behavior", "url": "https://api.github.com/repos/rails/rails/issues/201", "created_at": "2011-03-04 05:01:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/854966", "text": "+1 for this approach. Works perfectly for me (with my own pagination library).\n", "created_at": "2011-03-10 06:42:01", "user": 11493, "id": 854966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/863215", "text": "-1 on this from me. Doing the count on a subquery forces the database to do full scan of the subquery. This can be very slow even on quite small datasets (e.g. my MacBook to 0.5 seconds to do the query 'SELECT COUNT(*) FROM (SELECT \\* FROM products LIMIT 500 OFFSET 0) AS t' where the products table contains 3000 records).\n\nIf a developer needs to know the number of records on the next page then this can be calculated very cheaply from a will_paginate or thinking-sphinx result, e.g:\n\n```\n# Given a results instance r\n[[r.total_entries - r.offset, r.per_page].min, 0].max \n```\n", "created_at": "2011-03-12 08:20:11", "user": 6321, "id": 863215}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/863607", "text": "Hi Andrew,\n\nThat's a pretty surprising result.  Here's a Postgres 8.4.4 query plan for the two forms against a 2 million row table running on my MacBook.  Note that the number of rows operated on in the sequential scan in the subquery form is shortcut after the LIMIT is reached.  Also the runtimes appear to strongly favor the subquery approach.  Obviously each database's query optimizer is different, but this is an operation that at least Postgres can optimize extremely well.  I believe Sqlite3 and MySQL can do the same, but will do more research.\n\nI definitely don't disagree that the count of the next page's records is easy to arrive at once you've either done a count of the unlimited query (which, as the example below shows can be quite expensive in and of itself), and min'd that against your page size.  Alternatively you can avoid hitting all the matching rows in the table if you use to_a and instantiate the whole next pageful of records (which could be moderately expensive if there are a number of branchy includes), but otherwise the present state of ActiveRecord doesn't allow you to get at what I see to be a very useful optimization provided by the database, while also not being semantically in line with the rest of ActiveRecord's aggregate calculations.\n\nCheers,\n-john\n\n```\ncount_test=# select count(*) from stuff;\n  count  \n---------\n 2097152\n(1 row)\n\n                                                      QUERY PLAN                                                       \n-----------------------------------------------------------------------------------------------------------------------\n Aggregate  (cost=50046.40..50046.41 rows=1 width=0) (actual time=623.414..623.414 rows=1 loops=1)\n   ->  Seq Scan on stuff  (cost=0.00..44803.52 rows=2097152 width=0) (actual time=0.017..391.077 rows=2097152 loops=1)\n Total runtime: 623.484 ms\n(3 rows)\n\n\ncount_test=# explain analyze select count(*) from (select 1 from stuff limit 100) as t;\n\n                                                      QUERY PLAN                                                       \n-----------------------------------------------------------------------------------------------------------------------\n Aggregate  (cost=3.39..3.40 rows=1 width=0) (actual time=0.054..0.054 rows=1 loops=1)\n   ->  Limit  (cost=0.00..2.14 rows=100 width=0) (actual time=0.010..0.046 rows=100 loops=1)\n         ->  Seq Scan on stuff  (cost=0.00..44803.52 rows=2097152 width=0) (actual time=0.009..0.024 rows=100 loops=1)\n Total runtime: 0.078 ms\n(4 rows)\n```\n", "created_at": "2011-03-12 14:01:55", "user": 40619, "id": 863607}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/863673", "text": "Also as a quick note, in the patch, no subquery is generated unless there's a :limit or :offset on the relation, so there is no penalty to existing code that is not passing :limit or :offset.  relation.except(:limit, :offset).count will result in the SQL you'd expect.\n\n-john\n", "created_at": "2011-03-12 14:41:57", "user": 40619, "id": 863673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/874025", "text": "I checked sqlite3 and MySQL and both will shortcut the count of a limited subquery, returning extremely quickly when counting 100 matching rows of a 2 million-row table.  Note that MySQL appears to cache the count of a table so as to avoid the full table scan in a trivial `select count(*) from tablename;`  But when you make it do a little bit of work (in the example below, the `LIKE` expression matches every row), which is very likely to be the case in any scoped relation, the performance win of the subquery becomes clear:\n\nThis looks fast:\n\n```\nmysql> select count(*) from stuff;\n+----------+\n| count(*) |\n+----------+\n|  2097152 |\n+----------+\n1 row in set (0.00 sec)\n```\n\nBut when you make the database perform some manner of scan (in this case a full table scan, though in less-contrived use cases, you'd be dealing with index scans and a smaller performance hit), things get sluggish:\n\n```\nmysql> select count(*) from stuff where value like 'some%';\n+----------+\n| count(*) |\n+----------+\n|  2097152 |\n+----------+\n1 row in set (0.47 sec)\n```\n\nThough if you don't care to know how many matching rows there are in the whole table, and just want to know how many results wil show up on a given page, then this is really fast:\n\n```\nmysql> select count(*) from (select 1 from stuff where value like 'some%' limit 100) t;\n+----------+\n| count(*) |\n+----------+\n|      100 |\n+----------+\n1 row in set (0.00 sec)\n```\n\nSqlite3 exhibits similar behavior:\n\n```\nsqlite> select count(*) from stuff;\n2097152\nCPU Time: user 0.043846 sys 0.102457\nsqlite> select count(*) from stuff where value like 'some%';\n2097152\nCPU Time: user 1.080249 sys 0.117463\nsqlite> select count(*) from (select 1 from stuff where value like 'some%' limit 100) t;\n100\nCPU Time: user 0.000237 sys 0.000073\n```\n\nFrom reading Sqlite's documentation, its subqueries are implemented by rendering the subquery to a temporary table and then driving the main query off of that result.  I suspect that characteristic may have contributed to the slowness mentioned on Andrew's database (though a time of 500ms for a scan of 500 rows is still a surprise).  Since Sqlite performs the subquery in its entirety, if the products table has a lot of columns or large TEXT columns, reading and burning that data down to a temporary table would be an expensive process with the \"SELECT *\" from his example.  Andrew's example SQL is not what the patch I submitted generates, though -- my patch performs a simple \"SELECT 1\" inside the subquery (if no column is explicitly requested) or a select on the requested column if it is.\n\nAndrew, does this address your concerns?  I'd be glad to do more research if there's an angle I'm overlooking.  If anybody has any feedback, I'd appreciate your input.\n\nThanks,\n-john\n", "created_at": "2011-03-15 03:11:39", "user": 40619, "id": 874025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/876919", "text": "I didn't see the \"SELECT 1\" - that does make it quicker\n", "created_at": "2011-03-15 16:35:43", "user": 6321, "id": 876919}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/909986", "text": "Adding this on master seems fine to me.\n\n@jmileham arel [supports subqueries just fine](https://github.com/rails/rails/blob/master/activerecord/test/cases/relations_test.rb#L518-524). Is there a particular feature you're looking for?\n", "created_at": "2011-03-23 22:03:06", "user": 3124, "id": 909986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/910237", "text": "Thanks Aaron,\n\nCool... the ability to use subqueries with in is no doubt far more valuable in everyday use than what I needed it to do. :)  From a quick browse of the Arel code, though, it appears that Arel supports subqueries in the where clause as arguments to `#in` and `#not_in`, and as arguments of `#union`, `#intersect` and `#except`, but can't use a SelectManager as the argument of a `#from`.  This is a kind of subquery that may not be philosophically in line with relational algebra, so maybe that's not a bad thing.  But basically Arel can't presently do things like this without rendering the SQL of the subquery out first:\n\nhttps://github.com/jmileham/rails/blob/d5994ee48af14d67f0eec7d23863d4b19211b078/activerecord/lib/active_record/relation/calculations.rb#L324-325\n\nThis could probably be done if Arel could visit SelectManager, but I'm not sure whether that's the right thing or not.  Alternatively, Arel could probably wrap this into the behavior of its own count operation, because it's arguable that Arel shouldn't even be capable of rendering the SQL `SELECT COUNT(*) FROM t LIMIT 3;` since the LIMIT is noise in that context.\n", "created_at": "2011-03-23 23:06:48", "user": 40619, "id": 910237}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/910541", "text": "@jmileham you can just call `ast` on the select manager.  ARel does not do \"relational algebra\", it merely manages an SQL ast.  Since one ast is a valid subtree of another ast, you _should_ be able to pull the ast from one select manager, and pass it to another select manager.\n\nAs for aliasing your subquery, we can construct an `AS` node.  Off the top of my head, you could do something like this:\n\n```\nas = Arel::Nodes::As.new sm1.grouping(sm1.ast), Arel.sql('omg')\nsm2.project('whatever').from(as)\n```\n\nProbably we need a factory method for `As` nodes, but I see no reason why Arel cannot handle this use case today.\n", "created_at": "2011-03-24 00:41:49", "user": 3124, "id": 910541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/910577", "text": "[This commit](https://github.com/rails/arel/commit/2b27e653f7be7649f56b834543bcaf27e2b44c74) should do the trick.\n", "created_at": "2011-03-24 00:56:08", "user": 3124, "id": 910577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/911001", "text": "Awesome.  I didn't know it was legit to touch the ast from outside of ARel so I didn't pursue the avenue of unwrapping the select manager and playing with its goodies, thinking that if that were meant to be, ARel would let me simply pass the select manager in directly.  This will certainly lead to a cleaner impl.  I'll wrap my head around it and submit a revised patch.\n", "created_at": "2011-03-24 04:13:05", "user": 40619, "id": 911001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/911064", "text": "Yes.  The AST is all yours.  I am happy to accept pull requests that make the methods accept manager objects and extract the ast rather than passing the ast.  ;-)\n", "created_at": "2011-03-24 04:41:27", "user": 3124, "id": 911064}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/913861", "text": "Note that this latest commit won't work unless you're running the from_select_mgr branch of jmileham/arel or my Arel patch gets accepted... :)  If that doesn't fly, I'll refactor my commit.  @tenderlove's Arel commit from yesterday was more than enough to get the job done.\n", "created_at": "2011-03-24 19:40:16", "user": 40619, "id": 913861}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/937080", "text": "I've merged this in to master, so I'm closing now.  Thanks!\n", "created_at": "2011-03-30 16:55:35", "user": 3124, "id": 937080}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/937085", "text": "oops, clicked the wrong button.\n", "created_at": "2011-03-30 16:55:48", "user": 3124, "id": 937085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/937136", "text": "Thank you!\n", "created_at": "2011-03-30 17:05:26", "user": 40619, "id": 937136}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 202, "updated_at": "2014-06-18 10:57:31", "user": 10926, "closed_at": "2011-03-06 23:48:52", "id": 651109, "title": "Active model unused variable", "url": "https://api.github.com/repos/rails/rails/issues/202", "created_at": "2011-03-06 21:28:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Small change that fixes this bug:\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6539-plugin_new-generator-creates-empty-apptemplatespublicjavascripts-directory-instead-of-publicjavascripts\n\nAny reason this shouldn't be applied Piotr?\n", "labels": [], "number": 203, "updated_at": "2014-06-15 16:25:47", "user": 479, "closed_at": "2011-04-27 13:23:07", "id": 652064, "title": "Fix empty jsdirectory", "url": "https://api.github.com/repos/rails/rails/issues/203", "created_at": "2011-03-07 07:21:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064162", "text": "The asset pipeline has made this obsolete.\n", "created_at": "2011-04-27 13:23:07", "user": 2741, "id": 1064162}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently blowing up as discussed here:\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6519-plugin_new_generator-fails-in-template-undefined-method-today-for-dateclass-nomethoderror\n\nCreating this in case it's easier to pull in than a diff, and if require 'date' makes more sense than pulling in AS/time\n", "labels": [], "number": 204, "updated_at": "2014-07-03 03:48:30", "user": 479, "closed_at": "2011-03-11 19:39:31", "id": 652066, "title": "Fix Date.today error in MIT-LICENSE", "url": "https://api.github.com/repos/rails/rails/issues/204", "created_at": "2011-03-07 07:23:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/861695", "text": "This has been fixed.\n", "created_at": "2011-03-11 19:39:31", "user": 2741, "id": 861695}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found `destroy`, `destroy_all` and `find_by_sql` only accepts arguments in Array form whereas methods like `find` and `where` accepts variadic arguments.\n\n```\nUser.find([1, 2, 3])\n#=> SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" IN (1, 2, 3)\nUser.find(1, 2, 3)\n#=> SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" IN (1, 2, 3)\nUser.destroy([1, 2, 3])\n#=> DELETE 3 users\nUser.destroy(1, 2, 3)\n#=> ArgumentError: wrong number of arguments (3 for 1)\n\nUser.where(['name = ?', 'user001'])\n#=> SELECT \"users\".* FROM \"users\" WHERE (name = 'user001')\nUser.where('name = ?', 'user001')\n#=> SELECT \"users\".* FROM \"users\" WHERE (name = 'user001')\nUser.destroy_all(['name = ?', 'user001'])\n#=> DELETE user001\nUser.destroy_all('name = ?', 'user001')\n#=> ArgumentError: wrong number of arguments (2 for 1)\n```\n\nThis pull request enables accepting varargs for those 3 methods in order to get rid of the API inconsistency, and makes the whole API more Rails-3-ish.\n\nI think the implementations could be more cleaner (especially, find_by_sql looks ugly and dirty), but anyway it works and passes all tests on both 1.8.7 and 1.9.2.\n", "labels": ["activerecord"], "number": 205, "updated_at": "2014-06-26 16:59:36", "user": 11493, "closed_at": "2011-10-09 00:04:29", "id": 652540, "title": "accept variadic arguments for AR destroy, destroy_all and find_by_sql", "url": "https://api.github.com/repos/rails/rails/issues/205", "created_at": "2011-03-07 12:37:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1264109", "text": "+1\n", "created_at": "2011-05-30 23:24:40", "user": 6351, "id": 1264109}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334497", "text": "Good patch, but I'm not so positive on the change. I think we accept varargs too often. It's confusing and ambiguous.\n", "created_at": "2011-10-09 00:04:29", "user": 199, "id": 2334497}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'd like to define behavior within an around callback based on the value from the return result of the event.  Currently, this is possible (seemingly be chance) based on the order and types of callbacks you're using.  For example, the following example will allow access to the result:\n\n```\nclass MySuper\n  include ActiveSupport::Callbacks\n\n  define_callbacks :save\nend\n\nclass AroundCallback < MySuper\n  attr_reader :result\n\n  set_callback :save, :around, :around_save\n\n  def around_save\n    @result = yield\n  end\n\n  def save\n    run_callbacks :save do\n      :saved\n    end\n  end\nend\n\no = AroundCallback.new\no.save    # => :saved\no.result  # => :saved\n```\n\nHowever, once you start incorporating after callbacks, the results are inconsistent due to the order in which callbacks are invoked.  Adding to the example above:\n\n```\nclass MultipleCallbacks < AroundCallback\n  attr_reader :result\n\n  set_callback :save, :after, :after_save\n\n  def after_save\n    :after_save\n  end\nend\n\no = MultipleCallbacks.new\no.save    # => :saved\no.result  # => :after_save\n```\n\nThis change makes the behavior consistent by always returning the event's (:save in the example) result to the around callback.\n", "labels": [], "number": 206, "updated_at": "2014-07-03 03:48:38", "user": 6991, "closed_at": "2011-03-08 07:01:14", "id": 652649, "title": "Allow access to a callback event's return result from around callbacks", "url": "https://api.github.com/repos/rails/rails/issues/206", "created_at": "2011-03-07 13:33:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/842807", "text": "+1 patch and tests are good\n", "created_at": "2011-03-07 14:16:18", "user": 9582, "id": 842807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/846182", "text": "Applied.\n", "created_at": "2011-03-08 07:01:14", "user": 9582, "id": 846182}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes regression [6147](https://rails.lighthouseapp.com/projects/8994/tickets/6147-find_or_create-via-has_many-fails-for-hash-parameters) with tests. `ActiveRecord::Associations::AssociationCollection#find_or_create_by_*` should match behavior of `ActiveRecord::Base#find_or_create_by_*`, as well as it's behavior before 2.3.9.\n", "labels": ["activerecord", "regression"], "number": 207, "updated_at": "2014-06-18 14:56:03", "user": 8951, "closed_at": "2011-07-11 08:01:53", "id": 654726, "title": "2-3-stable - fixes regression 6147-find_or_create-via-has_many-fails-for-hash-parameters", "url": "https://api.github.com/repos/rails/rails/issues/207", "created_at": "2011-03-08 02:57:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/862100", "text": "Should I squash those into one commit?  Not sure if it would confuse the github pull request.\n", "created_at": "2011-03-11 21:22:59", "user": 8951, "id": 862100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1101041", "text": "With this patch I still see a problem with find_or_create_by with multiple parameters:\n\n```\np.niod_metrics.find_or_create_by_metric_type_id_and_month(666, Date.parse('2011-06-01'))\n\nNiodMetric Load (0.5ms)   SELECT * FROM 'niod_metrics' WHERE ('niod_metrics'.'month' IS NULL AND \n'niod_metrics'.'metric_type_id' IN( 666,'2011-06-01' )) AND ('niod_metrics'.niodmetrics_id = 1750 AND \n'niod_metrics'.niodmetrics_type = 'Profile') LIMIT 1\n\nNiodMetric Create (0.2ms)   INSERT INTO 'niod_metrics' ('created_at', 'month', 'updated_at', 'last_activity_at', \n'niodmetrics_type', 'value', 'metric_type_id', 'niodmetrics_id') VALUES('2011-05-04 17:10:44', '2011-06-01', \n'2011-05-04 17:10:44', NULL, 'Profile', NULL, 666, 1750)\n```\n\nThe insert is correct, but the find isn't. This is blocking a move from rails 2.3.4 to 2.3.11.\n", "created_at": "2011-05-04 17:22:32", "user": 22698, "id": 1101041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1127071", "text": "Hey snowmoonsoftware\n\nI believe the issue you're seeing is unrelated to this patch.  This patch only effects the insert statement.  To find the root cause of the select being incorrect, you need to follow the calls through `pull_finder_args_from(DynamicFinderMatch.match(method).attribute_names, *args)` on line 383 of activerecord/lib/active_record/associations/association_collection.rb.\n\nThanks\n", "created_at": "2011-05-09 23:41:03", "user": 8951, "id": 1127071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1271934", "text": "While multiple commits are OK, the commit doesn't cleanly merged anymore. Do you mind rebased it and force-push to your own branch, so it would update the pull request?\n\n(And yes, if you squashed them together that would be aw3som3.\n", "created_at": "2011-06-01 03:47:30", "user": 4912, "id": 1271934}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328376", "text": "Rebased and squashed.\n\nThanks\n", "created_at": "2011-06-08 17:33:22", "user": 8951, "id": 1328376}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544890", "text": "Hi,\n\nThanks for this patch, but I am afraid that the 2-3-stable branch is not being released any more (unless there are serious security issues etc).\n\nPerhaps you could consider packaging your fix as a plugin to help people make the migration to 3.X.\n\nJon\n", "created_at": "2011-07-11 08:01:53", "user": 1979, "id": 1544890}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Quick change for https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6530\n\nCheck if svn/git is installed prior to actually installing a plugin. \n\nNot sure how to write a test to cover this... \n", "labels": ["railties"], "number": 208, "updated_at": "2014-06-15 21:06:26", "user": 317489, "closed_at": "2012-01-08 04:56:45", "id": 654892, "title": "#6530 - Plugin install from Github should fail with a message if Git is not installed", "url": "https://api.github.com/repos/rails/rails/issues/208", "created_at": "2011-03-08 04:44:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/851450", "text": "Just fixing the link:\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6530\n", "created_at": "2011-03-09 12:38:43", "user": 6663, "id": 851450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1296824", "text": "I also think both commands, which do the same for different tools, should be named similarly.\n", "created_at": "2011-06-03 13:57:08", "user": 9347, "id": 1296824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377029", "text": "I really like this, but I don't think it's ready yet.\n- Those `?` methods, you can easily make them as alias method. That would be better because I believe it'll be done in C.\n- `is_` convention, doesn't make sense to have it.\n- It would be better if you're detecting which command we need, instead of throwing error that \"git/svn etc. is missing\"\n\nDo you mind make another patch and rebase your patch? I think that would be nice for 3.2.x\n", "created_at": "2011-06-15 21:36:48", "user": 4912, "id": 1377029}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334492", "text": "Bump. Interested in addressing this feedback?\n\nThis could use a test, too, demonstrating that the failure is fixed.\n", "created_at": "2011-10-09 00:03:24", "user": 199, "id": 2334492}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2713819", "text": "Where do the tests reside for `rails plugin` if I am looking at the structure of the tests directory they should reside in `/railties/test/application` which is where the tests for console, runner, other commands etc. but I can't find any which look like they currently have tests that apply. If one doesn't exist I can make some but don't want to redo something that already exists.\n", "created_at": "2011-11-11 22:03:35", "user": 648220, "id": 2713819}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2877401", "text": "I tried to work on this issue. See https://github.com/waseem/rails/commit/2a1a907e4ca940b50a421351c05929ce3e45df5a But am not submitting a pull request because I am unable to write tests cases for plugin installation.\n\nI have put a `railties/test/application/plugin_test.rb` file that will hold tests for plugin installation/removal etcetera.\n\nI was not able to write tests because if you see line#15 of `plugin_test.rb`, when I try to do `bundle exec rails plugin install`, test tries to really install the plugin. Is there a way I could stub out `Plugin#install_using_#{method}` methods?\n\nI also posted a message on core mailing list https://groups.google.com/forum/#!topic/rubyonrails-core/2dm6tb6OcHM but did not get any responses.\n", "created_at": "2011-11-25 19:23:44", "user": 42636, "id": 2877401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3398393", "text": "This can be closed because of https://github.com/rails/rails/commit/dad7fdc5734a3813246f238ac5760b2076932216#diff-17\n", "created_at": "2012-01-07 21:33:20", "user": 42636, "id": 3398393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3400306", "text": "Closing this\n", "created_at": "2012-01-08 04:56:45", "user": 3948, "id": 3400306}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Pretty useless fix, but might as well be consistent in the template. \n", "labels": [], "number": 209, "updated_at": "2014-07-03 03:48:52", "user": 3483, "closed_at": "2011-03-08 23:08:03", "id": 655985, "title": "Routes template inconsistency", "url": "https://api.github.com/repos/rails/rails/issues/209", "created_at": "2011-03-08 15:00:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/847506", "text": "Applied, thanks!\n", "created_at": "2011-03-08 15:08:19", "user": 3387, "id": 847506}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The private `simple_format` method introduced in `ActionMailer::MailHelper` breaks the method of the same name in `ActionView::Helpers::TextHelper`. This patch renames the former.\n\nCommit with the regression: https://github.com/rails/rails/commit/4083e0ea2ae6f87929a32935122f2427845098e0\n\nLighthouse ticket: https://rails.lighthouseapp.com/projects/8994/tickets/6513-simple_format-behaviour-changed-when-used-in-mailer-view\n", "labels": [], "number": 210, "updated_at": "2014-06-18 01:45:19", "user": 14214, "closed_at": "2011-03-08 21:49:39", "id": 657070, "title": "Simple format", "url": "https://api.github.com/repos/rails/rails/issues/210", "created_at": "2011-03-08 20:52:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1617791", "text": "fixed in fb34f85\n", "created_at": "2011-07-20 18:46:40", "user": 42373, "id": 1617791}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rubys own `Float#round` method in versions 1.9 and above accept optional precision and at least two times faster then ActiveSupport's `Float#round`.\n", "labels": [], "number": 211, "updated_at": "2014-07-03 03:48:57", "user": 412101, "closed_at": "2011-03-09 17:12:11", "id": 659344, "title": "Use rubys own Float#round method in versions 1.9 and above", "url": "https://api.github.com/repos/rails/rails/issues/211", "created_at": "2011-03-09 15:48:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/852441", "text": "Going to make new pull request.\n", "created_at": "2011-03-09 17:12:11", "user": 412101, "id": 852441}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rubys own Float#round method in versions 1.9 and above takes optional precision parameter and at least two times faster then Active Support's Float#round.\n", "labels": [], "number": 212, "updated_at": "2014-07-03 03:49:00", "user": 412101, "closed_at": "2011-03-09 17:36:08", "id": 659669, "title": "Use Rubys own Float#round method in versions 1.9 and above", "url": "https://api.github.com/repos/rails/rails/issues/212", "created_at": "2011-03-09 17:26:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/852568", "text": "Applied, thanks!\n", "created_at": "2011-03-09 17:36:08", "user": 3124, "id": 852568}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Is it just reasonable to change dbconsole usage message?\nFrom:\n    Usage: dbconsole [options] [environment]\nto\n    Usage: dbconsole [environment] [options]\n", "labels": [], "number": 213, "updated_at": "2014-06-30 20:11:52", "user": 412101, "closed_at": "2011-03-09 22:07:21", "id": 659982, "title": "make dbconsole honor environment when options specified", "url": "https://api.github.com/repos/rails/rails/issues/213", "created_at": "2011-03-09 19:30:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/853140", "text": "I think it is more common to have options first, arguments later, generally speaking. I'd vote for revising the implementation.\n", "created_at": "2011-03-09 19:55:02", "user": 3387, "id": 853140}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6556-length-validation-for-integer-fixnum-fields\n", "labels": [], "number": 214, "updated_at": "2014-07-03 03:49:06", "user": 3668, "closed_at": "2011-03-13 06:07:27", "id": 662695, "title": "Length validation fix", "url": "https://api.github.com/repos/rails/rails/issues/214", "created_at": "2011-03-10 17:59:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/856941", "text": "Please provide a test case\n", "created_at": "2011-03-10 18:15:41", "user": 52642, "id": 856941}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/864118", "text": "You were right - here are more commits - with test case and fix which doesn't brake things\n", "created_at": "2011-03-12 18:54:09", "user": 3668, "id": 864118}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/864472", "text": "please merge the commits in one so it's easier to review\n", "created_at": "2011-03-12 21:41:41", "user": 52642, "id": 864472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/864566", "text": "see https://github.com/rails/rails/pull/224\n", "created_at": "2011-03-12 22:29:41", "user": 3668, "id": 864566}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Change autolaod to autoload\n", "labels": [], "number": 215, "updated_at": "2014-07-03 03:49:09", "user": 251723, "closed_at": "2011-03-11 19:56:06", "id": 665743, "title": "Documentation typo fix", "url": "https://api.github.com/repos/rails/rails/issues/215", "created_at": "2011-03-11 16:46:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/861184", "text": "Documentation fixes can be don on the [lifo/docrails](https://github.com/lifo/docrails) repository.\nYou just have to ask lifo for commit access on that repo and commit this yourself :)\n", "created_at": "2011-03-11 17:10:45", "user": 9347, "id": 861184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/861267", "text": "lifo/docrails seems to be only for 3.0, but this is for the 2-3-stable branch.\n", "created_at": "2011-03-11 17:31:40", "user": 251723, "id": 861267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/861613", "text": "Hi Kyle,\n\nThere is no branch distinction in docrails. Just go ahead and commit the change there. It ll be available in the guides site from the next release and in the edge guides right away. \n", "created_at": "2011-03-11 19:17:06", "user": 146214, "id": 861613}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/861625", "text": "Just noticed that the fix is in a changelog. docrails usually does not accept changes in 'changelogs' as direct commits. Can you connect with Xavier Noria (fxn on github) about this? Thanks! \n", "created_at": "2011-03-11 19:19:58", "user": 146214, "id": 861625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/861764", "text": "Vijay is right, CHANGELOGs can't be changed via docrails.\n\nI would be glad to apply that fix to 2-3-stable, but 2-3-stable is frozen. We are only pushing security fixes there. In order not to move 2-3-stable I prefer not to apply it then. Thanks anyway.\n", "created_at": "2011-03-11 19:56:06", "user": 3387, "id": 861764}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently `<%= Date.today.year %>` is broken in `railties/lib/rails/generators/rails/plugin_new/templates/MIT-LICENSE` and can easily be solved with a `require 'date'`. But I feel that putting a MIT-LICENSE in a fresh plugin in is a bit too opinionated especially since a new rails app doesn't include it and shouldn't either. If others feel strongly that new plugin should include the license, I feel that new rails apps should do it as well.\n", "labels": [], "number": 216, "updated_at": "2014-06-18 10:04:45", "user": 294954, "closed_at": "2011-03-11 19:04:52", "id": 666120, "title": "Remove license from new plugins", "url": "https://api.github.com/repos/rails/rails/issues/216", "created_at": "2011-03-11 19:02:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/861575", "text": "Rails plugins are meant to be shared, Rails applications generally aren't. I'm not interested in changing the opinionated default of including the MIT-LICENSE, but please do fix the bug. You can reopen a new pull request with just that fix and I'll apply that.\n", "created_at": "2011-03-11 19:04:52", "user": 2741, "id": 861575}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`railties/lib/rails/generators/rails/plugin_new/templates/MIT-LICENSE` uses `Date.today` without its generator `require 'date'` which is needed for that method.\n", "labels": [], "number": 217, "updated_at": "2014-06-29 00:38:39", "user": 294954, "closed_at": "2011-03-11 19:37:57", "id": 666169, "title": "Fix plugin generator license", "url": "https://api.github.com/repos/rails/rails/issues/217", "created_at": "2011-03-11 19:24:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/861688", "text": "This has been committed. Thanks!\n", "created_at": "2011-03-11 19:37:57", "user": 2741, "id": 861688}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/6564-undefined-method-zero-for-orderedhash#ticket-6564-4\n\nAfter a group query, a Relation that hasn't been loaded will throw an error calling empty? as the count variable is an OrderedHash instead of a Numeric. This tests for the Numeric case and uses the appropriate call.\n", "labels": [], "number": 218, "updated_at": "2014-07-02 19:06:05", "user": 67093, "closed_at": "2011-03-12 22:53:03", "id": 666736, "title": "Patch for issue #6564", "url": "https://api.github.com/repos/rails/rails/issues/218", "created_at": "2011-03-11 22:49:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/862439", "text": "You need to add some tests as well to prevent regressions.\n", "created_at": "2011-03-11 23:06:20", "user": 6321, "id": 862439}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/862460", "text": "I'm really new to this, how should I begin writing tests?\n", "created_at": "2011-03-11 23:12:58", "user": 67093, "id": 862460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/862658", "text": "Firstly look at some existing tests for something related to what you're trying to do, e.g:\nhttps://github.com/rails/rails/blob/master/activerecord/test/cases/relations_test.rb#L658-674\n\nIt turns out there's no tests for empty? so it'd be good to add one for the simple case as well. You'd want to test that the empty? doesn't load the records if they're not loaded and also that it doesn't issue a query if the records are loaded. \n\nAlso you need to change your implementation as it's doing two queries\n", "created_at": "2011-03-12 00:34:13", "user": 6321, "id": 862658}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/863394", "text": "This should no longer make multiple queries. Test cases for basic and complex calls were added as well.\n", "created_at": "2011-03-12 11:10:10", "user": 67093, "id": 863394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/864622", "text": "Applied in [015192](https://github.com/rails/rails/commit/015192560b7e81639430d7e46c410bf6a3cd9223) and backported to 3-0-stable in [3a22e7](https://github.com/rails/rails/commit/3a22e744162ce4d29f228e76d3e3ff355c93b88f).\n", "created_at": "2011-03-12 22:53:03", "user": 6321, "id": 864622}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The original bug is reported in this lighthouse ticket:\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6225-memcachestore-cant-deal-with-umlauts-and-special-characters\n\nThe ticket has more details about my implementation. I've included tests and comments in my commit.\n", "labels": [], "number": 219, "updated_at": "2014-06-20 18:48:47", "user": 186424, "closed_at": "2011-04-28 07:43:21", "id": 667077, "title": "Character encoding issues with MemCacheStore in 1.9.2", "url": "https://api.github.com/repos/rails/rails/issues/219", "created_at": "2011-03-12 02:12:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064152", "text": "@josevalim, can you look at this?\n", "created_at": "2011-04-27 13:21:55", "user": 2741, "id": 1064152}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068672", "text": "Merged.\n", "created_at": "2011-04-28 07:43:23", "user": 9582, "id": 1068672}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've noticed that passing `nil` inside an array in conditions generates wrong SQL. It appears that Arel is to blame. I'll pushing a patch for Arel also, if you confirm this.\n\nHere are some failing tests.\n", "labels": [], "number": 220, "updated_at": "2014-06-12 11:30:40", "user": 207112, "closed_at": "2011-04-29 18:27:40", "id": 667306, "title": "Passing nil in array for conditions appears to be broken", "url": "https://api.github.com/repos/rails/rails/issues/220", "created_at": "2011-03-12 07:02:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064146", "text": "@tenderlove, can you look at this?\n", "created_at": "2011-04-27 13:20:51", "user": 2741, "id": 1064146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1076530", "text": "Merged in, so I'm closing.\n", "created_at": "2011-04-29 18:27:40", "user": 3124, "id": 1076530}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ActiveSupport::Callbacks depends on ActiveSupport::Concern. These two commits fix dependency errors that I came across, resolving the following:\n\n```\nruby-1.9.2-p180 :001 > require \"active_support/callbacks\"\nNameError: uninitialized constant ActiveSupport::Callbacks::Concern\n(...)\n```\n", "labels": [], "number": 221, "updated_at": "2014-07-03 03:49:27", "user": 78237, "closed_at": "2011-03-12 13:31:25", "id": 667586, "title": "Fix dependencies of ActiveSupport::Callbacks", "url": "https://api.github.com/repos/rails/rails/issues/221", "created_at": "2011-03-12 13:17:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/863574", "text": "Applied, thanks!\n", "created_at": "2011-03-12 13:31:25", "user": 3387, "id": 863574}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, when a callback is set in a parent class after it has been inherited from, the callback will be run multiple times in child classes. Observe:\n\n```\nrequire \"active_support/callbacks\"\n\nclass Parent\n  include ActiveSupport::Callbacks\n  define_callbacks :run\n\n  def run\n    run_callbacks :run\n  end\nend\n\nclass Child < Parent\nend\n\nclass Parent\n  set_callback :run, :before do\n    puts \"callback called\"\n  end\nend\n\nChild.new.run\n# \"callback called\"\n# \"callback called\"\n```\n\nThis commit provides a fix, by updating the callback chain in reverse order (child classes first). The callback is now correctly run only once in child classes.\n\n```\nChild.new.run\n# \"callback called\"\n```\n", "labels": [], "number": 222, "updated_at": "2014-07-03 03:49:30", "user": 78237, "closed_at": "2011-03-12 17:35:52", "id": 667710, "title": "Prevent callbacks in child classes from being executed more than once", "url": "https://api.github.com/repos/rails/rails/issues/222", "created_at": "2011-03-12 15:10:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/863980", "text": "Great patch, applied as well.\n", "created_at": "2011-03-12 17:35:52", "user": 9582, "id": 863980}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, ActiveSupport::DescendantTracker depends on ActiveSupport::Dependencies. That does not really make sense, since it is only used in the `clear` method.\n\nAS::Callbacks depends on AS::DescendantTracker, but never calls the clear method. It should be possible to use AS::Callbacks without getting AS::Dependencies for free. Especially since AS::Dependencies overrides a few Ruby core methods.\n\nThis patch checks for the presence of AS::Dependencies when clearing the DescendantTracker and removes the explicit dependency.\n", "labels": [], "number": 223, "updated_at": "2014-07-03 03:49:34", "user": 78237, "closed_at": "2011-03-12 17:33:50", "id": 667771, "title": "It should be possible to use ActiveSupport::DescendantTracker without ActiveSupport::Dependencies", "url": "https://api.github.com/repos/rails/rails/issues/223", "created_at": "2011-03-12 16:01:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/863973", "text": "Looks good to me.\n", "created_at": "2011-03-12 17:32:29", "user": 9582, "id": 863973}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/863977", "text": "Applied.\n", "created_at": "2011-03-12 17:33:50", "user": 9582, "id": 863977}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 224, "updated_at": "2014-06-18 14:52:22", "user": 3668, "closed_at": "2011-03-12 23:10:43", "id": 668343, "title": "Ticket 6556 test and fix as single commit", "url": "https://api.github.com/repos/rails/rails/issues/224", "created_at": "2011-03-12 22:07:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/864655", "text": "Pushed\n", "created_at": "2011-03-12 23:10:43", "user": 52642, "id": 864655}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a follow-up of [this previous pull request](https://github.com/rails/rails/pull/223), which was merged but [reverted](https://github.com/rails/rails/commit/9f5b1e1ed08df9dbedded0a6b7798d919d43b9a6) because isolation tests failed.\n\nThis pull request includes the same change, but in addition it also contains some fixes (missing dependencies) and a refactoring of the dependency tracker test. Dependency tracking is tested with and without autoloading. Tests should now succeed in isolation as well.\n", "labels": [], "number": 225, "updated_at": "2014-07-03 03:49:40", "user": 78237, "closed_at": "2011-05-07 10:33:51", "id": 669462, "title": "It should be possible to use ActiveSupport::DescendantTracker without ActiveSupport::Dependencies (take two)", "url": "https://api.github.com/repos/rails/rails/issues/225", "created_at": "2011-03-13 16:16:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115086", "text": "This has been merged and pushed, thanks.\n", "created_at": "2011-05-07 10:34:15", "user": 9582, "id": 1115086}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Cleaned up loads of warnings with a couple parens and instance var initialization.\n", "labels": [], "number": 226, "updated_at": "2014-06-13 15:09:56", "user": 479, "closed_at": "2011-03-13 18:57:02", "id": 669783, "title": "Stop ambiguous first arg warnings", "url": "https://api.github.com/repos/rails/rails/issues/226", "created_at": "2011-03-13 18:43:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/866507", "text": "applied, tks!\n", "created_at": "2011-03-13 18:57:02", "user": 9582, "id": 866507}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I haven't run into any edge cases where cascading doesn't work as advertised and the extra options need to be explicit. If there are cases like that the tests should be changed to reflect it.\n\nThere were also a few white space inconsistencies that I fixed.\n", "labels": [], "number": 227, "updated_at": "2014-07-04 18:28:34", "user": 3483, "closed_at": "2011-05-12 00:10:51", "id": 670338, "title": "Unnecessary redundancy in Time/Date calculations", "url": "https://api.github.com/repos/rails/rails/issues/227", "created_at": "2011-03-14 00:30:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Two of the assertions in this test had no messages, so failures were not as informative as they could have been.\n", "labels": [], "number": 228, "updated_at": "2014-07-02 05:08:55", "user": 5042, "closed_at": "2011-03-15 20:45:51", "id": 675329, "title": "add messages to plain assertions in ActiveModel::Lint::Tests", "url": "https://api.github.com/repos/rails/rails/issues/228", "created_at": "2011-03-15 13:11:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/876182", "text": "Pushed\n", "created_at": "2011-03-15 13:45:51", "user": 52642, "id": 876182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/876191", "text": "Thank you sir. :)\n", "created_at": "2011-03-15 13:49:44", "user": 5042, "id": 876191}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In activerecord/lib/active_record/attribute_methods/read.rb define_read_method() if column.type_cast_code('v') returns nil then you get a syntax error when the code is evaluated because the resulting access_code ends with \"&& ;\"\n", "labels": [], "number": 229, "updated_at": "2014-07-03 03:49:58", "user": 76936, "closed_at": "2011-03-18 05:26:23", "id": 682523, "title": "syntax error for null column.type_cast_code", "url": "https://api.github.com/repos/rails/rails/issues/229", "created_at": "2011-03-17 18:43:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/886359", "text": "type_case_code should never return nil.  Are you using mysql2 with edge rails by chance?\n", "created_at": "2011-03-17 18:46:24", "user": 3124, "id": 886359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/887013", "text": "yes I am\n", "created_at": "2011-03-17 21:27:39", "user": 76936, "id": 887013}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/887045", "text": "If you're working against edge rails, please use edge mysql2.  We've moved the database adapter from mysql2 in to rails master.  That should fix this problem!  :-)\n", "created_at": "2011-03-17 21:33:59", "user": 3124, "id": 887045}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/887939", "text": "well I hate to be a pedant but this wasn't helpful.  I am not a rails core committer - just a rails user that hit a problem that others will hit and tried to be helpful with a 1 line fix. Going by this quote from the Rails 3 release notes at http://guides.rubyonrails.org/3_0_release_notes.html\n\n\"On top of all that, we‚Äôve tried our best to deprecate the old APIs with nice warnings. That means that you can move your existing application to Rails 3 without immediately rewriting all your old code to the latest best practices.\"\n\nI don't think it unreasonable to expect to be able to use the mysql2 gem with my rails 3 application.  I found zero info when searching for various combinations of \"use edge mysql2\".  So how do I how \"use edge mysql2\" with edge rails ?  and wouldn't it be better to include this simple 1 line fix that tests for this case rather than just blow up if things aren't the exact way you want them ?\n", "created_at": "2011-03-18 03:00:24", "user": 76936, "id": 887939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/888202", "text": "The Rails Gemfile in master clearly works against the unreleased version of the mysql2 gem.  If you are going to work against edge rails, you need to work against the dependencies listed in our Gemfile.\n", "created_at": "2011-03-18 05:26:15", "user": 3124, "id": 888202}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Matthias Folz and I've added associations (has_many and has_one) via reflection classes to ActiveResources.\n\nHere is the link to the googlegroups discussion:\nhttp://groups.google.com/group/rubyonrails-core/browse_thread/thread/dd8d83955a7cf9e8/1f95a896887cd9a9#1f95a896887cd9a9 \n\nAnd the lighthouse ticket:\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6473-activeresource-adding-associations-through-reflections#ticket-6473-1\n\nI hope, it's not impolite to open a pull request without an answer on the lighthouse ticket form a core member.\nIf it's so: I'm sorry... ;)\n\nGreetz\nMarkus Schwed\n", "labels": [], "number": 230, "updated_at": "2014-06-19 06:31:20", "user": 136796, "closed_at": "2012-03-14 14:20:11", "id": 682775, "title": "[Feature] ActiveResource - Associations through reflections", "url": "https://api.github.com/repos/rails/rails/issues/230", "created_at": "2011-03-17 20:18:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1057561", "text": "This ticket would be the begin of extending active resource with more restful features. \n(like association link resolving as seen in Atomic-feeds)\n", "created_at": "2011-04-26 10:27:16", "user": 136796, "id": 1057561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064373", "text": "What about belongs_to? If we add has_many and has_one is intuitive to have belongs_to associations, right?\n", "created_at": "2011-04-27 14:03:01", "user": 3359, "id": 1064373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1065521", "text": "Hi miloops,\n\nin the first step, we've added just has_one and has_many associations to configurate the :class_name (more options will follow), which should be used for the initialization of associated objects. \n(more detailed description in the linked Lighthouse ticket)\n\nSo, before it get merged, we should add a belongs_to association, that adds an accessor for the parent, which it belongs to?\n\nShould we also add some autoresolving for a belongs_to association, if the request response (for i.e. Comment.find(2) ) only includes the 'post_id' instead of all attributes (nested) for the 'post' object. ?\n", "created_at": "2011-04-27 17:15:29", "user": 136796, "id": 1065521}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1065525", "text": "Sorry...  i closed the pull request by mistake... :)\n", "created_at": "2011-04-27 17:16:41", "user": 136796, "id": 1065525}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1087905", "text": "Please remember to include the guides updated with this change, to make it a complete request.\n", "created_at": "2011-05-02 13:25:03", "user": 83449, "id": 1087905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1105256", "text": "I just rebased to the latest rails master, so the least added commits aren't new commits.\n", "created_at": "2011-05-05 12:03:42", "user": 136796, "id": 1105256}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272034", "text": "@SweeD: Do you finish belongs_to?\n\n@core members: is there any chance you can review this for inclusion in Rails 3.2?\n", "created_at": "2011-06-01 04:13:39", "user": 160941, "id": 1272034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301855", "text": "Sorry, I was on vacation.\n\nWe will finish it within the next two weeks.\n\nGreetz\nSweeD\n", "created_at": "2011-06-04 15:09:04", "user": 136796, "id": 1301855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377072", "text": "You have two more days to complete your patch :P (haha, just j/k)\n\nI'll come back and check again after you've finished it. If you can finish belongs_to, and squash some of the tiny commits that would be great. :)\n", "created_at": "2011-06-15 21:44:32", "user": 4912, "id": 1377072}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377109", "text": "Just a friendly reminder, I keep an eye on this too, hahaha :D\n", "created_at": "2011-06-15 21:52:08", "user": 160941, "id": 1377109}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1418022", "text": "@sikachu @guilleiguaran\nWoohoo...  haven't forgot.... We'll finish it.\nLittle bit stressful these days... :D\n\nPlease don't stone me... xD\n", "created_at": "2011-06-22 13:45:46", "user": 136796, "id": 1418022}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1535940", "text": "Looks like this is finished, I see belongs_to added on the code, I will start to test this now :) \n\n@SweeD: great work!!!\n", "created_at": "2011-07-08 22:47:47", "user": 160941, "id": 1535940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1537801", "text": "Sorry, it's not finished, already.\nBut almost... ;)\n\nHave to write the resolving of the parent for a belongs_to association and squash the tiny commits... :)\nWill finish these days! \n", "created_at": "2011-07-09 07:30:27", "user": 136796, "id": 1537801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334472", "text": "Good idea and nice implementation. Targeting Rails 3.2.\n", "created_at": "2011-10-09 00:00:01", "user": 199, "id": 2334472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2488359", "text": "+1 this is awesome.\n", "created_at": "2011-10-22 04:16:41", "user": 601141, "id": 2488359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2946675", "text": "@SweeD what's the progress of this patch? I want to make sure this can be merged into Rails 3.2 ;)\n", "created_at": "2011-11-29 20:35:34", "user": 4912, "id": 2946675}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2954597", "text": "+1, this should be in master soon :)\n", "created_at": "2011-11-30 03:37:57", "user": 160941, "id": 2954597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2990239", "text": "Oha, haven't got time for a while.\n\nWill finish it this month, sorry about that.  ;)\n", "created_at": "2011-12-02 13:58:08", "user": 136796, "id": 2990239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2990261", "text": "@sikachu we \"just\" have to finish the belongs_to association and then, we're done.\n", "created_at": "2011-12-02 13:59:43", "user": 136796, "id": 2990261}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3141301", "text": "```\nHave to write the resolving of the parent for a belongs_to association and squash the tiny commits...\n```\n\nRails 3.2 release candidate is coming within days, so this is going to miss the boat without a final push!\n", "created_at": "2011-12-14 15:47:52", "user": 199, "id": 3141301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3141326", "text": "true!\n", "created_at": "2011-12-14 15:50:01", "user": 4912, "id": 3141326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3159314", "text": "We will work on it today and hopefully finish it tomorrow.\n", "created_at": "2011-12-15 10:28:32", "user": 136796, "id": 3159314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3838658", "text": "Noting that the last comment is from Dec 15th with a hopeful finish by Dec 16th. Just wanted to bump this to see if the status has changed.\n", "created_at": "2012-02-06 22:55:19", "user": 340268, "id": 3838658}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3866729", "text": "![Sorry](http://media.onsugar.com/files/2010/08/33/6/1030/10304949/f583762f929ea1e5_sorry_really_truly_very_apology.jpg)\n..but sadly, the status haven't changed since 15.12. \n\nBut we will finish it 100% this weekend.\n", "created_at": "2012-02-08 12:23:52", "user": 136796, "id": 3866729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3930412", "text": "@sikachu ....and finally: Done! :D\n\nReally, really sorry for the delay.\nLooking forward to feedback...  :)\n", "created_at": "2012-02-12 19:50:56", "user": 136796, "id": 3930412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4306155", "text": "@SweeD great!\n", "created_at": "2012-03-03 23:37:23", "user": 199, "id": 4306155}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4319680", "text": "@jeremy Thanks! \n\nSomething to change/cleanup or so?\n", "created_at": "2012-03-05 09:57:11", "user": 136796, "id": 4319680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4498952", "text": "Closed for new pull request in new rails/activeresource repo.\n\nhttps://github.com/rails/activeresource/pull/1\n\nOh... it's the first one...  xD\n", "created_at": "2012-03-14 14:20:11", "user": 136796, "id": 4498952}], "assignees": [4912, 4912], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Repeating what I've said in [Lighthouse ticket 6598](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6598-activerecordrelationexcept-and-only-loses-scope-extensions)\n\nGiven a scope with extensions\nWhen I use the except to remove a part from the relation\nThen the extensions are gone, because except returns a brand new relation object.\n\nThis means the following doesn't work (when using Kaminari, which uses extensions):\n\n```\nPost.page(2).except(:order).current_page\n```\n\nBecause the current_page method was added by the page scope.\n\nThis issue is present in at least 3.0.5 and master.\n\nThe supplied patch will apply the extensions again after using except and only.\n\nThere is some duplication going on in both methods. A private method could certainly be extracted (although I'm clueless on a name).\n", "labels": [], "number": 231, "updated_at": "2014-07-03 03:50:07", "user": 12692, "closed_at": "2011-03-21 17:31:28", "id": 687668, "title": "ActiveRecord::Relation#except and #only loses scope extensions", "url": "https://api.github.com/repos/rails/rails/issues/231", "created_at": "2011-03-19 21:53:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/899400", "text": "Merged.  Thank you!\n", "created_at": "2011-03-21 17:31:28", "user": 3124, "id": 899400}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi! Here you go, functionality + docs. Now the only thing you have to do is to add some configuration stuff to Rails::Application and use it in ActionView::PathSet.\n\nCheers! nu7\n", "labels": [], "number": 232, "updated_at": "2014-06-14 11:31:18", "user": 68126, "closed_at": "2011-03-19 23:07:12", "id": 687736, "title": "Custom patterns for ActionView::PathResolver", "url": "https://api.github.com/repos/rails/rails/issues/232", "created_at": "2011-03-19 22:27:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/894061", "text": "Applied, thanks! :D\n", "created_at": "2011-03-19 23:07:12", "user": 9582, "id": 894061}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Current scaffold_controller generates old code with lots of cruft. Changed to use respond_to and respond_with instead of the huge format blocks. \n", "labels": [], "number": 233, "updated_at": "2014-07-03 03:50:16", "user": 27055, "closed_at": "2011-03-22 06:49:18", "id": 692710, "title": "Changed scaffold_controller generator to use respond_with and respond_to", "url": "https://api.github.com/repos/rails/rails/issues/233", "created_at": "2011-03-22 01:40:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/901261", "text": "I helped Breccan with this one.\n\nWe both (and other people I've talked to) think the people using scaffolding would really appreciate it if there was _less_ code that was generated when a scaffold was run. Currently, the scaffold generator hasn't changed much at all since 2.3 and still contains the ugly `respond_to` blocks.\n\nThis pull request first removes the comments from the scaffold controller (people should know this already, and if not they can learn from the Routing and Getting Started guides). That's the simple part.\n\nThe second commit here removes the ugly `respond_to` blocks, replacing it with a controller-level `respond_to` call, which is exactly how the `respond_to` blocks act. Well, at least as far as our testing goes.\n\nTwo more things for further concern.\n\nFirst is that the scaffold generator generates functional tests for the HTML component that's generated, but doesn't generate XML tests. Is there any particular reason for this?\n\nSecond: Is there any particular reason why these controllers respond to XML rather than JSON these days? I would think that JSON is the preferred API respond format. This could just be a case of extreme bikeshedding though.\n", "created_at": "2011-03-22 01:48:58", "user": 2687, "id": 901261}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/901503", "text": "+1 for the Scaffold generator using JSON and not XML\n", "created_at": "2011-03-22 03:39:58", "user": 30452, "id": 901503}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/901851", "text": "This discussion appears from time to time. The default scaffold is mainly a learning tool. respond_with does a lot implicitly and would be harder for a beginner to understand, that's we still using respond_to. XML or JSON does not really matter, the point here is to show developers that there are to main kinds of formats: navigational and api. Changing XML for JSON at this point, would also \"deprecate\" all tutorials and books, which is not worth considering the default scaffold is just a learning tool anyway.\n\nIf you want to change scaffold, you can create your own generator and customize your app to use, at least this is what I did with the responders gem (http://github.com/plataformatec/responders).\n", "created_at": "2011-03-22 06:49:18", "user": 9582, "id": 901851}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/902034", "text": "Ah, good to see the Rails team is _now_ concerned with the deprecation of books. This makes me feel safer.\n\nThanks for the reply & feedback Jos√©.\n", "created_at": "2011-03-22 08:28:51", "user": 2687, "id": 902034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/902073", "text": "Just to make it explicit: I don't think we should hold back adding/changing a feature in Rails to avoid deprecating books/tutorials/blog posts. However, given the default scaffold is exactly a learning tool and is one of the things that is first covered, I don't think trading XML by JSON is a worth change in a 3.0 to 3.1 release. A counter-example is exactly the changes the scaffold views had from 2.3 to 3.0.\n", "created_at": "2011-03-22 08:42:34", "user": 9582, "id": 902073}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/902149", "text": "The problem for me at least is that it seems like a huge number of people are using scaffold generator as a day to day tool in their work. With a room of 20 rails devs at railscamp we had a decent quantity who expressed surprise when Ryan pointed out that you shouldn't be using the current generators as a day to day development tool.\n\nCertainly my experience shows that people are using it in business quite a lot. I've seen quite a few cases where the explicit commenting of routes above the methods has become the documentation standard throughout the app.\n\nIt's my belief that it's being used pretty heavily as something other than a learning tool, but I can't really prove it. \n\nCheers.\n", "created_at": "2011-03-22 09:19:15", "user": 27055, "id": 902149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/902158", "text": "Hey Breccan, thanks for the pull request. However, wrong usage does not justify the change. For example, I have seen my share of people using MVC wrongly and there is nothing we can do besides instructing people to do the proper thing. The tools to extend scaffold beyond a learning tool are available, we just need to instruct people to use them properly.\n", "created_at": "2011-03-22 09:23:17", "user": 9582, "id": 902158}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The delegate method currently cannot be used with keywords (such as `module`).\n\nThis won't work:\n\n```\nclass DelegateExample\n  attr_accessor :module\n  delegate :title, :to => :module\nend\n```\n\nThe method being created by delegate currently looks like this:\n\n```\ndef title(*args, &block)\n  module.__send__(:title, *args, &block)\nrescue NoMethodError\n  if module.nil?\n    return # depends on :allow_nil\n  else\n    raise\n  end\nend\n```\n\nI've add `self.` to prevent errors when using keywords:\n\n```\ndef title(*args, &block)\n  self.module.__send__(:title, *args, &block)\nrescue NoMethodError\n  if self.module.nil?\n    return # depends on :allow_nil\n  else\n    raise\n  end\nend\n```\n", "labels": [], "number": 234, "updated_at": "2014-06-13 15:07:34", "user": 27211, "closed_at": "2011-03-25 07:41:09", "id": 702767, "title": "Delegate method that accepts keywords.", "url": "https://api.github.com/repos/rails/rails/issues/234", "created_at": "2011-03-25 01:10:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/916194", "text": "Do tests pass at all after change? We use thing like delegate :foo, :to => @bar inside rails and they will surely be broken after this commit. What you can do is to pass \"self.module\" in :to manually.\n", "created_at": "2011-03-25 07:41:10", "user": 9582, "id": 916194}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/924266", "text": "You're 100% right. Tests definitely do not pass. However, it would be nice if delegate handled this automatically. It was thinking about something along these lines:\n\n```\nto = \"self.#{to}\" unless to.to_s.start_with? '@', 'self.'\n```\n\nNot particularly elegant (and this example won't actually pass tests either), but I'll keep working on it. Hopefully I can come up with something that's nicer than `delegate :whatever, :to => \"self.module\"`.\n\nCheers,\n\nHaydn\n", "created_at": "2011-03-28 01:09:28", "user": 27211, "id": 924266}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "activesupport has a dependency in i18n, it was missing in the gemspec.\n", "labels": [], "number": 235, "updated_at": "2014-07-03 03:50:24", "user": 21772, "closed_at": "2011-03-25 07:35:22", "id": 703036, "title": "Adding i18n dependency to activesupport gemspec ", "url": "https://api.github.com/repos/rails/rails/issues/235", "created_at": "2011-03-25 03:21:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/916188", "text": "This dependency is optional. Unfortunately Rubygems do not sulipas optional dependencies.  It is just triggered if you require some specific files. Active model and action pack add i18n explicitly as dependency.\n", "created_at": "2011-03-25 07:35:22", "user": 9582, "id": 916188}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/916841", "text": "@josevalim Got it, seems that I just got bitten by using the module that require it. Why is it made optional? \n", "created_at": "2011-03-25 13:14:12", "user": 21772, "id": 916841}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/917007", "text": "Because people were whining a lot that they just wanted to use a small method from ActiveSupport and it was bringing everything with it.\n", "created_at": "2011-03-25 14:04:26", "user": 9582, "id": 917007}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "result variable is never used within the initializer\n", "labels": [], "number": 236, "updated_at": "2014-06-18 10:11:38", "user": 101456, "closed_at": "2011-05-02 16:19:41", "id": 703055, "title": "removed unused result variable from ActiveRecord::Base initializer", "url": "https://api.github.com/repos/rails/rails/issues/236", "created_at": "2011-03-25 03:31:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1087886", "text": "Seems to me that the result is being used to make the initialize return the outcome of the block given if any.\nBy removing it the initialize method returns now the outcome of the callbacks, and that's not the intention.\n", "created_at": "2011-05-02 13:19:53", "user": 83449, "id": 1087886}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1088024", "text": "+1 with @smartinez87. The result variable is used as it's what's being returned. It shouldn't be removed.\n", "created_at": "2011-05-02 13:54:59", "user": 9347, "id": 1088024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1088630", "text": "Missed out this one. Closing...\n", "created_at": "2011-05-02 16:19:41", "user": 101456, "id": 1088630}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rails pluralizes 'virus' as 'viri' and 'octopus' as 'octopi', while pluralizing 'radius' as 'radiuses' and 'alumnus' as 'alumnuses'. Normal usage is generally the opposite - 'radius' and 'alumnus' are generally treated as exceptions whereas other words ending in '-us' are pluralized '-uses'.\n\nThe two exceptions to this currently covered by Rails are unfortunate since:\n- Octopus is a Latinization of the Greek ·ΩÄŒ∫œÑœéœÄŒøœÖœÇ (Octopous), which pluralizes to ·ΩÄŒ∫œÑœéœÄŒøŒ¥ŒµœÇ (Octopodes). The plural 'octopi' is a neologism, and probably originated as either a joke or a misconception.\n- There are no attestations of 'viri' being used as the plural of 'virus' in a Latin text. This is not particularly surprising, given that the first known use of the latin 'virus' is in the late 14th century, long after Latin ceased to be a native language and not long before it ceased to be used even for academic writing. There _is_ a Latin plural 'viri', but it's of the singular 'vir', meaning 'man'.\n\nWhile I'm on a roll explaining a pull request with a pedantic screed, there are various references below.\n- http://en.wikipedia.org/wiki/Plural_form_of_words_ending_in_-us\n- http://www.etymonline.com/index.php?term=virus\n- http://linuxmafia.com/~rick/faq/plural-of-virus.html\n- Fowler, _A Dictionary of Modern English Usage_, p. 684 ([Google Books link](http://books.google.co.uk/books?id=Z4HI0RQIDK0C&pg=PA684&lpg=PA684&dq=virus+plural+fowler+modern+english+usage&source=bl&ots=wcz_Wz-nLQ&sig=BDQ9RoSDXwsXwjsAVR6dxCVNAng&hl=en&ei=IgaNTdrWOJGbhQe21-W7Dg&sa=X&oi=book_result&ct=result&resnum=4&ved=0CDAQ6AEwAw#v=onepage&q&f=false))\n- Finally, the Official Scrabble Words lists 'viruses', but not 'viri' or 'virii'\n\nTest and documentation changes are, of course, included. I hope there's no one out there with a table named 'viri'!\n", "labels": [], "number": 237, "updated_at": "2014-07-03 03:50:30", "user": 60826, "closed_at": "2011-03-25 22:32:23", "id": 705291, "title": "Latin plural tweaks", "url": "https://api.github.com/repos/rails/rails/issues/237", "created_at": "2011-03-25 21:19:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/919053", "text": "This stuff is pretty much frozen, it was decided long time ago not to evolve these rules in core. It would be never ending, and brittle for existing applications.\n\nThat's why every application has a config/initializers/inflections.rb generated nowadays.\n", "created_at": "2011-03-25 22:32:23", "user": 3387, "id": 919053}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When i am using \"jdbcmysql\" for my Jruby application the Error \"uninitialized constant Mysql::Error\" is coming when i am running \"rake db:create\"\n\nTraced and found that we are checking only for /mysql/ and we can check if the it start with mysql  / ^ mysql/\n\nHave a look.\n\nArun\n", "labels": [], "number": 238, "updated_at": "2014-07-03 03:50:33", "user": 3948, "closed_at": "2011-04-16 10:40:01", "id": 707033, "title": "When using \"jdbcmysql\" Error \"uninitialized constant Mysql::Error\"", "url": "https://api.github.com/repos/rails/rails/issues/238", "created_at": "2011-03-26 19:54:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/921960", "text": "I think we need a connection adaptor also for \"jdbcmysql\". \n\nThis commit is not creating any database. \n", "created_at": "2011-03-27 04:46:49", "user": 3948, "id": 921960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1012521", "text": "Closing this request\n", "created_at": "2011-04-16 10:40:01", "user": 3948, "id": 1012521}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit fixes issue #6627 (https://rails.lighthouseapp.com/projects/8994/tickets/6627-server-hanging-when-using-extreme-values-for-date_select-start_year). The issue occurs because the build_options method loops forever when the range between start_date and end_date is too big.\n\nThis commit adds a verification to #build_options and raises an error when the range is greater than 1000.\n", "labels": ["actionpack"], "number": 239, "updated_at": "2014-06-17 00:15:28", "user": 48270, "closed_at": "2011-10-09 01:04:12", "id": 708117, "title": "Fixes an issue when creating a date select with too many options.", "url": "https://api.github.com/repos/rails/rails/issues/239", "created_at": "2011-03-27 09:37:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377127", "text": "Oh, an also if you can update the CHANGELOG for the new limitation that would be awesome.\n", "created_at": "2011-06-15 21:55:04", "user": 4912, "id": 1377127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638148", "text": "I think hard limit 1000 is bad for any application with historic dates. Maybe including max limit as optional parameter would help in such situations.\n", "created_at": "2011-07-23 17:53:47", "user": 931352, "id": 1638148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1919403", "text": "@sikachu, what would be the appropriate place to add the `max_options` limit?\n\n@dost making the limit optional wouldn't fix the issue at all.\n", "created_at": "2011-08-27 10:54:44", "user": 9726, "id": 1919403}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2060561", "text": "@andmej I think he meant optional parameter as in you don't have to supply it, and if you don't it defaults to, say, 1000.\n", "created_at": "2011-09-10 18:35:25", "user": 24421, "id": 2060561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2099023", "text": "Since there hasn't been so much action on this issue I wrote my patch, hope it's fine.\nhttps://github.com/libo/rails/commit/631eca162ca2ef6450adeb5242b620eabb86a86f\n", "created_at": "2011-09-14 22:42:15", "user": 37512, "id": 2099023}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've completed adding `config.force_ssl` configuration which will load the `Rack::SSL` middleware into the stack, and also `force_ssl` method in controller which will redirects user to HTTPS protocol.\n", "labels": [], "number": 240, "updated_at": "2014-06-12 19:30:45", "user": 4912, "closed_at": "2011-03-27 21:02:11", "id": 708824, "title": "Add `config.force_ssl` configuration and add `force_ssl` method to controller", "url": "https://api.github.com/repos/rails/rails/issues/240", "created_at": "2011-03-27 19:11:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/923708", "text": "Pull request update :)\n", "created_at": "2011-03-27 20:42:29", "user": 4912, "id": 923708}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Changed the example code output by the runner command to use find_each instead of find(:all).each.\n", "labels": [], "number": 241, "updated_at": "2014-07-03 03:50:47", "user": 52712, "closed_at": "2011-04-03 16:58:53", "id": 708960, "title": "Example now uses find_each instead of find(:all).each", "url": "https://api.github.com/repos/rails/rails/issues/241", "created_at": "2011-03-27 20:45:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/950557", "text": "I think it might be better to use `Product.all.each` instead of `find_each` as this is only meant to be example code and not efficient production ready.\n", "created_at": "2011-04-03 08:45:02", "user": 8701, "id": 950557}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, engines that use `isolate_namespace` with nested modules (e.g. `Foo::Bar`) do not correctly set the `module` prefix of the engine's routes. It is set to `foo_bar`, while it should be set to `foo/bar`. This means that none of the routes for that engine will work. This patch provides a test plus fix.\n", "labels": [], "number": 242, "updated_at": "2014-07-03 03:50:49", "user": 78237, "closed_at": "2011-03-28 07:59:09", "id": 709910, "title": "Isolated engines with nested modules should set correct module route prefix", "url": "https://api.github.com/repos/rails/rails/issues/242", "created_at": "2011-03-28 07:48:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/925058", "text": "Applied, tks.\n", "created_at": "2011-03-28 07:59:09", "user": 9582, "id": 925058}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Do not show optional (.:format) block for wildcard route [#6605 state:resolved]\n\nThis will make the output of `rake routes` to be correctly match to the behavior of the application, as the regular expression used to match the path is greedy and won't capture the format part by default\n\nThis commit is the second attempt on fixing the issue, as the regular expression on another commit on `master` was invalid.\n", "labels": [], "number": 243, "updated_at": "2014-07-03 03:50:53", "user": 4912, "closed_at": "2011-03-28 18:01:05", "id": 711387, "title": "Do not show optional (.:format) block for wildcard route", "url": "https://api.github.com/repos/rails/rails/issues/243", "created_at": "2011-03-28 17:24:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After some discussion with Andrew White, it seems like this is a better approach for handling a wildcard route. However, user can still bring back the old behavior by supplying `:format => false` to the route.\n\nThe discussion is here: https://rails.lighthouseapp.com/projects/8994/tickets/6605\n", "labels": [], "number": 244, "updated_at": "2014-07-03 03:50:57", "user": 4912, "closed_at": "2011-03-29 09:27:25", "id": 711947, "title": "Update the wildcard route to be non-greedy by default, therefore be able to match the (.:format) segment", "url": "https://api.github.com/repos/rails/rails/issues/244", "created_at": "2011-03-28 20:22:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In the new @dhh's `http_basic_authenticate_with` feature, the `authenticate_or_request_with_http_basic` method is called twice when it could be called only once.\n", "labels": [], "number": 245, "updated_at": "2014-06-26 09:28:42", "user": 9347, "closed_at": "2011-03-29 14:36:04", "id": 713559, "title": "Remove useless call to authenticate_or_request_with_http_basic", "url": "https://api.github.com/repos/rails/rails/issues/245", "created_at": "2011-03-29 08:44:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/931211", "text": "See https://github.com/rails/rails/commit/e8d20b858d004e26c3b8c25aae099fce2eca6857\n", "created_at": "2011-03-29 14:36:05", "user": 9347, "id": 931211}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The following issue affects the 3-0-stable branch:\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6599-305-introduced-repeated-column-lookups-for-eager-loaded-has_one-with-conditions\n\nThe AssociationProxy code appears to have been completely rewritten on master so I am not sure if this is a problem there or not (I am also not able to run my app against master right now to test it). But in the meantime I am asking that this patch get pulled into 3.0 stable to improve the situation for the 3.0.x line.\n\nEven with this patch applied I am still seeing slower performance with (patched) 3.0.5+ vs 3.0.4, but it is much improved (3 - 4 times faster for a page loading many rows).\n", "labels": [], "number": 246, "updated_at": "2014-06-16 23:37:43", "user": 107800, "closed_at": "2011-03-30 22:42:38", "id": 716423, "title": "Fix repeated column lookups in 3.0.5+ (eager loaded has_one association with conditions)", "url": "https://api.github.com/repos/rails/rails/issues/246", "created_at": "2011-03-30 02:18:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/938692", "text": "Merged. This seems like a bad regression, so I'm putting it in the 3.0.6.rc2.  Thank you.\n", "created_at": "2011-03-30 22:42:38", "user": 3124, "id": 938692}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi!\n\nLast rubysoc I was halfway through adding support for benchmarking under Rubinius when I had to \"abandon\" the task because of the schedule (it was really low priority). I've been back at work on Rails' performance tests utilities and I've:\n- Improved YARV's support;\n- Added support for benchmarking and profiling under Rubinius and JRuby as well;\n- Added support for user-defined options;\n- Updated documentation accordingly.\n\nI've worked with Wayne to get the necessary MRI 1.8/1.9 patches on rvm. The last of them was merged yesterday.\n", "labels": [], "number": 247, "updated_at": "2014-07-01 12:17:20", "user": 102931, "closed_at": "2011-05-17 21:28:47", "id": 722840, "title": "Performance tests improved", "url": "https://api.github.com/repos/rails/rails/issues/247", "created_at": "2011-03-31 23:42:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064115", "text": "@jeremy, can you take a look at this?\n", "created_at": "2011-04-27 13:12:05", "user": 2741, "id": 1064115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067091", "text": "It would be great if @jeremy could take a look at this, since he wrote most of the original code. I think @wycats had a brief look, but I'm not sure.\n\nAnyway, the easier way to start is to skim the new documentation (IMO):\nhttp://dl.dropbox.com/u/1585962/performance_testing/performance_testing.html (specially chapter 1).\nIt gives an overview on all enhancements.\n", "created_at": "2011-04-27 22:35:21", "user": 102931, "id": 1067091}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1117404", "text": "Merged with master (25288c137c745714d23bd8b00194027aefc8ac1b didn't apply cleanly).\n", "created_at": "2011-05-08 02:58:07", "user": 102931, "id": 1117404}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1127286", "text": "I've changed both benchmarker and profiler to use the new performance testing tools. Consequently, they're more configurable and work under Rubinius and JRuby.\n\nI've also updated the guide (and uploaded a new version to the url I've sent before).\n", "created_at": "2011-05-10 00:41:58", "user": 102931, "id": 1127286}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1212922", "text": "Thanks for merging this in, Jeremy.\n", "created_at": "2011-05-20 23:04:12", "user": 102931, "id": 1212922}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The test that's being removed is an old test that was (I think) trying to test something similar but became a false positive, see https://github.com/rails/rails/commit/d780d1f508c880c59d6d932bd052cb0b1c1c76b0\n", "labels": [], "number": 248, "updated_at": "2014-06-21 15:19:42", "user": 98601, "closed_at": "2011-05-07 10:20:04", "id": 725201, "title": "Enumerable should pass encoding options to children in #as_json/#to_json", "url": "https://api.github.com/repos/rails/rails/issues/248", "created_at": "2011-04-01 19:27:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hopefully \"serializeration\" is not an in joke that I missed.\n", "labels": [], "number": 249, "updated_at": "2014-07-03 03:51:17", "user": 98601, "closed_at": "2011-04-05 17:51:58", "id": 725558, "title": "Rename test directory to match code directory", "url": "https://api.github.com/repos/rails/rails/issues/249", "created_at": "2011-04-01 21:47:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/960278", "text": "Applied, thanks! :heart:\n", "created_at": "2011-04-05 17:51:58", "user": 3124, "id": 960278}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These changes allow you to selectively disable and enable observers.  By default, all observers are enabled (as they are now).  You can enable or disable them using APIs like these:\n- `ActiveRecord::Base.disable_observers :audit_trail, :logger` (symbols)\n- `ActiveRecord::Base.enable_observers AuditTrail, Logger` (classes)\n- `ActiveRecord::Base.enable_observer :user_observer` (singular)\n- `ActiveRecord::Base.with_observers_disabled(:audit_trail, :logger) { ... }` (disables the observers only for the duration of the block.)\n\nI find this to be very useful for model unit tests, but I'm sure it could be useful in other situations, such as a rake task where you are backfilling data and don't want to trigger email notification to a user via an observer.\n\nLet me know if you want me to submit another pull request with this rebased against 3-0-stable (i.e. if you plan to do another 3.0.x release).\n", "labels": [], "number": 250, "updated_at": "2014-07-03 03:51:20", "user": 49391, "closed_at": "2011-04-28 02:26:44", "id": 727931, "title": "Active model observer disabling", "url": "https://api.github.com/repos/rails/rails/issues/250", "created_at": "2011-04-03 06:26:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1055065", "text": "I would really like to see this make it in\n", "created_at": "2011-04-25 21:07:26", "user": 1111, "id": 1055065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1055142", "text": "+1\n", "created_at": "2011-04-25 21:19:39", "user": 194, "id": 1055142}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1055657", "text": "+1\n", "created_at": "2011-04-25 23:01:03", "user": 12091, "id": 1055657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1055845", "text": "+1\n", "created_at": "2011-04-26 00:00:47", "user": 18524, "id": 1055845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1055989", "text": "+1\n", "created_at": "2011-04-26 00:41:15", "user": 10112, "id": 1055989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1056721", "text": "+1\n\nC'mon now people, you _know_ you've tried to turn these suckers off.\n", "created_at": "2011-04-26 05:34:05", "user": 14007, "id": 1056721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1056785", "text": ":+1:\n", "created_at": "2011-04-26 06:08:19", "user": 1016, "id": 1056785}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1056938", "text": "+1\n", "created_at": "2011-04-26 07:00:46", "user": 163774, "id": 1056938}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1057862", "text": ":+1:\n", "created_at": "2011-04-26 12:15:44", "user": 90904, "id": 1057862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1058210", "text": ":+1:\n", "created_at": "2011-04-26 13:39:07", "user": 122950, "id": 1058210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061101", "text": "+1\n", "created_at": "2011-04-26 22:06:03", "user": 34305, "id": 1061101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061257", "text": "+1\n", "created_at": "2011-04-26 22:33:42", "user": 13742, "id": 1061257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061273", "text": "+1\n", "created_at": "2011-04-26 22:37:30", "user": 252061, "id": 1061273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061277", "text": "so I'm guessing none of the above read/saw @tenderlove's presentation about OSS =)\n", "created_at": "2011-04-26 22:38:36", "user": 146907, "id": 1061277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061567", "text": "@pedromtavares +1\n", "created_at": "2011-04-26 23:45:19", "user": 18524, "id": 1061567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1062001", "text": "@pedromtavares - link please.\n", "created_at": "2011-04-27 01:53:39", "user": 14007, "id": 1062001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064095", "text": "I like this, but let's simplify the API a bit using a holding class:\n\nPost.observers.enable :audit_trail\n\nPost.observers.enable :audit_trail do\n  # enabled\nend\n\nPost.observers.disable :audit_trail\n\nPost.observers.disable :audit_trail do\n  # disabled\nend\n", "created_at": "2011-04-27 13:07:18", "user": 2741, "id": 1064095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064298", "text": "@dhh I like it!\n", "created_at": "2011-04-27 13:48:53", "user": 34305, "id": 1064298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064560", "text": "@dhh: Interesting.  I think I like the API you've suggested, but I have a couple questions about it:\n- How would users enable/disable all observers for all models?  This API seems tied to a particular model class.\n- If the `AuditTrail` observer observes multiple models, do you intend for this API to only disable it for `Post` but no other models?\n\nIt's particularly important to me that we keep some kind of API to make it easy to enable/disable all observers.  Here's how I typically use this (I've written similar code in multiple rails projects now):\n- All observers are enabled by default.\n- In a support file loaded by `test_helper.rb` or `spec_helper.rb`, I disable all observers by default.\n- I write unit tests for each observer, that enable the observer being tested just for the duration of the test, and trigger the observer by saving/creating/updating the observed model.\n- I enable all observers for integration tests.\n\nI'm thinking we can do something like:\n\n``` ruby\nActiveRecord::Base.observers.enable :audit_trail\n\nActiveRecord::Base.observers.disable :all\n```\n\nSince class methods are inherited by subclasses in ruby, it could be used the way you suggest, but I'm not sure I'd recommend it for the cases where an observer observes multiple classes, simply because it's ambiguous.\n", "created_at": "2011-04-27 14:36:27", "user": 49391, "id": 1064560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064587", "text": "Your interpretation is what I meant. I just used Post as an example. It should cascade. So if you set it for ActiveRecord::Base, it goes for everyone. If you set it for Post, it just enables/disables for that class (but not for anyone else).\n", "created_at": "2011-04-27 14:42:34", "user": 2741, "id": 1064587}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064715", "text": "Cool, I can make that change.  I'll try to get around to it in the next few days (maybe this weekend).\n\nIf it would need to be sooner to have a chance of making it in rails 3.1, let me know.\n", "created_at": "2011-04-27 14:58:36", "user": 49391, "id": 1064715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064743", "text": "We have an informal target of being feature complete by Sunday, so I'd take that as a deadline. Thanks for working on this!\n", "created_at": "2011-04-27 15:01:30", "user": 2741, "id": 1064743}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067097", "text": "I just force pushed a rewritten version of this that's inline with the API that dhh suggested.  The relavent commit is [here](https://github.com/myronmarston/rails/commit/adb6ca31df847b682f258c9c8e402faf117cb61c).\n\nThere are a few edge cases that we need to iron out of the API.  Given the following models and observers:\n\n``` ruby\nclass ORM\n  include ActiveModel::Observing\nend\n\nclass Widget < ORM; end\nclass Budget < ORM; end\nclass WidgetObserver < ActiveModel::Observer; end\nclass BudgetObserver < ActiveModel::Observer; end\nclass AuditTrail < ActiveModel::Observer\n  observe :widget, :budget\nend\n```\n\n...how would you expect the following cases to work?\n\n``` ruby\nWidget.observers.disable :all\n\n# ...later\nORM.observers.enable :all\n```\n\nShould `WidgetObserver` and `AuditTrail` receive notifications for a `Widget`?  We've disabled them directly on `Widget`, but enabled _all_ observers on `ORM` at a later point.  It's a bit ambiguous what the behavior should be.\n\n``` ruby\n\nBudget.observers.enable :audit_trail\n\n# ...later\nORM.observers.disable :audit_trail\n```\n\nAgain, it's a bit ambiguous: should `AuditTrail` receive notifications for a `Budget` or not?\n\nBeing able to enable/disable observers at different levels of the model class hierarchy sounds nifty in practice, but I'm concerned about these edge cases where there isn't a clear right answer (to me anyway).\n", "created_at": "2011-04-27 22:36:21", "user": 49391, "id": 1067097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067119", "text": "I'd prefer if last call wins. So ORM.observers.disable will cascade if it's done last.\n", "created_at": "2011-04-27 22:41:40", "user": 2741, "id": 1067119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067362", "text": "> I'd prefer if last call wins. So ORM.observers.disable will cascade if it's done last.\n\nDone :).  Let me know if you see any other room for improvement.  Hopefully this can make the cut for rails 3.1...\n", "created_at": "2011-04-27 23:41:03", "user": 49391, "id": 1067362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067819", "text": "All merged. Great job!\n", "created_at": "2011-04-28 02:26:44", "user": 2741, "id": 1067819}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1727947", "text": "Tried this in rails 3.1 rc4 and it has no effect in my tests. Disabled observers are still called.\n", "created_at": "2011-08-04 15:38:37", "user": 16925, "id": 1727947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1732699", "text": "@ncri: Can you come up with a test case demonstrating the issue you are seeing?\n", "created_at": "2011-08-05 03:05:34", "user": 49391, "id": 1732699}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1736266", "text": "Okay, I was setting up a simple test app: https://github.com/ncri/disable_observer\nJust run the user_observer test. It creates a user which will trigger the user_observer which outputs \"observer called\". Even though the create is wrapped in a ActiveRecord::Base.observers.disable :user_observer.\n", "created_at": "2011-08-05 15:27:38", "user": 16925, "id": 1736266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1754781", "text": "Thanks, I'll take a look at it later.\n", "created_at": "2011-08-08 14:58:02", "user": 49391, "id": 1754781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1754960", "text": "Thanks. I opened an issue here: https://github.com/rails/rails/issues/2461\n", "created_at": "2011-08-08 15:17:44", "user": 16925, "id": 1754960}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "2 commits on this pull request:\n\n1) Try to use IM when loading records by id using AR::Base#find()\n2) Add log message if a record is loaded from IM.\n", "labels": [], "number": 251, "updated_at": "2014-07-03 03:51:26", "user": 3359, "closed_at": "2011-04-04 08:48:52", "id": 729217, "title": "Identity map: use it when using find(ID) and add log message", "url": "https://api.github.com/repos/rails/rails/issues/251", "created_at": "2011-04-03 23:24:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/952748", "text": "Hey Emilio, +1 for the first commit but I am not sure if we need to log it. Won't it be too verbose in cases where I am doing a find(:all) for example?\n", "created_at": "2011-04-04 07:01:31", "user": 9582, "id": 952748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/952973", "text": "Nah, I have applied both. If the log becomes annoying, we can always revert it later. :D\n", "created_at": "2011-04-04 08:48:52", "user": 9582, "id": 952973}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- it was broken after\n  [commit](https://github.com/rails/rails/commit/e0eb8e9c65ededce64169948d4dd51b0079cdd10)\n- there's also\n  [issue](https://rails.lighthouseapp.com/projects/8994/tickets/6634-railsrack-inconsistency-about-expires_afterexpires-cookie-option)\n- also: maybe it worth making Rack understand :expire_after as we\n  duplicate same logic in [cookie_store](https://github.com/gmarik/rails/blob/v2.3.11/actionpack/lib/action_controller/session/cookie_store.rb#L114)\n", "labels": [], "number": 252, "updated_at": "2014-06-12 21:27:58", "user": 31292, "closed_at": "2011-04-14 11:50:31", "id": 732278, "title": "respect :expire_after", "url": "https://api.github.com/repos/rails/rails/issues/252", "created_at": "2011-04-04 21:50:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/969550", "text": "+1\n", "created_at": "2011-04-07 15:54:36", "user": 1079, "id": 969550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1000071", "text": "@josevalim, can you take a look at this?\n", "created_at": "2011-04-14 09:31:58", "user": 2741, "id": 1000071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1000605", "text": "Applied, thanks!\n", "created_at": "2011-04-14 11:50:31", "user": 9582, "id": 1000605}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The csrf_meta_tags helper should use the tag helper, both for consistency and in order to support cases where TagHelper::tag is overridden.\n", "labels": [], "number": 253, "updated_at": "2014-07-03 01:05:07", "user": 657807, "closed_at": "2011-04-07 23:47:51", "id": 736377, "title": "Make csrf_meta_tags use the tag helper", "url": "https://api.github.com/repos/rails/rails/issues/253", "created_at": "2011-04-06 02:56:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/963262", "text": "Good points. The above commit should take care of them.\n", "created_at": "2011-04-06 09:31:26", "user": 657807, "id": 963262}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The csrf_meta_tags helper should use the tag helper, both for consistency and in order to support cases where TagHelper::tag is overridden.\n", "labels": [], "number": 254, "updated_at": "2014-07-03 03:51:38", "user": 657807, "closed_at": "2011-04-08 00:22:28", "id": 743300, "title": "Make csrf_meta_tags use the tag helper", "url": "https://api.github.com/repos/rails/rails/issues/254", "created_at": "2011-04-08 00:01:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/971548", "text": "Excellent, thank you very much for revising those details, it was applied.\n", "created_at": "2011-04-08 00:22:28", "user": 3387, "id": 971548}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "So we don't miss out on the nice documentation of the respond_to and\nrespond_with instance methods.  Also added :nodoc: to protected method.\n\nCloses [#6261](https://rails.lighthouseapp.com/projects/8994/tickets/6261-why-does-actioncontrollermimeresponds-have-nodoc).\n", "labels": [], "number": 255, "updated_at": "2014-07-03 03:51:41", "user": 524783, "closed_at": "2011-04-10 13:08:55", "id": 746241, "title": "removed :nodoc: from ActionController::MimeResponds", "url": "https://api.github.com/repos/rails/rails/issues/255", "created_at": "2011-04-08 19:01:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/975638", "text": "This is about documentation. I guess it should/could be committed on [docrails](https://github.com/lifo/docrails)\n", "created_at": "2011-04-08 20:47:16", "user": 9347, "id": 975638}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/976116", "text": "As in, \"someone should commit it there\", or as in, \"I should apply this on docrails and re-send this pull request to lifo/docrails\"?\n", "created_at": "2011-04-08 22:45:03", "user": 524783, "id": 976116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/979065", "text": "As in you should apply it directly to docrails, it has public write access.\n", "created_at": "2011-04-10 06:13:46", "user": 2687, "id": 979065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/979711", "text": "Ah, very good -- done.  Thanks for the pointer!\n\n(Closing.)\n", "created_at": "2011-04-10 13:08:55", "user": 524783, "id": 979711}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi guys,\n\nAs per @dhh's request, I've finished the following patches:\n## Switch from XML to JSON in scaffold generator\n\nThis is really straightforward. Note that in `update` and `destroy` we have to return empty hash so that jQuery will understand that the response is correct. That has been patched in https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/responder.rb#L262-278 as well.\n## Use Ruby 1.9 hash style\n\nI've updated scaffold generator and app generator to use Ruby 1.9 hash. I've accomplished it by adding `key_value` method which will detect Ruby version and returns the right key-value hash according to the version.\n\nI also take it further by adding `--old-style-hash` in case someone might want to make their code compatible with 1.8.x, or just sanely hate 1.9 style hash.\n\nPlease review the patch and see if they're appropriate. Thank you.\n", "labels": [], "number": 256, "updated_at": "2014-07-03 03:51:44", "user": 4912, "closed_at": "2011-04-10 10:48:02", "id": 749324, "title": "Switch from XML to JSON in scaffold generator, and use Ruby 1.9 hash style", "url": "https://api.github.com/repos/rails/rails/issues/256", "created_at": "2011-04-10 05:59:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/979475", "text": "DHH merged already. :)\n", "created_at": "2011-04-10 10:48:02", "user": 9582, "id": 979475}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/979478", "text": "This has been merged \\o/\n", "created_at": "2011-04-10 10:48:36", "user": 4912, "id": 979478}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found that in some case there's a need for you to change the validator's rule by record's condition. This patch will provide you the option to add proc or lambda as the :in option for InclusionValidator and ExclusionValidator, and :with, :without option for FormatValidator\n\nPlease review my patch and see if it's any good. Thank you.\n", "labels": [], "number": 257, "updated_at": "2014-07-03 03:51:50", "user": 4912, "closed_at": "2011-04-10 10:49:43", "id": 749510, "title": "Add support for proc or lambda as an option for InclusionValidator, ExclusionValidator, and FormatValidator", "url": "https://api.github.com/repos/rails/rails/issues/257", "created_at": "2011-04-10 07:45:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/979479", "text": "Applied.\n", "created_at": "2011-04-10 10:49:43", "user": 9582, "id": 979479}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This will allow you to check if an object is included in another object or the list of objects or not.\n\nThis patch is derived from patch by Brian Morearty and John Reitano on Lighthouse ticket. I've rewrite it and make sure that we support both 'another object' and 'list of objects' version, as it surely be useful to support both.\n\nOriginal ticket: https://rails.lighthouseapp.com/projects/8994/tickets/6321\n\nOriginal discussion: http://groups.google.com/group/rubyonrails-core/browse_thread/thread/218a36184fe1176c\n\nPlease review it for me and see if it's appropriate. I really want to see this one got merged into Rails core, as I personally like `Object#in?` myself.\n", "labels": [], "number": 258, "updated_at": "2017-06-24 09:23:52", "user": 4912, "closed_at": "2011-04-12 17:08:22", "id": 750815, "title": "Add support for Object#in? in Active Support", "url": "https://api.github.com/repos/rails/rails/issues/258", "created_at": "2011-04-10 17:51:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/980513", "text": "I am -1 on this. I cannot see the benefit here and it feels completely backward. An object should not be responsible to say if it is in an array, range or not. Take other examples like delete... If you call delete in an object passing an array as argument so it can delete itself from the array feels completely wrong.\n", "created_at": "2011-04-10 18:19:25", "user": 9582, "id": 980513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/980525", "text": "We're currently discussing this in Campfire that we're adding `#in?` and `#either?` instead. Will you be online to discuss it soon?\n", "created_at": "2011-04-10 18:22:50", "user": 4912, "id": 980525}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/980868", "text": "What is the rational here? This seems like an unnecessary abstraction layer on top of an already existing Ruby method. Why introduce the extra complexity?\n", "created_at": "2011-04-10 20:10:31", "user": 18524, "id": 980868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/980913", "text": "I don't see it. #include? handles both of these cases handily. \n", "created_at": "2011-04-10 20:20:12", "user": 10112, "id": 980913}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981034", "text": "in? and either? puts the argument you care about front and center. When you're calling it this way, you care about the object of the method, not the parameter. So if you do array.include?(object), it means you care primarily about whether the array has the object. If you do object.in?(array), you care primarily about whether the object is in the array.\n\nYou could slash about 70% of what we love about Ruby if you didn't care about such subtle arguments for expressiveness. I'm proud to say that I do.\n", "created_at": "2011-04-10 20:55:24", "user": 2741, "id": 981034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981044", "text": "The final pull requests expands further on this subtle expressiveness by treating inline arrays with a more fitting #either? method and referenced arrays with #in?. These matters are exactly why I love Ruby.\n\n(Also, we killed not_in? not on the ground that it's not useful -- it is! -- but because we didn't like the method name and couldn't find a proper replacement).\n", "created_at": "2011-04-10 20:57:45", "user": 2741, "id": 981044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981058", "text": "Implying that I or others don't care about such? That's basically a back-handed ad hominem attack. We can be more civil than that, can't we?\n\n[\"foo\", \"bar\"].include?(\"blech\") says the same thing as \"blech\".either?([\"foo\", \"bar\"]). Yes, a different object receives the message. The receiver of the object is essentially irrelevant as both representations are idempotent.\nOn Sunday, April 10, 2011 at 1:55 PM, dhh wrote: \n\n> in? and either? puts the argument you care about front and center. When you're calling it this way, you care about the object of the method, not the parameter. So if you do array.include?(object), it means you care primarily about whether the array has the object. If you do object.in?(array), you care primarily about whether the object is in the array.\n> \n> You could slash about 70% of what we love about Ruby if you didn't care about such subtle arguments for expressiveness. I'm proud to say that I do.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/258#issuecomment-981034\n", "created_at": "2011-04-10 21:01:04", "user": 10112, "id": 981058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981082", "text": "I don't read DHH's tone as a personal attack on anyone. It's a code review discussion, don't be too defensive :-)\n", "created_at": "2011-04-10 21:06:37", "user": 13277, "id": 981082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981086", "text": "This isn't about functionality. \"unless\" is doesn't do anything that \"if !\" can't do. Yet it makes the code more expressive. This is more of that.\n", "created_at": "2011-04-10 21:07:04", "user": 2741, "id": 981086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981095", "text": "I'm all for more expressiveness, I guess it is a matter of opinion if #include? is awkward in certain cases.\n", "created_at": "2011-04-10 21:09:13", "user": 18524, "id": 981095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981096", "text": "(Also, elight, even though my comment wasn't originally intended as a slight, please now upgrade it to be considered one given your only counterarguments so far being 1) \"silly\" and 2) \"it's functionally equivalent of this other way\".)\n", "created_at": "2011-04-10 21:09:20", "user": 2741, "id": 981096}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981111", "text": "Insulting someone is a lovely way to meet a request to forgive a poor choice of words. Sad.\n\nI'll stand by it not only being functionally equivalent. It's a semantic difference, I'll grant. Object/subject is reversed. But I don't see anyone talking about grammar instead it's similarly personal and irrelevant opinions as \"silly\". \nEvan Light\nOn Sunday, April 10, 2011 at 2:09 PM, dhh wrote: \n\n> (Also, elight, even though my comment wasn't originally intended as a slight, please now upgrade it to be considered one given your only counterarguments so far being 1) \"silly\" and 2) \"it's functionally equivalent of this other way\".)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/258#issuecomment-981096\n", "created_at": "2011-04-10 21:13:12", "user": 10112, "id": 981111}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981132", "text": "I offered you a clear explanation of why the semantic difference mattered and my personal appreciation for that difference. You choose to take to first belittle that argument with \"silly\" and then consider it a slight. Now you're crying uncle because I didn't pick up on your off-ticket request for forgiveness on silly? Please.\n\nBack on topic: Let this be an open invitation for more expressiveness around these methods. I'm looking for the opposite version of Object#in? (no, #out? doesn't fit, and #not_in? is ugly). Just like we have blank/present and include/exclude. I already have a good fit for #either? in #neither? but I'm hesitant to add it unless we can find a version for #in?.\n\nHow's that for expressiveness. We'll then have 5 semantic variations on Enumerable#include? :)\n", "created_at": "2011-04-10 21:18:54", "user": 2741, "id": 981132}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981143", "text": "Off-topc: no one's crying uncle. I responded inappropriately. You want an apology here? I'm sorry I said it was \"silly\" just because it's different.\n\nOn-topic: Nuts. Here I will cry \"uncle\" and admit I was wrong. I use the hell out of Object#present? This is similar. When I'm in for a penny, I'm in for a pound. I withdraw my protest.\n\nEvan Light\nOn Sunday, April 10, 2011 at 2:18 PM, dhh wrote: \n\n> I offered you a clear explanation of why the semantic difference mattered and my personal appreciation for that difference. You choose to take to first belittle that argument with \"silly\" and then consider it a slight. Now you're crying uncle because I didn't pick up on your off-ticket request for forgiveness on silly? Please.\n> \n> Back on topic: Let this be an open invitation for more expressiveness around these methods. I'm looking for the opposite version of Object#in? (no, #out? doesn't fit, and #not_in? is ugly). Just like we have blank/present and include/exclude. I already have a good fit for #either? in #neither? but I'm hesitant to add it unless we can find a version for #in?.\n> \n> How's that for expressiveness. We'll then have 5 semantic variations on Enumerable#include? :)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/258#issuecomment-981132\n", "created_at": "2011-04-10 21:22:58", "user": 10112, "id": 981143}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981145", "text": "@dhh Perhaps #in? is the wrong name of the method. #out? is the obvious negative.\n", "created_at": "2011-04-10 21:23:35", "user": 18524, "id": 981145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981157", "text": "elight, all is good. Three cheers for the expressive nature of Ruby and for matz allowing us so graciously to follow in his footsteps and further enrich the dialect that is ActiveSupport.\n\nbcardarella, \"object in array?\" is how #in? reads and that makes sense. \"object out array?\" makes no sense.\n", "created_at": "2011-04-10 21:26:02", "user": 2741, "id": 981157}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981162", "text": "I know it's RSpec-like (heh) but #has? may make more sense than #in? However, I find myself stuck on the negative case as well.\nOn Sunday, April 10, 2011 at 2:26 PM, dhh wrote: \n\n> elight, all is good. Three cheers for the expressive nature of Ruby and for matz allowing us so graciously to follow in his footsteps and further enrich the dialect that is ActiveSupport.\n> \n> bcardarella, \"object in array?\" is how #in? reads and that makes sense. \"object out array?\" makes no sense.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/258#issuecomment-981157\n", "created_at": "2011-04-10 21:27:45", "user": 10112, "id": 981162}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981166", "text": "How does #has? work? \"object has array?\" doesn't seem to work to me?\n", "created_at": "2011-04-10 21:29:49", "user": 2741, "id": 981166}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981168", "text": "pseudo-infix operators + unicode => set theory notation\n", "created_at": "2011-04-10 21:30:05", "user": 26158, "id": 981168}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981169", "text": "Oops, I meant \"array has object\". I got myself mixed up there for a sec thinking about #include? again. \n\nOn Sunday, April 10, 2011 at 2:29 PM, dhh wrote: \n\n> How does #has? work? \"object has array?\" doesn't seem to work to me?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/258#issuecomment-981166\n", "created_at": "2011-04-10 21:31:07", "user": 10112, "id": 981169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981179", "text": "#in? has the benefit of being terse yet expressive. #not_in? isn't in the idiom of other Ruby predicates which eschew \"not\" when expressing the negative (e.g., unless, empty, etc.).\n\nSet theory is concerned with \"membership\". Is there an affirming way of saying \"not member of\"? #member_of? is longer than #in? and is semantically equivalent.\nOn Sunday, April 10, 2011 at 2:31 PM, Evan Light wrote: \n\n> Oops, I meant \"array has object\". I got myself mixed up there for a sec thinking about #include? again. \n> \n> On Sunday, April 10, 2011 at 2:29 PM, dhh wrote:\n> \n> > How does #has? work? \"object has array?\" doesn't seem to work to me?\n> > \n> > ## \n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/rails/rails/pull/258#issuecomment-981166\n", "created_at": "2011-04-10 21:35:33", "user": 10112, "id": 981179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981195", "text": "It's a pity there are not more French speakers. But \"object sans array?\" would be nice and terse.\n\nPerhaps #without is the negative?  Object #without Array? Makes sense?\n\nI think #in is better than #has.\n", "created_at": "2011-04-10 21:41:20", "user": 121343, "id": 981195}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981225", "text": "oh, no, #has? was completely backwards (literally). Sorry if I didn't make that clear earlier.\nOn Sunday, April 10, 2011 at 2:41 PM, davemcp wrote:\nIt's a pity there are not more French speakers. But \"object sans array?\" would be nice and terse.\n\n> Perhaps #without is the negative? Object #without Array? Makes sense?\n> \n> I think #in is better than #has.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/258#issuecomment-981195\n", "created_at": "2011-04-10 21:50:07", "user": 10112, "id": 981225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981229", "text": "The thing is, syntactic sugar in Rails is usually directly correlated with use-cases/contexts where it is particularly useful (example: the `.zero? one? .many? .blank? .empty?` family, although those are perhaps not strictly syntactic sugar). Here, it's hard to see where that would be the case, particularly because it's just a rearrangement of the same syntax in a different order.\n\nAdditionally, I feel it is unnatural to expect an object to know what other objects point at it. An Array is by definition a collection of references to other objects. Those objects can be referred to by an arbitrary number of other objects (such as Arrays) without their own state changing in any way.\n\nPerhaps it would be useful for someone (@sikachu, @dhh) to show an example of where `object.in?(hash)` is particularly more expressive than `hash.include?(object)`?\n", "created_at": "2011-04-10 21:51:06", "user": 6097, "id": 981229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981241", "text": "@davemcp we are already used to \"sans\", as in \"Comic Sans\" ;)\n\nwithout isn't the proper word either.\n\nhow about \"absent_in?\" still a bit negative, but better than \"not_in?\" imho.\n\n@elight are you always starting squabbles with people? ;)\n", "created_at": "2011-04-10 21:55:44", "user": 12692, "id": 981241}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981261", "text": "jjb, see the Diff section on this pull request. sikachu updated a bunch of internal Rails usages of include? that reads better as #in? or #either?.\n\nNew restriction for the not #in? game -- it has to be a single word. Not interested in anything that requires an underscore. Also, it shouldn't be a very long word. Parity with #in? is most important (good priors are blank/present, include/exclude).\n", "created_at": "2011-04-10 22:02:17", "user": 2741, "id": 981261}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981264", "text": "How about #inside? and #outside?\n", "created_at": "2011-04-10 22:02:51", "user": 666219, "id": 981264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981267", "text": "`Object#outside?` reads like \"object outside array?\", and might make for a negative of `in?` that makes more sense than `out?`.\n", "created_at": "2011-04-10 22:04:25", "user": 78237, "id": 981267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981273", "text": "inside/outside is a nice pair, but I like #in? a lot more than #inside? -- and given that in? is going to be a lot more common than it's negation, I think that takes precedence. But best suggestion I've heard so far on it!\n", "created_at": "2011-04-10 22:06:17", "user": 2741, "id": 981273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981277", "text": "(BTW, thanks to everyone commenting on this, whether you agree or disagree. I like that we can have discussions like this about the syntactic sugar.)\n", "created_at": "2011-04-10 22:07:53", "user": 2741, "id": 981277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981303", "text": "I was contemplating #outside? but passed on mentioning it. It feels odd in contrast to #in?. Agreed that the negative case will be far less common. However, compared to the other syntactic sugar introduced by Rails, #in?/#outside? feels like a more awkward pairing. I'd like to be more constructive. Sadly, a brief visit to the thesaurus doesn't yield anything better either.\nOn Sunday, April 10, 2011 at 6:06 PM, dhh wrote: \n\n> inside/outside is a nice pair, but I like #in? a lot more than #inside? -- and given that in? is going to be a lot more common than it's negation, I think that takes precedence. But best suggestion I've heard so far on it!\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/258#issuecomment-981273\n", "created_at": "2011-04-10 22:12:57", "user": 10112, "id": 981303}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981361", "text": "> New restriction for the not #in? game -- it has to be a single word. \n\nThis isn't what you want to hear, but perhaps the best way to express the negative is as as you just did ‚Äî \"not in.\" The only other options seem more complex and probably are not as intuitive/memorable (such as \"absent from\"). I understand the lack of sexiness, but maybe it's best to go with what is straightforward and simple.\n", "created_at": "2011-04-10 22:37:09", "user": 472, "id": 981361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981368", "text": "sudara, we already have the not version: !object.in?(enumerable) -- moving the not into the method name and adding an underscore isn't an improvement over what we already have.\n", "created_at": "2011-04-10 22:38:41", "user": 2741, "id": 981368}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981375", "text": "dhh: Yeah, was thinking exactly about that after I posted. !object.in? is kind of freaky looking though. \n", "created_at": "2011-04-10 22:41:48", "user": 472, "id": 981375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981389", "text": "+1 for inside/outside, though another might be in?/omited?\n", "created_at": "2011-04-10 22:49:04", "user": 166528, "id": 981389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981455", "text": "It's a shame we can't write `object ‚àà enumerable`. I'd be happy with `object.‚àà(enumerable)`, but it's a pain to type.\n", "created_at": "2011-04-10 23:17:13", "user": 2406, "id": 981455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981502", "text": "-1 for inside/outside. Although `inside?` makes sense, `in?` is **much** nicer. `outside?` makes no sense at all. It's not a negative argument, it's positive. 'Foo is outside of bar' isn't telling us that foo isn't in bar, it's directly telling us it's outside of it, thus the lack of negativity. 'foo is not inside bar' would be more applicable, which is why `not_in?` works so well, but I agree the added underscore isn't nice.\n\nI'm with @josevalim with a -1 on this. It feels backward and without a suitable antonym for `in?` I think it's a lost cause\n", "created_at": "2011-04-10 23:32:44", "user": 197567, "id": 981502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981507", "text": "`Object#omitted?` and `Object#missing?` are the best proposals for an opposite to `#in?` that I've heard thus far.\n\nFor cheekiest, though, I'd pick `#awol?`.\n", "created_at": "2011-04-10 23:34:39", "user": 1401, "id": 981507}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981514", "text": "@h3h If something like this is to be added, I think it needs to fit perfectly and neither of those do. `person.omitted?(people)` doesn't make much sense, same for `person.missing?(people)` if anything `people.missing?(person)` would make more sense, with `missing_from?` and `omitted_from?` being the negative of those (again, back to ugly)\n", "created_at": "2011-04-10 23:37:35", "user": 197567, "id": 981514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981517", "text": "+1 on `in?`, -1 on `either?`. \"Either\" implies exactly two alternatives; it isn't the right name for a function of arbitrary arity. Plus the expressiveness improvement of `object.either?(a, b)` over `object.in?([a, b])` just isn't that great.\n", "created_at": "2011-04-10 23:38:10", "user": 98601, "id": 981517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981570", "text": "@injekt is right‚ÄîEnglish just isn't structured to encapsulate \"not in\" or \"missing from\" as a single world. One could invent a new pseudo-word that has all of the other desirable properties (except being a real word): `#nin?`.\n\nI also tend to agree with @jfirebaugh: `#either?` makes no sense for calls with an arity other than 2. I think `#one_of` and `#none_of` would fit much better for arbitrary arity, but of course that pesky underscore is back.\n", "created_at": "2011-04-10 23:49:07", "user": 1401, "id": 981570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981662", "text": "I don't have an answer for the negative case, but perhaps `#among` would be a good one for the positive.\n", "created_at": "2011-04-11 00:27:55", "user": 2406, "id": 981662}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981723", "text": "`#within?` and `#without?` are a nice pair. Most people use \"without\" to mean \"lacking\" rather than \"outside of,\" but the latter is a completely valid meaning of the word.\n", "created_at": "2011-04-11 00:52:18", "user": 2406, "id": 981723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981724", "text": "I'd like to point out that the meaning of #either? was initially very confusing to me. My best guess at why it was named #either? was somewhat similar to #inject ... that it is idiomatic in functional programming, or carries over from some other language or paradigm. But as far as communicating intent goes, it went absolutely over my head. If the point is to ask an object whether it is one of a list of items, then I think foo.one_of?(1, 2, 3) makes a lot more sense to me. Or maybe #either_of? That reads more naturally to me, but I tend to prefer slightly more verbose method names than keeping them super terse, so that may just be a matter of personal preference.\n\nI just spent a few minutes looking over the diff where include? was changed to in? or either?. I have to say, I do like it. I agree with David's comment about it making the important object front and center. The one criticism I have is that by adding these two new methods, you are adding to the body of stuff that programmers have to learn and remember. The distinction between these two methods is sensible to me - #in? is asking about a pre-existing collection, so that's made explicit. #Either? is asking about an abitrary list of objects, so that uses the splat. I remember when I was first getting into Rails, splat arguments caused me a lot of confusion. I'm better off for figuring them out though :)\n\nI guess the question is, is the added expressiveness for seasoned Rails folks worth increasing the burden on beginning Ruby and Rails developers (and of course, whether there really _is_ any added expressiveness, which in my opinion is yes). I‚Äôll leave that up to you to sort out. In the mean time, I‚Äôll just toss these into some pairing sessions and see how people react :)\n", "created_at": "2011-04-11 00:52:33", "user": 1111, "id": 981724}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/981780", "text": "<code>either?</code> doesn't sit well with me. When I read \"either\" I think \"this or that\" and not \"this or that or that or that or .... or that\".\n\n<code>within()?</code> is nice but <code>without?()</code> doesn't feel right.\n\nI'd rather write <code>!\"foo\".within?(\"a\",\"b\")</code> than <code>\"foo\".without?(\"a\",\"b\")</code>\n", "created_at": "2011-04-11 01:12:11", "user": 39729, "id": 981780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/982064", "text": "I'm all for api expansion. It's not like it makes a big difference, guys.\n", "created_at": "2011-04-11 03:36:30", "user": 16054, "id": 982064}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/982234", "text": "plukevdh: Actually, it does:\nhttps://github.com/rails/rails/commit/a9f3c9da01d721963d05949604ead909aaabbf36#commitcomment-336541\n", "created_at": "2011-04-11 05:26:46", "user": 166528, "id": 982234}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/982238", "text": "I really like in? and nin? as a pair.\n", "created_at": "2011-04-11 05:28:41", "user": 11460, "id": 982238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/982681", "text": "I looked up the definition on \"either\" and found: \"conjunction & adverb, 1 used before the first of two (or occasionally more) alternatives that are being specified (the other being introduced by ‚Äúor‚Äù)\". So it seems fine to use it for a list including more than two elements.\n\npwnall, Not a fan of nin?\n\nKeep the game going, though!\n", "created_at": "2011-04-11 08:45:02", "user": 2741, "id": 982681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/983068", "text": "How about Object#in? and Object#omits? \n\nEdit: forget that, omits? doesn't make sense. Object#omitted? is better but doesn't read nicely.\n", "created_at": "2011-04-11 11:01:03", "user": 15641, "id": 983068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/983187", "text": "Object#in? and Object#beyond? :)\n", "created_at": "2011-04-11 11:30:33", "user": 585132, "id": 983187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/983821", "text": "For what is worth.. \nAmong non-developers out? is the best second choice (not_in? is number one)\n", "created_at": "2011-04-11 14:24:45", "user": 384540, "id": 983821}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/984047", "text": "+1 #in? and #either? They read beautifully in every one of the examples in the diff except for the not versions, like this line:\n\n```\nif method && !method.to_s.either?('get','post')\n```\n\nI want the \"not\" to be located right before the adjective, not separated by such distance.\n\n```\nif method && method.to_s.not_either?('get','post')\n```\n\nI write these kinds of methods in my own apps, but it's tiresome. It might be nice to have a more powerful abstraction in ActiveSupport:\n\n```\nif method && method.to_s.not.either?('get','post')\n```\n\nEssentially the same thing as [jQuery's .not() method](http://api.jquery.com/not-selector/).\n\nJay Fields wrote [an implementation of #not in Ruby](http://blog.jayfields.com/2007/08/ruby-adding-not-method-for-readability.html) in a few years ago.\n", "created_at": "2011-04-11 14:49:52", "user": 198, "id": 984047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/984129", "text": "@dhh \"either\" _can_ be for more than two, but \"among\" is used for that _much_ more often.\n- [either](http://dictionary.reference.com/browse/either) -- \"Any one of two; one or the other\"\n- [among](http://www.thefreedictionary.com/among) -- \" In the group, number, or class of\"\n- [amid](http://www.thefreedictionary.com/amid) -- \"Surrounded by; in the middle of\"\n\nSpecifically, see [amid, amidst, among](http://writingtips.wordpress.com/2007/09/01/amid-amidst-among/) -- \"Amidst (or amid) is often confused with among. The Online Dictionary defines amidst as being in the middle of or surrounded by something, and among as mingling or intermixing with distinct or separate objects.\"\n\nThus, I think _among_ is the proper word here.\n", "created_at": "2011-04-11 15:05:59", "user": 2406, "id": 984129}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/984303", "text": "jamesarosen, I love it. among is exactly the right word here. We'll get it changed.\n", "created_at": "2011-04-11 15:42:46", "user": 2741, "id": 984303}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/984759", "text": "@sikachu, thank you for graciously giving credit to me and John Reitano (@rubyduo) for the original patch and citing the original ticket & discussion--and for going beyond what we did by changing the Rails internals to use `Object#in?` where appropriate. (By the way, @rubyduo is both John Reitano and Adam King.)\n\n@dhh @jamesarosen I agree that `among` is much better than `either`.\n\n@dhh I believe @rubyduo's `Object#not_in` method was also intended for expressiveness, similar to Ruby's \"unless,\" which is why I added it to the original ticket cited above. My rationale for including it was that if the object is a complex expression, not_in puts the \"not\" in a place where it can be more easily seen:\n\n```\nif etc_etc.something.something && !foo_bar.xyz.abc.in?(some_list)\n```\n\nvs.\n\n```\nif etc_etc.something.something && foo_bar.xyz.abc.not_in?(some_list)\n```\n\nOf course one could argue such expressions could be broken up. :-)\n\nPersonally I don't mind the phrase \"not in\" but can understand if you dislike it. It probably does make sense to leave it out until a better name is suggested. \n", "created_at": "2011-04-11 17:04:29", "user": 16927, "id": 984759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/985516", "text": "I've been surfing dictionaries etc. around the web, and my best suggestion is `known?` and `unknown?`\n\nIf nothing else I hope this pair can be a source of other ideas.\n", "created_at": "2011-04-11 19:27:48", "user": 111577, "id": 985516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/985545", "text": "Another idea could be to have `among?` accept either multiple arguments (converted to an array with the splat operator) or one argument which is an array. The opposite could be `outside?`\n", "created_at": "2011-04-11 19:32:17", "user": 111577, "id": 985545}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/985570", "text": "@dtrasbo This comment in the original ticket describes why allowing multiple arguments or a single array argument will lead to ambiguous behavior:\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6321#ticket-6321-5\n", "created_at": "2011-04-11 19:36:00", "user": 16927, "id": 985570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/985756", "text": "@Bmorearty Right, ok.\n\nHow about inside? and outside?\n\nMultiple params could be among? if there is a good opposite.\n", "created_at": "2011-04-11 20:11:48", "user": 111577, "id": 985756}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986195", "text": "Can't tell if the game is still on, but if it is, how about:\n\n```\n1.included?(1,2,3)\n4.excluded?(1,2,3)\n```\n\nThey're a clear positive/negative pair and they also align well with the Ruby method we're looking at in a mirror, making it more intuitive IMO:\n\n```\n[1,2,3].include?(1)\n1.included?(1,2,3)\n```\n\nOn a separate note, I find the in/either pairing confusing. I'd recommend just implementing one that takes a list:\n\n```\ndef included?(*args); args.include?(self); end\n```\n\nAgain, this aligns very nicely with the existing Ruby method, doesn't require understanding the subtle diff between `in` and `either`, and offers an intuitive symmetry with the existing API.\n", "created_at": "2011-04-11 21:24:06", "user": 1075, "id": 986195}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986261", "text": "too bad most people don't speak Latin because I think `ex?` would make a nice contrary for `in?`. `included?` / `excluded?` would sound less esotic but you lose the brevity.\n\nAlternatively, I vote for `out_of?`.\n", "created_at": "2011-04-11 21:35:39", "user": 24681, "id": 986261}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986325", "text": "@pigoz I'll +1 `ex?`\n", "created_at": "2011-04-11 21:47:35", "user": 18524, "id": 986325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986440", "text": "I kinda like ex? as well. There's no rule that says we can't borrow a great word straight from latin.\n\nStill need something for the opposite of among?.\n\ndchelimsky, I like the clear pairing of included?/excluded? but I'm not too fond of the words themselves for this. It's still an awkward structure for me \"object included? array\" doesn't flow nearly as nice as \"object in? array\" or \"object among? option, option\".\n", "created_at": "2011-04-11 22:13:34", "user": 2741, "id": 986440}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986479", "text": "@dhh - I feel the same way about \"assert equal 4 5\" ;)\n\nsrsly - what do you think about what I was saying about reducing this to a single method that accepts varargs?\n", "created_at": "2011-04-11 22:24:54", "user": 1075, "id": 986479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986508", "text": "e.g:\n\n```\n1.in?(1,2)\n3.ex?(1,2)\n```\n\nThere would be no support for `1.in?([1,2])`, but who wants to write _that_ when you can write `1.in?(1,2)`???\n", "created_at": "2011-04-11 22:31:21", "user": 1075, "id": 986508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986523", "text": "Ha. Touch√© ;). On that front, one of the things that bugs me about the rspec way is the overloading of ==. I think something.should_equal(something_else) would offend my sense of aesthetics much less (there are other problems still, like how you can't just stick with a tiny set of asserts because you have to map out all possibilities when assert <SOMETHING> is such a powerful way to avoid test method proliferation). Anyway, back on topic :)\n\nI don't like any of the words that could work for either. I love #in? when it's applied to an explicit array \"object in? array\", but I don't like it at all for when it's varargs \"object in? option, option\". That's the reason Object#in? never went anywhere a couple of years ago when we last considered it, because I just didn't like it applied to the varags. I think the in?/among? combo is the best deal for the positive case. I'm also very sold on ex? for the negative in? case but would like to have a great negative among? case too.\n", "created_at": "2011-04-11 22:33:30", "user": 2741, "id": 986523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986527", "text": "> but who wants to write that when you can write 1.in?(1,2)\n\nWhen the collection is a variable and not a finite enumeration in the code, e.g.:\n\n```\nuser.in?(admins)\n```\n", "created_at": "2011-04-11 22:34:23", "user": 1401, "id": 986527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986541", "text": "Actually, I think there's an even strong argument for just going with in?/ex? and not allowing varargs at all. So you'd HAVE to do 1.in?([ 1, 2 ]). The reason being not only the \"object in? option, option\" dislike but also that you'd definitely want to support the named array. As in action.in?(accessible_actions).\n\nBut yeah, in?/ex? with no support for varargs is very appealing in my mind. Very simple, very short.\n", "created_at": "2011-04-11 22:36:37", "user": 2741, "id": 986541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986549", "text": "Here's an example from the code:\n\n```\n        @scope[:scope_level].among?(:collection, :member, :new)\n        @scope[:scope_level].in?([:collection, :member, :new])\n```\n\nThe in? with forced array is actually shorter. I'm 70% convinced this is the way to go.\n", "created_at": "2011-04-11 22:38:10", "user": 2741, "id": 986549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986552", "text": "Latin is a touch obscure but +1 for ex?.\n\nEvan Light\nOn Monday, April 11, 2011 at 6:22 PM, dhh wrote: \n\n> I kinda like ex? as well. There's no rule that says we can't borrow a great word straight from latin.\n> \n> Still need something for the opposite of among?.\n> \n> dchelimsky, I like the clear pairing of included?/excluded? but I'm not too fond of the words themselves for this. It's still an awkward structure for me \"object included? array\" doesn't flow nearly as nice as \"object in? array\" or \"object among? option, option\".\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/258#issuecomment-986440\n", "created_at": "2011-04-11 22:38:38", "user": 10112, "id": 986552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986555", "text": "(BTW, I must remark again on how wonderful this collaborative design process is. Great ideas coming alive!)\n", "created_at": "2011-04-11 22:38:52", "user": 2741, "id": 986555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986562", "text": "@elight if this gets in every Ruby developer will now understand that 'ex' means in Latin.\n", "created_at": "2011-04-11 22:39:53", "user": 18524, "id": 986562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986866", "text": "I like `#ex?`. I think I'm +1 on that one.\n\nNow if there's a word that opposite of `#among?` ... Maybe `#exmong?` (haha, I'm joking)\n\nThanks guys :)\n", "created_at": "2011-04-12 00:02:55", "user": 4912, "id": 986866}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986888", "text": "How about separate? as the antonym to among?. Alternatively, foreign? although that sounds a little weird.\n", "created_at": "2011-04-12 00:08:07", "user": 34174, "id": 986888}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986903", "text": "Even shorter - apart?\n", "created_at": "2011-04-12 00:13:04", "user": 34174, "id": 986903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/986955", "text": "@dhh - not sure if this is the right venue for a long-winded discussion of the history of RSpec's equality matchers, so maybe  I'll blog about it, but today you can say (and I find myself using) `actual.should eq(expected)` (for equivalence, i.e. ==) and `actual.should be(expected)` (for identity, i.e. equal?).\n\nThere's a lot more to say on this topic, and on the issue of test method proliferation, and I'm happy to get into it here but I'd rather find a different venue for it. Maybe you could submit a github issue to rspec-core saying something like \"what the fuck is up with should ==\" and we can not only have a great conversation about it but maybe we can get everyone tweeting about it too :)\n", "created_at": "2011-04-12 00:25:59", "user": 1075, "id": 986955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/987032", "text": "+1 on apart as opposite of among. It's got a certain symmetry to it.\n", "created_at": "2011-04-12 00:49:20", "user": 14947, "id": 987032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/987210", "text": "-1 for apart, because it's too much like \"a part of\"\n\nvalue.apart(of)?(:foo, :bar)\n", "created_at": "2011-04-12 01:43:54", "user": 166528, "id": 987210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/987238", "text": "-1 for apart, not necessary\n", "created_at": "2011-04-12 01:53:34", "user": 121051, "id": 987238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/987384", "text": "-1 on apart?, doesn't feel right. I hate to do this but I also don't like among? -1s all around!\n", "created_at": "2011-04-12 02:46:13", "user": 18524, "id": 987384}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/987412", "text": "@phene ya, I see what you mean. I think separate? might be clearer. \n", "created_at": "2011-04-12 02:56:13", "user": 34174, "id": 987412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/987527", "text": "@bcardarella absent? feels better to me, although there is a small sense of ambiguity there. absent_from? has been suggested, but you lose the terseness. \n", "created_at": "2011-04-12 03:40:52", "user": 34174, "id": 987527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/987530", "text": "@josiahhivey well the clear opposite of absent? is present? and that's already being used\n", "created_at": "2011-04-12 03:41:54", "user": 18524, "id": 987530}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/988537", "text": "They should definitely support varargs. Reading/Writing the array version is painful.\n\n```\n style.in? [BOLD,ITALIC]\n style.in? BOLD, ITALIC\n```\n", "created_at": "2011-04-12 09:34:18", "user": 127208, "id": 988537}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/988760", "text": "+1 for varargs, if the caller wants to use an array built programmatically they can always use `obj.in?(*ary)`\n", "created_at": "2011-04-12 10:41:26", "user": 24681, "id": 988760}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/988807", "text": "Agreed. Absent? sounds like a partner to present?, unfortunately.¬†\n\nIf there's a -1 all around option, then I retract my +1 for apart.\n\nThis discussion is like TDD for syntax, and I think the tests are telling us something.\n\nin? Feels pretty natural, and is handy in the same way blank? and present? are. All of the rest just feel wrong.\n\nI think this is because we're trying to solve a nonexistent problem. Someone mentioned earlier how the English language doesn't really have clear one-word negation options here. That's because in English, we would say \"3 is not in the set of 1, 2, 4\". \n\nI think this tells us something, given that only real use for this method is in conditionals, to begin with (including the ternary operator). The rest aren't needed.\n\nWhere we ask \"if object.in?(array)\", the opposite is \"unless object.in?(array)\". If necessary, !object.in?(array) feels pretty natural as well. \n\nThis seems obvious, as we discuss this. blank? was handy given ruby's definition of truthiness, but present? was a welcome addition because negating a \"negative\" (!blank?) method like blank was often less expressive of intent. You don't ask \"is that space still blank?\" as often as you ask \"has it been filled in?\"\n\nSince the English idiom here is to say \"not in\", I think the standard Ruby idioms for negating the condition already complement in? nicely.\n", "created_at": "2011-04-12 10:55:56", "user": 14947, "id": 988807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/989923", "text": "https://github.com/ernie/notty - I'm considering this problem solved.\n", "created_at": "2011-04-12 14:54:26", "user": 14947, "id": 989923}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/989949", "text": "@ernie Clever and expressive. :-)\n", "created_at": "2011-04-12 14:57:38", "user": 16927, "id": 989949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/989957", "text": "@ernie clever but expensive.\n", "created_at": "2011-04-12 14:58:25", "user": 4912, "id": 989957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/989963", "text": "@ernie what @sikachu said, putting a regular expression call on Object's method_missing is going to add things up pretty quick\n", "created_at": "2011-04-12 14:59:23", "user": 18524, "id": 989963}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990161", "text": "So, I had a meme generator image here, and it said \"Y U NO RECOGNIZE JOKE?\". While that statement still holds true, I thought I should elaborate:\n\nI find the fact that Notty was perceived as a serious suggestion (pretty sure @BMorearty got the joke), despite my comment immediately preceding it where I outlined how I really feel (ruby does a great job of handling negation expressively on its own, we don't need a method for every negative case) a bit disturbing, but I think it proves my point. When a caricature is mistaken for the real thing, we need to take a long, hard look at the road we're heading down. :(\n", "created_at": "2011-04-12 15:27:40", "user": 14947, "id": 990161}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990171", "text": "@ernie Yeah I really didn't get the joke. There were a lot of stuff going on on this side after this one got merged in. So I took everything serious. >_<\n", "created_at": "2011-04-12 15:29:38", "user": 4912, "id": 990171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990203", "text": "@sikachu No worries. I guess my sense of humor is a bit too dry for some. :/\n", "created_at": "2011-04-12 15:33:58", "user": 14947, "id": 990203}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990709", "text": "After a long discussion on this, we've decide two things so far\n1. Remove `#among?`\n2. Add `#ex?`\n\nI've submit the patch via pull request here: https://github.com/rails/rails/pull/265\n\nI think this pull request can be closed now, and I would like to ask you guys to give me some more feedback on it too. Details are in the pull request ;)\n", "created_at": "2011-04-12 17:08:26", "user": 4912, "id": 990709}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1185812", "text": "this is why I love ruby and this age we are now living in\n", "created_at": "2011-05-16 22:38:42", "user": 54991, "id": 1185812}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I always wanted on format validator do something like:\n\n```\nvalidates_format_of :email, :with => :email\n```\n\nthe idea is to have pre-defined formats for common used expressions. in this pull request I'm sending my implementation for that idea. this is a simple engine to register and use format aliases, also included a sample file for initialization to make user able to define these aliases.\n\nto define a new alias you just need to:\n\n```\nActiveModel::Validations::FormatValidator.register_format_alias(:my_alias, /my_expression/)\n```\n\nthis way, we can have some default most common ones (like :email one) and other libraries can define some for convenience.\n", "labels": [], "number": 259, "updated_at": "2014-07-03 03:52:02", "user": 25736, "closed_at": "2011-05-07 10:39:43", "id": 752182, "title": "Predefined formats on format validator", "url": "https://api.github.com/repos/rails/rails/issues/259", "created_at": "2011-04-11 01:42:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1004153", "text": "cool, simplifies the validation\n", "created_at": "2011-04-14 22:45:31", "user": 29114, "id": 1004153}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1052945", "text": "I like the idea, and the resulting code is extremely clean and easy to read, but I think that this might be too similar to existing features.  Here are two alternatives that work in Rails 3 today that are more flexible because they aren't tied to the format validator and are still one-liners in your model code.  I'm not saying these are any better, but in my experience my apps rarely accumulate too many format validators to deal with and most of the formats are limited to a single model so there's no need to factor them out.  That's just my limited experience though.\n\nHere's one way to do it:\n\n```\nclass TitleValidator < ActiveModel::EachValidator\n  def validate_each(record, attribute, value)\n    record.errors[attribute] << 'is not a valid e-mail address' unless your_method_to_test_email_address(value)\n  end\nend\n\nclass Person < ActiveRecord::Base\n  validates :email_address, :presence => true, :title => true\nend\n```\n\nHere's another way to do it:\n\n```\nclass Person < ActiveRecord::Base\n  validates_format_of :email_address, :with => YOUR_EMAIL_REGEX\nend\n```\n", "created_at": "2011-04-25 13:47:21", "user": 127900, "id": 1052945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115093", "text": "I agree with @MDaubs, I think we should use custom validators here. Thanks for your pull request!\n", "created_at": "2011-05-07 10:39:43", "user": 9582, "id": 1115093}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1912436", "text": "Guys, wouldn't it be better to add `:as` attribute to `FormatValidator`?\n\nUsing constants for regexps is fine until you need to use the same regexp in few models - then you need some place to put them and `FormatValidator` would actually be a pretty good place. \n\nCustom validators syntax sometimes sucks. The following code doesn't tell at all what it actually validates - format of the URL, its existence, maybe something else?\n\n``` ruby\nclass Page < ActiveRecord::Base\n  validates :url, :url => true\nend\n```\n\nWouldn't it be better if one could do:\n\n``` ruby\nclass Page < ActiveRecord::Base\n  validates :url, :format => { :as => :url }\nend\n```\n", "created_at": "2011-08-26 13:15:27", "user": 9873, "id": 1912436}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "as the confirmation validation already adds that attr_accessor\n", "labels": [], "number": 260, "updated_at": "2014-06-26 19:57:49", "user": 18524, "closed_at": "2011-04-11 05:16:14", "id": 752477, "title": "attr_accessor :password_confirmation is not necessary for SecurePassword", "url": "https://api.github.com/repos/rails/rails/issues/260", "created_at": "2011-04-11 04:23:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "as the confirmation validation already adds that attr_accessor\n", "labels": [], "number": 261, "updated_at": "2014-06-26 09:38:09", "user": 18524, "closed_at": "2011-04-27 12:59:38", "id": 752550, "title": "attr_accessor :password_confirmation is not necessary for ActiveModel::SecurePassoword", "url": "https://api.github.com/repos/rails/rails/issues/261", "created_at": "2011-04-11 05:17:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064069", "text": "This has been applied.\n", "created_at": "2011-04-27 12:59:39", "user": 2741, "id": 1064069}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 262, "updated_at": "2014-06-17 09:48:58", "user": 18524, "closed_at": "2011-04-11 18:35:28", "id": 755549, "title": "Update Valiate Uniqueness to force case sensitivity", "url": "https://api.github.com/repos/rails/rails/issues/262", "created_at": "2011-04-11 18:34:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Actual arguments order is the same as in rails console. Fixes #5930.\n", "labels": [], "number": 263, "updated_at": "2014-07-02 08:07:51", "user": 66961, "closed_at": "2011-05-07 10:34:35", "id": 758306, "title": "Corrected dbconsole usage message", "url": "https://api.github.com/repos/rails/rails/issues/263", "created_at": "2011-04-12 08:39:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/995080", "text": "This was logged here - [LH-5930](https://rails.lighthouseapp.com/projects/8994/tickets/5930-dbconsole-arguments-order-mismatch). Xavier had [indicated](https://rails.lighthouseapp.com/projects/8994/tickets/5930-dbconsole-arguments-order-mismatch#ticket-5930-9) that it's better to revise the implementation than to just change the message.\n", "created_at": "2011-04-13 12:29:52", "user": 146214, "id": 995080}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115085", "text": "I think @fxn has valid points in the LH ticket, but currently dbconsole should be compatible with everything else. If we are going to review the args/options thing, it needs to be adressed in a larger scale.\n", "created_at": "2011-05-07 10:33:49", "user": 9582, "id": 1115085}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nI've discussed with Aaron a while ago about the way that I can use ARel's comparison methods (`#gt`, `#lt`, and so on) in AR. Turned out that I have to access it via `#arel_table` method of the model:\n\n```\nusers = User.arel_table\nfamous_users = User.where(users[:fame].gt(80))\n```\n\nThis become a bit tedious as I have to have another variable to store an instance of `Arel::Table` to be able to call those methods on it. Also, I don't think the code look clean if I merge those two lines together and make it as\n\n```\nfamous_users = User.where(User.arel_table[:fame].gt(80))\n```\n\nSo, after some discussion, I think it's better to make AR `.[]` method to return the instance of `Arel::Attributes::*`. This will give more readability to the code example above, and I think it fits in great with the context.\n\nAfter applying my patch, you would then can do\n\n```\nfamous_users = User.where(User[:fame].gt(80))\n```\n\nI think that looks really nice. I really wish I could get some feedback from you guys.\n", "labels": [], "number": 264, "updated_at": "2014-06-23 20:30:15", "user": 4912, "closed_at": "2011-04-13 00:21:05", "id": 759901, "title": "Return and instance of Arel::Attributes when calling `[]` on the model.", "url": "https://api.github.com/repos/rails/rails/issues/264", "created_at": "2011-04-12 15:58:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990454", "text": "+1 re https://twitter.com/#!/tenderlove/status/57839406987493376\n", "created_at": "2011-04-12 16:17:36", "user": 2208, "id": 990454}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990463", "text": "+1\n", "created_at": "2011-04-12 16:19:30", "user": 940, "id": 990463}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990467", "text": "I've used it too +1 re https://twitter.com/#!/tenderlove/status/57839406987493376\n", "created_at": "2011-04-12 16:20:02", "user": 27645, "id": 990467}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990510", "text": " +so many. I use arel_table constantly. It feels clumsy having to type it everywhere. (re https://twitter.com/#!/tenderlove/status/57839406987493376)\n", "created_at": "2011-04-12 16:28:10", "user": 1284, "id": 990510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990551", "text": "+1\n", "created_at": "2011-04-12 16:39:00", "user": 19490, "id": 990551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990571", "text": "+1\n", "created_at": "2011-04-12 16:41:55", "user": 218239, "id": 990571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990771", "text": "+1\n", "created_at": "2011-04-12 17:17:16", "user": 83396, "id": 990771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990816", "text": "+1\n", "created_at": "2011-04-12 17:25:06", "user": 78909, "id": 990816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991024", "text": "Agreed; This is a good idea. I use arel_table an awful lot in order to access predicates, and I find it rather clumsy to have to assign it first.\n", "created_at": "2011-04-12 18:05:30", "user": 241747, "id": 991024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991072", "text": "+1 idem as @scottlowe\n", "created_at": "2011-04-12 18:14:07", "user": 5254, "id": 991072}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991404", "text": "Like this really, +1  (re: https://twitter.com/#!/tenderlove/status/57839406987493376)\n", "created_at": "2011-04-12 19:10:54", "user": 160941, "id": 991404}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991623", "text": "+1 re https://twitter.com/#!/tenderlove/status/57839406987493376 (with other folks doing slighlty longer relation.table), using for things like `.matches` and `.not_eq` where there is some gain compared to using just bare SQL strings)\n", "created_at": "2011-04-12 19:45:21", "user": 43391, "id": 991623}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991637", "text": "Neat!\n", "created_at": "2011-04-12 19:46:49", "user": 83234, "id": 991637}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991921", "text": "+1\n", "created_at": "2011-04-12 20:33:47", "user": 26460, "id": 991921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991956", "text": "+1\n", "created_at": "2011-04-12 20:38:03", "user": 7573, "id": 991956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991981", "text": "-1, using the class twice does not sound good enough.\n", "created_at": "2011-04-12 20:42:33", "user": 473244, "id": 991981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991990", "text": "+1\n", "created_at": "2011-04-12 20:43:35", "user": 182, "id": 991990}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992127", "text": "Just to throw an idea out there.  If it's a DSL, make it a DSL:\n\n```\nfamous_awesome_users = User.where { fame.gt(100) & awesome? } # or .where { (fame > 80) & awesome? }\n```\n\nor is that too much magic? :)\n", "created_at": "2011-04-12 21:08:04", "user": 225017, "id": 992127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992349", "text": "+1 awesome!\n", "created_at": "2011-04-12 21:55:00", "user": 111746, "id": 992349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992371", "text": "Definitely +1. Makes not-writing SQL more attractive, which is a win for the universe.\n", "created_at": "2011-04-12 21:58:41", "user": 8207, "id": 992371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992474", "text": "You guys have no sense of what this kind of syntax would do to people new to Ruby. Fit's of despair would probably be a mild side effect. Don't forget, we are not trying to turn Ruby into a gulfing complete version of Perl, we are trying to create a framework which aids in Ruby's main mission of providing syntax that makes sense to people and just incidentally happens to be machine executable. .gt is broderline but something like fame.gt(100) & awesome? is just ridiculous. \n\nin any case -1 from me. \n", "created_at": "2011-04-12 22:19:28", "user": 347, "id": 992474}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992486", "text": "<pre>\nfamous_users = User.where(User[:fame].gt(80))\n</pre>\n\nReal nice, but repeating User is just WRONG, unless I can do that:\n\n<pre>\nfamous_users = User.where(Posts[:age].gt(80))\n</pre>\n", "created_at": "2011-04-12 22:20:39", "user": 473244, "id": 992486}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992507", "text": "My opinion this DSL should be in core:\n\nhttps://github.com/ernie/meta_where\n\nSo much more natural than the one suggested. Would never use the proposed syntax myself, just feels wrong/bloated.\n", "created_at": "2011-04-12 22:24:31", "user": 4783, "id": 992507}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992517", "text": "tobi > I totally disagree. I just asked 3 people who have any idea in what is even ruby (not a jewel) : \"what means for you fame.gt(100) & awesome, knowing that gt means greater than\". They all answered me \"fame superior to 100 and awesome ?\". So I don't think it's a problem, I think the DSL idea makes sense.\n\nAnd yeah. meta_where is just amazing.\n", "created_at": "2011-04-12 22:27:09", "user": 702037, "id": 992517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992577", "text": "I'm inclined to agree with @grimen - the syntax just seems off and meta_where is something I frequently use.\n\nI'm not looking forward to explaining the difference between user.attributes[:first_name] and User[:first_name] to newcomers.\n\nI like the idea/concept, but I don't think the DSL is quite right yet.\n", "created_at": "2011-04-12 22:38:58", "user": 1082, "id": 992577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992865", "text": "Thanks for the MetaWhere love but I wouldn't advocate the existing MW go into core, and I wrote it.\n\n[Squeel](http://github.com/ernie/squeel) (formerly MW 2.0) plays more nicely with others and the syntax is much improved, as well. It's still a work in progress but I hope to have it wrapped up by RailsConf.\n", "created_at": "2011-04-12 23:51:24", "user": 14947, "id": 992865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992891", "text": "Why not use the Mongoid-style syntax?\n\nUser.where(:fame.gt => 80, :awesome => true)\n\nEdit: Never mind, I see that's what meta_where does too.\n", "created_at": "2011-04-13 00:01:46", "user": 300058, "id": 992891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992909", "text": "By way of example, Squeel DSL:\n\n```\nArticle.joins{person}.\n        where{title.matches('%hello%') & \n              person.name.matches('Ernie%')}.to_sql\n=> SELECT \"articles\".* FROM \"articles\" \n   INNER JOIN \"people\" ON \"people\".\"id\" = \"articles\".\"person_id\"\n   WHERE ((\"articles\".\"title\" LIKE '%hello%' \n           AND \"people\".\"name\" LIKE 'Ernie%'))\"\n\nPerson.joins{children.children.children}.\n       where{children.children.children.name =~ 'Joe%'}.to_sql\n=> SELECT \"people\".* FROM \"people\" \n   INNER JOIN \"people\" \"children_people\" \n     ON \"children_people\".\"parent_id\" = \"people\".\"id\" \n   INNER JOIN \"people\" \"children_people_2\" \n     ON \"children_people_2\".\"parent_id\" = \"children_people\".\"id\"\n   INNER JOIN \"people\" \"children_people_3\" \n     ON \"children_people_3\".\"parent_id\" = \"children_people_2\".\"id\" \n   WHERE \"children_people_3\".\"name\" LIKE 'Joe%' \n\nNote.joins{notable(Person)}.\n     where{(notable.id == 1) | (id + 3 == notable.id)}.to_sql\n=> SELECT \"notes\".* FROM \"notes\" \n   INNER JOIN \"people\" ON \"people\".\"id\" = \"notes\".\"notable_id\" \n     AND \"notes\".\"notable_type\" = 'Person'\n   WHERE ((\"people\".\"id\" = 1 OR \"notes\".\"id\" + 3 = \"people\".\"id\"))\n\nPerson.select{name.op('||', '-diddly').as('flanderized_name')}.\n       first.flanderized_name\n=> \"Aric Smith-diddly\" \n\nPerson.where{find_in_set(id, '1,2,3,4')}.to_sql\n=> SELECT \"people\".* FROM \"people\"  WHERE (find_in_set(\"people\".\"id\", '1,2,3,4'))\n```\n", "created_at": "2011-04-13 00:10:07", "user": 14947, "id": 992909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992913", "text": "ZOMG, -Infinite then.\n", "created_at": "2011-04-13 00:11:48", "user": 473244, "id": 992913}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992933", "text": "@ernie has convinced me that this is probably not a good idea.  See [here](https://gist.github.com/915852).  I think for now that if people want fancier syntax, they should use Squeel, so I'm closing this.\n\nThank you @sikachu for reopening this pull request so that we could get some good community feedback!\n\n:heart::heart::heart::heart::heart::heart::heart::heart::heart::heart::heart::heart:\n", "created_at": "2011-04-13 00:21:05", "user": 3124, "id": 992933}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After a very long discussion on https://github.com/rails/rails/pull/258 and discussion with @dhh, we've decide that we want to do two things to it.\n## 1. Remove `Object#among?`\n\nThe reason for removal would be because these three things:\n1. Performance problem. Using varargs here seems to bug a lot of people\n2. It's shorter; `obj.in?([1,2,3])` is wayyyyy shorter than `obj.among?(1,2,3)`\n3. No good name for the inverse of it.\n\nIf you really want `obj.among?`, please show us your support by saying so and suggest a good name for inverse of it.\n## 2. Add `Object#ex?`\n\nA while ago, @pigoz has come up with this wonderful name from Latin. We think it fits with `#in` nicely, so we're including it here. You could say that \"#ex? is the new #not_in?`\n## Feedback needed!\n\nPlease keep the awesome discussion going. Make a comment if you like it/hate it.\n", "labels": [], "number": 265, "updated_at": "2014-07-03 03:52:22", "user": 4912, "closed_at": "2011-04-13 12:31:26", "id": 760267, "title": "Take out Object#among? but add in Object#ex?", "url": "https://api.github.com/repos/rails/rails/issues/265", "created_at": "2011-04-12 17:04:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/990862", "text": "-1 for Object#ex?\n\nNot only does 'ex' mean \"out of,\" it also means \"from\" and implies that it was once in the list.\n\nex-pirate = Once a pirate, but no longer a pirate.\n\noption.ex?(:foo, :bar) # Was once :foo or :bar, but no longer is?\n\nThere's too much linguistic baggage to be repurposed this way.\n", "created_at": "2011-04-12 17:34:08", "user": 166528, "id": 990862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991201", "text": "+1 on removing `#among?`. I liked `#either` better for its symmetry with `#neither` (indeed the fact that that works so well is what kicked off this whole mess of finding something equally nice for `not_in?`), and as it stands I'm fairly certain I would always prefer writing `obj.in?([1,2,3])` to `obj.among?(1, 2, 3)`. Not to re-open the debate but FWIW I had no problem with `either`/`neither` for more than two alternatives -- I personally consider e.g. \"we can do either this, that, or nothing at all\" perfectly natural speech.\n\nI'm also with @phene on -1 for `#ex?` being unclear. For me the first Latin phrase that comes to mind is _deus ex machina_ -- \"god from the machine,\" which doesn't help me in the slightest to recall the semantics of this method. As he points out the meaning of \"ex\" as \"formerly\" further clouds things too.\n", "created_at": "2011-04-12 18:37:32", "user": 13277, "id": 991201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/991978", "text": "I suggest using another Latin word: \"sans\". It was suggested in the previous pull request and I think it's worth reconsidering. 1) It's short 2) It's precise 3) The community knows what it means - e.g. sans-serif means a font without serifs.\n", "created_at": "2011-04-12 20:41:38", "user": 111577, "id": 991978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992055", "text": "Object#in? is nice, and adds expressivity. As for the rest of them, I made the comment on https://github.com/rails/rails/pull/258, but I think it remains relevant to the discussion on #ex?:\n\nThis discussion is like TDD for syntax, and I think the tests are telling us something.\n\nin? Feels pretty natural, and is handy in the same way blank? and present? are. All of the rest just feel wrong.\n\nI think this is because we're trying to solve a nonexistent problem. Someone mentioned earlier how the English language doesn't really have clear one-word negation options here. That's because in English, we would say \"3 is not in the set of 1, 2, 4\".\n\nI think this tells us something, given that only real use for this method is in conditionals, to begin with (including the ternary operator). The rest aren't needed.\n\nWhere we ask \"if object.in?(array)\", the opposite is \"unless object.in?(array)\". If necessary, !object.in?(array) feels pretty natural as well.\n\nThis seems obvious, as we discuss this. blank? was handy given ruby's definition of truthiness, but present? was a welcome addition because negating a \"negative\" (!blank?) method like blank was often less expressive of intent. You don't ask \"is that space still blank?\" as often as you ask \"has it been filled in?\"\n\nSince the English idiom here is to say \"not in\", I think the standard Ruby idioms for negating the condition already complement in? nicely.\n", "created_at": "2011-04-12 20:54:06", "user": 14947, "id": 992055}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/992194", "text": "I like sans, but the object-subject order doesn't fit for this scenario.\n\n<code>items.sans? kitchen_sink</code>\n\nmakes a lot more sense than\n\n<code>kitchen_sink.sans? items</code>\n", "created_at": "2011-04-12 21:22:04", "user": 166528, "id": 992194}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/993414", "text": "I don't understand why are we jumping through so many hoops to avoid using \"not in\"?\n\nIs it really that bad? Is it really so bad that we have to leave the English language entirely to find an alternative?!\n\nI know some people find it ugly, but to me, it reads exactly as it should work. With most of the other suggestions, I have do a small mental conversion back to \"not in\".\n\nIt's also the most obvious - I wouldn't need to bother looking up documentation if I ever came across this code in use.\n\nnot_in? just seems more self documenting, just like exclude?, present?, etc.\n\nex? and sans? are not so obvious without the help of an explanation or documentation to justify their use.\n\nThe only caveat, which I somewhat agree with, is that we already have the negation operators '!' and 'not' that already does this. But like much of ruby (and rails) there's more than one way to skin a cat.\n", "created_at": "2011-04-13 03:10:09", "user": 103568, "id": 993414}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/993684", "text": "This is my proposal for `#among?`:\n- `alias :either?, :among?`\n- Add `#neither?` as a opposite.\n\nSo in some context which you test against two items, you might consider `#either?` to be more fit on it. While for testing on 3 things or more you'd use `#among?` because it reads better instead.\n\nFor `#neither?`, the word actually means \"not the one nor the other of two people or things\" so I think it's a good fit. In the real english it's ok for you to have more than 2 items such as:\n\n   I'm neither tenderlove, DHH, nor josevalim.\n", "created_at": "2011-04-13 04:36:35", "user": 4912, "id": 993684}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/994331", "text": "+1 for removing `Object#among?`/`Object#either?`\n+1 for ernie's suggestion (so -1 for adding Object#ex?). We need no inverse for Object#in?, as we can simply use `!`/`not`/`unless`, as in:\n\n```\nunless my_object.in?([\"a\", \"b\", \"c\"])\n ...\nend\n```\n\nor\n\n```\nif my_object.in?([\"a\", \"b\"]) and not my_object.in?([\"c\", \"d\"])\n  ...\nend\n```\n", "created_at": "2011-04-13 08:57:52", "user": 2195, "id": 994331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/994379", "text": "Seeing ex? in usage here, I'm falling out of favor too. Let's just start small, we don't need to solve everything now. The big win is just to get Object#in? -- we can think deeper about the perfect opposite some other time.\n\n@sikachu, please rebase one last time with only Object#in? being part of the game and we'll move on from this for now. \n", "created_at": "2011-04-13 09:10:57", "user": 2741, "id": 994379}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/994661", "text": "Will do.\n\nSent from my iPhone\n\nOn 13 ‡πÄ‡∏°.‡∏¢. 2554, at 16:11, dhhreply@reply.github.com wrote:\n\n> Seeing ex? in usage here, I'm falling out of favor too. Let's just start small, we don't need to solve everything now. The big win is just to get Object#in? -- we can think deeper about the perfect opposite some other time.\n> \n> @sikachu, please rebase one last time with only Object#in? being part of the game and we'll move on from this for now.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/265#issuecomment-994379\n", "created_at": "2011-04-13 10:33:06", "user": 4912, "id": 994661}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/994962", "text": "The pull request has been updated with one commit only.\n", "created_at": "2011-04-13 12:07:16", "user": 4912, "id": 994962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/995085", "text": "This pull request has been merged and shall now be closed.\n", "created_at": "2011-04-13 12:31:26", "user": 4912, "id": 995085}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request fixes the range around 2 days for `distance_of_time_in_words`.  It also corrects the tests and docs.\n", "labels": [], "number": 266, "updated_at": "2014-07-03 03:52:28", "user": 14761, "closed_at": "2011-04-14 00:22:19", "id": 762262, "title": "distance_of_time_in_words returns wrong value near 2 days", "url": "https://api.github.com/repos/rails/rails/issues/266", "created_at": "2011-04-13 01:05:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/998621", "text": "Closing since it was merged by @dhh - thanks!\n", "created_at": "2011-04-14 00:22:19", "user": 14761, "id": 998621}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This made the isolated test failed on CI server.\n", "labels": [], "number": 267, "updated_at": "2014-07-03 03:52:31", "user": 4912, "closed_at": "2011-04-13 17:57:32", "id": 765227, "title": "Fix missing requires in Action Mailer", "url": "https://api.github.com/repos/rails/rails/issues/267", "created_at": "2011-04-13 17:43:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/996834", "text": "Applied, thanks!\n", "created_at": "2011-04-13 17:57:32", "user": 3387, "id": 996834}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The comment above the method specifically states the supplied param must respond to include?, but allows a method that doesn't fall through to a NoMethodError.  Instead it should raise a more descriptive error.\n", "labels": [], "number": 268, "updated_at": "2014-07-03 03:52:34", "user": 14482, "closed_at": "2011-04-14 16:36:16", "id": 766983, "title": "Add ArgumentError to Object#in? if supplied param doesn't respond to :include?", "url": "https://api.github.com/repos/rails/rails/issues/268", "created_at": "2011-04-14 01:03:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/999829", "text": "Can you benchmark this version against the vanilla one? Curious how much slower it is to have a respond and a rescue up front than not. On Ruby 1.9, the version without is only 23% slower than straight include?\n", "created_at": "2011-04-14 08:24:57", "user": 2741, "id": 999829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/999886", "text": "I don't know if we really need to explicitly check for the error or not. I do understand that it will surely get `NoMethodError` for `#include?`, but don't know if having an error at `#in?` level would be neccessary.\n\nAnyway, my suggestion for this would be cache the `NoMethodError` returned from `#include?` and change the exception message. I think in that case we won't suffer from upfront rescue.\n", "created_at": "2011-04-14 08:45:19", "user": 4912, "id": 999886}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1000085", "text": "Actually, we can just catch NoMethodError and reraise an ArgumentError instead. That's the way to go. Then there's no preemptive check and thus no cost. Please make it so (and include tests as well as documentation, so people know which exception to expect.)\n", "created_at": "2011-04-14 09:35:39", "user": 2741, "id": 1000085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1000087", "text": "Agree that that's the way to go too. +1\n", "created_at": "2011-04-14 09:36:35", "user": 4912, "id": 1000087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1001581", "text": "I don't think we need to change this. `NoMethodError` is descriptive enough.\n\n@josevalim just recently removed several instances of the type of rescue/raise combo you are suggesting: df5691aa94f209a59945d60d750a5040b24dbc40\n", "created_at": "2011-04-14 14:47:44", "user": 98601, "id": 1001581}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1001723", "text": "-1. This is usually referred as [chicken typing](http://talklikeaduck.denhaven2.com/2007/10/22/chicken-typing-isnt-duck-typing). There is no need check if it responds to something, runtime will tell us.\n", "created_at": "2011-04-14 15:13:40", "user": 9582, "id": 1001723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1001736", "text": "Yes, -1 on the first implementation, but having an ArgumentError makes more sense than a NoMethodError because what's failing is that the first argument doesn't live up to what you expect. Ultimately it doesn't matter much, but it would be nicer.\n", "created_at": "2011-04-14 15:15:40", "user": 2741, "id": 1001736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1002043", "text": "Okay, I added the test and changed it to catch a NoMethodError.\n\n@jfirebaugh But if you call 1.in?(1), a NoMethodError isn't the problem.  The problem is that you actually passed in a bad argument, and so the proper ArgumentError should be raised.  If you get a NoMethodError, you need to know the internal implementation of #in? to understand what happened.\n", "created_at": "2011-04-14 16:09:04", "user": 14482, "id": 1002043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1002208", "text": "Applied. Thanks!\n", "created_at": "2011-04-14 16:36:17", "user": 2741, "id": 1002208}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add unit test to demonstrate issue with similar callback methods overriding each other in distinct contexts\n", "labels": ["activerecord"], "number": 269, "updated_at": "2014-06-18 07:08:45", "user": 120708, "closed_at": "2011-06-28 16:11:00", "id": 767062, "title": "Callback collision", "url": "https://api.github.com/repos/rails/rails/issues/269", "created_at": "2011-04-14 01:27:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/998781", "text": "Demonstrates issue in:\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6660\n", "created_at": "2011-04-14 01:28:27", "user": 120708, "id": 998781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1002225", "text": "I think this also affects after_commit callbacks.  Should we add a test for that, too?\n", "created_at": "2011-04-14 16:38:21", "user": 166528, "id": 1002225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142816", "text": "Can we please get this merged in prior to the 3.1 release?\n", "created_at": "2011-05-11 20:24:11", "user": 114033, "id": 1142816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142857", "text": "Thanks for the patch with the fix but it does not make sense to hardcode options[:on]. The :on option just makes sense for a few callbacks and does not belong conceptually in AS::Callbacks. I am still unsure on how to properly solve the issue. Maybe we should allow :on to receive an array?\n", "created_at": "2011-05-11 20:30:34", "user": 9582, "id": 1142857}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142871", "text": "I would be even happier if I could do `:on => [ :create, :update ]`\n", "created_at": "2011-05-11 20:32:21", "user": 114033, "id": 1142871}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142904", "text": "@bgentry that is easier to implement. You just need to rewrite this:\n\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model/validations.rb#L136\n\nAs something like:\n\n```\noptions[:if].unshift(\"#{Array.wrap(options[:on]).inspect}.include?(validation_context)\")\n```\n\nAlso in a couple other places like:\n\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model/validations/callbacks.rb\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/transactions.rb\n", "created_at": "2011-05-11 20:37:54", "user": 9582, "id": 1142904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1144342", "text": "@josevalim- I agree that hard coding :on is not appropriate.  How about instead of white listing options that imply difference, we black list options that determine equivalence.\n", "created_at": "2011-05-12 02:45:15", "user": 120708, "id": 1144342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1145067", "text": "@mandrews I believe black listing would work fine. +1\n", "created_at": "2011-05-12 07:20:46", "user": 9582, "id": 1145067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377158", "text": "Note: the target of this commit is currently goes to 3.0.6, which is so old. I believe there's no way to change it, so maybe @josevalim can merge it into `master` instead.\n\nI believe this is a bugfix, so targets are for `3-0-stable`, `3-0-9`, `3-1-stable` and `master`. And please don't forget the CHANGELOG entry. ;)\n", "created_at": "2011-06-15 21:59:02", "user": 4912, "id": 1377158}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400006", "text": "I rebased to master, ran the unit tests and created a new pull request:\nhttps://github.com/rails/rails/pull/1777\n", "created_at": "2011-06-20 01:28:57", "user": 120708, "id": 1400006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1456682", "text": "Closed in favor of #1777\n", "created_at": "2011-06-28 16:11:00", "user": 9582, "id": 1456682}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`dbconsole` command doesn't recognize `jdbcpostgresql` adapter.\nAnd JRuby requires some workaround to run `psql` in proper environment.\n", "labels": [], "number": 270, "updated_at": "2014-07-03 03:52:42", "user": 1032, "closed_at": "2011-10-09 02:47:33", "id": 767329, "title": "Fix dbconsole command for jdbcpostgresql adapter and JRuby", "url": "https://api.github.com/repos/rails/rails/issues/270", "created_at": "2011-04-14 03:23:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334935", "text": "Thanks for patching this, but it looks like a complex, brittle situation. It's probably better to wait to provide official support until it doesn't need such a complex workaround.\n", "created_at": "2011-10-09 02:47:33", "user": 199, "id": 2334935}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just fixed a tiny typo in a comment\n", "labels": [], "number": 271, "updated_at": "2014-07-03 03:52:45", "user": 39493, "closed_at": "2011-04-14 08:30:00", "id": 767993, "title": "Comment Typo", "url": "https://api.github.com/repos/rails/rails/issues/271", "created_at": "2011-04-14 07:59:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/999843", "text": "Thanks, fixed. In the future you can make doc changes directly to https://github.com/lifo/docrails.\n", "created_at": "2011-04-14 08:30:00", "user": 2741, "id": 999843}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "before:\n\n```\nHash.from_xml(\"<tag foo='bar'>\\n</tag>\")\n=> {\"tag\"=>\"\\n\"}\n```\n\nnow:\n\n```\nHash.from_xml(\"<tag foo='bar'>\\n</tag>\")\n=> {\"tag\"=>{\"foo\"=>\"bar\", \"__content__\"=>\"\\n\"}\n```\n", "labels": [], "number": 272, "updated_at": "2014-06-18 07:56:57", "user": 78, "closed_at": "2011-04-14 08:33:53", "id": 768061, "title": "XML attributes no longer disappear if a tag contains whitespace", "url": "https://api.github.com/repos/rails/rails/issues/272", "created_at": "2011-04-14 08:28:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/999854", "text": "Thanks! Applied.\n", "created_at": "2011-04-14 08:33:53", "user": 2741, "id": 999854}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@fxn pointed out to me that the gsub was unneeded, so I removed it. Hopefully this can go into 3-0-stable as well as master, so I can use the fix in the next point release. :)\n", "labels": [], "number": 273, "updated_at": "2014-07-03 03:52:50", "user": 78, "closed_at": "2011-04-14 13:31:18", "id": 768086, "title": "Small fix for previous Hash.from_xml fix", "url": "https://api.github.com/repos/rails/rails/issues/273", "created_at": "2011-04-14 08:43:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1001198", "text": "@dhh already applied these changes, closing ...\n", "created_at": "2011-04-14 13:31:18", "user": 52642, "id": 1001198}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This significantly reduces the slowdown introduced in [86acbf1](https://github.com/rails/rails/commit/86acbf1cc050c8fa8c74a10c735e467fb6fd7df8), as documented in [issue #6695](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6695).\n", "labels": [], "number": 274, "updated_at": "2014-07-03 03:52:53", "user": 94665, "closed_at": "2011-04-14 15:56:25", "id": 769373, "title": "Fix performance issue introduced in 3.0.6 (issue #6695)", "url": "https://api.github.com/repos/rails/rails/issues/274", "created_at": "2011-04-14 14:56:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1001957", "text": "Merged, thank you!\n", "created_at": "2011-04-14 15:56:25", "user": 3124, "id": 1001957}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "An apostrophe has to be escaped as &apos; in attribute values.\n", "labels": [], "number": 275, "updated_at": "2014-07-03 03:52:56", "user": 418980, "closed_at": "2011-05-07 10:41:33", "id": 769388, "title": "properly escape \"'\" to \"&apos;\" for XML", "url": "https://api.github.com/repos/rails/rails/issues/275", "created_at": "2011-04-14 14:59:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1053529", "text": "Tests please?\n", "created_at": "2011-04-25 16:23:31", "user": 3124, "id": 1053529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116604", "text": "After applying this patch, several tests in AP started to fail. Therefore this merge was reverted (unfortunately Github does not allow me to reopen the issue). \n", "created_at": "2011-05-07 21:47:15", "user": 9582, "id": 1116604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116653", "text": "Unfortunately GitHub doesn't allow me to reopen the pull request either. :-(\n", "created_at": "2011-05-07 22:09:01", "user": 418980, "id": 1116653}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 276, "updated_at": "2014-07-03 03:52:59", "user": 4912, "closed_at": "2011-04-27 12:57:37", "id": 769579, "title": "Update scaffold controller to generate scss file if Sass is available", "url": "https://api.github.com/repos/rails/rails/issues/276", "created_at": "2011-04-14 15:43:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064052", "text": "This has been applied.\n", "created_at": "2011-04-27 12:57:37", "user": 2741, "id": 1064052}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ruby 1.9.2 and other ruby implementations may not return the same hash value for the same string each time. This can result in your static assets being served from different asset hosts, which makes browser caching less effective. Use md5 or some other digest method instead.\n", "labels": [], "number": 277, "updated_at": "2014-06-12 10:09:03", "user": 36390, "closed_at": "2011-04-26 00:04:00", "id": 770430, "title": "Correct documentation for asset host strategy for 1.9.2", "url": "https://api.github.com/repos/rails/rails/issues/277", "created_at": "2011-04-14 19:18:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1055854", "text": "Should be merged in.  Thanks!\n", "created_at": "2011-04-26 00:04:00", "user": 3124, "id": 1055854}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Executing rails console with a given environment an options is broken.\n", "labels": [], "number": 278, "updated_at": "2014-07-03 03:53:08", "user": 3359, "closed_at": "2011-04-26 19:02:25", "id": 771996, "title": "Fix console to accept [environment] [options] as specified in docs.", "url": "https://api.github.com/repos/rails/rails/issues/278", "created_at": "2011-04-15 02:04:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1060025", "text": "Merged\n", "created_at": "2011-04-26 19:02:25", "user": 9582, "id": 1060025}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Executing rails console with a given environment an options is broken.\n", "labels": [], "number": 279, "updated_at": "2014-06-18 16:39:00", "user": 3359, "closed_at": "2011-04-26 18:48:42", "id": 772005, "title": "Fix console to accept [environment] [options] as specified in docs.", "url": "https://api.github.com/repos/rails/rails/issues/279", "created_at": "2011-04-15 02:09:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using HTML::FullSanitizer to strip tags from a frozen string works under Ruby 1.8, but fails under Ruby 1.9 due to the change in behavior of String#gsub! on frozen strings.\n", "labels": [], "number": 280, "updated_at": "2014-07-03 03:53:13", "user": 5226, "closed_at": "2011-05-07 10:44:25", "id": 773388, "title": "Stripping tags from a frozen string", "url": "https://api.github.com/repos/rails/rails/issues/280", "created_at": "2011-04-15 12:39:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1006428", "text": "Please also back-port this to 2-3-stable, since it affects Rails 2.3.11 under Ruby 1.9 as well.\n", "created_at": "2011-04-15 12:40:27", "user": 5226, "id": 1006428}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This code returns insecure content, and I think that's very counter-intuitive:\nauto_link(\"&lt;script>alert('malicious')&lt;/script> www.rubyonrails.org\", :sanitize => true)\n\nI propose to avoid the vulnerability this commit from @tenderlove fixed: https://github.com/rails/rails/commit/61ee3449674c591747db95f9b3472c5c3bd9e84d and at the same time give a better use to the existent (but not documented) :sanitize option. \n", "labels": [], "number": 281, "updated_at": "2014-06-26 20:29:34", "user": 6528, "closed_at": "2011-05-05 21:42:13", "id": 776640, "title": "auto_link to return sanitized strings", "url": "https://api.github.com/repos/rails/rails/issues/281", "created_at": "2011-04-15 22:34:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1011455", "text": "It should not return an html_safe string when when `:sanitize => false` is given, right? Can you add a test for that?\n", "created_at": "2011-04-16 00:34:44", "user": 98601, "id": 1011455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1012109", "text": "You are right, test added.\n", "created_at": "2011-04-16 08:27:55", "user": 6528, "id": 1012109}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1094821", "text": "auto_link has removed on master. I think that this issue can be closed\n", "created_at": "2011-05-03 16:31:37", "user": 47848, "id": 1094821}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1108407", "text": "Closing. Pull request moved to the new rails_autolink repository.\n", "created_at": "2011-05-05 21:42:13", "user": 6528, "id": 1108407}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Right now `Array#from` will return `nil` if the index passed in is outside the bounds of the array, which is inconsistent with all other returns (including `%().from(0)`, which is technically outside the bounds of the array), and so using `Array#from`  we'll have to do things like\n\n```\nunless %(a, b, c, d).from(5).nil?\n   # ... do something here\nend\n```\n\nThis commit will change it so that all return values of `Array#from` are an array.\n\nTests and documentation update included.\n\nI ran benchmarks using the following:\n\n```\nrequire 'benchmark'\n\nclass Array\n\n  def from(position)\n    self[position..-1]\n  end\n\n  def new_from(position)\n    position > length ? [] : self[position..-1]\n  end\n\nend\n\narray = (1..10).to_a\nn = 200_000\n\nBenchmark.bm(3) do |x|\n  x.report(\"1:\") { n.times { array.from(1) } }\n  x.report(\"2:\") { n.times { array.new_from(1) } }\n  x.report(\"3:\") { n.times { array.from(100001) } }\n  x.report(\"4:\") { n.times { array.new_from(100001) } }\nend\n```\n\nAnd got\n\n```\n         user     system      total        real\n1:   0.360000   0.000000   0.360000 (  0.362778)\n2:   0.400000   0.000000   0.400000 (  0.396071)\n3:   0.320000   0.010000   0.330000 (  0.337338)\n4:   0.170000   0.000000   0.170000 (  0.161635)\n```\n\nWhich is a 8% increase on calls that go through and a 50% decrease when a call is outside the arrays range.\n\nIf I increased the array size to 100,000 items, it became a 10% increase in time.\n", "labels": [], "number": 282, "updated_at": "2014-07-03 03:53:20", "user": 14482, "closed_at": "2011-04-26 21:48:30", "id": 776880, "title": "Change Array#from to return consistent results", "url": "https://api.github.com/repos/rails/rails/issues/282", "created_at": "2011-04-16 00:06:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1060595", "text": "Any chance we can get this pull request reworked so it's only one commit with the `Array#from` change with tests?\n", "created_at": "2011-04-26 20:45:42", "user": 18374, "id": 1060595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1060711", "text": "Sure, do I need to open a new pull request to do that?\n", "created_at": "2011-04-26 21:02:03", "user": 14482, "id": 1060711}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1060903", "text": "I would. And then close this pull request linking to the refactored new request. The change to `Object#in?` should probably be in its own pull request.\n", "created_at": "2011-04-26 21:30:31", "user": 18374, "id": 1060903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061019", "text": "Opening a new pull request to include a single commit\n\nVisible here: https://github.com/rails/rails/pull/317\n", "created_at": "2011-04-26 21:48:30", "user": 14482, "id": 1061019}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adding JSON in Gemfile for Jruby fixes the test.\n", "labels": [], "number": 283, "updated_at": "2014-07-03 03:53:26", "user": 3948, "closed_at": "2011-04-16 10:50:54", "id": 777737, "title": "Test failing with Jruby \"uninitialized constant TestJSONEncoding::JSON\"", "url": "https://api.github.com/repos/rails/rails/issues/283", "created_at": "2011-04-16 10:44:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1012746", "text": "I think from next time i should be sending pull request from a specific branch. With only that specific commit. \n", "created_at": "2011-04-16 10:48:54", "user": 3948, "id": 1012746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1013044", "text": "New request is at https://github.com/rails/rails/pull/284\n", "created_at": "2011-04-16 11:00:58", "user": 3948, "id": 1013044}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "activesupport/test/json/encoding_test.rb need Json to pass with Jruby\n", "labels": [], "number": 284, "updated_at": "2014-07-03 03:53:29", "user": 3948, "closed_at": "2011-04-17 19:01:04", "id": 777865, "title": "Test failing with Jruby \"uninitialized constant TestJSONEncoding::JSON\"", "url": "https://api.github.com/repos/rails/rails/issues/284", "created_at": "2011-04-16 11:00:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1016274", "text": "Yes this fix passess the activesupport/test/json/encoding_test.rb file\n", "created_at": "2011-04-17 09:28:49", "user": 111473, "id": 1016274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017585", "text": "Merged and pushed. Thank you!\n", "created_at": "2011-04-17 19:01:04", "user": 3124, "id": 1017585}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently ActiveModel::SecurePassword defaults to BCrypt::Engine::DEFAULT_COST which is 10. It would be nice if we could override this. By overriding the instance method #password_digest_cost this can be done\n", "labels": [], "number": 285, "updated_at": "2014-06-15 10:33:14", "user": 18524, "closed_at": "2011-04-17 08:27:29", "id": 779207, "title": "Optionally change the cost of ActiveModel::SecurePassword encryption", "url": "https://api.github.com/repos/rails/rails/issues/285", "created_at": "2011-04-16 22:26:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015124", "text": "How about making this an option on `has_secure_password`, i.e. `has_secure_password digest_cost: 11`\n", "created_at": "2011-04-16 22:36:38", "user": 80070, "id": 1015124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015130", "text": "@exviva yeah, I like that much better. I'll update the pull request\n", "created_at": "2011-04-16 22:38:04", "user": 18524, "id": 1015130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015204", "text": "What's the scenario where you actually need to raise the cost? What have you raised the cost to in the past? And what was the reason then?\n", "created_at": "2011-04-16 23:03:01", "user": 2741, "id": 1015204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015225", "text": "@dhh it goes both ways, there are cases for increasing and decreasing the default cost. See the 'Cost' section here: https://github.com/codahale/bcrypt-ruby\n\nI have not personally needed to increase the cost, but in a few years who knows?\n", "created_at": "2011-04-16 23:12:10", "user": 18524, "id": 1015225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015249", "text": "Do you have some concrete examples of where you have increased or decreased the cost and the reasoning available for why?\n", "created_at": "2011-04-16 23:23:07", "user": 2741, "id": 1015249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015271", "text": "Just forced a push that moves the cost as an option for has_secure_password\n", "created_at": "2011-04-16 23:31:16", "user": 18524, "id": 1015271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015286", "text": "@dhh I have not had a need to increase the cost of the encryption. Then again, I've only used Bcrypt on one project. I'm sure there are plenty of cases where more security is necessary, maybe someone that has worked on a HIPAA app or something similar has had a need. But I cannot speak to that.\n", "created_at": "2011-04-16 23:37:56", "user": 18524, "id": 1015286}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015406", "text": "Why the need to even give examples of needing go increase/decrease the cost? What is the downside to giving the user the option should the need arise in their use case?  I see no downside to providing the option, only an upside\n", "created_at": "2011-04-17 00:31:04", "user": 863, "id": 1015406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015868", "text": "@cpjolicoeur Convention over configuration? 10 is a quite sane default.\n", "created_at": "2011-04-17 04:44:59", "user": 17348, "id": 1015868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1015876", "text": "@bai convention over configuration doesn't apply in this case. Setting the cost is not required. But if you do need to change it the option exists. Otherwise one would need to overwrite the authenticate instance method to set a custom cost.\n", "created_at": "2011-04-17 04:49:12", "user": 18524, "id": 1015876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1016167", "text": "We don't pre-emptively add options to code until we have a good reason to and a strong use case. More code is more code. Also, this whole module is tiny. You could easily overwrite the 4-line #password= if you truly need to change something. So I'm closing this for now. Feel free to reopen if you come up with an incredibly compelling case that's backed by data showing how a different setting is necessary.\n", "created_at": "2011-04-17 08:27:29", "user": 2741, "id": 1016167}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1016509", "text": "I guess I still don't see how that argument makes sense. \n\nThe bcrypt-ruby library that is being used ITSELF provides the option for setting the cost, so why not pass that along to the user?  \n\nIts not like the rails codebase is adding code just for the sake of adding code, or even to extend functionality of an existing library. This patch is simply exposing a setting option to the user that already exists in the bcrypt-ruby implementation. \n\nWhile I can't think of compelling reasons as the moment for increasing the cost, there are current reasons for decreasing the cost. Speed and response time being the biggest, especially for stateless systems doing authentication. I've lowered the cost factor on two projects doing auth for API usage with mobile devices where speed was a huge consideration. \n\nIn the future, as hardware capabilities increase, there will come a need to increase the cost/work factor as well. \n- Craig\n\nOn Apr 17, 2011, at 4:27 AM, dhhreply@reply.github.com wrote:\n\n> We don't pre-emptively add options to code until we have a good reason to and a strong use case. More code is more code. Also, this whole module is tiny. You could easily overwrite the 4-line #password= if you truly need to change something. So I'm closing this for now. Feel free to reopen if you come up with an incredibly compelling case that's backed by data showing how a different setting is necessary.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/285#issuecomment-1016167\n", "created_at": "2011-04-17 11:38:13", "user": 863, "id": 1016509}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1016554", "text": "cpjollcoeur, now you're introducing real arguments. Can you share the specifics of your mobile API usage that required lowering the cost? What cost did you arrive at? What where the before/after on time spent?\n\nEvery option we add increases the mental overhead of the system. We should battle every option until there's a strong, compelling reason to add it. And even then, we should consider if we can abstract the underlying tech such that everyone doesn't have to do their own math on which setting is good for what. Especially on something that's as simple as this.\n", "created_at": "2011-04-17 12:00:36", "user": 2741, "id": 1016554}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1016902", "text": "@dhh\n\nThe purpose of making the password hash algorithm slow is to make it extremely difficult for an attacker to perform an offline dictionary attack against one stolen password hash, let alone against a whole database of them. As the attackers' computers become faster or as the attacker is able to gain access to more of them, retaining the same level of protection requires that we raise the cost of the password hash algorithm. If the attacker's capacity to perform an offline dictionary attack doubles in two years, then websites should double the cost of the password hash algorithm every two years.\n\nSee the very existence of PBKDF2 (http://en.wikipedia.org/wiki/PBKDF2): \"The added computational work makes password cracking much more difficult, and is known as key stretching. When the standard was written in 2000, the recommended minimum number of iterations was 1000, but the parameter is intended to be increased over time as CPU speeds increase.\" The same principle applies whether one uses bcrypt, scrypt, pbkdf2, or iterated hmac.\n", "created_at": "2011-04-17 14:59:34", "user": 169419, "id": 1016902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017057", "text": "@dhh I'll try to gather some hard data, but @yfeldblum is pretty on the money. The current cost of '10' is adequate for today. But future-proofing the security is important too.\n\nYou can check out the Authlogic post on Bcrypt http://www.binarylogic.com/2008/11/22/storing-nuclear-launch-codes-in-your-app-enter-bcrypt-for-authlogic @dkubb advocates optional cost increase and says he rolls this into his own apps. I'll try pinging him to see if he can weigh in on this pull\n", "created_at": "2011-04-17 15:47:14", "user": 18524, "id": 1017057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017136", "text": "@dhh my patch sets the default not to a hard 10 but to BCrypt::Engine::DEFAULT_COST. This value could change over time per the opinion of the maintainers of bcrypt-ruby\n", "created_at": "2011-04-17 16:08:51", "user": 18524, "id": 1017136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017191", "text": "Those arguments are assuming that we wouldn't just choose a good default to stay current with whatever changes might happen over time. We're already using BCrypt::Engine::DEFAULT_COST, so if this value changes over time, we're automatically good. In addition, you can always redefine that constant if you must and are not willing to overwrite the 4-line #password= method.\n\nIn fact, if you're so well-versed in these matters that you do your own cost value analysis, stay up to date on it over time, and tweak this on a regular basis, you're not the target audience for this feature. This feature serves two purposes: 1) Tell Rails developers that BCrypt is a best practice, 2) Give them a little bit of sugar to persuade them to use it right now and they'll have AWESOME password security compared to the industry standard.\n\nThat Authlogic post only seems to reinforce this view of the world.\n\nThus, the only argument I've heard so far that's persuasive is that a default cost of 10 would not be suitable for a per-request authentication scheme, like an API or http auth. I'll await the presentation of data on that point, but unless that's very compelling, I've not heard other arguments that would change my mind on no setting here.\n\n(Regardless, I do appreciate the debate. It's healthy. Especially on security matters.)\n", "created_at": "2011-04-17 16:35:56", "user": 2741, "id": 1017191}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017196", "text": "In my quick test on my laptop, BCrypt took 7ms on a single pass. Now that's great because it's slow compared to everything else, but I'd be very curious to see where 7ms proves to be a problem/bottleneck in a real Rails app. Even with per-request authentication. But I'll await your findings.\n", "created_at": "2011-04-17 16:41:41", "user": 2741, "id": 1017196}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017242", "text": "@dhh I just ran some benchmarks on a Slicehost VPS. Ruby 1.9.2:\n\n```\nirb(main):017:0> Benchmark.measure do\nirb(main):018:1* 100.times { BCrypt::Password.create('somesecurepassword', :cost => 10) }\nirb(main):019:1> end\n=>   9.180000   0.000000   9.180000 (  9.081898)\n```\n\nWith the default cost this means each request will take an additional 90ms. IMO pretty significant for APIs.\n\nBecause the cost is just a multiplier we can step it down to 9 and expect a 50% performance increase:\n\n```\nirb(main):023:0> Benchmark.measure do\nirb(main):024:1* 100.times { BCrypt::Password.create('somesecurepassword', :cost => 9) }\nirb(main):025:1> end\n=>   4.560000   0.000000   4.560000 (  4.660387)\n```\n\nAnd that is just what we see here. Compared to SHA512:\n\n```\nirb(main):026:0> Benchmark.measure do\nirb(main):027:1* 100.times { Digest::SHA512.hexdigest('somesecurepassword') }\nirb(main):028:1> end\n=>   0.000000   0.000000   0.000000 (  0.027072)\n```\n\nmeans we can step the BCrypt cost down some more for performance and still get better security than SHA512:\n\n```\nirb(main):029:0> Benchmark.measure do\nirb(main):030:1* 100.times { BCrypt::Password.create('somesecurepassword', :cost => 2) }\nirb(main):031:1> end\n=>   0.150000   0.000000   0.150000 (  0.172343)\n```\n\nEach developer could choose the balance of speed/security. If they have some baddass production servers they might want to step it up or even keep the default. But not everybody has access to machines like this in production. Many people are deploying to VPS or EC2. (EC2 might be worse, you never really know what hardware you're on)\n", "created_at": "2011-04-17 16:56:12", "user": 18524, "id": 1017242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017267", "text": "Yes, 90ms per request for API traffic that authenticates per-request is not going to fly. Was the app you were working on using both API and regular web access? Because this setting is per-model, not per-user method. So you simply accepted a lower cost, and thus security, across the entire app?\n", "created_at": "2011-04-17 17:03:54", "user": 2741, "id": 1017267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017284", "text": "@dhh the highest traffic API I built was while I was at the DNC. We were not using BCrypt at the time (if I were to build it today I would use it) but performance was very important. An additional 90ms would have been a deal breaker. The app had both API and web authentication but we were consuming our own API so technically it was always pre-request authentication.\n", "created_at": "2011-04-17 17:11:06", "user": 18524, "id": 1017284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017290", "text": "Well, now that I think about it that statement wasn't true. It was a year ago, fuzzy memory. :p We were consuming our own API but not for authentication.\n\nIf I recall, we had both API authentication and web authentication. The API authentication worked over HTTPS so that tacks on even more overhead to each request. I think we would have been fine with a reduced cost for the sake of keeping the same model for both authentication schemes. As I pointed out earlier, even a cost of 2 for BCrypt is still stronger than SHA512.\n", "created_at": "2011-04-17 17:14:06", "user": 18524, "id": 1017290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017311", "text": "@bcardarella Use token-based authentication for API clients. Token-based authentication does not rely on cryptography, let alone intentionally slow cryptography, when checking authentication (except to use the `secure_compare` method). The initial request to obtain a token could then take an additional 90ms to check the password; subsequent requests could take 1us to check the token.\n", "created_at": "2011-04-17 17:22:25", "user": 169419, "id": 1017311}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017315", "text": "@yfeldblum I believe we did that, I don't have access to the code any more as I'm not at the DNC so I cannot say for certain.\n", "created_at": "2011-04-17 17:23:40", "user": 18524, "id": 1017315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017333", "text": "@yfeldblum, that's a good point. I don't think the right answer to 90ms is too slow to do per-request auth is to make less secure passwords. But rather to use a token based approach, ala OAuth as well.\n\nSo that shoots down the only reasonable argument I've been seeing for this option. Thus, we're back to no :)\n", "created_at": "2011-04-17 17:28:03", "user": 2741, "id": 1017333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017334", "text": "Oh, looks like the DNC open sourced the API stuff. Dear god, we were using SHA1. https://github.com/dnclabs/lockbox/blob/master/app/models/partner.rb#L158-160\n", "created_at": "2011-04-17 17:28:16", "user": 18524, "id": 1017334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017484", "text": "@dhh, Our mobile apps were using authentication (not necessarily client login) to authorize requests against a webservice API.  I dont still have our original test results lying around to give you, but each time you lower the work factor for BCrypt, the speed increases substantially.\n\nWe settled on a work factor of 8.  Provides strong enough encryption and a long enough brute-force cracking time that we were comfortable for our use case, but again, that will vary per project and user taste.\n\nAs I said, I dont have my original benchmarks, but my results follow what brian posted earlier.\n\nAlso, regarding just using token based auth for API's, that is all fine and good but doesnt always fly.  We, in fact, were using token auth, but due to the program specs, tokens expired after 24 hours which required re-auth to generate a new token.  This is actually quite common, to have token expiry.  (Think government contract apps with arcane, and sometimes pointless specs, that still need to be followed).\n", "created_at": "2011-04-17 18:20:53", "user": 863, "id": 1017484}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1018736", "text": "@dhh The primary reason bcrypt is good is because it has an adjustable cost factor making it future-proof. It's a good idea to expose the very thing that makes bcrypt good and tell people that this is what they should be doing _and this is why they should be doing it_. Even if it makes the API slightly more complex because there's an extra optional parameter, it's worth it for developers who deal with persisting user passwords to know _why_ bcrypt is a good choice. Having a `:cost` option will encourage developers to go out and learn about the offline dictionary attack and will therefore foster broader understanding about how the `:cost` in bcrypt guards against it. Leaving the `:cost` out of the ActiveModel API hides this important clue, discouraging people from learning about why the `:cost` is important. We should be educating developers about and pushing them to use MVC, REST, etc.,  - and security - by putting in sensible defaults that are easy to use but also putting in documented options to override the default when needed.\n\n@bcardarella Putting the userid into the cookie-stored session (in the signed cookie jar, of course) is token-based auth. Everyone's already using it for Web sessions.\n", "created_at": "2011-04-18 01:19:03", "user": 169419, "id": 1018736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1025067", "text": "I'm a little late to the discussion, but @bcardarella asked me on twitter to stop by so I figured I'd try to add something.\n\nI agree with @dhh that we should hold off adding a `:cost` option until it's needed. That may seem like this conflicts with what I said in the Authlogic bcrypt comment, but I don't think it does.\n\nFor the common case people are better off using the default cost, assuming it's a good default, which I believe 10 is (for now).\n\nFor the person who wants control and knows enough about how bcrypt works, there is still the `BCrypt::Engine::DEFAULT_COST` constant. I have adjusted it in the past, but tbh I'm probably more likely to decrease it so the specs run fast. I would probably only increment the cost if the default in bcrypt-ruby doesn't keep pace. The work to hash the password doubles for every increment, so it's fine as long as the default cost increments every 2 years.\n\nFrom an API design pov, I like the idea of putting a tiny barrier in place to setting the cost. It makes it more like that if someone does change the default they'll be doing it out of necessity and because they understand the trade-offs. Making it a bit \"ugly\" compared to other parts of the API underscores that it's something you should only set if you know what you're doing.\n\nSince there is still discussion on this I think we're better off leaving the option out and waiting for some real-world cases to arise that forces the API to change. It's really easy to add options to an API, but really hard to remove them later.\n", "created_at": "2011-04-19 04:44:36", "user": 133, "id": 1025067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1025111", "text": "We should just set the default cost to `Time.now.strftime('%Y')[1..-1].to_i` then it will scale as the years go by (starting with \"011\" [or, 11] this year) hitting the limit at the year 3000 when passwords will become immediately crackable!\n\n;-) ;-)\n", "created_at": "2011-04-19 05:08:04", "user": 10128, "id": 1025111}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2482862", "text": "Lowering BCrypt cost might be useful in test environment where you don't care about password security but do care about speed. I already do this in test_helper:\n\n```\nrequire \"bcrypt\"\nsilence_warnings do\n  BCrypt::Engine::DEFAULT_COST = BCrypt::Engine::MIN_COST\nend\n```\n\n(Gives a free 4 second boost in my case.) But I think this could be done by default.\n", "created_at": "2011-10-21 15:52:35", "user": 347921, "id": 2482862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3409108", "text": "Lowering the cost for tests seems like a worthwhile use case. Trying that and also seeing speedups.\n\nI agree with @dhh that low-level settings should only be exposed if necessary. In this case, I think a commented-out\n\n```\nconfig.active_model.secure_password.cost = :min_cost\n```\n\nin `config/environments/test.rb` might be a good idea. Or something like it. Maybe\n\n```\nconfig.active_model.secure_password.fast_instead_of_secure = true\n```\n\nto be very explicit.\n\nPossibly it should just be always-on in tests and not configurable. Seems like something that could bite you if it was always on, though I can't think of a specific such case.\n", "created_at": "2012-01-09 09:24:21", "user": 216, "id": 3409108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9294915", "text": "For what it's worth, decreasing the cost to 1 in the test environment reduced our test times by around 35% (from 0m35.390s to 0m22.965s). Regardless of whether or not the cost is completely configurable, I think it would be worth dropping the cost when `Rails.env == 'test'`.\n", "created_at": "2012-10-10 09:17:10", "user": 145, "id": 9294915}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9306611", "text": "+1 to decreasing cost in test env. That can be a builtin Rails initializer rather than a config option. Anyone up for cutting a new pull request?\n", "created_at": "2012-10-10 15:13:05", "user": 199, "id": 9306611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9358308", "text": "Initializers don't tend to use the environment, though... wouldn't it be better to put them in the env file?\n", "created_at": "2012-10-11 21:16:10", "user": 27786, "id": 9358308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10355097", "text": "I worked with @jeremy on this pull request after reviewing the comments here: https://github.com/rails/rails/pull/8216\n\nI'd :gift_heart: some :eyes: on it!\n", "created_at": "2012-11-14 04:41:02", "user": 402, "id": 10355097}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "\"Ruby 1.9.2: marshaling round-trips Time#zone\" 41e7c68d87903d0596228b6c1ae2c5d87b209280 broke round-tripping of fractional seconds when marshalling Time on Ruby 1.9.2.\n", "labels": [], "number": 286, "updated_at": "2014-07-03 03:53:36", "user": 83466, "closed_at": "2011-05-07 11:39:57", "id": 780221, "title": "Fix marshal round-tripping of fractional seconds (Time#subsec).", "url": "https://api.github.com/repos/rails/rails/issues/286", "created_at": "2011-04-17 11:23:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115101", "text": "This commit is Ruby 1.9 only. :( It will fail on Ruby 1.8.\n", "created_at": "2011-05-07 10:44:44", "user": 9582, "id": 1115101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115186", "text": "This code path wasn't hit when I ran it on REE 2011.03 (1.8.7p334). Everything passes here on both REE and 1.9.2p180.\n\nI can add `&& respond_to?(:subsec)` if you think it's needed. Is there an older Ruby version I should test against as well?\n", "created_at": "2011-05-07 11:29:44", "user": 83466, "id": 1115186}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115201", "text": "Right, that branch is executed in theory only on 1.9.2. I am merging.\n", "created_at": "2011-05-07 11:39:40", "user": 9582, "id": 1115201}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The identity map cache prevents us from seeing the DB formatted strings.\n", "labels": [], "number": 287, "updated_at": "2014-07-03 03:53:39", "user": 83466, "closed_at": "2011-04-17 18:59:40", "id": 780446, "title": "Bypass IdentityMap in PostgreSQL geometric tests.", "url": "https://api.github.com/repos/rails/rails/issues/287", "created_at": "2011-04-17 14:03:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1017580", "text": "Applied and pushed. Thank you.\n", "created_at": "2011-04-17 18:59:41", "user": 3124, "id": 1017580}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "File should be open in 'r+' mode to pass with jruby-1.6.1.\n\nTested with other ruby version as well.\n\nSolved LightHouse Ticket [#6662]\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6662-fileflock-cant-lock-read-only-file-for-exclusive-access\n\nJruby Change-log :-\n\nhttp://jira.codehaus.org/browse/JRUBY-5627\n", "labels": [], "number": 288, "updated_at": "2014-06-14 13:17:19", "user": 3948, "closed_at": "2011-04-18 16:08:54", "id": 783418, "title": "File should be open in read/write mode. When doing lock on a file.", "url": "https://api.github.com/repos/rails/rails/issues/288", "created_at": "2011-04-18 11:39:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1021856", "text": "Merged and pushed.  Thanks!\n", "created_at": "2011-04-18 16:08:54", "user": 3124, "id": 1021856}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey All,\n\nThis patch removes AS Json backends and instead relies on MultiJson for Json decoding.\n\nI have added the current rc of MultiJson to the AS gemspec as per Joshes advice, but this will be updated soon once I am sure MultiJson is ready for a 1.0.0 release.\n\nPlease let me know if you see any issues,\n\nThanks,\n\nJ\n", "labels": [], "number": 289, "updated_at": "2014-06-29 03:33:59", "user": 8701, "closed_at": "2011-04-19 14:45:49", "id": 788832, "title": "Use MultiJson for Json decoding", "url": "https://api.github.com/repos/rails/rails/issues/289", "created_at": "2011-04-19 14:40:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After rails/rails@6380f1a9f45e68f38480c0805cac62eb6708f72e from @josevalim, I had some problems when using flash.now in 2 requests in a row.\nHere is a test and an attempt for patching this issue.\n", "labels": [], "number": 290, "updated_at": "2014-06-17 19:22:15", "user": 12178, "closed_at": "2011-04-19 20:32:55", "id": 790060, "title": "Don't reuse a closed flash when using now", "url": "https://api.github.com/repos/rails/rails/issues/290", "created_at": "2011-04-19 18:17:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1028723", "text": "refs https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6725-dont-resuse-closed-flash-with-now\n", "created_at": "2011-04-19 19:11:01", "user": 12178, "id": 1028723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1029190", "text": "Merged, thanks.\n", "created_at": "2011-04-19 20:32:55", "user": 9582, "id": 1029190}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think this need.\n", "labels": [], "number": 291, "updated_at": "2014-07-03 03:53:53", "user": 3948, "closed_at": "2011-04-19 18:55:05", "id": 790203, "title": "Path also contain /images. ", "url": "https://api.github.com/repos/rails/rails/issues/291", "created_at": "2011-04-19 18:52:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1028651", "text": "It doesn't include /images. All assets are in a flat namespace when compiled.\n", "created_at": "2011-04-19 18:55:05", "user": 2741, "id": 1028651}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Try to use standard SI prefixes for number_to_human_size, instead of the ancient 1024-based ones which were being used.  Modern operating systems already do this, which results in a jarring mismatch between Rails' reported size and Mac OS'.\n\nThis particular version of the change may be controversial, but I believe in trying the simplest solution to the problem first, and this is the only solution which doesn't involve messing around with the options hash. :)\n", "labels": [], "number": 292, "updated_at": "2014-07-03 03:53:56", "user": 43236, "closed_at": "2011-04-28 12:53:12", "id": 799013, "title": "number_to_human_size and the modern era", "url": "https://api.github.com/repos/rails/rails/issues/292", "created_at": "2011-04-21 15:11:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1055342", "text": "A kilobyte is 1024 bytes, the reason that some vendors refer to a kilobyte by 1000 bytes is beyond my understanding (simplicity?)\n\nThere's no need for us not to be precise and refer to it at 1024 bytes.  What would be a far better alternative is to create an option to the hash which would allow it to use both bases of 1000 and 1024, with 1024 being the default, so this doesn't break someone's application with the change.\n", "created_at": "2011-04-25 21:59:07", "user": 435815, "id": 1055342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1056298", "text": "\"Some vendors\" call a kilobyte 1000 bytes because that is the standard.  A \"kibibyte\" is 1024 bytes.  Please don't fall under the same misconception as others.\n\nMore information: http://en.wikipedia.org/wiki/Binary_prefixes\n\nThis change won't \"break someone's application\" - it will fix their application.\n", "created_at": "2011-04-26 02:28:53", "user": 43236, "id": 1056298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1056443", "text": "\"Some vendors\": every known processor maker.\n", "created_at": "2011-04-26 03:18:23", "user": 473244, "id": 1056443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1056819", "text": "Yep.  Also every hard disk manufacturer.  But also Mac OS.  And also Ubuntu.\n\nWithout this change, I upload a 1 MB file to my Rails app and it tells me it received 977 KB.  As a user, I now wonder if it uploaded correctly.  (Plus, even if kilobytes were correct for 1024, the abbreviation for kilo- is 'k', not 'K'.  My patch fixed that too.)\n", "created_at": "2011-04-26 06:21:54", "user": 43236, "id": 1056819}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1056983", "text": "Hi guys.\nI tried to do similar thing, some time ago:\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6287-correct-size-units-in-number_to_human_size-helper\nUnfortunately there is no feedback from rails core team.\n", "created_at": "2011-04-26 07:16:50", "user": 10766, "id": 1056983}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1058159", "text": "Until computers no longer use binary, -1 a million times. In every OS, 1MB = 1024KB = 1048576B.\nEveryone uses the base 2 values except for hard drive manufacturers and OS X's Finder (but not the kernel).\n", "created_at": "2011-04-26 13:28:06", "user": 294954, "id": 1058159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1058310", "text": "If it says KB it is clear what it means, kB would be base 10 and kb would be a different unit of measure altogether.\nI find it amusing that engineers will tell you the 2% error involved in mixing them up doesn't usually matter, while people building web apps think it does. :)\n\nAlso while Ubuntu and Mac OS may mysteriously count bits by si rather than binary powers, isn't Windows still the dominant consumer OS?\n", "created_at": "2011-04-26 14:01:18", "user": 26158, "id": 1058310}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1058535", "text": "Since when did being dominant automatically mean being right?\n\nAnd since when is \"K\" ever a valid prefix for these units?\n", "created_at": "2011-04-26 14:42:27", "user": 43236, "id": 1058535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067349", "text": "I see several programs use binary prefixes nowadays, so they use base 2, but they refer to them as kibibytes (KiB) or mebibytes (MiB), etc. in stead. So 1 kB is 1000 bytes, but 1 KiB is 1024 bytes. People started to adopt this as early as 1998 (as per the Wikipedia article), but adoption has been slow. I think we should do one by default with an option to choose which one to use, maybe `:prefix => :binary` and `:prefix => :si`?\n", "created_at": "2011-04-27 23:36:32", "user": 24421, "id": 1067349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067860", "text": "Anyways:\n- Users have no idea what KiB is; \n- Fitting the file is more important than showing number correctness. \n- 90% of users are running Microsoft's products.\n\nIf you are pragmatic having 1KB = 1000 does not makes sense at this moment when 90% of users still understand 1KB as 1024 bytes.  Ext filesystem does use base 2 as an unit, it just converts before showing it to the user. Let's change the helper, after microsoft changes the way it displays file size numbers.\n", "created_at": "2011-04-28 02:38:27", "user": 473244, "id": 1067860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068114", "text": "Ext2 shouldn't be displaying anything to the user.  It's a filesystem.  If you mean ls, then there are multiple options to that tool:\n\n```\n$ ls -l 1MB \n-rw-r--r-- 1 trejkaz trejkaz 1000000 2011-04-26 12:33 1MB\n$ ls -lh 1MB \n-rw-r--r-- 1 trejkaz trejkaz 977K 2011-04-26 12:33 1MB\n$ ls -l --si 1MB \n-rw-r--r-- 1 trejkaz trejkaz 1.0M 2011-04-26 12:33 1MB\n```\n\nAs for user understanding, if no applications were to show it the right way, users would never discover the right way.  It's obviously up to applications to educate people on this, or everyone would keep doing it wrong (at least if we used eduardordm's logic.  Proper units have been in place on both Mac OS and Ubuntu for some time, and I don't remember any major backlash about that.)\n\nThat aside, there are really three options here:\n1. Use KiB, MiB, GiB and base 1024 (`:prefix => :binary`)\n2. Use kB, MB, GB and base 1000 (`:prefix => :si`)\n3. Use KB, MB, GB and base 1024 (`:prefix => :microsoft`)  (best name I can come up with, since most people seem to want to use them as the straw man for their argument about why anyone should be using this extremely outdated way of doing things.)\n", "created_at": "2011-04-28 04:09:21", "user": 43236, "id": 1068114}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The #substitute_at gets an ActiveRecord::ConnectionAdapters::Column in #insert to match replacement in #exec_query.\n\nAaron, I did not write a test for this because I am not sure if/how this behavior should be fleshed out. The idea is that when building the query in #exec_query and/or #exec_insert I need to know the active record column which I do get in those methods. However, I also need to know when I am asked to #substitue_at when the bind params are inserted. \n\nThis is critical for the SQL Server adapter since there are some columns (binary timestamp) that I really have to account for. I do realize that passing a string down is OK for this and I am OK with adhoc usage of not passing an AR column down. I just need to hand what rails is doing. BTW, I could not use the Arel attribute here because code like <code>column.relation.columns[...]</code> is deprecated in Arel and it seemed appropriate for rails to standardize on passing AR columns vs hacking Arel.\n", "labels": [], "number": 293, "updated_at": "2014-07-02 06:16:16", "user": 2381, "closed_at": "2011-04-22 16:16:04", "id": 802178, "title": "The #substitute_at gets an ActiveRecord::ConnectionAdapters::Column in #i", "url": "https://api.github.com/repos/rails/rails/issues/293", "created_at": "2011-04-22 12:05:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1043724", "text": "Gonna try something, if I mention @tenderlove, does it send you an email?\n", "created_at": "2011-04-22 12:37:11", "user": 2381, "id": 1043724}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044256", "text": "@metaskills I don't understand what you need.  :-(\n\nYou want the ARel attribute rather than the database column?\n", "created_at": "2011-04-22 15:37:04", "user": 3124, "id": 1044256}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044267", "text": "Ah wait, you need it the other way around.  The database column rather than the arel attribute.  Correct?  (sorry, I'm totally sleep dep'd right now and just want to make sure)\n", "created_at": "2011-04-22 15:40:28", "user": 3124, "id": 1044267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044291", "text": "This may illustrate the problem. Here is my #substitute_at and my #exec_query methods I am working on now.\n\n```\ndef substitute_at(column, index)\n  if column.is_a?(ActiveRecord::ConnectionAdapters::SQLServerColumn) && column.sql_type == 'timestamp'\n    nil\n  else\n    Arel.sql \"@#{index}\"\n  end\nend\n\ndef exec_query(sql, name = 'SQL', binds = [])\n  ...\n  binds.each_with_index do |(col,val),index|\n    next if col.sql_type == 'timestamp'\n    names_and_types << \"@#{index} #{col.sql_type_for_statement}\"\n    params << \"@#{index} = #{quote(val,col)}\"\n  end\n  ...\nend\n```\n\nI need ActiveRecord::Relation#insert to pass down an ActiveRecord::ConnectionAdapters::Column object to #substitute_at. My current use case is the timestamp data in SQL Server which is binary data. Do not confuse this with a real timestamp. It is allowed for users to read that binary data, but not write to it or include it in parameterized statements.\n", "created_at": "2011-04-22 15:47:32", "user": 2381, "id": 1044291}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044304", "text": "Yes! Correct to your last question!\n", "created_at": "2011-04-22 15:50:27", "user": 2381, "id": 1044304}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044313", "text": "Perfect, yes.  I will apply this.  We actually want the column for pg too (eventually).\n", "created_at": "2011-04-22 15:53:08", "user": 3124, "id": 1044313}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044317", "text": "How about this patch instead?\n\n```\ndiff --git a/activerecord/lib/active_record/relation.rb b/activerecord/lib/active_record/relation.rb\nindex 359f9d8..02f5b4b 100644\n--- a/activerecord/lib/active_record/relation.rb\n+++ b/activerecord/lib/active_record/relation.rb\n@@ -55,7 +55,7 @@ module ActiveRecord\n         [@klass.columns_hash[arel_attr.name], value]\n       end\n\n-      substitutes.each_with_index do |tuple, i|\n+      binds.each_with_index do |tuple, i|\n         tuple[1] = conn.substitute_at(tuple.first, i)\n       end\n```\n", "created_at": "2011-04-22 15:54:37", "user": 3124, "id": 1044317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044366", "text": "No, that appears to break core tests because iterating over the substitutions and in-place altering each one using tuple[1] is the desired behavior.\n", "created_at": "2011-04-22 16:08:51", "user": 2381, "id": 1044366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044399", "text": "right, right! Did I mention I'm sleep dep'd?  ;-)\n\nI've applied and pushed your patch.\n", "created_at": "2011-04-22 16:16:04", "user": 3124, "id": 1044399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044414", "text": "Thanks! BTW, your work on this prepared statement stuff is going to win big time! I cant wait to get some benchmarks after I get things green. I stopped working on other personal projects because this looked so interesting. Cheers!\n", "created_at": "2011-04-22 16:19:39", "user": 2381, "id": 1044414}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Aaron, just following up on moving this method to abstract adapter. Since as a 3rd party adapter developer, this was 100% of my failures when I first started work.\n", "labels": [], "number": 294, "updated_at": "2014-06-27 15:58:26", "user": 2381, "closed_at": "2011-04-22 12:27:52", "id": 802213, "title": "Move exec insert", "url": "https://api.github.com/repos/rails/rails/issues/294", "created_at": "2011-04-22 12:27:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Aaron, just following up on moving #exec_insert to the proper place in abstract adapter's database statements.\n", "labels": [], "number": 295, "updated_at": "2014-07-03 03:54:07", "user": 2381, "closed_at": "2011-04-22 14:42:32", "id": 802228, "title": "Move #exec_insert to abstract adapter's database statements.", "url": "https://api.github.com/repos/rails/rails/issues/295", "created_at": "2011-04-22 12:36:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1043725", "text": "Gonna try something, if I mention @tenderlove, does it send you an email?\n", "created_at": "2011-04-22 12:37:23", "user": 2381, "id": 1043725}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044016", "text": "@metaskills I get emails when any pull request is sent.  Now I have two emails. :-P\n", "created_at": "2011-04-22 14:31:49", "user": 3124, "id": 1044016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044038", "text": "Oh shame on me for top posting like that! :)\n", "created_at": "2011-04-22 14:38:35", "user": 2381, "id": 1044038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044060", "text": "Applied, thanks!\n", "created_at": "2011-04-22 14:42:32", "user": 3124, "id": 1044060}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@dhh i think we need this.\n\nAt least we need this to pass the test \n\ntest_simple_controller_in_production_mode_returns_best_standards(ApplicationTests::BestPracticesTest):\nActiveSupport::Testing::RemoteError: caught LoadError: no such file to load -- uglifier\n", "labels": [], "number": 296, "updated_at": "2014-07-03 03:54:11", "user": 3948, "closed_at": "2011-04-22 18:25:20", "id": 803097, "title": "Adding uglifier gem to Gemfile. It's a default.", "url": "https://api.github.com/repos/rails/rails/issues/296", "created_at": "2011-04-22 18:01:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044931", "text": "Looks like this was fixed in bb6b1721, so I'm closing this.\n", "created_at": "2011-04-22 18:25:20", "user": 3124, "id": 1044931}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed failing tests \n1. test_skeleton_is_created(AppGeneratorTest)\n2. test_builder_option_with_tweak_plugin_builder(CustomAppGeneratorTest)\n", "labels": [], "number": 297, "updated_at": "2014-07-03 03:54:13", "user": 3948, "closed_at": "2011-04-22 18:24:25", "id": 803154, "title": "Images path fixed in test.", "url": "https://api.github.com/repos/rails/rails/issues/297", "created_at": "2011-04-22 18:18:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1044924", "text": "Pulled in, thank you.\n", "created_at": "2011-04-22 18:24:25", "user": 3124, "id": 1044924}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 298, "updated_at": "2014-07-03 03:54:16", "user": 3948, "closed_at": "2011-04-22 20:26:47", "id": 803230, "title": "Fixed images path in plugin_new_generator", "url": "https://api.github.com/repos/rails/rails/issues/298", "created_at": "2011-04-22 18:41:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1045436", "text": "Closing this. As accepted here d42e43b3e50efdcd7511\n", "created_at": "2011-04-22 20:26:47", "user": 3948, "id": 1045436}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently ActionController::RoutingError message will alert the user of a bad path but not the method.\n\n```\nNo route matches \"/join\"\n```\n\nThis patch adds the method used to call the url for debugging. \n\n```\nNo route matches [POST] \"/join\"\n```\n\nBy showing the method used, certain routing problems are easier to find, especially for a new rails user who is not as familliar with restful routing. \n", "labels": [], "number": 299, "updated_at": "2014-06-13 21:05:55", "user": 59744, "closed_at": "2011-04-22 19:41:02", "id": 803277, "title": "Add http method to RoutingError message ", "url": "https://api.github.com/repos/rails/rails/issues/299", "created_at": "2011-04-22 18:54:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1045093", "text": "+1\nEvery now and then, this will trip me up. I'll be all \"no way, I totally defined tha‚Äîoh, I'm dumb\", except this internal monologue will transpire over, like, 20 minutes.\n", "created_at": "2011-04-22 19:02:34", "user": 7659, "id": 1045093}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1045254", "text": "Applied, thanks!\n", "created_at": "2011-04-22 19:41:02", "user": 3124, "id": 1045254}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think we need to start adding this support.\n\nThis full support need lot's more commits :-)\n", "labels": [], "number": 300, "updated_at": "2014-06-27 18:53:15", "user": 3948, "closed_at": "2011-04-25 16:30:42", "id": 803586, "title": "Start Adding jdbcmysql support to new rails template.", "url": "https://api.github.com/repos/rails/rails/issues/300", "created_at": "2011-04-22 20:22:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1045536", "text": "Seems like Jruby template is comming with new rails version.\n", "created_at": "2011-04-22 20:45:57", "user": 111473, "id": 1045536}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1045866", "text": "Summoning @tenderlove.\n", "created_at": "2011-04-22 22:14:46", "user": 9582, "id": 1045866}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1045983", "text": "Seems fine to me. I'll merge when I get to my machine, or you can merge.\n\n## \n\nAaron Patterson\nhttp://tenderlovemaking.com/\n\nOn Apr 22, 2011, at 5:14 PM, josevalimreply@reply.github.com wrote:\n\n> Summoning @tenderlove.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/300#issuecomment-1045866\n", "created_at": "2011-04-22 22:53:01", "user": 3124, "id": 1045983}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1046058", "text": "Only jdbcmysql? What about all the others:\n\nhttps://github.com/nicksieger/activerecord-jdbc-adapter\n", "created_at": "2011-04-22 23:17:08", "user": 102009, "id": 1046058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1046082", "text": "@atambo they are in queue. Will come for sure. :-)\n", "created_at": "2011-04-22 23:28:07", "user": 3948, "id": 1046082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1053506", "text": "@tenderlove If we can apply these changes. Then we can come up with more changes for JDBC databases.\n", "created_at": "2011-04-25 16:17:53", "user": 3948, "id": 1053506}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1053566", "text": "Should be merged, so closing.\n", "created_at": "2011-04-25 16:30:42", "user": 3124, "id": 1053566}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059883", "text": "I'm fine with these jdbc\\* adapters present but do note that the non-jdbc names work fine too as long as you have activerecord-jdbc-adapter in Gemfile. In fact, what we need is to modify Gemfile to include ar-jdbc when you select jdbc\\* for \"rails new\". [Like this](http://jruby.org/templates/default.rb). \n", "created_at": "2011-04-26 18:35:24", "user": 154, "id": 1059883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059914", "text": "@nicksieger we are just adding an option to generate the templates over here. \n\nrails new -d jdbcmysql \n\nWill do database.yml changes and Gemfile changes.\n\nIf we use the non-jdbc names then we need to pass some extra args here.\n\nAfter running with jdbc\\* we are fixing database.rake to create, drop and etc database operation.\n", "created_at": "2011-04-26 18:44:34", "user": 3948, "id": 1059914}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This has been done per @dhh request.\n", "labels": [], "number": 301, "updated_at": "2014-06-27 15:58:35", "user": 4912, "closed_at": "2011-04-27 15:03:47", "id": 807181, "title": "Add `app/assets/images` directory to plugin new generator", "url": "https://api.github.com/repos/rails/rails/issues/301", "created_at": "2011-04-24 12:00:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1049784", "text": "Sweet! Prem, do you mind providing another commit that cleans up all \"full? || mountable?\" clauses? All mountable engines are full, that is even reflected in the code:\n\nhttps://github.com/sikachu/rails/blob/d2b5f399830fa14abfe5454b3c57ea982ea45d6d/railties/lib/rails/generators/rails/plugin_new/plugin_new_generator.rb#L251\n", "created_at": "2011-04-24 12:11:42", "user": 9582, "id": 1049784}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1049791", "text": "Sure thing. Hold on\n", "created_at": "2011-04-24 12:18:51", "user": 4912, "id": 1049791}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1049795", "text": "Done :)\n", "created_at": "2011-04-24 12:23:53", "user": 4912, "id": 1049795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064767", "text": "This has been applied\n", "created_at": "2011-04-27 15:03:47", "user": 4912, "id": 1064767}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Aaron, following up from our email exchange.\nArel has logic that does not include columns for an insert statement if they are empty.¬†\n\n  ¬†¬†def visit_Arel_Nodes_InsertStatement o\n  ¬† ¬† [ \"INSERT INTO #{visit o.relation}\",\n  ¬† ¬† ¬† ( \"(#{o.columns.map { |x|\n  ¬† ¬† ¬† quote_column_name x.name\n  ¬† ¬† }.join ', '})\" unless o.columns.empty?),\n  ¬† ¬† ¬† (visit o.values if o.values),\n  ¬† ¬† ].compact.join ' '\n  ¬† end\n\nThe SQL Server adapter defines the older #empty_insert_statement_value method as such. This is because there is no such thing as \"VALUES(DEFAULT)\" that would work.\n\n  ¬†¬†def empty_insert_statement_value\n  ¬† ¬† \"DEFAULT VALUES\"\n  ¬† end\n\nIn the latest version of rails we are no longer using this but #null_insert_value instead and AR is hooking into it from ActiveRecord::Relation#insert like so.\n\n  ¬†¬†if values.empty? # empty insert\n  ¬† ¬† im.values = im.create_values [connection.null_insert_value], []\n  ¬† else\n  ¬† ¬† im.insert substitutes\n  ¬† end\n\nThis gives no one a chance to construct something like #empty_insert_statement_value for the SQLServerAdapter. We should utilize the existing #empty_insert_statement_value instead which seems more inline with Arel's InsertManager too.\n", "labels": [], "number": 302, "updated_at": "2014-07-03 03:54:29", "user": 2381, "closed_at": "2011-04-25 16:30:19", "id": 807632, "title": "Use existing #empty_insert_statement_value for an insert with no columns.", "url": "https://api.github.com/repos/rails/rails/issues/302", "created_at": "2011-04-24 16:57:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1053563", "text": "should be merged, so closing.\n", "created_at": "2011-04-25 16:30:19", "user": 3124, "id": 1053563}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://nex-3.com/posts/104-haml-and-sass-3-1-are-released\n", "labels": [], "number": 303, "updated_at": "2014-06-28 16:38:55", "user": 160941, "closed_at": "2011-04-25 13:00:05", "id": 808430, "title": "Sass 3.1.0 is out, removing Sass alpha version from default Gemfile", "url": "https://api.github.com/repos/rails/rails/issues/303", "created_at": "2011-04-25 01:22:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1052819", "text": "Already done by @dhh, closing this.\n", "created_at": "2011-04-25 13:00:05", "user": 160941, "id": 1052819}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When using jdbcmysql running db:create gives error \"uninitialized constant Mysql::Error\"\n\nFix is to add a error class for JdbcMsql right now. We will remove ArJdbcMySQL::Error when it will come with activerecord-jdbc-adapter\n\nLightHouse issue report before by me : https://rails.lighthouseapp.com/projects/8994/tickets/6628-uninitialized-constant-mysqlerror\n\nresolved [#6628] \n", "labels": [], "number": 304, "updated_at": "2014-07-03 03:54:35", "user": 3948, "closed_at": "2011-04-25 19:30:49", "id": 810479, "title": "Fixed error when running db:create with jdbcmysql", "url": "https://api.github.com/repos/rails/rails/issues/304", "created_at": "2011-04-25 17:53:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1054557", "text": "Closing this as accepted here 12427c8dea1e817d7badc06f1f21af989c0f56ea \n", "created_at": "2011-04-25 19:30:49", "user": 3948, "id": 1054557}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "the title pretty much says it all :)\n", "labels": [], "number": 305, "updated_at": "2014-06-22 20:07:25", "user": 8701, "closed_at": "2011-04-25 20:59:49", "id": 810494, "title": "bump AS deprecation_horizon to 3.2", "url": "https://api.github.com/repos/rails/rails/issues/305", "created_at": "2011-04-25 17:57:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It can result in wrong results if values contain special % or _ characters. It is safer to use SQL LOWER function and compare for equality.\n", "labels": [], "number": 306, "updated_at": "2014-06-18 00:03:21", "user": 4736, "closed_at": "2011-04-26 10:12:23", "id": 810851, "title": "Do not use SQL LIKE operator for case insensitive uniqueness validation", "url": "https://api.github.com/repos/rails/rails/issues/306", "created_at": "2011-04-25 19:20:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "All major three done and tested (mysql, sqlite3, postgresql)\n\nThanks :-)\n", "labels": [], "number": 307, "updated_at": "2014-07-02 08:19:06", "user": 3948, "closed_at": "2011-04-26 17:33:02", "id": 810924, "title": "jdbcpostgresql support added into template.", "url": "https://api.github.com/repos/rails/rails/issues/307", "created_at": "2011-04-25 19:34:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059538", "text": "Should be merged now.  Thanks!\n", "created_at": "2011-04-26 17:33:02", "user": 3124, "id": 1059538}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis follows on from the assign_attributes work.\n\nThe guard_protected_attributes argument with attributes= is now deprecated as per discussions with @josevalim and @dhh.\n\nThanks,\n\nJ\n", "labels": [], "number": 308, "updated_at": "2014-06-30 14:43:37", "user": 8701, "closed_at": "2011-04-26 10:12:25", "id": 811040, "title": "deprecated the use of guard_protected_attributes with attributes= in AR", "url": "https://api.github.com/repos/rails/rails/issues/308", "created_at": "2011-04-25 20:07:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using Sass latest in rails Gemfile also.\n\nhttps://github.com/rails/rails/commit/723a0f82c48e4aa7987c6ccf653b4e543a0d3715\n", "labels": [], "number": 309, "updated_at": "2014-07-03 03:54:52", "user": 3948, "closed_at": "2011-04-25 22:32:32", "id": 811425, "title": "Using sass directly as new version is out.", "url": "https://api.github.com/repos/rails/rails/issues/309", "created_at": "2011-04-25 21:28:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1055546", "text": "Merged, thanks!\n", "created_at": "2011-04-25 22:32:33", "user": 3124, "id": 1055546}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Applied Patch from https://rails.lighthouseapp.com/projects/8994/tickets/5577-suport-from-tsvector-data-type-in-postgresql\n", "labels": [], "number": 310, "updated_at": "2014-07-03 03:54:55", "user": 29251, "closed_at": "2011-04-26 17:43:39", "id": 814069, "title": "Added support for tsvector datatype in postgres", "url": "https://api.github.com/repos/rails/rails/issues/310", "created_at": "2011-04-26 10:53:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis brings AR update_attributes in line with assign_attributes in accepting a scope using :as or bypass mass-assignment security using :without_protection => true\n\nThanks,\n\nJ\n", "labels": [], "number": 311, "updated_at": "2014-07-03 03:55:00", "user": 8701, "closed_at": "2011-04-26 17:33:52", "id": 815317, "title": "AR update_attributes api is updated to reflect the addition of assign_att", "url": "https://api.github.com/repos/rails/rails/issues/311", "created_at": "2011-04-26 16:05:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059507", "text": "Merged, thanks!\n", "created_at": "2011-04-26 17:27:30", "user": 3124, "id": 1059507}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059513", "text": "Or maybe not merged! I am confused!\n", "created_at": "2011-04-26 17:28:11", "user": 3124, "id": 1059513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059523", "text": "its merged, its in the commits list :)\n\nfor some reason GH doesn't close pull requests automagically :(\n", "created_at": "2011-04-26 17:29:59", "user": 8701, "id": 1059523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059544", "text": "Ok.  I'll close this.  Thanks for verifying!\n", "created_at": "2011-04-26 17:33:52", "user": 3124, "id": 1059544}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 312, "updated_at": "2014-07-03 03:55:04", "user": 8701, "closed_at": "2011-04-26 16:09:30", "id": 815322, "title": "bump multi_json dependency", "url": "https://api.github.com/repos/rails/rails/issues/312", "created_at": "2011-04-26 16:06:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nPlease see the lighthouse ticket I submitted for details on this patch request:\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6748\n\nA Rails contributer, @sferik, suggested I also submit a pull request.\n\nDoes this change look OK?  Your time and feedback are appreciated.\n\nThanks,\nChad\n", "labels": [], "number": 313, "updated_at": "2014-06-16 00:17:19", "user": 349501, "closed_at": "2011-04-27 12:52:43", "id": 815744, "title": "[patch] Asset helpers should understand scheme-relative URLs", "url": "https://api.github.com/repos/rails/rails/issues/313", "created_at": "2011-04-26 17:48:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059780", "text": "Merge is_uri? and is_scheme_independent_uri?. The former should include a check for the latter. Need not be a separate method call. \"//g.com\" is an uri.\n", "created_at": "2011-04-26 18:16:59", "user": 2741, "id": 1059780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059978", "text": "Thanks for the feedback.  I've made the change.\n", "created_at": "2011-04-26 18:54:10", "user": 349501, "id": 1059978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064032", "text": "Applied.\n", "created_at": "2011-04-27 12:52:43", "user": 2741, "id": 1064032}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes formatting on #update_attributes docs, introduced in this commit: https://github.com/rails/rails/commit/8111facdb4d98ad9fce0892a68f790e32aa27002\n", "labels": [], "number": 314, "updated_at": "2014-07-03 03:55:10", "user": 83449, "closed_at": "2011-04-26 18:08:34", "id": 815844, "title": "Fix #update_attributes api format error", "url": "https://api.github.com/repos/rails/rails/issues/314", "created_at": "2011-04-26 18:02:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1059734", "text": "Should be merged.  Thanks!\n", "created_at": "2011-04-26 18:08:34", "user": 3124, "id": 1059734}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The +name+ argument on the #columns method is useless, no implementation of this method makes use of it.\nI removed the argument since it only creates confusion.\n", "labels": [], "number": 315, "updated_at": "2014-07-03 03:55:13", "user": 83449, "closed_at": "2011-04-28 13:18:41", "id": 815986, "title": "Remove useless argument", "url": "https://api.github.com/repos/rails/rails/issues/315", "created_at": "2011-04-26 18:35:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067282", "text": "SQLite3 tests still pass, I can't see why this would be a problem if they aren't really used.\n", "created_at": "2011-04-27 23:19:37", "user": 24421, "id": 1067282}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1069727", "text": "I'm closing this pull request since somehow got dirty.\nOpened a new one here: https://github.com/rails/rails/pull/338\n", "created_at": "2011-04-28 13:18:41", "user": 83449, "id": 1069727}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Changes in database.rake file\n", "labels": [], "number": 316, "updated_at": "2014-07-03 03:55:19", "user": 3948, "closed_at": "2011-05-01 17:53:47", "id": 816202, "title": "Re-factored database.rake to allow Jdbcpostgresql. #jruby", "url": "https://api.github.com/repos/rails/rails/issues/316", "created_at": "2011-04-26 19:29:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1063194", "text": "Updated task for  jdbcsqlite3 \n", "created_at": "2011-04-27 08:49:03", "user": 3948, "id": 1063194}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1070906", "text": "@tenderlove you may like to see this commit. All the database operation with JDBC\\* is completed now.\n", "created_at": "2011-04-28 17:18:44", "user": 3948, "id": 1070906}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1083424", "text": "@tenderlove if we are planing JDBC\\* templates in rails 3.1 then these commits are required to run database tasks for those.\n", "created_at": "2011-05-01 15:17:45", "user": 3948, "id": 1083424}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Copied from https://github.com/rails/rails/pull/282, re-created the pull-request just to clean up the commit range.\n\nRight now `Array#from` will return `nil` if the index passed in is outside the bounds of the array, which is inconsistent with all other returns (including `%().from(0)`, which is technically outside the bounds of the array), and so using `Array#from`  we'll have to do things like\n\n```\nunless %(a, b, c, d).from(5).nil?\n   # ... do something here\nend\n```\n\nThis commit will change it so that all return values of `Array#from` are an array.\n\nTests and documentation update included.\n\nI ran benchmarks using the following:\n\n```\nrequire 'benchmark'\n\nclass Array\n\n  def from(position)\n    self[position..-1]\n  end\n\n  def new_from(position)\n    position > length ? [] : self[position..-1]\n  end\n\nend\n\narray = (1..10).to_a\nn = 200_000\n\nBenchmark.bm(3) do |x|\n  x.report(\"1:\") { n.times { array.from(1) } }\n  x.report(\"2:\") { n.times { array.new_from(1) } }\n  x.report(\"3:\") { n.times { array.from(100001) } }\n  x.report(\"4:\") { n.times { array.new_from(100001) } }\nend\n```\n\nAnd got\n\n```\n         user     system      total        real\n1:   0.360000   0.000000   0.360000 (  0.362778)\n2:   0.400000   0.000000   0.400000 (  0.396071)\n3:   0.320000   0.010000   0.330000 (  0.337338)\n4:   0.170000   0.000000   0.170000 (  0.161635)\n```\n\nWhich is a 8% increase on calls that go through and a 50% decrease when a call is outside the arrays range.\n\nIf I increased the array size to 100,000 items, it became a 10% increase in time.\n", "labels": [], "number": 317, "updated_at": "2014-07-03 03:55:25", "user": 14482, "closed_at": "2011-04-27 12:52:09", "id": 816867, "title": "Change Array#from to return consistent results", "url": "https://api.github.com/repos/rails/rails/issues/317", "created_at": "2011-04-26 21:49:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061081", "text": "How about this implementation?\n\n```\ndef o_O(position)\n  self[position, length]\nend\n```\n", "created_at": "2011-04-26 22:01:02", "user": 3124, "id": 1061081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061114", "text": "That returns nil when out of bounds:\n\n```\n%w( a b c d )[10, 4]\n=> nil\n```\n", "created_at": "2011-04-26 22:09:28", "user": 14482, "id": 1061114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061193", "text": "```\nrequire 'benchmark'\n\nclass Array\n\n  def from(position)\n    self[position..-1]\n  end\n\n  def new_from(position)\n    position > length ? [] : self[position..-1]\n  end\n\n  def o_O(position)\n    self[position, length] || []\n  end\n\nend\n\narray = (1..10).to_a\nn = 200_000\n\nBenchmark.bm(3) do |x|\n  x.report(\"1:\") { n.times { array.from(1) } }\n  x.report(\"2:\") { n.times { array.new_from(1) } }\n  x.report(\"3:\") { n.times { array.from(100001) } }\n  x.report(\"4:\") { n.times { array.new_from(100001) } }\n  x.report(\"5\") { n.times { array.o_O(1) } }\n  x.report(\"6:\") { n.times { array.o_O(100001) } }\nend\n```\n\n```\n[aaron@higgins ~]$ ruby -v test.rb\nruby 1.8.7 (2009-06-12 patchlevel 174) [universal-darwin10.0]\n         user     system      total        real\n1:   0.480000   0.000000   0.480000 (  0.476728)\n2:   0.540000   0.000000   0.540000 (  0.546056)\n3:   0.460000   0.010000   0.470000 (  0.464063)\n4:   0.210000   0.000000   0.210000 (  0.210997)\n5    0.160000   0.000000   0.160000 (  0.172786)\n6:   0.210000   0.000000   0.210000 (  0.208553)\n[aaron@higgins ~]$ export PATH=$HOME/.local/bin:$PATH \n[aaron@higgins ~]$ ruby -v test.rb\nruby 1.9.3dev (2011-04-27 trunk 31363) [x86_64-darwin10.7.0]\n         user     system      total        real\n1:   0.120000   0.000000   0.120000 (  0.122811)\n2:   0.140000   0.000000   0.140000 (  0.139053)\n3:   0.100000   0.010000   0.110000 (  0.099094)\n4:   0.070000   0.000000   0.070000 (  0.074968)\n5    0.090000   0.000000   0.090000 (  0.101647)\n6:   0.090000   0.000000   0.090000 (  0.089611)\n[aaron@higgins ~]$\n```\n", "created_at": "2011-04-26 22:22:52", "user": 3124, "id": 1061193}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061310", "text": "Awesome! I hadn't considered the `||` operator.  I don't have 1.9.3, but ran the following tests:\n\n```\nrequire 'benchmark'\n\nclass Array\n\n  def from(position)\n    self[position..-1]\n  end\n\n  def new_from(position)\n    position > length ? [] : self[position..-1]\n  end\n\n  def o_O(position)\n    self[position, length] || []\n  end\n\n  def o_o(position)\n    self[position..-1] || []\n  end\n\nend\n\narray = (1..10).to_a\nn = 200_000\n\nBenchmark.bm(10) do |x|\n  x.report(\"original:\") { n.times { array.from(1) } }\n  x.report(\"new:\") { n.times { array.new_from(1) } }\n  x.report(\"o_0:\") { n.times { array.o_O(1) } }\n  x.report(\"o_o:\") { n.times { array.o_o(1) } } \n  x.report(\"original:\") { n.times { array.from(100001) } }\n  x.report(\"new:\") { n.times { array.new_from(100001) } }\n  x.report(\"o_0:\") { n.times { array.o_O(100001) } }\n  x.report(\"o_o:\") { n.times { array.o_o(100001) } }\nend\n\nUsing /Users/jared/.rvm/gems/ruby-1.8.7-p334\n[jared@Adam-Smith:~/Desktop]$ ruby benchmark.rb \n                user     system      total        real\noriginal:   0.310000   0.000000   0.310000 (  0.312707)\nnew:        0.360000   0.000000   0.360000 (  0.356249)\no_0:        0.090000   0.000000   0.090000 (  0.098406)\no_o:        0.320000   0.000000   0.320000 (  0.315592)\noriginal:   0.280000   0.010000   0.290000 (  0.293083)\nnew:        0.130000   0.000000   0.130000 (  0.130636)\no_0:        0.120000   0.000000   0.120000 (  0.126168)\no_o:        0.340000   0.010000   0.350000 (  0.347090)\n[jared@Adam-Smith:~/Desktop]$ rvm use 1.9.2\nUsing /Users/jared/.rvm/gems/ruby-1.9.2-p180\n[jared@Adam-Smith:~/Desktop]$ ruby benchmark.rb \n                user     system      total        real\noriginal:   0.080000   0.000000   0.080000 (  0.086011)\nnew:        0.100000   0.000000   0.100000 (  0.095259)\no_0:        0.050000   0.000000   0.050000 (  0.057623)\no_o:        0.090000   0.000000   0.090000 (  0.082015)\noriginal:   0.060000   0.000000   0.060000 (  0.062950)\nnew:        0.040000   0.000000   0.040000 (  0.045171)\no_0:        0.060000   0.000000   0.060000 (  0.057293)\no_o:        0.080000   0.000000   0.080000 (  0.073892)\n```\n\nSo I'm going to change my proposed commit to use your suggested implementation.\n", "created_at": "2011-04-26 22:45:10", "user": 14482, "id": 1061310}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064029", "text": "Applied. Thanks!\n", "created_at": "2011-04-27 12:52:10", "user": 2741, "id": 1064029}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1065192", "text": "@jaredonline just a quick note about why my implementation is faster:\n\nWhen we do the `..` form, we're actually creating a range object that we send to the `Array#[]` operator.  That operator then has to turn around and get the limits for the operator (possibly two method calls).  Then our newly created range object is thrown away and left for the GC to clean up.\n\nWith my implementation, we call one method (`Array#length`) and pass that along with the start of the range to `Array#[]`.  If `Array#[]` returns nil, we create a new array object.  This implementation requires fewer method calls and is nicer to the GC as we don't create extra objects.\n\nTMYK!  :-D\n\n<3<3<3<3<3\n", "created_at": "2011-04-27 16:16:07", "user": 3124, "id": 1065192}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis was due to a string column limit which doesn't cause issues on sqlite, sorry.\n\nJosh\n", "labels": [], "number": 318, "updated_at": "2014-06-13 01:45:43", "user": 8701, "closed_at": "2011-04-27 00:13:56", "id": 817051, "title": "fix mass-assignment security tests", "url": "https://api.github.com/repos/rails/rails/issues/318", "created_at": "2011-04-26 22:30:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1061669", "text": "I applied this, but GH didn't close it for me.  :-(\n", "created_at": "2011-04-27 00:13:56", "user": 3124, "id": 1061669}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ditto\n", "labels": [], "number": 319, "updated_at": "2014-07-03 03:55:33", "user": 17791, "closed_at": "2011-04-26 23:33:34", "id": 817239, "title": "Fixed minor typo in comment", "url": "https://api.github.com/repos/rails/rails/issues/319", "created_at": "2011-04-26 23:17:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "since Duration inherits from ::BasicObject when using Ruby 1.9, send and try aren't implemented so they're delegated to the Integer value by method_missing.  This causes unexpected behavior:\n\n```\nd = 1.day\nd.inspect                #=> \"1 day\"\nd.try(:inspect) || \"N/A\" #=> \"86400\"\n# ^^^ standard null checking goes pear-shaped\n```\n", "labels": ["activesupport"], "number": 320, "updated_at": "2014-07-03 03:55:35", "user": 40791, "closed_at": "2012-04-29 17:37:57", "id": 817821, "title": "implement AS::Duration#send and #try to avoid unexpected behavior", "url": "https://api.github.com/repos/rails/rails/issues/320", "created_at": "2011-04-27 02:49:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067172", "text": "The code you submitted for `try` is not compliant with what `try` is supposed to do though (prevent whiny nils). Also, is there a reason why `Duration` inherits from `BasicObject` and not `Object`?\n", "created_at": "2011-04-27 22:53:38", "user": 24421, "id": 1067172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067529", "text": "The commit won't affect NilClass#try at all, so it won't change how try \"prevents whiny nils\".\n\nThat is a good point about Duration's superclass, though.  It's not clear to me why it inherits from BasicObject in the first place.  Does anyone here on the Githubs know why that is?\n", "created_at": "2011-04-28 00:44:03", "user": 40791, "id": 1067529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068005", "text": "Doi, I had a brain fart there about `NilClass#try`. You're absolutely right, this is the expected way of doing `try`. To make it even better, is there a way you can just mix in the `try` and `send` from `Object`? That way you don't have to update it in two places if it changes (which might not be that plausible at all).\n", "created_at": "2011-04-28 03:27:34", "user": 24421, "id": 1068005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068019", "text": "Turns out making Duration simply inherit from Object fixes all the worlds problems.  Thanks for questioning that @dvyjones\n\nI made a new pull request here:\nhttps://github.com/rails/rails/pull/334\n", "created_at": "2011-04-28 03:34:28", "user": 40791, "id": 1068019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377577", "text": "Reopen after some discussion in #334\n\nTurned out that making it inherited from Object actually have more side effect than we want. So, @misfo if you would please rebase your patch, and make it as a module that we can reuse it later, that would be awesome.\n\nThank you for the hard work. I'm target this one for 3.2.x\n", "created_at": "2011-06-15 23:13:25", "user": 4912, "id": 1377577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1382008", "text": "Sure will. Thanks for taking a look at this. I'll comment on this pull when I've created a new one...\n", "created_at": "2011-06-16 15:48:04", "user": 40791, "id": 1382008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334937", "text": "Ping. Did you make progress on this?\n", "created_at": "2011-10-09 02:48:21", "user": 199, "id": 2334937}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2361467", "text": "@jeremy, I looked at this again and I still think `Duration` should subclass `Object` as it did in the other pull.  `Duration#tap` doesn't work as expected either when `ActiveSupport::BasicObject` is subclassed:\n\n```\nirb> 1.days.is_a?(ActiveSupport::Duration)\n=> true\nirb> 1.days.tap {|d| puts d.is_a?(ActiveSupport::Duration) }\nfalse\n=> 86400\nirb> 1.days.tap {|d| d }.is_a?(ActiveSupport::Duration)\n=> false\n```\n\nI understand that `Duration` should proxy a lot of its methods to its `@value`, but doesn't it make more sense to explicitly delegate the methods in `Object.instance_methods - ActiveSupport::BasicObject.instance_methods` that we want proxied.  That way everything we want to be proxied is, but basic assumptions about `try`, `send`, `tap`, etc aren't violated.\n", "created_at": "2011-10-11 13:47:27", "user": 40791, "id": 2361467}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2366071", "text": "As a proxy, it's clearer to be explicit about what we _don't_ want to be proxied, rather than what we do. It's easier to maintain, too.\n\nThis could be a good case for a better supporting class, like `ActiveSupport::ProxyObject`, though.\n", "created_at": "2011-10-11 16:08:47", "user": 199, "id": 2366071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4214970", "text": "@jeremy I was looking into this and it seems `ActiveSupport::BasicObject` (which `ActiveSupport::Duration` inherits from) is used only for Duration and an active resource spec. Also `BasicObjects` docs says \"Used for proxy classes\". Would be the case of renaming it into ProxyObject and placing `send` and `try` in there?\n\nOr do you prefer `Duration < ProxyObject < BasicObject`?\n\nWould be happy to provide a patch.\n\n/cc @josevalim \n", "created_at": "2012-02-28 12:46:03", "user": 78422, "id": 4214970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398001", "text": "Is this still an issue @misfo?\n", "created_at": "2012-04-28 16:31:15", "user": 651597, "id": 5398001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5406590", "text": "Yup, it's still an issue. I made another pull request that resolves @jeremy's concerns, though. It uses an Array of methods inherited from `Object` that we _don't_ wanna proxy, but avoids reimplementing methods from `Object` like this pull does. Check it out: #6055\n", "created_at": "2012-04-29 17:04:36", "user": 40791, "id": 5406590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5406867", "text": "Is this okay to close?\n", "created_at": "2012-04-29 17:33:55", "user": 651597, "id": 5406867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5406901", "text": "Surely\n", "created_at": "2012-04-29 17:37:57", "user": 40791, "id": 5406901}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since new version of execjs(0.3.0) is released. we can enable uglifier gem  \n", "labels": [], "number": 321, "updated_at": "2014-07-03 03:55:39", "user": 160764, "closed_at": "2011-04-27 12:50:52", "id": 819165, "title": "enabling uglifier gem ", "url": "https://api.github.com/repos/rails/rails/issues/321", "created_at": "2011-04-27 11:17:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064022", "text": "Applied.\n", "created_at": "2011-04-27 12:50:53", "user": 2741, "id": 1064022}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Stop extra tags in form_for constructed forms from potentially affecting the layout of the form in browsers (can cause a space due to the display:inline box).\n", "labels": [], "number": 322, "updated_at": "2014-07-03 03:55:41", "user": 52501, "closed_at": "2011-04-27 14:43:25", "id": 819746, "title": "form_for extra tags formatting fix in form_tag_helper.rb", "url": "https://api.github.com/repos/rails/rails/issues/322", "created_at": "2011-04-27 13:56:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064366", "text": "I seem to remember that we had a problem in the past with those fields not being submitted unless it was inline vs none. Maybe someone can figure out what the story was there.\n", "created_at": "2011-04-27 14:01:41", "user": 2741, "id": 1064366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064591", "text": "It was exactly what you said. They were not sent by some browsers when display:none was used.\n", "created_at": "2011-04-27 14:43:25", "user": 9582, "id": 1064591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1065016", "text": "That's a shame. Cheers for the replies (and all the good work on rails)!\n", "created_at": "2011-04-27 15:41:26", "user": 52501, "id": 1065016}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nVery minor change.\n\nThanks,\n\nJ\n", "labels": [], "number": 323, "updated_at": "2014-06-16 18:47:11", "user": 8701, "closed_at": "2011-04-27 14:07:24", "id": 819750, "title": "very minor formatting change to railties app_base git references", "url": "https://api.github.com/repos/rails/rails/issues/323", "created_at": "2011-04-27 13:56:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1064398", "text": "Done.\n", "created_at": "2011-04-27 14:07:24", "user": 2741, "id": 1064398}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 324, "updated_at": "2014-07-01 04:44:18", "user": 8701, "closed_at": "2011-04-27 21:45:59", "id": 820243, "title": "fixed a small bug with Array#from core_ext", "url": "https://api.github.com/repos/rails/rails/issues/324", "created_at": "2011-04-27 15:36:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "And this found fix the CI failures\n", "labels": [], "number": 325, "updated_at": "2014-07-03 03:55:50", "user": 8701, "closed_at": "2011-04-27 21:46:01", "id": 821078, "title": "final corrections to the mass-assignment security tests", "url": "https://api.github.com/repos/rails/rails/issues/325", "created_at": "2011-04-27 19:00:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Visiting https://rails.lighthouseapp.com/\n\nI get an error page with:\n\"Oops! : You must be a member of this account.\"\n\nWas this intentional? I can't seem to lookup my bugs to bring them over to github.\n", "labels": [], "number": 326, "updated_at": "2014-07-29 07:58:57", "user": 9032, "closed_at": "2011-04-28 02:29:49", "id": 822311, "title": "rails.lighthouseapp.com inaccessible", "url": "https://api.github.com/repos/rails/rails/issues/326", "created_at": "2011-04-28 00:12:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067498", "text": "Yes, we're [migrating to github issues](http://twitter.com/dhh/status/63366853636009985).  :heart:\n", "created_at": "2011-04-28 00:33:53", "user": 3124, "id": 1067498}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067500", "text": "I _think_ we're going to move them.\n", "created_at": "2011-04-28 00:34:25", "user": 3124, "id": 1067500}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067538", "text": "This is such a cool ticket, now that it's on github issues :)\n", "created_at": "2011-04-28 00:47:23", "user": 50139, "id": 1067538}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067598", "text": "Did someone forget to tell DHH?\nhttps://twitter.com/#!/dhh/status/63375047070466048\n\nHe thinks there is no migration...\n", "created_at": "2011-04-28 01:08:53", "user": 20791, "id": 1067598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067829", "text": "I opened up Lighthouse again. Apparently you can't archive a project without cutting it off from the world.\n\nIf someone wants to figure out how to port the LH tickets over, PDI!\n", "created_at": "2011-04-28 02:29:49", "user": 2741, "id": 1067829}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As @trejkaz mentioned, in some cases it's useful to use the SI prefix when formatting bytes. I understand why this is not the default, but the related patch added a :prefix option to number_to_human_size so the developer can choose what to display in each scenario.\n", "labels": [], "number": 327, "updated_at": "2014-07-03 03:55:56", "user": 13742, "closed_at": "2011-04-28 12:40:04", "id": 822317, "title": "Prefix option for number_to_human_size", "url": "https://api.github.com/repos/rails/rails/issues/327", "created_at": "2011-04-28 00:14:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068611", "text": "In which cases is useful to display a wrong information? :)\n", "created_at": "2011-04-28 07:24:58", "user": 9582, "id": 1068611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1069545", "text": "This version is fine by me.  Some people might want the third option (binary with the correct prefix) but in our application we're only using the SI version.\n", "created_at": "2011-04-28 12:20:12", "user": 43236, "id": 1069545}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1069600", "text": "@josevalim Mac OS X e Ubuntu, for example, are operating systems that use the SI prefix. As today, if you choose to upload to a Rails application a 1 MB file and then you format the number of bytes in the server to display it back to the user, the result will not be 1 MB.\n", "created_at": "2011-04-28 12:36:22", "user": 13742, "id": 1069600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1069612", "text": "touchez. applied!\n", "created_at": "2011-04-28 12:40:04", "user": 9582, "id": 1069612}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "human inflections are not cleared if clearing scope is set to alle.\nIncludes tests.\n", "labels": [], "number": 328, "updated_at": "2014-07-03 03:56:00", "user": 101456, "closed_at": "2011-04-28 07:20:42", "id": 822367, "title": "proper reset all inflector scopes", "url": "https://api.github.com/repos/rails/rails/issues/328", "created_at": "2011-04-28 00:33:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068589", "text": "Merged.\n", "created_at": "2011-04-28 07:20:42", "user": 9582, "id": 1068589}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ActiveRecord Observer around_\\* callbacks are broken at the moment.  Trying to yield from them results in a \"no block given (yield)\" error.  The around callbacks on the model itself works.\n\nI.e. this work:\n\nclass Foo < ActiveRecord::Base\n  around_save :do_around_save\n  def do_around_save(foo)\n    yield\n  end\nend\n\nThis does not:\n\nclass Foo < ActiveRecord::Base\nend\n\nclass FooObserver < ActiveRecord::Observer\n  def around_save(foo)\n    yield\n  end\nend\n\nRunning 3.0.7.\n", "labels": [], "number": 329, "updated_at": "2011-05-06 21:51:45", "user": 725218, "closed_at": "2011-05-06 21:51:45", "id": 822496, "title": "ActiveRecord Observer around callbacks do not receive a block to yield to", "url": "https://api.github.com/repos/rails/rails/issues/329", "created_at": "2011-04-28 01:23:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068573", "text": "We do not have around callbacks in ActiveRecord.\n", "created_at": "2011-04-28 07:14:47", "user": 9582, "id": 1068573}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1070515", "text": "Really?  Then what do you call these http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html:\n\nCALLBACKS   =   [ ..., :around_save, ... :around_create, ... :around_update, ... :around_destroy ... ]\n\nAnd why does the first example work?\n", "created_at": "2011-04-28 15:51:48", "user": 725218, "id": 1070515}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1070862", "text": "Right, I haven't noticed they were added, my bad. The reason the observer does not work is simple (I think):\n\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/observer.rb#L113\n\nIt should be:\n\n```\n        klass.send(:define_method, callback_meth, &block) do\n          observer.send(callback, self, &block)\n        end\n```\n\nPlease try to provide a patch with tests!\n", "created_at": "2011-04-28 17:07:47", "user": 9582, "id": 1070862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113166", "text": "I am just curious here. How do you pass a block that can be `yielded` within `around_*` filter?\n", "created_at": "2011-05-06 19:33:45", "user": 278, "id": 1113166}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113201", "text": "It should work in the same way as controllers. Your around_filter needs to call yield.\n", "created_at": "2011-05-06 19:38:19", "user": 9582, "id": 1113201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113777", "text": "@josevalim, doing as you suggest above with adding &block parameter leads to: both block arg and actual block given (SyntaxError). \n\nShould we be adding methods to ActiveRecord model classes using class_eval instead here?\n", "created_at": "2011-05-06 21:42:16", "user": 762, "id": 1113777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113798", "text": "@asanghi, https://github.com/rails/rails/pull/424 :)\n", "created_at": "2011-05-06 21:46:16", "user": 278, "id": 1113798}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113820", "text": "Fixed on #424. @gnufied thanks for fixing my horrible syntax mistake. :)\n", "created_at": "2011-05-06 21:51:45", "user": 9582, "id": 1113820}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is a regression that was introduced in fdfc8e3b9c4905057677fd009f463a377be60b93.\n\nAny create_or_find_by_x_and_y call on an association will _aways_ create a new record.\n\nTo recreate:\n\nSay you have two models, one has_many of another:\n\n```\nclass Author < ActiveRecord::Base\n  has_many :posts\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :author\nend\n```\n\nJump into the console and enable AR logging.  Then run the dynamic find_or_create_by twice:\n\n```\nAuthor.first.posts.find_or_create_by_title_and_published('Post Title, true)\nAuthor.first.posts.find_or_create_by_title_and_published('Post Title, true)\n```\n\nYou'll see that the query looks generates something like\n\n```\nselect * from posts where title IN ('Post Title', 1) and published = '' and author_id = 7\n```\n\ni.e. the title is getting passed an array of the input.\n\nFailing test and patch coming shortly...\n", "labels": [], "number": 330, "updated_at": "2011-04-28 02:04:35", "user": 168192, "closed_at": "2011-04-28 02:04:35", "id": 822529, "title": "Dynamic find_or_create_by_x_and_y calls always create a new record in Rails 2.3.11", "url": "https://api.github.com/repos/rails/rails/issues/330", "created_at": "2011-04-28 01:44:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1067761", "text": "I apologize about the duplication. Unfamiliar with GitHub's issue tracking.  Please reference Issue #331 as that contains the pull request.\n", "created_at": "2011-04-28 02:04:35", "user": 168192, "id": 1067761}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is a regression that was introduced in fdfc8e3b9c4905057677fd009f463a377be60b93.\n\nAny create_or_find_by_x_and_y call on an association will _aways_ create a new record.\n\nTo recreate:\n\nSay you have two models, one has_many of another:\n\n```\nclass Author < ActiveRecord::Base\n  has_many :posts\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :author\nend\n```\n\nJump into the console and enable AR logging.  Then run the dynamic find_or_create_by twice:\n\n```\nAuthor.first.posts.find_or_create_by_title_and_published('Post Title', true)\nAuthor.first.posts.find_or_create_by_title_and_published('Post Title', true)\n```\n\nYou'll see that the query looks generates something like\n\n```\nselect * from posts where title IN ('Post Title', 1) and published = '' and author_id = 7\n```\n\ni.e. the title is getting passed an array of the input.\n\nFailing test and patch included below in the merge request (9f7ff621bd62ade37b4ae4e608bdf24b7f7b1456).\n", "labels": [], "number": 331, "updated_at": "2014-06-27 16:11:21", "user": 168192, "closed_at": "2011-04-28 07:21:35", "id": 822563, "title": "Dynamic find_or_create_by_x_and_y always creates new records in Rails 2.3.11 ", "url": "https://api.github.com/repos/rails/rails/issues/331", "created_at": "2011-04-28 02:02:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068597", "text": "Merged.\n", "created_at": "2011-04-28 07:21:35", "user": 9582, "id": 1068597}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Don't quote IDs as Arel will quote them -- follow same conventions as the delete method, which is already in place.  This causes problems when working with strings as primary keys which are then quoted twice.\n\nIncluded is a patch to resolve this issue. The delete method uses ID, not quoted ID, as ARel will quote it.\n\nSee both:\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6230-optimistic-locking-quoting-id-applied-twice-for-update-statement\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6578-optimistic-locking-and-double-quoting-of-strings\n", "labels": [], "number": 332, "updated_at": "2014-07-03 03:56:11", "user": 44939, "closed_at": "2011-05-08 18:02:01", "id": 822658, "title": "Don't quote ID's as Arel will quote them -- follow same conventions as the delete method. ", "url": "https://api.github.com/repos/rails/rails/issues/332", "created_at": "2011-04-28 02:54:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115065", "text": "@tenderlove and @jonleighton :heart:\n", "created_at": "2011-05-07 10:18:36", "user": 9582, "id": 1115065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115259", "text": "@cmeiklejohn can you add a test please?\n", "created_at": "2011-05-07 12:13:20", "user": 1979, "id": 1115259}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1117009", "text": "will do.\n", "created_at": "2011-05-08 00:57:27", "user": 44939, "id": 1117009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1117158", "text": "Added.  Had to add a new model to represent the table with a string for primary key -- also added coverage to the destroy call as well.  Let me know if you'd like to see anything renamed or changed.\n", "created_at": "2011-05-08 02:18:57", "user": 44939, "id": 1117158}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1119744", "text": "Oops, meant to say the following at the same time as closing:\n\nMerged, thanks! I condensed it into a single commit so it's clearer to other people that the tests are associated with the fix.\n\nMerge commit: a8daea4b85b2709600d5e894b7380149b0854b53\nCommit: 4fbd8adf4824d48aea47a57047d90fb6510cee28\n", "created_at": "2011-05-08 18:02:21", "user": 1979, "id": 1119744}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Suppose I want my radio buttons' labels translated:\n\n```\n= f.radio_button(:customer_access_enabled, true)\n= f.label(:customer_access_enabled, :value => true)\n= f.radio_button(:customer_access_enabled, false)\n= f.label(:customer_access_enabled, :value => false)\n```\n\nBoth labels get the same value from `\"helpers.label.#{model_name}.#{attribute_name}\"` (in my case, `\"helpers.label.page.customer_access_enabled\"`). I would like to have specific translations for each value option of the same attribute.\n\nLet me know if it's not clear or refactoring is needed. Thanks!\n\n(Ported from [LightHouse Ticket #6753](https://rails.lighthouseapp.com/projects/8994/tickets/6753-specific-translations-for-labels-with-values))\n", "labels": [], "number": 333, "updated_at": "2014-06-15 10:38:50", "user": 8061, "closed_at": "2011-04-28 07:37:28", "id": 822697, "title": "Specific translations for labels with values", "url": "https://api.github.com/repos/rails/rails/issues/333", "created_at": "2011-04-28 03:07:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1068652", "text": "Merged.\n", "created_at": "2011-04-28 07:37:28", "user": 9582, "id": 1068652}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "when Duration inherits from BasicObject, send and try aren't implemented so they're delegated to the Integer value by method_missing.  This causes unexpected behavior:\n\n```\nd = 1.day\nd.inspect                #=> \"1 day\"\nd.try(:inspect) || \"N/A\" #=> \"86400\"\n# ^^^ standard null checking goes pear-shaped\n```\n\nI had a different pull request for this that I closed because this commit is a better solution.  Here's the other one for context:\nhttps://github.com/rails/rails/pull/320\n", "labels": ["activesupport"], "number": 334, "updated_at": "2014-06-26 20:36:53", "user": 40791, "closed_at": "2011-06-15 23:13:43", "id": 822763, "title": "fix AS::Duration#try and #send", "url": "https://api.github.com/repos/rails/rails/issues/334", "created_at": "2011-04-28 03:29:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115062", "text": "AS::Duration is a proxy object. Making it inherit from Object can make it stop pointing some methods to the proxy. @fxn, what is your opinion on this?\n", "created_at": "2011-05-07 10:16:41", "user": 9582, "id": 1115062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115618", "text": "Yeah, in my previous pull request (#320) I just reimplemented the two methods, but that seemed like a pretty bad idea in hindsight.  Using Object as it's superclass seems to still proxy all the methods that need to be proxied to it's Numeric value.  At least enough for the tests to pass.\n", "created_at": "2011-05-07 15:25:25", "user": 40791, "id": 1115618}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115622", "text": "The problem is that methods like respond_to?, instance_methods and so on will no longer be proxied after this change.\n", "created_at": "2011-05-07 15:26:51", "user": 9582, "id": 1115622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115869", "text": "That's true. Shouldn't those methods be implemented to account for Duration's instance methods and the proxied instance methods?\n\nOn May 7, 2011, at 10:26 AM, josevalimreply@reply.github.com wrote:\n\n> The problem is that methods like respond_to?, instance_methods and so on will no longer be proxied after this change.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/334#issuecomment-1115622\n", "created_at": "2011-05-07 17:09:31", "user": 40791, "id": 1115869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115947", "text": "Those are just examples. There are other methods. Everything would work fine with BasicObject, because it would always hit method missing.\n", "created_at": "2011-05-07 17:41:24", "user": 9582, "id": 1115947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377263", "text": "Somehow I feel like you way in #320 is more superior than doing this.\n\n@josevalim, should I close this and reopen #320?\n", "created_at": "2011-06-15 22:16:19", "user": 4912, "id": 1377263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377558", "text": "Sounds good. Maybe we could put all the object functionality in modules, so we can include it in different places.\n", "created_at": "2011-06-15 23:10:21", "user": 9582, "id": 1377558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377579", "text": "Let's follow up the progress on #320, shall we? :)\n", "created_at": "2011-06-15 23:13:43", "user": 4912, "id": 1377579}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rails always outputs \"Rails <version> application starting in <environment> on http://<url>\" even when the server is running over SSL.\n\nFrom:\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/commands/server.rb#L57\n\n```\n    def start\n      puts \"=> Booting #{ActiveSupport::Inflector.demodulize(server)}\"\n      puts \"=> Rails #{Rails.version} application starting in #{Rails.env} on http://#{options[:Host]}:#{options[:Port]}\"\n      puts \"=> Call with -d to detach\" unless options[:daemonize]\n      [...]\n```\n\nRack::Server supports the :SSLEnable option and it would be nice if Rails did a simple check to output the right protocol handler string.\n\nI agree it is not common to use the :SSLEnable option, but since it is available and the fix would be very easy to add I reckon it's worth a try. For an example on how we configure SSL in the Dradis Framework:\n\nhttp://dradis.svn.sourceforge.net/viewvc/dradis/server/trunk/script/rails?view=markup\n\nIf you are keen on addressing this, I'm happy to fork / patch and send a pull request. Just let me know.\n", "labels": [], "number": 335, "updated_at": "2011-05-06 03:33:32", "user": 53006, "closed_at": "2011-05-06 03:33:32", "id": 823683, "title": "Rails::Server outputs 'http://' even when running over SSL", "url": "https://api.github.com/repos/rails/rails/issues/335", "created_at": "2011-04-28 10:03:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1109400", "text": "Please do provide a pull request!\n", "created_at": "2011-05-06 03:33:32", "user": 9582, "id": 1109400}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Newer version has a few minor performance fixes\n", "labels": [], "number": 336, "updated_at": "2014-07-03 03:56:24", "user": 6399, "closed_at": "2011-04-28 10:47:35", "id": 823785, "title": "upgrade rack-mount to 0.7.2", "url": "https://api.github.com/repos/rails/rails/issues/336", "created_at": "2011-04-28 10:43:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1069232", "text": "Applied.\n", "created_at": "2011-04-28 10:47:35", "user": 9582, "id": 1069232}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have a very simple testing app, containing login code only.\n\nOn the login action I added a debugger to check if Rails is filtering the parameters as it should.\nI did:\n\n``` ruby\n(rdb:1) eval env[\"action_dispatch.parameter_filter\"]\n[:password, :password, :password_confirmation, /RAW_POST_DATA/]\n```\n\nSo it should filter the password. Checking it like this works fine\n\n``` ruby\neval ActionDispatch::Request.new(env).filtered_parameters\n{\"commit\"=>\"Sign in\", \"action\"=>\"create\", \"utf8\"=>\"‚úì\", \"authenticity_token\"=>\"8VJfRG+0RHI2u1Lp0BvbP3ee9023TQFfdkVYmiaI6D4=\", \"controller\"=>\"devise/sessions\", \"user\"=>{\"remember_me\"=>\"0\", \"password\"=>\"[FILTERED]\", \"email\"=>\"user@test.com\"}}\n```\n\nThe problem is when I do:\n\n``` ruby\neval ActionDispatch::Request.new(env).filtered_env\n```\n\nIt shows the entire env that should be filtered, and in several places it is, but I see parts like this:\n\n``` ruby\n[...]\n\"action_dispatch.request.request_parameters\"=>{\"commit\"=>\"Sign in\", \"authenticity_token\"=>\"8VJfRG+0RHI2u1Lp0BvbP3ee9023TQFfdkVYmiaI6D4=\", \"utf8\"=>\"‚úì\", \"user\"=>{\"remember_me\"=>\"0\", \"password\"=>\"user123\", \"email\"=>\"user@test.com\"}},\n\"rack.request.form_vars\"=>\"utf8=%E2%9C%93&authenticity_token=8VJfRG%2B0RHI2u1Lp0BvbP3ee9023TQFfdkVYmiaI6D4%3D&user%5Bemail%5D=user%40test.com&user%5Bpassword%5D=user123&user%5Bremember_me%5D=0&commit=Sign+in\"\n[...]\n```\n\nAs you can see, the password is right there in plain text.\nIs this ok? If so, how can I completely filter the password??\n\nYou can see more of this issue here: https://rails.lighthouseapp.com/projects/8994/tickets/6720\n", "labels": [], "number": 337, "updated_at": "2013-09-04 00:12:36", "user": 83449, "closed_at": "2012-03-03 23:39:00", "id": 824149, "title": "Parameter Filter not working", "url": "https://api.github.com/repos/rails/rails/issues/337", "created_at": "2011-04-28 12:56:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115064", "text": "Maybe it is not filtering nested hashes? Can you provide a test case to Rails test suite that reproduces the issue?\n", "created_at": "2011-05-07 10:17:56", "user": 9582, "id": 1115064}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1224608", "text": "`env['action_controller.instance']` is a reference to the controller in use, which contains information about the current request that can't really be filtered simply. \n\n```\npry(#<JobsController:0x00000100a66a20>)> env['action_controller.instance'].instance_variable_get(\"@_params\")\n=> {\"password\"=>\"foobar\", \"action\"=>\"index\", \"controller\"=>\"jobs\"}\npry(#<JobsController:0x00000100a66a20>)> f=ActionDispatch::Http::ParameterFilter.new([:password]);\npry(#<JobsController:0x00000100a66a20>)> f.filter(env)['action_controller.instance'].instance_variable_get(\"@_params\")\n=> {\"password\"=>\"foobar\", \"action\"=>\"index\", \"controller\"=>\"jobs\"}\n```\n\nAll the references that aren't being filtered seem to be on the controller.\n", "created_at": "2011-05-23 22:02:49", "user": 1284, "id": 1224608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268390", "text": "@jose That's exactly what's happening.  I just encountered this when submitting something looking like {answers: { ...., images: [....] }.\n\nTrying to filter for images didn't work.  Filtering for answers did.\n\nA quick inspection of the ParameterFilter's lambda generated in compiled_filter doesn't yield an immediate answer.  It is recursing on \"filter\" for Hashes and Arrays.  \n\nI have a client-specific test case that I can use to replicate this.  I'll try to get a patch in tonight.\n", "created_at": "2011-05-31 16:50:48", "user": 10112, "id": 1268390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268429", "text": "BTW, I encountered this in Rails 3.0.7.\n", "created_at": "2011-05-31 16:55:31", "user": 10112, "id": 1268429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1747425", "text": "@elight, have you been able to work out a patch for this? can you at least provide the failing test you said you have?\n", "created_at": "2011-08-07 04:31:13", "user": 83449, "id": 1747425}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1747588", "text": "Doh!  I'll look into it tomorrow (really).  Let this one slip.  Sorry!\n", "created_at": "2011-08-07 06:26:03", "user": 10112, "id": 1747588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1817561", "text": "Ok so I have a funny definition of \"tomorrow\".\n\nSo the actionpack/test/dispatch/request_test.rb \"process parameter filter\":\n\n```\n{'baz'=>[{'foo'=>'baz'}, \"1\"]}, {'baz'=>[{'foo'=>'[FILTERED]'}, \"1\"]}, [/foo/]]\n```\n\n... exercises the case that I'm describing.  Interestingly, that test must be passing right now.\n\nHowever, I am seeing this behavior fail to work as intended in an app receiving nested JSON.  The first nested object, so this would be the equivalent of 'foo' above, matches the parameter filter.  Yet the value goes unfiltered.\n\nI worked around it by using the equivalent of 'baz', the \"top level\" parameter, on the filter.\n\nMy point: this test is a unit-level test. However, it fails (for me) when run against the full stack.  We need an integration test that exercises the same.\n", "created_at": "2011-08-16 15:51:29", "user": 10112, "id": 1817561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2099465", "text": "Here's a [failing integration test case](https://github.com/cjolly/rails/commit/e0a7bba78fd6a658c197695b721f8f27d56d1b1c) that exercises @smartinez87's initial concern with the `rack.request.form_vars` being included in `request.filtered_env`.\n\nI also added a passing case that I _believe_ exercises @elight's concerns with deeply nested params.\n\nI have not yet added any code that solves the `rack.request.form_vars` as I'd like to hear what you guys think about it. I'm leaning toward `rack.request.form_vars` be excluded from in entirety from `request.filtered_env` by default as `RAW_POST_DATA` [already is](https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/filter_parameters.rb#L53).\n\nI'm more than willing to add the implementation code and submit a pull request if there's a consensus on how to proceed.\n", "created_at": "2011-09-14 23:37:28", "user": 10403, "id": 2099465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2099586", "text": "Woops, I wanted to add that excluding `rack.request.form_vars` is how [Airbrake exception notification handled this](https://github.com/thoughtbot/airbrake/commit/72b874f14d9c86aa246acc23dd97fb10cb2fb7eb) after [this bug was filed](http://help.airbrakeapp.com/discussions/problems/687-rackrequestform_vars-isnt-being-filtered).\n", "created_at": "2011-09-14 23:55:37", "user": 10403, "id": 2099586}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334949", "text": "@elight & @cjolly, have you continued with this?\n", "created_at": "2011-10-09 02:51:29", "user": 199, "id": 2334949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2341192", "text": "Sorry, I have not.\n\nEvan\n\nOn Oct 8, 2011, at 10:51 PM, Jeremy Kemperreply@reply.github.com wrote:\n\n> @elight & @cjolly, have you continued with this?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/337#issuecomment-2334949\n", "created_at": "2011-10-09 21:17:04", "user": 10112, "id": 2341192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3551489", "text": "@jeremy, I've submitted a pull request (#3305) and just rebased against master.\n", "created_at": "2012-01-18 19:16:38", "user": 10403, "id": 3551489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4214402", "text": "@jeremy since #3305 has been merged I guess this one can be closed. /cc @josevalim\n", "created_at": "2012-02-28 12:04:56", "user": 78422, "id": 4214402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23757346", "text": "Looks like this fell between the cracks: still seeing rack.request.form_vars in filtered_env in rails 3.2.14\n", "created_at": "2013-09-04 00:12:36", "user": 291734, "id": 23757346}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The +name+ argument on the #columns method is useless, no implementation of this method makes use of it.\nI removed the argument since it only creates confusion.\n", "labels": [], "number": 338, "updated_at": "2014-06-15 17:15:18", "user": 83449, "closed_at": "2012-02-02 17:23:21", "id": 824235, "title": "Remove useless argument", "url": "https://api.github.com/repos/rails/rails/issues/338", "created_at": "2011-04-28 13:17:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1070412", "text": "SQLite 3 tests pass.\n", "created_at": "2011-04-28 15:34:34", "user": 24421, "id": 1070412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1095354", "text": "I'd like to avoid changing method signatures until Rails 4.0.  This change will break backwards compatibility with 3rd party adapters.\n", "created_at": "2011-05-03 17:52:11", "user": 3124, "id": 1095354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115044", "text": "@tenderlove should we leave this open then? or can we close?\n", "created_at": "2011-05-07 10:03:36", "user": 9582, "id": 1115044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1119560", "text": "Set up a milestone and add it?\n", "created_at": "2011-05-08 16:52:45", "user": 24421, "id": 1119560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1119568", "text": "Yes, we should set up a rails 4 milestone and add this.\n", "created_at": "2011-05-08 16:55:10", "user": 3124, "id": 1119568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638469", "text": "How about changing its name to something like deprecated for rails 3-1 so people know it's going to go away? That would also minimize the confusion that @smartinez87 cites.\n", "created_at": "2011-07-23 19:34:42", "user": 1075, "id": 1638469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334958", "text": "Milestoned @ Rails 4.0\n", "created_at": "2011-10-09 02:55:01", "user": 199, "id": 2334958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3374154", "text": "master is rails 4 now right? should this be merged?\n", "created_at": "2012-01-05 18:37:25", "user": 83449, "id": 3374154}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3376489", "text": "Yeah! Master is Rails 4.0 :heart:\n", "created_at": "2012-01-05 21:17:15", "user": 47848, "id": 3376489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3776180", "text": "@smartinez87 I think it'd be good to rebase so it can be merged now :)\n", "created_at": "2012-02-02 11:10:30", "user": 26328, "id": 3776180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3777191", "text": "had trouble rebasing master again, so opened a new PR #4850\n", "created_at": "2012-02-02 12:37:10", "user": 83449, "id": 3777191}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3782045", "text": "closing this, since #4850 was merged\n", "created_at": "2012-02-02 17:23:21", "user": 83449, "id": 3782045}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 339, "updated_at": "2014-06-27 12:37:47", "user": 83449, "closed_at": "2011-05-04 19:23:27", "id": 824312, "title": "Added a little bit more docs on ObserverArray", "url": "https://api.github.com/repos/rails/rails/issues/339", "created_at": "2011-04-28 13:36:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1101721", "text": "Code has changed since the pull request,so it makes no sense now. Closing it.\n", "created_at": "2011-05-04 19:23:27", "user": 83449, "id": 1101721}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nAfter discussions with DHH, I have removed the default_scope deprecations as a first step before default_select.\n\nEnjoy,\n\nJ\n", "labels": [], "number": 340, "updated_at": "2014-07-03 03:56:37", "user": 8701, "closed_at": "2011-05-01 23:54:42", "id": 825216, "title": "removed the default_scope deprecations and updated the docs and tests to ", "url": "https://api.github.com/repos/rails/rails/issues/340", "created_at": "2011-04-28 16:50:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1071377", "text": "Hi,\n\nCould someone fill me in on the reasoning for this please?\n\nThe original reasoning for changing it was:\n1. It's very rare that you will want to build a default scope incrementally rather than just declare it once\n2. Having people implement the `default_scope` method gives them the _choice_ about how inheritance should work. They can decide whether or not to call `super`.\n\nThanks\n", "created_at": "2011-04-28 18:35:37", "user": 1979, "id": 1071377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086093", "text": "I've found the desire to build default_scope's incrementally when you abstract model concerns into mixins and apply them to multiple models.\n\nYou can still do inheritance overwriting if you want full control, but the default behavior of \"last man wins\" is the same policy we apply to all other scopes combinations, so it's fine here too.\n", "created_at": "2011-05-01 23:53:51", "user": 2741, "id": 1086093}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In Rails 3, if you have both an :if block and an :on declaration on the same validation, the :if block runs before the :on declaration is checked. For example, in the following code:\n\n`validates_presence_of :blah, :on => :update, :if => lambda { |record| record.id == 4 }`\nthe :if block is run even if the context is a create.\nThis seems to be due to the following code in activemodel/validations/callbacks.rb:\n`def before_validation(*args, &block)\n       options = args.extract_options!\n       if options.is_a?(Hash) && options[:on]\n         options[:if] = Array.wrap(options[:if])\n         options[:if] << \"self.validation_context == :#{options[:on]}\"\n       end\n       set_callback(:validation, :before, *(args << options), &block)\n     end`,\n where the check is added to the end of the options[:if] array, causing the check to run after the :if block.\n", "labels": [], "number": 341, "updated_at": "2011-04-29 06:24:56", "user": 139443, "closed_at": "2011-04-29 06:24:56", "id": 825816, "title": "Validations' :if blocks are run before any :on checks are made", "url": "https://api.github.com/repos/rails/rails/issues/341", "created_at": "2011-04-28 18:49:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1071466", "text": "Patch please?\n", "created_at": "2011-04-28 18:50:13", "user": 9582, "id": 1071466}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1071490", "text": "Sure, might take a bit, though.\n", "created_at": "2011-04-28 18:53:41", "user": 139443, "id": 1071490}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1072450", "text": "Sent patch. https://github.com/rails/rails/pull/344\n", "created_at": "2011-04-28 21:31:19", "user": 762, "id": 1072450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074009", "text": "Fixed on #344. Thanks @asangui!\n", "created_at": "2011-04-29 06:24:56", "user": 9582, "id": 1074009}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This seems to have been fixed in previous version of Rails (https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6015) but is again a problem in 3.0.x. Or at least this is a problem when using relative_url_root and caching is disabled.\n\nHere is the patch for 3.0.7,\n\npkmiec/rails@cc1b72de44d2736617bcaa0190dde4ef4ba36f05\n", "labels": [], "number": 342, "updated_at": "2011-05-09 11:52:23", "user": 7186, "closed_at": "2011-05-09 11:52:23", "id": 826276, "title": "AssetTagHelper ensures that files are in the wrong directory (again)", "url": "https://api.github.com/repos/rails/rails/issues/342", "created_at": "2011-04-28 20:28:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115057", "text": "Could you please provide this patch as a pull request? Can provide one for 3-0-stable and one for master? Thanks!\n", "created_at": "2011-05-07 10:12:29", "user": 9582, "id": 1115057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1122311", "text": "It's already fixed in master, as rails@deff5289 fixes this.\n", "created_at": "2011-05-09 11:25:39", "user": 49042, "id": 1122311}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It's been a long standing request to allow for AM/PM format hour format. \nPeople have resorted to building plugins or their own hacks to get this going. \n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/1004-datetime_select-to-accept-ampm-option\nhttp://gist.github.com/368952\nhttp://code.google.com/p/rails-twelve-hour-time-plugin/\n\nI think @neerajdotname also wanted to get a patch going for this last year but I suppose it got lost in the mist.\n\nSending pull with working tests.\n", "labels": [], "number": 343, "updated_at": "2014-06-19 00:46:59", "user": 762, "closed_at": "2011-05-07 13:31:24", "id": 826333, "title": "Allow AM/PM format in datetime selectors", "url": "https://api.github.com/repos/rails/rails/issues/343", "created_at": "2011-04-28 20:40:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1082201", "text": "There is definitely a need to address this problem but I'm hesitant about this particular patch because it introduces locale specific logic into ActionView.  I think this is one small part of a larger problem.  Rails is pretty good at deriving String representations of \"locale-y\" classes like Time but very bad at getting a \"locale-y\" class like Time from a String representation.  A better solution may be to extend ActiveSupport to better handle parsing of Strings back into Time given the current (or specified) locale.  From that point ActionView's date/time helpers could be reworked to use something more generic like ActiveRecord::Coders, multiparameter assignment, composed_of, or something like that.  This way the locale processing logic can stay in ActiveSupport where (IMO) it belongs.  This is just my two cents - I have absolutely zero say or influence about the direction of Rails.  :-)  I do applaud any attempt to fix this long standing problem.  Something needs to be done.  I'm curious what other people think.\n", "created_at": "2011-05-01 01:41:51", "user": 127900, "id": 1082201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115043", "text": "@MDaubs this is a good point but, on the other side, do we have another format to show hours beyond \"24\" and \"12AM/PM\"? If yes, I completely agree, this should be an extensible mechanism, if not, this patch is fine imo.\n", "created_at": "2011-05-07 10:02:51", "user": 9582, "id": 1115043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115305", "text": "@josevalim Nope, just the two (and I double checked with the Common Locale Data Repository just to be certain).  You're absolutely right.  The patch will be a welcome convenience to many without any side events.  My hesitation derives from the state of locale interpretation in general.  What I really want is `Date.parse(\"5/1/2011\")` to return May 1st instead of January 5th based on the current locale.  That's a whole other pull request though.  :)\n", "created_at": "2011-05-07 12:41:12", "user": 127900, "id": 1115305}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115403", "text": "Merged then!\n", "created_at": "2011-05-07 13:33:36", "user": 9582, "id": 1115403}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1164027", "text": "So, can this be used if I'm running Rails v3.1.0.beta1 ?\n", "created_at": "2011-05-14 23:04:49", "user": 222221, "id": 1164027}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1164165", "text": "@nickradford This feature was not included in v3.1.0.beta1 (merged 3 days after v3.1.0beta1 was tagged).  Works great if you are running on the edge though.\n", "created_at": "2011-05-15 00:16:47", "user": 127900, "id": 1164165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1164495", "text": "@MDaubs Thanks, I can't wait for this to be released. I was about to fork it myself.\n", "created_at": "2011-05-15 01:17:47", "user": 222221, "id": 1164495}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Related to Issue#341\n\nhttps://github.com/rails/rails/issues/341\n\n```\nvalidates :title, :presence => true, :if => Proc.new do |x|\n    #expensive action\n end, :on => :update\n```\n\nThe validation should not call the Proc above during :create \n\nThe bug above states that as the problem. This patch fixes it.\n\n/cc @josevalim @jwkpiano1\n", "labels": [], "number": 344, "updated_at": "2014-07-03 03:56:52", "user": 762, "closed_at": "2011-04-29 06:25:17", "id": 826594, "title": ":if should not fire on validations when not in context with :on", "url": "https://api.github.com/repos/rails/rails/issues/344", "created_at": "2011-04-28 21:30:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074010", "text": "Merged!\n", "created_at": "2011-04-29 06:25:17", "user": 9582, "id": 1074010}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previously 'olive' inflected to 'olife'. It now correctly inflects to 'olives'.\n", "labels": [], "number": 345, "updated_at": "2014-06-13 13:21:58", "user": 285296, "closed_at": "2011-04-29 06:04:43", "id": 827352, "title": "Fix inflection for olive", "url": "https://api.github.com/repos/rails/rails/issues/345", "created_at": "2011-04-29 01:43:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1073856", "text": "Rails is not accepting updates to inflections into core since quite some time now.\nFeel free to fix this in your application's config/initializers/inflections.rb\n", "created_at": "2011-04-29 04:53:17", "user": 762, "id": 1073856}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The options_for_select is invoking map(&:to_s) in loops. When options_for_select is invoked with many options, the memory impact of map(&:to_s) is more than necessary.\n\nWhile map(&:to_s) stuff has been optimized, it is not free and should yield way to performance. \n", "labels": [], "number": 346, "updated_at": "2014-07-03 03:56:59", "user": 7186, "closed_at": "2011-04-29 04:41:21", "id": 827611, "title": "peformance trumps syntactical sugar", "url": "https://api.github.com/repos/rails/rails/issues/346", "created_at": "2011-04-29 04:22:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1073805", "text": "Do you have some benchmarks showing the impact of this on Ruby 1.9? It's my understanding that &:symbol is essentially free under 1.9, which is the primary target for master.\n", "created_at": "2011-04-29 04:25:57", "user": 2741, "id": 1073805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1073812", "text": "Ah .. no, I have not made it to 1.9 yet .. still on 1.8.7. Should I submit this for the 3.0.7 branch instead?\n", "created_at": "2011-04-29 04:32:01", "user": 7186, "id": 1073812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1073821", "text": "Yeah, that'd be a better fit.\n", "created_at": "2011-04-29 04:35:40", "user": 2741, "id": 1073821}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The options_for_select is invoking map(&:to_s) in loops. When options_for_select is invoked with many options, the memory impact of map(&:to_s) is more than necessary.\n\nWhile map(&:to_s) stuff has been optimized, it is not free in ruby 1.8.7 and should yield way to performance.\n\nNote, I made this request initially into rails:master (https://github.com/rails/rails/pull/346). This is the same change but into rails:3-0-stable instead, which is perhaps a better fit for this type of performance change.\n", "labels": [], "number": 347, "updated_at": "2014-07-03 03:57:02", "user": 7186, "closed_at": "2011-04-29 19:42:57", "id": 827689, "title": "performance trumps syntactical sugar", "url": "https://api.github.com/repos/rails/rails/issues/347", "created_at": "2011-04-29 04:56:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rails should map the PATCH HTTP verb to the <code>update</code> action to respect proper HTTP/REST semantics.\n\nThe current mapping of PUT to <code>update</code> is an imprecise mapping of HTTP verbs _(\"REST\")_ to CRUD. PUT more accurately means \"place\" or \"replace\", and can even be used to create new records at a specific URI.\n\nFrom the HTTP specs for PATCH:\n\n```\nThe PUT method is already defined to overwrite a resource\nwith a complete new body, and cannot be reused to do partial changes.\nOtherwise, proxies and caches, and even clients and servers, may get\nconfused as to the result of the operation.\n```\n\nFurthermore, Rails convention for the <code>update</code> action is not idempotent--a requirement for PUT according to the specs.\n\nAs a solution, I propose that PATCH requests be routed to the <code>update</code> action alongside PUT. Furthermore, PATCH should be made the default form method when editing existing model records, since 99% of the time, users want to modify an existing record instead of replacing it. In later versions, PUT can be deprecated or mapped to a different action with proper semantics.\n\nThis change should not break browser compatibility since browsers are already using <code>_method</code> param override for PUT; changing that to PATCH should be simple. Furthermore, leaving the default PUT routing (alongside PATCH) in restful routes should make this change backwards compatible for most users.\n\nIf this is something the core developers agree with, I can contribute a ... um ... patch.\n\nReference: http://tools.ietf.org/html/rfc5789\n", "labels": [], "number": 348, "updated_at": "2014-09-04 16:29:25", "user": 7035, "closed_at": "2011-05-07 09:59:11", "id": 828540, "title": "Use PATCH verb instead of PUT for \"update\"", "url": "https://api.github.com/repos/rails/rails/issues/348", "created_at": "2011-04-29 10:33:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074810", "text": "In most cases you are actually replacing data and not updating it. Your code renders full resource data, user modifies it and sends it back. That is what PUT designed for. PATCH meant to be used when partial data sent back to server.\n\nAlso I do not agree that `update` action is not idempotent.\n", "created_at": "2011-04-29 11:03:18", "user": 150485, "id": 1074810}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074867", "text": "While PATCH should definitely be in the radar, let me say that Rails does not force you to do partial updates.\n\nFor example, if an invoice has a \"paid\" flag, and you have a check box to toggle it via Ajax, it is up to you which request is that. In particular, a REST design would have the \"paid\" flag of an existing invoice exposed as a resource, with its own URI and actions. The fact that the boolean may belong to the invoices table is irrelevant from a REST viewpoint.\n\nSo, in my view the current features are fine, I would not change the default method for edit actions.\n\nHow to add support for PATCH to the framework is something to be discussed.\n", "created_at": "2011-04-29 11:29:08", "user": 3387, "id": 1074867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074872", "text": "I would argue that the vast majority of users implement <code>update</code> as \"updating\" the resource and not \"replacing\" it. Even the word \"update\" says, \"update\".\n\nFurthermore, convention and the myriads of Rails examples (official and unofficial) show a controller's <code>update</code> calling an ActiveRecord object's <code>update</code>, which is definitely meant to be PATCH-type action and not a PUT-type action.\n", "created_at": "2011-04-29 11:30:32", "user": 7035, "id": 1074872}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074881", "text": "@fxn I would agree to a certain degree that Rails does not force you to do partial updates. ActiveRecord's semantics for <code>update</code> is partial updates, and that's the method called the majority of time in an \"update\" action.\n\nRegardless of whether it's forced, it is _acceptable_ to do partial updates in Rails, and that means we should not be using PUT, because it is _**un__acceptable_ to do partial updates in PUT.\n", "created_at": "2011-04-29 11:36:25", "user": 7035, "id": 1074881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074885", "text": "Based on the way most forms currently exists, I believe 97% of currently PUT requests should be PATCH.\n\nPlease don't forget though that this is a _very big_ change, for any application. It shouldn't be applied on a minor version.\nI don't see this kind of change in any version earlier to 4.0.\n", "created_at": "2011-04-29 11:38:11", "user": 9347, "id": 1074885}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074887", "text": "@dlee but what do you understand by \"replacing\"?\n\nThe \"body\" of a resource is something you define. In particular the ID or whatever identifier you use in the URL does not need to change. The same way the name of a static file whose contents you are \"replacing\" need no change.\n\nYou are not forced by HTTP to delete and create database rows. Database rows are implementation. Resources are conceptual. The standard update_attributes idiom is OK.\n", "created_at": "2011-04-29 11:38:43", "user": 3387, "id": 1074887}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074894", "text": "@fxn that is what I was trying to say, so +1 :)\n", "created_at": "2011-04-29 11:41:06", "user": 150485, "id": 1074894}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074910", "text": "@dmathieu My proposal is to put PATCH alongside PUT in the routes and to make PATCH the default method in forms. This should _not_ break backwards compatibility for the majority of applications.\n\nLater releases of 3.x can then deprecate the PUT. 4.0 can remove it completely.\n\n@fxn I agree that concept and implementation are two different things. I argue that in Rails, the _concept_ of \"update\" means partial updates. I also agree with dmathieu that 97% of how \"update\" is used is in the _partial update_ way.\n", "created_at": "2011-04-29 11:43:58", "user": 7035, "id": 1074910}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074913", "text": "@dlee there's no disagreement in that Rails does not support PATCH.\n", "created_at": "2011-04-29 11:45:01", "user": 3387, "id": 1074913}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074921", "text": "@fxn rereading your comment, I think you're misunderstanding what I meant by \"replacing\" the content on a PUT. I'm not saying that PUT should issue a new URI or a resource ID. I'm saying that the contents of the resource are completely replaced (not updated or patched) by a PUT.\n", "created_at": "2011-04-29 11:47:21", "user": 7035, "id": 1074921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074936", "text": "@dlee do you agree that if you get the full public resource representation (all public fields, no ID, no timestamps), you are updating the resource with update_attributes as per PUT semantics?\n", "created_at": "2011-04-29 11:50:43", "user": 3387, "id": 1074936}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074955", "text": "@dlee another thought: if it was true that PUT can be seen as a particular case of PATCH, then I agree with your proposal in principle, including the change in the default.\n", "created_at": "2011-04-29 11:58:14", "user": 3387, "id": 1074955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074956", "text": "@fxn If you are replacing every single field of a resource, and you do that every time without exception, then I agree that that's PUT semantics.\n\nHowever, if you only update some of the fields, then that's PATCH semantics.\n", "created_at": "2011-04-29 11:58:57", "user": 7035, "id": 1074956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074970", "text": "Hopefully the nail in the coffin from the HTTP spec (emphasis mine):\n\n_The PUT method is already defined to overwrite a resource\nwith a complete new body, and *_cannot be reused to do partial changes.***\n", "created_at": "2011-04-29 12:04:08", "user": 7035, "id": 1074970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1074984", "text": "@dlee Yes I know.\n\nMy only concern is that the RFC does not seem to allow partial bodies, or at least that's not totally clear to me. It says you need to send a description of how to modify the resource... Do you have real world example of valid PATCH requests?\n", "created_at": "2011-04-29 12:10:12", "user": 3387, "id": 1074984}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1075001", "text": "@fxn in my understanding, nothing needs to change from the way we currently use POST params. The body of a PATCH request is system-specific and unspecified in the HTTP spec.\n", "created_at": "2011-04-29 12:13:47", "user": 7035, "id": 1075001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1075016", "text": "@dlee if that's the case PUT seems to be unnecessary for most web programming, you could perfectly update always using PATCH, partial or full, doesn't matter most of the time.\n", "created_at": "2011-04-29 12:18:58", "user": 3387, "id": 1075016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1075024", "text": "We could then keep the default `update` action, which would by default support PUT and PATCH.\nAnd if the controller responds to an other action (like `replace` for example), it'd be used for PUT actions and only `update` would be used for PATCH.\n\nThis would keep backward compatibility and allow advanced customization of the thing.\n", "created_at": "2011-04-29 12:20:55", "user": 9347, "id": 1075024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1075042", "text": "@fxn yes, you should be able to use PATCH whenever you want to update a resource. The only thing PUT can do that PATCH cannot is to place a new resource at an explicit location:\n\n```\nPUT /posts/my_new_post\n```\n\nBut this ability of PUT is not being used by Rails.\n\n@dmathieu yes, that's my proposal. I think it should be possible in 3.x. In 4.0 PUT should by default _not_ route to <code>update</code>\n", "created_at": "2011-04-29 12:25:48", "user": 7035, "id": 1075042}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1075172", "text": "@dlee You probably mean that's not what the resources macro produces. Rails does support that use case of PUT via the put macro for example.\n", "created_at": "2011-04-29 13:01:47", "user": 3387, "id": 1075172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1076478", "text": "The problem is not PUT or PATCH but `#update_attributes` which lotta people use _in_ their `#update` action. This model method is definitely not PUT-conform in a RESTful meaning, as it doesn't replace but extends. Here's a clarification: http://nicksda.apotomo.de/2010/12/rails-misapprehensions-understanding-restful-put-and-post/\n", "created_at": "2011-04-29 18:17:04", "user": 10406, "id": 1076478}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1076902", "text": "@apotonick This debate about PUT is old.\n\nBefore PATCH (and PATCH is very recent) there was no theoretical solution to partial updates. I was subscribed for a while to the REST mailing list and saw big names discussing about it. Consensus was, you can't. If you need to, be pragmatic and use something, for example PUT. Not pure, but there's no pure solution (other than definining ad-hoc resources and do proper PUTs to them).\n\nSo people using update_attributes for PUT are/were doing it right. It is the best you can do.\n\nOn the other hand, it was up to _you_ to define REST-conformant interfaces. There's nothing wrong with the update_attributes method. If _you_ are using update_atrributes for partial updates then it is the programmer who is not following strictly REST, not the AR method. You are responsible for your design, and there's nothing in Rails that forces you to do partial updates. The routing DSL is very rich.\n\nNow that there's PATCH, we (all) need to start catching up. Rails has to address PATCH necessarily at some point.\n", "created_at": "2011-04-29 19:40:35", "user": 3387, "id": 1076902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1077045", "text": "Of course, it's not the AR `#update_attributes` method which is wrong but the programmer who uses it in PUT and calls his interface \"RESTful\". I didn't know that PATCH is available in Rails now, and as \"this debate about PUT is old\" I will remain silent for now ;-)\n", "created_at": "2011-04-29 20:12:51", "user": 10406, "id": 1077045}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1077165", "text": "@apotonick not yet in Rails, this issue is proposing a roadmap for it :).\n", "created_at": "2011-04-29 20:41:14", "user": 3387, "id": 1077165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1080939", "text": "The point is that Rails by default is patching the resource (update_attributes) when receiving a PUT request and doing nothing when receiving a PATCH one and that the patch will not affect anybody.\n\nI think @dlee should be working on the patch right now, shouldn't he?\n", "created_at": "2011-04-30 15:45:18", "user": 13742, "id": 1080939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1081198", "text": "@dcrec1 Rails does not do that by default. It depends on how the programmer _uses_ the method. If you publish a REST API and your application is designed so that update actions only receive full updates, then everything is fine.\n\nI'd wait green light/guidelines from someone in core before starting a patch.\n", "created_at": "2011-04-30 17:33:25", "user": 3387, "id": 1081198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1081317", "text": "I agree that it would be good for rails to sort out partial updates vs. full replacement with PATCH and PUT.\n\nA few people on this thread have mentioned that `update_attributes` can be used in combination with PUT if the client gets the full public representation of the resource, and includes that, with the desired changes, in the PUT request.  This is true, but unless you control both the server and client code, there's no way to enforce this.  The problem is that `update_attributes` only affects mentioned attributes, not all attributes included in the resource representation.  So if a client does a put with a JSON hash like `{ \"name\": \"John Doe\"}` and the resource also contains an `age` attribute, `update_attributes` will leave `age` set to the current value...but the semantics of PUT dictate that it should be a complete replacement, and therefore `age` should be set to nil (or, it is't invalid to let age be nil, the entire change should be rejected with an appropriate status code and explanatory message).\n\nYou can of course work around this, and write a custom `replace` method on your model that sets unmentioned attributes to `nil`, but it would be nice to have better out-of-the-box support in rails itself.  I think we need a `replace_attributes` method as part of the ActiveModel API so that PUT requests can use this.  PATCH requests could then continue to use `update_attributes`.\n\nI think we could add at least come of this functionality without breaking backwards compatibility:\n- Add a `replace_attributes` method to the AM API.\n- Add support for the PATCH method to the router.\n\nThe hard part is finding a way to make the `resource(s)` declaration in the router support routing PATCH to `Controller#update` and PUT to `Controller#replace` without breaking backwards compatibility.  Maybe it could be a configuration option that defaults to true in newly generated rails apps (kinda like the rails 3 default configs that got generated with new rails 2.3 apps)\n", "created_at": "2011-04-30 18:23:53", "user": 49391, "id": 1081317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086373", "text": "@fxn when you create a scaffold in Rails, this code is generated:\n\n```\n# PUT /cars/1\n# PUT /cars/1.xml\ndef update\n  @car = Car.find(params[:id])\n\n  respond_to do |format|\n    if @car.update_attributes(params[:car])\n      format.html { redirect_to(@car, :notice => 'Car was successfully updated.') }\n      format.xml  { head :ok }\n    else\n      format.html { render :action => \"edit\" }\n      format.xml  { render :xml => @car.errors, :status => :unprocessable_entity }\n    end\n  end\n```\n\nThis is the reason I said that by default Rails patches a resources when receiving a PUT request.\n", "created_at": "2011-05-02 02:33:56", "user": 13742, "id": 1086373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1090923", "text": "How do we get the green light from core?\n", "created_at": "2011-05-02 22:02:51", "user": 7035, "id": 1090923}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1090978", "text": "@dlee I believe this definitely needs to be addressed.\n\nWe are totally focused on publishing a beta right now, have not talked a lot about it because of that but there are some +1s as first impression. I'd like to work on this for 3.2 (I was not in core when I wrote the comment!). Some discussion is needed about the design, I hope we can provide some concrete feedback soon.\n\nThanks! Will write back here.\n", "created_at": "2011-05-02 22:13:51", "user": 3387, "id": 1090978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107520", "text": "@fxn \"discussion is needed\" within core or here in this issue? I'd like to be involved in the discussion if possible. I'm itching to cook up this patch.\n", "created_at": "2011-05-05 19:01:07", "user": 7035, "id": 1107520}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1108028", "text": "@dlee green light to your proposal, PATCH all the way :). No need for a replace action.\n", "created_at": "2011-05-05 20:32:17", "user": 3387, "id": 1108028}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1108358", "text": "@fxn: sweet! For clarification, we still want the PUT backwards compatibility, right? Or by \"PATCH all the way\", did you mean no more PUT?\n", "created_at": "2011-05-05 21:33:27", "user": 7035, "id": 1108358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1108435", "text": "@dlee Yeah, as you proposed: both PUT and PATCH route to #update for backwards compatibility. And default _method for editing existing records is patch. Also for completeness the routes and test APIs should have a patch method as well, etc.\n", "created_at": "2011-05-05 21:50:13", "user": 3387, "id": 1108435}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1108443", "text": "Basically, the question boils down to whether or not we want <tt>#resources</tt> to keep the PUT => controller#update route alongside the new PATCH => controller#update route.\n", "created_at": "2011-05-05 21:51:54", "user": 7035, "id": 1108443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1108548", "text": "@dlee Not sure if I follow. Since REST routing is so fundamental, goal is full backwards compatibility. If you upgrade a 3.1 application, it just works. No matter whether you use #resources and helpers that encapsulate all of this, or ad-hoc put routes and manuals :method => :put in your views.\n", "created_at": "2011-05-05 22:14:59", "user": 3387, "id": 1108548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115037", "text": "Closing this as now we have a pull request with real code. :)\n", "created_at": "2011-05-07 09:59:11", "user": 9582, "id": 1115037}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/6757-hashfrom_xml-chokes-on-empty-cdata\n\nWhen a tag is passed to Hash.from_xml with an empty CDATA blocks as it's contents it should be return an empty string.  \n", "labels": [], "number": 349, "updated_at": "2014-06-26 16:40:31", "user": 79260, "closed_at": "2011-05-07 09:58:22", "id": 830341, "title": "Hash.from_xml chokes on empty CDATA", "url": "https://api.github.com/repos/rails/rails/issues/349", "created_at": "2011-04-29 19:11:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 350, "updated_at": "2014-07-03 03:57:11", "user": 18524, "closed_at": "2011-04-30 00:22:20", "id": 830822, "title": "Fixed documentation, 'asset' -> 'assets'", "url": "https://api.github.com/repos/rails/rails/issues/350", "created_at": "2011-04-29 21:18:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The deprecation message for verify informs users to use the rails/verification plugin. Update the url in the message to reflect current maintainer's repository.\n", "labels": [], "number": 351, "updated_at": "2014-07-03 03:57:14", "user": 146214, "closed_at": "2011-04-29 23:27:00", "id": 831047, "title": "Update the github url for the verification plugin", "url": "https://api.github.com/repos/rails/rails/issues/351", "created_at": "2011-04-29 22:10:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This merge requests contains two patches that address the following situation of polymorphic has_one associations:\n\n``` ruby\nclass Address < ActiveRecord::Base\n  belongs_to :addressable, :polymorphic => true\n  has_one :location, :as => :locatable\nend\n\nclass GeoLocation < ActiveRecord::Base\n  belongs_to :geo_locatable, :polymorphic => true\nend\n\nclass Business < ActiveRecord::Base\n  has_one :address, :as => :addressable\n  has_one :geo_location, :through => :geo_locatable\nend\n```\n\nSay you want to query Business records and you want to join in the location records as well.\n\nIf you execute the following line:\n\n``` ruby\nBusiness.joins(:geo_location).all\n```\n\nyou will see the following exception:\n\n```\nNoMethodError: undefined method `to_sym' for nil:NilClass\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/activesupport-3.0.7/lib/active_support/whiny_nil.rb:48:in `method_missing'\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/arel-2.0.9/lib/arel/table.rb:103:in `[]'\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/activerecord-3.0.7/lib/active_record/associations.rb:2202:in `association_join'\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/activerecord-3.0.7/lib/active_record/relation/query_methods.rb:256:in `block in build_joins'\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/activerecord-3.0.7/lib/active_record/relation/query_methods.rb:254:in `each'\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/activerecord-3.0.7/lib/active_record/relation/query_methods.rb:254:in `build_joins'\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/activerecord-3.0.7/lib/active_record/relation/query_methods.rb:176:in `build_arel'\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/activerecord-3.0.7/lib/active_record/relation/query_methods.rb:149:in `arel'\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/activerecord-3.0.7/lib/active_record/relation.rb:64:in `to_a'\nfrom ~/.rvm/gems/ruby-1.9.2-p180@shoploaf/gems/activerecord-3.0.7/lib/active_record/relation/finder_methods.rb:143:in `all'\n```\n\nOnce I got in there to fix this bug, I noticed that joining through to a polymorphic has_one, like above, or a polymorphic has_many neglects to filter on the polymorphic_type column as well.\n\nThe SQL statement for a correct query should contain the following:\n\n```\nINNER JOIN businesses.id ON addresses.addressable_id AND addresses.addressable_type = 'Business'\nINNER JOIN addresses.id = geo_locations.geo_locatable_id AND geo_locations.geo_locatable_type = 'Address'\n```\n\ni.e. both inner join statements should reference the type.\n\nInstead, the following SQL is generated:\n\n```\nINNER JOIN businesses.id ON addresses.addressable_id AND addresses.addressable_type = 'Business'\nINNER JOIN addresses.id = geo_locations.geo_locatable_id\n```\n\nThe merge requests includes a fix for this as well.\n\nAlso, there are tests for both of these issues.\n", "labels": [], "number": 352, "updated_at": "2014-07-01 04:55:27", "user": 168192, "closed_at": "2011-05-10 22:57:26", "id": 831627, "title": "Fixes for incorrect INNER JOIN through two polymorphic resources (NoMethodError: undefined method `to_sym' for nil:NilClass)", "url": "https://api.github.com/repos/rails/rails/issues/352", "created_at": "2011-04-30 03:51:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133265", "text": "I missed this somehow. Thanks for the pull request, I will try to find time to review it :)\n", "created_at": "2011-05-10 20:18:38", "user": 1979, "id": 1133265}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Simple change to sort the output of `rake db:migrate:status` by the migration ID.  This change is isolated in the first commit in the pull request.\n\nA second commit interleaves the `db_list` and `file_list` to better represent the order in which things happened.  It continues to sort by the migration ID and makes it slightly easier, in my opinion, to spot the \"no file\" migrations in the combined list.\n\nI'm submitting this against 3.0.x since this seems to me like something that should have been there since the beginning.\n", "labels": [], "number": 353, "updated_at": "2014-07-02 08:19:43", "user": 605447, "closed_at": "2011-05-09 16:54:31", "id": 832270, "title": "sorted db:migrate:status output", "url": "https://api.github.com/repos/rails/rails/issues/353", "created_at": "2011-04-30 06:25:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1121500", "text": "See #461 for a 3.1 version of this pull request.\n", "created_at": "2011-05-09 06:54:34", "user": 605447, "id": 1121500}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1124737", "text": "Applied on master, not applying on 3-0-stable as I don't consider this a bug fix. Thanks!\n", "created_at": "2011-05-09 16:54:31", "user": 9582, "id": 1124737}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The ActiveModel::SecurePassword module is outstanding but I think allowing the password to be optional would allow many more use cases for this feature. E.g. an application using Omniauth in tandem with local authentication probably doesn't require a password for each User.  This commit adds a :required configuration parameter (defaults to true) and ensures that the authenticate method returns false for a blank password.\n\nThis patch original submitted to LH #6742.  Tests included.\n\nThis is my first patch submission so please forgive any faux pas I may have made. :)\n", "labels": [], "number": 354, "updated_at": "2014-07-03 03:57:24", "user": 127900, "closed_at": "2011-05-03 03:12:39", "id": 833261, "title": "Add :required parameter to AS::SecurePassword", "url": "https://api.github.com/repos/rails/rails/issues/354", "created_at": "2011-04-30 12:38:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1087029", "text": "-1 - I don't really see the point? Either an entity has a password, or it doesn't. Anything more complex doesn't belong in core rails.\n", "created_at": "2011-05-02 08:03:03", "user": 9546, "id": 1087029}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1087564", "text": "Very fair point, but I don't see why SecurePassword is using validates_presence to begin with.  By my train of thought the developer would want all of their presence validators clearly visible in the model, not hidden under a macro.  I can't think of any other core macros that create validations under the hood (or am I wrong?).  Handling the case of a blank password also prevents an invalid but persisted entity with a SecurePassword to gracefully fail authentication.  That's my reasoning anyway.  Although I guess by that reasoning my patch is indeed too complex - the alternative being to just remove the validates_presence call and properly handle a blank value.  This way a developer can choose whether or not they want to validates_presence or not directly on their model class.  In my mind that seems more Rails-like, but my mind can be a complicated place!!  :)\n", "created_at": "2011-05-02 11:28:35", "user": 127900, "id": 1087564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1091317", "text": "If a coder has declared that something has a secure password, it's a fair assumption to make that it's going to handle the validation of that password; After all, the essence of Rails is convention over configuration.\n\n`SecurePassword` is a very simple solution that should help curb a lot of bad password-retention practices (storing plaintext, storing unsalted MD5 hashes) by making it a no brainer.\n\nIf your app has authentication routines that are complex enough that it's permissible to have a blank password, use something else.\n", "created_at": "2011-05-02 23:46:13", "user": 9546, "id": 1091317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1091892", "text": "The intention with SecurePassword was, as @DanCheail has mentioned, to provide a simple way for the vast bulk of people to store passwords and not mess it up it up. There are a number of more complete libraries which are available if you want to do more complicated things with passwords.  Devise for example.\n", "created_at": "2011-05-03 03:12:40", "user": 197, "id": 1091892}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As far as I can tell, there's no reason for them to be there. This commit removes them.\n", "labels": [], "number": 355, "updated_at": "2014-07-03 03:57:28", "user": 43314, "closed_at": "2011-05-01 08:50:58", "id": 834372, "title": "The README has some funny slashes", "url": "https://api.github.com/repos/rails/rails/issues/355", "created_at": "2011-04-30 22:49:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1082775", "text": "At this moment the README is also the home page of the API.\n\nI'd like to have different pages sometime in the future, with different content, but while they are the same the slashes are needed because they prevent RDoc from autolinking to the Rails module.\n", "created_at": "2011-05-01 08:50:58", "user": 3387, "id": 1082775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1083074", "text": "I've made a temporary hack though https://github.com/rails/rails/commit/e68b7a001de0959fcfb90b9d8c82b6b0bc1ccfb6\n", "created_at": "2011-05-01 11:51:38", "user": 3387, "id": 1083074}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I saw this was part of a warning clean up for Ruby 1.9.3 that @tenderlove did. If this is necessary I'd love to be enlightened as to why it is causing warnings :)\n", "labels": [], "number": 356, "updated_at": "2014-06-17 05:35:37", "user": 18524, "closed_at": "2011-05-01 18:38:19", "id": 834660, "title": "Removed double assignment of same local variable", "url": "https://api.github.com/repos/rails/rails/issues/356", "created_at": "2011-05-01 02:56:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1083908", "text": "1.9.3 emits warnings for variables that are not used.  These warnings happen at parse time, so ruby cannot consider eval'd strings.  In this case, the variable is used in an evaled string.  A cheap way to avoid the warning in this case is the double assignment.\n\nProbably a better solution would be to make `assert_difference` take a lambda.  Then we can remove the double assignment, avoid eval, and eliminate the warning.\n", "created_at": "2011-05-01 18:38:19", "user": 3124, "id": 1083908}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis adds :as and :without_protection support to AR.new and create, as well as associations, eg.\n\n```\nu = User.create({ :name => 'Josh', :is_admin => true }, :as => :admin)\nu.applications.create({ :name => 'travis', :rating => 5 }, :as => :admin)\n```\n\nLet me know if you see any issues.\n\nThanks,\n\nJosh\n", "labels": [], "number": 357, "updated_at": "2014-06-15 03:48:17", "user": 8701, "closed_at": "2011-05-01 23:59:39", "id": 836221, "title": "Assign attributes", "url": "https://api.github.com/repos/rails/rails/issues/357", "created_at": "2011-05-01 21:14:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- adds tests for find_or_create_by and find_or_initialize_by on has_many associations\n- changes the behavior of ActiveRecord::Associations::CollectionProxy#method_missing to differ to\n  ActiveRecord::FinderMethods#find_or_instantiator_by_attributes for arg processing and saving so\n  find_or_create_by's api on associations will be consistent w/ the api for model classes.\n", "labels": [], "number": 358, "updated_at": "2014-06-12 16:44:59", "user": 7378, "closed_at": "2011-05-05 18:13:11", "id": 836992, "title": "Fix for lighthouse #6741", "url": "https://api.github.com/repos/rails/rails/issues/358", "created_at": "2011-05-01 22:31:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add `ActionController::ParamsWrapper` to wrap JSON parameters into a nested hash\n\nSo now, instead of having to send JSON parameter with a parent such as:\n\n```\n{\"user\": {\"name\": \"Prem\"}}\n```\n\nyou can now send it like this:\n\n```\n{\"name\": \"Prem\"}\n```\n\nand it will be wrapped in `params[#{controller_name}]` automatically. So for example if you're posting data to `UsersController` it will be wrapped in `params[:user]`.\n\nYou could also specify the key which the parameters should be wrapped to by using `wrap_parameters` like this:\n\n```\nclass UsersController < ApplicationController\n  wrap_parameters :person\nend\n```\n\nAnd you can also pass in a model class, which Rails will automatically detect proper parameter key and attribute names.\n", "labels": [], "number": 359, "updated_at": "2014-06-20 00:45:32", "user": 4912, "closed_at": "2011-05-02 21:08:51", "id": 837036, "title": "Add `ActionController::ParamsWrapper` to wrap JSON parameters into a nest", "url": "https://api.github.com/repos/rails/rails/issues/359", "created_at": "2011-05-01 22:54:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1160382", "text": "This is my first post for the Rails core, so please tell me if I'm posting this in the wrong spot or should be doing something differently..\n\nAfter working with Rails 3.1.0beta, I found there be a problem with the ActionController::ParamsWrapper when dealing with a abstract class and a similarly named controller. My scenario is as follows:\n- User is an abstract model with two subclasses, Student and Professor\n- UsersController is a resourceful controller used to edit either a Student or Professor (depending on who is logged in)\n\n``` ruby\n# app/models/user.rb\nclass User < ActiveRecord::Base\n  self.abstract_class = true\nend\n\n# app/controllers/users_controller.rb\nclass UsersController < ApplicationController\nend\n\n# config/initializers/wrap_parameters.rb\nActionController::Base.wrap_parameters :format => [:json]\n```\n\nLet me know if there is anything I should do on top of this comment.\n", "created_at": "2011-05-14 03:52:24", "user": 46724, "id": 1160382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162160", "text": "@agrobbin, what is the issue? Is it an exception? If so, what is the error message and backtrace? However, if you are just unsure on how to make it work, I recommend you to try the rubyonrails-talk mailing list and many people there can help you. If you then decide it is a rails issue or it is a needed, please report back here!\n", "created_at": "2011-05-14 11:17:35", "user": 9582, "id": 1162160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162497", "text": "My apologies @josevalim, having the base configurations, with no additional definitions in UsersController, when you try and go to /user/edit (it is a resource not resources, so no ID is passed), the following error appears:\n\n```\nActiveRecord::StatementInvalid\n\nMysql2::Error: Table 'uclass.users' doesn't exist: SHOW FIELDS FROM `users`\n```\n\nHere is the backtrace:\n\n```\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:279:in `query'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:279:in `block in execute'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:222:in `block in log'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:217:in `log'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:279:in `execute'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:469:in `columns'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:93:in `block (2 levels) in initialize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:174:in `with_connection'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:90:in `block in initialize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/base.rb:694:in `yield'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/base.rb:694:in `default'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/base.rb:694:in `columns'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/base.rb:704:in `column_names'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_controller/metal/params_wrapper.rb:167:in `_set_wrapper_defaults'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_controller/metal/params_wrapper.rb:128:in `inherited'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/abstract_controller/railties/routes_helpers.rb:7:in `block (2 levels) in with'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_controller/railties/paths.rb:7:in `block (2 levels) in with'\napp/controllers/users_controller.rb:1:in `<top (required)>'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:452:in `load'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:452:in `block in load_file'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:639:in `new_constants_in'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:451:in `load_file'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:338:in `require_or_load'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:489:in `load_missing_constant'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:181:in `block in const_missing'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:179:in `each'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:179:in `const_missing'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/inflector/methods.rb:124:in `block in constantize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/inflector/methods.rb:123:in `each'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/inflector/methods.rb:123:in `constantize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:527:in `block in initialize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:549:in `yield'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:549:in `default'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:549:in `[]'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/route_set.rb:61:in `controller_reference'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/route_set.rb:46:in `controller'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/route_set.rb:25:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/mapper.rb:41:in `call'\nrack-mount (0.8.0) lib/rack/mount/route_set.rb:153:in `block in call'\nrack-mount (0.8.0) lib/rack/mount/code_generation.rb:93:in `block in recognize'\nrack-mount (0.8.0) lib/rack/mount/code_generation.rb:75:in `optimized_each'\nrack-mount (0.8.0) lib/rack/mount/code_generation.rb:92:in `recognize'\nrack-mount (0.8.0) lib/rack/mount/route_set.rb:141:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/route_set.rb:531:in `call'\noa-core (0.2.5) lib/omniauth/strategy.rb:44:in `call!'\noa-core (0.2.5) lib/omniauth/strategy.rb:30:in `call'\noa-core (0.2.5) lib/omniauth/strategy.rb:44:in `call!'\noa-core (0.2.5) lib/omniauth/strategy.rb:30:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nrack (1.3.0.beta) lib/rack/etag.rb:23:in `call'\nrack (1.3.0.beta) lib/rack/conditionalget.rb:25:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/head.rb:14:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/flash.rb:243:in `call'\nrack (1.3.0.beta) lib/rack/session/abstract/id.rb:195:in `context'\nrack (1.3.0.beta) lib/rack/session/abstract/id.rb:190:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/cookies.rb:321:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/query_cache.rb:54:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:448:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/identity_map.rb:152:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/callbacks.rb:28:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/reloader.rb:68:in `call'\nrack (1.3.0.beta) lib/rack/sendfile.rb:102:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/rack/logger.rb:13:in `call'\nrack (1.3.0.beta) lib/rack/methodoverride.rb:24:in `call'\nrack (1.3.0.beta) lib/rack/runtime.rb:17:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nrack (1.3.0.beta) lib/rack/lock.rb:34:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/static.rb:53:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/engine.rb:438:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/rack/log_tailer.rb:14:in `call'\nthin (1.2.11) lib/thin/connection.rb:84:in `block in pre_process'\nthin (1.2.11) lib/thin/connection.rb:82:in `catch'\nthin (1.2.11) lib/thin/connection.rb:82:in `pre_process'\nthin (1.2.11) lib/thin/connection.rb:57:in `process'\nthin (1.2.11) lib/thin/connection.rb:42:in `receive_data'\neventmachine (0.12.10) lib/eventmachine.rb:256:in `run_machine'\neventmachine (0.12.10) lib/eventmachine.rb:256:in `run'\nthin (1.2.11) lib/thin/backends/base.rb:61:in `start'\nthin (1.2.11) lib/thin/server.rb:159:in `start'\nrack (1.3.0.beta) lib/rack/handler/thin.rb:13:in `run'\nrack (1.3.0.beta) lib/rack/server.rb:265:in `start'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/commands/server.rb:70:in `start'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/commands.rb:54:in `block in <top (required)>'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/commands.rb:49:in `tap'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/commands.rb:49:in `<top (required)>'\nscript/rails:6:in `require'\nscript/rails:6:in `<main>'\n```\n", "created_at": "2011-05-14 14:08:25", "user": 46724, "id": 1162497}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162541", "text": "@agrobbin, thank you very much for the backtrace! Could you please open up a new issue? We are going to assign a responsible to it and mark it as a blocker to Rails 3 release!\n", "created_at": "2011-05-14 14:22:14", "user": 9582, "id": 1162541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162558", "text": "Done! https://github.com/rails/rails/issues/558\n", "created_at": "2011-05-14 14:27:42", "user": 46724, "id": 1162558}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Add performance benchmark similar to ActiveRecord\n- Lazily find_or_create_resource_for_collection to not incur the overhead for empty arrays and arrays of primatives\n- #duplicable? is faster than inline rescues when the object is not duplicable\n- Don't constantly raise and handle NameError, raising is expensive\n- Even when a resource is nested inside a module, always look inside the class first for the resource definition so we don't overwrite classes all the time\n\n```\nBefore:                                       user     system      total        real\nModel.new (instantiation)                 0.120000   0.000000   0.120000 (  0.119961)\nNested::Model.new (instantiation)         0.150000   0.010000   0.160000 (  0.151183)\nModel.new (setting attributes)           28.540000   0.680000  29.220000 ( 29.271775)\nNested::Model.new (setting attributes)   29.740000   0.580000  30.320000 ( 30.486210)\n\nAfter:                                        user     system      total        real\nModel.new (instantiation)                 0.120000   0.000000   0.120000 (  0.121249)\nNested::Model.new (instantiation)         0.150000   0.010000   0.160000 (  0.152429)\nModel.new (setting attributes)           11.480000   0.170000  11.650000 ( 11.656163)\nNested::Model.new (setting attributes)   11.510000   0.210000  11.720000 ( 11.724249)\n```\n", "labels": [], "number": 360, "updated_at": "2014-06-15 12:31:53", "user": 4805, "closed_at": "2011-05-02 06:36:56", "id": 837500, "title": "Optimize ActiveResource::Base.new(attributes)", "url": "https://api.github.com/repos/rails/rails/issues/360", "created_at": "2011-05-02 04:17:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086548", "text": "I'll backport to 3-0-stable and 2-3-stable once accepted.\n", "created_at": "2011-05-02 04:18:36", "user": 4805, "id": 1086548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086832", "text": "@cgriego merged, thanks! There is no need to backport for 2-3-stable or 3-0-stable. 3.1 is coming out soon enough!\n", "created_at": "2011-05-02 06:37:35", "user": 9582, "id": 1086832}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086881", "text": "@josevalim Do we have any target dates in mind? ;)\n", "created_at": "2011-05-02 06:57:37", "user": 146214, "id": 1086881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086893", "text": "Expect a beta this week. If everything is ok, the final won't be far away. Do we have any important event happening this month? ;)\n", "created_at": "2011-05-02 07:02:11", "user": 9582, "id": 1086893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086918", "text": "This week? That's super cool! :)\n", "created_at": "2011-05-02 07:09:53", "user": 146214, "id": 1086918}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1087039", "text": "Oh! I dint realise that! :)\n", "created_at": "2011-05-02 08:08:22", "user": 146214, "id": 1087039}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1087042", "text": "Spoiler removed :P\n", "created_at": "2011-05-02 08:09:30", "user": 4912, "id": 1087042}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1087048", "text": "@sikachu haha!\n", "created_at": "2011-05-02 08:12:04", "user": 146214, "id": 1087048}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use this two models:\n\nclass Item < ActiveRecord::Base\nbelongs_to :itemable, :polymorphic => true end\n\nclass Product < ActiveRecord::Base\nhas_one :item, :as => :itemable, :dependent => destroy accepts_nested_attributes_for :item end\n\nnow try to:\n\n@product = Product.new(params[:product]) @product.build_item(params[:item]) @product.valid?\n\nAnd you will get a error lacking the \"item.itemable_id\"\n\nSo, build_item is defining the correct itemable_type, but are not dealing with the id... I expect it to save \"course\" first, get it's id and them set it on itemable_id and then save \"item\".\n\nPS: I've filled the bug on lighthouse but just figured out that it has moved here, so, to let you know: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6761-has_one-polymorphic-is-creating-circular-dependency-with-parent-model\n", "labels": ["activerecord"], "number": 361, "updated_at": "2012-04-27 20:06:03", "user": 20575, "closed_at": "2012-04-27 20:06:03", "id": 837534, "title": "has_one polymorphic is creating circular dependency with parent model", "url": "https://api.github.com/repos/rails/rails/issues/361", "created_at": "2011-05-02 04:51:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086599", "text": "Also forget to mention that it's rails 3.0.7\n", "created_at": "2011-05-02 04:52:00", "user": 20575, "id": 1086599}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114035", "text": "I am unable to reproduce this one on Rails Master. Can you try there and see, if you can reproduce this one? \n\nIf you are still able to reproduce this one, can you attach some minimum code which one can use to reproduce the problem? If possible, the code can only have models calling each other.\n", "created_at": "2011-05-06 22:44:41", "user": 278, "id": 1114035}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167114", "text": "This may be more of a programmer error than a bug.  The only way I can reproduce that error is by neglecting to put the reference in the CreateItems migration.\n\n@brodock Are you sure you're including the reference to :itemable in your migration and not just in your models?\n", "created_at": "2011-05-15 19:34:14", "user": 108205, "id": 1167114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1415221", "text": "@jgaskins I'm sure the reference is there, I double checked.\n\nAlso to test it on console, you can do a:\n\n@product.new\n@product.valid? (will return true)\n@product.build_item\n@product.valid? (will return false)\n@product.errors (will return on the hash a :\"item.itemable_id\"=>[\"can't be blank\"] or similar)\n", "created_at": "2011-06-22 01:44:54", "user": 20575, "id": 1415221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334963", "text": "Could you move this forward by providing a failing test case?\n", "created_at": "2011-10-09 02:56:10", "user": 199, "id": 2334963}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5320318", "text": "Does this problem still exist?  If not, please close the ticket.\n", "created_at": "2012-04-24 23:39:27", "user": 2130, "id": 5320318}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5389247", "text": "I'm closing this one since it is for a not supported Rails version. Please test it in Rails version bigger than 3.1 and see if you still have this issue. If so please reopen the issue.\n\nThanks.\n", "created_at": "2012-04-27 20:06:03", "user": 47848, "id": 5389247}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hello, am new to the community and would really like to contribute\n\nI saw that there is a from method and a to method, thought it would be great to have a from_to method that returns the part of the array from position1 to position2\n\nThanks\n\nBest\nAbhijit\n", "labels": [], "number": 362, "updated_at": "2014-07-03 03:57:58", "user": 677817, "closed_at": "2011-05-02 06:39:45", "id": 837605, "title": "request for 'from_to' method to be added to array/acces.rb", "url": "https://api.github.com/repos/rails/rails/issues/362", "created_at": "2011-05-02 05:32:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086796", "text": "1. That's an old version of the file that you've modified. Pull the latest changes and work on the latest copy of the file.\n2. You need to properly align the comments.\n3. You should provide examples where the from and to positions exceed the array limits.\n4. Most important of all, you need to provide tests.\n\nThanks!\n", "created_at": "2011-05-02 06:19:33", "user": 146214, "id": 1086796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086837", "text": "Thanks @vijaydev for checking it out. Closing until those pendencies get fixed. You should also provide some use cases of when you think from_to would be useful.\n", "created_at": "2011-05-02 06:39:45", "user": 9582, "id": 1086837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086839", "text": "Heyy Thanks Vijay\n\nWill align the comments and make a note  of the from and to positions.\n\nWent throuhg github again and that was the only version of the access.rb file that I could find. If there's a way to get a later version, would really appreciate your guidance.\n\nAlso, couldnt find any tests on any block/method in access.rb. So I'm guessing i'm working on the wrong access.rb file.\n\nI appreciate the help\n\nThanks again\n", "created_at": "2011-05-02 06:40:24", "user": 677817, "id": 1086839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086872", "text": "The file is right. Just the version is old. Check this out - https://github.com/rails/rails/commits/master/activesupport/lib/active_support/core_ext/array/access.rb - the history of the file. There are 3 changes done in the last 5 days, after Dec 2009. \n\nI see that you've forked the rails repo in March and so your clone will not have these new changes until you pull the upstream changes. To do that, follow these steps:\n\nIn your cloned repo, type the command, \"git remote add upstream git@github.com:rails/rails.git\". And then, \"git pull upstream master\". This will pull in all the changes done on the rails repo. Work on top of these files always. Read this page for more specific details: http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html\n\nThe test file location: https://github.com/rails/rails/commits/master/activesupport/test/core_ext/array_ext_test.rb\n", "created_at": "2011-05-02 06:52:21", "user": 146214, "id": 1086872}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1086874", "text": "Great. Will do that. Thanks again\n", "created_at": "2011-05-02 06:53:33", "user": 677817, "id": 1086874}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using the <code>content_type</code> method from the OldApi of action mailer, the generated mail will be missing a boundary declaration in the Content-type header. This hinders parsing of the email content by us using the Mail gem, and by email clients.\n\ne.g.\n\nExpected header:\n\n<pre>\nContent-Type: multipart/alternative;\n boundary=\"--==_mimepart_4dbe43822262f_1835800eb1381673f\";\n charset=UTF-8\n</pre>\n\n\nActual header: \n\n<pre>\nContent-Type: multipart/alternative\n</pre>\n\n\nI've posted a sample 3.0.7 rails project on https://github.com/kuahyeow/test_actionmailer that shows the failing test. Run <code>rake test</code> to see the one failure.\n", "labels": [], "number": 363, "updated_at": "2011-06-12 03:39:00", "user": 16723, "closed_at": "2011-06-12 03:39:00", "id": 837627, "title": "ActionMailer OldApi clobbers mime boundary header", "url": "https://api.github.com/repos/rails/rails/issues/363", "created_at": "2011-05-02 05:46:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115036", "text": "@kuahyeow the old api is going to be removed right after 3.1, so my question is: can't you use the new API to set the content type (mail :content_type => \"foo\")?\n", "created_at": "2011-05-07 09:57:28", "user": 9582, "id": 1115036}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126795", "text": "Not easily, no - as it's a pretty large app. I've got the following to re-add the boundary currently:\n\n``` ruby\n  def fix_boundary_for_mail(mail)\n    mail.send(:add_boundary) if mail.multipart? && mail.header['content-type'].parameters[:boundary].blank?\n  end\n```\n\nIf it's going to remove right after 3.1 then it's fine to close this issue\n", "created_at": "2011-05-09 22:36:04", "user": 16723, "id": 1126795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342416", "text": "As the old API is going to be removed and there's a temporary fix which @kuahyeow can use until he moves his app to the new one, this issue could be closed.\n\ncc @josevalim\n", "created_at": "2011-06-10 13:56:49", "user": 9347, "id": 1342416}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In the aggregation implementation, there is no way to access information about the ActiveRecord instance in the converter, and it could be realy usefull.\n\nMore info: I use RubyMoney to handle a money data in a model.\n\n```\n composed_of :money,\n             :converter => Proc.new { |value| value.to_money}\n```\n\nI want to give it a default currency depending on the last saved currency (given an update) (or in data related to the ActiveRecord instance), but I cannot access this data in the converter proc.\n\nThis could be really usefull to me, and may be others.\n\nA possible approach is to pass the record to the proc: \n\n```\n             :converter => Proc.new { |value, record| value.to_money(record.currency)}\n```\n", "labels": ["activerecord"], "number": 364, "updated_at": "2012-06-19 02:16:11", "user": 173797, "closed_at": "2012-06-19 02:16:11", "id": 838451, "title": "Access record information from converter (AR::Aggregation)", "url": "https://api.github.com/repos/rails/rails/issues/364", "created_at": "2011-05-02 12:27:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1090804", "text": "Wouldn't it be more readable to se the current context to the record ?\n\n```\n:converter => Proc.new {|value| value.to_money(self.currency) }\n```\n\nActually it might already be the case, I haven't tried it out.\n", "created_at": "2011-05-02 21:33:28", "user": 9347, "id": 1090804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1090845", "text": "no, it does not work because it is in a module_eval so is evaled in the module context:\n\n```\nself.currency == nil\nself == model\n```\n", "created_at": "2011-05-02 21:43:03", "user": 173797, "id": 1090845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126478", "text": "IIRC, all similar features with proc support (e.g. validations, callbacks) yield the record. If we want a continuous API, IMO it would be best if this were the case here, too.\n", "created_at": "2011-05-09 21:33:36", "user": 3749, "id": 1126478}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334966", "text": "Pending an implementation and demonstration that it's compatible with existing code (that only takes 1 argument).\n\nAnyone care to implement it?\n", "created_at": "2011-10-09 02:57:29", "user": 199, "id": 2334966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335817", "text": "I'm not 100% sure this is already all that is desired (I implemented it for :converter but not for :constructor).\n\n@jeremy Relevant tests are green in both 1.9.2 and 1.8.7 although 1.8.7, of course, spits out a multiple values warning. What's the Rails policy here? Is the warning in 1.8.7 acceptable or should I explicitly check for arity?\n\n@eloyesp Did you want it with :constructor as well?\n", "created_at": "2011-10-09 08:55:11", "user": 3749, "id": 2335817}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2401275", "text": "Any opinions yet?\n", "created_at": "2011-10-13 22:51:34", "user": 3749, "id": 2401275}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2402159", "text": "Commented, @clemens. I think an arity check will be necessary due to `lambda` usage. Could you add test coverage for those scenarios?\n\n(It would be nice to avoid the warnings on 1.8, too.)\n", "created_at": "2011-10-14 00:43:48", "user": 199, "id": 2402159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4215105", "text": "@clemens ping. =D\n\nhttps://github.com/clemens/rails/commit/30ab963725628a991c3f335e264d3917249466d7#commitcomment-650930\n", "created_at": "2012-02-28 12:54:51", "user": 78422, "id": 4215105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4215159", "text": "Oh crap, why do I always forget about my own pull requests. :) Will have a look ASAP, thanks for pinging me. :)\n", "created_at": "2012-02-28 12:57:32", "user": 3749, "id": 4215159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5320407", "text": "@clemens Have you had a chance to review this pull request?\n\n@eloyesp is this still a problem?\n", "created_at": "2012-04-24 23:44:49", "user": 2130, "id": 5320407}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5320676", "text": "@jeremyf For me not, I simply abandoned this project some time ago.\n\nBut it is still an error (or at least it make sense this interface). May be it is simplier to fix it for rails 4 (test warnings, documentation change, etc. and leave this the way it works in rails < 4).\n", "created_at": "2012-04-25 00:01:57", "user": 173797, "id": 5320676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6414446", "text": "Closed by #6743\n", "created_at": "2012-06-19 02:16:11", "user": 47848, "id": 6414446}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "3.1 may be out soon, but I have a 3.0 app that needs these optimizations before the app will be upgraded.\n", "labels": [], "number": 365, "updated_at": "2014-07-03 03:58:05", "user": 4805, "closed_at": "2011-05-02 16:32:03", "id": 839259, "title": "Backport ActiveResource optimizations (pull request #360) to 3.0", "url": "https://api.github.com/repos/rails/rails/issues/365", "created_at": "2011-05-02 16:26:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1088700", "text": "3-0-stable and 2-3-stable are maintenance branches. Applying those commits may eventually break plugins or other people code relying on find_or_create_resource_in_modules raising an exception.\n", "created_at": "2011-05-02 16:32:04", "user": 9582, "id": 1088700}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have a 2.3 app that needs these optimizations before the app will be upgraded.\n", "labels": [], "number": 366, "updated_at": "2014-07-03 03:58:10", "user": 4805, "closed_at": "2011-05-02 16:32:38", "id": 839260, "title": "Backport ActiveResource optimizations (pull request #360) to 2.3", "url": "https://api.github.com/repos/rails/rails/issues/366", "created_at": "2011-05-02 16:26:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1088704", "text": "3-0-stable and 2-3-stable are maintenance branches. Applying those commits may eventually break plugins or other people code relying on find_or_create_resource_in_modules raising an exception.\n", "created_at": "2011-05-02 16:32:38", "user": 9582, "id": 1088704}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On the commit for updating :format parameters, seems like I've left out\nthe credit name after the CHANGELOG entry. This should fix it, and in\ncase someone has a problem they could seek assistance easier.\n", "labels": [], "number": 367, "updated_at": "2014-07-03 03:58:15", "user": 4912, "closed_at": "2011-05-02 19:56:51", "id": 840294, "title": "Update CHANGELOG file to mention my name", "url": "https://api.github.com/repos/rails/rails/issues/367", "created_at": "2011-05-02 19:43:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Please merge this when jquery-rails is published as a gem and provides jQuery via the asset pipeline.\n", "labels": [], "number": 368, "updated_at": "2014-07-03 03:58:17", "user": 3387, "closed_at": "2011-05-04 13:17:25", "id": 840867, "title": "brings -j back, and no longer vendors jQuery", "url": "https://api.github.com/repos/rails/rails/issues/368", "created_at": "2011-05-02 22:00:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1099696", "text": "This one was merged directly. @vijaydev, also fixed that article, thanks!\n", "created_at": "2011-05-04 13:17:25", "user": 3387, "id": 1099696}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes a couple of syntax errors on the ParamsWrapper docs\n", "labels": [], "number": 369, "updated_at": "2014-07-03 03:58:20", "user": 83449, "closed_at": "2011-05-02 22:14:30", "id": 840906, "title": "Fix ParamsWrapper docs errors", "url": "https://api.github.com/repos/rails/rails/issues/369", "created_at": "2011-05-02 22:10:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 370, "updated_at": "2014-07-03 03:58:23", "user": 8701, "closed_at": "2011-05-02 22:45:04", "id": 840938, "title": "favor map over each in mysql* adapters", "url": "https://api.github.com/repos/rails/rails/issues/370", "created_at": "2011-05-02 22:17:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1090997", "text": "I actually like #collect better. Mind updating to that? I'll apply then.\n", "created_at": "2011-05-02 22:18:06", "user": 2741, "id": 1090997}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1091022", "text": "Sure, one sec, found another couple of places, just running the tests\n", "created_at": "2011-05-02 22:23:24", "user": 8701, "id": 1091022}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1091072", "text": "updated :)\n", "created_at": "2011-05-02 22:34:32", "user": 8701, "id": 1091072}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `limit` option is ignored when calling `#last` on an ActiveRecord::Relation object:\n\n```\nItem.where(\"id <= 3\").order(:id).limit(2)\n# returns records #1 and #2\nItem.where(\"id <= 3\").order(:id).limit(2).last\n# returns record #3, not record #2 as expected, since the limit is overridden by last\nItem.where(\"id <= 3\").order(:id).limit(2).all.last\n# executing the query uses Array#last instead of ActiveRecord::Relation#last, and returns #2 as expected\n```\n", "labels": [], "number": 371, "updated_at": "2011-05-08 10:31:53", "user": 8009, "closed_at": "2011-05-08 10:31:53", "id": 841619, "title": "ActiveRecord::Relation#last ignores limit", "url": "https://api.github.com/repos/rails/rails/issues/371", "created_at": "2011-05-03 02:59:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116566", "text": "What would you expect it to return if there were less than the limit number of objects?\n\nThe reason limit is ignored is because `find_last` resets it to `limit(1)` after reversing the order. Have you tried using offset to get the behavior you want?\n", "created_at": "2011-05-07 21:27:05", "user": 7378, "id": 1116566}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116830", "text": "I put together a patch https://github.com/rails/rails/pull/451\n", "created_at": "2011-05-07 23:23:49", "user": 7378, "id": 1116830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118771", "text": "Closing this in favor of the pull request.\n", "created_at": "2011-05-08 10:31:53", "user": 9582, "id": 1118771}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Rails 3.0.7, ruby-1.9.2 (via RVM). Take the following code:\n\n``` ruby\nclass LoginController < ApplicationController\n    # ... SNIP ... \n\n    def destroy\n        cookies.delete(:secureusertokens)\n        reset_session\n        redirect_to root_url\n    end\nend\n```\n\nThis is simply a logout. It resets the session and deletes any \"remember me\" cookie that may be set.\n\nUnfortunately, while a new session ID is generated, the `Set-Cookie:` header lacks this information (presumably because the session logic has a reference to some stale cookie data, and the controller overwrites it).\n\nThe session key is just `SESSID` in these headers.\n\nIn the request:\n\n`Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO`\n\nAnd in the response (no mention of the newly generated session ID):\n\n`Set-Cookie: secureusertokens=; path=/; expires=Thu, 01-Jan-1970 00:00:00 GMT`\n\nNow if I remove the call to `cookies.delete(...)` in the controller.\n\nIn the request (identical):\n\n`Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO`\n\nAnd in the response (correct!!):\n\n`Set-Cookie: SESSID=50640523cf32b5b0fe8c93eb16aba6dc; path=/; HttpOnly`\n\nIt seems that I can either have the new session ID sent, or the \"remember me\" cookie deleted, but not both. I can work around this by manually sending the new cookie, but it seems like a bug to me ;)\n\nI have my own custom `SessionStore` (MemCache + MySQL), but it does not set these cookies, that happens elsewhere.\n", "labels": [], "number": 372, "updated_at": "2011-05-23 23:48:48", "user": 37948, "closed_at": "2011-05-23 23:48:48", "id": 842044, "title": "Rails 3 deleting a cookie AND calling reset_session does not send new session ID", "url": "https://api.github.com/repos/rails/rails/issues/372", "created_at": "2011-05-03 06:49:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1092683", "text": "Is this a regression (i.e. did it work in previous rails versions)? Can you provide a failing test case?\n", "created_at": "2011-05-03 08:48:01", "user": 9582, "id": 1092683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1092884", "text": "I'm new to Rails, so haven't used a previous version.  I'll try to write a test case (haven't quite gotten that far yet, but I assume it's just xUnit style).  It should be extremely simple to test manually though:\n1.  Put something in the session, take note of the session ID\n2.  Set a cookie (anything will do)\n3.  In a different controller, call reset_session and also delete that cookie you set\n4. If it's working, you _should_ see a Set-Cookie: for a new session ID to prevent session fixation, and also for the deletion of your other cookie.  What you'll actually see, however, is only the deletion of your cookie, not the passing back of the new session ID\n5.  Repeat the process, omitting the cookie deletion line.  Note that the new session ID _is_ correctly passed back.\n", "created_at": "2011-05-03 09:56:57", "user": 37948, "id": 1092884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1092895", "text": "The problem is that we (Rails Core Members) unfortunately don't have the time to reproduce all errors manually. Providing a test case would speed up this issue being fixed considerably. :) Please let me know if you need any help writing the test cases. You can find similar ones inside the directory \"actionpack/test/dispatch\".\n\nYou can also run tests just for actionpack by going into the actionpack directory and running \"rake test\". If you want to run test for a specific file, you can also go to actionpack directory and type: \"ruby -Itest test/dispatch/session_test.rb\"\n", "created_at": "2011-05-03 10:00:35", "user": 9582, "id": 1092895}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1092899", "text": "All good, I'm a TDD developer so I doubt there's a big paradigm shift, I'm just learning my way around Rails at the moment before we start to port a large existing PHP web app to it.\n", "created_at": "2011-05-03 10:03:09", "user": 37948, "id": 1092899}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115033", "text": "Any news here? Can we help you somehow?\n", "created_at": "2011-05-07 09:55:31", "user": 9582, "id": 1115033}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115040", "text": "Hi,\n\nSorry I haven't gotten around to this yet as I've been working on other things.  I worked around the problem with a redirect to cause the two operations to be done over two requests, so it's not directly impacting on us.\n\nCheers,\n\nChris\n\nEl 07/05/2011, a las 19:55, josevalim escribi√≥:\n\n> Any news here? Can we help you somehow?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/372#comment_1115033\n", "created_at": "2011-05-07 10:00:35", "user": 37948, "id": 1115040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222262", "text": "Just a quick update.  The bug is even simpler... I'm amazed this hasn't been reported before (either that or I have some weird installation issue).  Basically you cannot set more than one cookie in the same request.  Try it.\n\n``` ruby\ncookies[:first] = 42\ncookies[:second] = 99\n```\n\nThe only one that actually gets set is `cookies[:second]`.\n\nWill a functional test from a rails install be enough or do I actually have to figure out how to unit test the cookie/controller/whatever component is to blame?  There's so much of it, I'd have no idea where to begin.\n", "created_at": "2011-05-23 15:34:41", "user": 37948, "id": 1222262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222271", "text": "The simplest test you are able to produce that reproduces the error is welcome. It doesn't matter if it is functional or unit one.\n", "created_at": "2011-05-23 15:36:44", "user": 9582, "id": 1222271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222518", "text": "Ok, here goes.  Testing, I found that the simple `cookies[:key] = \"value\"` works ok, but adding `:secure` breaks it.\n\nIt's 2am and I'm about to head to bed, but if I discover anything else tomorrow I'll add a note.\n\n``` ruby\nrequire 'test_helper'\n\nclass CookieBugTest < ActionController::TestCase\n\n  COOKIE_KEY_A = \"one\"\n  COOKIE_KEY_B = \"two\"\n\n  class CookieBugController < ApplicationController\n    def set_two_secure_cookies\n      cookies[COOKIE_KEY_A] = {\n        :value => \"anything\",\n        :secure => true\n      }\n      cookies[COOKIE_KEY_B] = {\n        :value => \"another\",\n        :secure => true\n      }\n      render :text => \"ok\"\n    end\n  end\n\n  def setup\n    @controller = CookieBugController.new\n    Rails.application.routes.draw do\n      match \"/anything\" => \"cookie_bug_test/cookie_bug#set_two_secure_cookies\"\n    end\n  end\n\n  test \"should be able to set two secure cookies in the same request\" do\n    post :set_two_secure_cookies\n    assert_response :success\n\n    assert cookies[COOKIE_KEY_A], \"first cookie should be set\"\n    assert cookies[COOKIE_KEY_B], \"second cookie should be set\"\n  end\n\nend\n```\n", "created_at": "2011-05-23 16:17:47", "user": 37948, "id": 1222518}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222556", "text": "I started taking a look at adding a test case for this, but one already exists (and passes): https://github.com/rails/rails/blob/master/actionpack/test/dispatch/cookies_test.rb#L201-206\n", "created_at": "2011-05-23 16:22:35", "user": 483, "id": 1222556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222579", "text": "@nakajima Maybe they both need to be secure in order to reproduce the failure?\n", "created_at": "2011-05-23 16:25:28", "user": 9582, "id": 1222579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222585", "text": "Try it with `:secure => true`.  Hmm, _facepalm_... I have this in my config `config.middleware.use Rack::SslEnforcer` because we need to enforce SSL (almost, but not entirely) site-wide.  It wouldn't surprise me if this a bug with that middleware and not with Rails.  I'll have to try uninstalling it tomorrow and see if anything changes.\n", "created_at": "2011-05-23 16:26:13", "user": 37948, "id": 1222585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222590", "text": "@josevalim probably yes, i'm testing the same thing here, only with :secure it break\n", "created_at": "2011-05-23 16:27:23", "user": 105491, "id": 1222590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222681", "text": "`:secure` seems to work. These tests still pass:\n\n```\ndiff --git a/actionpack/test/dispatch/cookies_test.rb b/actionpack/test/dispatch/cookies_test.rb\nindex e42c39f..cdd962d 100644\n--- a/actionpack/test/dispatch/cookies_test.rb\n+++ b/actionpack/test/dispatch/cookies_test.rb\n@@ -28,6 +28,18 @@ class CookiesTest < ActionController::TestCase\n       head :ok\n     end\n\n+    def set_multiple_secure_cookies\n+      cookies[\"user_name\"] = { :value => \"david\", :expires => Time.utc(2005, 10, 10,5), :secure => true }\n+      cookies[\"login\"]     = { :value => \"XJ-122\", :secure => true }\n+      head :ok\n+    end\n+\n+    def set_mixed_secure_cookies\n+      cookies[\"user_name\"] = { :value => \"david\", :expires => Time.utc(2005, 10, 10,5), :secure => true }\n+      cookies[\"login\"]     = \"XJ-122\"\n+      head :ok\n+    end\n+\n     def access_frozen_cookies\n       cookies[\"will\"] = \"work\"\n       head :ok\n@@ -205,6 +217,22 @@ class CookiesTest < ActionController::TestCase\n     assert_equal({\"login\" => \"XJ-122\", \"user_name\" => \"david\"}, @response.cookies)\n   end\n\n+  def test_multiple_secure_cookies\n+    @request.env[\"HTTPS\"] = \"on\"\n+    get :set_multiple_secure_cookies\n+    assert_equal 2, @response.cookies.size\n+    assert_cookie_header \"user_name=david; path=/; expires=Mon, 10-Oct-2005 05:00:00 GMT; secure\\nlogin=XJ-122; path=/; secure\"\n+    assert_equal({\"login\" => \"XJ-122\", \"user_name\" => \"david\"}, @response.cookies)\n+  end\n+\n+  def test_mixed_secure_cookies\n+    @request.env[\"HTTPS\"] = \"on\"\n+    get :set_mixed_secure_cookies\n+    assert_equal 2, @response.cookies.size\n+    assert_cookie_header \"user_name=david; path=/; expires=Mon, 10-Oct-2005 05:00:00 GMT; secure\\nlogin=XJ-122; path=/\"\n+    assert_equal({\"login\" => \"XJ-122\", \"user_name\" => \"david\"}, @response.cookies)\n+  end\n+\n   def test_setting_test_cookie\n     assert_nothing_raised { get :access_frozen_cookies }\n   end\n@@ -417,7 +445,7 @@ class CookiesTest < ActionController::TestCase\n     assert_cookie_header \"user_name=; path=/; expires=Thu, 01-Jan-1970 00:00:00 GMT\"\n   end\n\n-  \n+\n   def test_cookies_hash_is_indifferent_access\n       get :symbol_key\n       assert_equal \"david\", cookies[:user_name]\n```\n", "created_at": "2011-05-23 16:42:48", "user": 483, "id": 1222681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222691", "text": "@nakajima, if you want to make those tests a patch, I would happily apply them.\n", "created_at": "2011-05-23 16:44:19", "user": 9582, "id": 1222691}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222692", "text": "@d11wtq thanks for all the work debugging this.\n", "created_at": "2011-05-23 16:44:34", "user": 9582, "id": 1222692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1224795", "text": "It's odd, playing some more, the cookies hash is completely empty in my test case.  @stjhimy, same for you?\n\nThis is different to the behaviour I get when not in a functional test.\n\nI'll try disabling this Rack::SSLEnforcer middleware.\n\nNope.  Even with the middleware off, the test still fails.  Might be an issue with functional tests themselves not working correctly with secure cookies?\n", "created_at": "2011-05-23 22:42:31", "user": 37948, "id": 1224795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1224868", "text": "Ok, I'm seriously not making this up.  For the sake of my sanity (and to minimize hair loss), can somebody else please try this outside of the context of a test case and just try it for real?  The test case doesn't seem to do the same thing as a manual test.  I have no idea why.  I'm using 3.0.7.\n\nWhat I literally just did now:\n1.  Open the Inspector console in Chrome and get the document headers panel open\n2.  In an empty controller action (though with a template, or some view to prevent it raising an error) just add:\n   \n   ``` ruby\n   cookies[:first_cookie] = 42\n   cookies[:second_cookie] = 99\n   ```\n3.  Load the page and look at the headers:\n   \n   I'm staring at this right now:\n   \n   ```\n   Set-Cookie: second_cookie=99; path=/\n   ```\n\nThis is my Gemfile.lock\n\n```\nGEM\n  remote: http://rubygems.org/\n  specs:\n    abstract (1.0.0)\n    actionmailer (3.0.7)\n      actionpack (= 3.0.7)\n      mail (~> 2.2.15)\n    actionpack (3.0.7)\n      activemodel (= 3.0.7)\n      activesupport (= 3.0.7)\n      builder (~> 2.1.2)\n      erubis (~> 2.6.6)\n      i18n (~> 0.5.0)\n      rack (~> 1.2.1)\n      rack-mount (~> 0.6.14)\n      rack-test (~> 0.5.7)\n      tzinfo (~> 0.3.23)\n    activemodel (3.0.7)\n      activesupport (= 3.0.7)\n      builder (~> 2.1.2)\n      i18n (~> 0.5.0)\n    activesupport (3.0.7)\n    addressable (2.2.6)\n    aws-s3 (0.6.2)\n      builder\n      mime-types\n      xml-simple\n    bcrypt-ruby (2.1.4)\n    builder (2.1.2)\n    capistrano (2.6.0)\n      highline\n      net-scp (>= 1.0.0)\n      net-sftp (>= 2.0.0)\n      net-ssh (>= 2.0.14)\n      net-ssh-gateway (>= 1.1.0)\n    data_objects (0.10.5)\n      addressable (~> 2.1)\n    database_cleaner (0.6.7)\n    dm-active_model (1.1.0)\n      activemodel (~> 3.0.4)\n      dm-core (~> 1.1.0)\n    dm-aggregates (1.1.0)\n      dm-core (~> 1.1.0)\n    dm-core (1.1.0)\n      addressable (~> 2.2.4)\n    dm-do-adapter (1.1.0)\n      data_objects (~> 0.10.2)\n      dm-core (~> 1.1.0)\n    dm-migrations (1.1.0)\n      dm-core (~> 1.1.0)\n    dm-mysql-adapter (1.1.0)\n      dm-do-adapter (~> 1.1.0)\n      do_mysql (~> 0.10.2)\n    dm-rails (1.1.0)\n      actionpack (~> 3.0.4)\n      dm-active_model (~> 1.1.0)\n      dm-core (~> 1.1.0)\n      railties (~> 3.0.4)\n    dm-timestamps (1.1.0)\n      dm-core (~> 1.1.0)\n    dm-types (1.1.0)\n      bcrypt-ruby (~> 2.1.4)\n      dm-core (~> 1.1.0)\n      fastercsv (~> 1.5.4)\n      json (~> 1.4.6)\n      stringex (~> 1.2.0)\n      uuidtools (~> 2.1.2)\n    dm-validations (1.1.0)\n      dm-core (~> 1.1.0)\n    do_mysql (0.10.5)\n      data_objects (= 0.10.5)\n    erubis (2.6.6)\n      abstract (>= 1.0.0)\n    fastercsv (1.5.4)\n    highline (1.6.2)\n    i18n (0.5.0)\n    json (1.4.6)\n    kgio (2.4.0)\n    mail (2.2.19)\n      activesupport (>= 2.3.6)\n      i18n (>= 0.4.0)\n      mime-types (~> 1.16)\n      treetop (~> 1.4.8)\n    memcache-client (1.8.5)\n    mime-types (1.16)\n    net-scp (1.0.4)\n      net-ssh (>= 1.99.1)\n    net-sftp (2.0.5)\n      net-ssh (>= 2.0.9)\n    net-ssh (2.1.4)\n    net-ssh-gateway (1.1.0)\n      net-ssh (>= 1.99.1)\n    polyglot (0.3.1)\n    rack (1.2.2)\n    rack-mount (0.6.14)\n      rack (>= 1.0.0)\n    rack-test (0.5.7)\n      rack (>= 1.0)\n    railties (3.0.7)\n      actionpack (= 3.0.7)\n      activesupport (= 3.0.7)\n      rake (>= 0.8.7)\n      thor (~> 0.14.4)\n    rake (0.8.7)\n    stringex (1.2.1)\n    thor (0.14.6)\n    treetop (1.4.9)\n      polyglot (>= 0.3.1)\n    tzinfo (0.3.27)\n    unicorn (3.6.2)\n      kgio (~> 2.3)\n      rack\n    uuidtools (2.1.2)\n    xml-simple (1.0.15)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  actionmailer (~> 3.0.7)\n  actionpack (~> 3.0.7)\n  activesupport (~> 3.0.7)\n  aws-s3\n  capistrano\n  database_cleaner\n  dm-aggregates (~> 1.1)\n  dm-migrations (~> 1.1)\n  dm-mysql-adapter (~> 1.1)\n  dm-rails (~> 1.1)\n  dm-timestamps (~> 1.1)\n  dm-types (~> 1.1)\n  dm-validations (~> 1.1)\n  memcache-client\n  railties (~> 3.0.7)\n  unicorn (~> 3.6)\n```\n\nLet me know if there's anything else I can do to try and narrow this down.\n", "created_at": "2011-05-23 22:54:44", "user": 37948, "id": 1224868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1224968", "text": "i'm testing in a new project now, rails 3.0.7 and the two cookies are in the chrome inspector, i will try with ruby 1.9.2 now, brb\n", "created_at": "2011-05-23 23:17:27", "user": 105491, "id": 1224968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1224988", "text": "I'll have a go at trying it with 1.8.7 too, thanks for trying this :)\n", "created_at": "2011-05-23 23:25:35", "user": 37948, "id": 1224988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1225063", "text": "Creating a blank project it's working for me.  Sorry about this.  I'll have to figure out what I have installed that's causing it.\n", "created_at": "2011-05-23 23:44:58", "user": 37948, "id": 1225063}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1225068", "text": "Let me know if you find which is causing the bug :)\n\nOn Mon, May 23, 2011 at 8:44 PM, d11wtq <\nreply@reply.github.com>wrote:\n\n> Creating a blank project it's working for me.  Sorry about this.  I'll have\n> to figure out what I have installed that's causing it.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/372#comment_1225063\n\n## \n\nJhimy Fernandes Villar\nwww.stjhimy.com\n", "created_at": "2011-05-23 23:46:35", "user": 105491, "id": 1225068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1225072", "text": "Seems to be an issue with either squid or perlbal (load balancers/caching proxies).  When I by-pass those it's working.  I'll close this ticket.  Apologies once again.  Thanks so much for your help :)\n", "created_at": "2011-05-23 23:48:48", "user": 37948, "id": 1225072}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi guys,\n\nSo I've misably break the test on 1.8.7 due to hash order, so I've update the test case to fix it. Also, current Rails `master` is broken because you can't run `bundle update` due to `Rack`'s `HEAD` is at 1.3.0 already, so I've updated the dependency as well.\n\nWill be careful next time >_<\n", "labels": [], "number": 373, "updated_at": "2014-07-03 03:58:31", "user": 4912, "closed_at": "2011-05-03 09:57:22", "id": 842475, "title": "Fixing failing test case on 1.8.7 & bump Rack version", "url": "https://api.github.com/repos/rails/rails/issues/373", "created_at": "2011-05-03 09:55:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 374, "updated_at": "2014-07-03 03:58:37", "user": 8701, "closed_at": "2011-05-03 11:06:33", "id": 842641, "title": "Updated to the correct version of beta rack", "url": "https://api.github.com/repos/rails/rails/issues/374", "created_at": "2011-05-03 10:53:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1093088", "text": "Sorry, I have already pushed it on my fork.\n", "created_at": "2011-05-03 11:06:33", "user": 9582, "id": 1093088}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Due to the missing charset metatag, Google Chrome sometimes misidentifies the rescue page charset, resulting in incorrect characters being displayed.\n\nFor example:\n![Action Controller: Exception caught](https://img.skitch.com/20110503-bdkxy73g3qunhd9jyp8ms4arfi.png)\n\nThis commit also adds the correct HTML5 doctype and switches the font-family ordering for the benefit of Mac users (and other users who have Helvetica installed).\n\nPlease also apply to 3-0-stable.\n", "labels": [], "number": 375, "updated_at": "2014-06-27 16:15:56", "user": 43314, "closed_at": "2011-05-03 13:44:08", "id": 842646, "title": "Google Chrome sometimes incorrectly identifies the rescues template charset", "url": "https://api.github.com/repos/rails/rails/issues/375", "created_at": "2011-05-03 10:53:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1093318", "text": "In theory the charset should be sent with the Content-Type header, isn't being sent?\n\nhttp://www.w3.org/International/O-HTTP-charset\n\nThe other changes looks good.\n", "created_at": "2011-05-03 11:48:02", "user": 9582, "id": 1093318}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1093371", "text": "As Mozilla [notes](https://developer.mozilla.org/en/HTML/Element/meta#attr-charset): \"It is good practice, and strongly recommended, to define the character set using this attribute.\"\n\nThe charset doesn't seem be set in in the HTTP headers at all (and thus it defaults to ISO-8859-1):\n\n```\nConnection:Keep-Alive\nContent-Length:1143506\nContent-Type:text/html\nDate:Tue, 03 May 2011 11:59:15 GMT\nServer:WEBrick/1.3.1 (Ruby/1.9.2/2011-02-18)\nX-Runtime:0.658140\n```\n\nThe charset defined in the meta tag should of course match that sent in the HTTP headers (if any)‚Ä¶\n", "created_at": "2011-05-03 12:00:53", "user": 43314, "id": 1093371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1093504", "text": "\"This <meta> element is only a part of the algorithm to determine the character set of a page that browsers apply. Especially, the HTTP Content-Type header and any BOM elements have precedence over this element.\"\n\nI would prefer if we set the charset on the content-type header instead. It is clearly missing:\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/show_exceptions.rb#L119\n\nWe can get the default from AD::Response:\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/response.rb#L57\n\nCould you please update the pull request? And please add a test for the charset case?\n\nPS: @spastorino, this will probably work on Exceptron because we use the controller which automatically uses AD::Response and sets the charset. But we need to update the template as in this pull request and add a test for the charset.\n", "created_at": "2011-05-03 12:15:46", "user": 9582, "id": 1093504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1093857", "text": "I updated the pull request to set the charset and I added a testcase for it.\n", "created_at": "2011-05-03 13:34:52", "user": 43314, "id": 1093857}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 376, "updated_at": "2014-07-03 03:58:43", "user": 4912, "closed_at": "2011-05-03 11:10:06", "id": 842697, "title": "Update Rack dependency to 1.3.0.beta", "url": "https://api.github.com/repos/rails/rails/issues/376", "created_at": "2011-05-03 11:08:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1093098", "text": "Oops, seems like @josevalim has already pushed his.\n", "created_at": "2011-05-03 11:10:06", "user": 4912, "id": 1093098}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis commit raises an error if the old router draw method is used, along with a message advising them to either upgrade their routes or add rails_legacy_mapper to their Gemfile.\n\nLet me know if the error type needs changing.\n\nThanks,\n\nJosh\n", "labels": [], "number": 377, "updated_at": "2014-07-03 03:58:45", "user": 8701, "closed_at": "2011-05-03 14:21:41", "id": 843524, "title": "raise an error if the old router draw method is used", "url": "https://api.github.com/repos/rails/rails/issues/377", "created_at": "2011-05-03 13:55:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1094079", "text": "updated :)\n", "created_at": "2011-05-03 14:19:06", "user": 8701, "id": 1094079}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello, Today when we want a select_tag with a prompt we need to pass :include_bank => \"My Prompt\". I think this is incoherent with the select method from form builders. Also, the documentation don't cover this behavior, which means, to know about include_blank with string people should read the source code.\n\nMy small pull request make select_tag behave like select and add docs from prompt and include blank. \n\nThanks.\n", "labels": [], "number": 378, "updated_at": "2014-07-03 03:58:48", "user": 6641, "closed_at": "2011-05-03 15:02:20", "id": 843769, "title": "Select_tag should have the same API of select from form_builder", "url": "https://api.github.com/repos/rails/rails/issues/378", "created_at": "2011-05-03 14:44:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1094282", "text": "Merged. Could you also please check if we could refactor f.select, f.time_zone_select and friends now that prompt is on select_tag?\n", "created_at": "2011-05-03 15:01:10", "user": 9582, "id": 1094282}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1096291", "text": "Do you mean refactor f.select (and others) to use select_tag under the hood?\n\nOn ter√ßa-feira, 3 de maio de 2011 at 12:01, josevalim wrote:\n\n> Merged. Could you also please check if we could refactor f.select, f.time_zone_select and friends now that prompt is on select_tag?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/378#issuecomment-1094282\n", "created_at": "2011-05-03 20:37:47", "user": 6641, "id": 1096291}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1096299", "text": "Ah, those helpers don't use select_tag? So there is nothing to change then. :)\n", "created_at": "2011-05-03 20:39:25", "user": 9582, "id": 1096299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1096334", "text": "Actualy they don't user the select_tag helper but do something similar \n\n```\ndef select(object, method, choices, options = {}, html_options = {})\n  InstanceTag.new(object, method, self, options.delete(:object)).to_select_tag(choices, options, html_options)\nend\n\ndef to_select_tag(choices, options, html_options)\n  html_options = html_options.stringify_keys\n  add_default_name_and_id(html_options)\n  value = value(object)\n  selected_value = options.has_key?(:selected) ? options[:selected] : value\n  disabled_value = options.has_key?(:disabled) ? options[:disabled] : nil\n  content_tag(\"select\", add_options(options_for_select(choices, :selected => selected_value, :disabled => disabled_value), options, selected_value), html_options)\nend\n```\n\nMaybe I could refactor to_select_tag to call select_tag. \n", "created_at": "2011-05-03 20:47:54", "user": 6641, "id": 1096334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1096389", "text": "That may be worth a try.\n", "created_at": "2011-05-03 20:57:58", "user": 9582, "id": 1096389}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/5478/\n\nIt doesn't look like this issue was ever actually resolved, as the patch supplied in the comments was never actually applied to the source tree. For instance, \n\n``` ruby\nclass MyTable < ActiveRecord::Base\n   set_table_name 'my_view'\nend\n\nMyTable.table_exists? # => false\n```\n\nThis is when using PostgreSQL as a backend. I can't find any mention of pg_views anywhere in the source, so I don't think that the patch was ever applied properly.\n", "labels": [], "number": 379, "updated_at": "2011-10-09 02:58:36", "user": 84783, "closed_at": "2011-10-09 02:58:36", "id": 844795, "title": "Lighthouse 5478 - Postgres and Sqlite3 no longer able to map to database views ", "url": "https://api.github.com/repos/rails/rails/issues/379", "created_at": "2011-05-03 18:01:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1297066", "text": "I've added a test case for this in #1469.\nThe test does not fail. The issue then appears to have been solved.\n", "created_at": "2011-06-03 14:31:51", "user": 9347, "id": 1297066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1467234", "text": "After more reflection, I don't think this is really an issue. ActiveRecord manages only tables anyway, not views.\nIf you need views management in your app, use or make a gem which does that.\n", "created_at": "2011-06-29 14:05:42", "user": 9347, "id": 1467234}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixes typos in a few params wrapper test method names.\n", "labels": [], "number": 380, "updated_at": "2014-07-03 03:58:54", "user": 146214, "closed_at": "2011-05-03 18:19:34", "id": 844842, "title": "Fixes typos in params wrapper test", "url": "https://api.github.com/repos/rails/rails/issues/380", "created_at": "2011-05-03 18:07:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nI added the mysql schema test to mysql2 adapter, and fixed the corresponding failures.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 381, "updated_at": "2014-06-26 10:06:23", "user": 8701, "closed_at": "2011-05-03 20:54:06", "id": 845206, "title": "Added the mysql schema test to mysql2 adapter", "url": "https://api.github.com/repos/rails/rails/issues/381", "created_at": "2011-05-03 19:18:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "... as opposed to being partially committed.  Only fixes behavior in MRI 1.8 and Rubinius.  JRuby and 1.9 will still work the same since their Thread.current.status won't be 'aborting'\n", "labels": ["activerecord"], "number": 382, "updated_at": "2014-06-27 07:24:07", "user": 10137, "closed_at": "2012-06-19 03:07:46", "id": 846895, "title": "transactions are rolled back if thread is killed during transaction", "url": "https://api.github.com/repos/rails/rails/issues/382", "created_at": "2011-05-04 03:58:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120717", "text": "`Thread#kill` and `Thread#raise` are basically impossible to use in a safe and reliable manner because the exceptions can come from anywhere and be of any type, Charles from jruby had a [great write up about it several years ago](http://blog.headius.com/2008/02/ruby-threadraise-threadkill-timeoutrb.html).  For example your particular patch won't help if the exception comes inside the `commit_db_transaction` method itself.\n\nI think attempting to be well behaved in the presence of `Thread#kill` is going to be too much effort to be worthwhile.\n", "created_at": "2011-05-09 00:34:30", "user": 197, "id": 1120717}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120732", "text": "Sorry, should have given context, this isn't to deal with the issue Headius raises.  http://coderrr.wordpress.com/2011/05/03/beware-of-threadkill-or-your-activerecord-transactions-are-in-danger-of-being-partially-committed/\n", "created_at": "2011-05-09 00:45:18", "user": 10137, "id": 1120732}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120749", "text": "I realise that,  however my point remains,  it's essentially impossible to have deterministic code in the presence of Thread#kill, your code should never call it.\n\nWhy were you calling it?\n", "created_at": "2011-05-09 00:54:07", "user": 197, "id": 1120749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120753", "text": "Did you read the post?  It pretty much explains the issue exactly.  tldr is all threads are Thread#killed when a process terminates.\n", "created_at": "2011-05-09 00:55:24", "user": 10137, "id": 1120753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120767", "text": "Indeed I did read the post, thanks for asking :P  What I didn't see is why you didn't register a TERM handler?\n\nMy objection remains all the same, #kill and #raise can arise basically anywhere and I'm not sold that having a single potential case addressed with code that only runs on a subset of our supported runtimes is justified here given the literally endless number of cases which can be result from the methods in question.\n", "created_at": "2011-05-09 01:02:31", "user": 197, "id": 1120767}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120781", "text": "K so firstly I did mention that a signal handler is what you should do and mitigates the issue.  Of course if something goes wrong in your signal handler you end up getting Thread#killed again.\n\nSecondly, this isn't a solution for Thread#raise at all, only Thread#kill.\n\nThirdly and most importantly, this makes sure you will NEVER get a partially committed transaction due to a Thread#kill.  Doesn't matter where the interpreter is when it's called.  Of course, this is only true on 1.8 and Rubinius unless the others also change their thread status behavior (which I think they probably should).\n", "created_at": "2011-05-09 01:09:35", "user": 10137, "id": 1120781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120820", "text": "My next suggestion was going to be to refactor the change so that instead of changing here it's in commit_db_transction (it could simply raise if the thread is aborting). However that would prevent you from deliberately commiting transactions in ensure blocks when the thread is being killed....  In fact doesn't your code here prevent people from committing in ensure blocks?\n\nI can definitely see your point, but a partial fix for a subset of interpreters isn't really good enough.  I'll see if I can ping the jruby guys to get their thoughts on the change and whether they intend changing their code's behaviour\n", "created_at": "2011-05-09 01:29:08", "user": 197, "id": 1120820}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120847", "text": "Yea it'd be great if you could try to get 1.9 and JRuby to implement matching Thread.current.status behavior.\n\nMy code only prevents transactions from being committed when the Thread is being killed.  This is how it should be because if the Thread is being killed you have no way of knowing whether the transaction was completed or not (aside from the local var / flow control stuff I talked about in the post).\n\nThe only issue I see with raising in commit_db_transaction if the Thread is being killed is that (unless you catch that exception) then you won't explicitly call rollback.  But maybe that isn't an issue.\n", "created_at": "2011-05-09 01:40:26", "user": 10137, "id": 1120847}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335000", "text": "This is a reasonable concern, but I think the platform-specific fix isn't going to fly since everyone's moving to 1.9.x where it doesn't even work.\n\nIs there a better way? How about the local variable approach in your blog post?\n", "created_at": "2011-10-09 03:11:31", "user": 199, "id": 2335000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335266", "text": "@jeremy, not that I could figure out when I was researching this.  The local variable approach will roll back any transaction that uses the flow control statements I mention in the post.  I think the only hope is to get 1.9 and jruby to set Thread#status to 'aborting' consistently.\n", "created_at": "2011-10-09 04:48:37", "user": 10137, "id": 2335266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4214561", "text": "@jeremy @coderrr ping - this one seems to loose relevance with rails 4 being 1.9 only. wdyt? let's close it?\n", "created_at": "2012-02-28 12:17:34", "user": 78422, "id": 4214561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5320453", "text": "@mhfs No responses for 2 months; close it.\n", "created_at": "2012-04-24 23:47:46", "user": 2130, "id": 5320453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5320562", "text": "@jeremyf I don't have permission to close it...\n", "created_at": "2012-04-24 23:54:42", "user": 78422, "id": 5320562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5320769", "text": "@mhfs sorry about that‚Ä¶@coderrr any follow-up?\n", "created_at": "2012-04-25 00:08:59", "user": 2130, "id": 5320769}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5320815", "text": "I can close, but I guess we should not. I think that issue is still there either with Ruby 1.9. I'm asking to the core team.\n", "created_at": "2012-04-25 00:13:11", "user": 47848, "id": 5320815}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6415066", "text": "Closing as we only support 1.9 now and the proposed changes here don't work there.\n", "created_at": "2012-06-19 03:09:23", "user": 197, "id": 6415066}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add a couple of missing activesupport requires so AR::Migration can be used independently.\n", "labels": [], "number": 383, "updated_at": "2014-06-18 06:55:15", "user": 438, "closed_at": "2011-05-04 06:24:45", "id": 847079, "title": "Extra requires for AR::Migration", "url": "https://api.github.com/repos/rails/rails/issues/383", "created_at": "2011-05-04 05:16:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1098115", "text": "+1, I can see how this could be useful in projects that don't necessarily use Rails but _do_ use Active Record.\n", "created_at": "2011-05-04 05:18:19", "user": 2687, "id": 1098115}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@fxn fixed failing tests after removal of Jquery from vendor.\n", "labels": [], "number": 384, "updated_at": "2014-07-03 03:59:07", "user": 3948, "closed_at": "2011-05-04 09:54:25", "id": 847899, "title": "Fixed tests for new_plugin_generator.", "url": "https://api.github.com/repos/rails/rails/issues/384", "created_at": "2011-05-04 09:45:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1098964", "text": "Ugh, thanks!\n", "created_at": "2011-05-04 09:54:05", "user": 3387, "id": 1098964}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This issue has been removed.\n", "labels": [], "number": 385, "updated_at": "2011-05-04 16:47:07", "user": 313799, "closed_at": "2011-05-04 16:47:07", "id": 849516, "title": "Ignore", "url": "https://api.github.com/repos/rails/rails/issues/385", "created_at": "2011-05-04 16:46:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm attempting to upgrade a Rails 3.0 app to 3.1 edge but all of my view specs fail within action_view/test_case.\n\n```\nFailure/Error: Unable to find matching line from backtrace\nNameError:\n  method `protect_against_forgery?' not defined in #<Module:0x10a678468>\n# ruby/1.8/bundler/gems/rails-92661b0c501a/actionpack/lib/action_view/test_case.rb:132:in `remove_method'\n# ruby/1.8/bundler/gems/rails-92661b0c501a/actionpack/lib/action_view/test_case.rb:132:in `say_no_to_protect_against_forgery!'\n# ruby/1.8/bundler/gems/rails-92661b0c501a/actionpack/lib/action_view/test_case.rb:131:in `module_eval'\n# ruby/1.8/bundler/gems/rails-92661b0c501a/actionpack/lib/action_view/test_case.rb:131:in `say_no_to_protect_against_forgery!'\n# ruby/1.8/bundler/gems/rails-92661b0c501a/actionpack/lib/action_view/test_case.rb:100:in `setup_with_controller'\n# ruby/1.8/gems/rspec-rails-2.5.0/lib/rspec/rails/adapters.rb:11:in `send'\n# ruby/1.8/gems/rspec-rails-2.5.0/lib/rspec/rails/adapters.rb:11:in `setup'\n```\n", "labels": [], "number": 386, "updated_at": "2011-05-05 00:48:50", "user": 4805, "closed_at": "2011-05-05 00:48:50", "id": 849522, "title": "View specs fail with \"method `protect_against_forgery?' not defined in #<Module:0x10a678468>\"", "url": "https://api.github.com/repos/rails/rails/issues/386", "created_at": "2011-05-04 16:47:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1100985", "text": "Can you post a failing application on github? I will look into it asap.\n", "created_at": "2011-05-04 17:07:12", "user": 9582, "id": 1100985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1101271", "text": "Please check if it is fixed on master.\n", "created_at": "2011-05-04 18:05:55", "user": 9582, "id": 1101271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1103126", "text": "Fixed! Thanks Jos√©.\n", "created_at": "2011-05-05 00:48:50", "user": 4805, "id": 1103126}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "use remove_possible_method in favor of remove_method if method_defined?\n", "labels": [], "number": 387, "updated_at": "2014-06-26 20:52:56", "user": 83449, "closed_at": "2011-05-04 18:15:04", "id": 849959, "title": "Use #remove_possible_method instead", "url": "https://api.github.com/repos/rails/rails/issues/387", "created_at": "2011-05-04 18:09:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1101317", "text": "Cool. I think there are other places in actionpack that could be changed as well.\n", "created_at": "2011-05-04 18:13:27", "user": 9582, "id": 1101317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1101325", "text": "Yes, changing them all and will update the pull request.\n", "created_at": "2011-05-04 18:14:27", "user": 83449, "id": 1101325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1101330", "text": "Please send a new pull request then. This one was already applied. :D\n", "created_at": "2011-05-04 18:15:41", "user": 9582, "id": 1101330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1101390", "text": "here is the pull request for the other places I found it:\nhttps://github.com/rails/rails/pull/388\n\nThanks!\n", "created_at": "2011-05-04 18:25:27", "user": 83449, "id": 1101390}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use #remove_possible_method in favor of #remove_method if method_defined?\n", "labels": [], "number": 388, "updated_at": "2014-06-14 04:24:46", "user": 83449, "closed_at": "2011-05-08 14:42:08", "id": 850032, "title": "Better use #remove_possible_method here", "url": "https://api.github.com/repos/rails/rails/issues/388", "created_at": "2011-05-04 18:24:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1119210", "text": "Removed the use of #remove_possible_method on DateTime::Conversions\n", "created_at": "2011-05-08 14:35:22", "user": 83449, "id": 1119210}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove special-case code in the \"runner\" command, and replace it with a general solution to ensure that the logger gets flushed at exit. This solution works for \"runner\", \"console\", \"server\", rake tasks, and any other process that loads the Rails environment.\n\nHere's a detailed description of the issue that this commit resolves:\n### Rake tasks fail to log when running in production mode\n\nIn production mode, when you write a single line to the Rails logger via script/runner, it writes the line to production.log.  (This is, of course, the expected behavior.)\n\nIn production mode, when you write a single line to the Rails logger via rake, it writes nothing to production.log.  \n\nIt's odd to have this difference in behavior between running via script/runner and running via rake.  It seems to violate the principle of least surprise.  This [gist demonstrates the issue](https://gist.github.com/956295#file_script_with_output).\n", "labels": [], "number": 389, "updated_at": "2014-06-15 10:22:01", "user": 2988, "closed_at": "2011-05-06 16:44:04", "id": 851486, "title": "Always flush logger at exit", "url": "https://api.github.com/repos/rails/rails/issues/389", "created_at": "2011-05-05 00:21:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1104204", "text": "Do you think you can add a test? We have some tests in railties/test/application/\\* that you could use as example for this one. For instance, you have an example of how to define a rake task here:\n\nhttps://github.com/rails/rails/blob/master/railties/test/application/rake_test.rb#L37\n\nAnd an example to assert for the logging here:\n\nhttps://github.com/rails/rails/blob/master/railties/test/application/rake_test.rb#L73\n\nYou just need to force the env to production when running the task.\n", "created_at": "2011-05-05 07:29:13", "user": 9582, "id": 1104204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111736", "text": "@josevalim Thanks for pointing me toward those example tests.  I've added a test to verify that production rake tasks do indeed flush the logger.\n", "created_at": "2011-05-06 15:07:37", "user": 2988, "id": 1111736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111812", "text": "Github says the pull request cannot be automatically merged. Could you please rebase? I will merge it straight away then!\n", "created_at": "2011-05-06 15:18:43", "user": 9582, "id": 1111812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112233", "text": "@josevalim Rebased and pushed.  Thanks for the quick response!\n", "created_at": "2011-05-06 16:34:38", "user": 2988, "id": 1112233}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326607", "text": "Excellent, thanks! I was just about to do this myself. :-)\n", "created_at": "2011-06-08 13:24:53", "user": 17709, "id": 1326607}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Need jruby-openssl until they merged it with Jruby. \n", "labels": [], "number": 390, "updated_at": "2014-07-02 03:10:21", "user": 3948, "closed_at": "2011-05-05 07:30:48", "id": 851839, "title": "Adding jruby-openssl in Gemfile by default. #jruby", "url": "https://api.github.com/repos/rails/rails/issues/390", "created_at": "2011-05-05 03:02:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just cleaning up the comments in the generated wrap_parameters.rb file\n", "labels": [], "number": 391, "updated_at": "2014-07-03 03:59:30", "user": 167215, "closed_at": "2011-05-05 07:25:07", "id": 852130, "title": "Tidying up the language in wrap_parameters.rb", "url": "https://api.github.com/repos/rails/rails/issues/391", "created_at": "2011-05-05 06:07:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm using ruby 1.9.2, I got this error when running a fresh generated performance test:\n\n```\nStarted\n/home/jan/.rvm/gems/ruby-1.9.2-p180/gems/aws-s3-0.6.2/lib/aws/s3/extensions.rb:206:in `const_missing_from_s3_library': uninitialized constant CategoryPagesTest::STARTED (NameError)\n    from /home/jan/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-e99c1e3a3bd2/activesupport/lib/active_support/testing/performance.rb:39:in `run'\n    from /home/jan/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/minitest/unit.rb:656:in `block (2 levels) in run_test_suites'\n    from /home/jan/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/minitest/unit.rb:650:in `each'\n    from /home/jan/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/minitest/unit.rb:650:in `block in run_test_suites'\n    from /home/jan/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/minitest/unit.rb:649:in `each'\n    from /home/jan/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/minitest/unit.rb:649:in `run_test_suites'\n    from /home/jan/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/minitest/unit.rb:609:in `run'\n    from /home/jan/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/minitest/unit.rb:508:in `block in autorun'\n```\n\nSome investigation shows performance tests only works with old classic test:unit. The patch added support for minitest.\n", "labels": [], "number": 392, "updated_at": "2014-06-19 10:13:06", "user": 5958, "closed_at": "2011-05-05 10:08:38", "id": 852442, "title": "Patch for performance test: make it run with ruby19/minitest", "url": "https://api.github.com/repos/rails/rails/issues/392", "created_at": "2011-05-05 08:23:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1104405", "text": "Could you please add tests?\n", "created_at": "2011-05-05 08:25:01", "user": 9582, "id": 1104405}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1104651", "text": "Added, please have a look.\n", "created_at": "2011-05-05 09:20:43", "user": 5958, "id": 1104651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1104676", "text": "Cool, thanks! I am not completely familiar with Minitest, but I assume that the test you added will run on Test::Unit for 1.8 and on Minitest for 1.9, right?\n", "created_at": "2011-05-05 09:26:36", "user": 9582, "id": 1104676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1104836", "text": "Yes, minitest is the default of 1.9. The test will fail/pass on 1.9 without/with the patch, while always pass on 1.8.\n", "created_at": "2011-05-05 10:07:51", "user": 5958, "id": 1104836}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1104839", "text": "Merged, thanks!\n", "created_at": "2011-05-05 10:08:52", "user": 9582, "id": 1104839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1104852", "text": "Thank you :-)\n", "created_at": "2011-05-05 10:12:07", "user": 5958, "id": 1104852}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Browsers swallow the first newline after a textarea tag, as per the HTML spec. The text_area helpers in Rails do not emit a newline after the textarea tag and this has the unintended side effect that if the contents of the tag happens to start with a new line it will get eaten by the browser.\n\nIt's easy to reproduce by inserting a new line or two in a text area field in any rails app and then updating it (the newline only gets eaten on the second trip to the browser, so updating is necessary). It's not really possible to produce a failing unit test as this requires an actual browser to do the swallowing.\n\n(I looked through the code for a fix but the helper seems to delegate the generating of the actual tag to a generic \"content tag\" function. It would be ugly to make that content tag function behave differently for just one tag, so it seems that making the text_area helpers emit their own HTML would be the most straightforward option)\n", "labels": [], "number": 393, "updated_at": "2013-06-05 14:37:47", "user": 85734, "closed_at": "2012-02-28 18:23:29", "id": 852483, "title": "textarea helper swallows leading newline", "url": "https://api.github.com/repos/rails/rails/issues/393", "created_at": "2011-05-05 08:40:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1104764", "text": "Can you please point where the HTML spec states that a newline after `<textarea>` should be silently ignored? Neither http://dev.w3.org/html5/markup/textarea.html nor http://dev.w3.org/html5/markup/syntax.html#replaceable-character-data mention anything on this topic.\n", "created_at": "2011-05-05 09:50:49", "user": 7736, "id": 1104764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1104838", "text": "Hmm, you are right the documentation is not clear here http://www.w3.org/TR/html4/interact/forms.html#h-17.7 but the example given shows that the newline gets swallowed. I tested this behaviour in all browsers I have here and they do consistently eat the newline after the text area (a quick Google will confirm this as well).\n\nAs an aside, the textarea helper in ASP.NET does emit an additional new line, perhaps this is why all browser vendors choose to swallow it. This blog pots has a nice illustration: http://haacked.com/archive/2008/11/18/new-line-quirk-with-html-textarea.aspx\n", "created_at": "2011-05-05 10:08:18", "user": 85734, "id": 1104838}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115289", "text": "From the [HTML 4.01 specification appendices](http://www.w3.org/TR/html401/appendix/notes.html#notes-line-breaks):\n\n> SGML (see [[ISO8879](http://www.w3.org/TR/html401/references.html#ref-ISO8879)], section 7.6.1) specifies that a line break immediately\n> following a start tag must be ignored, as must a line break immediately \n> before an end tag. This applies to all HTML elements without exception.\n\nUnfortunately I can't find the same text in the HTML5 spec, but it would seem that this is expected browser behaviour for the foreseeable future. Especially as the HTML5 spec mostly formalizes existing browser behaviour.\n", "created_at": "2011-05-07 12:23:54", "user": 43314, "id": 1115289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1318884", "text": "> This applies to all HTML elements without exception.\n\nBased on that, it shouldn't only apply to textareas, but all tags.\n\nSo instead of `<textarea></textarea>`, we should have `<textarea>\\n</textarea>` right ?\n", "created_at": "2011-06-07 17:37:39", "user": 9347, "id": 1318884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1320180", "text": "The textarea tag is the only one that has the problem where a leading \\n can be swallowed, the other HTML tags are not sensitive to white space. So it would seem superfluous to add a \\n inside every tag.\n", "created_at": "2011-06-07 18:45:49", "user": 85734, "id": 1320180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1477675", "text": "Thanks for fixing that. I looked at the fix, and in this case it might actually be a bit more elegant to simply prefix the content with a newline. That way we don't have to put that extra parameter in for the 99% of the cases where it isn't needed. Good for performance too:\n\n```\ncontent_tag(\"textarea\", \"\\n#{html_escape(options.delete('value') || value_before_type_cast(object))}\", options)\n```\n", "created_at": "2011-06-30 20:04:57", "user": 85734, "id": 1477675}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1481528", "text": "oh, wait, the html_escape should go on the outside, I tested it and it works fine, so:\n\ncontent_tag(\"textarea\", html_escape(\"\\n#{options.delete('value') || value_before_type_cast(object)}\"), options)\n", "created_at": "2011-07-01 08:47:32", "user": 85734, "id": 1481528}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1484384", "text": "I think the opinion of a core team member would be better on this. @josevalim what do you think ?\n", "created_at": "2011-07-01 17:09:15", "user": 9347, "id": 1484384}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1485199", "text": "Good call, @dmathieu. Perhaps we could also see if and how another popular form plugin handles this. I'm taking a look at https://github.com/justinfrench/formtastic\n", "created_at": "2011-07-01 18:09:44", "user": 4126, "id": 1485199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2207255", "text": "This never actually got closed?\n", "created_at": "2011-09-27 04:47:23", "user": 10128, "id": 2207255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2208241", "text": "Yep, this bug has been in there since rails 1.0.\nThe suggested patch is a bit unwieldy though, since it can also be fixed by simply adding a single newline in the right place instead of adding an extra parameter to every content tag, perhaps that's why it didn't get picked up.\n", "created_at": "2011-09-27 08:03:07", "user": 85734, "id": 2208241}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335007", "text": "Crazy. @Fjan, @mathieu, got a simpler patch without the extra param? If this is broken everywhere, it should be default.\n", "created_at": "2011-10-09 03:14:46", "user": 199, "id": 2335007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3169916", "text": "@jeremy There's a simpler patch - better?\n", "created_at": "2011-12-15 22:07:50", "user": 131179, "id": 3169916}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3170032", "text": "@codykrieger Thanks, but this adds a hash lookup to every generated tag. Why not use the 1 line patch I suggested above? (excuse me for not doing it myself, I don't have git here)\n", "created_at": "2011-12-15 22:16:12", "user": 85734, "id": 3170032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3170155", "text": "I actually get a bunch of failures in the tests when using your patch:\n\n```\nFinished tests in 80.100596s, 42.4341 tests/s, 192.9074 assertions/s.\n\n  1) Failure:\ntest_text_area_with_escapes(FormHelperTest) [/Users/codykrieger/projects/forks/rails/actionpack/test/template/form_helper_test.rb:445]:\n<\"<textarea cols=\\\"40\\\" id=\\\"post_body\\\" name=\\\"post[body]\\\" rows=\\\"20\\\">\\nBack to &lt;i&gt;the&lt;/i&gt; hill and over it again!</textarea>\"> expected to be == to\n<\"<textarea cols=\\\"40\\\" id=\\\"post_body\\\" name=\\\"post[body]\\\" rows=\\\"20\\\">\\nBack to &amp;lt;i&amp;gt;the&amp;lt;/i&amp;gt; hill and over it again!</textarea>\">.\n\n  2) Failure:\ntest_text_area_with_html_entities(FormHelperTest) [/Users/codykrieger/projects/forks/rails/actionpack/test/template/form_helper_test.rb:460]:\n<\"<textarea cols=\\\"40\\\" id=\\\"post_body\\\" name=\\\"post[body]\\\" rows=\\\"20\\\">\\nThe HTML Entity for &amp; is &amp;amp;</textarea>\"> expected to be == to\n<\"<textarea cols=\\\"40\\\" id=\\\"post_body\\\" name=\\\"post[body]\\\" rows=\\\"20\\\">\\nThe HTML Entity for &amp;amp; is &amp;amp;amp;</textarea>\">.\n\n  3) Failure:\ntest_content_tag_with_newline(TagHelperTest) [/Users/codykrieger/projects/forks/rails/actionpack/test/template/tag_helper_test.rb:92]:\n<\"<textarea>\\nlimelight</textarea>\"> expected to be == to\n<\"<textarea>limelight</textarea>\">.\n\n3399 tests, 15452 assertions, 3 failures, 0 errors, 0 skips\nrake aborted!\n```\n\nLooks like things are being escaped oddly.\n\n**UPDATE**: Turning your patch into `content_tag(\"textarea\", \"\\n#{html_escape(options.delete('value') || value_before_type_cast(object))}\".html_safe, options)` fixed the first two failures.\n", "created_at": "2011-12-15 22:24:37", "user": 131179, "id": 3170155}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3170565", "text": "Yeah, the corrected one was actually what I suggested on July 1 (you probably picked the earlier one from an (untested) comment in response to the initial test).\n", "created_at": "2011-12-15 22:54:15", "user": 85734, "id": 3170565}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4193058", "text": "I opened a new pull request with a simpler solution. Could you check if it is satisfactory\n", "created_at": "2012-02-27 13:04:54", "user": 47848, "id": 4193058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4193262", "text": "I haven't tried it but I think the html_safe on the first line is not correct (the ERB:Util term is already html_safe and the value_before_type_cast may not be html safe). Just removing it should fix it.\n", "created_at": "2012-02-27 13:18:53", "user": 85734, "id": 4193262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4194020", "text": "@Fjan no. It is need. The ERB::Util expression is\n\n``` ruby\nERB::Util.html_escape(options.delete('value') || value_before_type_cast(object))\n```\n\nThis will output a html_safe string.\n\nSo if I call\n\n``` ruby\n\"\\n\".html_safe + ERB::Util.html_escape(options.delete('value') || value_before_type_cast(object))\n```\n\nIs the same thing that\n\n``` ruby\n\"\\n#{ERB::Util.html_escape(options.delete('value') || value_before_type_cast(object))}\".html_safe\n```\n\nBut the result of this expression need to be a html safe string, or the content_tag will escape the html again.\n", "created_at": "2012-02-27 14:10:58", "user": 47848, "id": 4194020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4195808", "text": "My point is that value_before_type_cast(object) may contain unsafe characters so you create a potential HTML injection exploit by doing that.\n", "created_at": "2012-02-27 15:41:27", "user": 85734, "id": 4195808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4196288", "text": "But it is escaped by `ERB::Util.html_escape`\n", "created_at": "2012-02-27 16:02:01", "user": 47848, "id": 4196288}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4196343", "text": "Oh, ok, sorry. That seems kind of pointless though: escaping it and then marking it html safe since the content_tag does the same thing.\n", "created_at": "2012-02-27 16:04:06", "user": 85734, "id": 4196343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4196527", "text": "I can change this line to:\n\n``` ruby\n\"\\n\".html_safe + ERB::Util.html_escape(options.delete('value') || value_before_type_cast(object))\n```\n\nBut this is the same thing that the current implementation.\n\nIf the result of this concatenation is not HTML safe the content_tag will escape the HTML again. So some tests will be broken.\n\nLike these one:\n\n```\n  1) Failure:\ntest_text_area_with_escapes(FormHelperTest) [/Users/rafaelmfranca/Projects/github/rails/actionpack/test/template/form_helper_test.rb:485]:\n--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n <textarea cols=\"40\" id=\"post_body\" name=\"post[body]\" rows=\"20\">\n-Back to &lt;i&gt;the&lt;/i&gt; hill and over it again!</textarea>\n+Back to &amp;lt;i&amp;gt;the&amp;lt;/i&amp;gt; hill and over it again!</textarea>\n\n\n  2) Failure:\ntest_text_area_with_html_entities(FormHelperTest) [/Users/rafaelmfranca/Projects/github/rails/actionpack/test/template/form_helper_test.rb:500]:\n--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n <textarea cols=\"40\" id=\"post_body\" name=\"post[body]\" rows=\"20\">\n-The HTML Entity for &amp; is &amp;amp;</textarea>\n+The HTML Entity for &amp;amp; is &amp;amp;amp;</textarea>\n```\n", "created_at": "2012-02-27 16:12:42", "user": 47848, "id": 4196527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4197710", "text": "Hey @Fjan. I refactored the code to leave the escape logic only with the `content_tag`. Now the code is cleaner.\n\nThanks to review it.\n", "created_at": "2012-02-27 16:58:39", "user": 47848, "id": 4197710}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4200795", "text": "Ok, great. Thanks very much for taking the time to do this. I think this bug is probably the longest standing one in Rails, it has been there since Rails 1. Cheers.\n", "created_at": "2012-02-27 19:17:20", "user": 85734, "id": 4200795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4214438", "text": "@jeremy @josevalim I guess this one can be closed since @rafaelfranca's #5190/#5191 have been merged.\n", "created_at": "2012-02-28 12:07:32", "user": 78422, "id": 4214438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4214932", "text": "What?! Github didn't close this?\n", "created_at": "2012-02-28 12:43:43", "user": 47848, "id": 4214932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4717351", "text": "@Fjan I'd like to go back to @codykrieger's original patch. I know it adds a hash lookup, but the \"simpler\" solution smacks of a hacky premature optimization.\n\nAlso, the currently implemented solution breaks textarea tags in all apps using HAML (which obviously has a huge user base in the Rails community.) The real problem here isn't just that HAML does something odd, it could easily break other extensions because the newline isn't part of the tag content (though the current patch treats it as such.) The newline is actually part of the tag not the content.\n\nAnyone have more input on this? @josevalim: if I opened a pull request to go back to @codykrieger's patch would that be acceptable?\n", "created_at": "2012-03-27 14:21:26", "user": 125331, "id": 4717351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4717758", "text": "Adding a hash look up for EVERY single HTML tag generated by Rails instead of adding a few bytes to the code base...  \"premature\" optimization would be the last qualification I would think off. Hacky I can live with, although you could argue that your preferred solution of \"magically\" adding a newline to the content is more of a hack than magically adding it to the tag where it belongs.\n\nWould you care to elaborate on the HAML problem? Why would an extension break because of an additional new line? Does HAML output an incorrect text area tag as well?\n", "created_at": "2012-03-27 14:39:42", "user": 85734, "id": 4717758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4718079", "text": "The reason I think it's hacky and premature optimization is that technically based on the HTML specs quoted, every tag should have a newline. Now we all know this isn't necessary, but it is true nonetheless. So the newline only being added to the textarea tag is to address browser implementations not being compatible with Rails not generating newlines in each tag.\n\nWhen you magically add it to the content (rather than to the tag) it breaks extensions like HAML because the content has changed (rather than the tag.) In the specific HAML case, HAML automatically preserves whitespace in textarea tags (so it turns newlines into their respective HTML codes) since indentation obviously shouldn't happen inside textarea content (or rather, the browser eats indentation, but you want the content whitespace to be preserved.) Since you've added a newline to the content, HAML preserves that whitespace and browsers add an additional newline. So every time a form containing one is submitted and an object updated an saved, it gets an extra newline tacked onto the beginning. So the patch is actually causing the reverse problem of the problem it intends to prevent.\n\nExtensions need to be able to access the actual content rather than modified content. And I doubt that a single hash lookup here (even though it's in every tag generated) really causes any measurable performance difference even on high usage apps. Hash lookups are performed in constant time and are in general extremely cheap, and there are lots of other parts of the view generation process (like view contexts for each partial) that cause exponentially higher overhead than a single hash lookup.\n\nIf you want to avoid the hash lookup, we could follow the spec and add newlines to every tag, but I don't think that would be appreciated...\n", "created_at": "2012-03-27 14:51:43", "user": 125331, "id": 4718079}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4718289", "text": "To be fair, just going with the original hash-lookup based patch won't automatically fix HAML, but it will making patching HAML far less dirty (and make it resilient to different versions of Rails with or without this fix.)\n", "created_at": "2012-03-27 15:00:10", "user": 125331, "id": 4718289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4718341", "text": "By \"far less dirty\" I mean that to patch HAML with Rails the way it currently works, then HAML will have to either check Rails versions or magically divine whether the newline beginning the textarea tag content is actually part of the content or is just part of the tag. There's no way of knowing definitively the way it's currently implement.\n", "created_at": "2012-03-27 15:01:55", "user": 125331, "id": 4718341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4718642", "text": "Well, opinions can differ on what's a worthwhile optimization, but I would venture that an additional lookup on every HTML tag on every page generated by every rails application in the world causes a larger CO2 footprint than you as a person. (That's true of any optimization in a hot part of a frequently used code base, but this is a very hot part of a very large installed base.)\n\nIf HAML's behaviour is that closely tied to the behavior of the Rails content_tag it should just be tied to the correct Rails version by its gem spec. After the fix HAML can assume a newline is already added, older Rails users get an older HAML gem, no hacking or version detecting needed.\n", "created_at": "2012-03-27 15:16:10", "user": 85734, "id": 4718642}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4718962", "text": "I realize that this is a hot piece of code, but I'd suggest that the other parts of this method still dwarf the cost of an additional hash lookup. For example, html escaping and the tag_options calls are both rather expensive.\n\nUnless there are benchmarks to back up the hash lookup being that consequential, I'd still say this is a premature optimization that shouldn't be the sole determinant of how this gets patched.\n\nWe shouldn't break correctness (the \\n isn't actually part of the content--though the current patch acts like it is) just to micro-optimize.\n", "created_at": "2012-03-27 15:30:29", "user": 125331, "id": 4718962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4719925", "text": "I agree the rest of the code base is wasting CPU cycles left and right (and that makes me sad). To give you one example of the numbers we are talking about: Twitter 20B page views, 890 tags on the page (I did a quick grep/google). You now already have something with 15 zeroes, let's say a server can do a million a second, then you are still left with 10^9 s = 31 additional servers per year just for Twitter. I am by no means a tree hugger, but you shouldn't think too lightly about your impact on global energy consumption and your responsibilities as a programmer.\n\nAnyway, I agree with you that the current implementation is a hack, we just differ on whether the added cost weighs up against making it slightly less hacky, especially since it's not really broken.\n", "created_at": "2012-03-27 16:05:53", "user": 85734, "id": 4719925}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4724749", "text": "Assuming 20 billion pages views a year, and 1000 tags on the page, then if a server can process a million per second you're looking at 232 additional server days, so under one extra server a year.\n\nInterestingly enough, in a quick benchmark (in an entirely unoptimized Ruby on my MacBook, I find that Ruby can do more than 20 million hash lookups in a second.\n\nSo I'd say again, I don't think this is really an issue from a performance perspective.\n\nPlus, the whole point of Ruby is to optimize for the user rather than for the machine. This case is very much optimizing for the machine rather than for the user.\n\nI realize that in this case the only problem is for plugins, but this creates a maintenance trap in the Rails code too. If you're working in the content_tag method, you expect content to be just that, the content. Not some modified variable with additional non-content information tacked on. The method that logically should know about this (separation of concerns) is content_tag--not the method calling it to create a textarea tag.\n", "created_at": "2012-03-27 19:44:05", "user": 125331, "id": 4724749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4729310", "text": "I don't feel like doing the math again, but even taking your number and adding that there additional logic and parameters being passed and that there's a lot more apps out there than twitter (and that the 20B number was from 2009) I'm sure I can come up with a large number.\n\nPerhaps this is not the best place to discuss this, but the principle of Ruby is to make it an optimal experience for the end-user. Matz himself writes mostly in Ansi C to give you that. Rails should follow that philosophy and do the same for its end users, not do something that's optimal for the HAML maintainers.\n\nEdit: I just noticed your comment in another thread that points out the original fix may have a bug. That changes matters, of course\n", "created_at": "2012-03-27 21:25:05", "user": 85734, "id": 4729310}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4737388", "text": "I definitely understand your concerns re: speed. Rails 3 is already significantly slower than Rails 2 in some cases. I'd just much rather squeeze that performance out of things that can be optimized without making things harder to maintain in Rails or in other projects.\n\nThanks for all the push back though. In the end, all the discussion hopefully pushes us all into the best of both worlds.\n", "created_at": "2012-03-27 22:50:12", "user": 125331, "id": 4737388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5437989", "text": "Who came up with this idea that some element should have a newline character in a textarea? It makes NO sense at all. Basic HTML always says < pre >< / pre > isn't < pre >[ new line here]< / pre >  Why would a textarea be different?\n\nGoogle Chrome users now have an issue thanks to this (if I google this problem, I see allot of frustrated users by enabling this!). They all get free bonus _unwanted_ characters before text_area's. \n\n_PLEASE roll this back to normal state_\n\nOr is there any reason why anyone should/would want this character injected?\n", "created_at": "2012-05-01 12:53:03", "user": 306471, "id": 5437989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5438089", "text": "@AngeloMichel Actually, the HTML spec came up with the idea. The character needs to be injected because browser (including most versions of Chrome) actually swallow a leading newline, so if you don't have one, you actually lose real information from the textarea (assuming the real content started with a newline.)\n\nIf you're using Haml, then the extra leading spaces/newlines actually being in the content is a known bug, and there is a fixed version out as well. Check the Haml Github repo issues tracker for more information.\n", "created_at": "2012-05-01 13:00:51", "user": 125331, "id": 5438089}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5438102", "text": "@AngeloMichel, see this comment: https://github.com/rails/rails/issues/393#issuecomment-1115289\n\nIf Chrome isn't ignoring the first newline inside of textarea tags, it's broken.\n", "created_at": "2012-05-01 13:02:12", "user": 131179, "id": 5438102}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5438116", "text": "@codykrieger @AngeloMichel Chrome doesn't ignore the leading newline in some specific versions when the newline is encoded as an HTML entity. This is caused by Haml, but there is a fixed version of Haml to correct this behavior (the leading newline shouldn't be encoded.)\n", "created_at": "2012-05-01 13:03:24", "user": 125331, "id": 5438116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5438161", "text": "@codykrieger Actually, the SGML spec that preceded the HTML spec already had it.\n\n@AngeloMichel The reasoning is probably that you can nicely format the HTML / SGML source by adding an extra newline after a tag. All other tags also allow an extra new line there but all other tags are insensitive to white space so that's why textarea needs a different treatment.\n", "created_at": "2012-05-01 13:06:34", "user": 85734, "id": 5438161}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5708128", "text": "Perhaps this could be changed to only insert the newline if there is content going into the textarea.\n\nCurrently, when this ends up being inserted as the html entity `&#x000A;` in a textarea that would otherwise be empty, it breaks the `placeholder` attribute on Mobile Safari. \n\nI haven't tested, but I suspect that Mobile Safari handles an actual newline, as opposed to the entity code, correctly.\n", "created_at": "2012-05-15 04:13:44", "user": 1740641, "id": 5708128}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5713403", "text": "@es128 Are you using Haml? The html entity is not inserted by Rails. Rails inserts an actual newline. Haml decides to encode. If you look at the relevant bugs in the Haml repository on Github, you'll find that there are multiple workarounds and fixes available. I believe that latest version of Haml actually completely resolves this (though it's not the nicest of solutions.)\n", "created_at": "2012-05-15 11:11:47", "user": 125331, "id": 5713403}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5713520", "text": "@jcoleman Yes, I'm using Haml. Thanks for the tip.\n", "created_at": "2012-05-15 11:20:17", "user": 1740641, "id": 5713520}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 394, "updated_at": "2014-07-03 03:59:43", "user": 28908, "closed_at": "2011-05-05 10:33:01", "id": 852785, "title": "Display custom asset routes in `rake routes`", "url": "https://api.github.com/repos/rails/rails/issues/394", "created_at": "2011-05-05 10:17:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Polymorphic associations in STI models look for base_class in type attribute, but when record is destroyed and tries to delete all associated records, it looks for sti class in type attribute to delete.\n", "labels": [], "number": 395, "updated_at": "2014-07-03 03:59:46", "user": 20515, "closed_at": "2012-03-29 03:49:23", "id": 852800, "title": "dependent delete_all in polymorphic associations from sti models doesn't use base class", "url": "https://api.github.com/repos/rails/rails/issues/395", "created_at": "2011-05-05 10:22:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107223", "text": "Hi,\n\nThanks for the pull request. From the look of it this is against 3-0-stable? Does the problem occur on the master branch? Also, please could you add tests?\n\nThanks\n", "created_at": "2011-05-05 18:06:25", "user": 1979, "id": 1107223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1109988", "text": "I haven't tried master branch, but code has changed and I think it won't ocurr\n\nI will try to add tests, but I have never looked at rails tests\n", "created_at": "2011-05-06 07:41:42", "user": 20515, "id": 1109988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335012", "text": "@scambra, thanks for the report and the possible fix.\n\nA failing test case is critical to help everyone else understand and evaluate it, though.\n\nPlease give it a shot!\n", "created_at": "2011-10-09 03:16:25", "user": 199, "id": 2335012}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2456229", "text": "I agree and understand you, but I have never done a test case for rails.\n\nAnyway I'm using already rails 3.1 and code was refactored without this bug.\nYou can close it if you want\n", "created_at": "2011-10-19 14:17:55", "user": 20515, "id": 2456229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4796379", "text": "Great! Closed!\n\n@scambra thanks to the pull request.\n", "created_at": "2012-03-29 03:49:23", "user": 47848, "id": 4796379}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "So finally i've rebased Lighthouse ticket 4346.\n\nSee discussion LH #4346 here (https://rails.lighthouseapp.com/projects/8994/tickets/4346-time_select-not-interpreting-the-multi-parameter-correctly). \n\n/attn @fxn\n\n/cc @dtrasbo @andreacampi \n", "labels": [], "number": 396, "updated_at": "2014-07-03 03:59:48", "user": 762, "closed_at": "2011-05-06 10:53:24", "id": 852811, "title": "Multiparameter POLA (principle of least authority) with respect to time_select fixes. See LH4346", "url": "https://api.github.com/repos/rails/rails/issues/396", "created_at": "2011-05-05 10:26:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110461", "text": "Context for this ticket. \n\nThe ticket deals with errors relating to multiparamter attributes. \n1. `time_select` allows for an option `:ignore_date => true`. This option was added [here](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/503-add-deny_hidden-option-to-date-helpers-so-rails-doesn-t-render-them). It was added for design reasons where the developer wanted to style date_select and time_select differently and not have one overwrite the other.\n2.  `:ignore_date => true` usage is not documented clearly enough. Leading to bugs as reported [here](https://rails.lighthouseapp.com/projects/8994/tickets/4346-time_select-not-interpreting-the-multi-parameter-correctly). \n3. If you use `:ignore_date => true` with `time_select` and dont have a `date_select` on the same attribute, funny things will [happen](http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/dfc64e24151c7880). Time attributes would shift to date and silently work (if the time attributes can be turned into a date) or throw up if the time attributes do not form into a valid date.\n4. @asanghi with the massive input from (@andreacampi) have addressed various issues with Multiparameter attribute handling. Some of those issues include \n   - Handling Date, Time distinctly from other multiparameter classes separately.\n   - Handling DOS type attack by providing very high parameter indexes.\n   - Handling empty parameters for Date and Time. \n   - Handling nil parameters for Date and Time.\n   - Raising appropriate exceptions \n   - Refactoring Multiparameter attribute handling.\n   - Adding many more tests.\n\nI believe this fix should be applied to 3.0.x and possibly even to 2.3.x branch. \n", "created_at": "2011-05-06 09:52:45", "user": 762, "id": 1110461}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110673", "text": "OK, good to go.\n\nIt is going to be applied to master for 3.1. The 2.3 branch is practically frozen, only security fixes and the-universe-is-going-to-collapse bug fixes. As per 3.0, while the fix could be interesting there, we think that it is safer not to introduce something like this in a minor version update. It could break existing extensions dealing with multi value attributes as https://github.com/philcrissman/multiparams_for_strings.\n\nThanks for keeping this ticket alive, the rebases, and for the summary above :).\n", "created_at": "2011-05-06 10:53:03", "user": 3387, "id": 1110673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110785", "text": "@fxn there are 3 warnings in test cases added to base_test.rb\n\n`rails/activesupport/lib/active_support/core_ext/time/calculations.rb:24: warning: 2 digits year is used`` \n\nCan you suggest a way to hush them up? I was at a loss.\n", "created_at": "2011-05-06 11:26:01", "user": 762, "id": 1110785}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 397, "updated_at": "2014-07-02 08:31:33", "user": 1075, "closed_at": "2011-05-05 12:14:47", "id": 853069, "title": "rename test case to better describe use case", "url": "https://api.github.com/repos/rails/rails/issues/397", "created_at": "2011-05-05 12:13:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The PostgreSQLAdapter's \"columns\" method creates a new PostgreSQLColumn object for every column of a given database table. However, the constructor for this class has this form:\n\n``` ruby\ndef initialize(name, default, sql_type = nil, null = true)\n  super(name, self.class.extract_value_from_default(default), sql_type, null)\nend\n```\n\nThe 'default' parameter is a string describing a SQL data type whenever the DB column has a default value, however it is nil all the other times, that is: most of the time. Now, the extract_value_from_default method looks like this:\n\n``` ruby\ndef self.extract_value_from_default(default)\n  case default\n    # Numeric types\n    when /\\A\\(?(-?\\d+(\\.\\d*)?\\)?)\\z/\n      $1\n    # Character types\n    when /\\A'(.*)'::(?:character varying|bpchar|text)\\z/m\n      $1\n   ....\n  end\nend\n```\n\nUnfortunately it doesn't check for a nil anywhere, so it ends up calling === against nil for every 'when' clause in this method. It ends up causing a major performance issue especially:\n\na) in the development environment where this is called on every request\nb) for complex schemas where there are many tables/columns\n\nIn my case, it made every request in development mode twice as slow. The same issue may affect other DB adapters. It doesn't affect ActiveRecord 2.3.10, and I think the reason for this might be the difference between NilClass#method_missing implementation between ActiveSupport 2.3.10:\n\n``` ruby\ndef method_missing(method, *args, &block)\n  # Ruby 1.9.2: disallow explicit coercion via method_missing.\n  if method == :to_ary || method == :to_str\n    super\n  elsif klass = METHOD_CLASS_MAP[method]\n    raise_nil_warning_for klass, method, caller\n  else\n    super\n  end\nend\n```\n\nAnd ActiveSupport 3.0.6:\n\n``` ruby\ndef method_missing(method, *args, &block)\n  if klass = METHOD_CLASS_MAP[method]\n    raise_nil_warning_for klass, method, caller\n  else\n    super\n  end\nend\n```\n\nThis fix for Ruby 1.9.2 was introduced by Jeremy Kemper in this commit: https://github.com/rails/rails/commit/9acc824d96db039486fc493c6f904035fe386967 and I don't know what happened with it since and why.\n\nAn easy fix would be to modify PostgreSQLAdapter#initialize like this:\n\n``` ruby\ndef initialize(name, default, sql_type = nil, null = true)\n  default_value = default.present? ? self.class.extract_value_from_default(default) : nil\n  super(name, default_value, sql_type, null)\nend\n```\n\nI am on Ruby 1.9.2.\n", "labels": [], "number": 398, "updated_at": "2011-05-05 14:38:28", "user": 26233, "closed_at": "2011-05-05 14:38:26", "id": 853449, "title": "Unnecessarily slow PostgreSQLAdapter#columns", "url": "https://api.github.com/repos/rails/rails/issues/398", "created_at": "2011-05-05 13:57:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1105985", "text": "Coincidentally, this was recently fixed with 58ad5e1859caa5e384cc3df2360efc3cfd66c48b :)\n", "created_at": "2011-05-05 14:38:23", "user": 199, "id": 1105985}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Encountered this this morning -- looks like we're adding conditions from a join to the where clause, not the join clause.\n\nApart from having joins_values affect the where clause being a bit counterintuitive, placing join conditions here prevents us from using an Arel::OuterJoin to select all records without a corresponding record on the joined table.\n", "labels": [], "number": 399, "updated_at": "2014-06-13 00:11:48", "user": 14947, "closed_at": "2011-05-05 20:23:22", "id": 854269, "title": "Add association join conditions to JOIN clause, not WHERE", "url": "https://api.github.com/repos/rails/rails/issues/399", "created_at": "2011-05-05 16:43:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107208", "text": "Hey Ernie,\n\nThanks for the pull request. It would be great if you could add a test which actually does an outer join with a condition (presumably via `Foo.includes(...)`) that fails on current master.\n\nAlso, can you confirm this has been tested under postgres? I remember a problem to do with referencing joined tables on postgres (and oracle) where the you referenced table \"foo\" in an ON clause before \"foo\" is actually joined, which would cause an error. Might not be relevant here though.\n\nCheers\n", "created_at": "2011-05-05 18:03:48", "user": 1979, "id": 1107208}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107248", "text": "Thanks for the quick follow-up, Jon. Tests are passing under PostgreSQL -- I was looking for a place to hook in an outer join via association, but hadn't thought to go the includes() route, silly me. I'll get one cooked up.\n", "created_at": "2011-05-05 18:11:32", "user": 14947, "id": 1107248}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107366", "text": "Here you go!\n", "created_at": "2011-05-05 18:36:52", "user": 14947, "id": 1107366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107980", "text": "Thanks! :+1:\n", "created_at": "2011-05-05 20:23:38", "user": 1979, "id": 1107980}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1610195", "text": "Was this backported to 3.0-stable? (Because ‚Äì unless I'm not following along correctly ‚Äì this problem still exists in 3.0.9.)\n", "created_at": "2011-07-19 20:09:15", "user": 10958, "id": 1610195}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adding ruby-prof gem for ruby platform only\n", "labels": [], "number": 400, "updated_at": "2014-07-03 04:00:03", "user": 3948, "closed_at": "2011-05-06 03:30:35", "id": 854317, "title": "Adding ruby-prof gem for ruby platform only #jruby", "url": "https://api.github.com/repos/rails/rails/issues/400", "created_at": "2011-05-05 16:55:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1106982", "text": "Ruby-prof should be inside the test group. It's only needed for performance tests.\n", "created_at": "2011-05-05 17:29:03", "user": 102931, "id": 1106982}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107108", "text": "Updated.\n", "created_at": "2011-05-05 17:49:27", "user": 3948, "id": 1107108}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nI'm trying to track down a possible Rails 3 bug I'm having with sessions. The last time I had to track something down I was able to browse Lighthouse to see if an issue had been addressed.\n\nNow it seems the Rails project on Lighthouse has been locked down.\n\nAnyone have any info?\n\nThanks,\n\nChris\n", "labels": [], "number": 401, "updated_at": "2011-07-10 16:37:51", "user": 208661, "closed_at": "2011-05-05 17:22:49", "id": 854343, "title": "Rails Lighthouse down?", "url": "https://api.github.com/repos/rails/rails/issues/401", "created_at": "2011-05-05 17:02:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1106845", "text": "The rails issues has moved to github. Apparently, they've closed it too.\n", "created_at": "2011-05-05 17:03:55", "user": 9347, "id": 1106845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1106851", "text": "The Lighthouse was a spam cesspool, so it has been archived and we're not using issues instead. Unfortunately Lighthouse doesn't have a way of archiving a project and still making it accessible as read only.\n", "created_at": "2011-05-05 17:05:37", "user": 2741, "id": 1106851}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1106855", "text": "Sorry, so what else has been closed? \n\nAnd does this issues area have all the open/closed etc bugs in Rails 3?\n", "created_at": "2011-05-05 17:07:09", "user": 208661, "id": 1106855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1106891", "text": "We have yet to migrate the LH issues over here. You can search for issues here and raise them again if you don't find them.\n", "created_at": "2011-05-05 17:12:30", "user": 2741, "id": 1106891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1106950", "text": "Ok, thanks guys!\n", "created_at": "2011-05-05 17:22:49", "user": 208661, "id": 1106950}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1542278", "text": "[Discussion continued at issue 404.](https://github.com/rails/rails/issues/404)\n", "created_at": "2011-07-10 16:37:50", "user": 22803, "id": 1542278}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi,\n\nI have this case:\n\n```\nclass Profile < ActiveRecord::Base\n  has_and_belongs_to_many :roles\nend\n\nclass Role < ActiveRecord::Base\n  has_and_belongs_to_many :profiles\nend\n```\n\nAnd the association table:\n\n```\nclass CreateProfilesRoles < ActiveRecord::Migration\n  def self.up\n    create_table :profiles_roles, :id => false do |t|\n      t.integer :profile_id\n      t.integer :role_id\n    end\n\n    add_foreign_key :profiles_roles, :profiles\n    add_foreign_key :profiles_roles, :roles\n  end\n\n  def self.down\n    drop_table :profiles_roles\n  end\nend\n```\n\nWhen I try to destroy the profile, I receive an error from postgresql due to foreign keys on join table.\n\nThe join table is cleared after destroying the record and this should be done before (see: https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1716)\n\nIf I change this after_destroy to before_destroy the issue is solved but breaks 4 tests on activerecord suite (using sqlite3 adapter).\n\nI checked this issue on 3.0.0, 3.0.7, and 3.1.0.beta1\n", "labels": [], "number": 402, "updated_at": "2011-07-23 14:34:38", "user": 26460, "closed_at": "2011-07-08 23:22:01", "id": 854808, "title": "Destroying a record with habtm association using foreign keys on association table raises a exception", "url": "https://api.github.com/repos/rails/rails/issues/402", "created_at": "2011-05-05 18:43:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107537", "text": "Can you provide at least a test ase reproducing the issue?\n", "created_at": "2011-05-05 19:05:04", "user": 9582, "id": 1107537}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107591", "text": "Should I use SQL to create the foreign keys on test case or use the foreigner?\n", "created_at": "2011-05-05 19:16:44", "user": 26460, "id": 1107591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1109210", "text": "@tenderlove, wdyt?\n", "created_at": "2011-05-06 01:55:39", "user": 9582, "id": 1109210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1109946", "text": "There was a ticket on this in lighthouse, but it's currently inaccessible (in a thread on rails corr about this a few weeks ago, Jose had come up with a way of fixing this while preserving the semantics of before_destroy)\n", "created_at": "2011-05-06 07:23:32", "user": 5927, "id": 1109946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110287", "text": "Yeah, I remember my patch! :) that's why I just need the test case ;)\n", "created_at": "2011-05-06 09:11:40", "user": 9582, "id": 1110287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110317", "text": "I did come up with a test case but I wasn't very happy with it - I wrote a model with an after_destroy callback that checked that the association had been cleared, but it felt quite vulnerable to the sort of issues that introduced this issue. I couldn't think of anything better short of actually adding foreign keys to the rails test database\n", "created_at": "2011-05-06 09:18:46", "user": 5927, "id": 1110317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110389", "text": "For reference, this is the Google Groups thread. @sobrinho, you can find some patches there:\n\nhttp://groups.google.com/group/rubyonrails-core/browse_thread/thread/d44e0c4162ccedff/f155709fffa5f0a7\n\n@fcheung, agreed, the after_destroy callback approach would be too brittle.\n", "created_at": "2011-05-06 09:31:23", "user": 9582, "id": 1110389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110398", "text": "Btw, is this a regression in 3.1? If so, I may apply the patch with a brittle test like @fcheung originally provided. I don't want people to not upgrade to Rails 3.1 because of this small glitch.\n", "created_at": "2011-05-06 09:35:12", "user": 9582, "id": 1110398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110431", "text": "The foreign key breakage was introduced in 3.0.5 (we spotted it in our app when we upgraded from 3.0.3 to 3.0.5), so people who are on 3-0-stable will already have this breakage\n", "created_at": "2011-05-06 09:43:34", "user": 5927, "id": 1110431}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110902", "text": "I see this issue on 3 differents apps using 3.0.0, 3.0.7 and 3.1.0.beta1.\n\nWhat is the better way? Using foreign keys (will test only on database which\nhave support), using callbacks, or what?\n\nPut me on direction :)\n", "created_at": "2011-05-06 12:00:19", "user": 26460, "id": 1110902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110992", "text": "I'd say: use a foreign key on supported DBs. But it is always good to sanity\ncheck with Aaron.\n", "created_at": "2011-05-06 12:23:25", "user": 9582, "id": 1110992}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111013", "text": "@tenderlove, are you there?\n", "created_at": "2011-05-06 12:27:17", "user": 26460, "id": 1111013}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112043", "text": "@sobrinho use foreign keys.  We can add conditionals if we need to around dbs that support it.\n", "created_at": "2011-05-06 15:59:02", "user": 3124, "id": 1112043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112045", "text": "@tenderlove :heart:\n", "created_at": "2011-05-06 15:59:45", "user": 9582, "id": 1112045}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112343", "text": "@josevalim @tenderlove I will submit the test case tonight :heart:\n", "created_at": "2011-05-06 16:56:00", "user": 26460, "id": 1112343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232071", "text": "I'm moving this off the 3.0.8 milestone.  @sobrinho, I'll schedule this for a release once we get your test case! :-D\n", "created_at": "2011-05-24 23:05:26", "user": 3124, "id": 1232071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236427", "text": "tenderlove, we're also running into this.  will this get fixed in 3-0-stable? \n\n(i heard something about only security fixes going into 3-0-stable now)\n", "created_at": "2011-05-25 16:41:49", "user": 1179, "id": 1236427}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236947", "text": "@joevandyk yes this will get fixed in 3-0-stable.  There is no plan to EOL 3.0 yet.  You can help get it fixed faster by providing a test case.  :-)\n", "created_at": "2011-05-25 17:52:36", "user": 3124, "id": 1236947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1237353", "text": "@joevandyk please do the tests if you can, I can't for now\n", "created_at": "2011-05-25 18:44:40", "user": 26460, "id": 1237353}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1267497", "text": "I tried to fix here and add a test case https://github.com/tomas-stefano/rails/commit/48d735fbbd16bdce3fbf9516cad2f9d8a30c42e2\nBut 3 other tests failed. I'll see why in a moment, =).\n", "created_at": "2011-05-31 14:50:21", "user": 27509, "id": 1267497}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1267580", "text": "It's not as simple as just changing the after destroy to a before destroy - the deleting needs to happen before the parent record is deleted but after any other before destroys - see jose's post to rails-core (linked to above)\n", "created_at": "2011-05-31 15:01:15", "user": 5927, "id": 1267580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268068", "text": "@tomas-stefano, could you look here? https://groups.google.com/forum/#!topic/rubyonrails-core/1E4MQWLM7f8\n", "created_at": "2011-05-31 16:05:45", "user": 26460, "id": 1268068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268561", "text": "Thanks for the link, I used the solution posted in the link and all tests pass(including the one that I added with the foreign keys).\nI think my solutions is not the best, but it works.\nhttps://github.com/tomas-stefano/rails/commit/1ef677208d3f09c0757055846bb129e379713161\nThanks @sobrinho, thanks to you, this is my first commit in Rails! =p\ns2 lol!\n\nCheers,\nTom√°s D'Stefano\n", "created_at": "2011-05-31 17:14:46", "user": 27509, "id": 1268561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268578", "text": ":heart:\n", "created_at": "2011-05-31 17:17:23", "user": 26460, "id": 1268578}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I have stumbled upon a problem with **Rails 3.0.7** that I have not found a solution for, and to me it seems like a bug. If it's not, please be gentle. :)\n\nMy models contains of a Notification class that are connected to Group and Member via a polymorphic join model called Delivery. The problem is that when I do the following, the Delivery object is saved, but it fails to add the key to the new notification object. \n\n**The flow in the application, for this example is:**\n1.  /members/new\n   Creating a new member\n2.  /members/1/notifications/new\n   Creating a new notification object by creating a notification object, adding the parent member to the members association and then saving the notification object. As I understand the documentation, the Delivery join object should automatically be saved after the notification object has been saved to the database (and an ID is given to the notification object). \n\nAfter saving the notification, the Delivery join object is also saved, but the Delivery table in the database does not contain the id of the newly created notification object:\n\n```\nselect id, notification_id, notifiable_type, notifiable_id from deliveries; \n1|<NULL>|Member|1\n```\n\n**Note:** I worked around the problem by calling _notification.save_ before _notification.members << member_, but this causes my _after_save_ callbacks to run prematurely, before the notification object is in a valid state.\n\n**Example code from my application. Using this code results in the null value in the delivery table.**\n\n```\nclass Notification < ActiveRecord::Base\n  has_many :deliveries, :as => :notifiable\n  has_many :members, :through => :deliveries, :source => :notifiable, :source_type => \"Member\"\n  has_many :groups, :through => :deliveries, :source => :notifiable, :source_type => \"Group\"\nend\n\n class Member < ActiveRecord::Base\n  has_many :deliveries, :as => :notifiable\n  has_many :notifications, :through => :deliveries\nend\n\nclass Delivery < ActiveRecord::Base\n  belongs_to :notification\n  belongs_to :notifiable, :polymorphic => true\nend\n\n# Group is not really relevant in this example.\nclass Group < ActiveRecord::Base \n  has_many :deliveries, :as => :notifiable\n  has_many :notifications, :through => :deliveries\nend\n\nclass NotificationsController < ApplicationController\n  def create\n    @notification = Notification.new(params[:notification])\n    @member = Member.find(params[:member_id])\n    @notification.members << @member\n\n    respond_to do |format|\n      if @notification.save\n        ...\n      end\n    end\n  end\nend\n```\n# Using non-polymorphic join model worked as expected\n\nTrying to identify if the polymorphic association was the origin of the problem, I simplified my model using only a simple non-polymorphic join model. This worked as expected, and the notification_id was set correctly in the delivery table without the need for \"double saving\" the notification object.\n\n```\nselect id, notification_id, member_id from deliveries; \n1|1|1\n```\n\n**Working code, without the many-to-many polymorphic join model:**\n\n```\nclass Notification < ActiveRecord::Base\n  has_many :deliveries\n  has_many :members, :through => :deliveries\nend\n\nclass Member < ActiveRecord::Base\n  has_many :deliveries, :as => :notifiable\n  has_many :notifications, :through => :deliveries\nend\n\nclass Delivery < ActiveRecord::Base\n  belongs_to :notification\n  belongs_to :member\nend\n\nclass NotificationsController < ApplicationController\n  def create\n    @notification = Notification.new(params[:notification])\n    @member = Member.find(params[:member_id])\n    @notification.members << @member\n\n    respond_to do |format|\n      if @notification.save\n        ...\n    end\n  end\nend\n```\n", "labels": [], "number": 403, "updated_at": "2011-05-07 12:41:23", "user": 126700, "closed_at": "2011-05-07 10:28:31", "id": 855289, "title": "Polymorphic has_many through association causes nil in join table", "url": "https://api.github.com/repos/rails/rails/issues/403", "created_at": "2011-05-05 20:18:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113862", "text": "I think the only hope of getting this fixed is, if you can attach a some minimum code that we can run locally and reproduce the problem. \n", "created_at": "2011-05-06 22:00:16", "user": 278, "id": 1113862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113987", "text": "I created a minimal rails example project with a readme file explaining how to reproduce the problem:\n\ngit://github.com/larsar/rails-issue-403.git\n", "created_at": "2011-05-06 22:31:03", "user": 126700, "id": 1113987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115030", "text": "Thanks @larsar and @gnufied. Can any of the several contributors now isolate the issue from the minimal rails app to a test case in Rails? This would help us a lot in moving on and fixing the issue. :heart:\n", "created_at": "2011-05-07 09:53:55", "user": 9582, "id": 1115030}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115079", "text": "On having a look at the sample code, this is not a bug. The problems with code:\n1.  Following code is wrong and will not work\n\n``` ruby\nhas_many :deliveries, :as => :notifiable\nhas_many :members, :through => :deliveries, :source => :notifiable, :source_type => \"Member\"\n```\n\nBecause when you will say `notification.members` it will create the join with where condition  `deliveries.notifiable_id=1 AND deliveries.notifiable_type = 'Notification'` . Clearly thats not what you want.\n1. When you are creating `deliveries` indirectly via `notification.members << member` , it WILL set `notifiable_id` and `notifiable_type` correctly in deliveries table, but AR has no way of knowing that you want to set `notification_id` in deliveries table as well. It is impossible, you will have to set that yourself.\n   \n   In other words, you are expecting too much from Rails here. :)\n", "created_at": "2011-05-07 10:27:14", "user": 278, "id": 1115079}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115080", "text": "Ok, closing. Thanks @gnufied.\n", "created_at": "2011-05-07 10:28:31", "user": 9582, "id": 1115080}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115307", "text": "Thanks for taking the time to look at this. I'll have to let it sink in and try another solution then. :)\n", "created_at": "2011-05-07 12:41:23", "user": 126700, "id": 1115307}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I understand the reason behind the move to github issues.\n\nProblems in the way the transition is done remain:\n\n1) Lighthouse issues have not been migrated to github yet (any timeframe?)\n\n2) Until they are, they can't be read by mere mortals on Lighthouse anymore. There is not even a landing page letting people know where to go, what to do, etc.\n\n3) Guides are still referring to lighthouse (http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html and even http://edgeguides.rubyonrails.org/contributing_to_rails.html )\n\nThanks\n", "labels": [], "number": 404, "updated_at": "2011-08-01 22:54:11", "user": 33770, "closed_at": "2011-05-16 12:44:30", "id": 855312, "title": "Move from lighthouse mess", "url": "https://api.github.com/repos/rails/rails/issues/404", "created_at": "2011-05-05 20:21:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1107988", "text": "We're looking for people who can help us port the LH issues to GH. If you want to work on this, I can give you access to the archived LH site.\n", "created_at": "2011-05-05 20:24:33", "user": 2741, "id": 1107988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1108037", "text": "Looks like some have already worked on this a bit: https://github.com/benlangfeld/Lighthouse-2-Github\n", "created_at": "2011-05-05 20:34:21", "user": 33770, "id": 1108037}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1108970", "text": "@dhh: I'd love to help port everything over. I've been looking for a way to give back to the Rails community for a while.\n", "created_at": "2011-05-06 00:15:59", "user": 199720, "id": 1108970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1109315", "text": "Why close lighthouse to public before all the tickets migrated and all issues on github indexed by search engines? It was so annoying when I followed google results to some tickets on lighthouse then I just got a meaningless page told me I have no access to it. It prevents people to get useful information.\n", "created_at": "2011-05-06 02:43:02", "user": 5958, "id": 1109315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1109922", "text": "I create a ticket (with patch) in what appears to be the final hours of the lighthouse site being open. Should I recreate it as a github issue or wait for things to be resolved?\n", "created_at": "2011-05-06 07:13:09", "user": 5927, "id": 1109922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110975", "text": "@dhh...we are having a Rails Bugmash this Saturday (5/7) and could use it as an opportunity to move bugs over while at the same time either fixing them or at least making sure they are still valid.  I will send you my lighthouse account name via direct message so you can add me to the Lighthouse project.\n", "created_at": "2011-05-06 12:17:48", "user": 128210, "id": 1110975}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112488", "text": "seems a little unorganized here with this move.  Who is heading up the move? I have also been looking for a way to give back to the rails community but need some direction on the steps.  my email is gerbdla@gmail.com if anybody wants to communicate the steps needed to help out.\n", "created_at": "2011-05-06 17:27:50", "user": 130581, "id": 1112488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113217", "text": "I've opened the lighthouse again and will keep it open for another weekend. So I'll close it down next Friday the 13th. Please coordinate to have all the tickets moved over by then. Thanks for stepping up guys!\n", "created_at": "2011-05-06 19:41:20", "user": 2741, "id": 1113217}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116242", "text": "@dhh: Do you want all the tickets or just the ones that are open?\n", "created_at": "2011-05-07 19:18:15", "user": 199720, "id": 1116242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118334", "text": "I've got a partial port up on an empty repo to test everything: https://github.com/AquaGeek/Darkhouse-Test/issues\n\nI'm working on some spam cleanup now (man, there's a lot of that!). I'll also be tweaking the comment body format a little to hopefully make it easier to see who originally posted the comment and when.\n\nEssentially what I did was create a Rails app that duplicated most of the Lighthouse model layout. Then I used their API to pull down most of the project locally. With my local copy, I ran some cleanup (spam, formatting) via some Rake tasks, etc. Then I'm using GitHub's API to re-post all of the issues to their new location. The code's an absolute mess right now, but I might be able to get it cleaned up sometime this week and post it if anyone is interested.\n", "created_at": "2011-05-08 04:50:59", "user": 199720, "id": 1118334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118571", "text": "@AquaGeek: Good work. I think it would be better not to import the tags from Lighthouse though as there are loads of really pointless ones used and there is no coherent system because anybody could apply a tag or create a new tag.\n", "created_at": "2011-05-08 07:36:46", "user": 1979, "id": 1118571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1124758", "text": "@jonleighton OK. Easy enough to remove.\n", "created_at": "2011-05-09 16:57:49", "user": 199720, "id": 1124758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1161555", "text": "Here's the latest and greatest test import: https://github.com/AquaGeek/Darkhouse-Import/issues\n\nCan I get a second and third pair of eyes to look it over before I pull the trigger and run the script here on rails/rails?\n\nAlso, I've moved most of the attachments into Gist (one gist per issue), but I'm not sure how to relate them to specific comments... Any thoughts? Should I just add a comment at the end with a link to the gist?\n", "created_at": "2011-05-14 05:16:12", "user": 199720, "id": 1161555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1161591", "text": "> Also, I've moved most of the attachments into Gist (one gist per issue), but I'm not sure how to relate them to specific\n> comments... Any thoughts? Should I just add a comment at the end with a link to the gist?\n\nLooks like a good idea\n", "created_at": "2011-05-14 05:47:52", "user": 160941, "id": 1161591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1161606", "text": "@dhh: What will happen to Lighthouseapp? Is it possible to remove the \"New Issue\" and \"New comments\" buttons altogether to make it read only?\n\n@AquaGeek: Looks good at first sight.\n1) If Lighthouseapp is to remain accessible in read-only, then the attachments could simply be the lighthouse links inserted at the end of the corresponding comments / issue ? Otherwise we really shouldn't loose the attachments, and we can't really combine them nicely either.\n2) Would it be easy to add a comment in lighthouse like \"This thread was exported to <URL of the github issue>\" or similar?\n3) It might be a good idea to create a new github user to do the import, say \"Lighthouse Import\"\n", "created_at": "2011-05-14 05:56:46", "user": 33770, "id": 1161606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171703", "text": "Alright. All open tickets have been moved over.\n\nA couple of users complained about the barrage of notifications, and I apologize. I can understand the frustration - 500+ tickets created with incremental comments being added and your being messaged with each one...\n\nI'll be going through and spot checking to make sure the attachment Gists line up OK. Please let me know if anyone sees any spam - I think I got most of it, but a few messages might have gotten through.\n", "created_at": "2011-05-16 05:52:20", "user": 199720, "id": 1171703}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171796", "text": "@AquaGeek Fantastic work! Thanks!\n", "created_at": "2011-05-16 06:33:29", "user": 146214, "id": 1171796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172560", "text": "@AquaGeek Excellent work! :)\n", "created_at": "2011-05-16 10:15:01", "user": 14514, "id": 1172560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1173053", "text": "Closing this now, nice one @AquaGeek.\n", "created_at": "2011-05-16 12:44:30", "user": 1979, "id": 1173053}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1174201", "text": "@AquaGeek: Nice!\n\nHopefully lighthouse will be put in read-only or offline soon. I think there is already a new issue that has been created on lighthouse...\n", "created_at": "2011-05-16 15:56:28", "user": 33770, "id": 1174201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214934", "text": "@jonleighton @dhh: Anybody know what's going on here? All of the tickets that were imported just got closed about an hour ago. Weird thing is, they show as being closed by the account I created for the import - whose credentials I haven't given to anyone...\n", "created_at": "2011-05-21 17:00:07", "user": 199720, "id": 1214934}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215986", "text": "We have them closed directly by Github. There were too many stale tickets. So we're closing them all and relying on them to be reopened for the ones that are still active. This also gives us the full history so lighthouse can go offline.\n", "created_at": "2011-05-22 00:42:40", "user": 2741, "id": 1215986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216366", "text": "/me flabergasted.\n", "created_at": "2011-05-22 05:00:22", "user": 33770, "id": 1216366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216376", "text": "/me even more flabergasted after noticing that:\n![fail](http://www.marc-andre.ca/posts/misc/rails_github_issues_fail.png)\n", "created_at": "2011-05-22 05:05:14", "user": 33770, "id": 1216376}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216539", "text": "@dhh How do we re-open the issues? Creating new issues referencing closed issue numbers is ok?\n", "created_at": "2011-05-22 07:11:25", "user": 146214, "id": 1216539}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1245460", "text": "Yeah, what we should have had here is a soft-close of the tickets, so they could be reopened. But Github doesn't have that feature. So the next best thing is just to open a new ticket and reference the old one if it's still relevant.\n\nWe just don't want to clutter the issues list with 500 issues that may very well be outdated.\n", "created_at": "2011-05-26 21:13:14", "user": 2741, "id": 1245460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247239", "text": "@dhh Do you think it's possible that some of the people that took the time to create these 500 issues, comment on them or provide patches for them, that some of them might feel frustrated or even insulted by the fact that their issues were closed? I mean it could be because they might not appreciate that they were not contacted about the import, the inaccessibility of the original issue nor the subsequent closing of the imported issue, or it could be because they might not understand how a list of opened issues (even with some that \"may very well be outdated\") is such a big problem as to outweigh the possibility of having some issues adressed one day, or of giving the impression that contributions are not valued?\n\nMay I recommend at least informing the original authors of these issues about what has happened with their stuff and asking them to create a new issue if it's still relevant? \n", "created_at": "2011-05-27 05:08:14", "user": 33770, "id": 1247239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247257", "text": "While the edge guides have been fixed, the current guides still refer to lighthouse (http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html )\n\nIt might be a good idea to change the lighthouse error message \"If you think this is an error, ...\" for an explanation that it has moved to github issues, as google, etc..., will refer to lighthouse for a while.\n", "created_at": "2011-05-27 05:15:11", "user": 33770, "id": 1247257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329708", "text": "I agree with Marc. Closing off access to https://rails.lighthouseapp.com was a bad move. I have plenty of URL references to issue reports on lighthouseapp in my code. They are now all useless. And closing all open issue reports wholesale constitutes a slap in the face of people who went to the trouble of reporting issues in Rails after having done significant research. I, for one, will think twice before reporting another Rails issue.\n", "created_at": "2011-06-08 20:45:30", "user": 286913, "id": 1329708}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1423845", "text": "+1 for reopening\n\nI just wanted to look at the status of a bug report I submitted to Lighthouse whose URL I saved somewhere. I was told that \"this is not a public project\", without a word on what's happened. Well, that one was easy to find out thanks to Google, so I looked over to Github, just to find out that my bug report (including a patch) has been closed, again without any explanation. Fortunately I stumbled upon this bug report after Googling some more, although it was by pure chance.\n\nSo please\n1) reopen this issue until it is really fixed (see marcandre's comment about the guides)\n2) reopen all imported issues which you're not 100% sure of they're fixed\n", "created_at": "2011-06-23 08:15:50", "user": 560664, "id": 1423845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1510532", "text": "I certainly agree with marcandres comment on May 27 ,2011. frustrated? insulted? whatever...\n\nNot valuing contributions (serious bug reporting is contribution) is the kind of thing that makes projects fork... I hope not this will happen to rails.\n\nPlease reopen all the old tickets...\n\nWhatever reason there is that I should create a new ticket and refer to the old one for my reported tickets will be just as valid reason for me to make a script to run through all the (500+) migrated tickets and create new (parallel) ticket refering to the old one, and voila... We are back to 500+ open tickets... Closing eyes to defect reports does not make the defects go away, just make them invisible.\n", "created_at": "2011-07-06 09:22:58", "user": 191521, "id": 1510532}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1542268", "text": "A quick summary of the current state of things, for folks like me who arrived here after not being able to find an old ticket on Lighthouse:\n\n1) Rails issue tracking has been moved from Lighthouse to Github Issues, [apparently due to spam overload on Lighthouse](https://github.com/rails/rails/issues/401#issuecomment-1106851)\n\n2) All open tickets from Lighthouse were migrated to Github Issues, but were then closed en masse [because of too many stale tickets](https://github.com/rails/rails/issues/404#issuecomment-1215986). For any tickets that were closed but are still relevant, [DHH says to just open a new ticket and reference the old one](https://github.com/rails/rails/issues/404#issuecomment-1245460).\n\n3) Public access to the Rails Lighthouse project has been disabled. Today, all tickets that were open when the migration happened are now represented by closed issues on Github Issues; **tickets that were closed in Lighthouse when the migration happened cannot be viewed on the web anywhere.**\n\nIn terms of preserving the knowledge in the thousands of closed Rails tickets: \n- Ideally, the Rails Lighthouse project would be put in read-only mode, so that all of the old ticket permalinks continue to work. If someone on the Lighthouse team could be convinced to implement a read-only feature in Lighthouse, it seems like this would be the optimal way to go. \n- Failing that, could all of these closed tickets be migrated as closed tickets into Github Issues? (I'm not sure why that wasn't done along with the open ticket migration.)\n- Alternatively, Chris Mear has used the Lighthouse API to [archive all of the Rails Lighthouse tickets as XML files](https://github.com/chrismear/rails-lighthouse-archive), such that a static website can be generated from them. \n\nOf course, we need to get to a point where one can search for a Rails Lighthouse ticket ID that appears in a commit message, or for a Lighthouse ticket URL that appears in a comment in one's codebase, and find the old discussion around that ticket.  Given some guidance from someone on the Rails team, I would be happy to take the lead on exploring the above options and making the closed tickets findable on the internets again. \n", "created_at": "2011-07-10 16:34:49", "user": 22803, "id": 1542268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1546461", "text": "_I'm not sure why that wasn't done along with the open ticket migration._\n\nI'm new to the community and didn't realize that people had tickets referenced in code, commit comments, etc. I can check if I pulled all of the info for the closed tickets as well. I think I might have. If so, it would be pretty trivial to import those as well.\n\nI agree that a read-only Lighthouse project would be a better way to go, though...\n", "created_at": "2011-07-11 13:37:38", "user": 199720, "id": 1546461}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550736", "text": "I'd be all for these two technical solutions:\n\n1) Lighthouse read-only mode that allows the public to see tickets. If someone can convince the LH team to add this, we can definitely turn Lighthouse back on.\n\n2) Soft-close on GH issues, so people can reopen the original issues if they're still relevant.\n\nPDI.\n", "created_at": "2011-07-11 22:55:49", "user": 2741, "id": 1550736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1567840", "text": "Today I sent an email to the Lighthouse team, explaining the situation and asking if they could implement a read-only project mode in Lighthouse. Will report back here when I hear something.\n", "created_at": "2011-07-14 02:50:51", "user": 22803, "id": 1567840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1571944", "text": "Hey all, \n\nLooks like your Rails account projects are all set to archived, which is read-only mode like you suggest. If you make those projects public again, it should work like you desire - no new tickets/editing, but visible on the public web.\n", "created_at": "2011-07-14 14:35:10", "user": 12773, "id": 1571944}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1571971", "text": "Actually I take that back, I need to add 'archived/public' as a final option. Working on it..\n", "created_at": "2011-07-14 14:37:52", "user": 12773, "id": 1571971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1681714", "text": "Update from the Lighthouse team:\n\nThis turned out to be a bit more complex, but it's in the final stages of development (we're QAing it on our staging site). If that passes we can push it out in the next few days afterwards and the rails project will become visible to the public again shortly afterwards..\n", "created_at": "2011-07-29 14:42:34", "user": 22803, "id": 1681714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1704500", "text": "Bam! rails project visible on the web again. Do you want the other two projects visible too?\n", "created_at": "2011-08-01 21:45:42", "user": 2939, "id": 1704500}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1705024", "text": "Thanks courtenay and entp!\n", "created_at": "2011-08-01 22:54:11", "user": 22803, "id": 1705024}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In the case of Person has_many :phones, :as => :phoneable, this happens when I submit a nested form.\n\nPhone(#2157249660) expected, got Array(#2151973780)\n\nYou can test it for yourself with this app: https://github.com/activestylus/nested_polymorphic_attributes_bug\n\nOn closer inspection it appears the form helpers are not rendering the nested fields correctly, particularly the name attribute:\n\nLooking at the source I see:\n\n<input name=\"person[phones][number]\"...\n\nWhen I'm pretty sure that should be:\n\n<input name =\"person[phones][0][number]\"...\n\nFWIW I can build nested models in the console with no problems whatsoever. And the form helpers do not suffer this problem with a regular has_many relationship.\n", "labels": [], "number": 405, "updated_at": "2011-05-07 08:51:58", "user": 285, "closed_at": "2011-05-07 08:51:58", "id": 855859, "title": "Nested attributes for polymorphic models", "url": "https://api.github.com/repos/rails/rails/issues/405", "created_at": "2011-05-05 21:35:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1108390", "text": "On the previous lighthouse ticket, **Josep M. Bach** made the following comment:\n\n_February 27th, 2011 @ 02:01 PM_\nSeems that the builder doesn't know it's a one-to-many relationship or something like that, could it be?\nIn [this particular](https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/form_helper.rb#L895) line it checks for the [] naming after person[phones] - if it had found it, it would have triggered the #retrieve_auto_index method, which assigns an index ([0], [1]...). Sadly it matches nothing, so I'm guessing somewhere in the call stack it's not checking if person->phones is a 1-n relationship.\n\nAny ideas?\n", "created_at": "2011-05-05 21:39:06", "user": 285, "id": 1108390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113916", "text": "Why don't you add `accepts_nested_attributes_for :phones` to `Person` class? Then `fields_for` will add `[0]` to input names as you expect.\n\n`fields_for` explicitly checks for existence of `phones_attributes=` method: https://github.com/rails/rails/blob/v3.0.7/actionpack/lib/action_view/helpers/form_helper.rb#L1159-1164\n", "created_at": "2011-05-06 22:12:16", "user": 189572, "id": 1113916}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114960", "text": "cheers!\n\nfwiw I had put the accepts_nested_attributes in there back in 3.0.5 and it didnt work, but apparently in 3.0.7 everything works as expected. Thanks again \n", "created_at": "2011-05-07 08:51:57", "user": 285, "id": 1114960}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "For example:\n\n   class User\n      def self.default_scope; order('created_at DESC'); end\n   end\n\n   User.count  # SELECT COUNT(*) FROM \"users\"  ORDER BY created_at DESC\n\nI've only tested this using the postgresql adapter and rails 3.1.0.beta1\n", "labels": [], "number": 406, "updated_at": "2011-05-08 22:31:52", "user": 534, "closed_at": "2011-05-08 22:31:52", "id": 855900, "title": "default_scope adds order clause to aggregation queries", "url": "https://api.github.com/repos/rails/rails/issues/406", "created_at": "2011-05-05 21:45:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1109396", "text": "@jonleighton and @tenderlove, could you please check? :heart:\n", "created_at": "2011-05-06 03:31:32", "user": 9582, "id": 1109396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1109900", "text": "@rubymaverick: How does this code behave on 3-0-stable? (Assuming you define the default scope using the class-level macro, of course.) Thanks.\n", "created_at": "2011-05-06 07:01:35", "user": 1979, "id": 1109900}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111746", "text": "@jonleighton in 3-0 stable the default scope is ignored, so the query above just becomes:\n\nSELECT COUNT(*) FROM \"users\"\n\nAlso, FYI, if you do SELECT COUNT(*) FROM \"users\" ORDER BY created_at DESC in postgresql it will raise an error (sqlite just ignores it)\n", "created_at": "2011-05-06 15:08:34", "user": 534, "id": 1111746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112262", "text": "Okay, I will fix. We shouldn't just discard the default scope entirely though - if you have `default_scope where(:published => true)` or something then you would expect that to affect the count query.\n", "created_at": "2011-05-06 16:39:50", "user": 1979, "id": 1112262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113925", "text": "Won't just delegating aggregation queries to `:unscoped` solve the problem?\n", "created_at": "2011-05-06 22:15:52", "user": 278, "id": 1113925}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Having 3 models using STI:\n\nclass Low < Medium; end\n\nclass Medium < High; end\n\nclass High < ActiveRecord::Base; end\n\nIf I run Medium.all, the SQL ActiveRecord outputs looks for records on the highs table with type='Medium', and as such doesn't find any records for 'Low' objects. \n\nAfterwards, If I try High.all and then Medium.all, then it successfully looks for records with type='Medium' or type='Low'.\n", "labels": [], "number": 407, "updated_at": "2015-07-28 17:36:36", "user": 91118, "closed_at": "2011-05-06 01:49:44", "id": 856132, "title": "STI with multiple models is 'lazy loaded'", "url": "https://api.github.com/repos/rails/rails/issues/407", "created_at": "2011-05-05 22:56:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1109198", "text": "This is documented. Nothing we can do here, you need to require all models.\n", "created_at": "2011-05-06 01:49:44", "user": 9582, "id": 1109198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125687934", "text": "@josevalim where is this documented? I can't seem to find it.\n", "created_at": "2015-07-28 17:36:36", "user": 1904129, "id": 125687934}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Take into account the Rack::Server :SSLEnable option when building the application's URL.\n\nThis pull request refers to issue #335\n", "labels": [], "number": 408, "updated_at": "2014-06-28 16:56:50", "user": 53006, "closed_at": "2011-05-06 09:22:13", "id": 857189, "title": "Rails::Server outputs 'http://' even when running over SSL", "url": "https://api.github.com/repos/rails/rails/issues/408", "created_at": "2011-05-06 06:29:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm dealing with the following scenario: \nI deploy a RoR app (using Capistrano). I instruct Bundler to leave out the :development and :test groups, because these gems should not be needed in production. Nevertheless, I need my Rakefile to be usable, because there are rake tasks I need to be able to execute, such as 'rake db:migrate'. Currently, this is not the case: several generate/install actions installed tasks to lib/tasks, a directory that is of course deployed to production with the rest of the code, and these tasks, such as the Cucumber task, depend on gems from the :test group. \n\nI'm assuming you agree that it is better not to have the gems from :development and :test available in production. I think the best solution is to not include 'lib/tasks' when Rails is running with Rails.env == :production.\n", "labels": [], "number": 409, "updated_at": "2011-05-06 09:23:26", "user": 307722, "closed_at": "2011-05-06 09:09:54", "id": 857436, "title": "Rakefile depends on gems from :test. Production deployment without them impossible", "url": "https://api.github.com/repos/rails/rails/issues/409", "created_at": "2011-05-06 08:29:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110281", "text": "Those rake tasks should be lazy loading libraries instead of eager loading. ie just load something inside the task instead of the file top level.\n", "created_at": "2011-05-06 09:09:54", "user": 9582, "id": 1110281}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110335", "text": "OK, I'll take it up with the Cucumber guys then. :)\n", "created_at": "2011-05-06 09:21:30", "user": 307722, "id": 1110335}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110345", "text": "Cucumber should likely follow rspec footsteps. They should not copy lib/tasks to your application, but instead lazily load it using Rails::Railtie.\n", "created_at": "2011-05-06 09:23:25", "user": 9582, "id": 1110345}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "`distance_of_time_in_words` does not take leap years into account accurately. The bug was raised on [Lighthouse 6074](https://rails.lighthouseapp.com/projects/8994/tickets/6074-distance_of_time_in_words-calculates-wrong-no-of-years). \n\nPatch with test provided. Feel free to comment/review/suggest changes.\n", "labels": [], "number": 410, "updated_at": "2014-06-13 18:57:37", "user": 762, "closed_at": "2011-05-06 11:41:31", "id": 857841, "title": "distance_of_time_in_words calculates wrong no of years ", "url": "https://api.github.com/repos/rails/rails/issues/410", "created_at": "2011-05-06 10:25:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110598", "text": "Can we measure how much this new implementation will affect performance? In general, the Date class is not very fast.\n", "created_at": "2011-05-06 10:32:28", "user": 9582, "id": 1110598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110630", "text": "Having a quick look at `Date.leap?` reveals that it instantiates 1st March on the year and checks if the previous day was a 29th? This implementation would do it for each year given in the range.\n\nHow much of a performance hit can we bargain for accuracy? :)\n\nWill measure and post gist. \n", "created_at": "2011-05-06 10:43:22", "user": 762, "id": 1110630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110694", "text": "I am worried how this will affect common cases like minutes, hours and 1 to 3 years. Maybe we could have a short circuit logic that simply skip this calculus if < 2 years. If you are working with old dates, this accuracy is indeed needed.\n", "created_at": "2011-05-06 10:56:28", "user": 9582, "id": 1110694}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110759", "text": "@josevalim shorter distances of time are handled in the `distance_of_time_in_words` method [already](https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/date_helper.rb#L67) to some extent.\n\nI think 525599 is the number of minutes in 365 days, so upto 1 year is already handled.\n\nThe whole method seems prime for refactoring but will now concoct to handle for < 2 years. \n", "created_at": "2011-05-06 11:14:06", "user": 762, "id": 1110759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110840", "text": "Ah, great, no performance worries then! I am merging this in. A refactoring is indeed welcome, at least the leap year part.\n", "created_at": "2011-05-06 11:41:14", "user": 9582, "id": 1110840}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "How to reproduce:\n\n```\nu = User.first # any model with a string field is ok, use User as example\nu.name = 'a?b'\nu.save\n```\n\nThe Error:\n\n```\nNoMethodError: You have a nil object when you didn't expect it!\nYou might have expected an instance of Array.\nThe error occurred while evaluating nil.reverse\nfrom /home/jan/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-785ee65ddfc3/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:302:in `block in exec_delete'\n    from /home/jan/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-785ee65ddfc3/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:302:in `gsub'\n    from /home/jan/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-785ee65ddfc3/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:302:in `exec_delete'\n    from /home/jan/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-785ee65ddfc3/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:95:in `update'\n```\n\nRelated to https://github.com/rails/rails/commit/00f030c6#L0R297\n", "labels": [], "number": 411, "updated_at": "2011-05-09 20:54:19", "user": 5958, "closed_at": "2011-05-09 20:54:19", "id": 857987, "title": "Cannot save record whose field contains '?'", "url": "https://api.github.com/repos/rails/rails/issues/411", "created_at": "2011-05-06 11:11:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1124657", "text": "Just reporting that this is a problem with Mysql2 only and not other adapters (the test didnt fail with sqlite3, postgresql or even mysql, just mysql2 failed).\n", "created_at": "2011-05-09 16:42:07", "user": 762, "id": 1124657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1125328", "text": "Additionally, the problem is not seen during creation on when updating.\n", "created_at": "2011-05-09 18:29:09", "user": 762, "id": 1125328}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Got error when trying to start WebBrick\n\n<pre>\n\n/home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/execjs-0.3.2/lib/execjs.rb:32:in `runtime': Could not find a JavaScript runtime (ExecJS::RuntimeError)\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/execjs-0.3.2/lib/execjs.rb:44\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/coffee-script-2.2.0/lib/coffee_script.rb:1:in `require'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/coffee-script-2.2.0/lib/coffee_script.rb:1\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/coffee-script-2.2.0/lib/coffee-script.rb:1:in `require'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/coffee-script-2.2.0/lib/coffee-script.rb:1\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/actionpack-3.1.0.beta1/lib/sprockets/railtie.rb:4:in `require'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/actionpack-3.1.0.beta1/lib/sprockets/railtie.rb:4:in `using_coffee?'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/actionpack-3.1.0.beta1/lib/sprockets/railtie.rb:17\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/actionpack-3.1.0.beta1/lib/action_controller/railtie.rb:7:in `require'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/actionpack-3.1.0.beta1/lib/action_controller/railtie.rb:7\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/activerecord-3.1.0.beta1/lib/active_record/railtie.rb:9:in `require'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/activerecord-3.1.0.beta1/lib/active_record/railtie.rb:9\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/railties-3.1.0.beta1/lib/rails/all.rb:11:in `require'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/railties-3.1.0.beta1/lib/rails/all.rb:11\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/railties-3.1.0.beta1/lib/rails/all.rb:5:in `each'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/railties-3.1.0.beta1/lib/rails/all.rb:5\n    from /home/mojo/Sites/hello/config/application.rb:3:in `require'\n    from /home/mojo/Sites/hello/config/application.rb:3\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/railties-3.1.0.beta1/lib/rails/commands.rb:51:in `require'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/railties-3.1.0.beta1/lib/rails/commands.rb:51\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/railties-3.1.0.beta1/lib/rails/commands.rb:48:in `tap'\n    from /home/mojo/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/railties-3.1.0.beta1/lib/rails/commands.rb:48\n    from script/rails:6:in `require'\n    from script/rails:6\n\n\n</pre>\n", "labels": [], "number": 412, "updated_at": "2012-01-11 04:53:52", "user": 135605, "closed_at": "2011-05-07 15:55:18", "id": 857989, "title": "ExecJS missing runtime message needs to be improved", "url": "https://api.github.com/repos/rails/rails/issues/412", "created_at": "2011-05-06 11:12:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110830", "text": "@joneslee85, you need an ExecJS runtime, one of the several listed here: https://github.com/sstephenson/execjs\n\n@josh I have seen this question also coming up on twitter. Can we change execjs message again? Maybe we could say something like: \"Could not find a JavaScript runtime. Please install one of the following: [list of available runtimes]. You can read more about it here: [link to execjs project].\"\n", "created_at": "2011-05-06 11:37:23", "user": 9582, "id": 1110830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114779", "text": "I re-open this issue because I still get the same error ONLY on my Linux box even though execjs 0.3.2 and 0.3.3 is there. Steps to re-produce:\n\n<pre>\n$ rvm gemset create rails31\n$ rvm use ree@rails31\n$ gem install rails --pre\n$ rails new testo\n$ cd testo\n$ bundle install\n$ rails s\n</pre>\n\n\nEDIT: Works with OSX. Got problem with Ubuntu 11.04 (2.6.38-8-generic) + ree-1.8.7-2011.03 [ i386 ]\n", "created_at": "2011-05-07 06:40:42", "user": 135605, "id": 1114779}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115027", "text": "Yes, you need to install one of the runtimes I linked above. Meanwhile we will improve the ExecJS message, please don't close the ticket.\n", "created_at": "2011-05-07 09:48:07", "user": 9582, "id": 1115027}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115651", "text": "https://github.com/sstephenson/execjs/commit/ee65ab12bae2d3f60b137e89fe638098fe5decb6\n", "created_at": "2011-05-07 15:37:24", "user": 137, "id": 1115651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115685", "text": "Sweet, thanks @josh.\n", "created_at": "2011-05-07 15:55:18", "user": 9582, "id": 1115685}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1189690", "text": "Hi guys i also got the same problem, but i added \"therubyracer\" on Gemfile it works fine. My question is keep adding like this for all new projects? \n", "created_at": "2011-05-17 10:29:49", "user": 168275, "id": 1189690}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1965610", "text": "I am following the steps in Rails Guide 3.1.\nI had to add gem 'therubyracer' to avoid errors.\nAgain is this how we have to do for any new rails project?\n", "created_at": "2011-09-01 07:18:28", "user": 542467, "id": 1965610}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2179966", "text": "follow the below command so that you don't need to run( gem 'therubyracer'  & bundle install )  for every new project \n1. Install the CentOS development tools package ‚Äì sudo yum groupinstall 'Development Tools'\n2. Install the Open SSL development package (This is required for Node.js to support HTTPS) ‚Äì sudo yum install openssl-devel\n3. Find a convenient place to download the Node.js package. I used the root directory ‚Äì cd /root\n4. Download the Node.js package (Check the Node.js site for the latest version) ‚Äì wget http://nodejs.org/dist/node-v0.4.8.tar.gz\n5. Unzip the downloaded Node.js package ‚Äì gunzip node-v0.4.8.tar.gz\n6. Unpack the contents of node-v0.4.8.tar ‚Äì tar -xf node-v0.4.8.tar\n7. Set 6. should have created a directory under the directory that you are currently in. In my case, I was in /root. CD into that directory ‚Äì cd node-v0.4.8\n8. Run configure ‚Äì ./configure\n9. Build Node.js ‚Äì make\n10. Install your Node.js build ‚Äì make install\n", "created_at": "2011-09-23 15:52:51", "user": 1074308, "id": 2179966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2184905", "text": "I think adding the gem is much simpler\n", "created_at": "2011-09-24 04:17:41", "user": 542467, "id": 2184905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2186289", "text": "no that is very simple & dont need to set gem 'therubyracer' & bundle install  for any new project\ni write it again in simple way: \nwget http://nodejs.org/dist/node-v0.4.8.tar.gz\n gunzip node-v0.4.8.tar.gz\ntar -xf node-v0.4.8.tar\n cd node-v0.4.8\n./configure\nmake\n make install\n", "created_at": "2011-09-24 13:16:46", "user": 1074308, "id": 2186289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2233874", "text": "I don't understand why the Rails 3.1 new project generator doesn't just include a gem in your Gemfile with a javscript runtime -- since by default it's including gems that require a javascript runtime.  I don't understand the rationale of having the default app generator produce an app that you can't actually run, not even to get the 'hello world' message. \n\nWhat am i missing?  At the very least, some documentation should be provided in a prominent place (the 'getting started' Guide?) explaining whatever it is I'm missing; the present situation is very confusing for people getting started. \n", "created_at": "2011-09-29 04:15:19", "user": 149304, "id": 2233874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2233962", "text": "@jrochkind the new project generator doesn't include a javascript runtime by default because no all the users need a gem for it: Mac OS X include a JavascriptCore runtime by default, Windows include Windows Script Host by default and some others users have Node.js installed.\n", "created_at": "2011-09-29 04:33:20", "user": 160941, "id": 2233962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2343044", "text": "This link is help you to install the node.js\nhttps://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager\n", "created_at": "2011-10-10 05:19:11", "user": 168275, "id": 2343044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2380829", "text": "I had this problem, too. I run Linux and didn't have node.js installed before I read this thread. Once installed, my Rails 3.1 app ran without the ExecJS error. \n\nIf you're running Ubuntu 10.10 as I am, running 'sudo aptitude install nodejs' will install node.js. It provided the javascript runtime that execjs could use in my Rails 3.1 app and I didn't need to do anything to tell ExecJS how to find it. \n\nI think your answer, @guilleiguaran is right on. I think it's good that the generator doesn't provide a javascript runtime. At least for now. At the same time, the tutorials would be more helpful by providing a note about this dependency and link or two pointing to more information. So I agree with you, @jrochkind, it's confusing at first. \n", "created_at": "2011-10-12 15:52:57", "user": 329809, "id": 2380829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2580087", "text": "Oh Great, pjmelling, you are ready, Thanks for Collaboration.\n", "created_at": "2011-10-31 17:27:00", "user": 880182, "id": 2580087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3441412", "text": "I echo jrochkind's comment.  It's a little ridiculous that you can't run a freshly generated Rails app in Linux unless node.js is installed.  Is there a reason why the rails new generator doesn't add therubyracer (or therubyrhino for JRuby) to the Gemfile, if there is no Javascript runtime on the system?  I think I will issue a fix for this and issue a pull request.  \n", "created_at": "2012-01-11 03:16:00", "user": 218005, "id": 3441412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3441548", "text": "@brentsowers1 we discussed it in #3619.\n\nin the next versions of Rails (starting with 3.1.x) therubyrhino will be included by default on Gemfile if JRuby is detected.\n", "created_at": "2012-01-11 03:34:19", "user": 160941, "id": 3441548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3441830", "text": "@brentsowers1 I was trying to think through methods in which the rails  \ninstaller could determine if a JS runtime was available at generation  \ntime, to add the Gemfile dependency if it's not. I can't think of any  \nway but FIRST installing the execjs gem (if it's not installed?) and  \nuse it's API to determine if there's an available runtime (which  \nprobably means there needs to be a version dependency on execjs since  \nit's using it's API). Maybe first install the Gemfile as it now (which  \nincludes an execjs indirect dependency), then 'bundle install', THEN  \n(after Bundler.setup to get that dependency) use the execjs API, and  \nif neccesary (and it's MRI) THEN add therubyracer dependency. But  \n'bundle install' in 'Bunder.setup' are so sadly slow (especially when  \nrun via subshell, isn't there bundler api to do that instead? and  \nespecially under 1.9.x, even 1.9.3), that doing extra ones like this  \nis a drag. So I'm not sure.\n\nI had only thought a bit, not started coding. I encourage you to try  \nto figure it out and pull request, and hope the committers would  \naccept such a thing. It definitely seems to me that 'rails new' ought  \nto give you a runnable app on linux, which it does not currently.\n\nOn Jan 10, 2012, at 10:34 PM, Guillermo Iguaran wrote:\n\n> @brentsowers1 we discussed it in #3619.\n> \n> in the next versions of Rails (starting with 3.1.x) therubyrhino  \n> will be included by default on Gemfile if JRuby is detected.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/412#issuecomment-3441548\n", "created_at": "2012-01-11 04:15:58", "user": 149304, "id": 3441830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3441852", "text": "I'm working on a fix now, I just looked at the way execjs does it and copied that approach.  I'm testing my fix on Windows now (Windows doesn't need a gem added), once I verify that I'll issue a pull request.\n", "created_at": "2012-01-11 04:21:43", "user": 218005, "id": 3441852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3442045", "text": "I've fixed this now, running rails new on a Linux system that does not have node.js will add therubyracer to the Gemfile.  I've created 3 pull requests:\nFor Rails 3.1 - https://github.com/rails/rails/pull/4407\nFor Rails 3.2 - https://github.com/rails/rails/pull/4406\nFor Rails master - https://github.com/rails/rails/pull/4405\n", "created_at": "2012-01-11 04:53:52", "user": 218005, "id": 3442045}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "/cc @tenderlove @janx\n", "labels": [], "number": 413, "updated_at": "2014-06-26 15:07:19", "user": 762, "closed_at": "2011-05-06 12:00:51", "id": 858075, "title": "Failing test for #411", "url": "https://api.github.com/repos/rails/rails/issues/413", "created_at": "2011-05-06 11:47:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1110907", "text": "Github automatically already referenced the failing test commit on the issue. Cool! \n\nWhats the point of pulling just the failing test without the fix? Closing. Sorry.\n", "created_at": "2011-05-06 12:00:51", "user": 762, "id": 1110907}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @josevalim\n\nPlease [see](https://rails.lighthouseapp.com/projects/8994/tickets/5796-rails-30-generator-inconsistency). As per your comment another patch was provided which i think you missed (you also reopened the ticket back in Nov 2010).\n\nProviding a rebased patch. Pull if still relevant.\n", "labels": [], "number": 414, "updated_at": "2014-07-03 04:00:37", "user": 762, "closed_at": "2011-05-06 15:36:03", "id": 858211, "title": "config.generators.orm = false when skipping active record. LightHouse #5796", "url": "https://api.github.com/repos/rails/rails/issues/414", "created_at": "2011-05-06 12:38:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111081", "text": "I am having second thoughts now. I think this is not required because you can say --skip-active-record because you want to use Datamapper. Setting it to false will likely override the Datamapper setting. :( Maybe we should just change config.generators.orm and config.generators.test_framework inside railties/ to have a default of false, this way, if no activerecord, testunit or any other orm/test framework are available, it will automatically skip them. What do you think?\n", "created_at": "2011-05-06 12:47:23", "user": 9582, "id": 1111081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111228", "text": "That would be really sweet (if i completely understood it). \n\nIf I dont want an ORM, I would use --skip-active-record as an option when creating the app. \n\nSo you mean to say, we hack around the [vicinity](https://github.com/rails/rails/blob/master/railties/lib/rails/generators/resource_helpers.rb#L59). \n\nAre we saying we're going to quietly do nothing when the \"hook_for :orm\" is invoked?\n\nI definitely do understand the strategy but the implementation escapes me. Kindly guide. Once this is clear, then the skipping of test_framework will be clear too.\n", "created_at": "2011-05-06 13:20:22", "user": 762, "id": 1111228}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111236", "text": "I think we don't need to hack there. I think setting this to false will suffice:\n\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/generators.rb#L55\n\nIt is just a matter of testing it. :)\n", "created_at": "2011-05-06 13:22:30", "user": 9582, "id": 1111236}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111347", "text": "Understood. But we may have to refactor the application.rb [template](https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/app/templates/config/application.rb#L3). This loads rails/all.rb which loads the test_unit railtie. If --skip-test-framework is provided the the effect of test_unit/railtie is then nullified with the patch you already pulled in back in November.\n", "created_at": "2011-05-06 13:48:45", "user": 762, "id": 1111347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111374", "text": "Agreed. We need to skip the test_unit railtie if skip_test_unit is given. Actually, this should be happening a long time ago. :)\n", "created_at": "2011-05-06 13:54:14", "user": 9582, "id": 1111374}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111702", "text": "Is this right now?\n", "created_at": "2011-05-06 15:02:55", "user": 762, "id": 1111702}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111801", "text": "I have added a few comments, let me know what you think. Also, could you please ensure all generators tests pass with:\n\n```\ncd railties\nrake test TEST_DIR=generators\n```\n\nEasier than running the whole railties suite. :) (I haven't run tests here yet)\n", "created_at": "2011-05-06 15:16:52", "user": 9582, "id": 1111801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111891", "text": "Thanks for the suggestions! All done. All tests run fine too.\n", "created_at": "2011-05-06 15:33:48", "user": 762, "id": 1111891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111904", "text": "Fergalicious! Thanks!\n", "created_at": "2011-05-06 15:35:45", "user": 9582, "id": 1111904}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "To ilustrate issue, create 2 models:\n\nParent (id, name)\nclass Parent < ActiveRecord::Base\n  has_many :childs\n  has_many :finder_childs, :class_name => 'Child', :finder_sql => 'SELECT \\* from children WHERE parent_id=#{id}'\nend\n\nChild(id, name, parent_id)\nclass Child < ActiveRecord::Base\nend\n\np = Parent.first\np.childs.all.map(&:id) # works ok\np.finder_childs.all.map(&:id) # raises sql exception because of invalid query\n\nLast line generates exception in sqlite and mysql. Error for sqlite:\nSQLite3::SQLException: only a single result allowed for a SELECT that is part of an expression: SELECT \"children\".\\* FROM \"children\" WHERE (SELECT \\* from children WHERE parent_id=1)\n\nusing p.finder_childs.map(&:id) works fine.\n", "labels": [], "number": 415, "updated_at": "2011-10-27 15:06:33", "user": 557122, "closed_at": "2011-10-09 03:21:47", "id": 858222, "title": "ActiveRecord :has_many with :finder_sql generates invalid query", "url": "https://api.github.com/repos/rails/rails/issues/415", "created_at": "2011-05-06 12:41:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111095", "text": "What version of Rails is this on?\n", "created_at": "2011-05-06 12:49:43", "user": 1979, "id": 1111095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111101", "text": "Rails 3.0.6\n", "created_at": "2011-05-06 12:51:53", "user": 557122, "id": 1111101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1166965", "text": "Is the lack of a belongs_to call intentional here?\n", "created_at": "2011-05-15 19:03:01", "user": 108205, "id": 1166965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515039", "text": "Do you also reproduce it with 3.0 ? And 3.1rc ?\nHave you tried @jgaskins suggestion to add the reverse belongs_to ?\n", "created_at": "2011-07-06 20:33:15", "user": 9347, "id": 1515039}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1526909", "text": "Adding belongs_to won't help as the problem lies in the use of \"all\" method here:\np.finder_childs.all.map(&:id)\n\nThe \"all\" method in this context is defined as a wrapper for find(:all, *args) so the above line is interpreted as:\np.finder_childs.find(:all).map(&:id)\n\nwhat results in double SELECT\n\nThe solution is to remove the method call:\np.finder_childs.map(&:id)\n", "created_at": "2011-07-07 22:38:22", "user": 734845, "id": 1526909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2101591", "text": "any simple workaround? this breaks also in various validation generated code.\n\nthanks.\n", "created_at": "2011-09-15 06:57:16", "user": 20167, "id": 2101591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2225153", "text": "As a workaround, you can use a proc:\n\nhas_many :messages, :finder_sql => proc { \"SELECT \\* FROM messages WHERE author_id = #{self.id} or recipient_id = #{self.id}\" }\n", "created_at": "2011-09-28 13:50:06", "user": 2009, "id": 2225153}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2394366", "text": "I was just having that issue. The rails doc says that #{id} could be used, but that brings the object id, the proc worked fine. Perhaps the doc should be updated to reflect that in order to create relations with custom finders, a Proc should be created.\n\n```\n  #   has_many :subscribers, :class_name => \"Person\", :finder_sql =>\n  #       'SELECT DISTINCT people.* ' +\n  #       'FROM people p, post_subscriptions ps ' +\n  #       'WHERE ps.post_id = #{id} AND ps.person_id = p.id ' +\n  #       'ORDER BY p.first_name'\n```\n", "created_at": "2011-10-13 13:00:25", "user": 4686, "id": 2394366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2544608", "text": "sadly the proc doesnt work on rails 2.x :(\n", "created_at": "2011-10-27 15:06:33", "user": 20167, "id": 2544608}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As of right now, we can't see the content of https://rails.lighthouseapp.com/ and instead it tells us \"Oops! : You must be a member of this account\".\n\nDisabling new tickets there is fine, but making the entire content private? No, no, please.\n\nWe have lots of links from our source code to the permalinks on rails.lighthouseapp.com, to explain rationale for patches, etc. and that includes my own comments. We have patches for like TimeZone, ActiveSupport::JSON::Encoding, ActionDispatch::Http::MimeNegotiation, ActionDispatch::ShowExceptions, etc. and losing those information could lead to lots of duplicated efforts.\n\nIf you can't get back this to public, at least let us download some of the tickets in there.\n", "labels": [], "number": 416, "updated_at": "2011-05-06 15:03:59", "user": 10350, "closed_at": "2011-05-06 15:00:30", "id": 858680, "title": "We need rails.lighthouseapp.com back to public", "url": "https://api.github.com/repos/rails/rails/issues/416", "created_at": "2011-05-06 14:32:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111533", "text": "Just sign on LH and you will be able to see it.\n", "created_at": "2011-05-06 14:35:15", "user": 9582, "id": 1111533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111564", "text": "This is how https://rails.lighthouseapp.com/ looks to me.\n\nhttp://gyazo.com/2e70f1c45de1b54cb8524fcb028307f8.png\n\nIf core team can see it, that's why you guys didn't notice the problem, I guess?\n", "created_at": "2011-05-06 14:40:36", "user": 10350, "id": 1111564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111580", "text": "Oh, so it is available just for members? Nasty!\n", "created_at": "2011-05-06 14:44:01", "user": 9582, "id": 1111580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111593", "text": "Found a related ticket https://github.com/rails/rails/issues/404\n", "created_at": "2011-05-06 14:46:18", "user": 10350, "id": 1111593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111682", "text": "Closing this one then.\n", "created_at": "2011-05-06 15:00:30", "user": 9582, "id": 1111682}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1111709", "text": "An other one, where DHH has intervened : https://github.com/rails/rails/issues/401\n", "created_at": "2011-05-06 15:03:59", "user": 9347, "id": 1111709}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "bind variables with mysql2 may not work properly as [string literals could contain question marks](https://github.com/rails/rails/commit/00f030c6e107f92fc9ef13a8c77e31b5e5299e6e#commitcomment-371840).\n\nFigure out a different strategy for faking bind parameter support in mysql2.\n", "labels": [], "number": 417, "updated_at": "2011-05-11 19:45:24", "user": 3124, "closed_at": "2011-05-11 19:45:24", "id": 859051, "title": "mysql2 bind variables need to be reworked", "url": "https://api.github.com/repos/rails/rails/issues/417", "created_at": "2011-05-06 15:54:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142599", "text": "Fixed by the commit referenced.\n", "created_at": "2011-05-11 19:45:21", "user": 2741, "id": 1142599}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I forgot to add this when I added this feature a week or so ago.\n", "labels": [], "number": 418, "updated_at": "2014-07-03 04:00:48", "user": 49391, "closed_at": "2011-05-06 17:20:11", "id": 859416, "title": "Add documentation for new observer enable/disable feature.", "url": "https://api.github.com/repos/rails/rails/issues/418", "created_at": "2011-05-06 17:19:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 419, "updated_at": "2014-07-03 04:00:52", "user": 83449, "closed_at": "2011-05-06 17:26:21", "id": 859438, "title": "better styling on #available_action? docs", "url": "https://api.github.com/repos/rails/rails/issues/419", "created_at": "2011-05-06 17:25:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Made ActionView::MissingTemplate#initialize optionally accept a single string\nprefix to be converted to an array [as in ActionView::PathSet#find_all.](https://github.com/rails/rails/blob/master/actionpack/lib/action_view/path_set.rb#L18)\n\nThis is minor, but it solved an issue I was having with a completely unrelated gem, and feels like a gain in consistency to me, given how these two methods are called on [line 14](https://github.com/rails/rails/blob/master/actionpack/lib/action_view/path_set.rb#L14).\n", "labels": [], "number": 420, "updated_at": "2014-06-14 23:22:35", "user": 1284, "closed_at": "2011-05-08 10:35:20", "id": 859572, "title": "Accept single prefix in ActionView::MissingTemplate#initialize", "url": "https://api.github.com/repos/rails/rails/issues/420", "created_at": "2011-05-06 17:56:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112683", "text": "Please use Array.wrap() instead? Can you provide a test also?\n", "created_at": "2011-05-06 18:00:55", "user": 9582, "id": 1112683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115028", "text": "Thanks @burke, one last thing. Could you please ensure \"active_support/core_ext/array/wrap\" is required at the top of these two files? We need it in order to use Array.wrap. Then I will merge it straight away. Thanks!\n", "created_at": "2011-05-07 09:51:32", "user": 9582, "id": 1115028}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nI hope I can explain this correctly but I ran into an issue with 3.0.7 (not sure about earlier versions) while upgrading my 2.3.8 application. I use activerecord db session storage. It took awhile to track down but I have a javascript observer in the view calling a controller method and somewhere in that transaction my session hash becomes nil. It also deletes the session from the sessions table in the db.\n\nThe controller has a before_filter that calls an authorize method in the application controller and before it reaches that method the session is punted. If I add an exception to the before_filter to ignore the method the observer is calling the session remains intact.\n\nHere's the javascript...\n\n<script>\n        document.observe(\"dom:loaded\", function() {\n            $('time_job_type').observe('change', new Ajax.Request('/time_sheets/set_collection?job_type=' + $('time_job_type').value));\n        }); \n</script>\n\n\nand here's the before_filter with the exception I had to add to get it to not punt my session...\n\nbefore_filter :authorize, :except => [:set_collection]\n\nI suspect the before_filter but If I'm making a grave organizational/programming error in how I'm implementing this I'm ready to be corrected by the experts.\n\nThanks,\n\nChris\n", "labels": [], "number": 421, "updated_at": "2011-05-09 15:36:32", "user": 208661, "closed_at": "2011-05-06 19:29:35", "id": 859743, "title": "Ajax request / before_filter session punting", "url": "https://api.github.com/repos/rails/rails/issues/421", "created_at": "2011-05-06 18:31:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112897", "text": "The point is that we need more information to reproduce the issue, if not, there is nothing we can do. We can't confirm, nor deny.\n", "created_at": "2011-05-06 18:37:50", "user": 9582, "id": 1112897}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112909", "text": "The point? I'm sorry I'm confused.\n\nDo you need more information? What do you need?\n", "created_at": "2011-05-06 18:40:28", "user": 208661, "id": 1112909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112924", "text": "How is the authorize method implemented? Can't be whatever in the authorize method punting the session? Can you isolate the issue in a smaller application or maybe provide a failing test case to Rails? There is absolutely no way we can guess of what can be in your before filter that is causing the session to be removed.\n", "created_at": "2011-05-06 18:44:29", "user": 9582, "id": 1112924}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1112999", "text": "Maybe I wasn't clear in when I said I suspect the before_filter. I'm talking about the before_filter method itself. Not my method that before_filter calls. The session is punted before my method is called.\n\nWhy did you close this issue? I'm trying to be a good rails citizen by providing you with some information about Rails 3. If your'e not interested in me submitting possible bugs please let me know so I can make an informed decision about moving forward with Rails. Every time there's a Rails 3 release I attempt to upgrade my 2.3.8 application and every time I run into a bug that stops me from upgrading. I'm a patient guy so I can stick with 2.3.8 if you want but I'd like to move forward with Rails 3 to learn about and implement the latest methods of Rails development.\n", "created_at": "2011-05-06 19:02:10", "user": 208661, "id": 1112999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113047", "text": "I can affirm 99% it is not the before_filter method. You have asked expert help and you are getting it. Unless we have more information about the authorize method or how to reproduce the issue, there is nothing we can do. For instance, try this:\n\n```\nbefore_filter :authenticate\n\ndef authenticate\n  # Leave the authenticate method empty\nend\n```\n\nI have closed the issue by mistake, the comment & close button is too close to the normal comment. :(\n", "created_at": "2011-05-06 19:11:06", "user": 9582, "id": 1113047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113092", "text": "Well, I just tried what you asked me to do above and the session goes bye-bye. I'm happy to help you troubleshoot this issue further if you can tell me what you need.\n", "created_at": "2011-05-06 19:21:43", "user": 208661, "id": 1113092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113104", "text": "Can you isolate in a smaller application and push to Github?\n", "created_at": "2011-05-06 19:23:32", "user": 9582, "id": 1113104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113108", "text": "Just to clarify, this before_filter issue only seems to be happening during the observer Ajax call. It seems to be working otherwise with other parts of my application.\n", "created_at": "2011-05-06 19:24:01", "user": 208661, "id": 1113108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113141", "text": "One potential cause of the issue you are seeing would be if your Ajax requests do not conform to the _new_ CSRF protection mechanism. If you have not updated your `rails.js`, try updating it, as an outdated `rails.js` does _not_ conform.\n", "created_at": "2011-05-06 19:29:05", "user": 169419, "id": 1113141}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113143", "text": "Hi Chris,\n\nThis ticket doesn't provide us with enough information to reproduce your error.  Unfortunately the rails core team is not large enough to have the man power required to tease out the particular details of your issue.  I think the best course of action for you is to:\n1. Send an email to the [ruby on rails mailing list](http://groups.google.com/group/rubyonrails-talk).  People there can help you identify the problem.\n2. Once you've identified the problem, file a bug report that contains detailed reproduction steps.  This may even go so far as to create a new application.  Sending us an application that doesn't work as expected is perfectly fine, as you do your best to reduce the moving parts.  The important part is that you give the core team something _tangible_ to work with.\n\nI am closing this ticket for now, please feel free to reopen it (or file a new ticket) once you have better reproduction steps.\n\nThanks for your time, and I hope you understand the position we're in.  :-(\n", "created_at": "2011-05-06 19:29:35", "user": 3124, "id": 1113143}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113182", "text": "Finally some guidance! I will pursue these other avenues before I submit again. \n\nI totally get where you're coming from and that you are working hard.\n\nThank you!\n", "created_at": "2011-05-06 19:36:26", "user": 208661, "id": 1113182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113210", "text": "@cpanderson you _almost_ certainly have a localized problem in your app. stackoverflow.com or similar forums are a far better place to seek help. You are basically stating , \"before_filters are blowing away sessions\". Now Rails has a very very extensive set of regression tests which ensure that such basic stuff works just fine. In this forum, it is almost exclusively your own responsibility to prove that something is broken in Rails (submit failing Rails bug) and to a some extent take the onus of providing a fix as well.\n\nI _assure_ you that Stackoverflow.com and the Rails mailing list have a number of motivated folks eager to help others with problems in their apps. In could be that with their help you may discover a core bug but given the amount of info provided in this ticket it is impossible to determine that it is indeed a bug in core Rails. \n\n@josevalim has given an awesome suggestion of overriding the authorize method to try to isolate the problem. You may want to check other before filters that may be getting triggered in your app. You may want to go over the plugins in your app which maybe causing the problem.\n\nHumbly, your suspicion that \"before_filter is punting the session\" causing the problem is not enough. You need to prove it.\n", "created_at": "2011-05-06 19:40:54", "user": 762, "id": 1113210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113235", "text": "Fair enough. I have been schooled.\n", "created_at": "2011-05-06 19:44:25", "user": 208661, "id": 1113235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123077", "text": "This is 100% a CRSF issue. I was just bitten by that the other day. Our CRSF middleware doesn't output anything in the log, it just blows away the session, which sucks ass. I wasted more than an hour tracing this down in an app. Blah. Someone please fix.\n", "created_at": "2011-05-09 14:36:41", "user": 2741, "id": 1123077}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123336", "text": "@dhh So we should change the default functionality by logging a message saying we got a CSRF unverified request. \n\nAre you also suggesting we don't blow away the session as default Rails behavior? I would imagine it would be the safe thing to do. The code suggest the user can override the handle_unverified_request message if they want to handle it differently. \n\nalso I wonder how @cpanderson got the request to work simply by skipping the :authorize before_filter if it was just a CSRF issue?\n\nRoot cause of the problem was still the missing CSRF tokens in the request, right? Was than just an error in your app or we need to be digging in jQuery-rails or Prototype-rails?\n", "created_at": "2011-05-09 15:19:11", "user": 762, "id": 1123336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123348", "text": "We _need_ to reset the session if CSRF was not verified. handle_unverified_request should be change to consider cookies and other stuff that may allow the request to continue. I have already pushed a commit that logs if CSRF could not be verified in development.\n", "created_at": "2011-05-09 15:23:47", "user": 9582, "id": 1123348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123424", "text": "I meant to say that the safe thing do is to \"blow away the session\" if the request is unverified.\n", "created_at": "2011-05-09 15:36:32", "user": 762, "id": 1123424}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The bug's in the documentation for slice! :\n\n   string = \"this is a string\"\n   string.slice!(2)        #=> 105\n   string.slice!(3..6)     #=> \" is \"\n\nWhereas the last line is supposed to be:\n\nstring.slice!(4..7)     #=> \" is \"\n\nThanks,\nOsman\n", "labels": [], "number": 422, "updated_at": "2011-05-07 10:23:01", "user": 453352, "closed_at": "2011-05-07 09:50:03", "id": 860542, "title": "Bug in corelib.rubyonrails.org String documentation", "url": "https://api.github.com/repos/rails/rails/issues/422", "created_at": "2011-05-06 19:55:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114836", "text": "The examples need to be read as a sequence. In this case, the slice!(2) already changed the string to \"ths is a string\". And then the 3..6 slice will be \" is \" as given.\n", "created_at": "2011-05-07 07:23:06", "user": 146214, "id": 1114836}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115071", "text": "Oh. Haha : (\n", "created_at": "2011-05-07 10:23:01", "user": 453352, "id": 1115071}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Currently Identity Map has a small bug when using STI. It is currently calculating the caching key by using the `symbolized_base_class`. To accomplish that, I had to add `symbolized_sti_name` to `ActiveRecord::Base` since I didn't find anything else that could be used. Let me know if this is a problem and if there is a method that can be used instead.\n\nInitial discussion with @miloops\nhttps://github.com/richardiux/rails/commit/564922b32ceec259c442e965ac8a61ea5545bd48\n", "labels": [], "number": 423, "updated_at": "2014-06-16 19:55:29", "user": 37318, "closed_at": "2011-05-06 21:07:31", "id": 860778, "title": "Identity Map caching bug", "url": "https://api.github.com/repos/rails/rails/issues/423", "created_at": "2011-05-06 20:45:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113598", "text": "@miloops, +1 for merging these commits?\n", "created_at": "2011-05-06 20:59:36", "user": 9582, "id": 1113598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113623", "text": "Yes, they look good, although i don't have time now to run tests. If you can do that then I think is ok to merge.\n", "created_at": "2011-05-06 21:05:37", "user": 3359, "id": 1113623}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113633", "text": "Is symbolized base class still used somewhere else?\n", "created_at": "2011-05-06 21:07:06", "user": 9582, "id": 1113633}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113683", "text": "I have applied but had to revert those changes because tests did not pass. It seems Github do not allow me to reopen the issue, @richardiux could please open a new issue and point to this one?\n", "created_at": "2011-05-06 21:20:38", "user": 9582, "id": 1113683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113908", "text": "@josevalim It idn't allow me to send a pull request since it has already been applied to master. I ran the tests with `rake test_mysql` under the activerecord directory and had no errors. What issues did you have?\n", "created_at": "2011-05-06 22:08:18", "user": 37318, "id": 1113908}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113914", "text": "I had issues with \"rake test_sqlite3\". I think that to bring your commits again, you will have to rebase your branch against rails master, revert my revert (lolgit) and apply the fix.\n", "created_at": "2011-05-06 22:10:39", "user": 9582, "id": 1113914}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115652", "text": "Tested with `rake test_sqlite3` and `rake test_mysql` and I didn't get any errors on my machine. Checked out a new version of rails, and reverted the revert, and I still didn't get any errors. Let's try again, maybe there was other commit that caused trouble?\n\nDo you know what is the git command to rebase from my clone on github? Otherwise I'll just re-clone it.\n", "created_at": "2011-05-07 15:38:10", "user": 37318, "id": 1115652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115656", "text": "So here is what I just did:\n\n1) I have forked Rails again, created a new branch and typed:\n\n  git checkout -b imfix\n  git revert 886818d\n\n2) Then, I went to activerecord, under REE and did:\n\n  rake test_sqlite3\n\n3) I got the following failures:\n\n  1) Error:\ntest_find_by_sess_id_compat(ActiveRecord::SessionStore::SessionTest):\nArgumentError: interning empty string\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in `to_sym'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in`symbolized_sti_name'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/identity_map.rb:71:in `remove'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:38:in`save!'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:246:in `save!'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:295:in`with_transaction_returning_status'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:191:in `transaction'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:208:in`transaction'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:293:in `with_transaction_returning_status'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:246:in`save!'\n    ./test/cases/session_store/session_test.rb:43:in `test_find_by_sess_id_compat'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in`**send**'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:408:in`_run_setup_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in `send'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in`run_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n\n  2) Error:\ntest_read_attributes_after_type_cast_on_datetime(AttributeMethodsTest):\nArgumentError: interning empty string\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in `to_sym'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in`symbolized_sti_name'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/identity_map.rb:71:in `remove'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:254:in`rollback_active_record_state!'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:240:in `save'\n    ./test/cases/attribute_methods_test.rb:162:in`test_read_attributes_after_type_cast_on_datetime'\n    ./test/cases/attribute_methods_test.rb:667:in `in_time_zone'\n    ./test/cases/attribute_methods_test.rb:151:in`test_read_attributes_after_type_cast_on_datetime'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in`run'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:408:in `_run_setup_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in`send'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in`run'\n\n  3) Error:\ntest_time_attributes_changes_with_time_zone(DirtyTest):\nArgumentError: interning empty string\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in `to_sym'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in`symbolized_sti_name'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/identity_map.rb:71:in `remove'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:38:in`save!'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:246:in `save!'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:295:in`with_transaction_returning_status'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:191:in `transaction'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:208:in`transaction'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:293:in `with_transaction_returning_status'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:246:in`save!'\n    ./test/cases/dirty_test.rb:69:in `test_time_attributes_changes_with_time_zone'\n    ./test/cases/dirty_test.rb:522:in`in_time_zone'\n    ./test/cases/dirty_test.rb:58:in `test_time_attributes_changes_with_time_zone'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in`**send**'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:408:in`_run_setup_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in `send'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in`run_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n\n  4) Error:\ntest_time_attributes_changes_without_time_zone(DirtyTest):\nArgumentError: interning empty string\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in `to_sym'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in`symbolized_sti_name'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/identity_map.rb:71:in `remove'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:38:in`save!'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:246:in `save!'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:295:in`with_transaction_returning_status'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:191:in `transaction'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:208:in`transaction'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:293:in `with_transaction_returning_status'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:246:in`save!'\n    ./test/cases/dirty_test.rb:125:in `test_time_attributes_changes_without_time_zone'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in`**send**'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:408:in`_run_setup_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in `send'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in`run_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n\n  5) Error:\ntest_time_attributes_changes_without_time_zone_by_skip(DirtyTest):\nArgumentError: interning empty string\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in `to_sym'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in`symbolized_sti_name'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/identity_map.rb:71:in `remove'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:38:in`save!'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:246:in `save!'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:295:in`with_transaction_returning_status'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:191:in `transaction'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:208:in`transaction'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:293:in `with_transaction_returning_status'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/transactions.rb:246:in`save!'\n    ./test/cases/dirty_test.rb:96:in `test_time_attributes_changes_without_time_zone_by_skip'\n    ./test/cases/dirty_test.rb:522:in`in_time_zone'\n    ./test/cases/dirty_test.rb:83:in `test_time_attributes_changes_without_time_zone_by_skip'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in`**send**'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:408:in`_run_setup_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in `send'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in`run_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n\n  6) Error:\ntest_observing_subclasses(LifecycleTest):\nArgumentError: interning empty string\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in `to_sym'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:834:in`symbolized_sti_name'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/identity_map.rb:52:in `get'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/relation/finder_methods.rb:319:in`find_one'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/relation/finder_methods.rb:304:in `find_with_ids'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/relation/finder_methods.rb:107:in`find'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:440:in `__send__'\n    /Users/jose/Work/github/rails/activerecord/lib/active_record/base.rb:440:in`find'\n    ./test/cases/lifecycle_test.rb:173:in `test_observing_subclasses'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in`**send**'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:408:in`_run_setup_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in `send'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/callbacks.rb:81:in`run_callbacks'\n    /Users/jose/Work/github/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n\n2937 tests, 8925 assertions, 0 failures, 6 errors\n\nYou are probably finding it hard to rebase because you applied your commits to your branch master. Generally, it is easier if you work on branches and always leave the branch master for sync.\n", "created_at": "2011-05-07 15:39:20", "user": 9582, "id": 1115656}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115663", "text": "Actually, looking at the errors, the fix is actually trivial. The issue is because Class.new.name returns an empty string on 1.8.7 but nil on 1.9.2. I am pushing a fix and a revert of the revert. :)\n", "created_at": "2011-05-07 15:43:23", "user": 9582, "id": 1115663}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115665", "text": "Generally speaking, you should have two remotes in your checkout: origin (which is your fork) and rails (which you should add manually). Usually you don't commit to your master branch and leave it just for sync. So when you want to sync your fork with Rails master, you do:\n\n```\n# Get changes from Rails\ngit pull --rebase rails master\n\n# Push changes to your fork\ngit push origin master\n\n# Then you can also go to your branches and rebase\ngit checkout my_feature\ngit rebase master\n```\n\nIs this what you have asked?\n", "created_at": "2011-05-07 15:45:13", "user": 9582, "id": 1115665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115687", "text": "Here is the fix:\n\nhttps://github.com/rails/rails/commit/ba23bf43f224845d38b2483d68c0daf698a1c512\n\nNow everything pass. :)\n", "created_at": "2011-05-07 15:55:49", "user": 9582, "id": 1115687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115704", "text": "Great! I did the same thing on my machine. Took me a while to install REE, I was just testing with 1.9.2. Now I know better :) \nThanks for all your help in getting the fix in.\n", "created_at": "2011-05-07 16:03:12", "user": 37318, "id": 1115704}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 424, "updated_at": "2014-06-20 12:36:33", "user": 278, "closed_at": "2011-05-06 21:50:21", "id": 860955, "title": "Fixes around_filter from observer, github issue#329", "url": "https://api.github.com/repos/rails/rails/issues/424", "created_at": "2011-05-06 21:41:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1113814", "text": "Thanks. :)\n", "created_at": "2011-05-06 21:50:00", "user": 9582, "id": 1113814}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "PATCH is the correct HTML verb to map to the #update action. The semantics for\nPATCH allows for partial updates, whereas PUT requires a complete replacement.\n\nChanges:\n- adds the #patch verb to routes to detect PATCH requests\n- adds #patch? to Request\n- adds the PATCH -> update mapping in the #resource(s) routes.\n- changes default form helpers to prefer :patch instead of :put for updates\n- changes documentation and comments to indicate the preference for PATCH\n\nThis change tries to maintain complete backwards compatibility by keeping the\noriginal PUT -> update mapping. Users using the #resource(s) routes should not\nnotice a change in behavior since both PUT and PATCH requests get mapped to\nupdate.\n", "labels": [], "number": 425, "updated_at": "2014-06-13 14:21:29", "user": 7035, "closed_at": "2011-05-07 11:40:41", "id": 861269, "title": "Use PATCH instead of PUT; Fixes issue #348", "url": "https://api.github.com/repos/rails/rails/issues/425", "created_at": "2011-05-06 23:20:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114214", "text": "Excellent dlee :).\n\nI'll check it out when 3.1 is branched.\n", "created_at": "2011-05-06 23:38:37", "user": 3387, "id": 1114214}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114240", "text": "Now this is a perfectly complete pull request: code, tests and docs. Love it. Bravo!!\n", "created_at": "2011-05-06 23:46:18", "user": 83449, "id": 1114240}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114371", "text": "Oops, that wasn't supposed to go there.\n", "created_at": "2011-05-07 00:43:23", "user": 7035, "id": 1114371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115203", "text": "Closed in favor of #431.\n", "created_at": "2011-05-07 11:40:41", "user": 9582, "id": 1115203}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Right now, when you issue a PUT request using the <tt>_method</tt> param method override, it's not indicated anywhere in the logs. The <tt>_method</tt> parameter is stripped from the Parameters line, and the log says it was a POST request:\n\n```\nStarted POST \"/post/1\" for 127.0.0.1 at 2011-05-06 16:15:58 -0700\n  Processing by PostsController#update as HTML\n  Parameters: {\"utf8\"=>\"‚úì\", \"authenticity_token\"=>\"pirld4RhMa0a3LRTVKGPg+KRa8Cr3To/aeyxsr4pXRI=\", \"name\"=>\"a\", \"commit\"=>\"Save changes\", \"id\"=>\"1\"}\n```\n", "labels": [], "number": 426, "updated_at": "2011-05-07 10:50:30", "user": 7035, "closed_at": "2011-05-07 10:50:30", "id": 861326, "title": "methodoverride does not appear anywhere in logs", "url": "https://api.github.com/repos/rails/rails/issues/426", "created_at": "2011-05-06 23:47:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114304", "text": "When \"Started POST\" is logged, we still haven't passed through the method override middleware. I think the sanest fix is to include _method in the Parameters. That is handled here:\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_controller/log_subscriber.rb#L5\n\nWhat do you think?\n", "created_at": "2011-05-07 00:15:56", "user": 9582, "id": 1114304}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114358", "text": "Sounds good to me. I'll cook up a patch.\n", "created_at": "2011-05-07 00:37:43", "user": 7035, "id": 1114358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114401", "text": "We need to fix the \"Started POST\" part. Whatever is outputting that needs to look at _method. This used to work, so let's not go backwards.\n", "created_at": "2011-05-07 00:58:37", "user": 2741, "id": 1114401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114419", "text": "Alright, so this is a regression.\nI think we should indicate somewhere in the logs both the _original_ method and the _overridden_ method.\n\njosevalim's suggestion does this the easy way by showing the original method in the \"Started ...\" part and the overridden method in the params.\n\nIf you think that that's backwards, we can do something like \"Started PUT (overrides POST)\". What do you think?\n", "created_at": "2011-05-07 01:07:06", "user": 7035, "id": 1114419}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114427", "text": "When will the \"(overrides POST)\" be a valuable piece of information? By the time Rails sees the request, Rails won't be able to tell whether it's a real PUT or an artificial PUT.\n", "created_at": "2011-05-07 01:18:00", "user": 2741, "id": 1114427}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114474", "text": "I'd argue that showing the overrides would be useful in various debugging and analytic situations. Also, it could be useful in distinguishing whether or not the request was made by a browser. Rails certainly has the internal ability to differentiate between real and artificial put requests, and applications built on Rails should have the ability as well if they can access the rack env.\n", "created_at": "2011-05-07 01:50:24", "user": 7035, "id": 1114474}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114615", "text": "I don't think it's a valuable enough piece of information to log with every request in the log. If you need it, you can always get at it directly via code. Or if you need it temporarily for debugging, you can do logger.info and output it yourself.\n\nBut let's definitely fix the core issue as described at the top of this ticket.\n", "created_at": "2011-05-07 04:08:20", "user": 2741, "id": 1114615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114709", "text": "Sounds like a plan.\n", "created_at": "2011-05-07 05:36:26", "user": 7035, "id": 1114709}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115025", "text": "@dlee so it is just a matter of removing the started part from here:\n\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/rack/logger.rb#L24\n\nTo here:\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_controller/log_subscriber.rb#L7\n\nThe parameters available in the latter is defined here:\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/instrumentation.rb#L18\n", "created_at": "2011-05-07 09:45:09", "user": 9582, "id": 1115025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115051", "text": "I actually went with a different approach since I assumed there was a reason the \"Started ...\" log was separated into railties/lib/rails/rack/logger.rb in the first place. Expect a pull request soon...\n", "created_at": "2011-05-07 10:09:14", "user": 7035, "id": 1115051}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115059", "text": "Ok, but if the another approach is including a new middleware, I would say it is a no-go. :) Our middleware stack is already too long, which leads to a long call stack that Ruby 1.8.x doesn't like at all. Maybe we could log at the router level? Thanks for your time in this.\n", "created_at": "2011-05-07 10:14:26", "user": 9582, "id": 1115059}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115111", "text": "Closing this one in favor of #430.\n", "created_at": "2011-05-07 10:50:30", "user": 9582, "id": 1115111}], "assignees": [2741, 2741], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hiding the _method param leaves no indication in the Rails log that a request\nwould be interpreted by the Rails app according to the method override.\n", "labels": [], "number": 427, "updated_at": "2014-07-03 04:01:19", "user": 7035, "closed_at": "2011-05-07 00:53:17", "id": 861450, "title": "Don't hide _method param in logs; Issue #426", "url": "https://api.github.com/repos/rails/rails/issues/427", "created_at": "2011-05-07 00:49:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114394", "text": "The Rails log already shows you what kind of a request it is. We don't need to repeat this again in the log by exposing _method. Teaching people that it's there is a 1-time piece of information that's not worth cluttering the log with for all time thereafter.\n", "created_at": "2011-05-07 00:53:17", "user": 2741, "id": 1114394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114399", "text": "So you're saying issue #426 is not reproducible?\n\nI don't see any indication in the Rails log that tells me that a PUT request is a PUT request.\n", "created_at": "2011-05-07 00:57:05", "user": 7035, "id": 1114399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114402", "text": "Yeah, I see the problem. We should fix that at its root rather than get _method in there.\n", "created_at": "2011-05-07 00:59:09", "user": 2741, "id": 1114402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114408", "text": "Ah, didn't realize it was a regression.\n", "created_at": "2011-05-07 01:01:27", "user": 7035, "id": 1114408}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've started a new rails project using `rails 3.1beta1` and when I try to run any rake command (I've tested `rake db:migrate`, `rake spec` and `rake -T`) I get the following error/warnings:\n\n```\nWARNING: Possible conflict with Rake extension: String#ext already exists\nWARNING: Possible conflict with Rake extension: String#pathmap already exists\nrake aborted!\nstack level too deep\n\n(See full trace by running task with --trace)\n```\n\nI created a new project without any non-rails dependences and tested the `rake` commands and the same thing happens, When I remove the all rails requires in the `Rakefile` rake runs normally. I've also tried using the master branch (`gem 'rails', :git => 'git://github.com/rails/rails.git'`) and yet again the same thing happens.\n", "labels": [], "number": 428, "updated_at": "2011-05-13 10:48:54", "user": 10137, "closed_at": "2011-05-08 10:34:26", "id": 861823, "title": "Can't run rake", "url": "https://api.github.com/repos/rails/rails/issues/428", "created_at": "2011-05-07 05:31:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114800", "text": "I was getting this when using the latest beta of rake, but using rake v0.8.7 makes everything run smoothly. What version of rake are you using?\n", "created_at": "2011-05-07 06:54:34", "user": 1901, "id": 1114800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114848", "text": "I'm running rake `v0.8.7`\n", "created_at": "2011-05-07 07:30:47", "user": 10137, "id": 1114848}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114969", "text": "are you using rubygems 1.8 by any chance? if so try downgrading to 1.7.2\n\n```\ngem update --system 1.7.2\n```\n", "created_at": "2011-05-07 08:55:21", "user": 12692, "id": 1114969}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1114977", "text": "Yes I'm running 1.8, downgraded and it worked thanks!\n", "created_at": "2011-05-07 09:03:39", "user": 10137, "id": 1114977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115041", "text": "Actually this should be kept open, I hit on this one too. There is something weird going on with latest rubygems release, rails and rake. At this point, we can't say - from where it is coming.But IMHO, we will have to track this one down and fix.\n", "created_at": "2011-05-07 10:00:57", "user": 278, "id": 1115041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115082", "text": "Rubygems 1.8 release stated explicitly that it was going to break rake, so it surely comes from there. There is nothing we can do besides expecting a new rake release.\n", "created_at": "2011-05-07 10:30:34", "user": 9582, "id": 1115082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1122385", "text": "'bundle exec rake' works well\n", "created_at": "2011-05-09 11:47:33", "user": 108694, "id": 1122385}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152219", "text": "thank you slbug!\n", "created_at": "2011-05-13 10:48:54", "user": 283320, "id": 1152219}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hello again,\n\nI have a project at https://github.com/rails3book/edge-ticketee/tree/chapter_8 which has the `features/creating_tickets.feature` feature failing because files are not being passed correctly. You can duplicate this by running:\n\n```\nbundle install\nbundle exec cucumber features/creating_tickets.feature:38\n```\n\nIt will give this error:\n\n```\nThen I should see \"speed.txt\" within \"#ticket .asset\"\n    Unable to find '#ticket .asset' (Capybara::ElementNotFound)\n    ./features/step_definitions/web_steps.rb:29:in `with_scope'\n    ./features/step_definitions/web_steps.rb:36:in `/^(. within ([^:]+)$/'\n    features/creating_tickets.feature:45:in `Then I should see \"speed.txt\" within \"#ticket .asset\"'\n```\n\nIf you inspect the parameters in the controller for ticket, namely the asset parameter, you'll see this:\n\n```\n\"asset\"=>[\"The blink tag can blink faster if you use the speed=\\\"hyper\\\" attribute.\"]\n```\n\nIn previous versions of Rails, this always came through as a `Tempfile` object, and I think Paperclip is still expecting it to be that because it's not saving that file anywhere.\n", "labels": [], "number": 429, "updated_at": "2011-05-07 22:12:47", "user": 2687, "closed_at": "2011-05-07 22:12:47", "id": 861969, "title": "Files from file_field coming through as Array, not File objects", "url": "https://api.github.com/repos/rails/rails/issues/429", "created_at": "2011-05-07 07:24:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116058", "text": "Hey @radar, we are close to Rails 3.1 release and there are a lot of issues. If you can help us pinpoint exactly were is the error, it would be great! I know it should be working automatically, but can you confirm if the form is being set to multipart?\n", "created_at": "2011-05-07 18:24:44", "user": 9582, "id": 1116058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116595", "text": "The form is automatically being set to multipart. If I set `:html => { :multipart => true }` in the form it does the same thing, but `:html => { :multipart => false }` (as expected) sends through the file names, not the content.\n\nI will attempt to track down this issue today.\n", "created_at": "2011-05-07 21:40:59", "user": 2687, "id": 1116595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116661", "text": "fffffffffuuuuuuuuuuuuuu\n\nThis seems to be _another_ Rack::Test bug, as it works fine when running the application in development mode.\n", "created_at": "2011-05-07 22:12:47", "user": 2687, "id": 1116661}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 430, "updated_at": "2014-07-03 03:32:07", "user": 7035, "closed_at": "2011-05-08 10:33:29", "id": 862181, "title": "Logs should show overridden method; Issue 426", "url": "https://api.github.com/repos/rails/rails/issues/430", "created_at": "2011-05-07 10:36:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115103", "text": "Hahaha, great (and simple) solution. :D I was blind to not see it!\n\nI will just sanity check with Yehuda if he thinks something can go wrong by swapping the middleware stack order, but I don't think so!\n\n@wycats and @tenderlove, everything looks good here?\n", "created_at": "2011-05-07 10:47:27", "user": 9582, "id": 1115103}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "PATCH is the correct HTML verb to map to the #update action. The semantics for\nPATCH allows for partial updates, whereas PUT requires a complete replacement.\n\nChanges:\n- adds the #patch verb to routes to detect PATCH requests\n- adds #patch? to Request\n- adds the PATCH -> update mapping in the #resource(s) routes.\n- changes default form helpers to prefer :patch instead of :put for updates\n- changes documentation and comments to indicate the preference for PATCH\n\nThis change tries to maintain complete backwards compatibility by keeping the\noriginal PUT -> update mapping. Users using the #resource(s) routes should not\nnotice a change in behavior since both PUT and PATCH requests get mapped to\nupdate.\n\nUPDATE: Added note in guides; fixed typo in comments.\n", "labels": [], "number": 431, "updated_at": "2014-06-28 19:21:12", "user": 7035, "closed_at": "2011-05-09 23:21:08", "id": 862217, "title": "Use PATCH instead of PUT; Fixes issue #348", "url": "https://api.github.com/repos/rails/rails/issues/431", "created_at": "2011-05-07 11:05:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115174", "text": "There is no need to send a new pull request. Github updates the previous one once you push to the branch. Should I close the previous one?\n", "created_at": "2011-05-07 11:22:27", "user": 9582, "id": 1115174}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115198", "text": "Yeah, sending a pull request from master gave me a hard time sending in multiple pull requests. Let's use this pull request instead.\n", "created_at": "2011-05-07 11:37:49", "user": 7035, "id": 1115198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120675", "text": "I think this is a case where a religious adherence to the spec isn't warranted.  There are already a _huge_ number of applications, documents, books, conference talks, etc.  All these refer to PUT.\n\nI think we could add an option for users to switch to PATCH if they'd prefer that, (or potentially suppport both) but changing the default will simply break far too much to be worth it.\n", "created_at": "2011-05-09 00:07:11", "user": 197, "id": 1120675}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120689", "text": "I should be clearer too, I don't mean 'break' in the strictly programming sense of the word where an app doesn't work after upgrade, you've addressed that well.  But more changing expectations, documentation, etc.\n", "created_at": "2011-05-09 00:15:23", "user": 197, "id": 1120689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1121231", "text": "@NZKoz, thanks for expressing some of your concerns. I understand what you're saying, but I do not think they override the need to correctly implement Rails _and_ encourage users to use it according to HTTP specs.\n\nFirst, adherence to the HTTP spec isn't \"religious\" but practical and common sense. Letting Rails be a proper citizen of the HTTP ecosystem will help the platform inter-operate better with caches, proxies, browsers, and other HTTP clients. Refraining from using proper HTTP semantics might cause other problems, such as security issues, that we can't foresee as of now.\n\nAs for saying that changing defaults \"breaks far too much to be worth it\", if we follow your line of argument, we would never be able to move forward. I'm of the opinion that fixing the way 90% of apps use HTTP is worth breaking expectations and documentation, especially since the change is backwards compatible and allows users to override the defaults (just as you suggested, except in reverse).\n\nMost likely, the change would not be a problem since it would come with a clear warning from Rails release notes and documentation.\n\nFinally, Rails is a good instructor and scaffold of how to build proper web apps, and in filling this role, it should itself use proper HTTP semantics. That's why we have \"RESTful\" routes in the first place! :)\n\nI hope this addresses your concerns. With strides in Rails in the proper direction, hopefully we'll have a huge number of applications, documents, and books that refer to proper HTTP semantics.\n", "created_at": "2011-05-09 05:04:25", "user": 7035, "id": 1121231}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1121952", "text": "From what I have noticed, this patch is completely backwards compatible. All in all, it only adds a \"patch :update\" route for all resources. In any case, I think an option that allows me to choose to have only PATCH, PUT or both for update would be welcome.\n", "created_at": "2011-05-09 09:25:29", "user": 9582, "id": 1121952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1122157", "text": "The other--and more disruptive--thing the patch does is make update forms use PATCH instead of PUT by default (which is overrideable). I am assuming it is having this _default_ that is NZkoz's main point of contention.\n\n...if not...\n@NZkoz, are you thinking that resource routes would not accept PUT requests? If so, then rest assured that the change retains the PUT => update mapping.\n", "created_at": "2011-05-09 10:41:52", "user": 7035, "id": 1122157}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1122168", "text": "Right, I missed this form part. Hrm, a configuration option is definitely required. It can be added in a later pull request though.\n", "created_at": "2011-05-09 10:43:53", "user": 9582, "id": 1122168}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126057", "text": "@dlee no, I followed the changes you've made.  It's the changes to the generated forms that I disagree with, and having it as the default.\n\nThe routing changes, supporting a `patch?` method etc, is all good. Just remove the changes to form_helper.  People who want their web requests to generate PATCH requests can use `:html=>{:method=>:patch}` and all is well. \n", "created_at": "2011-05-09 20:31:12", "user": 197, "id": 1126057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126124", "text": "@NZKoz, Can you explain why Rails should keep PUT as the default for update forms?\n\nFor your reference, there's an extended discussion on issue #348 where we discuss this.\n", "created_at": "2011-05-09 20:41:59", "user": 7035, "id": 1126124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126174", "text": "@dlee for me it would be backwards compatibility. we can eventually replace on 4.0, but not 3.2.\n", "created_at": "2011-05-09 20:46:59", "user": 9582, "id": 1126174}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126202", "text": "For the backwards compatibility reasons I outlined above.  Users who\nwant to change it can, the rest of the world don't get their apps\nbroken.\n\nRemember, those forms also post to routes which aren't generated by\nthe resources helper, so changing the verb will break applications.\n\nSo adding the option means that users like yourself can change it, and\nwe can flip the default in 4.0.\n\nOn Tue, May 10, 2011 at 8:41 AM, dlee\nreply@reply.github.com\nwrote:\n\n> @NZKoz, Can you explain why Rails should keep PUT as the default for update forms?\n> \n> For your reference, there's an extended discussion on issue #348 where we discuss this.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/431#issuecomment-1126124\n\n## \n\nCheers\n\nKoz\n", "created_at": "2011-05-09 20:51:47", "user": 197, "id": 1126202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126324", "text": "@NZKoz: I doubt the rest of the world would have their apps broken with this change. Also, form helpers should only use PATCH when using routes generated by the resources helper.\n\nThat said, I don't mind waiting to fix the default in 4.0 meanwhile adding the config option for changing the default in 3.2.\n", "created_at": "2011-05-09 21:10:09", "user": 7035, "id": 1126324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126471", "text": "@dlee You are really underestimating the amount of Rails apps out there. A simple example that will break if we apply your commit as is: \"do_something if request.put? || request.delete?\"\n", "created_at": "2011-05-09 21:32:17", "user": 9582, "id": 1126471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126483", "text": "And this \"form helpers should only use PATCH when using routes generated by the resources helper\" is the most common case, e.g. form_for(@post) would use PATCH after your patch if the @post is persisted.\n", "created_at": "2011-05-09 21:34:06", "user": 9582, "id": 1126483}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126665", "text": "@josevalim: Good point. The <tt>request.put?</tt> check is a valid breakage that will cause problems. We could have <tt>request.put?</tt> return <tt>true</tt> for more robust backwards compatibility, but I don't think it's worth it.\n\n\"form helpers should only use PATCH...\" was not to say that PATCH usage will be uncommon, but that it would be limited to routes in the app. This was a response to \"Remember, those forms also post to routes which aren't generated by the resources helper, so changing the verb will break applications.\"\n", "created_at": "2011-05-09 22:07:39", "user": 7035, "id": 1126665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1127009", "text": "@dlee it's just not worth it given all the potential issues and the frankly tiny benefit.  Please feel free to resubmit this without any form helper changes, for now we've made the call that changing those helpers sits on the wrong side of the cost-benefit equation and won't take a pull request which includes those changes.\n", "created_at": "2011-05-09 23:21:08", "user": 197, "id": 1127009}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Need this require.\n\nRemoved here d89a7967b5af5c87bbfc268af72287b82541d384\n\n/cc @josevalim \n", "labels": [], "number": 432, "updated_at": "2014-06-15 12:34:23", "user": 3948, "closed_at": "2011-05-07 11:36:05", "id": 862233, "title": "Fixed failing tests uninitialized constant ActiveSupport::Dependencies in", "url": "https://api.github.com/repos/rails/rails/issues/432", "created_at": "2011-05-07 11:19:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115176", "text": "@arunagw why it is needed? that commit was explicitly removing AS::Dependencies from DescendantsTracker.\n", "created_at": "2011-05-07 11:24:13", "user": 9582, "id": 1115176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115179", "text": "Btw, the tests pass here. :( How can I reproduce the failure?\n", "created_at": "2011-05-07 11:25:51", "user": 9582, "id": 1115179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115184", "text": "rails/railties git:(master)\\* ruby -Itest -I/Users/arunagw/checkouts/rails/railties/../activesupport/lib test/generators_test.rb                               jruby-1.6.1\nLoaded suite test/generators_test\nStarted\n..........................E...\nFinished in 4.306 seconds.\n\n  1) Error:\ntest_rails_root_templates(GeneratorsTest):\nNoMethodError: undefined method `parents' for #<TestApp::Application:0x7fca4868>\n    org/jruby/RubyKernel.java:2052:in`send'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/railtie/configurable.rb:28:in `method_missing'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/generators/named_base.rb:65:in`namespace'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/generators/named_base.rb:70:in `namespaced?'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/generators/named_base.rb:78:in`class_path'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/generators/named_base.rb:93:in `class_name'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/generators/named_base.rb:181:in`check_class_collision'\n    org/jruby/RubyProc.java:268:in `call'\n", "created_at": "2011-05-07 11:29:10", "user": 3948, "id": 1115184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115193", "text": "rails/railties git:(master)\\* bundle exec rake test                                                                                                      ree-1.8.7-2011.03\n(in /Users/arunagw/checkouts/rails/railties)\n/Users/arunagw/.rvm/rubies/ree-1.8.7-2011.03/bin/ruby -Itest -I/Users/arunagw/checkouts/rails/railties/../activesupport/lib test/application/configuration_test.rb\nLoaded suite test/application/configuration_test\nStarted\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\nFinished in 2.715791 seconds.\n\n  1) Error:\ntest_Rails.application_is_nil_until_app_is_initialized(ApplicationTests::ConfigurationTest):\nActiveSupport::Testing::RemoteError: caught NameError: uninitialized constant ActiveSupport::Dependencies\n    /Users/arunagw/checkouts/rails/bundle/ruby/1.8/gems/rake-0.8.7/lib/rake.rb:2503:in `const_missing'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/engine.rb:487\n    /Users/arunagw/checkouts/rails/railties/lib/rails/initializable.rb:25:in`instance_exec'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/initializable.rb:25:in `run'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/initializable.rb:50:in`run_initializers'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/initializable.rb:49:in `each'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/initializable.rb:49:in`run_initializers'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/application.rb:94:in `initialize!'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/railtie/configurable.rb:28:in`send'\n    /Users/arunagw/checkouts/rails/railties/lib/rails/railtie/configurable.rb:28:in `method_missing'\n    /Users/arunagw/checkouts/rails/railties/tmp/app/config/environment.rb:5\n    test/application/configuration_test.rb:44:in`require'\n    test/application/configuration_test.rb:44:in `test_Rails.application_is_nil_until_app_is_initialized'\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/testing/isolation.rb:65:in`run'\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/testing/isolation.rb:100:in `run_in_isolation'\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/testing/isolation.rb:97:in`fork'\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/testing/isolation.rb:97:in `run_in_isolation'\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/testing/isolation.rb:63:in`run'\n\nWith REE\n", "created_at": "2011-05-07 11:32:38", "user": 3948, "id": 1115193}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115196", "text": "Thanks! This should be fixed here:\n\nhttps://github.com/rails/rails/commit/c444b0f67bf5f998f1f0e0271116fb111d1ba93a\n", "created_at": "2011-05-07 11:36:05", "user": 9582, "id": 1115196}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `time_zone` settings of the database is usually `\"SYSTEM\"`. This affects e.g. `UNIX_TIMESTAMP(field)` function, where `\"field\"` is of type `datetime`. Some examples (system settings for time zone here is `'Europe/Berlin'`):\n\n```\nmysql> SELECT @@global.time_zone, @@session.time_zone;\n+--------------------+---------------------+\n| @@global.time_zone | @@session.time_zone |\n+--------------------+---------------------+\n| SYSTEM             | SYSTEM              | \n+--------------------+---------------------+\n1 row in set (0.00 sec)\n\nmysql> select unix_timestamp('2011-03-26 12:25:49');\n+---------------------------------------+\n| unix_timestamp('2011-03-26 12:25:49') |\n+---------------------------------------+\n|                            1301138749 | \n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SET @@time_zone = 'utc';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select unix_timestamp('2011-03-26 12:25:49');\n+---------------------------------------+\n| unix_timestamp('2011-03-26 12:25:49') |\n+---------------------------------------+\n|                            1301142349 | \n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SET @@time_zone = 'Canada/Yukon';\nQuery OK, 0 rows affected (0.36 sec)\n\nmysql> select unix_timestamp('2011-03-26 12:25:49');\n+---------------------------------------+\n| unix_timestamp('2011-03-26 12:25:49') |\n+---------------------------------------+\n|                            1301167549 | \n+---------------------------------------+\n1 row in set (0.00 sec)\n```\n\nI propose to enable to set time_zone in rails `database.yml` file.\n", "labels": [], "number": 433, "updated_at": "2014-06-25 09:52:57", "user": 325471, "closed_at": "2011-10-09 03:25:34", "id": 862236, "title": "Support setting of time_zone for mysql2 adapter.", "url": "https://api.github.com/repos/rails/rails/issues/433", "created_at": "2011-05-07 11:20:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126561", "text": "Are you sure this would work as intended? IIRC, Rails stores (date)times in UTC. My system runs in CEST (UTC+2), the application's time zone is set to 'Berlin' (also CEST/UTC+2) but the values are stored as UTC.\n\nI have:\nTimeEntry.create!(:date => '01.05.2011', :starts_at => '09:00', :ends_at => '19:00')\n\nQuerying this directly via connection.select_value gives me 2011-05-01 07:00:00. If I use the ActiveRecord object in stead, I'm getting Sun, 01 May 2011 09:00:00 CEST +02:00.\n\nNote that this could also be because my PostgreSQL server is configured this way ‚Äì it's one of my first PG projects. :-) (Yes, I've seen that your patch is for MySQL ‚Äì but the way Rails stores datetimes with regard to time zones is the same across databases, right?) But if I'm right, your patch would probably have to be adapted to ensure that the time zone's always UTC. If I'm wrong, don't mind me. :-)\n", "created_at": "2011-05-09 21:50:29", "user": 3749, "id": 1126561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1127086", "text": "Hi, clemens. I am sorry, but I don't get what you are trying to say or why  are you talking about PostgreSQL. This patch is about getting useful values from `UNIX_TIMESTAMP` or other MySQL functions, which rely on the setting of  time zone of the MySQL RDBMS (`CURRENT_TIMESTAMP()`, `CURRENT_TIME()`, `CURRENT_DATE()`, and `FROM_UNIXTIME()`). \n\nAs I wrote in the first post, the setting of the time zone of the MySQL RDBMS is usually `SYSTEM`, which means, that the time zone is set to whatever the system administrator decided, which will usually be the local time zone  of the place, where the system physically resides.\n\nYou have correctly pointed out, that the values stored by Rails in `datetime` columns are usually in `UTC`.  What you get if you query (from Rails app.) the `UNIX_TIMESTAMP` of any such value?  (Sidenote: `UNIX_TIMESTAMP` function returns an integer value, so no time-related conversion in Rails takes place.) Now is the answer \"that depens, probably something incorrect, because the `UTC` value was interpreted (in MySQL) as a value in `SYSTEM` time zone, which is ... (_something nobody cares, because you are using some hosting abroad_)\".  My intend is to use this patch to set the time zone of my sessions to `UTC` to always get proper values from functions like `UNIX_TIMESTAMP` applied to `datetime` type of values.  If someone is using `config.active_record.default_timezone = :local`, then he'll probably not set his sessions time zone to `UTC`.\n", "created_at": "2011-05-09 23:44:15", "user": 325471, "id": 1127086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335034", "text": "I recommend you use a datetime column and the UTC_TIMESTAMP() function instead.\n\nOtherwise, this is such a niche case that I don't think it qualifies for inclusion in main database.yml config. It's something you can set yourself in a config/initializer, though!\n", "created_at": "2011-10-09 03:25:35", "user": 199, "id": 2335034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3706672", "text": "@jeremy This is primarily a problem for legacy databases. Or for those of us with large datasets ie billions of rows the space saving made by using timestamp can really add up.\n\nAt the moment I do the following in config initializer\n\n```\nrequire 'active_record/connection_adapters/mysql2_adapter'\nmodule ActiveRecord\n  module ConnectionAdapters\n    class Mysql2Adapter\n      private\n      alias old_configure_connection configure_connection\n      def configure_connection\n        old_configure_connection\n        execute(\"SET SESSION time_zone='+0:00'\", :skip_logging)\n      end\n    end\n  end\nend\n```\n\nIt would be great if there was a nicer way\n", "created_at": "2012-01-29 05:03:25", "user": 42590, "id": 3706672}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3768283", "text": "I ran into this today as well.. big pain to track this down.\n", "created_at": "2012-02-01 22:13:12", "user": 14322, "id": 3768283}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3768295", "text": "Note: not Rails' fault this provides more detail:\n\nhttp://bugs.mysql.com/bug.php?id=15654\n", "created_at": "2012-02-01 22:13:51", "user": 14322, "id": 3768295}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. 6464f7b9be3ccf3f05a3\n2. 16d3266144caeaca6385\n3. 6cea2436d7bb8e62acc3\n", "labels": [], "number": 434, "updated_at": "2014-07-03 04:01:43", "user": 3948, "closed_at": "2011-05-07 16:01:42", "id": 862688, "title": "Updated changelog for jdbc* adapters template.", "url": "https://api.github.com/repos/rails/rails/issues/434", "created_at": "2011-05-07 15:57:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Update README template to include info about app/assets.\n", "labels": [], "number": 435, "updated_at": "2014-07-03 04:01:46", "user": 146214, "closed_at": "2011-05-07 16:36:53", "id": 862711, "title": "Update README template to include info about app/assets", "url": "https://api.github.com/repos/rails/rails/issues/435", "created_at": "2011-05-07 16:11:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a copy of: https://rails.lighthouseapp.com/projects/8994/tickets/6768-assets-route-should-not-be-prefixed\n\nLong story short, the moment I introduce a catch-all route like this:\n\n```\nmatch '/*', :to => 'test#test'\n```\n\nSprockets won't serve anything as /assets is taken over by my route. Before `rake routes` would actually show that sprockets relates routes come after my application routes. Now it won't show anything but I'm sure those routes are attached **after**. I think Sprockets routes have to be attached **before** any application/engines routes. \n\nI'd fix it myself, but I have no idea where to look. Thanks.\n", "labels": [], "number": 436, "updated_at": "2011-05-08 11:00:01", "user": 78363, "closed_at": "2011-05-08 11:00:01", "id": 862919, "title": "Sprockets doesn't work alongside with catch-all routes", "url": "https://api.github.com/repos/rails/rails/issues/436", "created_at": "2011-05-07 17:51:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1115987", "text": "@josh, today we are using routes.append, so sprockets comes at the end, maybe we should swap to routes.prepend?\n", "created_at": "2011-05-07 17:56:14", "user": 9582, "id": 1115987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116615", "text": "`routes.prepend` seems right. I think you hooked that code up for me JV :)\n", "created_at": "2011-05-07 21:54:27", "user": 137, "id": 1116615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116658", "text": "Hahaha, ok. I will fix it tomorrow then!\n", "created_at": "2011-05-07 22:11:07", "user": 9582, "id": 1116658}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/6681-ordinalize-negative-numbers\n\nThis patch fixes the ordinalize method for negative numbers. I added inflector test cases that address this issue and provided a brief example below. This patch changes the ordinalize method to use the absolute value of the number when determining which suffix to append.\n\nCurrently:\n\n> -1.ordinalize\n> => \"-1th\"\n> After patching:\n> \n> -1.ordinalize\n> => \"-1st\"\n", "labels": [], "number": 437, "updated_at": "2011-05-07 19:32:09", "user": 22501, "closed_at": "2011-05-07 19:32:01", "id": 862988, "title": "Lighthouse 6681 - Ordinalize Negative Numbers", "url": "https://api.github.com/repos/rails/rails/issues/437", "created_at": "2011-05-07 18:19:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116045", "text": "From 1f0d083026cfc49dfbcee0cb05136af2b370edbd Mon Sep 17 00:00:00 2001\nFrom: Amir Manji amanji75@gmail.com\nDate: Thu, 7 Apr 2011 01:07:42 -0700\nSubject: [PATCH] ordinalize negative numbers\n\n---\n\n .../lib/active_support/inflector/methods.rb        |    4 +-\n activesupport/test/inflector_test_cases.rb         |   30 ++++++++++++++++++++\n 2 files changed, 32 insertions(+), 2 deletions(-)\n\ndiff --git a/activesupport/lib/active_support/inflector/methods.rb b/activesupport/lib/active_support/inflector/methods.rb\nindex de49750..dd2beef 100644\n--- a/activesupport/lib/active_support/inflector/methods.rb\n+++ b/activesupport/lib/active_support/inflector/methods.rb\n@@ -136,10 +136,10 @@ module ActiveSupport\n     #   ordinalize(1002)  # => \"1002nd\"\n     #   ordinalize(1003)  # => \"1003rd\"\n     def ordinalize(number)\n-      if (11..13).include?(number.to_i % 100)\n-      if (11..13).include?(number.to_i.abs % 100)\n       \"#{number}th\"\n     else\n-        case number.to_i % 10\n- ```\n     case number.to_i.abs % 10\n     when 1; \"#{number}st\"\n     when 2; \"#{number}nd\"\n     when 3; \"#{number}rd\"\n  ```\n  \n  diff --git a/activesupport/test/inflector_test_cases.rb b/activesupport/test/inflector_test_cases.rb\n  index 2b144e5..ec9d927 100644\n  --- a/activesupport/test/inflector_test_cases.rb\n  +++ b/activesupport/test/inflector_test_cases.rb\n  @@ -215,6 +215,36 @@ module InflectorTestCases\n  }\n  \n  OrdinalNumbers = {\n-    \"-1\" => \"-1st\",\n-    \"-2\" => \"-2nd\",\n-    \"-3\" => \"-3rd\",\n-    \"-4\" => \"-4th\",\n-    \"-5\" => \"-5th\",\n-    \"-6\" => \"-6th\",\n-    \"-7\" => \"-7th\",\n-    \"-8\" => \"-8th\",\n-    \"-9\" => \"-9th\",\n-    \"-10\" => \"-10th\",\n-    \"-11\" => \"-11th\",\n-    \"-12\" => \"-12th\",\n-    \"-13\" => \"-13th\",\n-    \"-14\" => \"-14th\",\n-    \"-20\" => \"-20th\",\n-    \"-21\" => \"-21st\",\n-    \"-22\" => \"-22nd\",\n-    \"-23\" => \"-23rd\",\n-    \"-24\" => \"-24th\",\n-    \"-100\" => \"-100th\",\n-    \"-101\" => \"-101st\",\n-    \"-102\" => \"-102nd\",\n-    \"-103\" => \"-103rd\",\n-    \"-104\" => \"-104th\",\n-    \"-110\" => \"-110th\",\n-    \"-111\" => \"-111th\",\n-    \"-112\" => \"-112th\",\n-    \"-113\" => \"-113th\",\n-    \"-1000\" => \"-1000th\",\n-    \"-1001\" => \"-1001st\",\n   \"0\" => \"0th\",\n   \"1\" => \"1st\",\n   \"2\" => \"2nd\",\n  -- \n  1.7.3.1\n", "created_at": "2011-05-07 18:19:24", "user": 22501, "id": 1116045}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116047", "text": "@jasonnoble, could you please send this patch as a pull request?\n", "created_at": "2011-05-07 18:20:35", "user": 9582, "id": 1116047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116290", "text": "@josevalim https://github.com/rails/rails/pull/438\n", "created_at": "2011-05-07 19:30:30", "user": 22501, "id": 1116290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116296", "text": "Closing this because I've merged the pull request.\n", "created_at": "2011-05-07 19:32:00", "user": 3124, "id": 1116296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116297", "text": "Pull request merged by @tenderlove\n", "created_at": "2011-05-07 19:32:09", "user": 22501, "id": 1116297}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Applied patch by Amir Manji\n  https://github.com/rails/rails/issues/437#issuecomment-1116045\n\nSigned-off-by: Jason jasonmichaelroth@gmail.com\n", "labels": [], "number": 438, "updated_at": "2014-06-20 09:45:04", "user": 253454, "closed_at": "2011-05-07 19:31:27", "id": 863130, "title": "ordinalize negative numbers patch", "url": "https://api.github.com/repos/rails/rails/issues/438", "created_at": "2011-05-07 19:29:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/6098-activerecord-fixture-class\n\n> _Reported by Brian Underwood | January 18th, 2011 @ 08:52 AM | in 3.1_\n> _This is more of a question for the moment._\n> \n> I'm working on a large Rails app which, unfortunately, has a Fixture model. I'm running into issues where the Fixture class (used for test fixtures) is extending our Fixture model class and causing issue with testing our Fixture model (we've long neglected testing and are just now building up our suite).\n> \n> I took a look at the ActiveRecord source and the Fixture class seems to be relatively limited in it's usage. It would be much less work to namespace the Fixture class in ActiveRecord than to change all of the various references to the Fixture model in our app (and it would allow other Rails users to have 'Fixture' models). I'd be happy to work on a patch to do this, but I wanted to get advice first and make sure that it would be a good way to go. Should I namespace it in the ActiveRecord module? Should I namespace all of the classes in the fixtures.rb file?\n", "labels": [], "number": 439, "updated_at": "2011-12-03 23:28:38", "user": 253454, "closed_at": "2011-05-08 10:31:21", "id": 863147, "title": "ActiveRecord Fixture class (lighthouse issue 6098)", "url": "https://api.github.com/repos/rails/rails/issues/439", "created_at": "2011-05-07 19:42:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116337", "text": "Here's the last patch from lighthouse:\n\nhttps://gist.github.com/960770\n", "created_at": "2011-05-07 19:45:08", "user": 253454, "id": 1116337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116346", "text": "@jasonmichaelroth I completely agree that the Fixture class should be namespaced. But unfortunately this seems to be a big change to do right before 3.1. I will leave this open, but could you please poke us in a couple weeks? Thanks for resubmitting the issue here!\n", "created_at": "2011-05-07 19:49:13", "user": 9582, "id": 1116346}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116469", "text": "Pull request https://github.com/rails/rails/pull/442 implements this feature\n", "created_at": "2011-05-07 20:43:10", "user": 22501, "id": 1116469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118768", "text": "Closing as the pull request was merged. Thanks @jasonnoble!\n", "created_at": "2011-05-08 10:31:21", "user": 9582, "id": 1118768}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2318370", "text": "When will the deprecation warning be removed? I've run into this same issue with Rails 3.1 (would like to have a model named Fixture and it works just fine... except in testing.)\n", "created_at": "2011-10-07 06:08:41", "user": 543859, "id": 2318370}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3003844", "text": "@karpah, this deprecation warning was removed with https://github.com/rails/rails/commit/542114e1d82fffa1062ef0eaa1053959ab9d14ec#activerecord/lib/active_record/fixtures.rb back in May, however it hasn't been released yet.  If I had to guess, I'd say Rails 3.2, as it was introduced in 3.1.0.\n", "created_at": "2011-12-03 23:28:38", "user": 22501, "id": 3003844}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Can I ask why is I18n.t method used in form helper ? Why is not used rails t (translate) method instead ?\n", "labels": [], "number": 440, "updated_at": "2011-05-07 19:50:24", "user": 193936, "closed_at": "2011-05-07 19:50:24", "id": 863160, "title": "I18n.t vs rails t helper", "url": "https://api.github.com/repos/rails/rails/issues/440", "created_at": "2011-05-07 19:48:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116350", "text": "Because we wanted to put everything in the I18n \"helper\" namespace. And please don't use the issues tracker for questions, use the mailing list instead.\n", "created_at": "2011-05-07 19:50:24", "user": 9582, "id": 1116350}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Output of running the tests for activesupport don't include test/test_xml_mini.rb.\n\n[@1.9.2@rails3dev ][xxxxx@xxxxx(master)]$ rake test\n(in /Users/xxxx/Documents/Development/rubyDevelopment/rails_source/rails/activesupport)\n/Users/xxxx/.rvm/rubies/ruby-1.9.2-p180/bin/ruby -w -I\"lib:test\" \"/Users/xxxx/.rvm/gems/ruby-1.9.2-p180@rails3dev/gems/rake-0.8.7/lib/rake/rake_test_loader.rb\" \"test/benchmarkable_test.rb\" \"test/buffered_logger_test.rb\" \"test/caching_test.rb\" \"test/callback_inheritance_test.rb\" \"test/callbacks_test.rb\" \"test/class_cache_test.rb\" \"test/clean_backtrace_test.rb\" \"test/clean_logger_test.rb\" \"test/concern_test.rb\" \"test/configurable_test.rb\" \"test/core_ext/array_ext_test.rb\" \"test/core_ext/base64_ext_test.rb\" \"test/core_ext/bigdecimal_test.rb\" \"test/core_ext/blank_test.rb\" \"test/core_ext/class/attribute_accessor_test.rb\" \"test/core_ext/class/attribute_test.rb\" \"test/core_ext/class/class_inheritable_attributes_test.rb\" \"test/core_ext/class/delegating_attributes_test.rb\" \"test/core_ext/class_test.rb\" \"test/core_ext/date_ext_test.rb\" \"test/core_ext/date_time_ext_test.rb\" \"test/core_ext/duplicable_test.rb\" \"test/core_ext/duration_test.rb\" \"test/core_ext/enumerable_test.rb\" \"test/core_ext/file_test.rb\" \"test/core_ext/float_ext_test.rb\" \"test/core_ext/hash_ext_test.rb\" \"test/core_ext/integer_ext_test.rb\" \"test/core_ext/kernel_test.rb\" \"test/core_ext/load_error_test.rb\" \"test/core_ext/module/anonymous_test.rb\" \"test/core_ext/module/attr_accessor_with_default_test.rb\" \"test/core_ext/module/attr_internal_test.rb\" \"test/core_ext/module/attribute_accessor_test.rb\" \"test/core_ext/module/attribute_aliasing_test.rb\" \"test/core_ext/module/reachable_test.rb\" \"test/core_ext/module/synchronization_test.rb\" \"test/core_ext/module_test.rb\" \"test/core_ext/name_error_test.rb\" \"test/core_ext/numeric_ext_test.rb\" \"test/core_ext/object/inclusion_test.rb\" \"test/core_ext/object/to_param_test.rb\" \"test/core_ext/object/to_query_test.rb\" \"test/core_ext/object_and_class_ext_test.rb\" \"test/core_ext/proc_test.rb\" \"test/core_ext/range_ext_test.rb\" \"test/core_ext/regexp_ext_test.rb\" \"test/core_ext/string_ext_test.rb\" \"test/core_ext/time_ext_test.rb\" \"test/core_ext/time_with_zone_test.rb\" \"test/core_ext/uri_ext_test.rb\" \"test/dependencies_test.rb\" \"test/deprecation/proxy_wrappers_test.rb\" \"test/deprecation_test.rb\" \"test/descendants_tracker_with_autoloading_test.rb\" \"test/descendants_tracker_without_autoloading_test.rb\" \"test/file_update_checker_test.rb\" \"test/flush_cache_on_private_memoization_test.rb\" \"test/gzip_test.rb\" \"test/i18n_test.rb\" \"test/inflector_test.rb\" \"test/isolation_test.rb\" \"test/json/decoding_test.rb\" \"test/json/encoding_test.rb\" \"test/lazy_load_hooks_test.rb\" \"test/load_paths_test.rb\" \"test/log_subscriber_test.rb\" \"test/memoizable_test.rb\" \"test/message_encryptor_test.rb\" \"test/message_verifier_test.rb\" \"test/multibyte_chars_test.rb\" \"test/multibyte_unicode_database_test.rb\" \"test/multibyte_utils_test.rb\" \"test/notifications_test.rb\" \"test/option_merger_test.rb\" \"test/ordered_hash_test.rb\" \"test/ordered_options_test.rb\" \"test/rescuable_test.rb\" \"test/safe_buffer_test.rb\" \"test/secure_random_test.rb\" \"test/string_inquirer_test.rb\" \"test/test_case_test.rb\" \"test/test_test.rb\" \"test/time_zone_test.rb\" \"test/transliterate_test.rb\" \"test/whiny_nil_test.rb\" \"test/xml_mini/jdom_engine_test.rb\" \"test/xml_mini/libxml_engine_test.rb\" \"test/xml_mini/libxmlsax_engine_test.rb\" \"test/xml_mini/nokogiri_engine_test.rb\" \"test/xml_mini/nokogirisax_engine_test.rb\" \"test/xml_mini/rexml_engine_test.rb\"\n", "labels": [], "number": 441, "updated_at": "2011-05-07 20:45:22", "user": 128210, "closed_at": "2011-05-07 20:45:22", "id": 863269, "title": "XML Mini tests (test_xml_mini.rb) don't seem to get run", "url": "https://api.github.com/repos/rails/rails/issues/441", "created_at": "2011-05-07 20:31:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116474", "text": "fixed, thanks\n", "created_at": "2011-05-07 20:45:22", "user": 9582, "id": 1116474}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "[Fixes #439]\n\nhttps://github.com/rails/rails/issues/439\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6098-activerecord-fixture-class\n", "labels": [], "number": 442, "updated_at": "2014-06-12 09:56:33", "user": 22501, "closed_at": "2011-05-07 22:33:57", "id": 863283, "title": "Namespace Fixtures in ActiveRecord", "url": "https://api.github.com/repos/rails/rails/issues/442", "created_at": "2011-05-07 20:42:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116527", "text": "I don't want to merge this in yet. We need a way to remain backwards compatible with people that are using the top level constant.  This change will break people's fixtures, and that isn't acceptable.\n\n## \n\nAaron Patterson\nhttp://tenderlovemaking.com/\n\nOn May 7, 2011, at 1:42 PM, jasonnoblereply@reply.github.com wrote:\n\n> [Fixes #439]\n> \n> https://github.com/rails/rails/issues/439\n> https://rails.lighthouseapp.com/projects/8994/tickets/6098-activerecord-fixture-class\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/442\n", "created_at": "2011-05-07 21:09:36", "user": 3124, "id": 1116527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116535", "text": "Should we copy the Fixtures methods and have them issue a deprecation warning and then execute the ActiveRecord::Fixtures method?\n", "created_at": "2011-05-07 21:13:04", "user": 22501, "id": 1116535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116560", "text": "I think define the top level Fixture class with a class level method missing would work.\n\n## \n\nAaron Patterson\nhttp://tenderlovemaking.com/\n\nOn May 7, 2011, at 2:13 PM, jasonnoblereply@reply.github.com wrote:\n\n> Should we copy the Fixtures methods and have them issue a deprecation warning and then execute the ActiveRecord::Fixtures method?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/442#issuecomment-1116535\n", "created_at": "2011-05-07 21:23:28", "user": 3124, "id": 1116560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116598", "text": "Just found it!  You should use [this](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/deprecation/proxy_wrappers.rb#L61).\n", "created_at": "2011-05-07 21:43:12", "user": 3124, "id": 1116598}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/Users/msgehard/Documents/Development/rubyDevelopment/rails_source/rails/activesupport/lib/active_support/core_ext/big_decimal/conversions.rb:21:in `to_yaml': YAML.quick_emit is deprecated\n\n/Users/msgehard/Documents/Development/rubyDevelopment/rails_source/rails/activesupport/lib/active_support/ordered_hash.rb:37:in `to_yaml': YAML.quick_emit is deprecated\n\nDoes anyone know what the replacement for quick_emit is?\n", "labels": [], "number": 443, "updated_at": "2011-05-10 16:21:58", "user": 128210, "closed_at": "2011-05-10 16:21:58", "id": 863287, "title": "Fix deprecation warnings in ActiveSupport (Related to Lighthouse #4618)", "url": "https://api.github.com/repos/rails/rails/issues/443", "created_at": "2011-05-07 20:45:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118780", "text": "Assigning to @tenderlove. If he doesn't know how to fix this, nobody does. :)\n", "created_at": "2011-05-08 10:36:42", "user": 9582, "id": 1118780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126297", "text": "@msgehard I take it you're running 1.9.2?  Does this sample code work?  `ruby -v -rpsych -e'puts \"hi\" '`?\n", "created_at": "2011-05-09 21:04:28", "user": 3124, "id": 1126297}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1127410", "text": "Yes running 1.9.2-p180.\n\nHere are the results if I run it without psych installed:\n\n[@1.9.2@rails3dev ][xxx@MacBookAir:rails(master)]$ ruby -v -rpsych -e'puts \"hi\" '\nruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.6.0]\ninternal:lib/rubygems/custom_require:29:in `require': no such file to load -- psych (LoadError)\n    from <internal:lib/rubygems/custom_require>:29:in`require'\n[@1.9.2@rails3dev ][xxx@MacBookAir:rails(master)]$ \n\nIf I install libyaml(brew install libyaml) and then gem install pysch I get the following:\n\n[@1.9.2@rails3dev ][xxxx@MacBookAir:rails(master)]$ ruby -v -rpsych -e'puts \"hi\" '\nruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.6.0]\nhi\n[@1.9.2@rails3dev ][xxxxx@MacBookAir:rails(master)]$\n", "created_at": "2011-05-10 01:30:07", "user": 128210, "id": 1127410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1127522", "text": "@msgehard when you have psych installed, do you still see the original `quick_emit` warning?\n", "created_at": "2011-05-10 02:08:58", "user": 3124, "id": 1127522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1127536", "text": "If I have psych installed, the warnings go away.\n", "created_at": "2011-05-10 02:14:02", "user": 128210, "id": 1127536}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131924", "text": "Great!  Syck (the old yaml emitter) is going to be deprecated.  The replacement for it is Psych.  If you have Psych enabled, it allows us to use non-deprecated API.\n", "created_at": "2011-05-10 16:21:58", "user": 3124, "id": 1131924}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/6379-accept-header-with-does-not-match-html-templates\n", "labels": [], "number": 444, "updated_at": "2011-05-07 21:49:13", "user": 22501, "closed_at": "2011-05-07 21:49:13", "id": 863288, "title": "Lighthouse #6379 - accept header with */* does not match html templates", "url": "https://api.github.com/repos/rails/rails/issues/444", "created_at": "2011-05-07 20:45:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116607", "text": "@jasonnoble patch applied on master, thanks.\n", "created_at": "2011-05-07 21:49:13", "user": 9582, "id": 1116607}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Raise a RuntimeException with custom message when hash key contains space. Old behavior was { \"New York\"=>33, :Versailles => 3231 }.to_xml created an xml which was invalid. \n", "labels": [], "number": 445, "updated_at": "2014-06-16 10:27:49", "user": 295689, "closed_at": "2011-05-08 17:13:45", "id": 863370, "title": "Fix for Lighthouse ticket # 6334 : to_xml should render valid xml or raise an error all the time", "url": "https://api.github.com/repos/rails/rails/issues/445", "created_at": "2011-05-07 21:28:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116582", "text": "Shouldn't we just dasherize the keys or something like that?\n", "created_at": "2011-05-07 21:35:02", "user": 9582, "id": 1116582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116600", "text": "@josevalim I agree.  @prakashmurthy, can you change this to dasherize keys, and I'll apply?\n", "created_at": "2011-05-07 21:44:33", "user": 3124, "id": 1116600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116647", "text": "Since dasherize method only replaces '_' with '-', and does not do anything to spaces, we are thinking of using gsub(' ','-').Is this OK? \n", "created_at": "2011-05-07 22:05:17", "user": 295689, "id": 1116647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116850", "text": "Used gsub instead of _dasherize method as there is another issue with _dasherize method being broken. https://github.com/rails/rails/issues/450\n", "created_at": "2011-05-07 23:31:34", "user": 295689, "id": 1116850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118767", "text": "Thanks @prakashmurthy! I have fixed the _dasherize method, do you think your pull request could be refactored then? As the default is to dasherize, I don't even think we need to do anything, just add your tests. Could you please check?\n", "created_at": "2011-05-08 10:30:10", "user": 9582, "id": 1118767}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1119619", "text": "Thanks @josevalim. Refactored the code; now the change includes only the tests. Let me know if anything else needs to be done.\n", "created_at": "2011-05-08 17:10:33", "user": 295689, "id": 1119619}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It looks like commit a66c91723565d37969de4cb46baa50fb8865b02a \"Do not inherit from Rack::Response, remove a shit-ton of unused code.\" removed the possibility for the user to set response_body to a Proc.  Here is a test that demonstrates this behavior working in 3.0.7 and breaking in edge.\n@ecoffey\n", "labels": [], "number": 446, "updated_at": "2014-06-13 12:13:21", "user": 691200, "closed_at": "2011-05-10 14:38:50", "id": 863530, "title": "New test: setting response_body to a Proc should be supported.", "url": "https://api.github.com/repos/rails/rails/issues/446", "created_at": "2011-05-07 22:51:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116801", "text": "Cool, thanks! There were no tests for it before, so I will bring the feature back as others seem to use it. However, I plan to deprecate it, can you please tell me what is your use case?\n", "created_at": "2011-05-07 23:07:36", "user": 9582, "id": 1116801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116843", "text": "I don't use this feature and don't mind if it's deprecated.  Eoin and I were at a bugmash trying to fix https://rails.lighthouseapp.com/projects/8994/tickets/6026-patch-response_body-proc-is-called-twice .\n", "created_at": "2011-05-07 23:28:55", "user": 691200, "id": 1116843}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118346", "text": "Our theory was that it was broken in favor of the new HTTP streaming features.  Is that why it is also going to be deprecated?\n", "created_at": "2011-05-08 04:59:24", "user": 46906, "id": 1118346}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118606", "text": "@ecoffey it was removed because setting a proc to response_body never really worked. It stopped streaming since Rails 2.2 or 2.3 because of the Rack middleware stack.\n", "created_at": "2011-05-08 08:05:47", "user": 9582, "id": 1118606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1119664", "text": "@josevalim gotcha.  Well at least Daniel and I got a nice tour of the inner workings of actionpack dispatch :-)\n", "created_at": "2011-05-08 17:30:36", "user": 46906, "id": 1119664}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://rails.lighthouseapp.com/projects/8994/tickets/6759-api-document-incorrect\n\n.html_safe needs to be called on all strings with HTML in them\n", "labels": [], "number": 447, "updated_at": "2011-05-07 22:58:40", "user": 22501, "closed_at": "2011-05-07 22:58:40", "id": 863537, "title": "Lighthouse #6759 - API document incorrect", "url": "https://api.github.com/repos/rails/rails/issues/447", "created_at": "2011-05-07 22:56:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116780", "text": "Pull request https://github.com/rails/rails/pull/448\n", "created_at": "2011-05-07 22:58:40", "user": 22501, "id": 1116780}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "[Fixes #447]\n", "labels": [], "number": 448, "updated_at": "2014-06-14 17:15:23", "user": 253454, "closed_at": "2011-05-07 23:01:01", "id": 863542, "title": "Added html_safe to select tag documentation examples", "url": "https://api.github.com/repos/rails/rails/issues/448", "created_at": "2011-05-07 22:57:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116789", "text": "Please push docs straight to lifo/docrails! It is an open repo for docs, tks.\n", "created_at": "2011-05-07 23:01:01", "user": 9582, "id": 1116789}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Silence duplicate test warnings that appeared after Jose got the xml_mini_test.rb running again (https://github.com/rails/rails/commit/803548c46b32d1be760b21da80477f43b801b8e9) because of duplicate test names.  \n\nThere is now one failing test in xml_mini_test.rb that was failing before the rename but was never getting run before.  It looks like the _dasherize() method isn't working properly but the regex that it is using to satisfy the tests is above my head.\n\nI will open a new issue about the failing test and take a look at it when I have more time.\n", "labels": [], "number": 449, "updated_at": "2014-06-21 07:06:09", "user": 128210, "closed_at": "2011-05-07 23:14:44", "id": 863562, "title": "Rename duplicate tests", "url": "https://api.github.com/repos/rails/rails/issues/449", "created_at": "2011-05-07 23:10:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This failing test is a result of some duplicate test names and the fact that some of the tests for XmlMini weren't getting run.\n\nSee https://github.com/rails/rails/pull/449 for a bit more information.\n\nThe regex that is handling the code for the failing test is above my head right now.  \n\nWill take a look when I have more time unless someone gets to it before me.\n", "labels": [], "number": 450, "updated_at": "2011-05-07 23:15:33", "user": 128210, "closed_at": "2011-05-07 23:15:22", "id": 863566, "title": "Fix failing test in xml_mini_test.rb", "url": "https://api.github.com/repos/rails/rails/issues/450", "created_at": "2011-05-07 23:14:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1116816", "text": "I've pushed it\n", "created_at": "2011-05-07 23:15:33", "user": 52642, "id": 1116816}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "if a query contains a limit or an offset, ActiveRecord::FinderMethods#find_last had inconsistent behavior.\n- If the records were loaded, it returned the last record in the cached list.\n- If they were not, it reversed the order of the query and changed the limit to one.\n- If the earlier limit was less than the total matching the query in the db,\n  it would return a different record than if the records had been cached.\n\nThis commit changes find_last so that it loads the records when getting the\nlast record on a query containing a limit or an offset, which makes the behavior consistent.\n", "labels": [], "number": 451, "updated_at": "2014-06-13 03:22:28", "user": 7378, "closed_at": "2011-05-08 22:46:37", "id": 863575, "title": "Fix for #371", "url": "https://api.github.com/repos/rails/rails/issues/451", "created_at": "2011-05-07 23:23:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118609", "text": "@tenderlove and @jonleighton :heart:\n", "created_at": "2011-05-08 08:11:23", "user": 9582, "id": 1118609}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120508", "text": "Merged, thanks!\n", "created_at": "2011-05-08 22:46:37", "user": 1979, "id": 1120508}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For coherence.\n\nI've seen lots of noobs assume `rails r` would become `rails runner` the same way `rails c` becomes `rails console`.\n", "labels": [], "number": 452, "updated_at": "2014-07-03 04:02:32", "user": 9952, "closed_at": "2011-05-08 08:13:15", "id": 863954, "title": "Add alias `r` for rails runner", "url": "https://api.github.com/repos/rails/rails/issues/452", "created_at": "2011-05-08 03:21:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1117436", "text": "Makes sense\n", "created_at": "2011-05-08 03:22:39", "user": 323401, "id": 1117436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1117469", "text": "me=noob, +1\n", "created_at": "2011-05-08 03:48:37", "user": 187772, "id": 1117469}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "<pre>\n=> Booting WEBrick\n=> Rails 3.1.0.beta1 application starting in development on http://0.0.0.0:3001\n=> Call with -d to detach\n=> Ctrl-C to shutdown server\nExiting\n/home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/actionpack/lib/sprockets/railtie.rb:37:in `block (2 levels) in <class:Railtie>': undefined method `context' for Sprockets::Environment:0x00000002535fa0 (NoMethodError)\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/lazy_load_hooks.rb:36:in `instance_eval'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/lazy_load_hooks.rb:36:in `execute_hook'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/lazy_load_hooks.rb:26:in `on_load'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/actionpack/lib/sprockets/railtie.rb:36:in `block in <class:Railtie>'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/lazy_load_hooks.rb:34:in `call'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/lazy_load_hooks.rb:34:in `execute_hook'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/lazy_load_hooks.rb:43:in `block in run_load_hooks'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/lazy_load_hooks.rb:42:in `each'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/lazy_load_hooks.rb:42:in `run_load_hooks'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/application/finisher.rb:56:in `block in <module:Finisher>'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/initializable.rb:25:in `instance_exec'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/initializable.rb:25:in `run'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/initializable.rb:50:in `block in run_initializers'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/initializable.rb:49:in `each'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/initializable.rb:49:in `run_initializers'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/application.rb:94:in `initialize!'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/railtie/configurable.rb:28:in `method_missing'\n    from /home/user/work/testapp/config/environment.rb:5:in `<top (required)>'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/dependencies.rb:237:in `require'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/dependencies.rb:237:in `block in require'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/dependencies.rb:223:in `block in load_dependency'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/dependencies.rb:639:in `new_constants_in'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/dependencies.rb:223:in `load_dependency'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/activesupport/lib/active_support/dependencies.rb:237:in `require'\n    from /home/user/work/testapp/config.ru:4:in `block in <main>'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-09433a26a9e6/lib/rack/builder.rb:51:in `instance_eval'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-09433a26a9e6/lib/rack/builder.rb:51:in `initialize'\n    from /home/user/work/testapp/config.ru:1:in `new'\n    from /home/user/work/testapp/config.ru:1:in `<main>'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-09433a26a9e6/lib/rack/builder.rb:40:in `eval'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-09433a26a9e6/lib/rack/builder.rb:40:in `parse_file'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-09433a26a9e6/lib/rack/server.rb:200:in `app'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/commands/server.rb:46:in `app'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-09433a26a9e6/lib/rack/server.rb:301:in `wrapped_app'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-09433a26a9e6/lib/rack/server.rb:252:in `start'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/commands/server.rb:70:in `start'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/commands.rb:54:in `block in <top (required)>'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/commands.rb:49:in `tap'\n    from /home/user/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-67c3469e6ff1/railties/lib/rails/commands.rb:49:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n</pre>\n", "labels": [], "number": 453, "updated_at": "2011-05-21 23:08:12", "user": 108694, "closed_at": "2011-05-08 21:24:55", "id": 864387, "title": "Rails fails to start (rails master + sprockets master)", "url": "https://api.github.com/repos/rails/rails/issues/453", "created_at": "2011-05-08 08:25:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1118644", "text": "Please update sprockets?\n", "created_at": "2011-05-08 08:45:40", "user": 9582, "id": 1118644}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120083", "text": "just did (once again) bundle update and bundle install. latest sprockets from master branch. it fails after yesterdays clean up commit in sprockets repository.\n", "created_at": "2011-05-08 19:55:46", "user": 108694, "id": 1120083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120087", "text": "@slbug can you post then which sprockets version (commit ref) are you using? Rails and rack versions I can get from the backtrace, thanks.\n", "created_at": "2011-05-08 19:57:47", "user": 9582, "id": 1120087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120232", "text": "Gemfile:\n\n<pre>\nsource 'http://rubygems.org'\n\ngem 'rails',                 :git => 'git://github.com/rails/rails.git'\ngem 'arel',                  :git => 'git://github.com/rails/arel.git'\ngem 'rack',                  :git => 'git://github.com/rack/rack.git'\ngem 'sprockets',             :git => 'git://github.com/sstephenson/sprockets.git'\ngem 'rack-cache',            :git => 'git://github.com/rtomayko/rack-cache.git', :require => 'rack/cache'\ngem 'tilt',                  :git => 'git://github.com/rtomayko/tilt.git'\ngem 'rack-mount',            :git => 'git://github.com/josh/rack-mount.git'\n\ngem 'i18n',                  :git => 'git://github.com/svenfuchs/i18n.git'\ngem 'redis',                 :git => 'git://github.com/ezmobius/redis-rb.git'\n\ngem 'haml',                  :git => 'git://github.com/nex3/haml.git'\ngem 'sass',                  :git => 'git://github.com/nex3/sass.git'\ngem 'coffee-script',         :git => 'git://github.com/josh/ruby-coffee-script.git'\ngem 'uglifier',              :git => 'git://github.com/lautis/uglifier.git'\n\ngem 'ancestry',              :git => 'git://github.com/stefankroes/ancestry.git'\ngem 'kaminari',              :git => 'git://github.com/amatsuda/kaminari.git'\n\ngem 'jquery-rails',          :git => 'git://github.com/indirect/jquery-rails.git'\n\ngem 'RubyInline',            :require => false\ngem 'image_science',         :require => false\ngem 'carrierwave',           :git => 'git://github.com/jnicklas/carrierwave.git'\n\ngem 'htmlentities'\ngem 'nokogiri'\ngem 'pg'\n\ngroup :development do\n  gem 'hpricot'\n  gem 'ruby_parser'\n  gem 'haml-rails',          :git => 'git://github.com/indirect/haml-rails.git'\nend\n\ngem 'unicorn'\n</pre>\n\n\nGemfile.lock:\n\n<pre>\nGIT\n  remote: git://github.com/amatsuda/kaminari.git\n  revision: 2dfb5553b236ee0a0db9fa3f9aecbcac314ae78c\n  specs:\n    kaminari (0.12.4)\n      rails (>= 3.0.0)\n\nGIT\n  remote: git://github.com/ezmobius/redis-rb.git\n  revision: c41bc94ea6e6eebb718428d74d22c84b6d2513a4\n  specs:\n    redis (2.2.0)\n\nGIT\n  remote: git://github.com/indirect/haml-rails.git\n  revision: 92c41db61f20a9f122de25bc73e5045cfccdbcd5\n  specs:\n    haml-rails (0.3.4)\n      actionpack (~> 3.0)\n      activesupport (~> 3.0)\n      haml (~> 3.0)\n      railties (~> 3.0)\n\nGIT\n  remote: git://github.com/indirect/jquery-rails.git\n  revision: 8800c15e7dfc574310719a9bb668cd3e5eada575\n  specs:\n    jquery-rails (1.0)\n      railties (~> 3.0)\n      thor (~> 0.14)\n\nGIT\n  remote: git://github.com/jnicklas/carrierwave.git\n  revision: d2cb99103a4fd3a4927ea616b251809969831fbe\n  specs:\n    carrierwave (0.5.3)\n      activesupport (~> 3.0)\n\nGIT\n  remote: git://github.com/josh/rack-mount.git\n  revision: c52eb4bd45ff8d06aae7f3e3f93c0115f87a3ae0\n  specs:\n    rack-mount (0.7.2)\n      rack (>= 1.0.0)\n\nGIT\n  remote: git://github.com/josh/ruby-coffee-script.git\n  revision: 200152667e00a1b744977a3a4750df510925cc6f\n  specs:\n    coffee-script (2.2.0)\n      coffee-script-source\n      execjs\n\nGIT\n  remote: git://github.com/lautis/uglifier.git\n  revision: 76d5e3ca43e3042c67d4290609458623be7a4fff\n  specs:\n    uglifier (0.5.1)\n      execjs\n      multi_json\n\nGIT\n  remote: git://github.com/nex3/haml.git\n  revision: 5f04bbda570a41acfb1d5d8ac971ae99c1ae7046\n  specs:\n    haml (3.2.0.alpha.0)\n\nGIT\n  remote: git://github.com/nex3/sass.git\n  revision: a1ef2cddaee971d84d0e5e26329727ab0c7be884\n  specs:\n    sass (3.2.0.alpha.0)\n\nGIT\n  remote: git://github.com/rack/rack.git\n  revision: c16729ddc2a0576818db2e8c20ca6550d9d2cdad\n  specs:\n    rack (1.3.0.beta)\n\nGIT\n  remote: git://github.com/rails/arel.git\n  revision: a3d9c393b4707a03734dcf6831fb9636fabac045\n  specs:\n    arel (2.1.0.20110430172428)\n\nGIT\n  remote: git://github.com/rails/rails.git\n  revision: b3791da0318eb68f14a2d8d7658cc882784e6f6a\n  specs:\n    actionmailer (3.1.0.beta1)\n      actionpack (= 3.1.0.beta1)\n      mail (~> 2.3.0)\n    actionpack (3.1.0.beta1)\n      activemodel (= 3.1.0.beta1)\n      activesupport (= 3.1.0.beta1)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      i18n (~> 0.6.0beta1)\n      rack (~> 1.3.0.beta)\n      rack-cache (~> 1.0.1)\n      rack-mount (~> 0.7.2)\n      rack-test (~> 0.6.0)\n      sprockets (~> 2.0.0.beta.2)\n      tzinfo (~> 0.3.27)\n    activemodel (3.1.0.beta1)\n      activesupport (= 3.1.0.beta1)\n      bcrypt-ruby (~> 2.1.4)\n      builder (~> 3.0.0)\n      i18n (~> 0.6.0beta1)\n    activerecord (3.1.0.beta1)\n      activemodel (= 3.1.0.beta1)\n      activesupport (= 3.1.0.beta1)\n      arel (~> 2.1.0)\n      tzinfo (~> 0.3.27)\n    activeresource (3.1.0.beta1)\n      activemodel (= 3.1.0.beta1)\n      activesupport (= 3.1.0.beta1)\n    activesupport (3.1.0.beta1)\n      multi_json (~> 1.0)\n    rails (3.1.0.beta1)\n      actionmailer (= 3.1.0.beta1)\n      actionpack (= 3.1.0.beta1)\n      activerecord (= 3.1.0.beta1)\n      activeresource (= 3.1.0.beta1)\n      activesupport (= 3.1.0.beta1)\n      bundler (~> 1.0)\n      railties (= 3.1.0.beta1)\n    railties (3.1.0.beta1)\n      actionpack (= 3.1.0.beta1)\n      activesupport (= 3.1.0.beta1)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      thor (~> 0.14.6)\n\nGIT\n  remote: git://github.com/rtomayko/rack-cache.git\n  revision: 85ee0c5b9cdde994e88e2c7b66c459b7bf736166\n  specs:\n    rack-cache (1.0.1)\n      rack (>= 0.4)\n\nGIT\n  remote: git://github.com/rtomayko/tilt.git\n  revision: b8e1cd20900f666d8127405be4a060e74274de8b\n  specs:\n    tilt (1.3)\n\nGIT\n  remote: git://github.com/sstephenson/sprockets.git\n  revision: 61fa58655d4fa64fc6b5d8c617e3ec0bb92a5836\n  specs:\n    sprockets (2.0.0.beta.2)\n      hike (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.0)\n\nGIT\n  remote: git://github.com/stefankroes/ancestry.git\n  revision: 59d155e558dc3cd916f613bbe7f5a4f047981ed5\n  specs:\n    ancestry (1.2.3)\n      activerecord (>= 2.2.2)\n\nGIT\n  remote: git://github.com/svenfuchs/i18n.git\n  revision: 61138a5d8de4dfcec15e13a8f3e7f7c53ab8938a\n  specs:\n    i18n (0.6.0beta1)\n\nGEM\n  remote: http://rubygems.org/\n  specs:\n    RubyInline (3.9.0)\n      ZenTest (~> 4.3)\n    ZenTest (4.5.0)\n    bcrypt-ruby (2.1.4)\n    builder (3.0.0)\n    coffee-script-source (1.1.0)\n    erubis (2.7.0)\n    execjs (0.3.3)\n      multi_json (~> 1.0)\n    hike (1.0.0)\n    hpricot (0.8.4)\n    htmlentities (4.3.0)\n    image_science (1.2.1)\n    kgio (2.4.0)\n    mail (2.3.0)\n      i18n (>= 0.4.0)\n      mime-types (~> 1.16)\n      treetop (~> 1.4.8)\n    mime-types (1.16)\n    multi_json (1.0.1)\n    nokogiri (1.4.4)\n    pg (0.11.0)\n    polyglot (0.3.1)\n    rack-ssl (1.3.2)\n      rack\n    rack-test (0.6.0)\n      rack (>= 1.0)\n    rake (0.8.7)\n    ruby_parser (2.0.6)\n      sexp_processor (~> 3.0)\n    sexp_processor (3.0.5)\n    thor (0.14.6)\n    treetop (1.4.9)\n      polyglot (>= 0.3.1)\n    tzinfo (0.3.27)\n    unicorn (3.6.2)\n      kgio (~> 2.3)\n      rack\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  RubyInline\n  ancestry!\n  arel!\n  carrierwave!\n  coffee-script!\n  haml!\n  haml-rails!\n  hpricot\n  htmlentities\n  i18n!\n  image_science\n  jquery-rails!\n  kaminari!\n  nokogiri\n  pg\n  rack!\n  rack-cache!\n  rack-mount!\n  rails!\n  redis!\n  ruby_parser\n  sass!\n  sprockets!\n  tilt!\n  uglifier!\n  unicorn\n</pre>\n", "created_at": "2011-05-08 20:48:03", "user": 108694, "id": 1120232}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120241", "text": "You can ignore RubyInline and image-science. Just added it, so it wont affect this issue.\n", "created_at": "2011-05-08 20:51:47", "user": 108694, "id": 1120241}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120256", "text": "Please use the https://gist.github.com/ feature when posting this much code\n", "created_at": "2011-05-08 20:58:05", "user": 127208, "id": 1120256}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120275", "text": "Sure, i will. Just thought that those code should be better here without opening new pages.\n", "created_at": "2011-05-08 21:05:50", "user": 108694, "id": 1120275}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120316", "text": "Please **don't** upgrade sprockets yet. Stick on the beta gem `2.0.0.beta.1`.\n", "created_at": "2011-05-08 21:24:55", "user": 137, "id": 1120316}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120350", "text": "I did so, reported just fyi.\n", "created_at": "2011-05-08 21:36:43", "user": 108694, "id": 1120350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193551", "text": "Just to save someone else the 2 minutes waiting for a `bundle update sprockets` that will fail, beta.2 is required by rails 3.1.0beta1. You want `gem 'sprockets', '2.0.0.beta.2'` in your Gemfile.\n", "created_at": "2011-05-17 22:22:20", "user": 216377, "id": 1193551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194246", "text": "thanks @mceachen, this sprockets issue hit me too....\n", "created_at": "2011-05-18 01:02:54", "user": 180, "id": 1194246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194486", "text": "this also helped me alot\n", "created_at": "2011-05-18 02:11:39", "user": 128100, "id": 1194486}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1195411", "text": "thanks\n", "created_at": "2011-05-18 06:54:43", "user": 339111, "id": 1195411}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1195740", "text": "thanks @mceachen, this issue hit me hard too.\n", "created_at": "2011-05-18 08:33:05", "user": 81857, "id": 1195740}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1196245", "text": "Oh dear god - @mceachen thanks you so much for this!\n", "created_at": "2011-05-18 10:43:08", "user": 435259, "id": 1196245}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1196587", "text": "Thanks @mceachen.\n", "created_at": "2011-05-18 12:27:24", "user": 223670, "id": 1196587}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1198326", "text": "you saved my day. thanks @mceachen :)\n", "created_at": "2011-05-18 17:17:31", "user": 21980, "id": 1198326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1200818", "text": "Thanks @mceachen, you saved me a bunch of time.\n", "created_at": "2011-05-19 00:18:28", "user": 602226, "id": 1200818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1201048", "text": "I have the same problem, but now sprockets is `2.0.0.beta.4`.\n\nI create a new app, then run `bundle install`, `rails server`, get this:\n\n`/Users/edison/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.1.0.beta1/lib/sprockets/railtie.rb:37: undefined method `context' for #<Sprockets::Environment:0x103218780> (NoMethodError)`\n\nEdit: Solved using `2.0.0.beta.2` on Gemfile.lock.\n", "created_at": "2011-05-19 01:26:26", "user": 149353, "id": 1201048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1205895", "text": "same problem with sprockets 2.0.0.beta.4\n\nSwitch back to 2.0.0.beta.2 for solving it\n", "created_at": "2011-05-19 19:49:50", "user": 562627, "id": 1205895}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208351", "text": "Thanks guys!  Saved me time.  sprockets 2.0.0.beta.2 worked like a charm.\n", "created_at": "2011-05-20 06:34:15", "user": 670276, "id": 1208351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208399", "text": "Confirmed. \n\nsprockets 2.0.0.beta.2 working ok with rails 3.1.0.beta1\n", "created_at": "2011-05-20 06:51:45", "user": 22303, "id": 1208399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215418", "text": "@edison -- don't edit your Gemfile.lock -- your edit will get reverted next time you run `bundle update`.\n\nJust add `gem 'sprockets', '2.0.0.beta.2'` to your Gemfile, then run `bundle update sprockets`.\n\nFWIW, the issue with sprockets is here: https://github.com/sstephenson/sprockets/issues/47\n", "created_at": "2011-05-21 20:17:14", "user": 216377, "id": 1215418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215851", "text": "@mceachen you are right, this is the best way. Thanks!\n", "created_at": "2011-05-21 23:08:12", "user": 149353, "id": 1215851}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Commit ce9456e broke nested indifferent access conversion for subclasses of\nHash. This commit makes Hash subclasses convert to HWIA by default for nested\nobjects of subclasses of Hash, but allows certain subclasses to prevent nested\nconversion by introducing Hash#nested_under_indifferent_access that subclasses\ncan overwrite.\n\nActiveSupport::OrderedHash is one such subclass that overwrites\n+nested_under_indifferent_access+, since implicitly converting it to HWIA would\nremove the ordering of keys and values in Ruby 1.8.\n", "labels": [], "number": 454, "updated_at": "2014-07-03 04:02:37", "user": 7035, "closed_at": "2011-05-08 10:44:33", "id": 864551, "title": "indifferent access should recurse Hash subclasses", "url": "https://api.github.com/repos/rails/rails/issues/454", "created_at": "2011-05-08 10:38:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nRenamed mass-assignment scopes to roles, updated code, tests, docs and security guide.\n\nThanks,\n\nJosh\n", "labels": [], "number": 455, "updated_at": "2014-07-03 04:02:41", "user": 8701, "closed_at": "2011-05-08 15:19:45", "id": 864903, "title": "Renamed mass-assignment scopes to roles", "url": "https://api.github.com/repos/rails/rails/issues/455", "created_at": "2011-05-08 14:46:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is required from our Rails side. This will help to perform database operations(create, delete, update) for jdbcmysql adapter.\n\nWill add more support for postgresql, sqlite3 after this.\n\n/cc @tenderlove \n", "labels": [], "number": 456, "updated_at": "2014-07-03 04:02:47", "user": 3948, "closed_at": "2011-05-09 16:10:16", "id": 865261, "title": "Fixed ERROR in ActiveRecord Tests with Jruby \"activerecord-mysql-adapter\" gem", "url": "https://api.github.com/repos/rails/rails/issues/456", "created_at": "2011-05-08 17:59:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1121397", "text": "@arunagw can you please explain this pull request more?  It looks like you want us to actually integrate the jdbc mysql adapters to rails master.\n", "created_at": "2011-05-09 06:12:19", "user": 3124, "id": 1121397}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1121428", "text": "@tenderlove  I have asked @nicksieger about this. I am agreed this can go activerecord-jdbc-adapter gem.\n\nIf this will integrate with that then no need to have it here. \n\nI am waiting for reply from them. \n", "created_at": "2011-05-09 06:27:11", "user": 3948, "id": 1121428}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123582", "text": "I still don't understand the problem this is solving. If you could post a bug report or pull request with details at https://github.com/nicksieger/activerecord-jdbc-adapter that would help a lot! Thanks!\n", "created_at": "2011-05-09 16:03:52", "user": 154, "id": 1123582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123608", "text": "I don't want to pull the jdbc adapter code to rails master.  Whatever the problem is, it seems like something that should happen in the activerecord jdbc adapter gem, so I'm going to close this pull request.\n", "created_at": "2011-05-09 16:10:17", "user": 3124, "id": 1123608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123627", "text": "Thanks @nicksieger  and @tenderlove \n", "created_at": "2011-05-09 16:13:47", "user": 3948, "id": 1123627}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adds examples in code for ordinalizing negative numbers.\n", "labels": [], "number": 457, "updated_at": "2014-07-03 04:02:51", "user": 146214, "closed_at": "2011-05-08 18:21:54", "id": 865288, "title": "Adds examples in code for ordinalizing negative numbers", "url": "https://api.github.com/repos/rails/rails/issues/457", "created_at": "2011-05-08 18:19:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Update copyright year to 2011 in Active Resource\n", "labels": [], "number": 458, "updated_at": "2014-07-03 04:02:53", "user": 146214, "closed_at": "2011-05-09 16:44:58", "id": 865432, "title": "Update copyright year in Active Resource", "url": "https://api.github.com/repos/rails/rails/issues/458", "created_at": "2011-05-08 19:26:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120653", "text": "This should be 2006-2010 and also you can do the same on AS :)\n", "created_at": "2011-05-08 23:54:14", "user": 52642, "id": 1120653}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1121294", "text": "Most of them are up to 2011. Any reason why this should be only up to 2010 ?\n", "created_at": "2011-05-09 05:34:38", "user": 146214, "id": 1121294}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1121330", "text": "I think CHANGELOG can explain why:\n\n```\n*Rails 3.1.0 (unreleased)*\n\n* No changes\n\n*Rails 3.0.2 (unreleased)*\n\n* No changes\n\n*Rails 3.0.1 (October 15, 2010)*\n\n* No Changes, just a version bump.\n...\n```\n\nhttps://github.com/rails/rails/blob/master/activeresource/CHANGELOG\n\nAlso looks like some CHANGELOGs are outdated :)\n", "created_at": "2011-05-09 05:46:03", "user": 160941, "id": 1121330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1121992", "text": "Even if there are no changes (there are, check git log), what's wrong with updating the copyright range? You do not hold the copyright in 2011?\n", "created_at": "2011-05-09 09:39:09", "user": 3387, "id": 1121992}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1122197", "text": "i _suspect_ @spastorino just had a typo. Gingerly suggesting that he may have meant 2006-2011.\n", "created_at": "2011-05-09 10:51:37", "user": 762, "id": 1122197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1122594", "text": "I agree with @fxn\n", "created_at": "2011-05-09 12:46:19", "user": 160941, "id": 1122594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1122775", "text": "I've tried to say 2006-2011, sorry for the typo.\n", "created_at": "2011-05-09 13:32:39", "user": 52642, "id": 1122775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1124679", "text": "Ok! I'm closing this. I'm not sure what I did or what caused all these commits to become part of this pull request. Will create a new one.\n", "created_at": "2011-05-09 16:44:58", "user": 146214, "id": 1124679}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1124736", "text": "@vijaydev, you should create a branch for pull requests and not work on your master branch. What I believe is happening is you're updating (pulling or fetching/merging) your master branch and github is adding those commits as part of your pull request.\n\nThey made doc changes like this ridiculously easy pretty recently -- https://github.com/blog/844-forking-with-the-edit-button\n", "created_at": "2011-05-09 16:54:17", "user": 58678, "id": 1124736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1124837", "text": "@et Thanks! That's what happened. Will change how I send pull requests from now on.\n\nNew pull request here: https://github.com/rails/rails/pull/468\n", "created_at": "2011-05-09 17:12:16", "user": 146214, "id": 1124837}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "So you can just say `t.password` instead of `t.add_column :password_digest`\n\nI think it's a nice complement to the ActiveModel `has_secure_password`, where the programmer does't need to worry about the underlying implementation that uses `password_digest`.\n", "labels": [], "number": 459, "updated_at": "2014-06-15 03:55:26", "user": 483, "closed_at": "2011-05-08 23:32:42", "id": 865503, "title": "Adds a migration helper for has_secure_password", "url": "https://api.github.com/repos/rails/rails/issues/459", "created_at": "2011-05-08 20:08:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120146", "text": "I am -1. I did that on devise and it was one of my biggest mistakes. Later we would want to change the activemodel implementation and it would be hard if the migration field is coupled.\n", "created_at": "2011-05-08 20:19:24", "user": 9582, "id": 1120146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120200", "text": "-1, it's just as easy to add a password_digest column.\n", "created_at": "2011-05-08 20:37:15", "user": 18524, "id": 1120200}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1120615", "text": "Yeah, I concur with the -1's. Not enough of a win for this kind of specialization.\n", "created_at": "2011-05-08 23:32:42", "user": 2741, "id": 1120615}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 460, "updated_at": "2014-07-03 04:03:05", "user": 160941, "closed_at": "2011-05-09 09:26:41", "id": 867675, "title": "Just a minor fix in A.S CHANGELOG", "url": "https://api.github.com/repos/rails/rails/issues/460", "created_at": "2011-05-09 05:59:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "3.1 version of #353 since that was against 3-0-stable.\n", "labels": [], "number": 461, "updated_at": "2014-06-30 14:46:23", "user": 605447, "closed_at": "2011-05-09 16:54:13", "id": 867785, "title": "Sorted migrations", "url": "https://api.github.com/repos/rails/rails/issues/461", "created_at": "2011-05-09 06:53:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123380", "text": "Could you please post the sample outputs before and after your patches? Thanks!\n", "created_at": "2011-05-09 15:30:33", "user": 9582, "id": 1123380}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123580", "text": "Before the patch you'd get something along the lines of:\n\n```\n Status   Migration ID    Migration Name\n--------------------------------------------------\n  down    20110509154852  Create projects\n   up     20110314033408  Devise create users\n  down    20110509154416  Create posts\n   up     20110412181232  *** NO FILE ***\n```\n\nAfter the patch you get this:\n\n```\n Status   Migration ID    Migration Name\n--------------------------------------------------\n   up     20110314033408  Devise create users\n   up     20110412181232  ********** NO FILE **********\n  down    20110509154416  Create posts\n  down    20110509154852  Create projects\n```\n\nObviously, with this being a contrived example, the value of the patch isn't so clear but I've got other projects going with 20+ migrations and having them displayed in chronological order (since that's the order they'll be run in) has proven immensely valuable.\n\nThe same app with all migrations applied (just for more reference):\n\nBefore:\n\n```\n Status   Migration ID    Migration Name\n--------------------------------------------------\n   up     20110509154852  Create projects\n   up     20110314033408  Devise create users\n   up     20110509154416  Create posts\n   up     20110412181232  *** NO FILE ***\n```\n\nAfter:\n\n```\n Status   Migration ID    Migration Name\n--------------------------------------------------\n   up     20110314033408  Devise create users\n   up     20110412181232  ********** NO FILE **********\n   up     20110509154416  Create posts\n   up     20110509154852  Create projects\n```\n", "created_at": "2011-05-09 16:03:36", "user": 605447, "id": 1123580}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi there's an issue with SCSS in Rails 3.1 beta 1.\n\nIt can't seem to read mixin's. \n\nWhat I did was use the command for now:\n\n sass --watch app/assets/stylesheets:app/assets/stylesheets --trace\n", "labels": [], "number": 462, "updated_at": "2011-05-09 09:05:17", "user": 50656, "closed_at": "2011-05-09 09:05:17", "id": 868064, "title": "scss", "url": "https://api.github.com/repos/rails/rails/issues/462", "created_at": "2011-05-09 08:48:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1121894", "text": "Please report this issue on sprockets or scss issues tracker? Thanks!\n", "created_at": "2011-05-09 09:05:17", "user": 9582, "id": 1121894}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixed typos in documentation for the date_select helper in actionpack/action_view.\n\nThe description for an example of the date_select method did not match the actual code example.\n\nThis patch changes no code, only documentation comments.\n", "labels": [], "number": 463, "updated_at": "2014-07-03 04:03:12", "user": 78225, "closed_at": "2011-05-09 10:18:08", "id": 868307, "title": "Fixed typos in documentation for the date_select helper in actionpack/act", "url": "https://api.github.com/repos/rails/rails/issues/463", "created_at": "2011-05-09 10:16:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1122091", "text": "Please push changes to documentation straight to lifo/docrails. It is a repository with public access! Thanks!\n", "created_at": "2011-05-09 10:18:08", "user": 9582, "id": 1122091}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "use compute_public_path\n", "labels": [], "number": 464, "updated_at": "2014-07-03 04:03:15", "user": 49042, "closed_at": "2011-05-09 11:42:18", "id": 868544, "title": "fixes #342: AssetTagHelper ensures that files are in the wrong directory (again)", "url": "https://api.github.com/repos/rails/rails/issues/464", "created_at": "2011-05-09 11:41:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "use compute_public_path by pkmiec\n", "labels": [], "number": 465, "updated_at": "2014-06-26 10:36:22", "user": 49042, "closed_at": "2011-05-09 11:53:30", "id": 868550, "title": "Issue #342: AssetTagHelper ensures that files are in the wrong directory (again)", "url": "https://api.github.com/repos/rails/rails/issues/465", "created_at": "2011-05-09 11:44:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since a9b72fbc9e300c42edde88a006e626d4dc8ce129, I can't start application on rails edge.\n\n<pre>\nrails-731923d79e0b/actionpack/lib/action_view/path_set.rb:38:in `block in typecast!': uninitialized constant \nActionView::PathSet::OptimizedFileSystemResolver (NameError)\n</pre>\n\n\nin actionpack/lib/action_view/path_set.rb \n\n<pre>\nself[i] = OptimizedFileSystemResolver.new(path)\n</pre>\n\nshould be called with the correct module : ActionView::OptimizedFileSystemResolver\n", "labels": [], "number": 466, "updated_at": "2011-05-09 13:14:46", "user": 12178, "closed_at": "2011-05-09 13:14:46", "id": 868810, "title": "Can't start application on edge", "url": "https://api.github.com/repos/rails/rails/issues/466", "created_at": "2011-05-09 13:07:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Suggested change to activesupport/xml_mini.rb#_dasherize.\n\nPasses tests and is about 20 to 25% faster than current version\n", "labels": [], "number": 467, "updated_at": "2014-06-24 20:48:54", "user": 639851, "closed_at": "2011-05-09 15:09:43", "id": 869235, "title": "Xml mini dasherize", "url": "https://api.github.com/repos/rails/rails/issues/467", "created_at": "2011-05-09 14:34:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1123292", "text": "Applied, thanks!\n", "created_at": "2011-05-09 15:09:43", "user": 9582, "id": 1123292}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Update copyright year to include up to 2011 in Active Resource & Active Support.\n", "labels": [], "number": 468, "updated_at": "2014-07-03 04:03:26", "user": 146214, "closed_at": "2011-05-09 23:20:47", "id": 872140, "title": "Update copyright year in Active Resource & Active Support", "url": "https://api.github.com/repos/rails/rails/issues/468", "created_at": "2011-05-09 17:10:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1124888", "text": "Y U change the copyright to 2011 and then to 2006-2011 :P.\nPlease merge the commits in one.\n", "created_at": "2011-05-09 17:18:33", "user": 52642, "id": 1124888}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1124892", "text": "It was the earlier commit! Will do.\n", "created_at": "2011-05-09 17:19:12", "user": 146214, "id": 1124892}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1124930", "text": "I think since I'm still on master, me merging and pushing the changes will again bring in all the new commits as it did in the earlier request. Any tips to avoid that?\n", "created_at": "2011-05-09 17:24:09", "user": 146214, "id": 1124930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1125066", "text": "Feature branches and git rebase are you friends :P\n\nSome tips about branching and keeping a git fork updated: \nhttp://blog.plataformatec.com.br/2011/04/a-successful-git-branching-model/\nhttp://robots.thoughtbot.com/post/5133345960/keeping-a-git-fork-updated\n\nYou can use git-resolve to merge two commits :) http://www.kernel.org/pub/software/scm/git/docs/v1.4.4.4/git-resolve.html\n", "created_at": "2011-05-09 17:48:01", "user": 160941, "id": 1125066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1125270", "text": "Ah! I can't remove commits from a pull request?? \n", "created_at": "2011-05-09 18:19:48", "user": 146214, "id": 1125270}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1125290", "text": "@guilleiguaran Thanks for the help. But git resolve doesn't exist in my system! (git version 1.7.1). I squashed the two commits and pushed now. But I can't figure how to remove the old commits from the request.\n", "created_at": "2011-05-09 18:22:17", "user": 146214, "id": 1125290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1125736", "text": "@vijaydev push -f ?\n", "created_at": "2011-05-09 19:40:46", "user": 52642, "id": 1125736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126486", "text": "@vijaydev: Squash all the four commits:\n\n```\n$ git rebase -i HEAD~4\n```\n\nYou will get in your editor something like that:\n\n```\npick 3d0111b Merge branch 'master' of github.com:vijaydev/rails\npick b127c39 Update copyright year in Active Resource and Active Support\npick 87b0467 Update copyright year in Active Resource and Active Support\npick d7813e9 update copyright year to 2011  \n```\n\nChange the last three picks to squash:\n\n```\npick 3d0111b Merge branch 'master' of github.com:vijaydev/rails\nsquash b127c39 Update copyright year in Active Resource and Active Support\nsquash 87b0467 Update copyright year in Active Resource and Active Support\nsquash d7813e9 update copyright year to 2011    \n```\n\nSave it and other editor will be open, you will need to specify the new commit message and save it. When rebase finish push changes as @spastorino says:\n\n```\n$ git push -f origin master\n```\n", "created_at": "2011-05-09 21:34:35", "user": 160941, "id": 1126486}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1127006", "text": "You're doing it wrong, you need to have the branch where you are doing the pull request just with one commit on top if you check here https://github.com/vijaydev/rails/commits/master you will see you have four.\nAnyways I've already cherry-picked the one we need, thanks :).\n", "created_at": "2011-05-09 23:20:47", "user": 52642, "id": 1127006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129057", "text": "Thanks @spastorino and @guilleiguaran. I'm changing my workflow from now on to have separate branches.\n", "created_at": "2011-05-10 04:58:37", "user": 146214, "id": 1129057}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This adds two methods to SecureRandom. random_from_set randomly chooses a given number of items from a set, returning an object of the same type.  random_unambiguous_code returns an alpha numeric code which does include characters that could be confused with one another.\n\nI had a need for generating a random string that did not include easily mis-identified characters.  Did a search for 'rails generate password' to check if rails already had that functionality and was horrified by what people were suggesting.\n\nThe two added methods are so trivial I hesitate to submit them, but people seem to have a hard time with this so perhaps they should be included in rails itself?\n\nI'm not really happy with the names, but couldn't come up with anything better.  If anyone has better any ideas I'd be glad to rework the patch.\n\nFeel free to drop the pull request if it is indeed judged too trivial.\n", "labels": [], "number": 469, "updated_at": "2014-07-03 04:03:29", "user": 79566, "closed_at": "2011-05-09 19:12:33", "id": 872759, "title": "New Feature - good random string generation", "url": "https://api.github.com/repos/rails/rails/issues/469", "created_at": "2011-05-09 18:48:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1125607", "text": "I don't think we should add this to core.  The API seems strange.  Why not just return a set that is ordered randomly, and let the user call `first` on it.  For example:  `set.sort_by { rand }.first(n)`.  If you really want to use ssl, then call `unpack` on the bytes, zip, sort, first:\n\n```\nirb(main):008:0> myset = %w{ a b c d e f }\n=> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nirb(main):009:0> OpenSSL::Random.random_bytes(myset.length).unpack('C*').zip(myset).sort_by { |r,_| r }.map { |_,i| i }.first 2\n=> [\"f\", \"a\"]\nirb(main):010:0>\n```\n\nEither way, I don't think this is something that should go in core.\n", "created_at": "2011-05-09 19:12:33", "user": 3124, "id": 1125607}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "All information needed to reproduce this can be found in http://intertwingly.net/stories/2011/05/09/\n\n```\n    depot.tgz - complete Rails 3.1 application after the point of failure\n    development.log - Rails server log after the point of failure\n    relation-30.html - complete scenario run successfully on Rails 3.0\n    relation-31.html - same scenario with failure on Rails 3.1\n    relation.rb - script used to produce the results\n```\n\nNote that a LineItem is created initially with an cart_id.  Later that cart_id is set to nil and that record is saved to disk.  After that point, a Cart.Destroy deletes that LineItem.\n\nKey parts of the development log:\n\n```\n      ESC[1mESC[35mCart LoadedESC[0m  ESC[1mFrom Identity Map (id: 1)ESC[0m\n      ESC[1mESC[35mSQL (0.3ms)ESC[0m  DELETE FROM \"line_items\" WHERE \"line_items\".\"id\" = ?  [[\"id\", 1]]     \n```\n", "labels": [], "number": 470, "updated_at": "2012-05-04 05:48:50", "user": 4815, "closed_at": "2011-05-10 13:46:24", "id": 873028, "title": "Stale data in Identity Map causes data to be destroyed.", "url": "https://api.github.com/repos/rails/rails/issues/470", "created_at": "2011-05-09 19:46:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1130939", "text": "@rubys I am closing this one, Identity Map will be off on Rails 3.1 and we will detail a roadmap to handle all association related issues.\n", "created_at": "2011-05-10 13:46:24", "user": 9582, "id": 1130939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3703647", "text": "Any news on this roadmap to handle association issues? Thanks.\n", "created_at": "2012-01-28 21:21:34", "user": 55656, "id": 3703647}], "assignees": [160941, 160941], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey Guys,\n\nThe name says it all :)\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 471, "updated_at": "2014-06-14 16:49:32", "user": 8701, "closed_at": "2011-05-09 20:16:06", "id": 873195, "title": "Removed an unneed AS::Concern from AR::IdentityMap", "url": "https://api.github.com/repos/rails/rails/issues/471", "created_at": "2011-05-09 20:14:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There used to be a method on models with belongs_to associations that would tell you whether the association is loaded. This still works on has_many associations with collection.loaded? but no longer works for belongs_to\n", "labels": [], "number": 472, "updated_at": "2011-05-11 07:57:36", "user": 6336, "closed_at": "2011-05-11 07:57:35", "id": 873235, "title": "\"loaded_#{association}?\" method removed from belongs_to association", "url": "https://api.github.com/repos/rails/rails/issues/472", "created_at": "2011-05-09 20:21:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133073", "text": "This was never a documented public method, but I guess we should decide whether it should exist as such.\n\n@tenderlove, what do you think?\n\nIn the meantime you can do `foo.association(:bla).loaded?` to check, but if we are going to have a public API for this then it should probably be `bla_loaded?`.\n", "created_at": "2011-05-10 19:48:58", "user": 1979, "id": 1133073}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133327", "text": "@jonleighton Really?  `bla_loaded?` ?  I don't like it since that means more method missing or dynamically added methods.  If we can't add it to the association proxy, the `foo.association(:bla).loaded?` form seems fine to me.  I don't see this as something people commonly do, so asking the association directly seems fine.  wdyt?\n", "created_at": "2011-05-10 20:30:10", "user": 3124, "id": 1133327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133355", "text": "@tenderlove: it's not method_missing as we can generate the method when the association is defined, but I agree with you that it's not great to be dynamically generating loads of methods.\n\nHowever, my concern with `foo.association(:bla).loaded?` is that if we supported this as a public API then it exposes the whole `foo.association(:bla)` 'area' which we might prefer to keep under the covers. (We don't want people complaining about us removing other undocumented methods from `foo.association(:bla)` in the future.)\n\nMy preference is to just preserve the status quo: people can use `foo.association(:bla).loaded?` if they must, and it's unlikely to change, but they mustn't hate if it does change ;)\n", "created_at": "2011-05-10 20:35:43", "user": 1979, "id": 1133355}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133382", "text": "TBH, I don't see a problem with exposing the association objects.  Presumably we're making private methods private, and public methods public.\n\nI agree.  Keep status quo.  :-)\n", "created_at": "2011-05-10 20:40:50", "user": 3124, "id": 1133382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133448", "text": "Okay, closing this then.\n", "created_at": "2011-05-10 20:51:27", "user": 1979, "id": 1133448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1136012", "text": "I felt bad about this when I woke up this morning, so I am going to add a deprecation warning.\n", "created_at": "2011-05-11 06:51:41", "user": 1979, "id": 1136012}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey guys,\n\nI've been thinking that it would be cool to improve flashes in terms of i18n and leveraging convention-over-configuration. It would be great to get some feedback if this is desirable and if you think my line of thought is good before I take a stab at the implementation.\n\nBest to let code talk to see what I mean:\n\n```\n# application_controller.rb\nclass ApplicationController < ActionController::Base\n  protected\n\n    def set_flash_message(status, options = {})\n      flash_key = status == :success ? :notice : :alert\n      options.reverse_merge!(:scope => :\"flash.#{controller_name}.#{action_name}\")\n      flash[flash_key] = I18n.t(status, options)\n    end\nend\n\n# posts_controller.rb\nclass PostsController < ApplicationController\n  def create\n    @post = Post.new(params[:post])\n\n    if @post.save\n      set_flash_message(:success)\n      redirect_to posts_url\n    else\n      set_flash_message(:failure)\n      render :action => 'new'\n    end\n  end\nend\n\n# en.yml\nen:\n  flash:\n    posts:\n      create:\n        success: Post successfully created.\n        failure: Post could not be created.\n```\n\nThis code is, of course, focused on simplicity. If Rails supported this, I'd like it to look like this:\n\n```\nflash[:notice] = :success # or flash[:notice] = generate_flash(:success)\nredirect_to posts_url, :notice => :success\n```\n\nIn terms of internationalization, we could use something similar to what ActiveModel does for generating error messages, namely provide a line of fallbacks. Something like this:\n\n```\nen:\n  flash:\n    success: Success!\n    failure: Failure!\n\n    create:\n      success: \"%{resource} successfully created.\"\n      failure: \"%{resource} could not be created.\"\n\n    posts:\n      success: \"Post#%{action} successful.\"\n      failure: \"Post#%{action} failed.\"\n\n      create:\n        success: \"Post successfully created.\"\n        failure: \"Post could not be created.\"\n```\n\nIf simple strings are given, Rails should use the current way of just assigning the message as is.\n\nCaveats I can see right now (most likely there are other aspects):\n- We'd need this for both, the redirect form and the classic hash syntax so redirecting/non-redirecting actions can be treated at least similarly.\n- In order to make the flash[:notice] = :success thing work, the implementation would have to be right on the flash hash. Probably the generate_flash is easier, albeit more verbose.\n- The implementation needs to take into account controller namespaces.\n- What else? Am I overlooking something? E.g. cases where controller_name and action_name are set to something else than the current controller and action?\n\nWhat do you think? Is this worth implementing? As I said, I can definitely take a stab ‚Äì I just want to collect some thoughts before I do. :-)\n\nCheers,\n- Clemens\n", "labels": [], "number": 473, "updated_at": "2013-03-22 11:54:25", "user": 3749, "closed_at": "2011-10-09 03:28:08", "id": 873583, "title": "[Feature proposal] Convention over Configuration + i18n for flashes", "url": "https://api.github.com/repos/rails/rails/issues/473", "created_at": "2011-05-09 21:23:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126501", "text": "I like the idea as I use it in my own apps. Although I use it through respond_with and a custom set of responders that does everything behind the scenes (but it also automatically detects when to use notice or alert). The flash[:notice] = :success is quite hard to make work because the flash has no access to the controller instance. generate_hash would be the easier solution but I agree that it is much worse.\n", "created_at": "2011-05-09 21:37:46", "user": 9582, "id": 1126501}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126666", "text": "Could we use env[\"action_dispatch.request.path_parameters\"] for that? Are the controller/action values always/usually correct in there? Because in that case we could do a kind of lazy translation: keep symbols in the flash hash and only evaluate them in the ensure block of the flash middleware. Or is this too dirty? :)\n\nPS: Now I remember: I think I first saw a similar approach in devise.\n", "created_at": "2011-05-09 22:07:39", "user": 3749, "id": 1126666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1126683", "text": "@clements I wouldn't trust env[\"action_dispatch.request.path_parameters\"]. If we are going this patch, I would make flash in the controller be a proxy and intercept the appropriated method calls. But it is not that clean.\n\nBtw, flash goodness for responders is here: https://github.com/plataformatec/responders\n", "created_at": "2011-05-09 22:10:24", "user": 9582, "id": 1126683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2207238", "text": "This would be a cool thing, is it to be implemented?\n", "created_at": "2011-09-27 04:44:10", "user": 10128, "id": 2207238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2293350", "text": "@parndt No, I was kind of discouraged after @josevalim's response ‚Äì I think it might be hard to implement this cleanly and in a way that would be acceptable for core (or I'm too uncreative). So for now, I'm still using my own manual way (as shown in the first code example).\n\nDo you have any ideas how to do this cleanly? If so, go ahead ‚Äì¬†I don't mind just delivering the \"stimulus\". :-)\n", "created_at": "2011-10-05 00:52:13", "user": 3749, "id": 2293350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335041", "text": "Thanks for the suggestion, @clemens! Looks like this is better handled manually though (or wrapped with a responder).\n", "created_at": "2011-10-09 03:28:08", "user": 199, "id": 2335041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15292947", "text": "I found that a pull request was already merged into master: https://github.com/rails/rails/pull/7082\n", "created_at": "2013-03-22 11:54:25", "user": 11537, "id": 15292947}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 474, "updated_at": "2011-05-10 09:43:29", "user": 9582, "closed_at": "2011-05-10 09:43:29", "id": 873916, "title": "Disable identity_map by default. Document it is safe for read.", "url": "https://api.github.com/repos/rails/rails/issues/474", "created_at": "2011-05-09 22:43:27", "comments": [], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It seems to me that content_for is not working as it should (in 3.1beta, at least), in a few different ways:\n\nMy understanding is that once a block has been stored, it can be recalled in a view using either yield() or content_for(). As far as I can tell, only yield is working. This also seems to be the case in helpers, where yield is unavailable. \n\nAlso, it seems it seems like creating a store directly in a view isn't working. \n    content_for(:foo){'bar'}\ndoes not produce the expected result when using yield(:foo), but moving it into a helper does.\n\nI can provide some examples of the behavior I'm seeing, but basically everything other than setting content_for in a helper and calling it in a view with yield is NOT working. Either I'm remember very incorrectly how this has worked in the past, or the documentation is way off (or both).\n", "labels": [], "number": 475, "updated_at": "2011-08-12 13:20:09", "user": 3483, "closed_at": "2011-08-12 13:20:09", "id": 874480, "title": "content_for not working as expected?", "url": "https://api.github.com/repos/rails/rails/issues/475", "created_at": "2011-05-10 01:44:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129680", "text": "Looking at the code, I can see why content_for(:foo) is failing to read but I can't see why content_for(:foo){ 'bar' } no longer works. Why is it failing? What are you expecting as result and what is it returning?\n", "created_at": "2011-05-10 08:16:48", "user": 9582, "id": 1129680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129742", "text": "Ok, I have fixed content_for(:foo). I am still unsure why content_for(:foo){ 'bar' } does not work. Please try it on master, if the problem still persists, could you please reopen this with more information? Thanks!\n", "created_at": "2011-05-10 08:31:56", "user": 9582, "id": 1129742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131142", "text": "I've looked into this a bit more, and the problem seems to be somewhat convoluted. The issue may be entirely the fault of HAML, but it may actually be an indicator or some deeper issue with how things are being passed to the template engines, so it may require further investigation, so I'm going to reopen just in case.\n\nWhen using erb, things seem to work fine in all versions (307, 31beta, and edge). When using haml for the same exact view code, the issues I originally mentioned occur in all versions.\nhttps://gist.github.com/964536\n\nIf this were happening with yield in haml, I would expect some strange scoping issue to be the culprit, but this is happening even with just content_for being used, which should, I think, \"just work\", since it's just passing around some variables in an array. Am I missing something that would prevent the method from working inline in a view in haml?\n", "created_at": "2011-05-10 14:19:33", "user": 3483, "id": 1131142}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131202", "text": "I have no idea what is the reason as I don't have any knowledge about HAML internals. Maybe this is an HAML only issue as it happens in all versions and only HAML?\n", "created_at": "2011-05-10 14:28:29", "user": 9582, "id": 1131202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1139357", "text": "Hey mate, can I close this? Do you think it is still an issue in Rails?\n", "created_at": "2011-05-11 15:11:13", "user": 9582, "id": 1139357}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1139443", "text": "I've been trying to track down anything in HAML that might be causing the method to be evaluated incorrectly, and haven't found anything so far. That would make me think something is getting muggled behind the scenes with something specific to when/how the @view_flow instance is being passed within the request.\n\nBut that's my explanation only by way of having no other explanation and I haven't had a chance to actually look through that aspect of the rails code yet. If it sounds very unlikely to you that this is a rais issue, feel free to close it; stil waiting to get a response from anyone on the haml project to see what they think.\n", "created_at": "2011-05-11 15:22:40", "user": 3483, "id": 1139443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1139731", "text": "I will leave this open but I am removing it from the \"blocker\" list for Rails 3.1 release. Thanks for investigating it and please let me know if I can help somehow.  \n", "created_at": "2011-05-11 16:04:01", "user": 9582, "id": 1139731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1273460", "text": "I reproduced farski¬¥s gist in my code and observed the same behavior. \"content_for\" in erb templates works fine whereas the haml templates just works for the first content_for (therefore resulting in: \"Title text\"). As I am not a regular HAML user I can¬¥t tell you if passing a parenthesized block basically should work. But just passing a block with do - end notation works fine in HAML. \n\n```\n- content_for(:subtitle) do\n  subtitle text\n```\n\ninstead of\n\n```\n- content_for(:subtitle) { 'Subtitle text' }\n```\n", "created_at": "2011-06-01 10:25:11", "user": 202410, "id": 1273460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1790200", "text": "Resolved with https://github.com/nex3/haml/commit/10109d4eb1fcaa83d175fe216ba452bef70b2019\nthe commit is already incorporated into Haml 3.1.2 which is the current stable and default one\n", "created_at": "2011-08-12 10:15:04", "user": 734845, "id": 1790200}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1791276", "text": "All issues I was having have been resolved.\n", "created_at": "2011-08-12 13:20:09", "user": 3483, "id": 1791276}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "On rails 3.1.beta1 and rack 0.3.0.beta, using the cookie session store in production.   Here is what is happening:\n\nUser 1 logs into site, cookie is set and session id is set.\nUser 2 logs into site, same as above.\nUser 2 makes another request to site and the session_id is set to User 1's session_id, thus User 2 becomes logged in as User 1.\n\nWhen User 1 makes subsequent requests, they still get to be logged in as User 1.  But User 2's subsequent requests has User 1's session_id in the session.\n\nI've only seen this happen with the cookie store, and only in production (could not replicate locally, even with cache_class = true).   \n\nDoesn't seem to be a client issue (happens in Chrome, Safari, and Firefox).\n\nactive_record_store does not suffer this problem.\n\nUsing this devise:\n\ngem 'devise', :git => 'git://github.com/plataformatec/devise.git', ref: '50a5ad54ce0ccff'\n\nI haven't been able to pinpoint where the problem is happening, but I'm guessing its probably in the Rack::Session::Cookie implementation, although I can't be sure and I figured this would still be the best place to log the issue. \n\nIts a little tough to debug since it's only happening on production but I'm going to keep trying.\n", "labels": [], "number": 476, "updated_at": "2016-09-07 12:33:07", "user": 534, "closed_at": "2011-05-17 21:45:01", "id": 874506, "title": "CookieStore session id being shared across different users", "url": "https://api.github.com/repos/rails/rails/issues/476", "created_at": "2011-05-10 01:56:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129669", "text": "@rubymaverick if you turn cache classes off in production, does the problem still exists? It should at least make it easier to debug. Also, which is the ID of those users? Does any of them has the id in the database equal to 4? Finally, does it also fail using Rails master? I have fixed a cookie related issue after the beta release. Thanks!\n", "created_at": "2011-05-10 08:11:11", "user": 9582, "id": 1129669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1130979", "text": "@josevalid:  it fails using rails and rack master.\n\nNeither of the users have an ID of 4. I logged the session out on each request and it looked something like this:\n\nUser 1:\nsession: {:session_id => '9e26a62dfcf374d96a7a899da4706340'}\n\nUser 2:\nsession: {:session_id => '9e26a62dfcf374d96a7a899da4706340'}\n", "created_at": "2011-05-10 13:55:38", "user": 534, "id": 1130979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131007", "text": "@rubymaverick so I am out of suspicions from where this bug is coming from. Could you please reproduce it in a smaller application and push it to Github? I will take a look at it straight away.\n", "created_at": "2011-05-10 13:59:58", "user": 9582, "id": 1131007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1139363", "text": "@rubymaverick hey mate, any news? we want to release a RC soon, so it would be cool if we have this fixed before! :D\n", "created_at": "2011-05-11 15:11:57", "user": 9582, "id": 1139363}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1139566", "text": "@josevalim I'm having problems recreating the problem in a fresh app.  I'm going to keep working on it today so hopefully by tonight I'll have something to show.\n", "created_at": "2011-05-11 15:40:19", "user": 534, "id": 1139566}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1139822", "text": "Sweet, thanks a lot!\n", "created_at": "2011-05-11 16:05:35", "user": 9582, "id": 1139822}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1148410", "text": "@josevalid  I haven't yet been able to replicate.  Beginning to think its super specific to my app, and my even be attributed to omniauth/devise. \n", "created_at": "2011-05-12 18:30:18", "user": 534, "id": 1148410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150149", "text": "Thanks for the update. Closing this for now.\n", "created_at": "2011-05-13 00:04:22", "user": 2741, "id": 1150149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171322", "text": "We saw this issue as well. It occurred in production mode only. We are using Jruby 1.60, jruby-rack (1.0.4) w/ Jetty (7.2.2.v20101205). We're slammed this week, but we could replicate it 100% of the time. We will try to track it down further.\n", "created_at": "2011-05-16 04:41:28", "user": 8593, "id": 1171322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172790", "text": "Ok, if you could really track it down it would be very very important. If this turns out to be a Rails issue, this is a big blocker and we really appreciate your efforts on reproducing it!\n", "created_at": "2011-05-16 11:21:26", "user": 9582, "id": 1172790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172793", "text": "Doh, I have closed by mistake. Reopening. :)\n", "created_at": "2011-05-16 11:22:12", "user": 9582, "id": 1172793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172858", "text": "Well what more perfect time to try and fix this than at railsconf :)\n", "created_at": "2011-05-16 11:43:49", "user": 534, "id": 1172858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172867", "text": "Certainly, I am totally available. Just find me and we can fix this together!\n", "created_at": "2011-05-16 11:46:23", "user": 9582, "id": 1172867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1174294", "text": "Think we found the issue (me and @nbibler, at it again).  \n\nWhen an asset is being served fresh by Rack-Cache the response will include a Set-Cookie header that sets a cookie string belonging to the user who requested that asset when it was stored in the cache.  So here is the scenario from the ticket above:\n\nUser 1 makes a request to asset rails.js.  There is a miss on that asset in the cache so rack-cache persists the response in the cache store with User 1's cookie string in a Set-Cookie header.\n\nUser 2 makes a request to asset rails.js.  Rack-Cache checks the cache store and finds rails.js and returns a response with the Set-Cookie header from User 1.\n\nUser 2's session cookie is now User 1's.\n\nI think this issue was probably caused by us using Sprockets to serve assets, since the request/response call travels all the way down the middleware stack when making a request on a sprocket asset.  So when the original asset response is stored, it has gone through the Session middleware, which sets the Set-Cookie header that gets persisted in the cache by Rack-Cache.\n\nThis fixes the problem, although I'm not sure this is the preferred way you guys will want to fix this:\n\nhttps://github.com/envylabs/rack-cache/commit/56a8893c26ad3d62b2974d5e8b2a6279c3f1264d\n", "created_at": "2011-05-16 16:15:51", "user": 534, "id": 1174294}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1180999", "text": "Boo. I can think of a few solutions:\n1. Add an option to rack-cache that would be an array of header names to discard before either writing to the store or serving responses. It could probably even default to `['Set-Cookie']` but not without a major revision.\n2. Put a piece of middleware directly in front or directly behind rack-cache that deletes user-specific headers like `Set-Cookie`.\n3. Add code to the Rails and/or sprockets asset processing pipeline that disables sessions.\n\nI think there's actually two issues here.\n\nYou probably don't want to Set-Cookie on asset responses to keep response sizes down. I'd say 3) makes a lot of sense for the asset case specifically, regardless of caching.\n\nSeparately, with Rails using rack-cache so heavily for page cache cases, I think it's important that there be some safeguards around not sending back `Set-Cookie` session headers to multiple clients accidentally. We'll need 1) or 2) to address that. I'm up for adding an option to rack-cache. It's a fairly frequent request and having to write custom middleware to filter headers each time is annoying. I can't think of a single case where I'd want to cache `Set-Cookie` response headers.\n", "created_at": "2011-05-16 19:52:45", "user": 404, "id": 1180999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1184847", "text": "Thanks guys for finding this out. The current behavior is funny because Rails sessions should be lazily read and written, so for the assets case, you should no Set-Cookie at all. Could you please ping me tomorrow during RailsConf? I would like to check this out and see what is making the session to be set so we can solve 3).\n\nAlso, just by curiosity, why are you using the assets pipeline on production? \n", "created_at": "2011-05-16 22:08:22", "user": 9582, "id": 1184847}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193361", "text": "Fixeeeeed: https://github.com/rails/rails/commit/6d3122445c4778ec85ce7fe66126845c4100304d\n", "created_at": "2011-05-17 21:45:01", "user": 9582, "id": 1193361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3780560", "text": "@josevalim We're having issues somewhat related to this issue. We think it's more of a problem with Rack::Cache though. In summary, we have a few resources where public cache headers are set.  These same resources are automatically picking up our Rails cookie session store too.  Because Rack::Cache will cache the `Set-Cookie` header if the response explicitly set a public cache header, we started to experience hijacked user sessions in production after Rack::Cache served cached resources with someone else's session.  I opened up an [issue over in Rack::Cache](https://github.com/rtomayko/rack-cache/issues/52) to start a discussion on the topic, but also wanted to reference that issue here for others who have similar problems.\n", "created_at": "2012-02-02 16:11:06", "user": 740, "id": 3780560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3780892", "text": "We just recently (about 2 weeks ago) had an issue with this after bumping an application up to Rails 3.1.3 (from 3.0.10).  I had to yank public caching off of HTML pages, as well... \n", "created_at": "2012-02-02 16:26:14", "user": 3775, "id": 3780892}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3780998", "text": "I should mention in our case that we were never able to determine which caching layer was the culprit (Rack::Cache, Varnish, or CloudFront - most unlikely).  So, I wouldn't say that we're prepared to point fingers at Rack::Cache for this, although, I guess the addition of Rack::Cache was probably the only major architecture/stack change in that migration.  So, it's possible.\n", "created_at": "2012-02-02 16:32:05", "user": 3775, "id": 3780998}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3783399", "text": "@nbibler For us, the only caching layer we had was Rack::Cache, and the X-Rack-Cache header showed a cache hit. Furthermore, Varnish's [default behavior](https://www.varnish-cache.org/trac/wiki/VCLExampleCacheCookies) (and by design) is to not cache any content with a Set-Cookie header. I suspect this is a common default amongst caching layers. That [wiki article](https://www.varnish-cache.org/trac/wiki/VCLExampleCacheCookies) also shows how to instead configure Varnish to still cache all public content but also strip Set-Cookie headers beforehand.\n", "created_at": "2012-02-02 18:26:52", "user": 740, "id": 3783399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3830958", "text": "Right, as I mentioned, we also have CloudFront involved... so depending on how the request was routed, it would also be caught at that level, which occurs after the Varnish level.  Sadly, CloudFront isn't intelligent enough to strip out the Set-Cookie headers on cached responses, in our experience.\n", "created_at": "2012-02-06 16:00:55", "user": 3775, "id": 3830958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3911100", "text": "@nbibler, I have a  [pull-request over on Rack::Cache](https://github.com/rtomayko/rack-cache/pull/52) that you might find useful. Please review in hopes that it helps with the problems that you were seeing a few weeks ago.\n", "created_at": "2012-02-10 18:04:42", "user": 740, "id": 3911100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/91456695", "text": "Sorry to raise this issue again, but I don't know where else to go.  I'm seeing behaviour that mirrors this bug in my Rails 4.2 app.  I've recently upgraded from 3.2 which I was running fine on for 2 years.  Since upgrading, I'm now finding issues of users becoming logged in as another user.  I'm trying to debug but it happens so sporadically it's difficult to reproduce. Basically, this happens:\n\nPerson 1 is logged in.  (I'm storing session[:user_id] = @user.id.to_s)\nPerson 2 is also logged in, on another computer in the office, however I've had other staff report that it's happened in another city, so location is not a factor.\nPerson 1 leaves computer for a period of time, returns to their desk, clicks a link in the app, and finds they are now logged in as Person 2.\n\nFYI, I'm not using Devise or similar gem, but have a simple current_user method in my ApplicationController to find @current_user ||= User.find(session[:user_id])\n\nThis seems to happen to a few people more than others, and Person 1 often becomes Person 2, not Person 3 or 4 of 5 etc. This also happens across platforms (Mac, OSX, Linux - all in Chrome)\n\nLike I said, this has ONLY started happening since upgrading to 4.2.  We ran perfectly fine in Rails 3 for 2+ years.\n\nI'm worried, and don't know where to turn.\n\nThe only other change is I've recently moved from Rackspace to hosting at Google Cloud Platform, but not sure why that would be a factor.  I thought the session was completely local.\n\nPlease help, and sorry I sound so desperate.\n", "created_at": "2015-04-10 06:52:50", "user": 10465, "id": 91456695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/91480172", "text": "@benpetro \n\n> I'm worried, and don't know where to turn.\n\nThe mailing list, or StackOverflow. Bring code.\n", "created_at": "2015-04-10 08:45:06", "user": 1034, "id": 91480172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/91563766", "text": "@benpetro the cookie storage changed between Rails 4.1 and 4.2 from marshal to json, maybe it is related? What is your cookie storage configuration?cIt should be inside `config/initializers/cookies_serializer.rb`\n", "created_at": "2015-04-10 13:48:52", "user": 47848, "id": 91563766}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/92021298", "text": "@rafaelfranca In my hast upgrading, it turns out I missed the cookies_serializer.rb initializer, thus my app wasn't specifying json as the serializer at all.  I'm crossing my fingers that this solves my problem, thank you for your tip.\n", "created_at": "2015-04-12 08:56:04", "user": 10465, "id": 92021298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/99594158", "text": "I am also having this issue in production. I'm using Rails 4.2.0. Is it correct to assume this issue is fixed in 4.2.1?\n", "created_at": "2015-05-06 20:20:28", "user": 5701375, "id": 99594158}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/99597480", "text": "I'll mention here that fixing the cookie store to json did NOT fix my\nproblem.\n\nOn Thu, 7 May 2015 6:21 am Josh Davies notifications@github.com wrote:\n\n> I am also having this issue in production. I'm using Rails 4.2.0. Is it\n> correct to assume this issue is fixed in 4.2.1?\n> \n> ‚Äî\n> Reply to this email directly or view it on GitHub\n> https://github.com/rails/rails/issues/476#issuecomment-99594158.\n", "created_at": "2015-05-06 20:27:50", "user": 10465, "id": 99597480}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/99598763", "text": "My cookie is store is already set to JSON as well.\n", "created_at": "2015-05-06 20:30:40", "user": 5701375, "id": 99598763}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/101775253", "text": "Anyone else still having this issue? I'm debating now whether to downgrade rails to 4.1\n", "created_at": "2015-05-13 18:51:42", "user": 5701375, "id": 101775253}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/101785845", "text": "Could you describe how to reproduce the issue? I fear that we don't have how to help without that.\n", "created_at": "2015-05-13 19:31:08", "user": 47848, "id": 101785845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/101828301", "text": "I don't know how to reproduce the issue. To reiterate, I have an office of\n10 people using different OS's and browsers throughout the day. At random\ntimes for no apparent reason, one person who had been using the system all\nday, will suddenly become logged in as another person in the office. This\nis because their session id suddenly switches to someone else's session id,\nthus the system thinks they are now using another session, and this loads a\ndifferent user from the database.\n\nIt is completely random and makes no sense, but it's constantly happening.\n\nPerson 1 with a session cookie, suddenly loads the session id of another\npersons cookie, on another machine in another browser. Regularly. Wtf?\nOn 14 May 2015 5:32 am, \"Rafael Mendon√ßa Fran√ßa\" notifications@github.com\nwrote:\n\n> Could you describe how to reproduce the issue? I fear that we don't have\n> how to help without that.\n> \n> ‚Äî\n> Reply to this email directly or view it on GitHub\n> https://github.com/rails/rails/issues/476#issuecomment-101785845.\n", "created_at": "2015-05-13 21:57:06", "user": 10465, "id": 101828301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/101828920", "text": "Yes, I have the exact same problem.\n", "created_at": "2015-05-13 22:00:31", "user": 5701375, "id": 101828920}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/101844087", "text": "Josh, I'm glad to know I'm not the only one.  I upgraded from Rails 3.2 to\n4.2, so I'm considering downgrading to 4.1 if you say you did not have this\nproblem in 4.1\n\nOn Thu, 14 May 2015 at 08:01 Josh Davies notifications@github.com wrote:\n\n> Yes, I have the exact same problem.\n> \n> ‚Äî\n> Reply to this email directly or view it on GitHub\n> https://github.com/rails/rails/issues/476#issuecomment-101828920.\n", "created_at": "2015-05-13 23:07:40", "user": 10465, "id": 101844087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/101844886", "text": "well this particular app I started with 4.2 but I do have other apps using 4.0 and 4.1 where I have not experienced this problem. \n", "created_at": "2015-05-13 23:10:22", "user": 5701375, "id": 101844886}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/101865011", "text": "@benpetro Please let me know if you downgrade and it fixes the issue.  Thanks!!\n", "created_at": "2015-05-14 00:31:19", "user": 5701375, "id": 101865011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/112887088", "text": "@benpetro I'm curious what your current_user method looks like?\n", "created_at": "2015-06-17 17:38:20", "user": 5701375, "id": 112887088}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/115298429", "text": "I also migrated a rails 3.2 app to rails 4.2 (with devise 3.4.1) in the last month or two.\n\nI'm getting the same user session switching reports from people but I have been unable to reproduce the issue myself.\n\nIt looks like none of the asset requests contain a Set-Cookie header, which make me think it's not exactly the same issue that @ericallam described.\n", "created_at": "2015-06-25 15:41:02", "user": 128298, "id": 115298429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/181410470", "text": "Any chance that this problem is only showing up in production environments because of the application server you're using?  \n\nPhusion Passenger's turbocaching feature (which is enabled by default) can get you into trouble if you are not careful.  Passenger 5 includes an HTTP caching layer.\n\nIf you are using Passenger, take care that you ensure all of your headers are being sent as \"cache-control: private.\"  By default, Rails sends them as 'private' - but if you modify them, like we did, that's where you can get into trouble.\n\nI asked about this issue on Stack Overflow, and someone pointed out to me that turbocaching was the likely culprit.\n\nhttp://stackoverflow.com/questions/35234161/unintentional-session-hijacking-in-rails-4-2-4-devise-warden-phusion-passen\n\nHope this helps.\n", "created_at": "2016-02-08 14:53:57", "user": 5683133, "id": 181410470}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/230673936", "text": "Having this bug with redmine 3.2.3. also. Disabling passenger turbocache didn't help.\n", "created_at": "2016-07-06 05:24:38", "user": 930971, "id": 230673936}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/245266020", "text": "This bug is still happening within Redmine 3.3.0.   We are using SSL (TLS) and PKI to do log ins.  There seems to be an issue with Rack fetching the correct session and possibly the cookie store.  It seems like it usually takes three people to login in and then the forth person ends up logged in as on of the previous three. \n\nThe scenario is like above:\nuser1 attempts login and logs in as user1\nuser2 attempts login and logs in as user2\nuser3 attempts login and logs in as user3\nuser4 attempts login and logs in as one of the other users....\n\nInteresting observation:\nif you delete the cookie from user4's browser, and reload the page, user4 will be logged in as another different user.  Delete the cookie again and reload, you get logged in as yet another user.  This will continue until you cycle through basically all of the other users.  User4 will eventually get user4 login. \n", "created_at": "2016-09-07 12:33:07", "user": 22052086, "id": 245266020}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Running into an issue where I have some controller namespacing that goes deeper than 1 level.  My best attempt at reproducing is modifying the params_wrapper_test.rb to the following: https://gist.github.com/963911\n\nThe error I get is: ArgumentError: NamespacedParamsWrapperTest::Admin is not missing constant User!\n", "labels": [], "number": 477, "updated_at": "2011-05-10 22:32:56", "user": 4595, "closed_at": "2011-05-10 22:09:22", "id": 874915, "title": "Wrap Parameters Fails With Namespacing", "url": "https://api.github.com/repos/rails/rails/issues/477", "created_at": "2011-05-10 04:53:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129629", "text": "Thanks for the bug report! Just for documentation, can you post an example of your controller?\n", "created_at": "2011-05-10 08:02:01", "user": 9582, "id": 1129629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129970", "text": "@sikachu, could you please help debugging and pinpointing the problem?\n", "created_at": "2011-05-10 09:43:41", "user": 9582, "id": 1129970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1130462", "text": "Sure, I'm diving in to this. I think @dhh has found this error as well, and that's why I was trying to convince you to do the name calculation as late as possible.\n\nAnyhow, I'll have a look and come up with patch asap.\n", "created_at": "2011-05-10 11:54:55", "user": 4912, "id": 1130462}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1130529", "text": "@sikachu DHH issue was another one and it has been solved. This issue probably wouldn't exist if the name calculation was at runtime, but that would be really slow. If you can at least reproduce the error in Rails, it can help you fix it. Notice you will probably need to create the test case in railties/test/\\* as it requires reloading.\n", "created_at": "2011-05-10 12:10:41", "user": 9582, "id": 1130529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133581", "text": "A few notes for you: it doesn't seem that the contents of the controller matters -- deleting all content still causes the error.  My app is configured the following way (in separate files/folders though):\n\n  app/controllers/application_controller.rb\n  app/controllers/admin/admin_controller.rb\n  app/controllers/admin/account/account_controller.rb\n\n``` ruby\nclass ApplicationController < ActionController::Base\nend\nmodule Admin\n  class AdminController < ApplicationController\n  end\n  module Account\n    class AccountController < Admin::AdminController\n    end\n  end\nend\n```\n\nRunning `rails server` in development works fine until I try and browse to an action served by Admin::Account::AccountController.  Running tests it raises the exception immediately and tests do not run.\n\nIf I comment/remove `ActionController::Base.wrap_parameters :format => [:json]` from the initializer, the app works fine and all tests pass (as it did in 3.0.7).\n", "created_at": "2011-05-10 21:18:23", "user": 4595, "id": 1133581}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133671", "text": "I believe the issue is because you have Admin::Account::AccountController causing AccountController to automatically use Admin::Account to wrap its parameters. Now AccountController keeps a reference to its own namespace making Rails go crazy.\n", "created_at": "2011-05-10 21:31:10", "user": 9582, "id": 1133671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133853", "text": "Actually @bensie, the gist you have produced was fine to reproduce the error even without reloading, thanks! Without a railtie test, we cannot ensure it works _for real_, but I have pushed a fix. Please test your app on Rails master and let us know if it worked!\n", "created_at": "2011-05-10 22:08:55", "user": 9582, "id": 1133853}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133969", "text": "That worked!  Nicely done.\n", "created_at": "2011-05-10 22:32:56", "user": 4595, "id": 1133969}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm not sure if it's intentional or not, but it's definitely quite confusing:\n\n```\n>> Goal.new(nil)\n=> #<Goal id: nil>\n>> Goal.first.update_attributes(nil)\nNoMethodError: undefined method `stringify_keys' for nil:NilClass\n>> Goal.first.invitations.build(nil)\n=> nil\n>> Goal.first.invitations.new(nil)\n=> #<Goal::Invitation id: nil, goal_id: 1>\n```\n\nRuby 1.9.2p180, Rails 3.1.0.beta1.\n", "labels": [], "number": 478, "updated_at": "2011-05-10 08:36:07", "user": 10659, "closed_at": "2011-05-10 08:30:57", "id": 875379, "title": "Mass assignment weirdness", "url": "https://api.github.com/repos/rails/rails/issues/478", "created_at": "2011-05-10 08:16:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129683", "text": "Could you quickly check if \"Goal.first.update_attributes(nil)\" works on Rails 3.0?\n", "created_at": "2011-05-10 08:17:44", "user": 9582, "id": 1129683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129701", "text": "```\n>> Goal.new(nil)\n=> #<Goal id: nil>\n>> Goal.first.update_attributes(nil)\n=> true\n>> Goal.first.invitations.build(nil)\n=> #<Goal::Invitation id: nil, goal_id: 1>\n>> Goal.first.invitations.new(nil)\n=> #<Goal::Invitation id: nil, goal_id: 1>\n```\n\nRails 3.0.7.\n", "created_at": "2011-05-10 08:20:41", "user": 10659, "id": 1129701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129714", "text": "Sweet, I am going to fix this in a couple minutes.\n", "created_at": "2011-05-10 08:22:37", "user": 9582, "id": 1129714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129722", "text": "There's one more glitch:\n\n```\n>> Goal.first.invitations.build\nWARNING: Can't mass-assign protected attributes: goal_id\n=> #<Goal::Invitation id: nil, goal_id: nil>\n```\n\nIn 3.1.0.beta1.\n", "created_at": "2011-05-10 08:24:17", "user": 10659, "id": 1129722}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129724", "text": "```\n>> Goal.first.invitations.build\n=> #<Goal::Invitation id: nil, goal_id: 1>\n```\n\nRails 3.0.7.\n", "created_at": "2011-05-10 08:25:34", "user": 10659, "id": 1129724}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129738", "text": "@qoobaa can you please open a new issue for the other glitch? Thanks!\n", "created_at": "2011-05-10 08:29:41", "user": 9582, "id": 1129738}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1129752", "text": "Done => #479\n", "created_at": "2011-05-10 08:36:07", "user": 10659, "id": 1129752}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Rails 3.1.0.beta1:\n\n```\n>> Goal.first.invitations.build\nWARNING: Can't mass-assign protected attributes: goal_id\n=> #<Goal::Invitation id: nil, goal_id: nil>\n```\n\nRails 3.0.7.\n\n```\n>> Goal.first.invitations.build\n=> #<Goal::Invitation id: nil, goal_id: 1>\n```\n", "labels": [], "number": 479, "updated_at": "2011-05-10 09:20:32", "user": 10659, "closed_at": "2011-05-10 09:18:42", "id": 875426, "title": "Mass assignment protection prevents associating new records", "url": "https://api.github.com/repos/rails/rails/issues/479", "created_at": "2011-05-10 08:33:57", "comments": [], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "3.1.0.beta1:\n\n```\n>> Goal.first.invitations.build(nil)\n=> nil\n>> Goal.first.invitations.new(nil)\n=> #<Goal::Invitation id: nil, goal_id: 1>\n```\n\n3.0.7:\n\n```\n>> Goal.first.invitations.build(nil)\n=> #<Goal::Invitation id: nil, goal_id: 1>\n>> Goal.first.invitations.new(nil)\n=> #<Goal::Invitation id: nil, goal_id: 1>\n```\n\nMoreover \"build\" does not set goal_id attribute properly even if hash given (#479).\n", "labels": [], "number": 480, "updated_at": "2011-05-10 09:20:53", "user": 10659, "closed_at": "2011-05-10 09:18:42", "id": 875497, "title": "Mass assignment weirdness pt 2", "url": "https://api.github.com/repos/rails/rails/issues/480", "created_at": "2011-05-10 08:48:21", "comments": [], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "After Jose's patches everything seems to work fine, except of this little warning:\n\n```\n>> Goal.first.invitations.build(nil)\nWARNING: Can't mass-assign protected attributes: goal_id\n=> #<Goal::Invitation id: nil, goal_id: 1>\n```\n", "labels": [], "number": 481, "updated_at": "2012-01-26 08:55:13", "user": 10659, "closed_at": "2011-05-12 22:29:57", "id": 875605, "title": "Mass assignment warning when building associated model", "url": "https://api.github.com/repos/rails/rails/issues/481", "created_at": "2011-05-10 09:27:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1145401", "text": "Jon, this also applies to has_one associations:\n\n```\nclass Account < ActiveRecord::Base\n  belongs_to :company\nend\n\nclass Company < ActiveRecord::Base\n  has_one :account\nend\n\n>> Company.new.build_account\nWARNING: Can't mass-assign protected attributes: company_id\n=> #<Account id: nil, company_id: nil>\n```\n", "created_at": "2011-05-12 09:02:16", "user": 6321, "id": 1145401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1145911", "text": "Looks like the set_owner_attributes method ensures that the keys are set anyway but you do get the warning.\n", "created_at": "2011-05-12 11:31:44", "user": 6321, "id": 1145911}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1147719", "text": "Looked at doing the same in SingularAssociation but come up against another bug. The AssociationScope for belongs_to includes `:id`, which is what you need for a find but when you're replacing the record via model.create_assoc_name the old `:id` gets included in `scope_for_create` resulting in an error when AR tries to create a record with the same primary key. Previously the default attribute protection for `:id` would prevent any errors but switching to `:without_protection => true` means that it gets assigned from the scope. The easiest fix for this is to remove the primary key field from the scope_for_create hash.\n", "created_at": "2011-05-12 16:42:54", "user": 6321, "id": 1147719}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1148956", "text": "@pixeltrix: Good catch. I am happy to have a look at this when I get time (hopefully in the next few days), but if you come up with a fix before me then that's cool too :)\n", "created_at": "2011-05-12 20:09:23", "user": 1979, "id": 1148956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1151940", "text": "I had pretty much the same fix ready to go but one thing I was undecided on was whether the removing of the primary key should be done in `scope_for_create` - is there a situation where it's ever right for it to be there?\n", "created_at": "2011-05-13 09:31:50", "user": 6321, "id": 1151940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152813", "text": "`scope_for_create` is made in part from the `where_values_hash`, which comes from the conditions on the scope. So we'd need to remove the primary key from the actual scope, which would be bad, because then we wouldn't get the right record :)\n", "created_at": "2011-05-13 13:30:53", "user": 1979, "id": 1152813}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152902", "text": "You could do it here: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation.rb#L400\n\nThat would leave the scope okay.\n", "created_at": "2011-05-13 13:47:37", "user": 6321, "id": 1152902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1154722", "text": "I don't think we should be changing anything inside `Relation` itself. There could be a situation where somebody would want the primary key in the `scope_for_create`. So it's a case of ignoring it within the associations code, and I think the current place is the right place to do that.\n", "created_at": "2011-05-13 16:37:40", "user": 1979, "id": 1154722}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3665991", "text": "Now after release of rails 3.2, an exception can be thrown after mass assignment violation.\nSo this becomes an issue again.\n\nUPDATE: Found solving issue: https://github.com/rails/rails/issues/4051\n", "created_at": "2012-01-26 08:50:24", "user": 172760, "id": 3665991}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fix a couple of typos in IM documentation\n", "labels": [], "number": 482, "updated_at": "2014-07-03 04:03:59", "user": 146214, "closed_at": "2011-05-10 11:06:17", "id": 875820, "title": "Fix typos in IM documentation", "url": "https://api.github.com/repos/rails/rails/issues/482", "created_at": "2011-05-10 10:45:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ActiveRecord::SessionStore uses mass assignment, cf. https://github.com/rails/rails/blob/master/activerecord/lib/active_record/session_store.rb#L216 & https://github.com/rails/rails/blob/master/activerecord/lib/active_record/session_store.rb#L343\n\nTherefore when using global whitelisting, AR::SS does not work at all (depending of your RDBMS you may get an ActiveRecord::StatementInvalid exception because of NULL constraint on session_id).\n\nThis problem exists in Rails 2, Rails 3 and Rails 3.1.\nBut as Rails 3.1 got a new feature to easily enable global whitelisting (config.active_record.whitelist_attributes = true), I think we should fix AR::SS to work by default when using this feature.\n", "labels": [], "number": 483, "updated_at": "2011-05-10 14:24:07", "user": 12682, "closed_at": "2011-05-10 14:23:42", "id": 876249, "title": "ActiveRecord::SessionStore fails when using whitelist attributes", "url": "https://api.github.com/repos/rails/rails/issues/483", "created_at": "2011-05-10 12:58:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1130714", "text": "Agreed. Could you please provide a pull request with tests? :D\n", "created_at": "2011-05-10 13:01:06", "user": 9582, "id": 1130714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1130810", "text": "Hi @josevalim, I really tried to create at least a failing test case but my knowledge of the Rails tests suite is too basic to handle this :).\n\nIn this case, I don't know which is the best way to enable/disable this global setting for a single test case...\n", "created_at": "2011-05-10 13:18:45", "user": 12682, "id": 1130810}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1130857", "text": "This issue is indeed very hard to reproduce if you want to consider the full stack but I don't think we need that. I think we can simply declare attr_accessible with all the appropriate fields in ActiveRecord::SessionStore and ensure all tests pass after such changes. What do you think?\n", "created_at": "2011-05-10 13:29:18", "user": 9582, "id": 1130857}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1130869", "text": "@josevalim, OK, thanks, I'll test that.\n", "created_at": "2011-05-10 13:31:39", "user": 12682, "id": 1130869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131169", "text": "Merged, thanks!\n", "created_at": "2011-05-10 14:24:07", "user": 9582, "id": 1131169}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When using global whitelisting, AR::SS does not work at all (depending of your RDBMS you may get an ActiveRecord::StatementInvalid exception because of NULL constraint on session_id).\n\nThis problem exists in Rails 2, Rails 3 and Rails 3.1.\n\nBut as Rails 3.1 got a new feature to easily enable global whitelisting (config.active_record.whitelist_attributes = true), I think we should fix AR::SS to work by default when using this feature.\n", "labels": [], "number": 484, "updated_at": "2014-07-03 04:04:04", "user": 12682, "closed_at": "2011-05-10 14:23:33", "id": 876620, "title": "Puts ActiveRecord::SessionStore attributes in white list, fixes #483", "url": "https://api.github.com/repos/rails/rails/issues/484", "created_at": "2011-05-10 14:19:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The following is partially related to https://github.com/rails/rails/issues/398 as it also covers a performance issue in PostgreSQLAdapter related to a huge amount of method_missing calls. \n\nThe method PostgreSQLAdapter#select looks like this in Rails 3.0.x:\n\n``` ruby\ndef select(sql, name = nil)\n  fields, rows = select_raw(sql, name)\n  rows.map do |row|\n    Hash[*fields.zip(row).flatten]\n  end\nend\n```\n\nThis is very a roundabout way of doing the conversion from an array to a hash and it can lead to a memory leak - fields.zip(row) return an array of the form [[\"column_x\", 1], [\"column_y\", 2], ...] which can be directly passed as a parameter to Hash.[], instead of first doing flatten and then using the splat. I suggest it is thus changed to:\n\n``` ruby\ndef select(sql, name = nil)\n  fields, rows = select_raw(sql, name)\n  rows.map do |row|\n    Hash[fields.zip(row)]\n  end\nend\n```\n\nThis version is obviously faster to some degree, but under Ruby 1.9.2 the difference is much larger than one would maybe expect. The reason for this is that the former version causes a surprising side-effect - it calls to_ary on a nil object, which triggers method_missing and all this stuff from whiny_nil.rb and considering how frequently all this happens, it results in an additional major performance penalty. If I augment method_missing in nil_class.rb to display every case of method_missing, I get something like this:\n\n``` ruby\nruby-1.9.2-p180 :005 > Hash[*[[1,2],[3,4]].flatten]\nnil to_ary []\n/home/ruby/.rvm/gems/ruby-1.9.2-p180@owl/gems/activesupport-3.0.6/lib/active_support/whiny_nil.rb:47:in `method_missing'\n/home/ruby/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/irb/ruby-lex.rb:800:in `identify_identifier'\n/home/ruby/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/irb/ruby-lex.rb:731:in `block in lex_int2'\n/home/ruby/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/irb/slex.rb:236:in `call'\n/home/ruby/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/irb/slex.rb:236:in `match_io'\n/home/ruby/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/irb/slex.rb:75:in `match'\n...\n```\n\nMeaning that to_ary was called on nil with no arguments. I am not yet convinced how this behavior arises and why, but regardless of whether this is yet another bug in something, I think PostgreSQLAdapter should be fixed in the way suggested.\n", "labels": [], "number": 485, "updated_at": "2011-05-10 15:50:25", "user": 26233, "closed_at": "2011-05-10 15:50:22", "id": 876878, "title": "Severe performance issue in Rails 3.0.x PostgreSQLAdapter#select under Ruby 1.9.2", "url": "https://api.github.com/repos/rails/rails/issues/485", "created_at": "2011-05-10 15:09:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131547", "text": "The cause for it being much much slower is because whiny_nil in active support defines method_missing on NilClass. We had other regressions related to it in other areas. @tenderlove, I think removing the splat and flatten works fine, wdyt?\n", "created_at": "2011-05-10 15:25:02", "user": 9582, "id": 1131547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131623", "text": "Yes, I understand this part of this problem, but what I was wondering about is why using the splat on a 100% normal array causes a call to nil.to_ary - this makes the problem a bit distinct. If I actually look at the line 800 in ruby-lex.rb (from the above stack trace), it's the following line:\n\n``` ruby\ntoken_c, *trans = TkReading2Token[token]\n```\n\nWhat I think this means, is that using the splat in Ruby 1.9.2 at this point implies having a call to method_missing. So if you use the splat in any method that's very frequently used, it will cause a performance regression as well.\n", "created_at": "2011-05-10 15:34:59", "user": 26233, "id": 1131623}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131658", "text": "@sztywny could you please send a pull request with the change you proposed above? :) Due to all github awesomeness, you can even use the \"Fork and Edit\" button!\n", "created_at": "2011-05-10 15:39:22", "user": 9582, "id": 1131658}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131732", "text": "Ya, removing the splat / flatten is fine.  I think it's only required for 1.8.6 support anyway. I've removed it from 3-0-stable.\n", "created_at": "2011-05-10 15:50:25", "user": 3124, "id": 1131732}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When upgrading from Rails 3.0.7 to Rails 3.1.0.beta1, I encountered an error on a eager load association:\n\n```\nclass Profile\n  has_many :responses, :include => :question\nend\n\nProfile.first.responses\n\nProfile Load (0.5ms)  SELECT \"profiles\".* FROM \"profiles\" ORDER BY last_name ASC LIMIT 1\nResponse Load (0.6ms)  SELECT \"responses\".* FROM \"responses\" WHERE \"responses\".\"profile_id\" = 203\nQuestion Load (0.6ms)  SELECT \"questions\".* FROM \"questions\" WHERE \"questions\".\"id\" IN (67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 84, 85, 89, 90, 92, 93, 95, 108, 109, 115, 121, 122, 128, 129, 131, 123, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150)\nArgumentError: true was not recognised for preload\n```\n\nThis is my first bug report - let me know if I did it wrong.\n", "labels": [], "number": 486, "updated_at": "2011-05-10 22:54:53", "user": 97163, "closed_at": "2011-05-10 15:58:06", "id": 877112, "title": "ArgumentError: true was not recognised for preload ", "url": "https://api.github.com/repos/rails/rails/issues/486", "created_at": "2011-05-10 15:51:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131773", "text": "Sorry, turns out this was causing the problem:\n\n```\nclass Response  < ActiveRecord::Base\n  belongs_to :question, :counter_cache => true, :include => true\nend\n```\n\ntaking out `:include => true` solved the problem\n", "created_at": "2011-05-10 15:58:06", "user": 97163, "id": 1131773}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fix case in asset generator descriptions\n", "labels": [], "number": 487, "updated_at": "2014-07-03 04:04:11", "user": 146214, "closed_at": "2011-05-10 16:01:01", "id": 877123, "title": "s/javascript/JavaScript", "url": "https://api.github.com/repos/rails/rails/issues/487", "created_at": "2011-05-10 15:52:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See:\n\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/app/templates/app/assets/javascripts/application.js.tt\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/app/templates/app/assets/stylesheets/application.css\n", "labels": [], "number": 488, "updated_at": "2011-05-10 22:53:03", "user": 9582, "closed_at": "2011-05-10 22:53:02", "id": 877143, "title": "Fix .js and .css templates generated with the application", "url": "https://api.github.com/repos/rails/rails/issues/488", "created_at": "2011-05-10 15:57:20", "comments": [], "assignees": [2741, 2741], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Is there any reason that the default `.gitignore` file that is created on generation of a new rails app shouldn't include the `.sass-cache` directory?\n\nPatch file here: http://cl.ly/2U2a0v0l1m3r3u2M2F36\n", "labels": [], "number": 489, "updated_at": "2011-05-10 22:51:39", "user": 202880, "closed_at": "2011-05-10 22:51:39", "id": 877155, "title": ".sass-cache in default .gitignore file", "url": "https://api.github.com/repos/rails/rails/issues/489", "created_at": "2011-05-10 15:59:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133470", "text": "Totally agreed. Adding `.sass-cache` to `.gitignore` is always the first thing I do after starting a new Rails project now.\n", "created_at": "2011-05-10 20:55:46", "user": 224895, "id": 1133470}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133489", "text": "+1 But pull request > issue with patch imo\n", "created_at": "2011-05-10 21:00:47", "user": 294954, "id": 1133489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1134038", "text": "See #501\n", "created_at": "2011-05-10 22:51:38", "user": 9582, "id": 1134038}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Replace the LH ticket url with GitHub url for filing issues\n", "labels": [], "number": 490, "updated_at": "2014-07-03 04:04:18", "user": 146214, "closed_at": "2011-05-10 17:58:19", "id": 877299, "title": "Replace LH with GitHub url for filing issues", "url": "https://api.github.com/repos/rails/rails/issues/490", "created_at": "2011-05-10 16:26:34", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @fxn\n", "labels": [], "number": 491, "updated_at": "2014-07-03 04:04:20", "user": 3948, "closed_at": "2011-05-12 00:01:42", "id": 877322, "title": "Some readme fixes as required. ", "url": "https://api.github.com/repos/rails/rails/issues/491", "created_at": "2011-05-10 16:31:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131990", "text": "Coincidence?! I actually did the change in one of those files a little while ago (which is merged). And one of the other changes is in a pending pull request! :-)\n", "created_at": "2011-05-10 16:36:11", "user": 146214, "id": 1131990}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1131993", "text": "Awesome..!!!\n", "created_at": "2011-05-10 16:37:44", "user": 3948, "id": 1131993}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "(Rebased version of https://github.com/rails/rails/pull/200#commits-pushed-7448ec0)\n\nThe way ActiveModel computes the type of serializable methods and attributes, any that return nil will be described as being YAML. \n\nThis produces XML like:\n\n```\n<person>\n  <name>John Doe</name>\n  <preferences type=\"yaml\" nil=\"true\"></preferences>\n</person>\n```\n\nHowever, in many cases, the 'type=\"yaml\"' part is unnecessary, and potentially misleading.\n\nWith this patch, the equivalent to the above XML would be:\n\n```\n<person>\n  <name>John Doe</name>\n  <preferences nil=\"true\"></preferences>\n</person>\n```\n", "labels": [], "number": 492, "updated_at": "2014-06-16 22:53:18", "user": 2077, "closed_at": "2011-05-10 16:41:35", "id": 877351, "title": "Serialized methods that return nil should not be considered YAML", "url": "https://api.github.com/repos/rails/rails/issues/492", "created_at": "2011-05-10 16:39:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 493, "updated_at": "2014-07-03 04:04:27", "user": 160941, "closed_at": "2011-05-10 17:05:01", "id": 877440, "title": "Merging 3.0.x CHANGELOGs", "url": "https://api.github.com/repos/rails/rails/issues/493", "created_at": "2011-05-10 17:03:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1132186", "text": "Neat!\n", "created_at": "2011-05-10 17:11:30", "user": 146214, "id": 1132186}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use all in place of find(:all) in the rails runner help message\n", "labels": [], "number": 494, "updated_at": "2014-07-03 04:04:33", "user": 146214, "closed_at": "2011-05-10 17:13:30", "id": 877467, "title": "Use all in place of find(:all)", "url": "https://api.github.com/repos/rails/rails/issues/494", "created_at": "2011-05-10 17:09:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "minor cleaning\n", "labels": [], "number": 495, "updated_at": "2014-06-25 00:43:37", "user": 111473, "closed_at": "2011-05-10 17:57:22", "id": 877519, "title": "minor cleaning", "url": "https://api.github.com/repos/rails/rails/issues/495", "created_at": "2011-05-10 17:23:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "cleaned\n", "labels": [], "number": 496, "updated_at": "2014-07-03 04:04:38", "user": 134173, "closed_at": "2011-05-10 18:25:48", "id": 877646, "title": "Gemfile is even more cleaner now.", "url": "https://api.github.com/repos/rails/rails/issues/496", "created_at": "2011-05-10 17:53:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1132466", "text": "-1 What's the point of doing this?\n", "created_at": "2011-05-10 18:01:11", "user": 294954, "id": 1132466}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1132562", "text": "@neerajkumar, thanks for your pull request but I think in this case, cleaner is completely subjective. I, for example, only use double quotes unless a single quote is explicitly required. YMMV.\n", "created_at": "2011-05-10 18:25:48", "user": 9582, "id": 1132562}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Encoding::UndefinedConversionError killed rails runner\n\napplication‚Äôs environment\n\n<pre>\nthin 1.2.11 codename Bat-Shit Crazy\nunicorn v3.6.2\npassenger 3.0.7\n:except => WEBrick\n\nRuby 1.9.2-p180\nrails 3.1.0.beta1\n</pre>\n\ntest.rb\n\n<pre>\n# coding: utf-8\n# test.rb\nrequire 'rubygems'\nrequire 'socket'\n\nhost = 'localhost'\nport = 3000\npath = \"/ÊîªÂáª\"\n\n# This is the HTTP request we send\nrequest = \"GET #{path} HTTP/1.0\\r\\n\\r\\n\"\n\nsocket = TCPSocket.open(host, port)\nsocket.print(request)               # Send request\nresponse = socket.read              # Read complete response\n# Split response at first blank line into headers and body\nheaders,body = response.split(\"\\r\\n\\r\\n\", 2)\nprint body                          # And display it\n</pre>\n\n\nunicorn.stderr.log\n\n<pre>\nI, [2011-05-11T02:06:06.616301 #28461]  INFO -- : listening on addr=0.0.0.0:3000 fd=4\nI, [2011-05-11T02:06:06.616907 #28461]  INFO -- : Refreshing Gem list\nI, [2011-05-11T02:06:16.147155 #28483]  INFO -- : worker=1 ready\nI, [2011-05-11T02:06:16.154233 #28482]  INFO -- : worker=0 ready\nI, [2011-05-11T02:06:16.155864 #28461]  INFO -- : master process ready\nI, [2011-05-11T02:06:16.168326 #28484]  INFO -- : worker=2 ready\nE, [2011-05-11T02:06:27.502119 #28482] ERROR -- : Read error: #<Encoding::UndefinedConversionError: \"\\xE6\" from ASCII-8BIT to UTF-8>\nE, [2011-05-11T02:06:27.502245 #28482] ERROR -- : /Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/buffered_logger.rb:104:in `write'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/buffered_logger.rb:104:in `block (2 levels) in flush'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/buffered_logger.rb:103:in `each'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/buffered_logger.rb:103:in `block in flush'\n<internal:prelude>:10:in `synchronize'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/buffered_logger.rb:102:in `flush'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/log_subscriber.rb:84:in `block in flush_all!'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/log_subscriber.rb:84:in `each'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/log_subscriber.rb:84:in `flush_all!'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.beta1/lib/rails/rack/logger.rb:29:in `after_dispatch'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.beta1/lib/rails/rack/logger.rb:15:in `call'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.0.beta/lib/rack/runtime.rb:17:in `call'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.0.beta/lib/rack/lock.rb:34:in `call'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/rack-cache-1.0.1/lib/rack/cache/context.rb:132:in `forward'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/rack-cache-1.0.1/lib/rack/cache/context.rb:243:in `fetch'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/rack-cache-1.0.1/lib/rack/cache/context.rb:181:in `lookup'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/rack-cache-1.0.1/lib/rack/cache/context.rb:65:in `call!'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/rack-cache-1.0.1/lib/rack/cache/context.rb:50:in `call'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.beta1/lib/rails/engine.rb:438:in `call'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.beta1/lib/rails/railtie/configurable.rb:28:in `method_missing'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:545:in `process_client'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:623:in `block in worker_loop'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:621:in `each'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:621:in `worker_loop'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:509:in `block (2 levels) in spawn_missing_workers'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:507:in `fork'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:507:in `block in spawn_missing_workers'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:503:in `each'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:503:in `spawn_missing_workers'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:516:in `maintain_worker_count'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn/http_server.rb:166:in `start'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/lib/unicorn.rb:30:in `run'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/gems/unicorn-3.6.2/bin/unicorn_rails:208:in `<top (required)>'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/bin/unicorn_rails:19:in `load'\n/Users/Psli/.rvm/gems/ruby-1.9.2-p180/bin/unicorn_rails:19:in `<main>'\n</pre>\n", "labels": [], "number": 497, "updated_at": "2012-02-03 23:54:27", "user": 43417, "closed_at": "2011-05-10 20:23:27", "id": 877772, "title": "Encoding::UndefinedConversionError killed rails runner", "url": "https://api.github.com/repos/rails/rails/issues/497", "created_at": "2011-05-10 18:26:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1132668", "text": "I believe this happens for the same reason as defined here:\n\nhttps://github.com/rails/rails/commit/e28f9ad9df6c3b1a51db7ced3af781d114486aec\n", "created_at": "2011-05-10 18:47:19", "user": 9582, "id": 1132668}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3806538", "text": "I seem to have rediscovered this bug and it seems to have with logging in rails 3.2.1 and ruby 1.9.3p0. In development mode (and test) when I try to log anything at all it tells me:\n\n```\n1) Api POST /register can create a user\n     Failure/Error: p user\n     Encoding::UndefinedConversionError:\n       U+00E4 from UTF-8 to US-ASCII\n```\n\nThis is because I was trying to debug a problem so I added\n\n``` ruby\n# test.rb\nconfig.logger = Logger.new(STDOUT)\n```\n\nWas working great until I added the logger line for test now every post I make crashes the server and I guess it's because of something really silly because it was working fine in rails 3.1 for sure and possibly 3.2. Development mode is working until something with **√Ö√Ñ√ñ** in it needs to be posted to the server and logged.\n\nThe real kicker is that it works in production mode and it works if I run in debug mode.\n", "created_at": "2012-02-03 23:48:38", "user": 106795, "id": 3806538}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3806599", "text": "I just found the root cause of the problem. A while ago I had troubles installing a gem and added forced encoding in my Gemfile.\n\n``` ruby\n#Gemfile\nif RUBY_VERSION =~ /1.9/\n  Encoding.default_external = Encoding::UTF_8\n  Encoding.default_internal = Encoding::UTF_8\nend\n```\n\nThat seems to cause problems with the logging.\n", "created_at": "2012-02-03 23:54:27", "user": 106795, "id": 3806599}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "even looks more clean\n", "labels": [], "number": 498, "updated_at": "2014-07-03 04:04:45", "user": 111473, "closed_at": "2011-05-10 19:12:25", "id": 877881, "title": "minor cleaning with new api method all", "url": "https://api.github.com/repos/rails/rails/issues/498", "created_at": "2011-05-10 18:51:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1132816", "text": "I have merged this pull request but I don't think we should change tests from .find(:all) to .all. This will only break existing pull requests and patches in LH with no obvious gain.\n", "created_at": "2011-05-10 19:12:02", "user": 9582, "id": 1132816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1132818", "text": "In any case, thanks for your contributions!\n", "created_at": "2011-05-10 19:12:35", "user": 9582, "id": 1132818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1132827", "text": "thanks!\n", "created_at": "2011-05-10 19:13:45", "user": 111473, "id": 1132827}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Impact guides with this change: https://github.com/rails/rails/commit/558334a899c15d6af94aa5c8f594c8de27384b95\n", "labels": [], "number": 499, "updated_at": "2014-07-03 04:04:48", "user": 83449, "closed_at": "2011-05-10 20:09:32", "id": 878184, "title": "impact guides with no CSV fixture support", "url": "https://api.github.com/repos/rails/rails/issues/499", "created_at": "2011-05-10 19:56:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133224", "text": "Perhaps I'm mistaken (/cc @fxn ) but are we still committing documentation changes to https://github.com/lifo/docrails and then they get pulled into rails core or are we now short-circuiting that process? Just want to know if the process has changed?\n", "created_at": "2011-05-10 20:11:35", "user": 762, "id": 1133224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1133257", "text": "I believe it is because those changes are not in docrails yet. But you have a point, i should leave those pull requests for @fxn to apply.\n", "created_at": "2011-05-10 20:17:12", "user": 9582, "id": 1133257}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 500, "updated_at": "2014-06-26 15:39:54", "user": 20987, "closed_at": "2011-10-09 03:29:57", "id": 878828, "title": "Use quotes for command substitution", "url": "https://api.github.com/repos/rails/rails/issues/500", "created_at": "2011-05-10 22:44:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242952", "text": "Cool ! Thank you  Cyril ! \n", "created_at": "2011-05-26 15:11:09", "user": 487201, "id": 1242952}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Now that Sass is used by default in new apps is a good idea add .sass-cache/ to .gitignore by default\n", "labels": [], "number": 501, "updated_at": "2014-06-13 00:32:00", "user": 160941, "closed_at": "2011-05-10 22:52:14", "id": 879023, "title": "Adding .sass-cache to gitignore template", "url": "https://api.github.com/repos/rails/rails/issues/501", "created_at": "2011-05-10 22:48:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The default should be set in the params_wrapper.rb initializer in order to be backward compatible.\n", "labels": [], "number": 502, "updated_at": "2011-05-18 13:23:22", "user": 9582, "closed_at": "2011-05-18 13:23:22", "id": 879380, "title": "ARes should now default to JSON (as scaffold changed)", "url": "https://api.github.com/repos/rails/rails/issues/502", "created_at": "2011-05-10 23:02:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1134092", "text": "It seems likely that that is the root cause for this problem:\n\nhttp://intertwingly.net/projects/AWDwR4/checkdepot/section-22.html\n", "created_at": "2011-05-10 23:06:06", "user": 4815, "id": 1134092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142597", "text": "Josh K is working on this.\n", "created_at": "2011-05-11 19:44:19", "user": 2741, "id": 1142597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1196866", "text": "Done by @joshk! <3 <3 <3\n", "created_at": "2011-05-18 13:23:22", "user": 9582, "id": 1196866}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "changed all the places when we had <pre><code>something=>other</code></pre> to <pre><code>something => other</code></pre>\n", "labels": [], "number": 503, "updated_at": "2014-06-22 04:51:15", "user": 83449, "closed_at": "2011-05-11 06:26:19", "id": 880026, "title": "Follow code conventions on some tests", "url": "https://api.github.com/repos/rails/rails/issues/503", "created_at": "2011-05-11 00:02:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1135903", "text": "I have merged this one, but I am not very keen on those kind of commits because they break other pull requests and patches without an obvious benefit. Thanks bro!\n", "created_at": "2011-05-11 06:26:01", "user": 9582, "id": 1135903}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See https://rails.lighthouseapp.com/projects/8994/tickets/6773-race-condition-in-actioncontrollercachingpages\n\nNote that I've added both File-based locking, which may not be necessary (but can't hurt), and in-process locking using mutexes which address a real issue we say (we can provide evidence if you're skeptical).\n\nFor every path cached, we now create a new mutex that stays around forever. This may be a problem if someone is caching an unbounded number of pages; I'm willing to discuss, and volunteer to implement, any alternative solutions. We may want to fall back on a single global mutex, since what we're synchronizing (writing a file to the cache path) should often be very fast.\n", "labels": [], "number": 504, "updated_at": "2014-07-03 04:05:04", "user": 8593, "closed_at": "2011-10-10 05:25:54", "id": 880596, "title": "Address Issue #6773, \"Race condition in ActionController::Caching::Pages\"", "url": "https://api.github.com/repos/rails/rails/issues/504", "created_at": "2011-05-11 01:16:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335054", "text": "Definitely needs tests. Seems like we need a simpler implementation if we have concurrency issues here.\n\nWhy not just open the file 'wb' instead of 'wb+' so the last writer \"wins?\"\n", "created_at": "2011-10-09 03:32:59", "user": 199, "id": 2335054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2343081", "text": "I agree a simpler solution would be ideal. We've only seen this race a couple times on a pretty heavily-used JRuby/Rails app, so it's unlikely that lock contention, or dogpile effect, would see significant performance costs.\n\nTesting this would be difficult. We'd have to have some sort of fuzz-testing approach to see if we can hit the race condition right, and even then it wouldn't be deterministic. Thoughts?\n", "created_at": "2011-10-10 05:25:54", "user": 8593, "id": 2343081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2424417", "text": "Just hit something that was most likely this issue.  Is there any reason that it is \"wb+\" instead of \"wb\"?\n", "created_at": "2011-10-17 02:36:37", "user": 4259, "id": 2424417}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "_Update: as ncreuschling points out, there was a typo in the pull request message that said \"HTML verb\" instead of \"HTTP verb\"._\n\n_Updated: update forms default to PUT instead of PATCH for current apps. Defaults to PATCH for new apps._\n\nPATCH is the correct HTTP verb to map to the #update action. The semantics for\nPATCH allows for partial updates, whereas PUT requires a complete replacement.\n\nChanges:\n- adds the #patch verb to routes to detect PATCH requests\n- adds #patch? to Request\n- adds the PATCH -> update mapping in the #resource(s) routes.\n- changes default form helpers to prefer :patch instead of :put for updates _only for new apps_\n- changes documentation and comments to indicate the preference for PATCH\n\nThis change tries to maintain complete backwards compatibility by keeping the\noriginal PUT -> update mapping. Users using the #resource(s) routes should not\nnotice a change in behavior since both PUT and PATCH requests get mapped to\nupdate.\n", "labels": [], "number": 505, "updated_at": "2016-12-01 14:09:12", "user": 7035, "closed_at": "2012-02-22 17:16:00", "id": 880609, "title": "Patch verb", "url": "https://api.github.com/repos/rails/rails/issues/505", "created_at": "2011-05-11 01:21:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1155629", "text": "GitHub needs a +1 button.\n", "created_at": "2011-05-13 18:45:54", "user": 6351, "id": 1155629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158204", "text": "I googled for HTTP verbs and clicked the first result and PATCH isn't listed.\n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n\nWhere is it?\n\nAlso I hardly think that updating everything except the primary key and the `created_at` timestamp is a `PATCH`.\n", "created_at": "2011-05-14 00:25:45", "user": 4126, "id": 1158204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158244", "text": "@benatkin http://www.w3.org/Protocols/rfc2068/rfc2068\n\nFor past discussion, see issues #348 and #425.\n", "created_at": "2011-05-14 00:41:14", "user": 7035, "id": 1158244}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1436411", "text": "@josevalim, @fxn: Hey guys, this pull request has been sitting here for over a month unnoticed. It seems like master is now hosting code for Rails 3.2, so I'm thinking it can be merged in?\n", "created_at": "2011-06-25 00:05:03", "user": 7035, "id": 1436411}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1436745", "text": "It seems fine for me with the view configuration option. I am a bit concerned about generating more routes (routes generation is already slow), but I don't consider it a blocker at first. /cc @nzkoz\n", "created_at": "2011-06-25 02:25:44", "user": 9582, "id": 1436745}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1437269", "text": "Yes I had it in mind, but waiting for 3.1 to start working on 3.2 proper.\n", "created_at": "2011-06-25 08:11:21", "user": 3387, "id": 1437269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1665641", "text": "Just a ping to say I am still waiting for 3.1 and have not forgotten this patch. That's because albeit 3-1-stable is branched, I prefer a master that does not move too much because cherry-picking back to 3-1-stable is very common these days. Focus is 3.1 now.\n\nThe patch does not merge cleanly anymore, by the way, in case you want to maintain it in sync.\n", "created_at": "2011-07-27 17:11:13", "user": 3387, "id": 1665641}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1739897", "text": "@fxn, cool, glad to know this hasn't been forgotten. Let me know when you're ready to merge so I can update the pull request.\n", "created_at": "2011-08-05 23:25:54", "user": 7035, "id": 1739897}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335073", "text": "Nice patch!\n\nI think this will break apps (and engines) that use explicit `put` routes to override a default `resources` route. After upgrading Rails, users will see that the form seems to bypass their `put` override.\n", "created_at": "2011-10-09 03:41:08", "user": 199, "id": 2335073}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2720374", "text": "+1 from me.\n\nI wish GitHub had a better way to subscribe to issues instead of just commenting. I feel like \"+1\" is just noise, but I want to see what happens with this pull...\n", "created_at": "2011-11-13 01:26:30", "user": 27786, "id": 2720374}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2720410", "text": "@steveklabnik can't you just click the 'Enable notifications for this Pull Request' link at the bottom?\n", "created_at": "2011-11-13 01:41:34", "user": 18524, "id": 2720410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2720416", "text": "@steveklabnik test clicking in the link at the end of this page:\n\nNotifications for new comments on this Pull Request are **off**. [Enable notifications for this Pull Request](https://github.com/rails/rails/issues/505/subscribe)\n\n@jeremy This one is candidate for Rails 3.2 or 4.0?\n", "created_at": "2011-11-13 01:43:51", "user": 160941, "id": 2720416}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2720471", "text": "3.2 candidate for sure. This needs thorough attention for a clean upgrade, however.\n\nThe guides need closer attention. Perusing the diff, I see a lot of search/replace changes from PUT to PATCH. I think having PUT just disappear will be too confusing. Gotta explain this change each step of the way!\n\nAnyone care to take up the torch on this?\n", "created_at": "2011-11-13 02:03:49", "user": 199, "id": 2720471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2720517", "text": "i must be the only person in the world that disagrees with \"PUT requires a complete replacement\", as per RFC2616 \"HTTP/1.1 does not define how a PUT method affects the state of an origin server\"\n\nthat said i like the name PATCH better than PUT for the purposes of what it is used for here.\n", "created_at": "2011-11-13 02:23:14", "user": 18622, "id": 2720517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2721277", "text": "I can refine this patch if the core team decides it will definitely go into Rails 3.2... don't want to write another huge patch just to be pushed off to the next version :).\n\n@jeremy can you give an example scenario where the `put` overrides would break? We might be able to provide a workaround, or at least put some notes in the documentation so that users aren't caught off-guard. Please suggest a workaround or an excerpt that can be added to the documentation.\n", "created_at": "2011-11-13 08:05:51", "user": 7035, "id": 2721277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2721516", "text": "Yes, we talked about this patch after 3.1 and it is in the \"roadmap\" for 3.2 if it is good to go by then.\n\n@stevegraham RFCs are not axiomatic systems, but I think there's no controversy in that PUT means \"put this resource at that URL\" (\"The PUT method requests that the enclosed entity be stored under the supplied Request-URI.\").\n\nYou're sending the resource itself, and in the target URL you either create a new resource (\"If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.\"), or else replace the existing one (\"If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server.\").\n\nIt is the app's choice to conform to that spec. Nowadays to do partial updates in a RESTFul way you need to define ad-hoc resources. For example, to toggle the \"paid\" flag of an invoice you may PUT to /invoices/:id/paid, but if you play by the rules you need PATCH for partial updates to /invoices/:id.\n", "created_at": "2011-11-13 09:47:36", "user": 3387, "id": 2721516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2722174", "text": "Aside the docs concern, this pull request looks good to me. I would just add the following changes (but I can do it myself in later commits after this is merged, this is more of a mental note):\n\n1) We could move `config.action_view.default_method_for_update` to `config.default_method_for_update` so other frameworks can read it as well (see 2 below);\n\n2) There is no need to generate routes for both PUT and PATCH. We could read the config in 1) and generate just one of the routes;\n\n3) `config.default_method_for_update` should be uncommented in new applications as we already changed all docs\n", "created_at": "2011-11-13 13:07:01", "user": 9582, "id": 2722174}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2754508", "text": "@stevegraham I have found a crystal clear and authoritative answer to whether PUT allows partial updates: The very RFC 5789 (http://tools.ietf.org/html/rfc5789) states that \"A new method is necessary to improve interoperability and prevent errors.  The PUT method is already defined to overwrite a resource with a complete new body, and cannot be reused to do partial changes.\"\n", "created_at": "2011-11-16 01:50:48", "user": 3387, "id": 2754508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2754553", "text": "I like the idea of moving this to be config.action_view.default_method_for_update as it lets people who care about these things choose to use patch without hitting anyone with 2x route proliferation.\n\nHowever I'm pretty strongly opposed to switching the default to PATCH just because of a neurotic interpretation of the RFC.  There are people with blog posts, printed books and screen casts where they do\n\n```\nform_for(@user, :html=>{:method=>:put}) \n```\n\nOr \n\n```\nlink_to(\"something\", @user, :remote=>true, :method=>:put)\n```\n\nSwitching the default will make all of those tutorials and chunks of code fail with routing errors, and \"the RFC says X\" doesn't seem like anywhere _near_ a good enough reason to do that.</rant>\n\nMaybe for a 4.0 change but absent some genuine bug or difficulty we can't do this in a random minor release.\n", "created_at": "2011-11-16 01:58:01", "user": 197, "id": 2754553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2755157", "text": "> Maybe for a 4.0 change but absent some genuine bug or difficulty we can't do this in a random minor release.\n\nYeah, sure, I mean, the asset pipeline from 3.0 -> 3.1 was a waaaaaaay smaller change. ;)\n\n> of a neurotic interpretation of the RFC\n\nThis is not neurotic. It's simply following the way that things are supposed to work. Many more people want partial updates than an upsert, that's what PATCH is.\n", "created_at": "2011-11-16 03:17:00", "user": 27786, "id": 2755157}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2755277", "text": "@dlee see my previous comment for a concrete example\n", "created_at": "2011-11-16 03:35:44", "user": 199, "id": 2755277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2755686", "text": "@jeremey I was actually responding to your first comment in this thread. You say that explicit `put` overrides would break apps, but I don't see how they would. Can you clarify what you mean by `put` overrides?\n", "created_at": "2011-11-16 04:46:07", "user": 7035, "id": 2755686}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2755689", "text": "@jeremy not @jeremey\n", "created_at": "2011-11-16 04:46:23", "user": 7035, "id": 2755689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2755904", "text": "@dlee Declare a resource in config/routes. Declare a `put` route that overrides the resource's update. Now upgrade the app and enable `PATCH`. Oops, now your forms submit to `patch` and your `put` route override is bypassed.\n\nNot the end of the world, and docs should be enough to cover that.\n", "created_at": "2011-11-16 05:23:48", "user": 199, "id": 2755904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2756238", "text": "@jeremy One of the points of the change was:\n- changes default form helpers to prefer :patch instead of :put for updates _only for new apps_\n\nNote that form helpers use :patch _only for new apps_. Would this still not cover that case?\n", "created_at": "2011-11-16 06:24:58", "user": 7035, "id": 2756238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2756432", "text": "I agree with @NZKoz that this should not be included before 4.0 at the earliest. Unless I'm mistaken, RFC-5789 is still just a proposed standard, and it can still be changed or retracted. See: http://www.rfc-editor.org/info/rfc5789\n\n@steveklabnik This isn't the way things are supposed  to work _yet_, and even without all of the recent changes, we should only implement the standard when we know it won't change or be retracted- to do otherwise would be irresponsible. PATCH has been discussed by the IETF for almost ten years, why the rush to implement it in Rails now?\n", "created_at": "2011-11-16 07:02:18", "user": 2162, "id": 2756432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2756598", "text": "Good point. Agreed @nzkoz.\n", "created_at": "2011-11-16 07:26:49", "user": 9582, "id": 2756598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2756600", "text": "@mhutchin Interesting. I looked back at the link I posted at the top of the discussion and the RFC @dlee cited, which contains PATCH, appears to be obsoleted by one that I cited, which only has a reference to PATCH at the end. Here are the two documents:\n- [RFC 2068: Hypertext Transfer Protocol -- HTTP/1.1](http://www.w3.org/Protocols/rfc2068/rfc2068) - Contains PATCH in the main body. January 1997.\n- [RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1](http://www.ietf.org/rfc/rfc2616.txt) - Has a reference patch at the end (only Ctrl-F result for PATCH in the text version). June 1999. Says _Obsoletes: 2068_ at the top.\n\nThe reference to PATCH at the end says:\n\n> The PATCH, LINK, UNLINK methods were defined but not commonly implemented in previous versions of this specification. See RFC 2068 [33].\n", "created_at": "2011-11-16 07:27:05", "user": 4126, "id": 2756600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2756693", "text": "@benatkin Thanks, I knew they had been discussing it for a long time, I underestimated how long. :-)\n\nI would only point out for those interested that RFC-2616 for HTTP/1.1 is now a DRAFT STANDARD, but at least it is further along in the process than the RFC that now covers PATCH, RFC-5789, which is a PROPOSED STANDARD, the \"entry-level maturity for the standards track\". For the meaning of the statuses see: http://www.rfc-editor.org/rfc/rfc2026.txt\n", "created_at": "2011-11-16 07:39:56", "user": 2162, "id": 2756693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2756717", "text": "Probably not the best way to check this, but on this list RFC-2616 is on Draft Standards and RFC-5789 is on Proposed Standards.\n\nhttp://www.rfc-editor.org/rfcxx00.html\n", "created_at": "2011-11-16 07:42:48", "user": 4126, "id": 2756717}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2756781", "text": "@mhutchin I didn't see your most recent comment until I posted mine. You said exactly the same thing! It took me a bit of thinking to see that there's a big difference between _draft_ and _proposed_ besides _draft_ being higher up the list, but I can see it now.\n", "created_at": "2011-11-16 07:52:15", "user": 4126, "id": 2756781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2757633", "text": "@NZKoz I don't think the \"route proliferation\" is so bad. In fact, even if Rails ends up supporting PATCH in the distant future, I'd prefer PUT be left as a standard route, perhaps linked to a different action (replace/upsert/etc.) This might not jive with a must-map-to-CRUD mindset, but it definitely jives with HTTP.\n\nThe interpretation of the RFC is not neurotic; I think we all share a clear and straightforward interpretation. I'll assume you meant \"neurotic _adherence_ to the RFC\".\n\nIf so, let me reiterate that supporting PATCH is not to _merely_ adhere to an RFC. The reason is because Rails currently has broken support for HTTP as commonly understood--leading to potentially problematic interoperability with RESTful clients, caching mechanisms, and proxies.\n\nI'd say implementing, documenting, and promoting a broken implementation of an HTTP VERB is a genuine bug, warranting a fix in a minor release, but I'll leave the decision up to the Rails core team.\n\nFinally, Rails shouldn't inhibit change just to retain backwards compatibility with blogs, books, and screencasts. In fact, I don't think Rails ever did care about that.\n", "created_at": "2011-11-16 09:42:56", "user": 7035, "id": 2757633}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2757649", "text": "@mhutchin, @benatkin, the Draft Standard is actually going away: http://www.rfc-editor.org/rfc/rfc6410.txt. RFCs currently in Draft Standard status will either be promoted to Internet Standard or demoted to Proposed Standard.\n\nBTW, Rails supports modern cookies and content-disposition headers which are also Proposed Standards, so there's no basis to reject PATCH just because it's a Proposed Standard.\n\nIn fact, Rails should be the framework that helps PATCH attain the Internet Standard status since Rails clearly needs PATCH in order to support non-replacing updates.\n\nWhether that happens in 4.0 or 3.2, I defer to the Rails core team.\n", "created_at": "2011-11-16 09:44:44", "user": 7035, "id": 2757649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2757826", "text": "> @NZKoz I don't think the \"route proliferation\" is so bad. In fact, even if Rails ends up supporting PATCH in the distant future, I'd prefer PUT be left as a standard route, perhaps linked to a different action (replace/upsert/etc.) This might not jive with a must-map-to-CRUD mindset, but it definitely jives with HTTP.\n\nIf @tenderlove says an extra route is almost free, I am +1 for including all routes, but I doubt this is the case. Remember some apps have more hundreds of resources routes. In the past, generating the format route proved to be quite expensive (for example).\n\n> If so, let me reiterate that supporting PATCH is not to _merely_ adhere to an RFC. The reason is because Rails currently has broken support for HTTP as commonly understood--leading to potentially problematic interoperability with RESTful clients, caching mechanisms, and proxies.\n\nDo you have anything to support this? PATCH is a new verb in the specs, so I doubt proxies and caching mechanisms went crazy to support it and change PUT behavior.\n\n> Finally, Rails shouldn't inhibit change just to retain backwards compatibility with blogs, books, and screencasts. In fact, I don't think Rails ever did care about that.\n\nYes, we should and we do care about that (we always consider it when doing big changes. If one of us forgets, other is there to remember). It is funny how everyone complains when Rails breaks backwards compatibility when moving from 3.0 to 3.1 but no one cares to ensure it. It is not just documentation that would be broken, but generators, engines and everything else. As I said in other ticket, each plugin checking for `request.put?` would now be broken in an app using PATCH as default.\n\nIn other words, +1 for this pull but leaving PUT as default to allow the community to catch up. Also, +1 if we can avoid routes proliferation.\n", "created_at": "2011-11-16 10:06:46", "user": 9582, "id": 2757826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2757920", "text": "> > If so, let me reiterate that supporting PATCH is not to _merely_ adhere to an RFC. The reason is because Rails currently has broken support for HTTP as commonly understood--leading to potentially problematic interoperability with RESTful clients, caching mechanisms, and proxies.\n> \n> Do you have anything to support this? PATCH is a new verb in the specs, so I doubt proxies and caching mechanisms went crazy to support it and change PUT behavior.\n\nI was referring to the broken behavior of PUT in Rails, not the absence of PATCH.\n\nFor example, caches can reasonably assume that if I `PUT {\"a\" => \"b\"}` to a resource, then that's what it should return on a `GET`. However, if the original resource was `{\"c\" => \"d\"}`, Rails would _by convention_ make the resource `{\"a\" => \"b\", \"c\" => \"d\"}`, not the expected `{\"a\" => \"b\"}`.\n\nBTW, how did you reply to a comment? Or did you just insert \">\" before each line?\n", "created_at": "2011-11-16 10:19:01", "user": 7035, "id": 2757920}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2757930", "text": "I am also +1 on leaving PUT by default by now.\n\n3.0 -> 3.1 had significant changes, like the asset pipeline or switch\nto jQuery, but this change in routing seems both significant and kind\nof subtle as far as code is concerned, so I personally lean on playing\nsafe for a minor release.\n\nI think conforming to the RFCs is our duty, Rails has always been a\ngood web citizen and promotes good practices by design, so we have to\nsupport PATCH and encourage proper usage of PUT within reasonable real\nlife constraints.\n\nSince PATCH is not required to carry strict partial updates, I think\nPATCH is going to make PUT obsolete for updates, just always PATCH.\nThat could be 4.0.\n", "created_at": "2011-11-16 10:21:13", "user": 3387, "id": 2757930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2758798", "text": "> @mhutchin, @benatkin, the Draft Standard is actually going away: http://www.rfc-editor.org/rfc/rfc6410.txt. RFCs currently in Draft Standard status will either be promoted to Internet Standard or demoted to Proposed Standard.\n\nTo be clear, this would only alter the status of RFC-2616 for HTTP/1.1, which isn't under discussion, in no more than two years. RFC-5789 for PATCH, and the Proposed Standard tier, are unchanged.\n\n> BTW, Rails supports modern cookies and content-disposition headers which are also Proposed Standards, so there's no basis to reject PATCH just because it's a Proposed Standard.\n\nNo, but it shouldn't be used as a selling point either.\n\nI'm not saying that we should reject PATCH just because it is only a Proposed Standard. I do think that we need to be _very_ clear though, since people started saying that this was to conform to the RFCs, that the RFC in question is only a Proposed Standard, and has been for a long time. The status of the RFC dramatically impacts the cost-benefit analysis. Most would readily agree that Rails should do just about anything to conform to relevant Internet Standards and that those should be the defaults, but we obviously _can't_ and _shouldn't_ conform to every Proposed Standard. \n\nThis should be evaluated without regard to the RFC.\n\n> In fact, Rails should be the framework that helps PATCH attain the Internet Standard status since Rails clearly needs PATCH in order to support non-replacing updates.\n\nIf we can do so with minimal disruption.\n", "created_at": "2011-11-16 12:22:50", "user": 2162, "id": 2758798}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2760071", "text": "> I was referring to the broken behavior of PUT in Rails, not the absence of PATCH.\n> \n> For example, caches can reasonably assume that if I `PUT {\"a\" => \"b\"}` to a resource, then that's what it should return on a `GET`. However, if the original resource was `{\"c\" => \"d\"}`, Rails would _by convention_ make the resource `{\"a\" => \"b\", \"c\" => \"d\"}`, not the expected `{\"a\" => \"b\"}`.\n\nMy point is that I don't believe nobody actually relies on that. And I don't believe anybody will soon just because there is a PATCH verb now.\n\n> BTW, how did you reply to a comment? Or did you just insert \">\" before each line?\n\nI just replied through gmail and it seems GH did its magic.\n", "created_at": "2011-11-16 14:43:19", "user": 9582, "id": 2760071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2760124", "text": "Note also that [RFC-2616](http://www.ietf.org/rfc/rfc2616.txt) has Roy Fielding and Tim Berners-Lee among the names, while [RFC-5789](http://www.rfc-editor.org/info/rfc5789) only has two names, not including those two, on it. Even if it had the same status (Draft Standard), it wouldn't carry quite the same weight to me unless I saw an endorsement from Roy Fielding. The obsolete standard, 2068, doesn't count.\n\nHere's the [first thing I found while searching for a new comment by Roy Fielding on PATCH](http://roy.gbiv.com/untangled/2009/it-is-okay-to-use-post):\n\n> PATCH is another option that, once it is sufficiently deployed, might be preferred over POST for sub-resource updates. However, we make these choices for a principled reason, not just because it seems RESTful. Ultimately, the methods should be chosen by the origin server and communicated somehow to the client via the media type or relationship processing rules. If the choice of method doesn‚Äôt make any difference to the other components (i.e., neither client nor intermediaries gain any value by using PUT or PATCH over POST), then we should admit that it just doesn‚Äôt matter to the architectural style.\n\nSo it sounds like we can be pretty RESTful without PATCH, and especially without PATCH as the default.\n", "created_at": "2011-11-16 14:47:21", "user": 4126, "id": 2760124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2760198", "text": "> I was referring to the broken behavior of PUT in Rails, not the absence of PATCH.\n\nAbout this point, in what sense is Rails behavior broken? Rails does what is in its hands to let you use PUT in an easy way, even imitating the correct way of doing things in browsers where that's not possible.\n\nThe user is responsible for using those tools correctly. You are free to define as many ad-hoc resources as you want to speak proper HTTP. If you construct forms for partial updates and use update_attributes that's up to you.\n", "created_at": "2011-11-16 14:54:28", "user": 3387, "id": 2760198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2764890", "text": "Deleted original comment because replying from email borked my formatting :(\n\n<blockquote>@stevegraham I have found a crystal clear and authoritative answer to whether PUT allows partial updates: The very RFC 5789 (http://tools.ietf.org/html/rfc5789) states that \"A new method is necessary to improve interoperability and prevent errors. The PUT method is already defined to overwrite a resource with a complete new body, and cannot be reused to do partial changes.\"</blockquote>\n\n\n@fxn - I'm sorry I think you're mistaken here and I have to respectfully disagree with you. First of all RFC5789 is not HTTP, let's instead look at RFC2616\n\n<blockquote>\"The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.\"</blockquote>\n\n\nThe word replace does not appear at all, in fact if you continue to read on you see **\"HTTP/1.1 does not define how a PUT method affects the state of an origin server.\"** This implies to me that there server is free to choose whether to replace the resource in it's entirety or apply the enclosed entity as a patch. It's as clear as day as far as HTTP 1.1 is concerned and putting aside my view own personal views, neither of these outcomes are incorrect.\n\nI think the only reason RFC5789 exists is that the authors have misinterpreted RFC2616. There is simply no language in RFC2616 that mandates \"The existing HTTP PUT method only allow a complete replacement of a document.\" or that \"The PUT method is already defined to overwrite a resource with a complete new body, and cannot be reused to do partial changes.\" It's simply not there. There maybe an argument that \"a new method is necessary to improve interoperability and prevent errors.\" I don't know.\n\nI also don't see how PUT breaks caching? As far as I understand it a successful PUT invalidates the caches for that given URI but the request response itself is not allowed to be cached as per HTTP 1.1. Maybe someone would be kind enough to explain that for me.\n\nHaving said all of the above, it would be nice if someone could actually refute my point to my satisfaction, which you have not done so far. It's not very comfortable being the only dissenting voice.\n", "created_at": "2011-11-16 17:45:06", "user": 18622, "id": 2764890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2765218", "text": "@stevegraham I agree with you in that the authors of the RFC5789 could be wrong, though I want to believe that you wouldn't be able to push such a proposal for so many time like they have done based on such a gross false premise. But yes, that's an hypothesis.\n\nI was for a while in rest-discuss and my feeling is that there's consensus about that interpretation of PUT. Also O'Reilly's book about REST is clear. What's a modified version of the resource? Resources in HTTP are not partial, they are resources, all or nothing, in my understanding of the terminology. You can only request and submit resources or resource representations. So in that sense I believe no verb can work with partial resources. That's where ad-hoc resources come to play, like the paid flag of an invoice in my example above.\n\nBut this thread is pulling in different directions. It's interesting. There's the objections about whether it is premature to support such a RFC because of its status. There's the objections about whether using PUT for partial updates is incorrect at all. There's the argument that Rails should be pioneer and push. Then there will be practical issues because web servers and proxies won't understand PATCH in the short term and we will only be able to tunnel it through POST.\n\nAll in all, I've written to Roy Fielding to ask for advice. I think that's the best we can do. Should Rails work in that direction? If yes, should we work on it today? Let's see whether Roy is so kind as to shed some light about this.\n", "created_at": "2011-11-16 18:04:51", "user": 3387, "id": 2765218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2765426", "text": "@fxn I don't see where @stevegraham suggested that the authors of RFC-2616 are wrong. I only see where he suggested that the authors of RFC-5789 are wrong.\n\nI think that it's great that you've contacted Roy Fielding. I hope to see an interesting reply.\n\nI wonder why this couldn't have been implemented as a plugin this summer when this and other issues were being discussed. If one was written, would it have been used? How about releasing a plugin based on this and seeing whether it takes off?\n", "created_at": "2011-11-16 18:18:58", "user": 4126, "id": 2765426}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2765456", "text": "@benatkin oh yes my bad, wrong copy & paste. I've edited the comment.\n", "created_at": "2011-11-16 18:21:44", "user": 3387, "id": 2765456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2768361", "text": "All this discussion of RFCs and the like seems to miss the point entirely.  What's the negative impact of the current behavior to _real_ users. Are there actual practical things which people are being bitten by because we use PUT?  \n\nUnless there's an answer to that then this entire thread is a massive distraction, we should add the config option, not change the defaults, and move on with our lives.\n", "created_at": "2011-11-16 21:40:51", "user": 197, "id": 2768361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2768632", "text": "The discussion in my view is relevant because there are people arguing that NO support for PATCH should be added at all.\n\nArguments are: 1) it is too premature given the status of the RFC. 2) It is not clear in HTTP/1.1 that PATCH is needed at all. 3) Current web servers and proxies won't understand it, so this should add support only for tunneling.\n\nI am enumerating, not subscribing them.\n\nWe need to answer that first question. I think the point about defaults is minor in the thread.\n", "created_at": "2011-11-16 21:57:43", "user": 3387, "id": 2768632}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2768880", "text": "Supporting it as an option, with no change of defaults, circumvents all 3 of those objections.  Those who wish to use it can, those who don't care won't be affected in any way.\n\nIt's really the simplest solution that could possibly work and it won't break anyone's apps ever under any circumstances.  Unless there's a compelling reason to do something else, why don't we add the config option and move on.\n", "created_at": "2011-11-16 22:13:58", "user": 197, "id": 2768880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2769705", "text": "Saying no and encouraging the proponents to write a plugin would be even\nsimpler. I would prefer this, as until I get a better explanation of its\nvalue and an easier-to-understand RFC, I don't want this to be in the docs.\nI don't think that rails should side with a Proposed Standard that doesn't\nhave adoption from numerous web stack components (unlike the other proposed\nstandards @dlee cited, content-disposition and modern cookies) unless\nthere's a strong benefit to a number of users.\n\nIf there are technical reasons why such a plugin wouldn't work well they\ncould be addressed and the changes would likely help with other plugin\nprojects as well. Furthermore, there would be a clear path forward to\ndemonstrate the value of the PATCH behavior: integrate it with a caching\nproxy and show how it improves things vs. not having PATCH.\n\nOn Wed, Nov 16, 2011 at 3:13 PM, Michael Koziarski <\nreply@reply.github.com\n\n> wrote:\n> \n> Supporting it as an option, with no change of defaults, circumvents all 3\n> of those objections.  Those who wish to use it can, those who don't care\n> won't be affected in any way.\n> \n> It's really the simplest solution that could possibly work and it won't\n> break anyone's apps ever under any circumstances.  Unless there's a\n> compelling reason to do something else, why don't we add the config option\n> and move on.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/505#issuecomment-2768880\n", "created_at": "2011-11-16 23:13:13", "user": 4126, "id": 2769705}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2771253", "text": "Wait a minute. It was never _my_ position that these changes are too premature given the status of the RFCs. The only reason I even mentioned the status of the RFCs was because they were being used in this thread, and the other threads mentioned, for various reasons, including trying to define the problem and _justifying the changes_, but without **any** mention of the fact that all of the RFCs mentioned were in various stages of maturity, and none of them were even final standards yet. \n\nOther than that, I couldn't care less. I agreed with @NZKoz then, and I agree with @NZKoz now.\n", "created_at": "2011-11-17 02:14:48", "user": 2162, "id": 2771253}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2773544", "text": "+1 to what Benjamin said. I don't think it is a good idea to push code, docs, and tests to maintain if the feature ends up being dubious. If people want to play with something experimental better a plugin than a black hole in the code base hidden by a flag to the end user.\n\nI mean, we are touching one of the strongest conventions in Rails, it touches the blessed actions. We have to do that with extra care in my view.\n\nIf I had to bet, I'd say go, but I'd prefer to have a clear understanding of the convenience of pushing this from someone as Roy Fielding, given nobody in the thread AFAICT seems to have a definitive authoritative answer. Because pushing support for PATCH has implications, it sends a message to the user base. The guide and blog post need to explain to users when or why they should use PATCH, and from this thread we have no conclusions. A blog post saying \"in case you want it, why? we don't really know, you just have it there, use at your risk, have fun\" doesn't sound right to me.\n", "created_at": "2011-11-17 08:40:03", "user": 3387, "id": 2773544}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2773578", "text": "To summarize, it is even easier to go with the solution that says partial updates with PUT are OK. No changes needed.\n", "created_at": "2011-11-17 08:43:00", "user": 3387, "id": 2773578}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3146651", "text": "Partial updates with PUT violate RFC 2616. You have to use POST.\n", "created_at": "2011-12-14 19:23:11", "user": 30442, "id": 3146651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3146670", "text": "Where?\n", "created_at": "2011-12-14 19:24:03", "user": 18622, "id": 3146670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3146879", "text": "I understand [Section 9.6](http://tools.ietf.org/html/rfc2616#section-9.6) as \"if you send a PUT request, don't care if the resource already exist, the server will tell us with a 200 or a 201\" (i.e. the client will transmit the complete resource), how should that allow a partial update?\n", "created_at": "2011-12-14 19:31:33", "user": 30442, "id": 3146879}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3147939", "text": "@rkh That's also what I think, but the point is \"I understand\", we always say in advance something like that, \"my understanding\", \"my interpretation\", which is telling us we cannot derive without doubt that from the text in the RFC. So we need to resort to \"which is the intention\", or \"which is the general consensus\".\n\nRoy Fielding has not replied to my email so far.\n\nOn the other hand @steveklabnik has some pointers that support that PATCH is needed for partial updates I'll post later.\n", "created_at": "2011-12-14 19:54:14", "user": 3387, "id": 3147939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3148104", "text": "For example, in the (now obsolete) [RFC2068](http://www.ietf.org/rfc/rfc2068.txt):\n\n> The PATCH method is similar to PUT except that the entity contains a\n>   list of differences between the original version of the resource\n>   identified by the Request-URI and the desired content of the resource\n>   after the PATCH action has been applied.\n\nThe definition of PUT:\n\n> The PUT method requests that the enclosed entity be stored under the\n>   supplied Request-URI. If the Request-URI refers to an already\n>   existing resource, the enclosed entity SHOULD be considered as a\n>   modified version of the one residing on the origin server.\n\nThe enclosed entity be stored. Not 'some random stuff that changes things.' It's an entire entity. 'a modified version of the one,' not 'changes that should update the one.'\n\n@fxn has the links I gave earlier, where Fielding also explicitly says PUT requires an entire representation. I don't have them handy.\n", "created_at": "2011-12-14 20:05:52", "user": 27786, "id": 3148104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3148134", "text": "Please post these links because if they're the same ones I have seen Fielding does not say anything of the sort.\n", "created_at": "2011-12-14 20:07:49", "user": 18622, "id": 3148134}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3148447", "text": "He's quoting RFCs, not Fielding. This is not about implementing REST properly, this is about implementing HTTP properly.\n\nOn Dec 14, 2011, at 21:07 , Stevie Graham wrote:\n\n> Please post these links because if they're the same ones I have seen Fielding does not say anything of the sort.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/505#issuecomment-3148134\n", "created_at": "2011-12-14 20:25:42", "user": 30442, "id": 3148447}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3148453", "text": "@steveklabnik As you say RFC2068 has been obsoleted by RFC2616. http://tools.ietf.org/html/rfc2068\n\nRFC2616, a draft standard, doesn't include a definition of PATCH. All it has to say is _The PATCH, LINK, UNLINK methods were defined but not commonly implemented in previous versions of this specification. See RFC 2068 [33]._ To me this doesn't say that PATCH is a part of HTTP 1.1. Also the [proposed standard for PATCH](http://tools.ietf.org/html/rfc5789) (not a draft standard) doesn't include any of the authors of RFC2616 in its list of authors, and I couldn't find any endorsement for RFC5789 from Fielding online.\n\nSo PATCH feels pretty random to me. Much more random than semantically replacing a document with an updated version but leaving created_at, updated_at, and id intact, and maybe omitting some unchanged fields for efficiency.\n", "created_at": "2011-12-14 20:26:10", "user": 4126, "id": 3148453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3148597", "text": "On Dec 14, 2011, at 21:26 , Benjamin Atkin wrote:\n\n> @steveklabnik As you say RFC2068 has been obsoleted by RFC2616. http://tools.ietf.org/html/rfc2068\n\nBut it got basically valid again by http://tools.ietf.org/html/rfc5789\n\n> RFC2616, a draft standard, doesn't include a definition of PATCH. All it has to say is _The PATCH, LINK, UNLINK methods were defined but not commonly implemented in previous versions of this specification. See RFC 2068 [33]._ To me this doesn't say that PATCH is a part of HTTP 1.1. Also the [proposed standard for PATCH](http://tools.ietf.org/html/rfc5789) (not a draft standard) doesn't include any of the authors of RFC2616 in its list of authors, and I couldn't find any support for RFC5789 from Fielding online.\n> \n> So PATCH feels pretty random to me. Much more random than semantically replacing a document with an updated version but leaving created_at, updated_at, and id intact, and maybe omitting some unchanged fields for efficiency.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/505#issuecomment-3148453\n", "created_at": "2011-12-14 20:35:36", "user": 30442, "id": 3148597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3148614", "text": "@rkh NOPE NOPE NOPE\n", "created_at": "2011-12-14 20:37:25", "user": 18622, "id": 3148614}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3149322", "text": "RFC5789 is nearly two years old, is still a proposed standard, and I can't find any implementations of a write-through cache with it, nor can I find evidence of the two authors trying to push it forward since then.\n\nI would be happy to see a rails plugin and an apache or nginx module written to show how it can improve how HTTP works, and then a better discussion about whether the complexity of adding another verb is needed could take place. I think headers might be better because to me whether something is being replaced or just modified isn't a yes/no question when metadata is considered.\n", "created_at": "2011-12-14 20:54:36", "user": 4126, "id": 3149322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3149840", "text": "[Here's one quote from Fielding](http://roy.gbiv.com/untangled/2009/it-is-okay-to-use-post#comment-965):\n\n> Stefan, I think it is better to say that we only use PUT when the update action is idempotent and the representation is complete. \n\nHe goes on further to mention PATCH:\n\n> PATCH is another option that, once it is sufficiently deployed, might be preferred over POST for sub-resource updates. However, we make these choices for a principled reason, not just because it seems RESTful.\n\nIn the text of that post:\n\n> ... complete replacement of a representation (PUT), \n\nThe text of the PATCH RFC, which is again, just a draft:\n\n>  The PUT method is already defined to overwrite a resource\n>   with a complete new body, and cannot be reused to do partial changes.\n\nMy point is this: there's overwhelming consensus that PUT means 'whole representation.' Well, modified consensus, since it's not 100%. ;) However, it is true that PATCH is a draft standard, so I can see not implementing it in Rails. That's quite valid. However, continuing to use PUT is also wrong. If it's a partial update, POST makes much more sense.\n", "created_at": "2011-12-14 21:08:13", "user": 27786, "id": 3149840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3149876", "text": "@benatkin \n\n> So PATCH feels pretty random to me. Much more random than semantically replacing a document with an updated version but leaving created_at, updated_at, and id intact, and maybe omitting some unchanged fields for efficiency.\n\nNo, not at all. That's a direct violation of PUT's semantics. POST is the random grab-bag method, anyway.\n", "created_at": "2011-12-14 21:10:39", "user": 27786, "id": 3149876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3150809", "text": "On Dec 14, 2011, at 21:54 , Benjamin Atkin wrote:\n\n> RFC5789 is nearly two years old, is still a proposed standard, and I can't find any implementations of a write-through cache with it, nor can I find evidence of the two authors trying to push it forward since then.\n\nYou mean Rails should not support proposed standards like, say, Cookies?\n\nKonstantin\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/505#issuecomment-3149322\n", "created_at": "2011-12-14 21:41:58", "user": 30442, "id": 3150809}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3151085", "text": "Not because it's a proposed standard, no. But there are other reasons to support cookies: it's been implemented and experimented with in dozens of server, client, and middleware implementations long before the first version of Ruby On Rails came out, and it's a feature that's important to Ruby On Rails users.\n", "created_at": "2011-12-14 21:49:21", "user": 4126, "id": 3151085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3154821", "text": "fwiw, I brought this up on SO about 18 months ago (the answer was auto-accepted):\n\nhttp://stackoverflow.com/questions/2364110/whats-the-justification-behind-disallowing-partial-put\n", "created_at": "2011-12-15 00:38:35", "user": 55782, "id": 3154821}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3154910", "text": "We've gone back and forth on this for more than 6 months, there has never been a single case provided why we should change the defaults other than bible, sorry RFC, thumping.  \n\nAs I mentioned earlier, we should simply add an option for users who want to use `PATCH` to be able to use it, and move on with our lives.  We can address the defaults in some far distant release once we actually have real experience with the benefits.\n\nIn the interest of bringing this to a close I'm going to close this pull request, please feel free to submit another which _only_ adds a configuration option allowing users to switch on `PATCH`\n", "created_at": "2011-12-15 00:47:31", "user": 197, "id": 3154910}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3157620", "text": "Would rails core accept the minimal `PATCH` commit? I don't want to work on the pull request just to have it debated for months and closed without resolution.\n", "created_at": "2011-12-15 06:51:51", "user": 7035, "id": 3157620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3158163", "text": "RFCs are the tool we have to discuss this. Why don't we support MOVE in Rails. Well, because it is not in the RFC right? And if someone proposed MOVE we wouldn't accept it on the ground of not being there.\n\nSo let's accept this has to be discussed taking RFCs into account, and let's accept RFCs are not axiomatic systems and are subject to interpretation in some spots.\n\nHaving said that, if verb V is not clearly justified I see no point in hiding it behind a flag, as I said above. If the need for verb V is debatable it should not be in core.\n", "created_at": "2011-12-15 08:16:32", "user": 3387, "id": 3158163}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3161966", "text": "@NZKoz There are good reasons for this. I've cross-posted about this to [rest-discuss](http://tech.groups.yahoo.com/group/rest-discuss/message/18011), and as Jan Algermissen mentions,\n\n> When a client (or intermediary, for that matter) re-does a PUT N-times (e.g.\n> because it did not receive any response the first N-1 times due to network\n> problems) the result on the server might not be what the client assumes it is,\n> given the idempotent nature of PUT.\n> \n> A client that is aware of the server's tunneling-partial-update-through-PUT\n> semantics might not redo the PUT but any intermediary in between might (because\n> they would not be aware of the out-of-band knowledge / just like Google\n> accelerator in the case of GET-to-delete-account).\n> \n> What is the problem of just using POST for the partial update in the first\n> place? This is what POST is for.\n\nAlso, 'bible-thumping' is just a way to dismiss arguments; you either follow web standards or you don't. Rails has brought REST(ish) to many, many people, and the choices Rails makes are important. When IE6 didn't follow the standard initially, it was an excellent browser. Years later, we can see how that was a mistake.\n\nI don't even mean this as 'let's implement PATCH,' as that's not yet a true standard. But `update` should really use POST by default, since most people aren't actually PUT-ing full representations.\n", "created_at": "2011-12-15 14:58:46", "user": 27786, "id": 3161966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3162180", "text": "@steveklabnik +1, well said.\n", "created_at": "2011-12-15 15:08:17", "user": 79303, "id": 3162180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3163433", "text": "@steveklabnik that post from Jan is written on the basis that it is _impossible_ to make an idempotent partial update. I disagree.\n\nIn some ways it's irrelevant anyway; people are already using partial PUT requests that are intended as idempotent.\n\nMoving to POST would:\n- have a negative impact on clients since its non-idempotent nature has now made the requests non-repeatable\n- seem to produce zero appreciable benefits over the current practice\n\nSupposedly, RFC2616 has been enforcing 'full PUT' for over 12 years and we're still yet to see any significant mechanisms that leverage this systemic agreement on the fullness of PUT requests.. that should tell us something (i.e. it's a useless semantic). Add in the fact we have implementations, like Rails, which blatantly disregard it and don't appear to suffer any real negative consequences.. I think it's a serious stretch to compare this to IE6.\n", "created_at": "2011-12-15 15:38:27", "user": 55782, "id": 3163433}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3164516", "text": "@mikekelly Honestly, if Rails devs knew what 'idempotent' meant, they'd be happy. I don't think they intend such things at all, I think they're just using the Rails defaults.\n\nAnd if the semantics of PUT aren't useful, then they should be changed. In the spec for HTTP. And then we should follow it.\n\nAgreements are useless if people don't actually follow them.\n", "created_at": "2011-12-15 16:09:53", "user": 27786, "id": 3164516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3164655", "text": "Guys I am reopening this PR. There's a legitimate discussion going on here, and I was the guy that took this PR on his plate from day one.\n\nIf the discussion takes 6 months or 2 years, it just doesn't matter, it has to take the time it needs.\n\nPeople tired of the thread can unsubscribe.\n", "created_at": "2011-12-15 16:18:18", "user": 3387, "id": 3164655}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3172678", "text": "Two more things, while I think of it:\n\n1) if PUT didn't require a full representation, there'd be no way to do the 'or create' part of PUT's semantics. While not totally damning, I think it's also a strong supporting line of reasoning.\n\n2) Rails hasn't suffered for 'implementing PUT wrong' (really app dev's fault, but assisted by Rails' shoddy defaults) because Rails apps haven't been receiving PUT requests: they receive POST requests with a `_method` parameter saying PUT. This is basically exactly what I'm saying should happen with the removal of support for PATCH but without the extra parameter, pretending to be a PUT.\n", "created_at": "2011-12-16 03:02:44", "user": 27786, "id": 3172678}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3172921", "text": "I certainly don't agree with continuing the discussion, but as you say I can click the little \"off\" button :)\n\nMy objection is solely to switching the default without any _actual_ downside to end users.  It's not about whether someone's app will break (which we can obviously work around) but about yet-more additional conceptual overhead for users picking up rails.  There's tonnes of books, screencasts and blog posts which show how RESTful routing works and they all say \"put will update\".\n\nUsers will read those blog posts or books, write `:method=>:put` in their html and get routing errors.\n\nWe can't just do that for the sake of feeling better about our purity.  I'd suggest we really need a [web-accelerator level of pain](http://37signals.com/svn/archives2/google_web_accelerator_hey_not_so_fast_an_alert_for_web_app_designers.php) to justify changing the defaults.\n\nHave fun guys ;)\n", "created_at": "2011-12-16 03:45:14", "user": 197, "id": 3172921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3173106", "text": "> Supposedly, RFC2616 has been enforcing 'full PUT' for over 12 years and we're still yet to see any significant mechanisms that leverage this systemic agreement on the fullness of PUT requests.. that should tell us something (i.e. it's a useless semantic). Add in the fact we have implementations, like Rails, which blatantly disregard it and don't appear to suffer any real negative consequences.. I think it's a serious stretch to compare this to IE6.\n\n@mikekelly: I don't think it's a matter of \"real negative consequences\"; rather, there are very, very positive benefits to implementing PUT correctly that are simply _impossible_ to achieve when the server is not following proper PUT semantics.  I've got a recent internal HTTP service that I built with sinatra and it was very easy to get proper PUT semantics.  The app uses PUT both for create and update, and only allows full representations to be used.  Here are some of the benefits we've received:\n- Since PUTs are idempotent, they can be re-tried as many times as you want. We rely on this a lot. The service is consumed by our main rails app. The rails app performs the PUT to the sinatra service using a resque job, and it's very easy to retry the job when we have a transient failure. It _just works_.\n- The fact that we use PUT for both create and update makes the client code exceptionally simple. We don't need to deal with two separate types of requests to ensure the sinatra service has the resource in the proper state. We just use a PUT, and it doesn't matter if the resource exists or not, or whether or not the resource is already in the desired state; the end result is the same.  We also leverage this in a cron job that runs every few days for the express purpose of reconciling any discrepancies between the user configuration data in the rails app and the data in the sinatra app.  It goes over every user, does a GET to the sinatra app to get the data, compares the data to what it has locally, and does a PUT if there is a discrepancy or if the sinatra app responds with 404 not found.  Again, the idempotent, create-or-update nature of the PUT makes this extremely easy. \n- The fact that we use PUT for create (and thus allow the client to pick the identifier) makes the service very transparent and easy to troubleshoot.  When one of the users of the rails app has some missing data I don't have to go look up the id of the corresponding record in the sinatra service; I can easily construct URLs directly in my browser using the user ID I already know.\n\nNone of these benefits would be possible if we had implemented the normal rails PUT semantics in our sinatra service.\n\nSo here's my two cents (not that anyone asked for it....).  I'd love to see rails provide support to easily implement proper PUT semantics.  As part of this, some other HTTP verb should be used for partial updates. PATCH looks interesting, but POST can be used today and is the correct verb to use.  In addition, it would be great if ActiveRecord/ActiveModel provided an `replace_attributes` method that only supported FULL updates and no partial updates.  It would effectively be like `update_attributes` except that it would set any unmentioned attributes to `nil`.  Most of the time, this would cause the partial update to fail with validation errors, which is the correct behavior you would usually want.\n", "created_at": "2011-12-16 04:17:07", "user": 49391, "id": 3173106}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3175156", "text": "@myronmarston right, this is a common approach e.g. Riak uses it\n\nThe issue here is that your application doesn't rely on completeness being guaranteed for PUT across the web; it's an over-specification of HTTP. If your application does need full PUT (many do), then design and document it that way. I agree it's a good idea to try and make this behaviour easier to achieve in rails.\n\nGiven we now have a lot of mobile clients with unreliable connectivity - allowing them by default to submit small, partial updates idempotently is a huge benefit. Neither POST or PATCH would allow this since they are non-idempotent.\n", "created_at": "2011-12-16 09:32:34", "user": 55782, "id": 3175156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3177078", "text": "> allowing them by default to submit small, partial updates idempotently is a huge benefit.\n\nWhat's your issue with the 'expose a sub-resource' strategy?\n", "created_at": "2011-12-16 13:20:48", "user": 27786, "id": 3177078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3177353", "text": "> What's your issue with the 'expose a sub-resource' strategy?\n\noff the top of my head:\n- splitting up every potential partial into individual resources is not practical if you want to be able to partially update each individual attribute of a resource.\n- it's much more efficient to put (oh snap!) this optimisation in the hands of the clients, rather than try and second guess what they want.\n- smearing your resource state is a pain for things like caching; it's redundant, you introduce shared state between resources which cases problems with cache invalidation, etc etc\n\nhaving said that, I do favour using sub-resource strategy based around deletion, which does tend to overlap somewhat. There are also ways to get around the third point about caching, but at a cost of increased complexity to your system.\n", "created_at": "2011-12-16 13:53:22", "user": 55782, "id": 3177353}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3179351", "text": "> The issue here is that your application doesn't rely on completeness being guaranteed for PUT across the web; it's an over-specification of HTTP. If your application does need full PUT (many do), then design and document it that way. I agree it's a good idea to try and make this behaviour easier to achieve in rails.\n\nActually, my application does rely on it being the complete resource.  That's how it implements PIT as create or update.  It wouldn't be able to implement create if it allowed partial resources.\n\n> Given we now have a lot of mobile clients with unreliable connectivity - allowing them by default to submit small, partial updates idempotently is a huge benefit. Neither POST or PATCH would allow this since they are non-idempotent.\n\nThe spec does not mandate that POST or PATCH be idempotent--but it doesn't say they can't be.  I think it makes sense to implement the partial update as an idempotent POST or PATCH and simply document that it is idempotent (even though the HTTP verb used does not require it).\n\nAlso, while it's possible to implement some kinds of partial updates idempotently, it's not universally true that ALL partial updates are idempotent.  Consider the common case of using `accepts_nested_attributes_for` for a `has_many` association.  When an update comes in that is adding new associated records, it is not idempotent, because each time the update runs it will add additional records.\n", "created_at": "2011-12-16 16:37:42", "user": 49391, "id": 3179351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3179594", "text": "On Fri, Dec 16, 2011 at 5:37 PM, Myron Marston\nreply@reply.github.com\nwrote:\n\n> > The issue here is that your application doesn't rely on completeness being guaranteed for PUT across the web; it's an over-specification of HTTP. If your application does need full PUT (many do), then design and document it that way. I agree it's a good idea to try and make this behaviour easier to achieve in rails.\n> \n> Actually, my application does rely on it being the complete resource. ¬†That's how it implements PIT as create or update. ¬†It wouldn't be able to implement create if it allowed partial resources.\n\nWhy not?\n\nI think there's a corner case that involves validation. If I send the\nrepresentation of a sub-resource (to avoid the word \"update\") with PUT\nI could create the corresponding part of the resource itself.\n\nFor example, I set the \"paid\" flag of an invoice to \"true\", and if\nthere are no validations that is idempotent and makes sense as far as\nHTTP is concerned. It is idempotent if I can create an invoice with\nthat single attribute, because that PUT request consistently sets the\nflag to true. What happens to the rest of the resource among requests\nis irrelevant.\n\nWe are talking about the protocol, not about whether that makes sense\nfor a particular application.\n\nBut if the server refuses to create the invoice because a customer is\nmandatory, and accepts the very same request 2 minutes later because\nsomeone else created the invoice... I would not call those PUT calls\nidempotent, the side-effects of the request are clearly different.\n", "created_at": "2011-12-16 16:53:23", "user": 3387, "id": 3179594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3180076", "text": "Well, that could happen also for full requests... Indeed, regarding idempotence the spec says \"(aside from errors or expiration issues)\". So idempotence is defined for successful requests I interpret.\n\nIf that is correct, then I see no problem in allowing creation of sub-resources.\n\n@myronmarston then, why do you think partial updates would not allow you to use PUT for creation and update?\n", "created_at": "2011-12-16 17:26:42", "user": 3387, "id": 3180076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3180791", "text": "> @myronmarston then, why do you think partial updates would not allow you to use PUT for creation and update?\n\nIt's possible, but it adds lots of complexity.  With how I've implemented PUT, the client assumes no knowledge of what state the resource is in on the server.  It simply doesn't matter.  It always PUTs the entire resource.\n\nLikewise, the server doesn't need to know if the request body is intended to be a partial or full representation; it uniformly treats it as a complete resource.\n\nIt makes for simpler, more maintainable code all around.\n", "created_at": "2011-12-16 18:27:34", "user": 49391, "id": 3180791}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3181362", "text": "@myronmarston excellent, thanks.\n\nSo in your case the application is designed that way. Metaphorically speaking, in my invoicing applications the paid flag is an ordinary resource from the client's point of view. It is convenient, better for the semantics of the applications, we like the model, etc.\n\nBut if we focus the conversation on the raw protocol, the more I read about it, the less I am convinced that HTTP requires full representation in PUT requests.\n\nHowever, Roy Fielding has stated that is the intention in a few public places. @steveklabnik quoted him, and I've also seen this patch http://trac.tools.ietf.org/wg/httpbis/trac/changeset/1158#file1 Roy points to in this thread http://tech.groups.yahoo.com/group/rest-discuss/message/17415 (@mikekelly participated in that one).\n\nSo, my personal take on this is: the HTTP spec is a bit ambiguous about partial updates via PUT. This opens the door to endless controversy because it does not follow from the spec crystal clear that you cannot do it. But Roy Fielding says you should send full representations. If you want an authoritative answer, Roy's the one. Thus, if Rails as a framework has to take sides, I think the most sensible choice is agreeing that partial updates via PUT are not the way to go.\n\nThat does not mean the path to address that in Rails is to support PATCH, but at least I believe we have a sensible conclusion about this.\n\nDoes anybody disagree?\n", "created_at": "2011-12-16 19:14:28", "user": 3387, "id": 3181362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3182116", "text": "@fxn I agree PUT should not be used for partial updates.\n\nPATCH sounds like the perfect solution for this (in fact, designed specifically for this purpose). Other than backwards compatibility issues (which we can avoid by making PATCH optional) and lacking the stamp of RFC Internet Standard (which wasn't an issue for cookies and content-disposition), what reasons are there for not using PATCH?\n", "created_at": "2011-12-16 20:19:32", "user": 7035, "id": 3182116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3182334", "text": "Oh, also, some clarification from a [changeset authored by fielding 9 months ago](http://trac.tools.ietf.org/wg/httpbis/trac/changeset/1158) in the upcoming changes to the spec.\n\n> An origin server SHOULD reject any PUT request that contains a Content-Range header field, since it might be misinterpreted as partial content (or might be partial content that is being mistakenly PUT as a full representation). Partial content updates are possible by targeting a separately identified resource with state that overlaps a portion of the larger resource, or by using a different method that has been specifically defined for partial updates (for example, the PATCH method defined in RFC5789).\n", "created_at": "2011-12-16 20:40:17", "user": 27786, "id": 3182334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3182738", "text": "personally I think it's better to ignore the specifications and focus on the practical problems inflicted by using PUT for partial updates - what are they?\n", "created_at": "2011-12-16 21:17:43", "user": 55782, "id": 3182738}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3182917", "text": "@dlee \"lacking the stamp of RFC Internet Standard\"\n\nHow exactly are PATCH (RFC 5789), Content-Disposition (RFC 6266) or Cookies (RFC 6265) \"lacking the stamp of RFC Internet Standard\"?\n", "created_at": "2011-12-16 21:34:09", "user": 332994, "id": 3182917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3182985", "text": "@mikekelly The practical problems stem precisely from not following specifications. It's as if your server did an update on a GET, or a delete on a PUT--you're breaking conventions/expectations. HTTP participants expect certain behavior following specifications, and breaking that expectation will lead to troubles.\n", "created_at": "2011-12-16 21:39:56", "user": 7035, "id": 3182985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3182993", "text": "@mikekelly I think there are two ways to look at it.\n\nOne way is the pragmatic choice one does for a particular application. People can do whatever they want. You can use GET for deletion, you can tunnel everything trough POST. You can submit partial updates through PUT... Individual programmers for particular projects decide to adhere to the spec or not and in what degree.\n\nThe other point of view is the one of a web framework. In my view it is the duty of Rails to follow and promote best practices. When designing the framework, specs are what we need to base the design on, they are what define what's a good web citizen.\n\nIf you are writing your own private links manager running in localhost, and you want to delete links with GET quick & dirty, please go ahead. But Rails should push the message you should be using DELETE. By design, the easy path does that. And it does going as far as having builtin macros, routing, conventions, and even tunneling the method through a hack while at the same time routing the verb correctly (BTW, someone said people do POSTs with _method really not PUTs anyway. No, browsers do POSTs, Rails routes PUT).\n\nThis PUT vs PATCH is no different. Though we need to take into account backwards compatibility, I think it is our responsibility to give the user the tools to do partial updates in a proper way.\n", "created_at": "2011-12-16 21:40:39", "user": 3387, "id": 3182993}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3183133", "text": "@dlee @fxn what is this unexpected behaviour exactly?\n\nIs it that a client might make a PUT request intended to 'shrink' a resource but instead only partially updates it as a partial? If so; is that a real problem? Aren't client devs reading documentation telling them what can be PUT where anyway?\n", "created_at": "2011-12-16 21:53:39", "user": 55782, "id": 3183133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3183273", "text": "@reschke https://github.com/rails/rails/pull/505#issuecomment-2757649\n\n@mikekelly What you're describing is one of the problems. Another could be that a PUT request could be cached with a partial representation. Still another is that a client might assume the idempotent properties of PUT.\n", "created_at": "2011-12-16 22:07:37", "user": 7035, "id": 3183273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3183337", "text": "@dlee it's not practical to prime a cache with the contents of a PUT request - do you know of implementations which actually do this? The client is meant assume the idempotent properties of PUT, so that's not really a problem either.\n", "created_at": "2011-12-16 22:14:33", "user": 55782, "id": 3183337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3183396", "text": "Let's agree that for vast majority of Rails applications, a \"partial update\" (a.k.a. `update_attributes`) is the most common use-case for an update-like request. Just imagine having to re-submit full representations of large/complex resources on every update (like nested attributes or **file attachments**).\n\nHaving said that, I'd vote for routing `PATCH` to the `update` action, and coming up with a separate action with `PUT` semantics (create/update full representations) in Rails 4.\n", "created_at": "2011-12-16 22:19:34", "user": 80070, "id": 3183396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3183464", "text": "@dlee I'm aware of that.\n\nI'm just confused about \"lacking the stamp of RFC Internet Standard\". PATCH, Cookies, and C-D are Proposed Standards. HTTP/1.1 _currently_ is  a draft standard, but will be back at \"proposed\" soonish. As a matter of fact, most of the internet runs on \"proposed\" standards.\n", "created_at": "2011-12-16 22:26:21", "user": 332994, "id": 3183464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3183998", "text": "@mikekelly No, I don't know of any implementations off the top of my head. As for idempotent PUTs, the problem is _precisely_ that clients assume the idempotent properties of PUT, but the server might not do idempotent updates in PUT.\n\n@exviva I agree. But I think there should be some sort of transitional stage in 3.x that introduces devs to PATCH and allows them to opt-in before Rails 4.\n", "created_at": "2011-12-16 22:59:50", "user": 7035, "id": 3183998}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3186436", "text": "@dlee ok, but what does the invalid use of PUT for non-idempotent requests have to do with the use of _idempotent_ partial updates? Are you implying that idempotent partial updates aren't possible?\n", "created_at": "2011-12-17 00:12:39", "user": 55782, "id": 3186436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3186678", "text": "@mikekelly Sorry, I don't understand why you're talking about \"idempotent partial updates\". My worry is with _non_-idempotent partial updates happening behind a PUT request (expected to be idempotent).\n", "created_at": "2011-12-17 00:44:38", "user": 7035, "id": 3186678}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3187917", "text": "@mikekelly If you document you can delete a resource via POST requests, that's your business. Users of your API can certainly read that documentation and understand it.\n\nIf you allow idempotent partial updates via PUT requests also that's your business. Users of your API can read that documentation and understand it.\n\nBut If you are a Rails programmer and want to provide DELETE for deletion and PUT for full updates the framework provides the means[*]. As of today there's no builtin way to do partial updates, because there's no builtin way in HTTP. This thread is about whether Rails as a framework should do something about this, not about the practical urgency you may feel. People have done delete via POST for ages.\n\n[*] The current idioms with update_attributes are perfectly fine for full representations via PUT. \"Full representation\" belongs to your interface, update_attributes is your implementation. If your API requires a full representation (except perhaps for some internal stuff like cache counts), update_attributes allows you to store one just fine.\n", "created_at": "2011-12-17 05:40:42", "user": 3387, "id": 3187917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3190662", "text": "@fxn \n\n> As of today there's no builtin way to do partial updates, because there's no builtin way in HTTP\n\nit's already built into rails and works ok over HTTP, afaict:\n\n`curl -H \"Accept: application/json\" http://test.dev/widgets/1`\n\n`{\"id\":1,\"foo\":\"bar\", \"fizz\": \"buzz\", \"car\": \"blue\" }`\n\n`curl -H \"Content-Type: application/json\" -X PUT -d \"{ \\\"foo\\\": \\\"partially updated\\\" }\" http://test.dev/widgets/1`\n\n`curl -H \"Accept: application/json\" http://test.dev/widgets/1`\n\n`{\"id\":1,\"foo\":\"partially updated\", \"fizz\": \"buzz\", \"car\": \"blue\" }`\n", "created_at": "2011-12-17 18:20:07", "user": 55782, "id": 3190662}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3190797", "text": "Sure, and so does `GET /foos/1&action=delete` to delete a resource, but that doesn't mean you're not violating HTTP's semantics to do it.\n", "created_at": "2011-12-17 18:41:55", "user": 27786, "id": 3190797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3191121", "text": "@steveklabnik most people agree that 2616 is not clear enough for this to be a serious issue, hence why httpbis has looked to improve it. I'm yet to figure out why exactly that semantic needs to be put in place by httpbis. It doesn't appear to be necessary and it prevents partial idempotent updates (PIUs).\n\nPIUs are important, particularly for mobile devices that operate on crappy networks and need to be able to make extremely granular requests (i.e. partials) that can be retried easily on failure (i.e. idempotently).\n\nThe fact is, rails behaves this way - it's demonstrably useful, and non-demonstrably detrimental to either rails applications or the web as a whole.\n\nI think it's probably better to leave it as it is - given the contention over 2616 - and wait to see what happens with httpbis.\n", "created_at": "2011-12-17 19:54:08", "user": 55782, "id": 3191121}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3191836", "text": "@mikekelly I think 2616 is clear enough on the issue of PUT being full-resource replacements, but just in case it wasn't clear enough, there's also the RFC 5789 to make it explicitly clear.\n\nPIUs, and just partial updates in general, are important, we all agree. That's the whole point of this pull request--let's support the proposed standard of using PATCH to do partial updates.\n\nPUT mandates idempotent full (non-partial) updates.\nPATCH allows full or partial updates, idempotent or not.\n\n@reschke Yes, a lot of the internet runs on `Proposed Standard`s. That's why we shouldn't dismiss PATCH even though it's a `Proposed Standard`, because it's too restrictive to _only_ support `Internet Standard`.\n", "created_at": "2011-12-17 22:19:50", "user": 7035, "id": 3191836}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3192228", "text": "@dlee I don't want to argue semantics because it won't go anywhere, but would you agree there must've be some ambiguity that causes it to need updating by httpbis?\n\nThe problem with moving to PATCH is that it's not equivalent since its definition is not idempotent: \"[PATCH is neither safe nor idempotent](http://tools.ietf.org/html/rfc5789#section-2)\", this means that - on the web - these requests cannot be considered idempotent (even if your client and server know better). This means that any supporting infrastructure e.g. HTTP client libraries which know they can retry PUT requests on network failure, or generic accelerating proxies that perform a similar function cannot do so on these PATCH requests - even if they are intended idempotently, on the network they aren't.\n\nFwiw, that kind of argument does not hold up in the same way for the guaranteed fullness of a PUT request, which is exactly my problem with that (over)specification. \n", "created_at": "2011-12-17 23:37:06", "user": 55782, "id": 3192228}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3193563", "text": "@mikekelly From what I can tell, it's clear that PUT means full-resource updates, and the purpose of RFC 5789 (PATCH) is not mainly to clarify PUT's definition (it does clarify, if only by taking for granted that PUT is full-resource replacement), but to provide a solution for a glaring hole in HTTP--namely, the lack of partial updates.\n\nI agree with you that PATCH does not guarantee idempotent updates. I agree with you it might be useful to have a verb that allows partial and idempotent updates. However, PUT is not it (no partial updates). Neither is PATCH (updates not guaranteed to be idempotent). There is no verb in HTTP that guarantees idempotent behavior while allowing partial updates.\n\nYour desire for such a verb should not prevent PATCH from being supported in Rails. As for idempotent partial updates, it seems like using subresources (as discussed in previous comments) is the best strategy for now.\n\nAfter all this, though, it seems we're pretty much on the same page. I think you'd agree it would be good to support PATCH in Rails if it's clear that PUT does not allow partial updates. Our task, then, is to ascertain whether or not PUT supports partial updates. And between RFCs (new and old) and Roy Fielding, it seems pretty clear the authorities are against partial updates in PUT. Can we agree on this?\n", "created_at": "2011-12-18 07:12:36", "user": 7035, "id": 3193563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3193568", "text": "(With infinite love to @tenderlove).\n\n@mikekelly Ruby on Rails does not define HTTP semantics, as a web framework it has to provide _means to its users to be able to adhere to them if they want to_, promote proper usage of them, and still allow users to do delete via GET and partial updates via PUT (ie, promoting, not lecturing).\n\nToday, to toggle the paid flag of an invoice and follow proper HTTP semantics, you have to make that flag a resource. That's for me a conclusion of this thread, based on quotes from Roy Fielding.\n\nSo the topic of the thread is: _given_ these definitions, what should Rails do next? Perhaps the answer is PATCH, or perhaps is nothing, we still don't know.\n\nAnd if Rails had some sort of support for PATCH, you still would not be able to do idempotent partial updates and adhere to HTTP semantics at the same time. That's just how things are defined, it's not under the control of Rails. To discuss the convenience of this you need to discuss with the HTTP guys, not the Rails guys.\n", "created_at": "2011-12-18 07:16:58", "user": 3387, "id": 3193568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3194099", "text": "@fxn the problem here is that you're insisting that your interpretation of the semantics in 2616 is the only valid one, which is not the case. Debating semantics is utterly pointless, but it is worth acknowledging that this particular discussion about PUT has been around for lot longer than this PR - which suggests that there is, in fact, more than one valid interpretation.\n\nSo even if \"we must follow the spec at all costs\" was a valid logical argument - in this instance it doesn't really move us forward due to the unavoidable reality that part of the spec in question is up to interpretation.\n\nSo, as I've said previously in this thread, I think we're far better off focusing on the **actual benefits and problems** of moving away from or staying with partial idempotent updates. I've already made a case for sticking with what we have:\n\nPIUs are important, particularly for mobile devices that operate on crappy networks and need to be able to make extremely granular requests (i.e. partials) that can be retried easily on failure (i.e. idempotently).\n\nThe fact is, rails behaves this way - it's demonstrably useful, and non-demonstrably detrimental to either rails applications or the web as a whole.\n\nI think it's probably better to leave it as it is - given the contention over 2616 - and wait to see what happens with httpbis.\n\n_Aside from the concerns about following the spec,_ why do you think partial updates via PUT are bad for either rails apps or the web?\n", "created_at": "2011-12-18 10:46:30", "user": 55782, "id": 3194099}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3194303", "text": "@mikekelly you can make a PATCH request idempotent by adding \"If-Match\".\n", "created_at": "2011-12-18 11:48:39", "user": 332994, "id": 3194303}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3194340", "text": "@mikekelly I don't say this is the only valid interpretation. At the beginning of the thread it was my reading of the spec, and it was what other sources interpreted. It is also clear that we are not inventing this controversy, it is old.\n\nAfter this thread, we have a pulse of the generic consensus and Roy Fielding's view on this topic. And I believe that opinion is key. If Roy said \"go do partial updates with PUT\" we had already closed the PR.\n\nThis tells me that if I have to bet, I know where to bet. Not saying the other interpretation is wrong. The spec is ambiguous, so there's no right or wrong. It could be the case that the ambiguity was an overlook, I personally don't know. But what we have is consensus (different from unanimity), and the +1 of Roy Fielding regarding not doing partial updates with PUT.\n\nSo, Rails is (probably) going to provide a way for the majority of people participating in this thread that would like to do partial updates without PUT. At the same time, you will be able to continue doing partial updates via PUT.\n\nMind you, if we do something I don't expect it to be a dramatic change. At least at the beginning. It could be something discreet, like being able to say :method => :patch, and adding routing and conventions without changing defaults. Backwards compatibility must be respected, and indeed you may be doing form_for with a full-representation, which is the canonical use case of form_for reused in create and update views.\n\nAnd yes, adhering to the spec/semantics is enough for me to consider adding support for this. Why does Rails support DELETE? Couldn't people delete via POST? Sure, and we are doing it all the time, but that's irrelevant, it is the duty of Rails to give you a way to do proper DELETE. When you work with polynomials you don't say \"superscript\", you say \"exponent\". And when people mean partial update, they are going to be able to say PATCH.\n", "created_at": "2011-12-18 12:01:17", "user": 3387, "id": 3194340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3194692", "text": "@reschke is that an explicit part of PATCH in its latest incarnation? Of course - that approach would also prevent non-conditional PIUs, right?\n\n@fxn I'm definitely not keen on this change - it's unnecessary, more complex, and stands to invalidate existing standard rails practices. It's unnecessary because it doesn't actually appear to achieve very much other than to satisfy:\n- a part of 2616 that doesn't even have to exist according to a valid interpretation\n- Roy Fielding's proposed clarifications in an spec that's not been published yet\n\nwe're going round in circles here and I have nothing to add at the moment, so I'm going to bow out for now\n", "created_at": "2011-12-18 13:28:56", "user": 55782, "id": 3194692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3194754", "text": "@mikekelly this applies to any HTTP method; for PATCH, see http://greenbytes.de/tech/webdav/rfc5789.html#rfc.section.2.p.4\n\nre: \"that's not been published yet\" -- oh, it _is_ published as Internet Draft, just not approved as RFC yet. Publication of Internet Drafts is for community review and gathering feedback. Hint, hint.\n", "created_at": "2011-12-18 13:45:50", "user": 332994, "id": 3194754}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3195601", "text": "@mikekelly -- Over and over gain you've pointed out that rails supports partial idempotent updates.  This is true, but `update_attributes` and the common idioms of rails (i.e. using `accepts_nested_attributes_for`) often result in a non-idempotent partial update.  Consider this params hash from the [API docs](http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html):\n\n``` ruby\nparams = { :member => {\n  :name => 'joe', :posts_attributes => [\n    { :title => 'Kari, the awesome Ruby documentation browser!' },\n    { :title => 'The egalitarian assumption of the modern citizen' },\n    { :title => '', :_destroy => '1' } # this will be ignored\n  ]\n}}\n```\n\nThis is not idempotent, because every time the `update_attributes` processes this hash, it creates two new posts (one with the title \"Kari, the awesome Ruby documentation browser!\", one with the title \"The egalitarian assumption of the modern citizen\").\n\nThus the conventions and idioms that rails encourages developers to use result in non-idempotent PUTs. Putting aside the full vs. partial question for a second, the non-idempotency here is a big problem.\n", "created_at": "2011-12-18 16:54:58", "user": 49391, "id": 3195601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3198021", "text": "Fielding weighs in: http://tech.groups.yahoo.com/group/rest-discuss/message/18091\n", "created_at": "2011-12-19 00:31:11", "user": 27786, "id": 3198021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3203358", "text": "And Fielding with [a non-snarky answer](http://tech.groups.yahoo.com/group/rest-discuss/message/18098):\n\n> PUT means PUT. There are no\n> partial updates in PUT. There was a half-assed attempt to add those\n> semantics by committee in the midst of standardizing HTTP, but that\n> attempt failed because PUT's existing semantics had already been deployed\n> and we can't graft partial updates on top of existing replace semantics.\n> Period. End of story. Hence, PATCH was defined in 1995 (and finally\n> standardized much later because the WebDAV group was lazy).\n> \n> This answer is final. If anyone implements it differently in Rails,\n> then Rails will be neither compliant with HTTP nor compliant with REST.\n> Whether that matters to anyone developing Rails is besides the point.\n\nGame over, man. Game over.\n\nNow, to the question he addresses in his final paragraph: does this actually matter, to us? I obviously think it does.\n", "created_at": "2011-12-19 13:58:18", "user": 27786, "id": 3203358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3203495", "text": "Case closed!\n\nYes, it matters.\n\nWe are about to release 3.2 RC, it's too late for 3.2, but I think the time it took to discuss this has been worthwhile because we didn't have such a clear and authoritative point of view at the beginning. Knowing which are the rules without doubt, we have the right mindset to work on the PR.\n", "created_at": "2011-12-19 14:12:48", "user": 3387, "id": 3203495}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3203523", "text": "please consider my response to that, and wait for the discussion to play out.\n\nobligatory meme:\n\n![recognize, bitches.](http://farm1.staticflickr.com/149/421186578_6d6bdf9398.jpg)\n", "created_at": "2011-12-19 14:15:35", "user": 55782, "id": 3203523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3203549", "text": "Roy is responsible for the changes in httpbis so it's hardly an earth shattering revelation that he believes 2616 should be interpreted that way.\n", "created_at": "2011-12-19 14:17:07", "user": 55782, "id": 3203549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3204269", "text": "He's also an author of 2616, so I'd expect him to be a pretty valid source when requesting clarification of it, too.\n\n> Knowing which are the rules without doubt, we have the right mindset to work on the PR.\n\nRight. The real question is this: how far do we want Rails to go? Obviously, Rails cannot make every web service RESTful; that relies on human design. I _would_ like to see Rails make it _easier_ to comply with HTTP and HATEOAS, though, by providing helpful things in that regard. That's obviously longer-term and out of the scope of this pull request. However, this is a good start. I think the _correct_ option as far as this pull request goes is this:\n\n1) Add two new actions: patch and upsert. The update action should match to POST, the patch to PATCH, and upsert to PUT.\n2) Start off with having this as a configuration option, ActionController.update_verb, which is set to :post in new rails apps, but has a default of :put so that old apps still work.\n3) In Rails+1, change the default to :post but leave the option so that people can set it if they still don't want to update.\n\n'upsert' isn't a great name. I've run across some people who don't know what this means, but it _does_ capture what PUT is supposed to do in one, short word.\n", "created_at": "2011-12-19 15:18:32", "user": 27786, "id": 3204269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3204458", "text": "@steveklabnik keep in mind that just changing PUT to PATCH doesn't make things better magically, you _also_ need an Internet Media Type describing the patch format. And no, \"application/json\" doesn't.\n", "created_at": "2011-12-19 15:29:52", "user": 332994, "id": 3204458}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3204728", "text": "Also, @mikekelly asked me to make something perfectly clear, so here it is:\n\nI think that standards should be followed, because they're standards. They're the working agreements that we all go by, and if we discover that we're not compliant, software should changed based on that and nothing else. This doesn't mean they're infallible, and when they get revised, things should be changed again. Because compliance with a spec is the most important thing.\n\nWe now return to your regularly scheduled pull request.\n", "created_at": "2011-12-19 15:45:53", "user": 27786, "id": 3204728}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3204759", "text": "@reschke right. Baby steps. That's why I think that POST actually works _better_ for what rails calls update.\n", "created_at": "2011-12-19 15:47:55", "user": 27786, "id": 3204759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3204922", "text": "it was tongue in cheek, and my point was that until httpbis makes it completely clear - there is no _requirement_ to churn rails, because there are valid interpretations of 2616 which are perfectly fine with the current behaviour.\n\nSo, essentially, jumping the httpbis gun w/ this PR **is** driven by speculation and/or pedantry and **not** a need to conform to a spec which unquestionably requires the change (there isn't one, HTTPbis is a WIP) or fix a functional problem with rails (there isn't one of these, either). I think everyone should be clear about that.\n", "created_at": "2011-12-19 15:56:31", "user": 55782, "id": 3204922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3205007", "text": "> So, essentially, jumping the httpbis gun w/ this PR is driven by speculation and/or pedantry rather than conforming to a spec which unquestionably requires the change (there isn't one, HTTPbis is a WIP) or fixing a functional problem with rails (there isn't one of these, either). I think everyone should be clear about that.\n\nThat's not it at all. We have the one of the authors of the HTTP 1.1 spec, and the inventor of REST (which rails at least tries to adhere to...) saying that PUT means only full representations, and that rails is not in line with the HTTP or REST to allow it any other way.\n", "created_at": "2011-12-19 16:01:15", "user": 49391, "id": 3205007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3205066", "text": "tl;dr cliffnotes for @tenderlove: change from this PR is significant, doesn't need to happen - may do in future if/when next revision of HTTP invalidates the approach. Roy Fielding is the ineffable fountain of HTTP wisdom.\n", "created_at": "2011-12-19 16:05:22", "user": 55782, "id": 3205066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3205125", "text": "> That's not it at all. We have the one of the authors of the HTTP 1.1 spec, and the inventor of REST (which rails at least tries to adhere to...) saying that PUT means only full representations, and that rails is not in line with the HTTP or REST to allow it any other way.\n\nRoy is an insanely smart guy and definitely an authoritative source on HTTP. His insight and opinion is important. But his opinion does not magically make 2616 more clear on this issue than it is. It's not clear. This is why Roy himself has revised it.\n", "created_at": "2011-12-19 16:08:58", "user": 55782, "id": 3205125}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3205144", "text": "@mikekelly we have not outlined yet the path, as I said before I don't expect to do any dramatic changes any time soon. Let's explore.\n\nAt this point in the thread, the conclusion is that we are going to add _some_ support for PATCH and promote good practices regarding PUT/PATCH in Rails applications. Good practices as described by Roy Fielding.\n\nBut progressively, and with backwards compatibility as a must. At least for the time being.\n", "created_at": "2011-12-19 16:10:12", "user": 3387, "id": 3205144}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3205354", "text": "> At this point in the thread, the conclusion is that we are going to add some support for PATCH and promote good practices regarding PUT/PATCH in Rails applications. Good practices as described by Roy Fielding.\n> \n> But progressively, and with backwards compatibility as a must. At least for the time being.\n\nOk fair enough, in that case it looks like @NZKoz hit the nail on the head over a month ago.. https://github.com/rails/rails/pull/505#issuecomment-2768361\n", "created_at": "2011-12-19 16:23:22", "user": 55782, "id": 3205354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3205433", "text": "The point of following the discussion was to know whether we should have to add _anything at all_. At that point we didn't know.\n\nIf Roy said \"yeah, just do partial updates with PUT\" no flag should be added, no code should be in core.\n\nIf Roy says \"PUT means PUT. There are no partial updates in PUT.\" that justifies working on the PR. Working on the PR means what I said above, it does not mean applying the very patch.\n", "created_at": "2011-12-19 16:28:41", "user": 3387, "id": 3205433}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3221496", "text": "Allowing access to PATCH as a configuration option will help drive awareness and adoption. Further down the line, we might well see a larger number of devs and applications clamoring for a change of default configuration, in much the same way we saw jQuery make its way in core.\n\nCount this as +1 to a configuration option.\n", "created_at": "2011-12-20 16:49:24", "user": 37793, "id": 3221496}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3224949", "text": "Rails 4 has been announced for the summer. How much PATCH support should we get in? There have been various proposals of how to support PATCH in Rails 4:\n- make PATCH and PUT both map to `update` and:\n  - make edit forms use PATCH by default and PUT by configuration opt-in\n  - make edit forms use PUT by default and PATCH by configuration opt-in\n- split `update` into different actions that map better to PUT and PATCH\n", "created_at": "2011-12-20 20:42:11", "user": 7035, "id": 3224949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3224990", "text": "@dhh [mentioned on Twitter](https://twitter.com/#!/dhh/status/149154266655891457) that he supports some kind of support.\n\nReally, to be honest, I think this pull request should probably be closed, and a discussion thread should be made on rails-core about it. That's sorta out of the scope of this particular PR.\n", "created_at": "2011-12-20 20:44:25", "user": 27786, "id": 3224990}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3225195", "text": "We should have a config option called `config.method_for_update`. Both routes and forms should respect this option. There is no need to generate both routes. It makes no sense to split update in two actions.\n", "created_at": "2011-12-20 20:58:02", "user": 9582, "id": 3225195}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3225233", "text": "In other words, this pull request is almost good imo. It just needs to provide a `config.method_for_update`, make both AV and the router read from this config and change the router to stop generating both put and patch for update.\n", "created_at": "2011-12-20 21:00:24", "user": 9582, "id": 3225233}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3225299", "text": "@josevalim It really depends on how far you actually want to go. A 'rails 4' gives a big opportunity to step back and evaluate the whole 'Rails REST' thing in general.\n\nThen again, it seems that rails core wants rails 4 to be more of a normal release, so...\n\nRegardless, I agree about this patch. It's good regardless of that stuff.\n", "created_at": "2011-12-20 21:03:37", "user": 27786, "id": 3225299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3225584", "text": "If Rails core gives the OK, I can fix the patch according to @josevalim's recommendations.\n", "created_at": "2011-12-20 21:23:16", "user": 7035, "id": 3225584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3225622", "text": "PATCH and PUT have different semantics. PUT means create/replace and it is idempotent. PATCH means update (full or partial) and it is not idempotent.\n\nIf your application is a s3 clone, you want to upload assets with PUT. I think we need to be able to have both working, rather than a exclusive option.\n", "created_at": "2011-12-20 21:26:08", "user": 3387, "id": 3225622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3225744", "text": "@fxn I agree both options should work, it is just a matter of what we choose as default. For instance, the router should generate just put or patch routes by default for resources, however if for some specific case I want to use both PUT and PATCH or another, I should be able to do it. The same for the view, responders, etc... they should work for both put and patch.\n", "created_at": "2011-12-20 21:35:08", "user": 9582, "id": 3225744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3225769", "text": "@josevalim :+1:\n", "created_at": "2011-12-20 21:36:45", "user": 3387, "id": 3225769}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3225882", "text": "So as both me and @fxn agree, we would love to receive a new pull request that adds those small changes to this already existing pull request. Thanks @dlee for holding on all this time.\n", "created_at": "2011-12-20 21:44:46", "user": 9582, "id": 3225882}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3243620", "text": "I hinted at this above, but to reiterate: besides changing rails so that it supports PATCH, I'd also like to see improved support for proper PUT semantics.  Currently, rails idioms and conventions do not make this easy.  Specifically:\n- The common AR method used for updates is `update_attributes`. It supports updates of the full representation, but it also supports partial updates, which, as we've discussed above, is a violation of PUT semantics (at least in the mind of Fielding and other HTTP experts).\n- `update_attributes` also supports non-idempotent updates when used in combination w/ `accepts_nested_attributes_for`.\n- I think the simplest way to provide an update method that does provide proper PUT semantics is a new method, `replace_attributes`.  It would set any attribute that is not included in the hash to `nil`, and thus treat the given attribute hash as the full resource.\n\nWould the rails core team by interested in the addition of this API? I'm willing to take a stab at it, and can open another ticket to discuss further details, but figured it was worth inquiring here first.\n", "created_at": "2011-12-22 03:46:57", "user": 49391, "id": 3243620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3245206", "text": "I like that idea; it'd make adhering to HTTP much easier.\n\nI'd prefer a method name that more strongly indicates the full-resource replacement. What do you think about `full_replace`, `replace_all_attributes`, `replace_resource`, `replace_with`, or simply `replace`? An even stronger word might be `supplant`, but that just doesn't have a nice ring to it.\n", "created_at": "2011-12-22 05:34:03", "user": 7035, "id": 3245206}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3245941", "text": "If there would be a method, I would simply call it `replace_attributes`. BUT in my opinion and experience it doesn't make sense at all to have a method like this in Rails because `replace_attributes` would be tied to the model while its behavior should actually be given by the resource (which is then defined by the application). Remember that different actors in the system (for example user and admin) may see the same model as two different resources where PUT would behave differently for each. Even without those actors, a single model may be exposed as two different resources or vice-versa.\n\nIn other words, `replace_attributes` (or anything like that) would be a poor fit and ultimately lead to poorly designed APIs as people would believe that a call to `replace_attributes` would be everything you would need to have proper PUT semantics.\n", "created_at": "2011-12-22 06:21:37", "user": 9582, "id": 3245941}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3246101", "text": "You bring up good points, @josevalim.  I agree that people tend to think \"model == HTTP resource\" (or not even really think in terms of HTTP resources) and `replace_attributes` may seem to implicitly condone that line of thinking.\n\nThat said, rails doesn't currently have _anything_ that helps make it easy to implement proper PUT semantics.  If you want to implement proper PUTs you are essentially totally on your own.  Do you have a better suggestion?  (Also, should we take this to another thread? I don't want to derail the discussion here, but it's certainly related).\n\nAs I see it, `replace_attributes` isn't the perfect answer to HTTP spec or REST compliance any more than the rails scaffolds are.  But it is a tool that can help make it easier to implement proper semantics (FWIW--I implemented this in one of my models on a recent project, and it worked great).\n", "created_at": "2011-12-22 06:50:20", "user": 49391, "id": 3246101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3246301", "text": "How Rails doesn't provide anything? Rails is a **framework**, anyone can provide his own PUT setup according to his application semantics, as you did. And probably in less than 30LOC! Please start a new discussion as I have no interest in the direction this is going.\n", "created_at": "2011-12-22 07:25:57", "user": 9582, "id": 3246301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3246518", "text": "Yeah, me neither.\n\nResources are conceptual, ARs model database tables. There's a gap there that I think would show as a complicated setup for such a simple thing.\n\nI prefer to discuss that in another issue or PR.\n", "created_at": "2011-12-22 08:05:07", "user": 3387, "id": 3246518}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3249849", "text": "@josevalim and @fxn: no need for another ticket. Two core rails members have weighed in against the idea.  Thanks for the input.  That's one less open source contribution I need to worry about; I have enough on my plate as it is.\n", "created_at": "2011-12-22 14:59:07", "user": 49391, "id": 3249849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4109402", "text": "#5130 merged.\n", "created_at": "2012-02-22 17:16:56", "user": 3948, "id": 4109402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4758652", "text": "In the risk on being pedant by arguing on a closed discussion against the last three comments (@josevalim, @fxn and @myronmarston), where I even haven't any personal use case yet, I will still make my point here, since I don't know where it goes better.\n\nRails does not provide a clean way to map resources to models \"to and fro\", which makes josevalim's point somewhat valid. I mean, devs usually call a model into a variable (normally in the controlle's show method), but they might as well make a mix of some related models to represent the resource that they want to expose. In this second case, they then have to rip the params off in the update action, so that they get the different models to validate and save and so on. That's what I see as a weak part of the framework. I feel that josevalim's argument could backing up a kind of \"presenters-and-back\" as a best way to translate/map models into resources, and that the implementation of such a paradigm into Rails should be seriously weighted. Were they dismissed (which I suppose, for that is a whole subject in itself), I would then come to my conclusion: **I dislike disregarding a new method called `replace_resource`** , which sets all empty attributes to nil (or blank, depending on validation rules), supposed that it gets applied on a single model. You can afterwards put all needed warnings in the documentation about the semantic meaning of it. I mean, Rails 4 is going to promote a new verb just to adhere to standards, without any appreciable gain in the short term, just for the sake of it? Do you really mean that you are going to leave devs on their own, having to understand why to use this or that, without further help? _\"Boy, if you want to make proper use of this new feature that we advocate, you'll have to write your own methods for it, it's just 30LOC, boy. After all, Rails is just a framework, don't expect too much from us.\"_\n\nSee my point? I know I am a bit sarcastic at giving reasons for my petition, but I do it just in order to make it crystal clear and avoid another six months of discussion on the need of such method. I hope I got it.\n\nPS. Sorry for coming in so late, I just saw the thread linked in the Rails Blog. I got through the whole of it, oh my!\n", "created_at": "2012-03-28 12:09:28", "user": 522879, "id": 4758652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4819622", "text": "I elaborated a bit more [on the subject of ResourceAccessor](https://gist.github.com/1974187#gistcomment-202538) and how and why the `replace_resource` method is needed..\n", "created_at": "2012-03-29 13:58:38", "user": 522879, "id": 4819622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/34792669", "text": "fwiw, I backported the HTTP PATCH verb work for Rails 3.2 https://gist.github.com/bf4/8940203\n", "created_at": "2014-02-11 19:08:34", "user": 142914, "id": 34792669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/264096167", "text": "Hi @bf4,\r\n\r\nYour patch doesn't work with my app. Rails 3.2.22.5\r\n\r\nIt crashes when running the web server with the following error:\r\n\r\n> .rvm/gems/ruby-1.9.3-p551@rails3.2/gems/actionpack-3.2.22.5/lib/action_dispatch/routing/mapper.rb:178:in `default_controller_and_action': missing :action (ArgumentError)\r\n\r\nWhen running 'rake routes'\r\n\r\n> rake aborted!\r\nArgumentError: missing :action\r\n/Users/danolee/.rvm/gems/ruby-1.9.3-p551@rails3.2/gems/actionpack-3.2.22.5/lib/action_dispatch/routing/mapper.rb:178:in `default_controller_and_action'\r\n\r\nAny help will be greatly appreciated.", "created_at": "2016-12-01 07:15:59", "user": 331913, "id": 264096167}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 506, "updated_at": "2014-06-26 10:58:40", "user": 7035, "closed_at": "2011-05-11 06:30:38", "id": 880714, "title": "Test csrf token param name customization", "url": "https://api.github.com/repos/rails/rails/issues/506", "created_at": "2011-05-11 01:54:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The tests probably broke in 0e1dcae1857db4f6721561caff38d8be748d0b40\n", "labels": [], "number": 507, "updated_at": "2014-07-03 04:05:18", "user": 7035, "closed_at": "2011-05-11 06:31:09", "id": 880809, "title": "Fix tests to reflect IdentityMap no longer default", "url": "https://api.github.com/repos/rails/rails/issues/507", "created_at": "2011-05-11 02:23:48", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Title says it all. \n\nI've attached a patch which causes tests to break in the ActiveRecord test suite. I'm not really sure if this is the best way to discuss the error.\n\n```\ndiff --git a/activerecord/test/models/membership.rb b/activerecord/test/models/membership.rb\nindex 905f948..8ed111e 100644\n--- a/activerecord/test/models/membership.rb\n+++ b/activerecord/test/models/membership.rb\n@@ -6,4 +6,8 @@ end\n class CurrentMembership < Membership\n   belongs_to :member\n   belongs_to :club\n+\n+  def self.default_scope\n+    select(\"memberships.*\").select(\"'1' as Active\")\n+  end\n end\n```\n", "labels": [], "number": 508, "updated_at": "2011-05-11 07:57:36", "user": 224373, "closed_at": "2011-05-11 07:57:36", "id": 881368, "title": "Default scope on the middle relation of has_one :through => breaks it", "url": "https://api.github.com/repos/rails/rails/issues/508", "created_at": "2011-05-11 06:00:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1135928", "text": "@wakeless in which Rails version do you see the breakage? Is it a regression?\n", "created_at": "2011-05-11 06:32:25", "user": 9582, "id": 1135928}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1135959", "text": "This is in 3.1.beta1. I didn't ever have this problem previously, so yes. It\nprobably is.\n\nOn Wed, May 11, 2011 at 4:32 PM, josevalim <\nreply@reply.github.com>wrote:\n\n> @wakeless in which Rails version do you see the breakage? Is it a\n> regression?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/508#comment_1135928\n\n## \n\nCheckout my new website: http://myachinghead.net\nhttp://wakeless.net\n", "created_at": "2011-05-11 06:42:55", "user": 224373, "id": 1135959}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1136000", "text": "I'll investigate...\n", "created_at": "2011-05-11 06:49:57", "user": 1979, "id": 1136000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1136007", "text": "Thanks. I believe this is a regression then because it is only bringing the fields in memberships and not everything else? If this is the case, we can either ignore the select scope on associations or require you to explicitly pass :select => \"*\" when building the association. @jonleighton, what do you think?\n", "created_at": "2011-05-11 06:50:48", "user": 9582, "id": 1136007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1136188", "text": "@josevalim these `select()` calls are on the join model though, so I am pretty sure we should just ignore them. The bug is an artefact of the merging in `ThroughAssociation#target_scope`.\n", "created_at": "2011-05-11 07:38:54", "user": 1979, "id": 1136188}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1136213", "text": "It's worth noting that any other calls like where() shouldn't be ignored, I can probably add that to the test if you like\n", "created_at": "2011-05-11 07:43:44", "user": 224373, "id": 1136213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1136266", "text": "@wakeless don't worry, there are already tests for that.\n", "created_at": "2011-05-11 07:53:55", "user": 1979, "id": 1136266}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm not 100% sure if this is a documentation bug or a bug in AR itself. However the old example in the docs\n\n```\nPost.unscoped {\n  limit(10) # Fires \"SELECT * FROM posts LIMIT 10\"\n}\n```\n\ndoes not work, it has to be\n\n```\nPost.unscoped {\n  Post.limit(10) # Fires \"SELECT * FROM posts LIMIT 10\"\n}\n```\n", "labels": [], "number": 509, "updated_at": "2014-07-03 04:05:24", "user": 175494, "closed_at": "2011-05-11 07:31:49", "id": 881584, "title": "fix bug in usage example of #unscoped", "url": "https://api.github.com/repos/rails/rails/issues/509", "created_at": "2011-05-11 07:21:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1136302", "text": "@gucki , just FYI, you can commit documentation related fixes in https://github.com/lifo/docrails yourself. They get regularly cherrypicked/synched into master.\n", "created_at": "2011-05-11 08:04:38", "user": 762, "id": 1136302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1136352", "text": "Thanks, good to know :)\n", "created_at": "2011-05-11 08:17:29", "user": 175494, "id": 1136352}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi All, \n\nWhile browsing through the source of release branch 0.10 I noted there is a file called `jquery.js` inside the core, which happens to be contained of extensions (and plugins) to jQuery. \n\nI would suggest a better naming convention for such a file could be something like 'jquery_extenions.js'. \n\nIt may be something trivial, however it could make understanding of Aloha source code easier.\n", "labels": [], "number": 510, "updated_at": "2011-05-11 09:08:01", "user": 5358, "closed_at": "2011-05-11 09:08:01", "id": 881992, "title": "File Name of jQuery Extenion ", "url": "https://api.github.com/repos/rails/rails/issues/510", "created_at": "2011-05-11 09:07:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Rails 3.1 raise the following error in production env:\nActionView::Template::Error (TypeError: a.reduce is not a function)\n", "labels": [], "number": 511, "updated_at": "2011-05-22 13:52:08", "user": 165599, "closed_at": "2011-05-21 16:55:45", "id": 882030, "title": "rails 3.1 raise error in production env", "url": "https://api.github.com/repos/rails/rails/issues/511", "created_at": "2011-05-11 09:14:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1136615", "text": "@timoschilling , can you please provide a gist with a complete backtrace? Also explain your scenario a bit more please.\n", "created_at": "2011-05-11 09:22:09", "user": 762, "id": 1136615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1137517", "text": "We are also getting this on CI. It is probably an error related to the uglifier gem and/or assets pipeline. @timoschilling, please provide the full backtrace and the result of \"bundle show\".\n", "created_at": "2011-05-11 10:36:07", "user": 9582, "id": 1137517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1137975", "text": "Setup:\n- Apache\n- Passenger 3.0.7\n- REE 1.8.7\n- Gems\n- Environment: production\n  - actionmailer (3.1.0.beta1)\n  - actionpack (3.1.0.beta1)\n  - activemodel (3.1.0.beta1)\n  - activerecord (3.1.0.beta1)\n  - activeresource (3.1.0.beta1)\n  - activesupport (3.1.0.beta1)\n  - arel (2.1.0)\n  - bcrypt-ruby (2.1.4)\n  - bson (1.3.0)\n  - builder (3.0.0)\n  - bundler (1.0.13)\n  - cancan (1.6.4)\n  - capistrano (2.5.18)\n  - carrierwave (0.5.3)\n  - coffee-script (2.2.0)\n  - coffee-script-source (1.1.0)\n  - devise (1.3.4)\n  - erubis (2.7.0)\n  - execjs (0.3.3)\n  - geocoder (1.0.0)\n  - haml (3.1.1)\n  - highline (1.6.1)\n  - hike (1.0.0)\n  - i18n (0.6.0beta1)\n  - jquery-rails (1.0)\n  - json (1.5.1)\n  - mail (2.3.0)\n  - mime-types (1.16)\n  - mini_magick (1.2.5)\n  - mongo (1.3.0)\n  - mongoid (2.0.1 b2eaa45)\n  - mongoid_acts_as_tree (0.1.7 4b0fc2d)\n  - multi_json (1.0.1)\n  - net-scp (1.0.4)\n  - net-sftp (2.0.5)\n  - net-ssh (2.1.4)\n  - net-ssh-gateway (1.1.0)\n  - orm_adapter (0.0.5)\n  - polyglot (0.3.1)\n  - rack (1.3.0.beta)\n  - rack-cache (1.0.1)\n  - rack-mount (0.7.2)\n  - rack-ssl (1.3.2)\n  - rack-test (0.6.0)\n  - rails (3.1.0.beta1)\n  - railties (3.1.0.beta1)\n  - rake (0.8.7)\n  - rdiscount (1.6.8)\n  - sass (3.1.1)\n  - sprockets (2.0.0.beta.2)\n  - thor (0.14.6)\n  - tilt (1.3)\n  - treetop (1.4.9)\n  - tzinfo (0.3.27)\n  - uglifier (0.5.1)\n  - vrame (0.6.0 77a5be8)\n  - warden (1.0.4)\n\nLog:\nStarted GET \"/xxxx/login\" for 127.0.0.1 at Wed May 11 11:11:55 +0200 2011\n  Processing by XXXX::SessionsController#new as \nRendered vendor/bundle/ruby/1.8/bundler/gems/xxxx-77a5be8b259d/app/views/vrame/sessions/new.html.haml within layouts/vrame (63.6ms)\n[Sprockets] xxxx/xxxx.css building\n[Sprockets] xxxx/xxxx.js building\nCompleted 500 Internal Server Error in 4174ms\n\nActionView::Template::Error (TypeError: a.reduce is not a function):\n    11: \n    12:     %title= @page_title ? \" - #{strip_tags(@page_title)}\" : \"XXXX\"\n    13:     = stylesheet_link_tag \"xxxxx/vrame\"\n    14:     = javascript_include_tag \"xxxxx/vrame\"\n    15:   %body\n    16:     = render :partial => 'xxxx/shared/header'\n    17:     = yield :sub_navigation\n\nRendered vendor/bundle/ruby/1.8/gems/actionpack-3.1.0.beta1/lib/action_dispatch/middleware/templates/rescues/_trace.erb (0.8ms)\nRendered vendor/bundle/ruby/1.8/gems/actionpack-3.1.0.beta1/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (0.7ms)\nRendered vendor/bundle/ruby/1.8/gems/actionpack-3.1.0.beta1/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (3.4ms)\n\nThe Error is not in the application template, the Error is with a empty template the same.\n\nIf i set the Envirement to development, every thinks works!\n", "created_at": "2011-05-11 10:56:55", "user": 165599, "id": 1137975}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142389", "text": "@timoschilling can you try changing uglifier in the Gemfile to gem 'uglifier', :git => 'https://github.com/lautis/uglifier.git' ?\nI think this should work.\n", "created_at": "2011-05-11 19:13:52", "user": 52642, "id": 1142389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150192", "text": "@timoschilling any news here?\n", "created_at": "2011-05-13 00:14:34", "user": 52642, "id": 1150192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152288", "text": "@spastorino i can test this only on the weekend\n", "created_at": "2011-05-13 11:14:03", "user": 165599, "id": 1152288}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172800", "text": "now i use `gem 'uglifier', :git => 'https://github.com/lautis/uglifier.git'`\n\ncurrently i become the error `ActionView::Template::Error (TypeError: statements.reduce is not a function)` in production env on the production server, running in development env works, local both env works\n", "created_at": "2011-05-16 11:24:42", "user": 165599, "id": 1172800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193379", "text": "Could you please output the result of \"ExecJS.runtime\" in development and production? You need latest ExecJS and you can get that in console.\n", "created_at": "2011-05-17 21:47:47", "user": 9582, "id": 1193379}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1200068", "text": "Uglifier had issues when used with `therubyrhino` runtime as its JS environment doesn't include some ES5 functions used in UglifyJS (Array.prototype.forEach, Array.prototype.reduce). At least `therubyrhino` seems to be working after lautis/uglifier@564cc9c617795d1978a332bda67080e3b8a0eba3.\n\nIf you run into similar issues with other runtimes (JScript?), please let me know so that I can fix them.\n", "created_at": "2011-05-18 21:43:59", "user": 19264, "id": 1200068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214922", "text": "Can't replicate with latest uglifier. Please reopen if you can replicate.\n", "created_at": "2011-05-21 16:55:45", "user": 2741, "id": 1214922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215842", "text": "the problem is still there in ree-1.8.7, i solve the problem for me with switching to ruby 1.9.2\n", "created_at": "2011-05-21 23:05:52", "user": 165599, "id": 1215842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216713", "text": "Do you still get the same exception? What ExecJS runtime are you using with ree-1.8.7?\n", "created_at": "2011-05-22 09:10:19", "user": 19264, "id": 1216713}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217270", "text": "the exception was the same or a little bit different. Sorry but i remove the ree environment and switch to 1.9.2\n", "created_at": "2011-05-22 13:52:08", "user": 165599, "id": 1217270}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "- If doing a count on a relation that has an :include and a :join.  And no party of the query depends on the tables in the :include, it does a distinct count even though it should not.\n- When doing a count on a relation that has an :include, it always falls back to an old style left outer join when performing the count.  Looks like it was broken here:\n  https://github.com/rails/rails/commit/b9599502c9e738a5a1513e75d08f8d40ed408265\n", "labels": [], "number": 512, "updated_at": "2014-07-03 04:05:30", "user": 533969, "closed_at": "2011-05-11 20:32:11", "id": 882052, "title": "Bug fixes:", "url": "https://api.github.com/repos/rails/rails/issues/512", "created_at": "2011-05-11 09:23:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1138292", "text": "Hi there,\n\nThanks for the pull request.\n\nCould you split these into two separate commits for each of the two bugs please?\n\nI am also going to leave some feedback inline on the commit.\n\nThanks\n", "created_at": "2011-05-11 12:18:04", "user": 1979, "id": 1138292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1141506", "text": "We can't really separate the two bug fixes.  It's just one fix that solves to problems.\n\nI cleaned up the tests in two of your comments.  But I'm not sure it is possible to do the third.  We resorted to inspecting the SQL because the count should be the same number either way.  The change just eliminates an unnecessary LEFT OUTER JOIN.  Any time it adds the join, it also adds a DISTINCT table_name.primary_column to the count condition, so the count that is returned is always the same.\n\nThe reason this problem came up is we were trying to join the table in ourselves, and the :includes was causing a duplicate table alias problem.  We could restructure the tests to do the same thing, although then we're just going to have a test that expects an exception NOT to be raised.\n\nLet me know your preference there, or if you have any other thoughts on another way of testing this.\n", "created_at": "2011-05-11 16:44:31", "user": 533969, "id": 1141506}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142203", "text": "Okay, you can definitely change `test_should_perform_joined_include_when_referencing_included_tables` to not inspect SQL as per my comment so it would be great if you could do that.\n\nThe other one - fair enough. However please add an assertion to check that `Account.includes(:foo).count == Account.count` (instead of your assertion checking the presence of 'count' in the query.\n\nFinally, please then squash everything into one commit (using git rebase -i).\n\nThanks!\n", "created_at": "2011-05-11 18:44:02", "user": 1979, "id": 1142203}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142744", "text": "Done and rebased.\n\nYeah, the checking for presence of 'count' in the query was there because when I was running it in isolation, if would actually generate two queries and I was checking the wrong one at first.  One for the count and another for describing the table.  Obviously won't happen when running the full suite of tests though.\n", "created_at": "2011-05-11 20:12:54", "user": 533969, "id": 1142744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142881", "text": "Thanks! :)\n", "created_at": "2011-05-11 20:33:24", "user": 1979, "id": 1142881}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Been looking for an opportunity to help out for a little while, and I just noticed that there was one reference in CollectionAssociation's class docs to AssocationCollection. I also noticed that it was referenced (in a string) in the NamedScopeTest.\n\nAlso, should the header `# = Active Record Association Collection` be changed to `# = Active Record Collection Association`?\n", "labels": [], "number": 513, "updated_at": "2014-07-03 04:05:34", "user": 446397, "closed_at": "2011-05-11 10:43:16", "id": 882434, "title": "Modified CollectionAssociation documentation to refer to the new class name", "url": "https://api.github.com/repos/rails/rails/issues/513", "created_at": "2011-05-11 10:30:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1137775", "text": "I think it is fine to change the header as well. No big deal, but looks good to be consistent with the class name. You could revise that bit through docrails directly.\n", "created_at": "2011-05-11 10:42:57", "user": 3387, "id": 1137775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1138011", "text": "Cool stuff. Thanks guys!\n", "created_at": "2011-05-11 11:10:35", "user": 446397, "id": 1138011}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "changed AR base#column_names, now instance variable @column_names ever assigned\n\nsee: \nhttps://rails.lighthouseapp.com/projects/8994/tickets/6774-arcolumn_names-doesnt-get-all-columns\n", "labels": [], "number": 514, "updated_at": "2014-07-03 04:05:37", "user": 120214, "closed_at": "2011-05-11 16:05:10", "id": 882707, "title": "column_names sometimes doesn't fetch all columns", "url": "https://api.github.com/repos/rails/rails/issues/514", "created_at": "2011-05-11 11:13:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1138140", "text": "Can you try and explain more clearly in what situation do you not get all the column names? There is a method called \"reset_column_information\" that you can call to bust the column cache. You usually use this method in a migration to work with a column just created/altered before working on it.\n", "created_at": "2011-05-11 11:46:08", "user": 762, "id": 1138140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1138931", "text": "Hi Asanghi,\nI don't get the column_names directly, the situation ist:\nI have a model composition, which is associated with composer(s) and work(s)\nthrough join tables to person and work, both have synonyms, stored in corresponding tables\n\nnow I have some scopes for sorting, one of them is following:\n\n  scope :sorted_by_title_and_composer, lambda{|direction| joins(:has_composer,:has_title)\n                                                          .includes(:has_composer => [:synonyms], :has_title => [:synonyms])\n                                                          .order(\"works.name #{direction}, people.name #{direction}\")}\n\nthis scope is used by a ajax search in following line:\n\nsorted_by_title_and_composer(direction)\n      .where(\"works.name LIKE ? OR people.surname LIKE ? OR people.prename LIKE ? OR person_synonyms.synonym LIKE ? OR work_synonyms.synonym LIKE ?\",'%'+search+'%','%'+search+'%','%'+search+'%','%'+search+'%','%'+search+'%')\n\ntrhat's the reason why I need the includes, hence I must also search the synonyms\n\nif I use includes for eager loading, then in the index view I have the error that a column doesn't exist.\n\nthe following work, but is much slower:\n\n  scope :sorted_by_title_and_composer, lambda{|direction| joins(:has_composer => [:synonyms], :has_title => [:synonyms])\n                                                          .order(\"works.name #{direction}, people.name #{direction}\")}\n\nthis failure exist only in production mode, and other scopes using includes are also pertained,\nthere I use the lambda fix\n", "created_at": "2011-05-11 14:06:07", "user": 120214, "id": 1138931}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1139797", "text": "Please provide a test to exercise the bug you're encountering.  When you've added the test, please reopen this pull request, or send a new one.  Thanks!\n", "created_at": "2011-05-11 16:05:10", "user": 3124, "id": 1139797}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nMinor changelog addition for the multi_json change in AS.\n\nThanks,\n\nJosh\n", "labels": [], "number": 515, "updated_at": "2014-07-03 04:05:39", "user": 8701, "closed_at": "2011-05-11 16:04:47", "id": 882839, "title": "updated the ActiveSupport changelog", "url": "https://api.github.com/repos/rails/rails/issues/515", "created_at": "2011-05-11 11:46:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 516, "updated_at": "2014-07-03 04:05:42", "user": 175494, "closed_at": "2011-05-11 14:27:47", "id": 883503, "title": "add missing require for ordered_hash dependency", "url": "https://api.github.com/repos/rails/rails/issues/516", "created_at": "2011-05-11 14:23:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm attempting to upgrade to 3.0.6 and in the process of running my 381 specs, I receive routing error failures when the test encounters an off-site page (acceptance testing).  We have a registration process that utilizes third-party advertisements during the process and we are testing that our registration data is successfully being passed to the third-party URL.\n\n(I'd like to add that I've had a heck of a time attempting to pinpoint what _could_ be causing the issue)\n\nWhen running 3.0.5, all my tests are passing.  However, once I upgrade to 3.0.6, I get the routing errors.\n- rspec 2.4.0\n- capybara 0.4.1.2\n- steak 1.1.0\n- selenium-webdriver 0.1.4\n\nThe issue occurs when the form button is clicked in the test, and I evaluate the current_url.  The current_url at this point is off-site, and doesn't match a route in our app, and therefore the test fails for all scenarios that depend on this action.\n\nI'd ask in the Capybara forum, but considering the only updates were to rails (3.0.6), I figured I'd give it a try here first!\n", "labels": [], "number": 517, "updated_at": "2011-05-11 17:42:54", "user": 437989, "closed_at": "2011-05-11 17:01:16", "id": 883701, "title": "upgrade to rails 3.0.6 routing errors in acceptance tests", "url": "https://api.github.com/repos/rails/rails/issues/517", "created_at": "2011-05-11 14:58:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1139393", "text": "Previously we were silently hiding route errors, it was a bug. Rails 3.0.6 fixes it to show the real exceptions. In case you prefer to see a 404 instead of the exception, you should change the value of config.action_dispatch.show_exceptions in your test initializer.\n", "created_at": "2011-05-11 15:14:56", "user": 9582, "id": 1139393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1140700", "text": "The value of `config.action_dispatch.show_exceptions` is already set to **_false**_ in config/environments/test.rb\n", "created_at": "2011-05-11 16:20:32", "user": 437989, "id": 1140700}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1141597", "text": "Yes, you need to set it to true. This will enable the show exceptions middleware that will catch exceptions and show them nicely (yes, I agree the name is confusing, we are going to fix it on 3.2).\n", "created_at": "2011-05-11 17:01:16", "user": 9582, "id": 1141597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1141856", "text": "Much thanks!!\n", "created_at": "2011-05-11 17:42:54", "user": 437989, "id": 1141856}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi encounter this error after running rake db:migrate \n\n<code>\nE [2011-05-11 22:49:53] ERROR: Run \"rake db:migrate\" to update your database then try again.\n</code>\n\nQuite consistently. \n", "labels": [], "number": 518, "updated_at": "2011-05-11 19:11:25", "user": 50656, "closed_at": "2011-05-11 19:11:25", "id": 883785, "title": "Can't do rake db:migrate", "url": "https://api.github.com/repos/rails/rails/issues/518", "created_at": "2011-05-11 15:19:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142366", "text": "I am still not sure what is wrong. \nReviewed schema and there was nothing wrong with it.\n\nUpdated line 285 of activerecord/lib/active_record/railties/databases.rake\n\n<pre>\n#abort %{Run \"rake db:migrate\" to update your database then try again.}\n</pre>\n\n\nClosing this issue however until someone confirms bug after upgrading to 3.1 beta 1. \n", "created_at": "2011-05-11 19:11:11", "user": 50656, "id": 1142366}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As I commented in https://github.com/rails/rails/commit/f9d5a7bb8c5d224f689dafb4ff641e2ced244f03#L0R1647 `guard_protected_attributes` has invalid assignment to be always true. In consequence, when you had `guard_protected_attributes` set to `false` in `attributes=`, it stopped working.\n", "labels": [], "number": 519, "updated_at": "2014-06-26 10:59:13", "user": 63880, "closed_at": "2011-05-11 16:02:29", "id": 883805, "title": "`guard_protected_attributes` has invalid assignment to be always true in attributes=", "url": "https://api.github.com/repos/rails/rails/issues/519", "created_at": "2011-05-11 15:24:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm bringing back this old invalid ticket because I think it's relevant (as of rails 3.0.7 anyway):\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/1711-has-many-through-association-with-order-causes-a-sql-error-with-postgresql\n\nI made a comment at the bottom of the ticket justifying (I think) why it's still relevant:\n\n> I disagree with Jon. Since the assumption is that memberships should be unique (:uniq => true), the Person object should only have one membership and thus should only have one renewal_date to compare against. The intent is pretty explicit in this case and thus I feel AR can make the solid assumption that there won't be ambiguity amongst multiple membership objects.\n> \n> I think this ticket should be re-opened and solved because I'm pretty sure this behavior works (magically) in MySQL with this exact syntax, so Postgres should behave the same.\n> \n> The only work around I've found for this has been to eliminate the :uniq property and specify:\n> \n> :select => 'DISTINCT people.*, memberships.renewal_date', :order => \"memberships.renewal_date ASC\"\n> \n> which is not a full solution because with :uniq disabled, multiple memberships objects can get created.\n> \n> Since my app is heavily JSON based, I've resorted to crafting the JSON instead of trying to hack AR. The end result is more queries, but I had to solve it somehow. :)\n> \n> +1000 to testing this patch and pulling it in if it works!\n\nHere is the original issue:\n\n> A has_many :through association with an :order option generates SQL which causes PostgreSQL (and possibly others) to report the error:\n> \n> PGError: ERROR: for SELECT DISTINCT, ORDER BY expressions must appear in select list\n> \n> Take the following example model:\n> \n> ``` ruby\n> class Group < ActiveRecord::Base\n>   has_many :memberships\n>   has_many :people, :through => :memberships, :order => \"memberships.renewal_date\", :uniq => true\n> end\n> ```\n> \n> I then load a fixture for some People and the Group with id=1. Using the console, I can run:\n> \n> Group.find(1).people\n> \n> Which results in the following SQL being generated:\n> \n> ``` sql\n> SELECT DISTINCT \"people\".* FROM \"people\" INNER JOIN memberships ON people.id = memberships.person_id WHERE ((\"memberships\".group_id = 1)) ORDER BY memberships.renewal_date\n> ```\n> \n> The \"memberships.renewal_date\" column does not appear in the SELECT field list and thus causes the error.\n> \n> The attached diff appears to fix the issue. Whether or not it does so correctly, I leave to the experts.\n\nHere is the diff just in case the lighthouse ticket dies.\n\n``` ruby\n--- has_many_through_association.rb.orig    2009-01-07 17:32:59.000000000 -0500\n+++ has_many_through_association.rb 2009-01-07 17:32:40.000000000 -0500\n@@ -135,5 +135,7 @@\n         def construct_select(custom_select = nil)\n           distinct = \"DISTINCT \" if @reflection.options[:uniq]\n-          selected = custom_select || @reflection.options[:select] || \"#{distinct}#{@reflection.quoted_table_name}.*\"\n+          selected = [custom_select || @reflection.options[:select] || \"#{distinct}#{@reflection.quoted_table_name}.*\"]\n+          selected += (@reflection.options[:order] || \"\").scan(/([\\.a-zA-Z_]+)/).flatten.reject {|e| e.match(/asc|desc/i)}\n+          selected.join(\", \")\n         end\n```\n", "labels": ["activerecord"], "number": 520, "updated_at": "2014-01-12 03:07:14", "user": 107, "closed_at": "2012-03-08 23:16:30", "id": 883944, "title": "Has many through association with :order causes a SQL error with PostgreSQL", "url": "https://api.github.com/repos/rails/rails/issues/520", "created_at": "2011-05-11 15:53:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142084", "text": "For the record, my comment on this was the following:\n\n> It's not clear what the expected result should be, which is why postgres throws an error.\n> \n> Due to the use of DISINCT, for any given Person in the output, there may be many different renewal_date values. Which is the correct one to use for the sort? The answer is ambiguous, hence why postgres gives an error.\n> \n> I'm not in favour of Active Record trying to magically resolve this ambiguity by making an assumption, so I'd say we should close the ticket.\n\n@tenderlove agreed with me in the original ticket.\n\n@lancecarlson says:\n\n> Since the assumption is that memberships should be unique (:uniq => true), the Person object should only have one membership and thus should only have one renewal_date to compare against.\n\nThe `:uniq => true` does not indicate that the memberships should be unique, it indicates that the people should be unique. There could realistically be multiple memberships all referencing the same `Person` object.\n\nIt works under mysql because mysql chooses to make an assumption. I just don't want to bring a particular assumption into Rails itself.\n\nIf the model was defined like so:\n\n``` ruby\nclass Group < ActiveRecord::Base\n  has_many :memberships, :order => \"memberships.renewal_date\"\n  has_many :people, :through => :memberships, :uniq => true\nend\n```\n\nThen perhaps we could add the `memberships.renewal_date` to the select query because in this case you have explicitly defined an ordering for the join records. (Rather than ordering the `people` records by some attribute on the join table.) @tenderlove, WDYT?\n\nI don't know if the above does anything useful on 3-0-stable or master - feel free to test and provide a patch!\n", "created_at": "2011-05-11 18:24:45", "user": 1979, "id": 1142084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1146889", "text": "@jonleighton thank you for filling in the gaps with this ticket feed! Are you suggesting that after you define the associations like you describe, that when you call .people, it would return the correct order with memberships.renewal_date added to the query? I think this makes sense for my use case and would def. solve my issue, though I wonder if it is confusing for some when they call .people and don't expect it to inherit the order of memberships. I frankly would expect it to, but you never know.\n", "created_at": "2011-05-12 14:41:22", "user": 107, "id": 1146889}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2326076", "text": "I just ran into this issue in my own app, exactly as described above (that was handy for Googling!). I expected‚Äîit being Rails 3.1 :)‚Äîthat the order on memberships would apply when I accessed the people collection. I exposed that it did not in my spec, so I added the order on people, which is when I got the PostgreSQL error above.\n\nI would expect #people it to inherit the order of #memberships as well. If I wanted a different order for #people (last_name, say), I would specify it on the has_many :through, which I would expect to override the memberships order.\n", "created_at": "2011-10-07 18:57:03", "user": 8061, "id": 2326076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3073634", "text": "Just hit this \"issue\" as well. Was able to workaround it by supplying a `:select` option as recommended by this SO question:\nhttp://stackoverflow.com/questions/1714736/postgresql-rails-and-order-problem\n\nKept the `:uniq => true` to ensure no duplicates were present when creating relations. \n", "created_at": "2011-12-09 00:50:21", "user": 82063, "id": 3073634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3782693", "text": "Bumped into this as well. Rails 3.2.1\n", "created_at": "2012-02-02 17:53:17", "user": 656383, "id": 3782693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3838094", "text": "Same problem for me, on both - Rails 3.1.3 and 3.2.1\n", "created_at": "2012-02-06 22:15:00", "user": 319383, "id": 3838094}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3904552", "text": "I'm having the same issue on rails 3.2.1, but there's no `:uniq => true` option on my relation. I tried poking around a bit and found the following line in `lib/active_record/associations/collection_association.rb`, line 63:\n\n``` ruby\nrelation.uniq.pluck(column)\n```\n\nThis happens in the method `ids_reader`. Executing a `uniq` at this point makes perfect sense for ids, since you don't want duplicates under any situation (that I can think of). I think the problem is that `uniq` has been reimplemented for relations to generate a `DISTINCT` query, which wasn't expected at the time this code was written.\n\nMoving the `uniq` after `pluck(column)` seems to fix my issue, but I don't know if it won't cause performance issues or if we can't do something cleverer here. I'll investigate this further a bit later and issue a pull request if I come up with something that passes tests. Unless someone fixes it in the meantime, of course :).\n", "created_at": "2012-02-10 11:09:53", "user": 124255, "id": 3904552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3905824", "text": "@AndrewRadex: that issue is already fixed so it'll be in the next patch release.\n", "created_at": "2012-02-10 13:16:12", "user": 1979, "id": 3905824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3905865", "text": "Ah, okay, then. Should've checked master as well.\n", "created_at": "2012-02-10 13:19:21", "user": 124255, "id": 3905865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4157685", "text": "Same problem, Rails3.2.1. \n", "created_at": "2012-02-24 14:31:29", "user": 457349, "id": 4157685}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4173540", "text": "Same here, 3.2.1\n", "created_at": "2012-02-25 15:30:50", "user": 55709, "id": 4173540}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4187829", "text": "Same here but with habtm where the foreign model has a default_scope.\n", "created_at": "2012-02-27 04:26:49", "user": 126537, "id": 4187829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4309960", "text": "@AndrewRadev\nand Everyone.\n\nHi! Rails3.2.2 is released. Could you check it ?\n", "created_at": "2012-03-04 14:15:16", "user": 13426, "id": 4309960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4397771", "text": "Yeah, seems to work just fine now, at least for me. Sorry for taking so long to check it.\n", "created_at": "2012-03-08 18:20:21", "user": 124255, "id": 4397771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4405236", "text": "Thank you for checking. I'm closing this issue. \n", "created_at": "2012-03-08 23:16:29", "user": 13426, "id": 4405236}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4875831", "text": "This same Postgresql error also occurs if an order clause is defined as default_scope on the association mode (in combination with the :uniq option)l:\n\n``` ruby\nclass Group < ActiveRecord::Base\n  has_many :memberships\n  has_many :people, :through => :memberships, :uniq => true\nend\n\nclass Person < ActiveRecord::Base\n  default_scope order(:lastname)\nend\n```\n", "created_at": "2012-04-02 10:28:37", "user": 271590, "id": 4875831}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "There were two newlines at the end of the development config file. I removed one.\n", "labels": [], "number": 521, "updated_at": "2014-07-02 05:21:01", "user": 40689, "closed_at": "2011-05-12 00:04:03", "id": 885910, "title": "Removed extra newline at end of development config file. (There were 2)", "url": "https://api.github.com/repos/rails/rails/issues/521", "created_at": "2011-05-11 19:45:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142659", "text": "I like ending all files with a newline. Makes it nicer when you cat them on a terminal.\n", "created_at": "2011-05-11 19:56:53", "user": 2741, "id": 1142659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142681", "text": "Of course, but there are two newlines at the end this file. This commit removes one of them.\n\nThe GitHub diff viewer doesn't show the extra line. It appears that the last newline is being removed when in fact there is still a newline there. Please check the actual file, not the GitHub viewer.\n", "created_at": "2011-05-11 20:01:01", "user": 40689, "id": 1142681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142683", "text": "I like opinionated software\n", "created_at": "2011-05-11 20:01:13", "user": 33329, "id": 1142683}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```\nclass Todo < ActiveRecord::Base\n  default_scope where(trashed: false)\n  has_many :comments, as: :commentable\nend\n\nclass Todolist < ActiveRecord::Base\n  default_scope where(trashed: false)\n  has_many   :todos\n  has_many   :comments, through: :todos\nend\n\ntodolist.comments.update_all trashed: true\n```\n\nProduces:\n\n```\nActiveRecord::StatementInvalid: Mysql2::Error: Unknown column 'todos.trashed' in 'where clause': UPDATE `comments` SET `trashed` = 1 WHERE `comments`.`trashed` = 0 AND `todos`.`trashed` = 0 AND `todos`.`todolist_id` = 968316918 AND (`comments`.`commentable_type` = 'Todo') ORDER BY created_at\n```\n", "labels": ["activerecord"], "number": 522, "updated_at": "2017-04-04 14:29:37", "user": 2741, "closed_at": "2011-08-15 22:10:46", "id": 885924, "title": "Support for joins in ActiveRecord::Relation#update_all", "url": "https://api.github.com/repos/rails/rails/issues/522", "created_at": "2011-05-11 19:48:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1142830", "text": "@dhh does this happen on master? I think it might be fixed by a change I did this morning.\n", "created_at": "2011-05-11 20:26:09", "user": 1979, "id": 1142830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1144376", "text": "Same error on master.\n", "created_at": "2011-05-12 02:57:38", "user": 2741, "id": 1144376}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1148967", "text": "Okay, I have reassigned to me as I'm sure @tenderlove has plenty to do already :)\n", "created_at": "2011-05-12 20:10:44", "user": 1979, "id": 1148967}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1155762", "text": "I have been looking into this. Here's my initial failing test case:\n\n``` ruby\n  def test_update_has_many_through\n    post  = posts(:thinking)\n    david = people(:david)\n\n    post.people << david\n    post.people.update_all :first_name => 'Bob'\n\n    assert_equal 'Bob', david.first_name\n  end\n```\n\nIt's actually nothing to do with default_scope. It is to do with the fact that `ActiveRecord::Relation#update_all` pays no attention to any joins etc within the scope. As such, this can't be a regression, it's just a feature we never had in the first place.\n\nTo implement it we will need to use subqueries in the WHERE. So the above would become:\n\n``` sql\nUPDATE `comments` SET `trashed` = 1\nWHERE `comments`.`id` IN (\n  SELECT `comments`.`id`\n  FROM `comments`\n  INNER JOIN `todos` ON `comments`.`todo_id` = `todos`.`id`\n  WHERE `comments`.`trashed` = 0 AND `todos`.`trashed` = 0 AND `todos`.`todolist_id` = 968316918\n) ORDER BY created_at\n```\n\nHopefully I will return to this when 3.1 is out.\n", "created_at": "2011-05-13 18:50:39", "user": 1979, "id": 1155762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1282267", "text": "@daicoden and I at @square were pairing on this and we were able to put something together along the lines of:\n\nUnfortunately we are still on 2.3.11.\n\n```\nclass Comment\n  class << self\n    def trash_all\n      sql = \"UPDATE #{quoted_table_name} \"\n      add_joins!(sql, {})\n      sql << \"SET #{sanitize_sql_for_assignment({:trashed => true})} \"\n      add_conditions!(sql, {})\n      connection.execute(sql)\n    end\n  end\nend\n```\n\nNow you can call todolist.comments(:conditions => {:trashed => false}).trash_all\nThis results in the following SQL:\n\n```\nUPDATE `comments` INNER JOIN `todos` ON `todos`.id = `comments`.todo_id SET `trashed` = 1 WHERE (`comments`.`trashed` = 0 AND `todos`.`todolist_id` = 968316918) \n```\n\nHope this helps!\n", "created_at": "2011-06-02 17:59:09", "user": 22493, "id": 1282267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1369903", "text": "Came across the same issue and found the following solution here (http://wiseleyb.tumblr.com/post/3112570940/default-scope-and-update-all-dont-play-nicely) if its of any help in fixing the bug or anyone looking for just a quick interim solution. (currently working with my Rails 3.1.0.rc4 app)\n\nJust add this monkeypatch in development.rb / environment.rb / whereever, and use the update_all! and delete_all! methods when dealing with relations that are default_scoped.\n\n```\n    module ActiveRecordMixins\n      class ActiveRecord::Base\n        def self.update_all!(*args)\n          self.send(:with_exclusive_scope) { self.update_all(*args) }\n        end\n        def self.delete_all!(*args)\n          self.send(:with_exclusive_scope) { self.delete_all(*args) }\n        end\n      end\n    end\n```\n", "created_at": "2011-06-14 22:54:16", "user": 49288, "id": 1369903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1721862", "text": "Works fine on 3.0.9 but is broken on 3.1.0rc5. Seems like a regression to me.\n\n``` ruby\ndef test_joins_update_all\n  assert Comment.joins(:post).where('posts.id IS NOT NULL').update_all(:post_id => 1)\nend\n```\n", "created_at": "2011-08-03 21:14:29", "user": 13026, "id": 1721862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1727312", "text": "Okay, I looked into this.\n\nOn 3.0.9, we end up just slapping an `INNER JOIN` in the query. This actually works on mysql, though it doesn't work on sqlite3 and postgresql.\n\nSo this has never been properly supported on all databases, but it inadvertently worked on mysql.\n\nSo I have re-targeted this for 3.1 to fix the regression on mysql.\n\nThen, for 3.2 we should implement a solution that works on other databases.\n\nIf anyone's interested, [here's my test script](https://gist.github.com/1125257).\n", "created_at": "2011-08-04 14:19:51", "user": 1979, "id": 1727312}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1728161", "text": "I think jonleighton's proposal is the correct default behavior as it's RDBMS-independent. The RDBMS-specific adapters could then choose to implement a more specific UPDATE/JOIN which would probably be more performant than the \"UPDATE/WHERE id IN\" version.\n\nFWIW, the Postgres-specific version of the query above is:\n\n``` sql\nUPDATE `comments`\nSET `trashed` = 1\nFROM `todos`\nWHERE `todos`.id = `comments`.todo_id  AND `comments`.`trashed` = 0 AND `todos`.`todolist_id` = 968316918\n```\n", "created_at": "2011-08-04 16:04:23", "user": 198711, "id": 1728161}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1750976", "text": "[This commit](https://github.com/sbleon/rails/commit/1edab99604aa3562ed794e1da494327c879e2414) adds support for joins in update_all to Rails 3.0. You can test it in [my update_all_join_support branch](https://github.com/sbleon/rails/tree/update_all_join_support).\n\nI think my commit needs a little more work (SQL sanitization, refactoring.) If it's done soon, though, can new features still be added to 3.0.10?\n\nI think a very similar approach would work for Rails 3.1 if anyone wants to adapt my code.\n\nThanks to @jonleighton for the test case and test script that I used as a starting point! My slightly more robust version of the test script is [here](https://gist.github.com/1131061).\n", "created_at": "2011-08-08 01:50:51", "user": 198711, "id": 1750976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1805883", "text": "Thanks @sbleon for working on a fix. However, I wanted to use arel to generate the queries, and to use the connection adapter to handle the various db-specific bits.\n\nI have a fix ready and waiting here: https://github.com/jonleighton/rails/compare/rails:master...update_all_with_joins\n\nIt required some changes in arel itself, so I haven't merged this code because I am waiting for @tenderlove to do a new arel release (otherwise merging will just cause tests to break).\n", "created_at": "2011-08-15 09:41:45", "user": 1979, "id": 1805883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1807156", "text": "@jonleighton, thanks for the update. I like what you've done, and allowing\nthe adapters to override the behavior will create a lot more flexibility.\n\nI actually realized after I developed my fix that the \"subquery for IDs\"\nstrategy wouldn't work for my specific case, because the UPDATE clause\nneeded to reference the joined tables, which it can't do when they're in a\nsubquery. I think it would be possible to make this work in the adapters,\nbut I'm not sure how this would interact with the limit and offset options.\nAnyway, mine is an edge case and not as important as fixing the basic\nupdate_all behavior.\n\nOn Mon, Aug 15, 2011 at 5:41 AM, jonleighton <\nreply@reply.github.com>wrote:\n\n> Thanks @sbleon for working on a fix. However, I wanted to use arel to\n> generate the queries, and to use the connection adapter to handle the\n> various db-specific bits.\n> \n> I have a fix ready and waiting here:\n> https://github.com/jonleighton/rails/compare/rails:master...update_all_with_joins\n> \n> It required some changes in arel itself, so I haven't merged this code\n> because I am waiting for @tenderlove to do a new arel release (otherwise\n> merging will just cause tests to break).\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/522#issuecomment-1805883\n", "created_at": "2011-08-15 13:49:00", "user": 198711, "id": 1807156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6637946", "text": "Hi! It does not work on PostgreSQL and produces:\n\n```\nPG::Error: ERROR:  missing FROM-clause entry for table \"tbl\"\n```\n", "created_at": "2012-06-28 18:38:27", "user": 107541, "id": 6637946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/61841754", "text": "I was expecting this type of statement to work with `update_all`, but it does not:\n\n``` ruby\n  def test_update_all_with_includes_references\n    comments = Comment.includes(:post).references(:post).where('posts.id' => posts(:welcome).id).limit(1)\n    assert_equal 1, comments.update_all(:posts_id => posts(:thinking).id)\n  end\n```\n\nIt yields the following SQL,which is obviously invalid.\n\n```\nUPDATE \"comments\" SET \"posts_id\" = 2 WHERE \"comments\".\"id\" IN (SELECT \"comments\".\"id\" FROM \"comments\" WHERE \"posts\".\"id\" = 1 LIMIT 1)\n```\n\nI suppose I expected it to work because a statement like this behaves as expected, creating the LEFT OUTTER JOIN:\n\n```\nComment.includes(:post).references(:post).where('posts.id' => posts(:welcome).id).limit(1)\n```\n\n```\nSELECT  \"comments\".\"id\" AS t0_r0, \"comments\".\"post_id\" AS t0_r1, \"comments\".\"body\" AS t0_r2, \"comments\".\"type\" AS t0_r3, \"comments\".\"tags_count\" AS t0_r4, \"comments\".\"children_count\" AS t0_r5, \"comments\".\"parent_id\" AS t0_r6, \"comments\".\"author_id\" AS t0_r7, \"comments\".\"author_type\" AS t0_r8, \"comments\".\"resource_id\" AS t0_r9, \"comments\".\"resource_type\" AS t0_r10, \"comments\".\"developer_id\" AS t0_r11, \"posts\".\"id\" AS t1_r0, \"posts\".\"author_id\" AS t1_r1, \"posts\".\"title\" AS t1_r2, \"posts\".\"body\" AS t1_r3, \"posts\".\"type\" AS t1_r4, \"posts\".\"comments_count\" AS t1_r5, \"posts\".\"taggings_with_delete_all_count\" AS t1_r6, \"posts\".\"taggings_with_destroy_count\" AS t1_r7, \"posts\".\"tags_count\" AS t1_r8, \"posts\".\"tags_with_destroy_count\" AS t1_r9, \"posts\".\"tags_with_nullify_count\" AS t1_r10 FROM \"comments\" LEFT OUTER JOIN \"posts\" ON \"posts\".\"id\" = \"comments\".\"post_id\" WHERE \"posts\".\"id\" = 1 LIMIT\n```\n\nIs this something that `update_all` should support?\n", "created_at": "2014-11-05 16:56:45", "user": 540762, "id": 61841754}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/170119805", "text": "Using Rails 4.1.6 on Postgresql and am still experiencing the same issue when calling `update_all` when the relation has an left-outer joins.  \n", "created_at": "2016-01-08 20:47:44", "user": 11353300, "id": 170119805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/170623378", "text": "I've also run into this problem on Rails 4.1.4 and PostgreSQL with `update_all` and an inner join\n\n```\nNhl::Play.where(player_id: nil).where.not(game_player_id: nil).joins(:game_player).update_all(\"plays.player_id = game_players.player_id\")\n# SQL:\nUPDATE \"plays\" SET plays.player_id = game_players.player_id WHERE \"plays\".\"id\" IN (SELECT \"plays\".\"id\" FROM \"plays\" INNER JOIN \"game_players\" ON \"game_players\".\"id\" = \"plays\".\"game_player_id\" WHERE \"plays\".\"player_id\" IS NULL AND (\"plays\".\"game_player_id\" IS NOT NULL))\n# Error:\nG::UndefinedTable: ERROR:  missing FROM-clause entry for table \"game_players\"\n```\n", "created_at": "2016-01-11 17:17:59", "user": 1223820, "id": 170623378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/178603383", "text": "Also, i tried an example like the following:\n\n``` ruby\nProduct.joins(:purchase_orders).update_all('product.price = purchase_orders.price')\n```\n\nThe query above generates the following query (resulting in a `Missing From Clause` error):\n\n``` SQL\nUPDATE \"products\" SET products.price = purchase_orders.price WHERE \"products\".\"id\" IN (SELECT \"products\".\"id\" FROM \"products\" INNER JOIN \"purchase_orders\" ON \"purchase_orders\".\"id\" = \"products\".\"purchase_order_id\")\n```\n\nWhile i think a query like this should be generated:\n\n``` SQL\nUPDATE products\nSET price = purchase_orders.price\nFROM purchase_orders\nWHERE purchase_orders.id = products.purchase_order_id;\n```\n", "created_at": "2016-02-02 14:40:38", "user": 730201, "id": 178603383}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/291517664", "text": "Same error as @MhdSyrwan. Maybe this issue should be reopened?", "created_at": "2017-04-04 14:29:37", "user": 283320, "id": 291517664}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Following with #503 (by @smartinez87), I changed \"something=>other\"  to \"something => other\" on ActiveRecord tests\n", "labels": [], "number": 523, "updated_at": "2014-06-19 12:57:22", "user": 160941, "closed_at": "2011-05-12 07:09:31", "id": 887254, "title": "Follow code conventions on ActiveRecord tests", "url": "https://api.github.com/repos/rails/rails/issues/523", "created_at": "2011-05-12 01:08:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1144106", "text": "Also I notice that there are some tests using Model.find(:all) and Model.find(:first) instead of Model.all and Model.first, these must be changed?\n", "created_at": "2011-05-12 01:19:04", "user": 160941, "id": 1144106}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1144257", "text": "Have you seen the comment on #503 ?? \n\nAlso here #498 \n", "created_at": "2011-05-12 02:15:15", "user": 779796, "id": 1144257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1145032", "text": "Exactly, thanks for the pull request but such changes just break old patches and pull requests while there is no explicit benefit in merging them.\n", "created_at": "2011-05-12 07:09:31", "user": 9582, "id": 1145032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1146425", "text": "@brajadorable @josevalim. I haven't read the comments and you are right. Thanks!!\n", "created_at": "2011-05-12 13:30:57", "user": 160941, "id": 1146425}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nI updated AR#create! to accept an options hash so the mass-assignment security role can be passed in, also updated the Changelog to mention the change to some of the AR method signatures.\n\nThanks to @pixeltrix for pointing these out.\n\nCheers,\n\nJosh\n", "labels": [], "number": 524, "updated_at": "2014-06-24 20:06:25", "user": 8701, "closed_at": "2011-05-12 07:34:47", "id": 888137, "title": "AR#create! allows for :as => role, and AR changelog update", "url": "https://api.github.com/repos/rails/rails/issues/524", "created_at": "2011-05-12 07:25:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think it's a sprocket \"bug\"; but just to be sure I'm going to post it here since I know someone else will find it at some point:\n\nI made a sub-file on `app/assets/javascripts`; in that sub-file I wanted to include all the files in `libs` relative sub-directory. Like many applications I just wrote `libs` as a path, which is the [short representation of a relative path](http://en.wikipedia.org/wiki/Path_%28computing%29), but that didn't work saying it's not a relative path, so I had to write it `./libs`.\n", "labels": [], "number": 525, "updated_at": "2011-05-12 13:49:25", "user": 125900, "closed_at": "2011-05-12 13:49:25", "id": 888546, "title": "Sprockets require_tree", "url": "https://api.github.com/repos/rails/rails/issues/525", "created_at": "2011-05-12 09:32:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1146512", "text": "The leading `./` is required for relative paths. Just `libs` means from the load path.\n", "created_at": "2011-05-12 13:49:25", "user": 137, "id": 1146512}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I believe the identity map functionality of Rails 3.1.0.beta1 has broken polymorphic associations.  This issue cross references Lighthouse ticket #6772 (https://rails.lighthouseapp.com/projects/8994/tickets/6772).\n\nSee below for steps to recreate\n\nApplication.rb\n\n```\nconfig.active_record.identity_map = true\nActiveRecord::IdentityMap.enabled = true\n```\n\nMigrations:\n\n``` ruby\nclass CreatePhysicalAddresses < ActiveRecord::Migration\n  def change\n    create_table :physical_addresses do |t|\n      t.string :line1\n      t.string :line2\n      t.string :city\n      t.integer :state_id\n      t.string :zipcode\n      t.integer :county_id\n      t.string :latlong\n      t.references :physical_addressable, :polymorphic => true\n      t.timestamps\n    end\n    add_index :physical_addresses, [:physical_addressable_id, :physical_addressable_type], :name => 'physical_addressable'\n    add_index :physical_addresses, :state_id\n    add_index :physical_addresses, :county_id\n  end\nend\n\nclass CreateLands < ActiveRecord::Migration\n  def change\n    create_table :lands do |t|\n      t.string :tax_map_reference\n      t.string :plat_number\n      t.text :location_comments\n      t.text :adverse_environmental_conditions\n      t.integer :created_by\n      t.integer :updated_by\n      t.integer :land_special_ownership_type_id\n      t.timestamps\n    end\n    add_index :lands, :land_special_ownership_type_id\n  end\nend\n```\n\nModels:\n\n``` ruby\nclass Land < ActiveRecord::Base\n  has_one :address, :as => :physical_addressable, :dependent => :destroy, :class_name => \"PhysicalAddress\"\n  accepts_nested_attributes_for :address, :allow_destroy => true\n  attr_accessible :address_attributes\n  delegate :latlong, :to => :address, :prefix => true, :allow_nil => true\n  validates_associated :address\nend\n\nclass PhysicalAddress < ActiveRecord::Base\n  attr_accessible :line1, :line2, :city, :state_id, :zipcode, :county_id, :latlong\n  belongs_to :physical_addressable, :polymorphic => true\n  belongs_to :state\n  delegate :name, :to => :state, :prefix => true, :allow_nil => true\n  belongs_to :county\n  delegate :name, :to => :county, :prefix => true, :allow_nil => true\n\n\n  validates_presence_of :line1, :city, :state_id\n  validates_length_of :zipcode, :is => 5\nend\n```\n\nConsole output:\n\n```\nLoading development environment (Rails 3.1.0.beta1)\nruby-1.9.2-p180 :001 > Land.create({\"address_attributes\"=>{\"line1\"=>\"10300 Little Patuxent Parkway\", \"line2\"=>\"\", \"city\"=>\"Columbia\", \"state_id\"=>\"1\", \"zipcode\"=>\"21044\", \"county_id\"=>\"14\"}})\n   (0.1ms)  BEGIN\n   (0.1ms)  COMMIT\n   (0.1ms)  BEGIN\n  SQL (0.4ms)  INSERT INTO `lands` (`adverse_environmental_conditions`, `created_at`, `created_by`, `land_special_ownership_type_id`, `location_comments`, `plat_number`, `tax_map_reference`, `updated_at`, `updated_by`) VALUES (NULL, '2011-05-10 19:50:11', NULL, NULL, NULL, NULL, NULL, '2011-05-10 19:50:11', NULL)\n  SQL (0.2ms)  INSERT INTO `physical_addresses` (`city`, `county_id`, `created_at`, `latlong`, `line1`, `line2`, `physical_addressable_id`, `physical_addressable_type`, `state_id`, `updated_at`, `zipcode`) VALUES ('Columbia', 14, '2011-05-10 19:50:11', NULL, '10300 Little Patuxent Parkway', '', 4, NULL, 1, '2011-05-10 19:50:11', '21044')\n   (3.6ms)  COMMIT\n => #<Land id: 4, tax_map_reference: nil, plat_number: nil, location_comments: nil, adverse_environmental_conditions: nil, created_by: nil, updated_by: nil, land_special_ownership_type_id: nil, created_at: \"2011-05-10 19:50:11\", updated_at: \"2011-05-10 19:50:11\">\nruby-1.9.2-p180 :002 > Land.find(4).address\n  Land Loaded  From Identity Map (id: 4)\n => #<PhysicalAddress id: 4, line1: \"10300 Little Patuxent Parkway\", line2: \"\", city: \"Columbia\", state_id: 1, zipcode: \"21044\", county_id: 14, latlong: nil, physical_addressable_id: 4, physical_addressable_type: nil, created_at: \"2011-05-10 19:50:11\", updated_at: \"2011-05-10 19:50:11\">\n```\n\nNote that the SQL INSERT into physical addresses does not include a physical_addressable_type. Worked just fine in Rails 3.0.7.\n\nThe address is loaded from the identity map, but if I exit console and try to access the address record again, it is not available:\n\n```\nLoading development environment (Rails 3.1.0.beta1)\nruby-1.9.2-p180 :001 > Land.find(4).address\n  Land Load (0.6ms)  SELECT `lands`.* FROM `lands` WHERE `lands`.`id` = 4 LIMIT 1\n  PhysicalAddress Load (0.4ms)  SELECT `physical_addresses`.* FROM `physical_addresses` WHERE `physical_addresses`.`physical_addressable_id` = 4 AND `physical_addresses`.`physical_addressable_type` = 'Land' LIMIT 1 => nil\n```\n", "labels": [], "number": 526, "updated_at": "2011-05-17 22:22:53", "user": 540762, "closed_at": "2011-05-17 20:52:59", "id": 888943, "title": "Polymorphic type fields not set in Rails 3.1.0.beta1 with Identity Map enabled", "url": "https://api.github.com/repos/rails/rails/issues/526", "created_at": "2011-05-12 11:46:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1146264", "text": "Thanks for the report! I assume you have tried the above without identity map and it worked? Because the issue mentioned in LH was ported to Github and the conclusion was that we couldn't do anything.\n", "created_at": "2011-05-12 12:54:54", "user": 9582, "id": 1146264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1146351", "text": "You know, I had been thinking about that.  I haven't verified it works with\nIDmap turned off.  I will and update.\n\nOn Thu, May 12, 2011 at 8:54 AM, josevalim <\nreply@reply.github.com>wrote:\n\n> Thanks for the report! I assume you have tried the above without identity\n> map and it worked? Because the issue mentioned in LH was ported to Github\n> and the conclusion was that we couldn't do anything.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/526#comment_1146264\n\n## \n\n\"Who is the happier man, he who has braved the storm of life and lived, or\nhe who has stayed securely on shore and merely existed?\" - HST\n\"In the long run, you could die tomorrow.\" - LS\n", "created_at": "2011-05-12 13:14:39", "user": 540762, "id": 1146351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1146373", "text": "Looks like the issue happens regardless of whether id map is enabled or\nnot....\n\nOn Thu, May 12, 2011 at 9:14 AM, Brian Buchalter bal711@gmail.com wrote:\n\n> You know, I had been thinking about that.  I haven't verified it works with\n> IDmap turned off.  I will and update.\n> \n> On Thu, May 12, 2011 at 8:54 AM, josevalim <\n> reply@reply.github.com>wrote:\n> \n> > Thanks for the report! I assume you have tried the above without identity\n> > map and it worked? Because the issue mentioned in LH was ported to Github\n> > and the conclusion was that we couldn't do anything.\n> > \n> > ## \n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/rails/rails/issues/526#comment_1146264\n> \n> ## \n> \n> \"Who is the happier man, he who has braved the storm of life and lived, or\n> he who has stayed securely on shore and merely existed?\" - HST\n> \"In the long run, you could die tomorrow.\" - LS\n\n## \n\n\"Who is the happier man, he who has braved the storm of life and lived, or\nhe who has stayed securely on shore and merely existed?\" - HST\n\"In the long run, you could die tomorrow.\" - LS\n", "created_at": "2011-05-12 13:20:03", "user": 540762, "id": 1146373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1146821", "text": "Jose, could you tell me more about the issue you're referring to in LH?   Which ticket?  Was it the one I submitted?\n", "created_at": "2011-05-12 14:33:59", "user": 540762, "id": 1146821}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1147603", "text": "I have just checked the ticket but it was actually another issue, check #403. One question, does this bug happen on Rails 3.0.x?\n", "created_at": "2011-05-12 16:24:16", "user": 9582, "id": 1147603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1147790", "text": "The bug does not appear in rails 3.0.7. I will post a sample app to\nrecreate the problem on github later today and provide link in this\nthread.\n\nSent from my iPhone\n\nOn May 12, 2011, at 12:24 PM, josevalim\nreply@reply.github.com\nwrote:\n\n> I have just checked the ticket but it was actually another issue, check #403. One question, does this bug happen on Rails 3.0.x?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/526#comment_1147603\n", "created_at": "2011-05-12 16:54:23", "user": 540762, "id": 1147790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1192978", "text": "Hey bbuchalter, I reproduced the issue in beta1, but it seems to be fixed in master. I ran exactly the same migrations and models you posted and it should be fixed now.\n\nIf you find it still fails on master for you please do comment again.\n", "created_at": "2011-05-17 20:49:42", "user": 3359, "id": 1192978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193556", "text": "Great work guys!  Thank you!\n", "created_at": "2011-05-17 22:22:52", "user": 540762, "id": 1193556}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey Guys,\n\nThis removes a circular require in AS deprecations. This is safe as AS deprecations is autoloaded as needed.\n\nThanks,\n\nJ\n", "labels": [], "number": 527, "updated_at": "2014-07-03 04:06:14", "user": 8701, "closed_at": "2011-05-12 13:48:11", "id": 889321, "title": "Remove a circular require in AS deprecations.", "url": "https://api.github.com/repos/rails/rails/issues/527", "created_at": "2011-05-12 13:26:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adding a default_scope to the end of a has_many :through relationship breaks a number of things.\n\nI've found it through a :uniq => true on the relationship, but the attached change to the tests seems to break a number of other things\n", "labels": [], "number": 528, "updated_at": "2014-06-16 22:58:17", "user": 224373, "closed_at": "2011-05-12 20:16:46", "id": 889528, "title": "Default scope breaks working of has_many :through", "url": "https://api.github.com/repos/rails/rails/issues/528", "created_at": "2011-05-12 14:02:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1147673", "text": "Is this a regression? Does this work on 3.0?\n", "created_at": "2011-05-12 16:35:54", "user": 9582, "id": 1147673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1148852", "text": "How is this different from #508?\n", "created_at": "2011-05-12 19:48:37", "user": 9582, "id": 1148852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149005", "text": "I am closing this in favour of an issue which I just created (#533) because we are definitely not going to merge this in its present form so we should discuss the bug in an issue. Thanks.\n", "created_at": "2011-05-12 20:16:48", "user": 1979, "id": 1149005}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "So I've been playing with the 3.1 beta and I really want to package our code as an engine in a gem and also release a multitenant version that lets you mount the engine to `/:username`. This works fine but it doesn't pass the value of the segment into to controller that the route maps to inside of the engine.\n\n```\nRails::Application.routes.draw do\n  mount Foo::Engine => \"/:username\"\nend\n\nFoo::Engine.routes.draw do\n  root :to => \"home#home\"\nend\n\nmodule Foo\n  class HomeController < ApplicationController\n    def home\n      render :text => params[:username].inspect\n    end\n  end\nend\n\n$ curl http://localhost:3000/username\nnil\n```\n", "labels": [], "number": 529, "updated_at": "2011-05-15 12:19:26", "user": 294954, "closed_at": "2011-05-15 12:19:26", "id": 890646, "title": "Mounted engines don't get route segment values", "url": "https://api.github.com/repos/rails/rails/issues/529", "created_at": "2011-05-12 17:40:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1148448", "text": "I've found the problem and got a solution.\nThe cause is that `Rack::Mount::RouteSet#call` is called twice and does not consider that [`env[@parameters_key]`](https://github.com/josh/rack-mount/blob/master/lib/rack/mount/route_set.rb#L149) could have been set previously (which it is and correctly contains `:username => \"blah\"` the first time).\n\nIf you merge in `env[@parameters_key]` to the new params, everything works as expected.\n\n```\ndiff --git a/lib/rack/mount/route_set.rb b/lib/rack/mount/route_set.rb\nindex bf168be..11959c2 100644\n--- a/lib/rack/mount/route_set.rb\n+++ b/lib/rack/mount/route_set.rb\n@@ -139,6 +139,9 @@ module Rack::Mount\n       request = nil\n       req = @request_class.new(env)\n       recognize(req) do |route, matches, params|\n+        # merge existing params\n+        params.merge!(env[@parameters_key]) if env[@parameters_key]\n+\n         # TODO: We only want to unescape params from uri related methods\n         params.each { |k, v| params[k] = Utils.unescape_uri(v) if v.is_a?(String) }\n```\n\n@josh, do you want me to open pull request for rack-mount to fix it?\n", "created_at": "2011-05-12 18:36:49", "user": 294954, "id": 1148448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1148584", "text": "Its not a simple as merging. We'd need to maintain a stack of params.\n\n```\nRouter A -> Router B -> App 1\n         -> Router C -> App 2\n```\n\nIts possible to have a request match A -> B -> 1 then returns `X-Cascade: pass` forcing A to try to the next route. In that case we'd need to clear away the nested params that were merged in B.\n", "created_at": "2011-05-12 18:58:17", "user": 137, "id": 1148584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1148943", "text": "Right. Do you want some help to implement it? And if so, where would be the best place to implement it? In `call` or `recognize`?\n", "created_at": "2011-05-12 20:07:14", "user": 294954, "id": 1148943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149001", "text": "Please do\n\nYou should just have to modify `call` https://github.com/josh/rack-mount/blob/master/lib/rack/mount/route_set.rb#L149\n\nOpen a pull request and I'll walk you through the edge cases.\n", "created_at": "2011-05-12 20:16:27", "user": 137, "id": 1149001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150154", "text": "Pull request created, closing this issue.\n", "created_at": "2011-05-13 00:05:23", "user": 294954, "id": 1150154}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165784", "text": "@samuelkadolph, could you also please add a test to Rails? One of the appropriated places to put this test would be in the file below. You just need to nest to route sets.\n\nhttps://github.com/rails/rails/blob/master/actionpack/test/dispatch/mount_test.rb\n", "created_at": "2011-05-15 11:59:25", "user": 9582, "id": 1165784}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165811", "text": "@josevalim I have added test here for the main problem in engine_test\n\nhttps://github.com/rails/rails/commit/e72a6f8d9132f1159cfba69cabcfeb6776bc7d48\n\nif we need then can add here also \n", "created_at": "2011-05-15 12:13:03", "user": 3948, "id": 1165811}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165819", "text": "Ah, no need then. Thanks @arunagw!\n", "created_at": "2011-05-15 12:19:26", "user": 9582, "id": 1165819}], "assignees": [5004, 5004], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "reloading an association will properly set attributes of instantiated objects respecting overloading and composed_of\n", "labels": [], "number": 530, "updated_at": "2014-07-03 04:06:21", "user": 90695, "closed_at": "2011-05-14 18:59:25", "id": 891158, "title": "Reloading an association works incorrectly when there is overloading or composed_of", "url": "https://api.github.com/repos/rails/rails/issues/530", "created_at": "2011-05-12 19:19:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149044", "text": "Can you explain more about what problem you are trying to solve please?\n", "created_at": "2011-05-12 20:22:42", "user": 1979, "id": 1149044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149407", "text": "So, you have this situation:\n\nclass MainClass\n  has_many :many_classes\nend\nclass ManyClass\n  composed_of :amount, :class => 'ComposedClass'\nend\n\nclass ComposedClass\nend\n\na = MainClass.first\nb = ManyClass.new(:amount => ComposedClass.new)\na.many_classes << b\na.many_classes.each do |obj|\n  raise \"Not Composed Class\" unless obj.amount.is_a?(ComposedClass) #this exception will be raised on the last item\nend\n", "created_at": "2011-05-12 21:29:15", "user": 90695, "id": 1149407}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149794", "text": "Rather than just writing a load of code, I need you to explain to me in words what you're trying to do, what you expect to happen, and what actually happens. It would help enormously if you actually used realistic examples too, rather than giving examples with arbitrary naming etc. Thanks.\n", "created_at": "2011-05-12 22:48:14", "user": 1979, "id": 1149794}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150061", "text": "In my case I have a cart, this cart has items in it. Each item has a price, the price is composed_of a money object which has a currency and an amount.\n\nWhen an item is added to the cart, there are several things that happen. The total is recalculated and checks are run to determine if the purchases are over budget are run. The problem is, when you have a cart and then add an item to it, it loses the composed of, so when you try to compute the total by adding all the monies, one of them is not a money.\n", "created_at": "2011-05-12 23:43:27", "user": 90695, "id": 1150061}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1163402", "text": "Hi there,\n\nI have fixed this in 60b23ea1da1c119eaab6d07e5a03cf3b5d5577d4. I wanted to clean up the code a bit at the same time and I wrote the test without using composed_of (as the bug was more generic, using composed_of was just a symptom of it).\n\nThanks\n", "created_at": "2011-05-14 18:59:25", "user": 1979, "id": 1163402}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Because javascript libraries are not bundled anymore, and create_javascript_files generator was already removed by 5e7e81ab1aaeed504b98\n", "labels": [], "number": 531, "updated_at": "2014-07-03 04:06:25", "user": 11493, "closed_at": "2011-05-12 19:44:45", "id": 891188, "title": "remove update:javascripts rake task", "url": "https://api.github.com/repos/rails/rails/issues/531", "created_at": "2011-05-12 19:26:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Because rake rails:update:scripts fails due to this change.\n", "labels": [], "number": 532, "updated_at": "2014-06-25 06:10:30", "user": 11493, "closed_at": "2011-05-12 20:15:12", "id": 891197, "title": "Revert \"Delegate everything to the generator\"", "url": "https://api.github.com/repos/rails/rails/issues/532", "created_at": "2011-05-12 19:27:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1148837", "text": "Thanks for the pull request. But why rake rails:update:scripts fail? What is the backtrace?\n", "created_at": "2011-05-12 19:45:42", "user": 9582, "id": 1148837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1148945", "text": "Here's the back trace\n```** Invoke rails:update:scripts (first_time)\n** Execute rails:update:scripts\nrake aborted!\nundefined method`to_str' for 493:Fixnum\n/Users/a_matsuda/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/fileutils.rb:1395:in `fu_list'\n/Users/a_matsuda/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/fileutils.rb:1395:in`map'\n/Users/a_matsuda/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/fileutils.rb:1395:in `fu_list'\n/Users/a_matsuda/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/fileutils.rb:872:in`chmod'\n/Users/a_matsuda/.rvm/gems/ruby-1.8.7-p334/gems/rake-0.8.7/lib/rake.rb:1094:in `chmod'\n/Users/a_matsuda/src/rails/railties/lib/rails/generators/rails/app/app_generator.rb:96:in`script'\n/Users/a_matsuda/src/rails/railties/lib/rails/generators/app_base.rb:90:in `send'\n/Users/a_matsuda/src/rails/railties/lib/rails/generators/app_base.rb:90:in`build'\n/Users/a_matsuda/src/rails/railties/lib/rails/generators/rails/app/app_generator.rb:199:in `create_script_files'\n/Users/a_matsuda/src/rails/railties/lib/rails/tasks/framework.rake:40:in`send'\n/Users/a_matsuda/src/rails/railties/lib/rails/tasks/framework.rake:40:in `invoke_from_app_generator'\n/Users/a_matsuda/src/rails/railties/lib/rails/tasks/framework.rake:68\n\n```\n\n`chmod` here https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/app/app_generator.rb#L96 expects Thor's `chmod` method to be invoked, but actually delegated to `FileUtils.chmod` since:\n AppBuilder class includes FileUtils in its ancestors\n-> AppBuilder responds_to chmod\n-> Rails::ActionMethods#method_missing would never be called\n```\n", "created_at": "2011-05-12 20:07:25", "user": 11493, "id": 1148945}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Creating this ticket from pull request #528.\n\n@wakeless says:\n\n> Adding a default_scope to the end of a has_many :through relationship breaks a number of things.\n> \n> I've found it through a :uniq => true on the relationship, but the attached change to the tests seems to break a number of other things\n", "labels": ["activerecord"], "number": 533, "updated_at": "2013-07-29 12:43:07", "user": 1979, "closed_at": "2012-03-29 00:20:14", "id": 891415, "title": "Default scope breaks working of has_many :through", "url": "https://api.github.com/repos/rails/rails/issues/533", "created_at": "2011-05-12 20:15:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149105", "text": "I can confirm this bug, I get a\n  Mysql2::Error: Not unique table/alias: 'questions_has_sections': SELECT `questions`.\\* FROM `questions` INNER JOIN `questions_has_sections` ON `questions_has_sections`.`question_id` = `questions`.`id` INNER JOIN `questions_has_sections` ON `questions`.`id` = `questions_has_sections`.`question_id` WHERE `questions_has_sections`.`section_id` = 1\n\nmeaning it joins the questions_has_sections twice, I will try to create a failing test\n", "created_at": "2011-05-12 20:35:51", "user": 127208, "id": 1149105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149614", "text": "Well silly me, #528 already contained a \"failing test\". I tried and failed to recreate it here https://github.com/Fonsan/rails/commit/bae49f37781995ec1d10579c9763255ca0f93e32 if it helps tracking down\n", "created_at": "2011-05-12 22:10:19", "user": 127208, "id": 1149614}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150763", "text": "The failing error I get here is, \n\n```\n 31) Error:\ntest_joining_has_many_through_with_uniq(HasManyThroughAssociationsTest):\nActiveRecord::StatementInvalid: SQLite3::SQLException: near \"DISTINCT\": syntax error: SELECT posts.*, DISTINCT \"posts\".* FROM \"posts\" INNER JOIN \"categorizations\" ON \"posts\".\"id\" = \"categorizations\".\"post_id\" WHERE \"categorizations\".\"author_id\" = 2\n    /Users/michaelgall/.rvm/gems/ruby-1.9.2-p136/gems/sqlite3-1.3.3/lib/sqlite3/database.rb:91:in `initialize'\n    /Users/michaelgall/.rvm/gems/ruby-1.9.2-p136/gems/sqlite3-1.3.3/lib/sqlite3/database.rb:91:in `new'\n    /Users/michaelgall/.rvm/gems/ruby-1.9.2-p136/gems/sqlite3-1.3.3/lib/sqlite3/database.rb:91:in `prepare'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb:165:in `block in exec_query'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:222:in `block in log'\n    /Users/michaelgall/Documents/dev/rails/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:217:in `log'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb:161:in `exec_query'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb:372:in `select'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:9:in `select_all'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/base.rb:469:in `find_by_sql'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/relation.rb:106:in `to_a'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/relation/finder_methods.rb:155:in `all'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/associations/has_many_through_association.rb:137:in `find_target'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/associations/collection_association.rb:342:in `load_target'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/associations/collection_association.rb:273:in `length'\n    /Users/michaelgall/Documents/dev/rails/activerecord/lib/active_record/associations/collection_proxy.rb:47:in `length'\n    test/cases/associations/has_many_through_associations_test.rb:697:in `test_joining_has_many_through_with_uniq'\n    /Users/michaelgall/.rvm/gems/ruby-1.9.2-p136/gems/mocha-0.9.12/lib/mocha/integration/mini_test/version_142_to_172.rb:27:in `run'\n    /Users/michaelgall/Documents/dev/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `block in run'\n    /Users/michaelgall/Documents/dev/rails/activesupport/lib/active_support/callbacks.rb:408:in `_run_setup_callbacks'\n    /Users/michaelgall/Documents/dev/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /Users/michaelgall/Documents/dev/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:34:in `run'\n```\n\nThe distinct is placed out of order.\n\nThis doesn't seem to be a regression from 3.0 however.\n", "created_at": "2011-05-13 03:43:19", "user": 224373, "id": 1150763}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1151493", "text": "Thanks. I have put 3.2 as the milestone as the focus is on regressions right now.\n\nNote to my future self: I think we should consider adding a `ActiveRecord::Relation#uniq` query method which would add in the `DISTINCT` when it builds the query, rather than adding DISTINCT as a string using `select()`.\n", "created_at": "2011-05-13 07:40:15", "user": 1979, "id": 1151493}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1151513", "text": "While it isn't a regression, it pretty much makes :uniq useless as can't\nrely on it not breaking the joins.\n\nOn Fri, May 13, 2011 at 5:40 PM, jonleighton <\nreply@reply.github.com>wrote:\n\n> Thanks. I have put 3.2 as the milestone as the focus is on regressions\n> right now.\n> \n> Note to my future self: I think we should consider adding a\n> `ActiveRecord::Relation#uniq` query method which would add in the `DISTINCT`\n> when it builds the query, rather than adding DISTINCT as a string using\n> `select()`.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/533#comment_1151493\n\n## \n\nCheckout my new website: http://myachinghead.net\nhttp://wakeless.net\n", "created_at": "2011-05-13 07:44:42", "user": 224373, "id": 1151513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1151865", "text": "What I am experiencing is a regression from 3.0.7\n\nAlthough it does not seem to have anything to do with default_scope\n\nhttps://gist.github.com/970227\n", "created_at": "2011-05-13 09:14:26", "user": 127208, "id": 1151865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152804", "text": "@Fonsan: that must be a completely different issue, so I've created a separate ticket: #543\n", "created_at": "2011-05-13 13:29:11", "user": 1979, "id": 1152804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1465115", "text": "This bug was fixed in master branch? is there anyone try to fix it for 3.0 / 3.1?\n", "created_at": "2011-06-29 06:41:39", "user": 6843, "id": 1465115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1529962", "text": "I have a similar issue in that a has_many with conditions where there is a default scope on the child class is a big issue for me in that the default scope either gets ignored buy the has\n_many or can even cause issues with the has_many failing to return records when it should succeed. \nI originally thought this was an RSpec bug but am assures it's a Rails issue.\nBug report to RSpec can be found here https://github.com/rspec/rspec-rails/issues/408#issuecomment-1493817\nNot sure if I should post this as a new bug or if it is related to this issue at all\n", "created_at": "2011-07-08 03:06:03", "user": 16945, "id": 1529962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3563453", "text": "It does appear that this issue is fixed on 3.1 branch. I'm going to be seeing what it would take to back port it to Rails 3.0.x, as we are currently gem locked into Ruby 1.8.7, and cannot upgrade to Rails 3.1 and 1.9.2 immediately.\n\nMy question, what does the outlook of Rails 3.0.x look like. Would it be upgraded with new fixes and patches?\n", "created_at": "2012-01-19 14:31:47", "user": 1119504, "id": 3563453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4794413", "text": "@pivotal-evo I think that he 3-0-stable is only to security fixes.\n\nI'm closing this issue since it was fixed in 3-1-stable branch.\n\nFeel free to reopen it it's still present.\n", "created_at": "2012-03-29 00:20:14", "user": 47848, "id": 4794413}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21716155", "text": "This issue still remain in rails 3.2.12 with pg adapter.\n", "created_at": "2013-07-29 12:24:15", "user": 502254, "id": 21716155}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Assuming a join table of the following structure:\n\n``` sql\n    create table articles_tags(\n      article_id            integer not null references articles(id),\n      tag_id                integer not null references tags(id),\n      primary key(article_id, tag_id)\n    );\n```\n\nRunning db:seed gives me the following error:\n\n``` bash\nPrimary key is not allowed in a has_and_belongs_to_many join table (articles_tags).\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activerecord-3.1.0.beta1/lib/active_record/associations/builder/has_and_belongs_to_many.rb:44:in `check_validity'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activerecord-3.1.0.beta1/lib/active_record/associations/builder/has_and_belongs_to_many.rb:9:in `build'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activerecord-3.1.0.beta1/lib/active_record/associations/builder/collection_association.rb:13:in `build'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activerecord-3.1.0.beta1/lib/active_record/associations.rb:1573:in `has_and_belongs_to_many'\n/Users/omarqureshi/Source/Blog/app/models/article.rb:4:in `<class:Article>'\n/Users/omarqureshi/Source/Blog/app/models/article.rb:1:in `<top (required)>'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:452:in `load'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:452:in `block in load_file'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:639:in `new_constants_in'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:451:in `load_file'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:338:in `require_or_load'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:489:in `load_missing_constant'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:181:in `block in const_missing'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:179:in `each'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:179:in `const_missing'\n/Users/omarqureshi/Source/Blog/db/seeds.rb:11:in `block in <top (required)>'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/abstract/database_statements.rb:191:in `transaction'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activerecord-3.1.0.beta1/lib/active_record/transactions.rb:208:in `transaction'\n/Users/omarqureshi/Source/Blog/db/seeds.rb:1:in `<top (required)>'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:233:in `load'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:233:in `block in load'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:223:in `block in load_dependency'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:639:in `new_constants_in'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:223:in `load_dependency'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activesupport-3.1.0.beta1/lib/active_support/dependencies.rb:233:in `load'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/railties-3.1.0.beta1/lib/rails/engine.rb:470:in `load_seed'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@omarblog/gems/activerecord-3.1.0.beta1/lib/active_record/railties/databases.rake:295:in `block (2 levels) in <top (required)>'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:636:in `call'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:636:in `block in execute'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:631:in `each'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:631:in `execute'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:597:in `block in invoke_with_call_chain'\n/Users/omarqureshi/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/monitor.rb:201:in `mon_synchronize'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:590:in `invoke_with_call_chain'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:583:in `invoke'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:2051:in `invoke_task'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:2029:in `block (2 levels) in top_level'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:2029:in `each'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:2029:in `block in top_level'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:2068:in `standard_exception_handling'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:2023:in `top_level'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:2001:in `block in run'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:2068:in `standard_exception_handling'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/lib/rake.rb:1998:in `run'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/gems/rake-0.8.7/bin/rake:31:in `<top (required)>'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/bin/rake:19:in `load'\n/Users/omarqureshi/.rvm/gems/ruby-1.9.2-p180@global/bin/rake:19:in `<main>'\n```\n\nWhy does activerecord now care about whether join tables have primary keys?\n", "labels": [], "number": 534, "updated_at": "2011-09-15 21:50:10", "user": 35229, "closed_at": "2011-06-10 14:30:57", "id": 892095, "title": "has and belongs to many join tables do not allow primary keys", "url": "https://api.github.com/repos/rails/rails/issues/534", "created_at": "2011-05-12 22:38:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149812", "text": "Myself and @tenderlove both think that we should not care about primary keys on the join table, but we're not sure why this error was added in the first place.\n\n@lifo can you shed any light?\n", "created_at": "2011-05-12 22:53:24", "user": 1979, "id": 1149812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149895", "text": "I did a bit of digging through the commit log. Here's when the error was first introduced: https://github.com/rails/rails/commit/9d51f628\n\nHere's the lighthouse ticket: https://rails.lighthouseapp.com/projects/8994/tickets/2086\n\nThere used to be a feature whereby extra fields on a habtm join table would appear on the associated model. And so the concern was that by allowing a user to define \"id\" on their join table (for example), that could overwrite the id field on the associated record's object and cause confusing problems.\n\nHowever, the above feature has been deprecated for a long time and is being removed in 3.1. So I think we can now remove this error message too. I'm going to set the milestone as 3.2 though as the focus at the moment is on fixing regressions.\n", "created_at": "2011-05-12 23:04:26", "user": 1979, "id": 1149895}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1149932", "text": "That is interesting, i'm pretty sure I haven't been bit by this in 2.3 / 3.0.\nThanks though\n", "created_at": "2011-05-12 23:10:31", "user": 35229, "id": 1149932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342432", "text": "This has been solved with the previously displayed commit. The issue should be closed.\n\ncc @jonleighton\n", "created_at": "2011-06-10 13:58:40", "user": 9347, "id": 1342432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2108424", "text": "Couldn't this be ported to the 3.1.x line?  I'm converting a large application to 3.1 and it has many, many join tables with primary keys on the two columns.  It seems like a regression in functionality to me\n", "created_at": "2011-09-15 19:57:18", "user": 301415, "id": 2108424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2108506", "text": "I've done it in #3036, waiting to be merged.\n", "created_at": "2011-09-15 20:03:31", "user": 9347, "id": 2108506}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I have a legacy application I ported from Rails 2.x.  I found that the escaping was occurring where it shouldn't, like in\ncreation of forms, and I couldn't turn it off.  I found two mechanisms that\nshould have disabled it, a function safe_html, which is supposed to mark a\nstring as not needing to be escaped.  The other is raw, which similarly\nindicates that a string should be output in its raw form, even if it's not safe\nHTML.  Neither of these mechanisms seem to function for me.  Anyone know of something I might have done to muck up this functionality?  Is there a problematic gem possibly?\n\nDan\n", "labels": [], "number": 535, "updated_at": "2011-05-13 02:54:14", "user": 707465, "closed_at": "2011-05-13 02:54:14", "id": 892255, "title": "Rails 3 Forces HTML Escape of Forms", "url": "https://api.github.com/repos/rails/rails/issues/535", "created_at": "2011-05-12 23:17:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150643", "text": "Please send questions and general discussion to the mailing list.\n", "created_at": "2011-05-13 02:54:14", "user": 9582, "id": 1150643}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "There were a lot of simple errors with railties' gem code causing exceptions to be raised when starting a rails 2.3 app with rubygems 1.8.x installed. This fixes those errors. This should also address nearly all deprecations.\n\nI still need to work the use of SourceIndex out of it, but that can come later.\n", "labels": [], "number": 536, "updated_at": "2014-07-03 03:44:44", "user": 9832, "closed_at": "2011-05-27 21:49:23", "id": 892296, "title": "Fix several of the rubygem issues in rails 2-3-stable. ", "url": "https://api.github.com/repos/rails/rails/issues/536", "created_at": "2011-05-12 23:24:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234117", "text": "shit shit shit... I said I'd push my fixes to the specs/rakefiles... doing so now!\n", "created_at": "2011-05-25 08:45:40", "user": 9832, "id": 1234117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234182", "text": "BTW, you may use gemsets for local tests instead of bumping versions.\n", "created_at": "2011-05-25 09:03:34", "user": 128683, "id": 1234182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234216", "text": "The part about rake/rdoctask => rdoc/task has already been committed b921679d0dd3d5ca16f0362c2b34e7703cfe15e5\n", "created_at": "2011-05-25 09:10:43", "user": 9347, "id": 1234216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234247", "text": "flippingbits: I don't use rvm and was installing into a private gem repo (essentially a gemset) with 2.3.11 for performance testing (with 300ish other gems).\n\ndmathieu: thanks, but I did this more than 14 hours ago :) I guess it doesn't need to be backported then (since that was on master). Alternatively, I can roll that commit out and we can backport...\n", "created_at": "2011-05-25 09:17:36", "user": 9832, "id": 1234247}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "removed a noise introduced by 00379ee998b5ed10d8a4197f3fa0f57873f17ba1\n", "labels": [], "number": 537, "updated_at": "2014-07-03 04:06:44", "user": 11493, "closed_at": "2011-05-13 00:06:12", "id": 892526, "title": "eliminating the noise", "url": "https://api.github.com/repos/rails/rails/issues/537", "created_at": "2011-05-13 00:04:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150159", "text": "Thanks! :)\n", "created_at": "2011-05-13 00:06:25", "user": 3387, "id": 1150159}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Commit 1 : rack-mount gem updated to 0.7.3 (contains fix for (route segment values) #529\n\nCommit2 : Added tests for #529 (Not sure if we needed here. If not please discard this.)\n", "labels": [], "number": 538, "updated_at": "2014-06-26 11:12:28", "user": 3948, "closed_at": "2011-05-13 09:55:29", "id": 892980, "title": "Update rack mount", "url": "https://api.github.com/repos/rails/rails/issues/538", "created_at": "2011-05-13 02:45:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152027", "text": "Thanks, it's definitely good to have such test in Rails\n", "created_at": "2011-05-13 09:55:49", "user": 5004, "id": 1152027}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Here is a failing test case:\n\n```\ndef test_join_across_tables_in_different_databases\n  history    = Course.create! :name => \"History of the American Automobile\"\n  death_mech = Course.create! :name => \"Classical Mechanics\"\n  boss       = Entrant.create! :name => \"Charles Kettering\", :course => history\n  isaac      = Entrant.create! :name => \"Sir Isaac Newton\",  :course => death_mech\n\n  assert_equal [history], Course.joins(:entrants).where(:entrants => {:name => \"Charles Kettering\"}).to_a\nend\n```\n\nThis test fails because the generated SQL, which looks like this:\n\n```\nSELECT \"courses\".* FROM \"courses\" INNER JOIN \"entrants\" ON \"entrants\".\"course_id\" = \"courses\".\"id\" WHERE \"entrants\".\"name\" = 'Charles Kettering'\n```\n\ndoes not fully qualify the table names with the database name.\n\nHere is the patch for the failing test case:\n\n```\ndiff --git a/activerecord/test/cases/associations/join_model_test.rb b/activerecord/test/cases/associations/join_model_test.rb\nindex 49a1c11..7d49452 100644\n--- a/activerecord/test/cases/associations/join_model_test.rb\n+++ b/activerecord/test/cases/associations/join_model_test.rb\n@@ -13,6 +13,8 @@ require 'models/vertex'\n require 'models/edge'\n require 'models/book'\n require 'models/citation'\n+require 'models/course'\n+require 'models/entrant'\n\n class AssociationsJoinModelTest < ActiveRecord::TestCase\n   self.use_transactional_fixtures = false unless supports_savepoints?\n@@ -704,6 +706,15 @@ class AssociationsJoinModelTest < ActiveRecord::TestCase\n     assert_equal [9, 10, new_comment.id], authors(:david).sti_post_comments.map(&:id).sort\n   end\n\n+  def test_join_across_tables_in_different_databases\n+    history    = Course.create! :name => \"History of the American Automobile\"\n+    death_mech = Course.create! :name => \"Classical Mechanics\"\n+    boss       = Entrant.create! :name => \"Charles Kettering\", :course => history\n+    isaac      = Entrant.create! :name => \"Sir Isaac Newton\",  :course => death_mech\n+\n+    assert_equal [history], Course.joins(:entrants).where(:entrants => {:name => \"Charles Kettering\"}).to_a\n+  end\n+\n   private\n     # create dynamic Post models to allow different dependency options\n     def find_post_with_dependency(post_id, association, association_name, dependency)\n```\n", "labels": [], "number": 539, "updated_at": "2012-02-15 15:38:56", "user": 8207, "closed_at": "2011-05-25 15:52:13", "id": 893039, "title": "joins across tables in different databases generates invalid SQL", "url": "https://api.github.com/repos/rails/rails/issues/539", "created_at": "2011-05-13 03:14:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150944", "text": "Thanks Mike!  I'll take a look at this unless @jonleighton beats me to it. ;-)\n", "created_at": "2011-05-13 04:52:43", "user": 3124, "id": 1150944}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150949", "text": "@flavorjones can you add this patch with `git format-patch` so you get proper credit?\n", "created_at": "2011-05-13 04:54:04", "user": 3124, "id": 1150949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152678", "text": "Properly formatted patch is up at https://gist.github.com/970483 and inline below:\n\n```\nFrom 641e1e0bebdea1cf5ad4e156afe0ecb6a91241c4 Mon Sep 17 00:00:00 2001\nFrom: Mike Dalessio <mike@csa.net>\nDate: Fri, 13 May 2011 08:53:49 -0400\nSubject: [PATCH] Test for table join across databases (connections).\n\n---\n .../test/cases/associations/join_model_test.rb     |   11 +++++++++++\n 1 files changed, 11 insertions(+), 0 deletions(-)\n\ndiff --git a/activerecord/test/cases/associations/join_model_test.rb b/activerecord/test/cases/associations/join_model_test.rb\nindex 49a1c11..addb93e 100644\n--- a/activerecord/test/cases/associations/join_model_test.rb\n+++ b/activerecord/test/cases/associations/join_model_test.rb\n@@ -13,6 +13,8 @@ require 'models/vertex'\n require 'models/edge'\n require 'models/book'\n require 'models/citation'\n+require 'models/course'\n+require 'models/entrant'\n\n class AssociationsJoinModelTest < ActiveRecord::TestCase\n   self.use_transactional_fixtures = false unless supports_savepoints?\n@@ -704,6 +706,15 @@ class AssociationsJoinModelTest < ActiveRecord::TestCase\n     assert_equal [9, 10, new_comment.id], authors(:david).sti_post_comments.map(&:id).sort\n   end\n\n+    def test_join_across_tables_in_different_databases\n+      history    = Course.create! :name => \"History of the American Automobile\"\n+      death_mech = Course.create! :name => \"Classical Mechanics\"\n+      boss       = Entrant.create! :name => \"Charles Kettering\", :course => history\n+      isaac      = Entrant.create! :name => \"Sir Isaac Newton\",  :course => death_mech\n+\n+      assert_equal [history], Course.joins(:entrants).where(:entrants => {:name => \"Charles Kettering\"}).to_a\n+    end\n+\n   private\n     # create dynamic Post models to allow different dependency options\n     def find_post_with_dependency(post_id, association, association_name, dependency)\n-- \n1.7.4.1\n```\n", "created_at": "2011-05-13 12:58:10", "user": 8207, "id": 1152678}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152761", "text": "Please also note that this issue was originally brought up [here in lighthouse](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1902-establish_connection-does-not-support-joins)\n", "created_at": "2011-05-13 13:20:45", "user": 8207, "id": 1152761}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193470", "text": "One way to do this is to set `table_name_prefix` on Course and Entrant (or their abstract base classes):\n\n``` ruby\nCourse.table_name_prefix = 'activerecord_unittest.'\nEntrant.table_name_prefix = 'activerecord_unittest2.'\n```\n\nSince cross-db joins aren't generally supported, this workaround seems reasonable.\n", "created_at": "2011-05-17 22:04:16", "user": 199, "id": 1193470}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234869", "text": "Waaah. Yes, that actually _does_ work.\n\nFor posterity, an extremely usable pattern would be:\n\n```\nCourse.set_table_name = \"#{Course.connection.current_database}.#{Course.table_name}\"\nEntrant.set_table_name = \"#{Entrant.connection.current_database}.#{Entrant.table_name}\"\n```\n\nwhich could be extracted like so:\n\n```\nclass ActiveRecord::Base\n  def self.will_be_joined_across_databases!\n    set_table_name \"#{connection.current_database}.#{table_name}\"\n  end\nend\n\nCourse.will_be_joined_across_databases!\nEntrant.will_be_joined_across_databases!\n```\n\nBoom. I'm happy.\n", "created_at": "2011-05-25 11:59:52", "user": 8207, "id": 1234869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236084", "text": "Awesome.  I will close this.  Thanks for checking it out!\n", "created_at": "2011-05-25 15:52:13", "user": 3124, "id": 1236084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3982101", "text": "Quick question: was this patched so `joins(:model_from_other_db)` works with no special changes? Or is the correct pattern to set `table_name_prefix` slash have a `table_name` that does the right thing?\n", "created_at": "2012-02-15 15:24:18", "user": 50673, "id": 3982101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3982412", "text": "Per @jeremy's note above, cross-db joins are not generally supported, so the only thing that works for me is the table name hack, which I can only claim works on joins between MySQL databases on the same db system.\n", "created_at": "2012-02-15 15:38:56", "user": 8207, "id": 3982412}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is per @dhh request as to complete the 1.9 generator series\n", "labels": [], "number": 540, "updated_at": "2014-07-03 04:06:51", "user": 4912, "closed_at": "2011-05-13 22:29:43", "id": 893235, "title": "Update Mailer generator to use 1.9 styled hash when run on Ruby 1.9", "url": "https://api.github.com/repos/rails/rails/issues/540", "created_at": "2011-05-13 04:46:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152213", "text": "Are we already changing all the guides to reflect the 1.9 hash format? /cc @fxn\n", "created_at": "2011-05-13 10:47:10", "user": 762, "id": 1152213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1152438", "text": "We aren't, and I'm going to submit a patch for that today. :)\n", "created_at": "2011-05-13 11:59:19", "user": 4912, "id": 1152438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157609", "text": "@sikachu, could you please provide a pull request without changing the guides? I don't think we should change the guides yet as we still support 1.8.7. Thanks! /cc @fxn \n", "created_at": "2011-05-13 21:59:24", "user": 9582, "id": 1157609}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157769", "text": "Commit updated\n", "created_at": "2011-05-13 22:27:54", "user": 4912, "id": 1157769}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A lot of Rails devs use Macs and end up with .DS_Store files in their Rails apps. Everyone **should** put \".DS_Store\" in their global .gitignore, but most don't. This will keep .DS_Store files out of repos.\n", "labels": [], "number": 541, "updated_at": "2014-06-14 17:35:00", "user": 4361, "closed_at": "2011-05-13 14:42:08", "id": 893237, "title": "I added \".DS_Store\" to gitignore files", "url": "https://api.github.com/repos/rails/rails/issues/541", "created_at": "2011-05-13 04:47:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1150966", "text": "I don't think this belongs in a project's .gitignore file. It's system specific and should be in the user's `~/.gitignore` file.\n", "created_at": "2011-05-13 04:58:37", "user": 161, "id": 1150966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1151019", "text": "I totally agree with @ryanb. The default .gitignore must contains only project specific rules that apply to any Rails user.\n", "created_at": "2011-05-13 05:12:33", "user": 160941, "id": 1151019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1153188", "text": "Agree, this is system specific\n", "created_at": "2011-05-13 14:42:08", "user": 52642, "id": 1153188}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 542, "updated_at": "2014-07-03 01:02:53", "user": 160941, "closed_at": "2011-05-13 22:01:15", "id": 893334, "title": "Use new hash syntax in wrap_parameters initializer under Ruby 1.9", "url": "https://api.github.com/repos/rails/rails/issues/542", "created_at": "2011-05-13 05:47:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2298611", "text": "That is cool, but not good!\n\nThis makes application generated with ruby 1.9.2 unusable with ruby 1.8.7!\n\nFor example, I am using ruby 1.9.2 for development, but on the test server I only have ruby 1.8.7 - and of course, can't run the application :'-(\n", "created_at": "2011-10-05 14:41:46", "user": 646720, "id": 2298611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2298710", "text": "You can create app using old hash syntax:\n\n```\nrails new example --old-style-hash\n```\n\nIf you are using rails master you can add it to the .railsrc file in your user home dir and it will be set as default for all your new applications:\n\n```\n--old-style-hash\n```\n\nIn general is a good idea use same version of Ruby in development machine and in servers\n", "created_at": "2011-10-05 14:50:03", "user": 160941, "id": 2298710}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Originally reported by @Fonsan in #533.\n\nDemonstrated here: https://gist.github.com/970227\n", "labels": [], "number": 543, "updated_at": "2011-05-15 22:56:24", "user": 1979, "closed_at": "2011-05-14 19:36:31", "id": 894739, "title": "Duplicate joins on a has_many :through", "url": "https://api.github.com/repos/rails/rails/issues/543", "created_at": "2011-05-13 13:28:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1154336", "text": "Again this is a regression from 3.0.7 and does not work on 3.1.beta1 or master, I'm currently debugging the issue\n", "created_at": "2011-05-13 15:37:47", "user": 127208, "id": 1154336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1156127", "text": "@Fonsan I am unable to reproduce your problem on master, despite using the exact model set up that you have given. These are the changes I applied to try it out: https://gist.github.com/971105\n\nI get no error, and the correct SQL is generated with just a single join.\n\nAre you sure you're not doing something else in your actual application?\n", "created_at": "2011-05-13 19:07:45", "user": 1979, "id": 1156127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1156284", "text": "Agreed I tried to reproduce in a new project myself without luck. I will look into it more tomorrow\n", "created_at": "2011-05-13 19:40:54", "user": 127208, "id": 1156284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1163499", "text": "Closing this for now as a cannot reproduce. Please reopen if you have new details that confirm that it's still present.\n", "created_at": "2011-05-14 19:36:31", "user": 2741, "id": 1163499}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167777", "text": "After about 2 hours of going through the full callstack of creating a through reflection and then creating a association in IRB ruby-debug collection proxy hell \n\nI produced \nhttps://gist.github.com/raw/970227/a3e77bf861a590871f45467481398ae2dd33ca74/Final%20debugger%20WIN\n\nA smack in the face for being on the bleeding edge :D, I was trying out the squeel gem\n\n@ernie here I come\n\nIn the end I learned alot and it was quite fun\n", "created_at": "2011-05-15 22:49:46", "user": 127208, "id": 1167777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167802", "text": "Already fixed in Squeel. See https://github.com/ernie/squeel/issues/2 . :)\n", "created_at": "2011-05-15 22:55:21", "user": 14947, "id": 1167802}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167805", "text": "Already bundle installing :D\n", "created_at": "2011-05-15 22:56:24", "user": 127208, "id": 1167805}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Ruby 1.8.7 and 1.9.2 understand the concept of 'infinity'.\n\n$ irb\nruby-1.8.7-p334 :001 > infinity = 1.0/0\n => Infinity\nruby-1.8.7-p334 :002 > ninfinity = -1.0/0\n => -Infinity\nruby-1.8.7-p334 :003 >\n\nFurther,  ActiveRecord::Migration, perhaps inadvertently, supports the concept of infinity as recognized by the PostgreSQL pg adapter:\n\n  def self.up\n    create_table :ca_customs_shipments do |t|\n      t.datetime  :expected_at,\n                    :default => 'infinity',\n                    :null => false\n\nResults in:\n\n-- Column: expected_at\n\n-- ALTER TABLE ca_customs_shipments DROP COLUMN expected_at;\n\nALTER TABLE ca_customs_shipments ADD COLUMN expected_at timestamp without time zone;\nALTER TABLE ca_customs_shipments ALTER COLUMN expected_at SET STORAGE PLAIN;\nALTER TABLE ca_customs_shipments ALTER COLUMN expected_at SET NOT NULL;\nALTER TABLE ca_customs_shipments ALTER COLUMN expected_at SET DEFAULT 'infinity'::timestamp without time zone;\n\nHowever, when obtaining default values from its PostgreSQL adapter, postgresql.rb, AR evidently treats 'infinity' as nil.  This appears to be a defect caused by the Ruby implementation of the Date class.  \n\nThe coercion of Infinity to a date raises the following exceptions:\n\nruby-1.8.7-p334 :016 > x = 1.0/0\n => Infinity \nruby-1.8.7-p334 :017 > x.to_date\nNoMethodError: undefined method `to_date' for Infinity:Float\n        from (irb):17\nruby-1.8.7-p334 :018 > y = -1.0/0\n => -Infinity \nruby-1.8.7-p334 :019 > y.to_date\nNoMethodError: undefined method`to_date' for -Infinity:Float\n        from (irb):19\n\nSince these are distinctively related to infinity values it seems reasonable that one could trap them and override the exception by assigning 1.0/0 and -1.0/0 to the receiver instead.  The effect of this is consistent with current behaviour inside Rails\n\nruby-1.8.7-p334 :003 > x = \"19920101000000\".to_date\n => Wed, 01 Jan 1992 \nruby-1.8.7-p334 :004 > x.class\n => Date \nruby-1.8.7-p334 :005 > x < 1\n => false \nruby-1.8.7-p334 :006 > x < 1.0/0\n => true \nruby-1.8.7-p334 :007 > x < -1.0/0\n => false \n\nInfinity and -Infinity are acceptable values for timestamp columns in current versions of PostgreSQl.  Evidence suggests that the pg gem handles this. It seems that the ORM of Rails also should support this in some fashion.\n", "labels": [], "number": 544, "updated_at": "2011-10-31 19:25:17", "user": 37126, "closed_at": "2011-05-13 20:05:19", "id": 895143, "title": "AR should handle timestamp values of 'Infinity'", "url": "https://api.github.com/repos/rails/rails/issues/544", "created_at": "2011-05-13 14:52:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1155277", "text": "Apparently Date understands infinity in some sense as well:\n\nruby-1.9.2-p0 :014 > require \"date\"\n => true \nruby-1.9.2-p0 :015 > x = Date::Infinity.new\n => #<Date::Infinity:0x00000004922850 @d=1> \nruby-1.9.2-p0 :016 > x.class\n => Date::Infinity\n", "created_at": "2011-05-13 18:23:40", "user": 37126, "id": 1155277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1156517", "text": "It looks like `Date::Infinity` just tries to mimic `Infinity`, and it's nodoc'ed in trunk.  I think just accepting and returning a regular `Infinity` would be appropriate.\n", "created_at": "2011-05-13 19:58:20", "user": 3124, "id": 1156517}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This bug causes cached asset responses to be invalid after two successful requests. This means that with ActionController caching enabled in production, assets will not be returned correctly to clients. To us, this seems to be an RC-stopping issue.\n\nIn the Rails 3.1.0.beta1, using:\n- rails (3.1.0.beta1)\n- rack (1.3.0.beta)\n- rack-cache (1.0.1)\n\nThere is a reproducible bug when ActionController caching is enabled (in production), where `ActionDispatch::RailsMetaStore`, along with `ActiveSupport::Cache::MemoryStore`, will ultimately cause `Rack::Cache` to return an `HTTP 0` (invalid!) response to Rack.\n\nThe implementation of Rack::Cache works by storing hashes into the cache to retrieve on future requests. Those hashes are written and pulled as necessary for invalidation.\n\nThe basic lifecycle looks like this:\n1. First request, cache empty, find file, generate fingerprint, append to file name, store request response hash information to cache, serve content back to client with a miss, store header response on the cache,\n2. Second request, identify matching file request based on name and fingerprint, read from cache, read and drop the `X-Status` header from the cached hash and return that hash forward to Rack.\n3. Third request, identify matching file request based on name and fingerprint, read from cache, read and drop the `X-Status` header (except it's already been DELETED!), find no status, return HTTP 0 to rack.\n4. All subsequent matches follow #3.\n\nSo, it seems to be that because the MemoryStore cache is handing back the hash object directly, Rack::Cache is then manipulating it before handing it upstream to Rack. In most cases, that's fine, except that because MemoryStore is handing back the actual object, and Rack::Cache is manipulating it, the cache object is ultimately, unknowingly being manipulated. So, subsequent finds are returning the \"bad\" object.\n", "labels": [], "number": 545, "updated_at": "2012-02-28 13:24:55", "user": 3775, "closed_at": "2011-05-17 21:33:53", "id": 895581, "title": "ActionDispatch::RailsMetaStore returns corrupt Rack responses with MemoryStore", "url": "https://api.github.com/repos/rails/rails/issues/545", "created_at": "2011-05-13 15:36:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1155022", "text": "So a _quick_ fix for this in one of our applications is to run [a modified version of Rack::Cache](https://github.com/envylabs/rack-cache/commit/503973cda8dd3928c8255cff0576af7e1789436c) which removes the deletion call on `X-Status`.  I'm not sure whether or not this will negatively affect any other functionality of Rack::Cache or how it might affect other Rails cache stores.  But, for this particular application, it is currently running fine with that fix in production.\n", "created_at": "2011-05-13 17:37:09", "user": 3775, "id": 1155022}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157647", "text": "This just happens with memory store? Shouldn't memory store return a duplicated object instead of the same object to be more compatible with the other stores? /cc @jeremy\n", "created_at": "2011-05-13 22:06:38", "user": 9582, "id": 1157647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157835", "text": "Yes, this appears to only be an issue with the memory store. We did manually test with the file store and did not have a failure.\n\nWe have not yet tested with the other stores (memcached, etc.). I know @rubymaverick attempted to add a `dup to the`read method, but in his limited attempt, it didn't seem to immediately fix the issue. \n", "created_at": "2011-05-13 22:40:25", "user": 3775, "id": 1157835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157843", "text": "Yes, it only happens with the memory store (I worked with @nbibler on discovering this issue).  We also tested with FileStore and it worked fine.\n", "created_at": "2011-05-13 22:41:29", "user": 534, "id": 1157843}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158086", "text": "Just duping probably won't work because if you have an array inside a hash it won't be duped :(. Maybe we can Marshal.dump and Marshal.load?\n", "created_at": "2011-05-13 23:46:11", "user": 9582, "id": 1158086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158133", "text": "@josevalim +1 on marshal dump / load.  It's a good trick to get a deep clone.\n", "created_at": "2011-05-13 23:55:40", "user": 3124, "id": 1158133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158209", "text": "@tenderlove Right.. I'm actually surprised ActiveSupport doesn't provide a `deep_dup` or `deep_clone` helper to wrap load/dump of an object.  I know that there are a few Ruby objects out there (mostly legacy C-based) that don't support marshal dump - Ruby's OpenSSL classes come to mind ... but the need for it comes up quite often.\n\nAs far as dump/loading with every read from the memory cache, it almost seems a bit excessive for something that is supposed to be a low latency, short-circuit for caching long running methods.  But, I agree that it may be the quickest option to solve this issue and the implementation can be refactored at a later date, if necessary.\n", "created_at": "2011-05-14 00:27:10", "user": 3775, "id": 1158209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162137", "text": "Another good reason to use marshaling is that it will be closer to the other cache stores, so swapping one store from the other won't fail because of dump/load. I think this is how it was used to work but it was changed somewhere down the road. We need to confirm with @jeremy (<3 <3 <3 <3 <3 kemper call!).\n", "created_at": "2011-05-14 11:01:54", "user": 9582, "id": 1162137}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1178989", "text": "I'm going to make the Marshal.dump / load change upstream and get a release out. The memory store should definitely blow up in the same way as the other stores. In fact, I think the memory store should Marshal.dump before writing to its backing metastore hash and Marshal.load on the way out for consistency with the other stores.\n", "created_at": "2011-05-16 18:51:33", "user": 404, "id": 1178989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1179955", "text": "rack-cache 1.0.2 is on rubygems.org with the marshal dump / load fix:\n\nhttps://github.com/rtomayko/rack-cache/commit/28bbc62\n\nCan someone give that a shot to verify it addresses the issue?\n", "created_at": "2011-05-16 19:19:29", "user": 404, "id": 1179955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1184667", "text": "Thanks @rtomayko ! And yeah, we should totally dump on write and load on read.\n", "created_at": "2011-05-16 22:02:16", "user": 9582, "id": 1184667}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1191355", "text": "@rtomayko, that looks good but it doesn't fix the issue with Rails.  I think we just need to do the Marshal.load/dump in the RailsMetaStore read/write methods.  \n", "created_at": "2011-05-17 16:16:45", "user": 534, "id": 1191355}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1192019", "text": "Oh, I see. I thought it was the Heap store in Rack::Cache that was causing problems. Thanks.\n", "created_at": "2011-05-17 18:08:40", "user": 404, "id": 1192019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193127", "text": "Seems crazy to marshal into a memory store, though.\n\nHow about not modifying the cached value in-place?\n", "created_at": "2011-05-17 21:10:25", "user": 199, "id": 1193127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193275", "text": "Fixed in Raaaaaaaaails.\n", "created_at": "2011-05-17 21:33:53", "user": 9582, "id": 1193275}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193276", "text": "https://github.com/rails/rails/commit/324f1451b06c82242426b1a239b0559181b16c37\n", "created_at": "2011-05-17 21:33:56", "user": 9582, "id": 1193276}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2334117", "text": "Hi guys,\n\nI notice this problem again in rails 3.1.x. Blank Page, messages like:\n\n``` bash\n\ncache: [POST /post/29] invalidate, pass\ncache: [GET /post/29] miss\ncache: [GET /post/29?_=1318111752433] miss\ncache: [GET /post/29/edit] miss\ncache: [GET /post/29/edit?_=1318111753972] miss\ncache: [POST /post/29] invalidate, pass\ncache: [POST /post/29] invalidate, pass\n\n```\n", "created_at": "2011-10-08 22:21:01", "user": 339111, "id": 2334117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4172046", "text": "Hi\n\nI'm on rails3.2.1 and am getting this problem of:\n\ncache: [GET /] miss\n\nI've checked my actionpack/lib/action_dispatch/http/rack_cache.rb file and it does contain the corrections that josevalim posted on github so it looks like there is something else happening.\n\nAll help gratefully received with Thanks\n\nPurvez\n", "created_at": "2012-02-25 10:54:46", "user": 632308, "id": 4172046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4215617", "text": "@radosch is still an issue for you? does it happens in 3.2.2.rc1? check #5172 and leave your comments and a way to reproduce the issue please.\n", "created_at": "2012-02-28 13:24:55", "user": 52642, "id": 4215617}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When writing integration tests, it would be preferable if url generation automatically made use of default_url_options as specified in ApplicationController. That said, the next best thing would be for default_url_options to be settable in the test environment, but I can't find any way to do that. This makes it impossible (or at least extremely awkward) to run integration tests when using a scope with a parameter in it.\n\nHere's a simplified use case:\n1. in routes.rb: \n   \n   ```\n   scope ':path_prefix' do \n     resources :foos \n   end \n   ```\n2. in application_controller.rb \n   \n   ```\n   def default_url_options \n     { :path_prefix => 'test' } \n   end \n   ```\n   \n   foos_path will now resolve to /test/foos when referenced within controllers and views.\n3. in test/integration/prefix_test.rb: \n   \n   ```\n   require 'test_helper' \n   class PrefixTest < ActionDispatch::IntegrationTest \n     test \"path prefix\" do \n       foos_path \n     end \n   end \n   ```\n4. When running the test (rake test:integration), I get the following error:\n   \n   ```\n   test_path_prefix(PrefixTest): \n   ActionController::RoutingError: No route matches {:controller=>\"foos\"} \n       /test/integration/prefix_test.rb:5:in `test_path_prefix' \n   ```\n\nIn my real case, path_prefix gets its value from params[:path_prefix] unless no prefix is specified. For example, something like this:\n\n```\ndef default_url_options \n  { :path_prefix => params[:path_prefix] || 'test' } \nend \n```\n", "labels": ["actionpack"], "number": 546, "updated_at": "2014-03-17 09:10:59", "user": 431788, "closed_at": "2012-05-10 20:35:51", "id": 895860, "title": "can't set default_url_options for integration tests", "url": "https://api.github.com/repos/rails/rails/issues/546", "created_at": "2011-05-13 16:41:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157554", "text": "I believe you have to define the default_url_options in your test case. Defining it in ActiveSupport::TestCase will probably be fine. The different is that you don't have access to params.\n", "created_at": "2011-05-13 21:47:33", "user": 9582, "id": 1157554}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157947", "text": "Yes, but there needs to be a way to set it from params. Otherwise, applications that use scopes with parameters are simply untestable!\n", "created_at": "2011-05-13 23:05:19", "user": 431788, "id": 1157947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157956", "text": "Furthermore, I just tried defining it in the test case, and it wasn't used. \n", "created_at": "2011-05-13 23:07:27", "user": 431788, "id": 1157956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158104", "text": "Damn, I see what is happening. You would need to define the default_url_options in the integration session object:\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/testing/integration.rb#L171\n\nI am reopening this then.\n", "created_at": "2011-05-13 23:49:26", "user": 9582, "id": 1158104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1271627", "text": "This is a big problem for me.  Trying to use a scope for a locale and it works fine in the application but is completely crashing all my cucumber tests.\n", "created_at": "2011-06-01 02:14:02", "user": 366749, "id": 1271627}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1283434", "text": "Yes, it's very annoying. There needs to be a way to conveniently set default_url_options from params. \n", "created_at": "2011-06-02 19:08:00", "user": 431788, "id": 1283434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1284038", "text": "I've monkey patched this by adding the following into a cucumber support file:\n\n``` ruby\n#monkey patch to fix the fact that ActionDispatch::Integration::Session blows\n#away the ApplicationController default_url_options which are necessary\n#for the locale scope to work\nmodule ActionDispatch\n  module Integration\n    class Session\n      def default_url_options\n        { :host => host, :protocol => https? ? \"https\" : \"http\" }.merge!(ApplicationController.new.default_url_options)\n      end\n    end\n  end\nend\n```\n", "created_at": "2011-06-02 19:41:09", "user": 366749, "id": 1284038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1284231", "text": "Thanks for sharing your solution. Unfortunately that doesn't work for me, because I read my option from params, which won't be defined on a new ApplicationController.\n", "created_at": "2011-06-02 20:06:40", "user": 431788, "id": 1284231}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1312559", "text": "I ended up hacking around this by storing my path param in a global variable in my cucumber steps and then monkey patching default_url_options to use that global. It's pretty kludgy, but at least I can run my test suite again.\n", "created_at": "2011-06-06 23:07:29", "user": 431788, "id": 1312559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1373791", "text": "I've been hitting a hurdle trying to upgrade to 3.1 with Rspec, could it be related?\n\nhttps://github.com/rspec/rspec-rails/issues/395\n\nI was about to put in a monkey patch as per @benzittlau but wanted to find the cause before blindly hacking the framework(s).\n", "created_at": "2011-06-15 14:01:19", "user": 848, "id": 1373791}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1541602", "text": "@nickurban, can you please give a more precise description of your workaround. I am not using cucumber, just the plain integration testing framework shipped with Rails.\n\nWhere do I need to assign the params, so that it's globally accessible, and how do I monkey patch default_url_options to use that?\n", "created_at": "2011-07-10 12:11:43", "user": 784538, "id": 1541602}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1542034", "text": "I made a file in features/support/default_url_options.rb:\n\n``` ruby\ndef default_url_options(options = {})\n    # set site_prefix from global variable. The $site_prefix global is set during various login steps.\n    options.merge( :host => host, :protocol => https? ? \"https\" : \"http\", :site_prefix => $site_prefix )\nend\n```\n\nWhen my features make use of URL helpers, they find this method and use the prefix.\n\nIn my login steps, I have a \"When I log into account...\" which works entirely through the UI and a \"Given I am logged in as \n X...\" which creates a user directly. Once the user has been created, both of them call a method which sets $site_prefix. \n\nLike I said, it's not the most elegant solution, but after several days of not being able to run tests, it was good enough for me! It might be time for me to revisit this now and redo it properly :)\n", "created_at": "2011-07-10 15:16:28", "user": 431788, "id": 1542034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545255", "text": "I've submitted issue #2031 related to default_url_options but with callbacks interaction rather than params.\nYou might want to have a look at it\n", "created_at": "2011-07-11 09:31:47", "user": 47953, "id": 1545255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1572750", "text": "Can you guys provide a patch with a test case or at least just a failing test case?. Thanks.\n", "created_at": "2011-07-14 16:09:43", "user": 52642, "id": 1572750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1573081", "text": "Here's a fresh rails project to demonstrate that\n\nhttps://github.com/hardipe/Rails-Issue-546\n\nrake test:functionals passes\nrake test:integration fails\nthey are testing the same thing\n", "created_at": "2011-07-14 16:52:20", "user": 784538, "id": 1573081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1630498", "text": "@nickurban, your monkey patch works. thx. I had the problem with a :locale option in the url.\n", "created_at": "2011-07-22 09:06:02", "user": 100767, "id": 1630498}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639522", "text": "er.. i think the scope method in the router is messed up. i think that whatever name you are trying to pass into the scope you're specifying isn't getting passed. \n\nUsing your code example from above:\n\nrequire 'test_helper' \nclass PrefixTest < ActionDispatch::IntegrationTest \n  test \"path prefix\" do \n    #foos_path \n    #instead you replace the line above with this:\n    foos_path[(:path_prefix)]\n\n  end \nend\n\nThe above will pass.\n\nBut you should realize that any parameter sent in there will actually pass. If you go into the browser and try typing any string as your scope-prefix, like '/test/foos' or '/asdf/foos', then the router will route you along.\n\nI suspect the underlying issue is with the router's scope method, since if the scope isn't passing whatever you're 'scoping' (i.e. 'test' or 'scopedpath'), the router can't reasonably be expected to generate a helper method that actually directs to your path.\n", "created_at": "2011-07-24 02:10:27", "user": 704877, "id": 1639522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639529", "text": "oh yeah and if you delete the method from the application controller, it has no effect on anything whatsoever.\n", "created_at": "2011-07-24 02:12:05", "user": 704877, "id": 1639529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639674", "text": "I uploaded a sample app to show what @logical42 mentioned when he said there's something wrong with the routing in Rails. See [this link](https://github.com/dyba/rails-issue-546). Let me put the important parts here in brief:\n\n``` ruby\n# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  protect_from_forgery\nend\n```\n\n``` ruby\n# config/routes.rb\nRailsIssue546::Application.routes.draw do\n  # The priority is based upon order of creation:\n  # first created -> highest priority.\n\n  scope ':path_prefix' do\n    resources :foos\n  end\nend\n```\n\n``` ruby\n# rest/integration/prefix_test.rb\nrequire 'test_helper'\n\nclass PrefixTest < ActionDispatch::IntegrationTest\n  test \"path prefix\" do\n    get 'test/foos'\n    assert_response :failure\n\n    get 'asdf/foos'\n    assert_response :failure\n  end\nend\n```\n\nThe above two tests don't pass.\n", "created_at": "2011-07-24 03:18:24", "user": 296219, "id": 1639674}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639753", "text": "Awesome! Thanks for doing that Dan!\n", "created_at": "2011-07-24 03:53:26", "user": 704877, "id": 1639753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639850", "text": "@spastorino, here's the failing test you had asked for. I hope I was able to capture the problem with the test setup I created. I'll welcome any feedback.\n", "created_at": "2011-07-24 05:05:31", "user": 296219, "id": 1639850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1648513", "text": "@josevalim, @spastorino\nThe ticket says that should be a way to \"set default_url_options for integration tests\".\n\nThis way looks like something what we are looking for:\n  app.default_url_options = { :path_prefix => 'ivan_poval' }\n\nTaking into account that we have the routes set like this:\n  scope ':path_prefix' do\n    resources :foos\n  end\n\nThe example of usage looks like this:\n  class TestFlowTest < ActionDispatch::IntegrationTest\n    fixtures :all\n\n```\ndef setup\n  app.default_url_options = { :path_prefix => 'ivan_poval' }\nend\n\ntest \"the truth\" do          \n  puts foos_path\nend\n```\n\n  end\n\n@josevalim, you mentioned that #default_url_options should be set through the Session object. I would argue that because the routes are global to the application and app.default_url_options = { :path_prefix => 'ivan_poval' } seems to do its job fine.\n\nIMHO: the ticket should be closed without any further code changes, but there is a question about the purpose of these lines:\n  https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/testing/integration.rb#L187\n  https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/testing/integration.rb#L188\n  https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/testing/integration.rb#L189\n  https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/testing/integration.rb#L190\n", "created_at": "2011-07-25 19:47:32", "user": 399436, "id": 1648513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1649331", "text": "@ipoval\nThe Integration test should get the default_url_options from ApplicationController\nFor me, using the 'setup' method in an integration test to set the app.default_url_options errors, because the attribute doesn't exist.\n", "created_at": "2011-07-25 21:19:12", "user": 784538, "id": 1649331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1651367", "text": "@hardpipe\nI changed my sample app with the following changes. The error I'm getting has to do with Rails not being able to find the route 'test/foos'. Are you getting the same thing?\n\n``` ruby\nrequire 'test_helper'\n\nclass PrefixTest < ActionDispatch::IntegrationTest\n\n  def setup\n    app.default_url_options = { :path_prefix => 'test' }\n  end\n\n  test \"path prefix\" do    \n    get 'test/foos'\n    assert_response :success\n    assert_generates \"/test/foos\", { :controller => \"foos\", :action => \"index\" }\n  end\nend\n```\n\n``` terminal\n>_ rake test:recent\nLoaded suite /Users/danieldyba/.rvm/gems/ruby-1.9.2-p180@Rails310RC4/gems/rake-0.9.2/lib/rake/rake_test_loader\nStarted\n\nPrefixTest:\n    ERROR path prefix (0.10s) \n          ActionController::RoutingError: No route matches {:controller=>\"foos\"}\n          /Users/danieldyba/.rvm/gems/ruby-1.9.2-p180@Rails310RC4/gems/actionpack-3.1.0.rc4/lib/action_dispatch/routing/route_set.rb:464:in `raise_routing_error'\n\n\nFinished in 0.100495 seconds.\n\n1 tests, 1 assertions, 0 failures, 1 errors, 0 skips\nrake aborted!\nCommand failed with status (1): [/Users/danieldyba/.rvm/rubies/ruby-1.9.2-p...]\n  1 Issue #546: Failing test, no matching route {:controller => \"foos\"}\n\nTasks: TOP => test:recent\n(See full trace by running task with --trace)\n```\n", "created_at": "2011-07-26 03:27:34", "user": 296219, "id": 1651367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1655220", "text": "@dyba\n\nNo. I don't get that error. Note that @ipoval also mentioned declaring a route. This should remove the error you are getting.\n\nHowever, I just used the approach of setting the app.default_url_options in the setup method of my integration test. It says default_url_options is not declared.\n", "created_at": "2011-07-26 15:39:16", "user": 784538, "id": 1655220}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1749231", "text": "1. Url helpers in integration tests respect  default url options from the 'last used controller' with the above commit:\n\n``` ruby\nclass OptionsTest < ActionDispatch::IntegrationTest  \n  test \"default url options\" do\n    get \"/store/index\"\n    assert_redirected_to root_url # now passes, as :apples => 5 is included\n  end\nend\n```\n\nThis test is from hardipe¬¥s mentioned sample project (https://github.com/hardipe/Rails-Issue-546/). Drawback is that is only works for the last used controller: \n\n2.\n\n``` ruby\nclass OptionsTest < ActionDispatch::IntegrationTest  \n  test \"default url options\" do\n    get \"/store/index\" \n    # This makes StoreController is our last used controller. Now, imagine there¬¥s an Items- and PeopleController also....\n    items_path \n    # should use defaults from ItemsController but uses those from the last used controller. \n    people_path \n    # should use defaults from PeopleController but also uses those from the last used controller. \n  end\nend\n```\n\nAs far as I can see the behaviour under 2. is the same as in the app¬¥s controllers and functional tests. But I don¬¥t think this is right at all as a call to items_path should include the defaults from the ItemsController and not the one from the calling controller (resp. test), right? Or not?\n", "created_at": "2011-08-07 17:43:03", "user": 202410, "id": 1749231}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1749342", "text": "I don't really know which behaviour is better. The only thing I have used default_url_options for so far is for filling in the :locale in my routes. When I set the default_url_options in the ApplicationController, all the controllers that inherit from it automatically use the same locale everywhere , which is what I want. (doesn't matter if they get the defaults from the previous controller or the controller that's associated with the route helpers (items_path and people_path)).\n\nWould be nice if anyone else could give their opinion on this though.\n", "created_at": "2011-08-07 18:21:21", "user": 784538, "id": 1749342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1749755", "text": "Can one of the core team members shortly express the desired behaviour?\n", "created_at": "2011-08-07 20:10:43", "user": 202410, "id": 1749755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335095", "text": "Ping @josevalim & @spastorino\n", "created_at": "2011-10-09 03:47:14", "user": 199, "id": 2335095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5523458", "text": "Is this still an issue?\n", "created_at": "2012-05-05 01:40:18", "user": 651597, "id": 5523458}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "rack_mount updated to latest version\n", "labels": [], "number": 547, "updated_at": "2014-07-03 04:07:11", "user": 111473, "closed_at": "2011-05-13 21:51:53", "id": 896119, "title": "rack_mount upgrade to new version 0.8.0", "url": "https://api.github.com/repos/rails/rails/issues/547", "created_at": "2011-05-13 17:45:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Can we get aba149d702e4dcd999ce1b71688ec15b0c637875 merged into 3-0-stable?\n\nIt seems b41d8f30debc92ac24003d42c0b50a1d6e36cfa1 was the cause.\n\nSee https://github.com/rails/rails/pull/349 for the original pull request that was merged into master.\n", "labels": [], "number": 548, "updated_at": "2011-05-13 22:13:33", "user": 4595, "closed_at": "2011-05-13 22:13:33", "id": 897402, "title": "Empty CDATA in Hash.from_xml", "url": "https://api.github.com/repos/rails/rails/issues/548", "created_at": "2011-05-13 20:48:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157682", "text": "Done.\n", "created_at": "2011-05-13 22:13:33", "user": 9582, "id": 1157682}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This allows you to change the parameter name of the UTF8 enforcer tag in Rails generated forms.\n", "labels": [], "number": 549, "updated_at": "2014-06-15 06:17:46", "user": 7035, "closed_at": "2011-06-11 15:04:17", "id": 897510, "title": "Utf8 enforcer param customization", "url": "https://api.github.com/repos/rails/rails/issues/549", "created_at": "2011-05-13 21:12:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157581", "text": "I am -1 for the customization option. Can't it simply be a method that you would override in ApplicationHelper? :D\n", "created_at": "2011-05-13 21:54:52", "user": 9582, "id": 1157581}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157694", "text": "This would allow users to set the option and know that it'll work instead of having to monkey patch not knowing when the internals of ApplicationHelper would change. A big part of Rails3 was to reduce the number of monkey patching by providing _supported_ customizable options, and I think this change goes with that spirit.\n", "created_at": "2011-05-13 22:15:16", "user": 7035, "id": 1157694}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157715", "text": "@dlee I completely disagree with the argument about Rails 3. The number of configuration options hardly changed at all in Rails 3. Instead, we are using well defined methods and APIs, so you can include modules and customize Rails behavior by redefining methods with the appropriate behavior. Inheritance != monkey patching.\n", "created_at": "2011-05-13 22:17:49", "user": 9582, "id": 1157715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157874", "text": "Ah, I misunderstood \"ApplicationHelper\" as \"ActionView::Helpers\", my bad.\n\nI agree that this can be _also_ be solved with well defined overridable methods. I have two arguments for going with the config option:\n- There is already a precedent set with <tt>request_forgery_protection_token</tt>.\n- Setting a config option is the natural way to customize a _value_ of some option. Method override is the natural way to customize the _logic_.\n\nI'm not too opposed to the overrideable method idea, but I think the config option is a bit cleaner, consistent with precedence, and feels more natural than overriding a method.\n", "created_at": "2011-05-13 22:48:20", "user": 7035, "id": 1157874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157907", "text": "Furthermore, who would ever not want a snowman on their page? Seriously?\n", "created_at": "2011-05-13 22:54:50", "user": 48312, "id": 1157907}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157920", "text": "@lapluviosilla Sadly, the snowman has melted away in favor of a checkmark some months ago. :'(\n\nBut this patch is not talking about about the utf8 value but the _name_ of the hidden field input.\n", "created_at": "2011-05-13 22:59:41", "user": 7035, "id": 1157920}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1157957", "text": "Damn, I did not catch that.\n\n+1 for renaming to a more appropriate name now that the snowman is not used.\n-1 for adding a config customization option. Overriding in ApplicationHelper is fine.\n", "created_at": "2011-05-13 23:07:58", "user": 48312, "id": 1157957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158026", "text": "What are the reasons you don't want the customization option? I've given two reasons in my second comment that I think should be compelling, and reasons against having the option should outweigh those reasons.\n", "created_at": "2011-05-13 23:29:09", "user": 7035, "id": 1158026}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158136", "text": "Reasons for a method: flexibility. What if you want to customize the name just for some specific controllers or under special circumstances?\n\n\"Setting a config option is the natural way to customize a value of some option. Method override is the natural way to customize the logic.\"\n\nThe rails version might have no logic, but that does not mean we should block applications from building a logic on top of that. If I could, I would make many of the customization options methods. Next week on Railsconf I will talk exactly about the issue with configuration options as it is in Rails today.\n", "created_at": "2011-05-13 23:56:21", "user": 9582, "id": 1158136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158376", "text": "@josevalim I pushed a commit that does what you want for additional flexibility.\n", "created_at": "2011-05-14 01:31:34", "user": 7035, "id": 1158376}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1204723", "text": "@dlee Jos√© was asking for a method for utf8_enforcer_param _instead_ of the config option, not what you've done here.\n", "created_at": "2011-05-19 16:45:04", "user": 197, "id": 1204723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1205825", "text": "@NZKoz I think what I've done here satisfies both our requirements: one for simplicity/consistency and the other for flexibility.\n", "created_at": "2011-05-19 19:39:27", "user": 7035, "id": 1205825}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210336", "text": "The whole point is to remove the need for a configuration option. Again, we should be removing configuration options instead of adding them.\n", "created_at": "2011-05-20 14:34:48", "user": 9582, "id": 1210336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213358", "text": "@josevalim alright, I guess you won't pull until I remove the configuration option. I'll try getting something in soon.\n\nAlso, can you provide a link to your Railsconf talk? I'm curious what the reasons are for moving away from configuration options. I saw the presentation notes PDF, but it didn't mention anything about configuration options.\n", "created_at": "2011-05-21 01:29:34", "user": 7035, "id": 1213358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1337599", "text": "@josevalim: Just a reminder so that this doesn't fall through the cracks and gets harder to merge.\n", "created_at": "2011-06-09 21:53:40", "user": 7035, "id": 1337599}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340284", "text": "Thanks for reminding me, could you please rebase? I cannot merge it already. :(\n", "created_at": "2011-06-10 07:37:49", "user": 9582, "id": 1340284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1346950", "text": "@josevalim I just rebased... hopefully it merges cleanly.\n", "created_at": "2011-06-11 09:03:38", "user": 7035, "id": 1346950}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16473999", "text": "I was looking for an example of how to take advantage of the `utf8_enforcer_tag` method in a custom form **builder** (corrected in a recent edit). Any recommendations? http://stackoverflow.com/questions/16011285/how-to-override-utf8-enforcer-tag-in-rails\n", "created_at": "2013-04-16 21:49:57", "user": 3094, "id": 16473999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16483122", "text": "As I understand it, the only option is to override `utf8_enforcer_tag` globally. Right?\n\nEven so, I could test `controller_name` and `action_name`. (Not bad, but not quite what I want.)\n\nI'd like to be able to check the context of what form I'm inside as well. In particular, I'd like to check if a custom form builder is being used. How could I do this?\n\nAfter looking at `self` inside `utf8_enforcer_tag`, I don't see a way to do it. If a new design is considered, I would suggest the following: since `utf8_enforcer_tag` is applied at the form level, it makes sense to allow it to be overridden in a way that is form-specific.\n", "created_at": "2013-04-17 02:08:16", "user": 3094, "id": 16483122}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "just a typo\n", "labels": [], "number": 550, "updated_at": "2014-06-23 04:17:14", "user": 2415, "closed_at": "2011-05-14 00:19:37", "id": 898139, "title": "typo", "url": "https://api.github.com/repos/rails/rails/issues/550", "created_at": "2011-05-14 00:16:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158191", "text": "Please send next documentation fixes straight to lifo/docrails! Everyone has commit access! :D Thanks!\n", "created_at": "2011-05-14 00:19:22", "user": 9582, "id": 1158191}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1158199", "text": "ah cool, didn't know. thanks!\n", "created_at": "2011-05-14 00:23:37", "user": 2415, "id": 1158199}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "returning hwia is more consistent with other APIs, for example:\n- attributes= and update_attributes= accept both symbolized and stringified hash\n- [] accessor method accepts both Symbol and String for the attribute name\n", "labels": [], "number": 551, "updated_at": "2014-06-28 03:39:01", "user": 11493, "closed_at": "2011-10-09 03:55:32", "id": 898427, "title": "changed AR::Base#attributes to return a hash with indifferent access for the sake of API consistency", "url": "https://api.github.com/repos/rails/rails/issues/551", "created_at": "2011-05-14 02:50:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1501322", "text": "+1 for that.\n", "created_at": "2011-07-05 03:34:05", "user": 124430, "id": 1501322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1902880", "text": "I ran into this today and I would like to see it happen as well. One tweak, just create a HashWithIndifferentAccess instead of calling with_indifferent_access to (hopefully) increase the performance slightly.\n", "created_at": "2011-08-25 19:04:47", "user": 13248, "id": 1902880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335124", "text": "I'd like this change, too, but people use this method to get the \"raw\" attributes, often for serialization or caching.\n\nThis patch will change the method signature to return a different kind of class, so it breaks API compatibility.\n\nThe YAML serialization changes from a native map to a `!ruby/hash:ActiveSupport::HashWithIndifferentAccess` for example.\n\nI don't think we can change this safely, though we could consider it for Rails 4.0.\n", "created_at": "2011-10-09 03:55:32", "user": 199, "id": 2335124}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When a polymorphic association is defined within an abstract class, all subclasses of that class cannot access it correctly. As an example:\n\n``` ruby\n# app/models/user.rb\nclass User < ActiveRecord::Base\n  self.abstract_class = true\n\n  has_many :settings, :as => :resource\nend\n\n# app/models/student.rb\nclass Student < User\nend\n\n# app/models/professor.rb\nclass Professor < User\nend\n\n# app/models/setting.rb\nclass Setting < ActiveRecord::Base\n  belongs_to :resource, :polymorphic => true\nend\n```\n\nThe resulting SQL queries when looking for Professor.find(1).settings are:\n\n```\nSELECT `professors`.* FROM `professors` WHERE `professors`.`id` = 1 LIMIT 1\nSELECT `settings`.* FROM `settings` WHERE `settings`.`resource_id` = 1 AND `settings`.`resource_type` = 'User'\n```\n\nNote how `resource_type` = 'User' instead of 'Professor'.\n\nI'm brand new to posting to the Rails core, and would love some input here. Thanks!\n", "labels": [], "number": 552, "updated_at": "2011-05-22 21:08:47", "user": 46724, "closed_at": "2011-05-22 20:28:28", "id": 898939, "title": "Polymorphic associations within abstract class not assigned the right type", "url": "https://api.github.com/repos/rails/rails/issues/552", "created_at": "2011-05-14 06:02:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1161841", "text": "What version of Rails are you experiencing this on? If 3.1 beta, have you tried on 3.0? If 3.0 then have you tried on 3.1 beta? Thanks.\n", "created_at": "2011-05-14 08:25:54", "user": 1979, "id": 1161841}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162147", "text": "This is a well-known and documented issue, please go to:\n\nhttp://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html\n\nAnd search for \"Polymorphic associations\".\n", "created_at": "2011-05-14 11:12:21", "user": 9582, "id": 1162147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162477", "text": "This is not related to that kind of issue. After adding that attachable_type method definition, nothing was changed.\n\n@jonleighton, this was working on 3.0.7, and then broke when I moved to 3.1.0beta. It is also not working on rails-master. On 3.0.7, with the exact same model configuration, the SQL query that results from it is as follows:\n\n```\nSELECT `settings`.* FROM `settings` WHERE `settings`.resource_id = 1 AND `settings`.resource_type = 'Professor'\n```\n", "created_at": "2011-05-14 14:01:30", "user": 46724, "id": 1162477}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165133", "text": "Not sure what I should do here @jonleighton, after this was reopened. Is there anything I can do to help solve this problem?\n", "created_at": "2011-05-15 05:49:58", "user": 46724, "id": 1165133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165361", "text": "@agrobbin I am working on a fix.\n", "created_at": "2011-05-15 08:30:23", "user": 1979, "id": 1165361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1218615", "text": "This is great @jonleighton!\n", "created_at": "2011-05-22 21:00:56", "user": 46724, "id": 1218615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1218641", "text": "It's not in 3-1-stable at the moment, but I think it should go in - see my comment on the commit.\n", "created_at": "2011-05-22 21:08:47", "user": 1979, "id": 1218641}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Changes as per mailer_generator_test \n", "labels": [], "number": 553, "updated_at": "2014-06-26 11:26:05", "user": 3948, "closed_at": "2011-05-14 08:54:23", "id": 899098, "title": "Fixed failing tests for namespaced_generators_test. in 1.9.2", "url": "https://api.github.com/repos/rails/rails/issues/553", "created_at": "2011-05-14 08:37:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, the runtime isn't reset following a redirect or a send_file, so any time taken to process those actions is added to the time for the subsequent request.\n", "labels": [], "number": 554, "updated_at": "2014-07-03 04:07:31", "user": 1287, "closed_at": "2011-05-14 10:57:32", "id": 899167, "title": "ActiveRecord::LogSubscriber.runtime should be reset at the start of each request", "url": "https://api.github.com/repos/rails/rails/issues/554", "created_at": "2011-05-14 09:42:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have just tried to run this:\n\n```\nrails plugin new multisite -O --dev /Users/Papipo/Projects/rails/  --old-style-hash --full --mountable\n```\n\nand got this output:\n\n```\n      create  \n      create  README.rdoc\n      create  Rakefile\n      create  multisite.gemspec\n      create  MIT-LICENSE\n      create  .gitignore\n      create  Gemfile\n      create  app\n      create  app/controllers/multisite/application_controller.rb\n      create  app/helpers/multisite/application_helper.rb\n      create  app/models\n      create  app/views/layouts/multisite/application.html.erb\n      create  app/assets/images\n      create  app/assets/images/.gitkeep\n      create  config/routes.rb\n      create  lib/multisite.rb\n      create  lib/tasks/multisite_tasks.rake\n      create  lib/multisite/engine.rb\n      create  app/assets/stylesheets/application.css\n      create  app/assets/javascripts/application.js\n      create  script\n      create  script/rails\n      create  test/test_helper.rb\n      create  test/multisite_test.rb\n      append  Rakefile\n      create  test/integration/navigation_test.rb\n  vendor_app  test/dummy\nFetching source index for http://rubygems.org/\nUsing rake (0.8.7) \nUsing multi_json (1.0.2) \nUsing activesupport (3.1.0.beta1) \nUsing bcrypt-ruby (2.1.4) \nUsing builder (3.0.0) \nUsing i18n (0.6.0beta1) \nUsing activemodel (3.1.0.beta1) \nUsing erubis (2.7.0) \nUsing rack (1.3.0.beta) \nUsing rack-cache (1.0.1) \nUsing rack-mount (0.7.4) \nUsing rack-test (0.6.0) \nUsing hike (1.0.0) \nUsing tilt (1.3) \nUsing sprockets (2.0.0.beta.2) \nUsing tzinfo (0.3.27) \nUsing actionpack (3.1.0.beta1) \nUsing mime-types (1.16) \nUsing polyglot (0.3.1) \nUsing treetop (1.4.9) \nUsing mail (2.3.0) \nUsing actionmailer (3.1.0.beta1) \nUsing arel (2.1.0) \nUsing activerecord (3.1.0.beta1) \nUsing activeresource (3.1.0.beta1) \nUsing ansi (1.2.5) \nUsing bundler (1.0.10) \nUsing coffee-script-source (1.1.0) \nUsing execjs (0.3.4) \nUsing coffee-script (2.2.0) \nUsing rack-ssl (1.3.2) \nUsing thor (0.14.6) \nUsing railties (3.1.0.beta1) \nUsing jquery-rails (1.0.2) \nUsing rails (3.1.0.beta1) \nUsing sass (3.1.1) \nUsing turn (0.8.2) \nYour bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.\n         run  bundle install\n     failure  bundler raised an exception, are you offline?\n```\n\nThen I cd'ed into the dir, and running bundle install from there went just fine.\n", "labels": [], "number": 555, "updated_at": "2011-05-30 11:49:56", "user": 22678, "closed_at": "2011-05-17 22:29:53", "id": 899232, "title": "bundler raises an exception on plugin generation", "url": "https://api.github.com/repos/rails/rails/issues/555", "created_at": "2011-05-14 10:23:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162143", "text": "Assigned to @fxn.\n", "created_at": "2011-05-14 11:05:18", "user": 9582, "id": 1162143}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261004", "text": "This still happens when running `rails new APPNAME -p`\n", "created_at": "2011-05-30 11:32:56", "user": 18515, "id": 1261004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261059", "text": "I don't have any exception raised when doing this using edge.\n", "created_at": "2011-05-30 11:49:56", "user": 9347, "id": 1261059}], "assignees": [3387, 3387], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "A couple of utility methods to port the functionality of Array#each_with_index to the grouping methods.\n", "labels": [], "number": 556, "updated_at": "2014-06-21 17:10:15", "user": 6528, "closed_at": "2011-05-19 17:38:39", "id": 899289, "title": "Array grouping methods with index", "url": "https://api.github.com/repos/rails/rails/issues/556", "created_at": "2011-05-14 11:01:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162140", "text": "Could you please send this to the mailing list for discussion about inclusion or not?\n", "created_at": "2011-05-14 11:03:26", "user": 9582, "id": 1162140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162449", "text": "Sure. Done: http://groups.google.com/group/rubyonrails-core/browse_thread/thread/f430014d307fa90a\n", "created_at": "2011-05-14 13:46:19", "user": 6528, "id": 1162449}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "if there is a model defined like this:\n\n``` ruby\nclass Foo < ActiveRecord::Base\n  self.pluralize_table_names = false\n  has_many :bars\nend\n```\n\nIt will return an error when calling Foo.first.bars, says \"NoMethodError: undefined method `<<' for :bars:Symbol\", the bug is:\n\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/join_helper.rb#L35, there is function\n\n``` ruby\n      def table_alias_for(reflection, join = false)\n        name = alias_tracker.pluralize(reflection.name)\n        name << \"_#{alias_suffix}\"\n        name << \"_join\" if join\n        name\n      end\n```\n\nand it calls https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/alias_tracker.rb#L53\n\n``` ruby\n      def pluralize(table_name)\n        ActiveRecord::Base.pluralize_table_names ? table_name.to_s.pluralize : table_name\n      end\n```\n\nIf ActiveRecord::Base.pluralize_table_names is false, alias_tracker.pluralize will return a symbol value, then table_alias_for raises an error because it's trying to call << \"_#{alias_suffix}\" for a symbol.\n", "labels": [], "number": 557, "updated_at": "2011-05-14 21:02:20", "user": 674321, "closed_at": "2011-05-14 21:02:19", "id": 899304, "title": "symbol for has_many association has broken if ActiveRecord::Base.pluralize_table_names  is false", "url": "https://api.github.com/repos/rails/rails/issues/557", "created_at": "2011-05-14 11:17:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162170", "text": "Is this broken in which Rails version? DId it work on Rails 3.0? Are you able to provide a patch?\n", "created_at": "2011-05-14 11:21:37", "user": 9582, "id": 1162170}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162589", "text": "I can't replicate this problem on 3.0.7 but i can on 3.1.0.beta1.\n\nOn the way, learnt that pluralize_table_names applies to all models loaded after its declared and not just in the class its declared id.\n", "created_at": "2011-05-14 14:38:20", "user": 762, "id": 1162589}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162603", "text": "The solution seems very simple based on @xiaohui-zhangxh 's analysis above. Working on test not so easy.\n", "created_at": "2011-05-14 14:40:53", "user": 762, "id": 1162603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1163588", "text": "Cool. You got the tests going, great!\n", "created_at": "2011-05-14 20:13:48", "user": 762, "id": 1163588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1163721", "text": "Closing this in favor of #560.\n", "created_at": "2011-05-14 21:02:19", "user": 9582, "id": 1163721}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "From: https://github.com/rails/rails/pull/359#issuecomment-1160382\n\nAfter working with Rails 3.1.0beta, I found there to be a problem with the ActionController::ParamsWrapper when dealing with an abstract class and a similarly named controller. My scenario is as follows:\n- User is an abstract model with two subclasses, Student and Professor\n- UsersController is a resourceful controller used to edit either a Student or Professor (depending on who is logged in)\n\n``` ruby\n# app/models/user.rb\nclass User < ActiveRecord::Base\n  self.abstract_class = true\nend\n\n# app/controllers/users_controller.rb\nclass UsersController < ApplicationController\nend\n\n# config/initializers/wrap_parameters.rb\nActionController::Base.wrap_parameters :format => [:json]\n```\n\nHaving the base configurations, with no additional definitions in UsersController, when you try and go to /user/edit (it is a resource not resources, so no ID is passed), the following error appears:\n\n```\nActiveRecord::StatementInvalid\n\nMysql2::Error: Table 'uclass.users' doesn't exist: SHOW FIELDS FROM `users`\n```\n\nHere is the backtrace:\n\n```\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:279:in `query'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:279:in `block in execute'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:222:in `block in log'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:217:in `log'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:279:in `execute'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb:469:in `columns'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:93:in `block (2 levels) in initialize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:174:in `with_connection'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:90:in `block in initialize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/base.rb:694:in `yield'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/base.rb:694:in `default'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/base.rb:694:in `columns'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/base.rb:704:in `column_names'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_controller/metal/params_wrapper.rb:167:in `_set_wrapper_defaults'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_controller/metal/params_wrapper.rb:128:in `inherited'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/abstract_controller/railties/routes_helpers.rb:7:in `block (2 levels) in with'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_controller/railties/paths.rb:7:in `block (2 levels) in with'\napp/controllers/users_controller.rb:1:in `<top (required)>'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:452:in `load'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:452:in `block in load_file'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:639:in `new_constants_in'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:451:in `load_file'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:338:in `require_or_load'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:489:in `load_missing_constant'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:181:in `block in const_missing'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:179:in `each'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:179:in `const_missing'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/inflector/methods.rb:124:in `block in constantize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/inflector/methods.rb:123:in `each'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/inflector/methods.rb:123:in `constantize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:527:in `block in initialize'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:549:in `yield'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:549:in `default'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/dependencies.rb:549:in `[]'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/route_set.rb:61:in `controller_reference'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/route_set.rb:46:in `controller'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/route_set.rb:25:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/mapper.rb:41:in `call'\nrack-mount (0.8.0) lib/rack/mount/route_set.rb:153:in `block in call'\nrack-mount (0.8.0) lib/rack/mount/code_generation.rb:93:in `block in recognize'\nrack-mount (0.8.0) lib/rack/mount/code_generation.rb:75:in `optimized_each'\nrack-mount (0.8.0) lib/rack/mount/code_generation.rb:92:in `recognize'\nrack-mount (0.8.0) lib/rack/mount/route_set.rb:141:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/routing/route_set.rb:531:in `call'\noa-core (0.2.5) lib/omniauth/strategy.rb:44:in `call!'\noa-core (0.2.5) lib/omniauth/strategy.rb:30:in `call'\noa-core (0.2.5) lib/omniauth/strategy.rb:44:in `call!'\noa-core (0.2.5) lib/omniauth/strategy.rb:30:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nrack (1.3.0.beta) lib/rack/etag.rb:23:in `call'\nrack (1.3.0.beta) lib/rack/conditionalget.rb:25:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/head.rb:14:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/flash.rb:243:in `call'\nrack (1.3.0.beta) lib/rack/session/abstract/id.rb:195:in `context'\nrack (1.3.0.beta) lib/rack/session/abstract/id.rb:190:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/cookies.rb:321:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/query_cache.rb:54:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:448:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activerecord/lib/active_record/identity_map.rb:152:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/callbacks.rb:28:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/reloader.rb:68:in `call'\nrack (1.3.0.beta) lib/rack/sendfile.rb:102:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/rack/logger.rb:13:in `call'\nrack (1.3.0.beta) lib/rack/methodoverride.rb:24:in `call'\nrack (1.3.0.beta) lib/rack/runtime.rb:17:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/activesupport/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nrack (1.3.0.beta) lib/rack/lock.rb:34:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/actionpack/lib/action_dispatch/middleware/static.rb:53:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/engine.rb:438:in `call'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/rack/log_tailer.rb:14:in `call'\nthin (1.2.11) lib/thin/connection.rb:84:in `block in pre_process'\nthin (1.2.11) lib/thin/connection.rb:82:in `catch'\nthin (1.2.11) lib/thin/connection.rb:82:in `pre_process'\nthin (1.2.11) lib/thin/connection.rb:57:in `process'\nthin (1.2.11) lib/thin/connection.rb:42:in `receive_data'\neventmachine (0.12.10) lib/eventmachine.rb:256:in `run_machine'\neventmachine (0.12.10) lib/eventmachine.rb:256:in `run'\nthin (1.2.11) lib/thin/backends/base.rb:61:in `start'\nthin (1.2.11) lib/thin/server.rb:159:in `start'\nrack (1.3.0.beta) lib/rack/handler/thin.rb:13:in `run'\nrack (1.3.0.beta) lib/rack/server.rb:265:in `start'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/commands/server.rb:70:in `start'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/commands.rb:54:in `block in <top (required)>'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/commands.rb:49:in `tap'\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@uclass/bundler/gems/rails-cbe6e09f6a02/railties/lib/rails/commands.rb:49:in `<top (required)>'\nscript/rails:6:in `require'\nscript/rails:6:in `<main>'\n```\n\nThanks, let me know if there's anything else you need to help track down this issue!\n", "labels": [], "number": 558, "updated_at": "2011-05-15 11:49:07", "user": 46724, "closed_at": "2011-05-15 11:49:06", "id": 899659, "title": "ActionController::ParamsWrapper conflicting with similarly named abstract model", "url": "https://api.github.com/repos/rails/rails/issues/558", "created_at": "2011-05-14 14:27:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162569", "text": "@sikachu, could you please look into this issue? I think now is the time to define attribute_names, that won't force a database query if the table does not exist.\n", "created_at": "2011-05-14 14:31:37", "user": 9582, "id": 1162569}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1162576", "text": "Sure, thats totally a blocker for 3.1.0.bata\n\nSent from my iPhone\n\nOn 14 ‡∏û.‡∏Ñ. 2554, at 10:31, josevalimreply@reply.github.com wrote:\n\n> @sikachu, could you please look into this issue? I think now is the time to define attribute_names, that won't force a database query if the table does not exist.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/558#comment_1162569\n", "created_at": "2011-05-14 14:34:33", "user": 4912, "id": 1162576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1163192", "text": "Great, I was just opening the exact same issue. Ran into this while setting up an simple example app using devise and STI. This is the example app just in case: https://github.com/reu/ceolin\n", "created_at": "2011-05-14 17:44:53", "user": 191614, "id": 1163192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1164793", "text": "I can surely reproduce this error on @reu's application when I go to `/members/edit`. I somehow think that the error that @agrobbin got must be error that `professors` or `students` table is not exists instead. I mean, cannot find a `users` table when you have a STI from `User` model would only mean that you haven't run the migration. Please correct me if I'm wrong.\n\nBy the way, this is not really a bug in `ParamsWrapper`, it's instead a bug in Active Record where the model won't try to look up that it's a STI model and get the correct name accordingly. I can reproduce this bug in another way too:\n\n```\n[master][~/Projects/ceolin] rails c\nLoading development environment (Rails 3.1.0.beta1)\nirb(main):001:0> Member\n=> Member(Table doesn't exist)\nirb(main):002:0> Member.new\nMysql2::Error: Table 'ceolin_development.members' doesn't exist: SHOW FIELDS FROM `members`\nActiveRecord::StatementInvalid: Mysql2::Error: Table 'ceolin_development.members' doesn't exist: SHOW FIELDS FROM `members`\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/mysql2_adapter.rb:275:in `query'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/mysql2_adapter.rb:275:in `block in execute'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/abstract_adapter.rb:222:in `block in log'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.beta1/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/abstract_adapter.rb:217:in `log'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/mysql2_adapter.rb:275:in `execute'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/mysql2_adapter.rb:465:in `columns'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/abstract/connection_pool.rb:93:in `block (2 levels) in initialize'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/abstract/connection_pool.rb:174:in `with_connection'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/connection_adapters/abstract/connection_pool.rb:90:in `block in initialize'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/base.rb:694:in `yield'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/base.rb:694:in `default'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/base.rb:694:in `columns'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/persistence.rb:316:in `attributes_from_column_definition'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/locking/optimistic.rb:68:in `attributes_from_column_definition'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.beta1/lib/active_record/base.rb:1491:in `initialize'\n    from (irb):2:in `new'\n    from (irb):2\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.beta1/lib/rails/commands/console.rb:44:in `start'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.beta1/lib/rails/commands/console.rb:8:in `start'\n    from /Users/sikachu/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.beta1/lib/rails/commands.rb:39:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'irb(main):003:0> \n```\n\nSo what I'll do is to make sure that we're looking up on the right table. I'll give you a patch soon.\n", "created_at": "2011-05-15 02:11:25", "user": 4912, "id": 1164793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1164805", "text": "It's actually an abstract model, not an STI, so the professors and students tables both exist while the users table does not. `Professor` and `Student` both inherit from `User`. The controller is `UsersController`, so it is looking to do a `ParamsWrapper` on the `User` model, which is causing the resultant `SHOW FIELDS FROM users` error.\n\nI hope that all makes sense, it's confusing enough to explain let alone follow someone else through comments! :)\n", "created_at": "2011-05-15 02:15:53", "user": 46724, "id": 1164805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1164814", "text": "@agrobbin thank you for your fast response! :)\n\nI got it now. Totally got it now. So yes, that's still a bug in Active Record where it should return `[]` from column name if the table is not exists.\n\nSo seems like this ticket is two separate issues. I think when I fix it both should be resolved at the same time. So I'll fix\n1. Make the AR::column_names to return [] on empty table (totally totally make sense)\n2. Also rely on `abstract_class?` to determine whether or not to do the model detection\n3. Later, move to AM::attribute_names to make it standardize among ORMs.\n\nReally, the automatic model lookup is actually a gimmick. Didn't really think that it would cause this much trouble.\n", "created_at": "2011-05-15 02:22:01", "user": 4912, "id": 1164814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1164820", "text": "No problem! Let me know if there's anything else you need to make these fixes. :)\n", "created_at": "2011-05-15 02:23:53", "user": 46724, "id": 1164820}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1164994", "text": "@sikachu I don't think it is worth to change column_names semantics. I would at least expect an error from column_names if the table does not exist.\n", "created_at": "2011-05-15 04:14:11", "user": 9582, "id": 1164994}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165054", "text": "@josevalim yeah. I was unable to do anything around the `table_name` and `column_names` since it would definitely break some behavior on some of the application. So I'm actually only rely on `abstract_class?` to test whether we should call `column_names` on it or not.\n\nThe pull request is here: https://github.com/rails/rails/pull/564\n\nNote that I haven't done no. 3 yet. It's quite late now, and I'm kinda tried on digging in the root clause of the problem. It should be fixed now after you apply this pull request.\n\nThank you.\n", "created_at": "2011-05-15 04:44:01", "user": 4912, "id": 1165054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165763", "text": "Thanks @sikachu, the pull request was merged. But I am adding a blocker for us to use attribute_names before Rails 3.1 release. The latest commit just tied the controller more to ActiveRecord API and the fix i not a hundred 100% correct. You can have a model that is not abstract but still does not have a database table. Such cases should not fail also.\n", "created_at": "2011-05-15 11:49:06", "user": 9582, "id": 1165763}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Because SecureRandom ships with Ruby 1.8.7+. See https://github.com/rails/rails/commit/1fac9c74ab0ebedb60fd57cadf0042b040938da8#commitcomment-383499.\n", "labels": [], "number": 559, "updated_at": "2011-05-23 19:46:24", "user": 1979, "closed_at": "2011-05-23 19:46:24", "id": 900389, "title": "Deprecate ActiveSupport::SecureRandom", "url": "https://api.github.com/repos/rails/rails/issues/559", "created_at": "2011-05-14 19:01:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223821", "text": "Deprecated in 3-1-stable and remove in master.\n", "created_at": "2011-05-23 19:46:24", "user": 1979, "id": 1223821}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 560, "updated_at": "2014-07-03 04:07:49", "user": 160941, "closed_at": "2011-05-16 22:40:19", "id": 900507, "title": "Fixing has_many when ActiveRecord::Base.pluralize_table_names is false", "url": "https://api.github.com/repos/rails/rails/issues/560", "created_at": "2011-05-14 19:55:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165271", "text": "Thanks for the pull request. I am going to add some comments in line. If you can make the changes (and squash into a single commit with git rebase -i) then I will get it merged ASAP.\n", "created_at": "2011-05-15 07:38:06", "user": 1979, "id": 1165271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165420", "text": "I make all changes except this one:\n\n> Rather than globally changing pluralize_table_names within the test, could you assign self.pluralize_table_names on the actual model (i.e. when defining the Aircraft class)?\n\nRemoving pluralize_table_names from test and putting self.pluralize_table_names in Aircraft class doesn't works as expected, looks like it is used globally and breaks a ton of tests that try to use singular table names (ex. Topic looks for 'topic' table)\n", "created_at": "2011-05-15 08:58:22", "user": 160941, "id": 1165420}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165639", "text": "I had the same problem. \n\n`Aircraft.pluralize_table_names = true` does not limit the pluralization to the Aircraft model.\n", "created_at": "2011-05-15 10:51:25", "user": 762, "id": 1165639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1179387", "text": "i'm getting same bug today, any chance to merge this soon?\n", "created_at": "2011-05-16 19:02:19", "user": 367577, "id": 1179387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1185932", "text": "Thanks for making the changes. If anybody fancies changing `pluralize_table_names` so that it can be applied just to individual classes then that would be cool too :)\n", "created_at": "2011-05-16 22:42:20", "user": 1979, "id": 1185932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1187646", "text": "> Thanks for making the changes. If anybody fancies changing pluralize_table_names so that it can be applied just to individual classes then that would be cool too :)\n\n![challange](http://yophpro.com/wp-content/uploads/2011/03/challenge-accepted.jpg)\n", "created_at": "2011-05-17 03:59:54", "user": 160941, "id": 1187646}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This addresses this two year old ticket:\nhttps://rails.lighthouseapp.com/projects/8994/tickets/2503\n\nI have one comment in the code looking for suggestions on how to reduce the number of arguments to the new method:\nhttps://github.com/jpalermo/rails/commit/47e6809a4d437a8913bb167db476206a5f8e69d9#commitcomment-383890\n", "labels": [], "number": 561, "updated_at": "2014-06-15 04:58:00", "user": 16798, "closed_at": "2011-10-09 20:21:40", "id": 900744, "title": "Only use LOWER for mysql uniqueness check when column is case sensitive", "url": "https://api.github.com/repos/rails/rails/issues/561", "created_at": "2011-05-14 22:00:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1163929", "text": "Thanks for bringing this ticket back to life! I'll do my best to find time to look over your patch.\n", "created_at": "2011-05-14 22:23:53", "user": 1933, "id": 1163929}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1198692", "text": "Merge this in!\n", "created_at": "2011-05-18 18:16:58", "user": 115945, "id": 1198692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335133", "text": "Interesting. Thanks for the implementation and tests, @jpalermo. This would be a nice improvement for 3.2. Could you rebase against master?\n", "created_at": "2011-10-09 03:58:26", "user": 199, "id": 2335133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2336236", "text": "Rebase against master is done.\n", "created_at": "2011-10-09 11:42:48", "user": 16798, "id": 2336236}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2339289", "text": "c90e5ce779dbf9bd0ee53b68aee9fde2997be123\n", "created_at": "2011-10-09 20:21:40", "user": 199, "id": 2339289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6086443", "text": "@jpalermo Thank you for this patch!\n\nHow do you define a collation on a column in migration, though? Maybe I'm missing something, but I've been doing this:\n\n``` SQL\nexecute 'ALTER TABLE users MODIFY `token` VARCHAR(32) CHARACTER SET utf8 COLLATE utf8_bin'\n```\n\nWhile what I'd really like to do instead is:\n\n``` ruby\ncreate_table :users do |t|\n  t.string :token, limit: 32, collation: 'utf8_bin'\nend\n```\n\nBut it doesn't seem possible.\n", "created_at": "2012-06-03 15:41:40", "user": 10350, "id": 6086443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6089959", "text": "Yeah, column definitions don't have an option for collation.\nhttp://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column\n\nIt's in a totally unrelated part of the code compared to this patch.\n\nYou can see the column definition code in ActiveRecord::ConnectionAdapters::column\n\nThere is not a lot of code there, so it could be easily expanded.  Of course, you might need to touch code in the individual connection adapters.\n\nYou'll probably want to search old issues and tickets to see if this has been attempted before.  It could be that it was attempted and rejected previously.\n", "created_at": "2012-06-03 23:10:01", "user": 16798, "id": 6089959}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6099489", "text": "Hmm okay, thanks for the info anyway! I'll try to write a patch myself and hopefully turn into a pull request.\n", "created_at": "2012-06-04 13:59:20", "user": 10350, "id": 6099489}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 562, "updated_at": "2011-05-18 16:03:07", "user": 9582, "closed_at": "2011-05-18 16:03:07", "id": 900895, "title": "actionpack test fails under rack-mount 0.8.0", "url": "https://api.github.com/repos/rails/rails/issues/562", "created_at": "2011-05-14 23:05:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165458", "text": "Applying this pull requests fixed the tests. \n\nhttps://github.com/josh/rack-mount/pull/20/files\n\nand passed all the tests of rack-mount also.\n", "created_at": "2011-05-15 09:25:02", "user": 3948, "id": 1165458}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197886", "text": "Fixed!\n", "created_at": "2011-05-18 16:03:07", "user": 9582, "id": 1197886}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "fixed ConnectionPool#connection and ConnectionPool#release_connection thread-safe problem; private ConnectionPool#clear_stale_cached_connections! method, which is not thread-safe called outside\n", "labels": [], "number": 563, "updated_at": "2014-06-17 08:26:03", "user": 17474, "closed_at": "2011-05-22 01:31:29", "id": 901574, "title": "Fix ConnectionPool's thread-safe issue", "url": "https://api.github.com/repos/rails/rails/issues/563", "created_at": "2011-05-15 01:52:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1164778", "text": "The attribute @reserved_connections inside ConnectionPool is a hash which is not thread-safe in jruby to call it's [], []= and delete methods without synchronization, The test provided is failed on jruby. I don't think it could be reproduced in cruby easily. \n", "created_at": "2011-05-15 02:03:02", "user": 17474, "id": 1164778}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165332", "text": "There are also other parts of Rails that should be using `ThreadsafeHashCache`: [https://rails.lighthouseapp.com/projects/8994/tickets/5340](https://rails.lighthouseapp.com/projects/8994/tickets/5340).\n", "created_at": "2011-05-15 08:13:55", "user": 15688, "id": 1165332}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1204690", "text": "I'm not sure there's any value in trying to have unit tests which 'test' these thread safety issues.  The reality is that there's no way to guarantee that they'll fail as it comes down to non-deterministic behaviour so we could break it again and not have the tests complain at all.\n\nHowever I'm not sure I see why you don't just use the single mutex rather than introducing this hash subclass.   Without a mutex around clear_stale_cached_connections! there's nothing preventing the method from being called in parallel and while it won't break by mutating a hash in parallel, you probably don't want it to be clearing the cach in two different threads.\n", "created_at": "2011-05-19 16:39:14", "user": 197, "id": 1204690}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1207893", "text": "The unit test added is for proving the problem, and proving the fix. It probably no much value to keep it.\n\nIntroducing the ThreadsafeHashCache is for performance. It's 10% better performance for calling connection method.\nThis is in case someone really cares about the performance, otherwise I don't get why the connection and release_connection were the only 2 unsynchronized methods called outside ConnectionPool.\n\nclear_stale_cached_connections method is only called inside ConnectionPool by checkout and verify_active_connections! methods, which are synchronized by mutex already.\n", "created_at": "2011-05-20 03:32:41", "user": 17474, "id": 1207893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213526", "text": "It seems that both connection and release_connection should be covered\nby the mutex, I can't see what the downside of that will be.  There'll\nbe some additional mutex contention but ... it'll actually be\nthreadsafe which would be nice ;)\n\nPerhaps rework your branch to make it work that way (and remove the\nmutex from any of the internal methods) and we can see what the impact\nis?\n\nOn Thu, May 19, 2011 at 11:32 PM, xli\nreply@reply.github.com\nwrote:\n\n> The unit test added is for proving the problem, and proving the fix. It probably no much value to keep it.\n> \n> Introducing the ThreadsafeHashCache is for performance. It's 10% better performance for calling connection method.\n> This is in case someone really cares about the performance, otherwise I don't get why the connection and release_connection were the only 2 unsynchronized methods called outside ConnectionPool.\n> \n> clear_stale_cached_connections method is only called inside ConnectionPool by checkout and verify_active_connections! methods, which are synchronized by mutex already.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/563#issuecomment-1207893\n\n## \n\nCheers\n\nKoz\n", "created_at": "2011-05-21 03:29:43", "user": 197, "id": 1213526}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Normally the table for abstract class won't be existed, so we should not trying to call `#column_names` on it.\n", "labels": [], "number": 564, "updated_at": "2014-07-03 04:08:03", "user": 4912, "closed_at": "2011-05-15 04:52:38", "id": 901798, "title": "Do not try to call `column_names` on the abstract class.", "url": "https://api.github.com/repos/rails/rails/issues/564", "created_at": "2011-05-15 04:42:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165752", "text": "Nooo, this is tying the controller more to ActiveRecord API. :(\n", "created_at": "2011-05-15 11:44:36", "user": 9582, "id": 1165752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165755", "text": "Also, table_exists? or something like that would be more appropriated to check.\n", "created_at": "2011-05-15 11:45:34", "user": 9582, "id": 1165755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1166156", "text": "Oops! Sorry bro! Feel free to revert, or I'll take care of it when I get to Baltimore.\n\n## \n\nAaron Patterson\nhttp://tenderlovemaking.com/\n\nOn May 15, 2011, at 4:45 AM, josevalimreply@reply.github.com wrote:\n\n> Also, table_exists? or something like that would be more appropriated to check.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/564#issuecomment-1165755\n", "created_at": "2011-05-15 14:48:59", "user": 3124, "id": 1166156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1166166", "text": "@tenderlove I think that's OK, as this fixes the issue. I'm working on decoupling it right now.\n", "created_at": "2011-05-15 14:51:15", "user": 4912, "id": 1166166}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @tenderlove\n\nUnder SQLite3, if a database constraint fails, you get an error like this:\n\n```\nActiveRecord::StatementInvalid: SQLite3::ConstraintException: constraint failed: INSERT INTO \"posts\" (\"author_id\", \"body\", \"comments_count\", \"taggings_count\", \"taggings_with_delete_all_count\", \"taggings_with_destroy_count\", \"tags_count\", \"tags_with_destroy_count\", \"tags_with_nullify_count\", \"title\", \"type\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n```\n\nOn mysql, for example, it actually tells you which field is causing the error. Is this possible on Sqlite3 now that we are using prepared statements? Also, can we should what values were passed into the prepared statement when raising an error like this?\n\nCheers\n", "labels": [], "number": 565, "updated_at": "2012-09-13 17:45:34", "user": 1979, "closed_at": "2011-10-09 09:31:23", "id": 902030, "title": "SQLite3::ConstraintException - is it possible to be more specific?", "url": "https://api.github.com/repos/rails/rails/issues/565", "created_at": "2011-05-15 08:26:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335140", "text": "@jonleighton any word here? Please close if you aren't investigating or plan to implement for 3.2.\n", "created_at": "2011-10-09 04:00:25", "user": 199, "id": 2335140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335897", "text": "ok, this isn't exactly top of my list, so closing for now.\n", "created_at": "2011-10-09 09:31:23", "user": 1979, "id": 2335897}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8512925", "text": "This exception is really annoying. I see this error for the first time now and cant figure out whats wrong with my statement...\n\nIt would be really nice if the message is more specific.\n", "created_at": "2012-09-12 22:50:51", "user": 342977, "id": 8512925}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8536677", "text": "Feel free to write a patch if you'd like this improved.\n", "created_at": "2012-09-13 17:45:34", "user": 27786, "id": 8536677}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It appears that singularize does't always return a plural to the correct singular.\n\nWhile creating an app with the generator where the controller was called 'AreasOfAnalysis' it is correctly pluralized as 'AreasOfAnalyses', however I noticed that the generator had singularized variables as 'areas_of_analyasis'.\n\nIt worked fine, my model was called AreasOfAnalysis everything worked fine until I integrated the using library cancan to provide authorization, it appears to rely on singularize to recover the model name from the controller name.\n\nWhich results in the incorrect singular. As a result throws an 500 error for a missing constant. After tracking this down I noticed this could be down to the singularization of the controller name.\n\nA quick test on the rails console confirmed, this is just pluralize and back\n\n> > x = \"AreasOfAnalysis\".pluralize\n> > => \"AreasOfAnalyses\"\n> > x.singularize\n> > => \"AreasOfAnalyAsis\"\n\nThis was to mimic the controller naming\n\n> > x = \"AreasOfAnalysis\".pluralize.underscore\n> > => \"areas_of_analyses\"\n> > x.singularize\n> > => \"areas_of_analyasis\"\n> > x.singularize.camelize\n> > => \"AreasOfAnalyasis\"\n\nThis is in tested in Rails 3.0.7, also seems to affect earlier releases, tested with 2.3.5, 2.3.4 and 3.0.3\n", "labels": [], "number": 566, "updated_at": "2012-06-21 08:26:28", "user": 173717, "closed_at": "2011-05-15 11:46:45", "id": 902279, "title": "Singularize edge case where it doesn't return to the correct singular ", "url": "https://api.github.com/repos/rails/rails/issues/566", "created_at": "2011-05-15 11:32:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1165758", "text": "Yeah, you need to add an inflection for it manually in your initializer.\n", "created_at": "2011-05-15 11:46:45", "user": 9582, "id": 1165758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6476868", "text": "@mort666 FYI, this is in fact a bug in the infector and it has been fixed in master. If you added an inflection rule to deal with this, you should be able to remove that when you upgrade to Rails 4.\n", "created_at": "2012-06-21 08:26:28", "user": 55829, "id": 6476868}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "We propose to use attribute_names instead of column_names and the default implementation in AR should be careful to check if the table exists or not to avoid breaking the controller. /cc @sikachu\n", "labels": [], "number": 567, "updated_at": "2013-07-17 10:31:43", "user": 9582, "closed_at": "2011-05-15 23:12:32", "id": 902305, "title": "ParamsWrapper should use a well-defined API and not rely on AR methods", "url": "https://api.github.com/repos/rails/rails/issues/567", "created_at": "2011-05-15 11:51:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1166070", "text": "Understood. Now working on it.\n", "created_at": "2011-05-15 14:10:54", "user": 4912, "id": 1166070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1166875", "text": "I've sent a pull request at #570\n", "created_at": "2011-05-15 18:33:04", "user": 4912, "id": 1166875}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This makes the `fields_for` and `instantiate_builder` methods more clear and consistent, and fixes an issue with non nested attributes and no object given. We had this issue while working on SimpleForm compatibility for Rails 3.1.\n", "labels": [], "number": 568, "updated_at": "2014-06-26 19:58:53", "user": 26328, "closed_at": "2011-05-15 22:51:27", "id": 902521, "title": "Fields for fixes for non nested attributes and without object", "url": "https://api.github.com/repos/rails/rails/issues/568", "created_at": "2011-05-15 14:21:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm getting this failure when run AR tests of master branch under 1.9.2:\n\n 1) Failure:\ntest_serialized_time_attribute(BasicsTest) [test/cases/base_test.rb:1178]:\n<2008-01-01 01:00:00 -0500> expected but was\n<2007-12-31 20:00:00 -0500>.\n\nLooks like it fails trying to serialize times with timezone. Same test is passing under 1.8.7. \nI will try to research and post more details here.\n", "labels": [], "number": 569, "updated_at": "2011-05-16 07:50:00", "user": 160941, "closed_at": "2011-05-16 07:50:00", "id": 902952, "title": "ActiveRecord test failing under 1.9.2-p180", "url": "https://api.github.com/repos/rails/rails/issues/569", "created_at": "2011-05-15 17:46:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1166749", "text": "I try to reproduce the failure and looks like is a problem with psych:\n\n```\nruby-1.9.2-p180 :001 > require \"yaml\"\n=> true \nruby-1.9.2-p180 :002 > require \"psych\"\n=> true \nruby-1.9.2-p180 :003 > YAML.load(YAML.dump(Time.local(2008,1,1,1,0)))\n=> 2008-01-01 01:00:00 -0500 \nruby-1.9.2-p180 :004 > Psych.load(Psych.dump(Time.local(2008,1,1,1,0)))\n=> 2007-12-31 20:00:00 -0500 \n```\n", "created_at": "2011-05-15 17:54:37", "user": 160941, "id": 1166749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1166819", "text": "I've reinstalled Ruby 1.9.2 (to use psych as standard library instead of gem) and the test is passing now. Looks like it fails only when psych is used as gem. I will close this since isn't a Rails problem.\n\ncc @tenderlove\n", "created_at": "2011-05-15 18:15:42", "user": 160941, "id": 1166819}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172032", "text": "Closing this then.\n", "created_at": "2011-05-16 07:50:00", "user": 1979, "id": 1172032}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "From the concern in #567, I've added a class method name `.attribute_names` to both `ActiveModel` and `ActiveRecord`. This method should return an array of attribute names, usually the column names if it's a database-backed storage. However, it's less fragile and will return empty array if the table is not exists or the model is an abstract model.\n\nI've added appropriate test case for each of it. Please review and merge it if you see appropriate.\n\nThank you.\n", "labels": [], "number": 570, "updated_at": "2014-07-03 04:08:20", "user": 4912, "closed_at": "2011-05-15 23:13:36", "id": 903057, "title": "Make ParamsWrapper use a well-defined API and not rely on AR methods", "url": "https://api.github.com/repos/rails/rails/issues/570", "created_at": "2011-05-15 18:32:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This problem was found in Rails 2.3.5, which has silence method inside ActiveRecord::Base.\nIt looks like this method was moved into Benchmarkable on Rails trunk.\n\nThe Rails default Logger impl is not thread-safe to reset logger level. The silence method simply resets logger level could cause thread-safe problem.\n\nActiveRecord::Base.silence method is used inside session_store, to set, get and destroy session.\nWhen Rails app is using Rails default SessionStore::Session to store session in database, this could cause the app only log ERROR level log.\n\nHere is a test to prove it: https://github.com/xli/rails/commit/fc86c001af1032d09c4f8bbc2f3ff306966fbe4f\n", "labels": ["activerecord"], "number": 571, "updated_at": "2013-10-09 10:46:16", "user": 17474, "closed_at": "2012-09-15 06:05:51", "id": 903180, "title": "ActiveRecord::Base.silence method causes Logger level set to ERROR in thread-safe mode", "url": "https://api.github.com/repos/rails/rails/issues/571", "created_at": "2011-05-15 19:37:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216038", "text": "here is the test: the link provide for the commit is gone.\n\n```\ndiff --git a/activerecord/test/cases/base_test.rb b/activerecord/test/cases/base_test.rb\nindex 9bc04ed..b74b4c3 100644\n--- a/activerecord/test/cases/base_test.rb\n+++ b/activerecord/test/cases/base_test.rb\n@@ -1708,6 +1708,20 @@ class BasicsTest < ActiveRecord::TestCase\n     ActiveRecord::Base.logger = original_logger\n   end\n\n+  def test_silence_sets_log_level_thread_safe\n+    threads = []\n+    default_level = ActiveRecord::Base.logger.level\n+    10.times do\n+      10.times do\n+        threads << Thread.start do\n+          ActiveRecord::Base.silence { sleep(rand * 0.01) }\n+          assert_equal default_level, ActiveRecord::Base.logger.level\n+        end\n+      end\n+      threads.each(&:join)\n+    end\n+  end\n+\n   def test_silence_sets_log_level_back_to_level_before_yield\n     original_logger = ActiveRecord::Base.logger\n     log = StringIO.new\n```\n", "created_at": "2011-05-22 01:27:13", "user": 17474, "id": 1216038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2335148", "text": "Nasty one. Do you have a thread-safe `silence` implemented?\n", "created_at": "2011-10-09 04:03:09", "user": 199, "id": 2335148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2535541", "text": "No.\nIt is a little painful to see all session update/load sqls in log.......\n", "created_at": "2011-10-26 19:59:56", "user": 17474, "id": 2535541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2720739", "text": "Came across this patch and blog entry which addresses the issue. Just for someone's reference:\n\nhttp://blog.kares.org/2011/04/railslogger-is-not-threadsafe.html\nhttps://gist.github.com/911210\n", "created_at": "2011-11-13 04:07:39", "user": 230930, "id": 2720739}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399274", "text": "Is this still a problem? You mentioned this was found in Rails 2.3.5, but does it still happen on >=3.2?\n", "created_at": "2012-04-28 19:05:59", "user": 27786, "id": 5399274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5946696", "text": "What's happening with this issue. Can we close this ? \n", "created_at": "2012-05-26 12:50:19", "user": 3948, "id": 5946696}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7651880", "text": "I'm using rails 3.2.6, threadsafe! configuration, puma as concurrent webserver and jruby and this still seems to be an issue. I had to hack this into my application_controller as a workaround:\n\n``` ruby\n  before_filter :reset_logs\n\n  def reset_logs\n    Rails.logger.level = 0\n  end\n```\n", "created_at": "2012-08-10 17:52:45", "user": 1065730, "id": 7651880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8582212", "text": "We're deprecating silence because of this, see #7643.\n", "created_at": "2012-09-15 06:05:51", "user": 27786, "id": 8582212}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "After all of the discussion, I think it's time for extract ActiveResource to a separate git repository. This will make sure that people will fork it and contribute to it in a good way.\n\nI've done a `git filter-branch` (http://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html) to extract `ActiveResource` out, while making sure all of the history is still there. I've pushed it temporary to here: https://github.com/sikachu/activeresource.\n\nI've saw that @radar has working on another rewrite of activeresource, and I think I'll try to merge in his rewrite to the project.\n\nI'm thinking about making active_resource as external dependency on 3.1, and then make it a commented out option in Gemfile later in 3.2+ (or 4.0). This is to make sure that `ActiveResource` will still be available for people who're using it for now.\n\nPlease review the proposal, and apply it if you think it's appropriate. All the tests, except for the one that was broken, is passing.\n", "labels": [], "number": 572, "updated_at": "2014-06-12 16:51:30", "user": 4912, "closed_at": "2012-03-13 21:04:03", "id": 903290, "title": "Remove Active Resource source files from the repository", "url": "https://api.github.com/repos/rails/rails/issues/572", "created_at": "2011-05-15 20:29:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167523", "text": "Nyah, ARes is still used in a lot of places.  I think the clean up we are doing on ARes (including Active Model Validations and the like) should make ActiveResource a first class citizen again.\n", "created_at": "2011-05-15 21:21:53", "user": 3366, "id": 1167523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167541", "text": "Can we just say no to this proposal and pretend it didn't happen.\n", "created_at": "2011-05-15 21:25:49", "user": 24576, "id": 1167541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167551", "text": "Linking the original discussion here: http://groups.google.com/group/rubyonrails-core/browse_thread/thread/25d34cdecfb50cb9\n\nI won't have a hard feeling if this got close, but I want to see someone going to step up and maintain it (like what @mikel done with `ActionMailer`). \n\nI saw people are using something else for doing REST requests but not `ActiveResource`, so I don't really know if it's worth pushing it forward under Rails name. I personally haven't write any code using `ActiveResource` for like a year, so I think it's time to extract it.\n", "created_at": "2011-05-15 21:29:31", "user": 4912, "id": 1167551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167559", "text": "By the way, I done this because I saw the core team thrown out `prototype` and `rjs` because people are not using it. People are not using ActiveResource too, why keep it?\n", "created_at": "2011-05-15 21:31:09", "user": 4912, "id": 1167559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167577", "text": "How long was ActionMailer crap and for how long... I bet it was for longer then ARes has been in Rails.\n\nRipping out isn't the answer.\n\nAsking for love, however is.  Maybe this cry out is enough to stir the pot.\n\nI just used ARes yesterday talking to two 3.0.7 apps. soon to hook into a 3rd.  I think all it's lacking is real documentation to be honest. There are a couple of gotchas when  you try deep diving into ARes, but on the flip side, hooking a Model up in app1 and fucking talking to app2, easy peasy is FANTASTIC.\n\nIf anything ARes needs a brand makeover, then a rip out.\n", "created_at": "2011-05-15 21:34:59", "user": 24576, "id": 1167577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167582", "text": "I agree with this patch. The number of people using ActiveResource _seriously_ does not warrant this to be a part of Rails. It is (as far as I and the other people on that rubyonrails-core thread know) unmaintained, something that is... ahem, maintained by the fact it hasn't had any large changes done to it. It either a) needs a maintainer or b) to be extracted out and maintained separately.\n", "created_at": "2011-05-15 21:35:54", "user": 2687, "id": 1167582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167588", "text": "@pjammer: If you can point out those trouble areas we will attempt to fix them at Railsconf.\n", "created_at": "2011-05-15 21:37:11", "user": 2687, "id": 1167588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167771", "text": "\"This will make sure that people will fork it and contribute to it in a good way\". Nothing is stopping people from making good contributions to ActiveRecord or ActionPack, so extracting to another git repository is not really fixing the problem. It is too late to remove ActiveResource from Rails 3.1, but it may be considered in future releases.\n", "created_at": "2011-05-15 22:47:45", "user": 9582, "id": 1167771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1167786", "text": "I had a whole rant queued up, but i'll save it for another venue.\n\nActive Resource mirrored functionality in Active Record.  I'm sure it's more complicated then that, but the essence is there.\n\nShouldn't Active Resource be kept lock step with Active Records development too?  Stripping it out could be crazy to maintain it as well, at least now when tests are ran on the suite it either passes or would get fixed as rails somehow stays green with the amount of changes it gets.\n", "created_at": "2011-05-15 22:51:19", "user": 24576, "id": 1167786}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4487018", "text": "What is the plan for ActiveResource moving forward?  Optional gem?  This is something I'd very much like to use but if it's future is uncertain I'll look at other options.\n", "created_at": "2012-03-13 21:42:56", "user": 77794, "id": 4487018}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4487115", "text": "The Rails Core Team is no longer maintaining Active Resource. Other people may fork the repository and step up for this task though.\n", "created_at": "2012-03-13 21:47:07", "user": 9582, "id": 4487115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4487141", "text": "The base repository for the fork is at https://github.com/rails/activeresource, if someone want to fork it. The test is passing, and you should be able to stick it with Rails 4.x app just fine.\n", "created_at": "2012-03-13 21:48:37", "user": 4912, "id": 4487141}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4487233", "text": "I would love to see it be re-worked for Rails 4.x.\n", "created_at": "2012-03-13 21:52:53", "user": 2687, "id": 4487233}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4487266", "text": "About time. +1\n", "created_at": "2012-03-13 21:54:38", "user": 18524, "id": 4487266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4487418", "text": "@radar agree, probably we can do something better using ActiveModel\n", "created_at": "2012-03-13 22:02:19", "user": 160941, "id": 4487418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4492563", "text": "Good stuff.\n", "created_at": "2012-03-14 05:27:16", "user": 17348, "id": 4492563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4495771", "text": "Thank you for this move.\n", "created_at": "2012-03-14 10:39:28", "user": 106689, "id": 4495771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4496119", "text": "Can anyone tell me, what to do with my pull request here?\n\nhttps://github.com/rails/rails/pull/230\n\nTrashbox or what? (just don't know how to handle now...  ^^)\n", "created_at": "2012-03-14 11:08:11", "user": 136796, "id": 4496119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4496931", "text": "@SweeD no way, I think we should merge that pull request into the `activeresource` repository.\n", "created_at": "2012-03-14 12:16:46", "user": 4912, "id": 4496931}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4496961", "text": "@sikachu Hmm...  ok, then i will fork active_resource and do patch that... \n", "created_at": "2012-03-14 12:19:49", "user": 136796, "id": 4496961}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4498960", "text": "Done:\n\nhttps://github.com/rails/activeresource/pull/1\n", "created_at": "2012-03-14 14:20:43", "user": 136796, "id": 4498960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4520190", "text": "I'm using ActiveResource extensively on several internal projects communicating with each other and I think this is a _good thing_.  This won't kill ActiveResource, this will give it the ability to get some fixes faster than would otherwise be possible tied to a Rails release cycle.  I'm writing an internal gem that has to work from Rails 2.3.11 -> 3.2, and having to maintain compatibility with a few different AR versions is painful.  This doesn't directly solve that problem, but it sets the stage so that projects on Rails 4.0, 4.1, 5.0 and beyond can decide to upgrade AR without upgrading all of Rails.\n", "created_at": "2012-03-15 14:08:50", "user": 57926, "id": 4520190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4520516", "text": "+1 for the move ... as it is a really a part needing a complete rework \n", "created_at": "2012-03-15 14:25:25", "user": 13575, "id": 4520516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4534373", "text": "+1 not being used for most of my projects. the design is too fancy, and I don't think website made in other languages, like PHP will provide the exact API needed by ActiveResource.\n", "created_at": "2012-03-16 05:09:50", "user": 22824, "id": 4534373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4541206", "text": "-100 to all of you +1'rs. More neutering of a once great framework. ARes is still bound to Active Record in terms of it just working and all of it's magic that makes it awesome when you need it. I hope this new fork will keep in lock step with it's development too (if Active Record doesn't get cut) and not just die on the vine like the core team let it many years ago.  When you need it, ARes is awesome. \"Most projects\" suck and are small unfinished tripe. ARes does some heavy lifting which i really do hope gets the love it deserves. Fuck, cleaning up the docs would probably be all it needs, and it'll be declared 'genius' and 'refreshing' by the hipster code militia.\n", "created_at": "2012-03-16 15:05:45", "user": 24576, "id": 4541206}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4541897", "text": "Patches welcome. :trollface:\n", "created_at": "2012-03-16 15:39:07", "user": 2687, "id": 4541897}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4541988", "text": "I agree. Totally that if it didn't work for you patch it up. However, it works for me and my needs. Always has to be honest.  I guess I will improve the docs on the new fork it looks like.\n", "created_at": "2012-03-16 15:43:02", "user": 24576, "id": 4541988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4542184", "text": "ARes is a toy compared to what it could be. It doesn't automatically handle relationships, doesn't let you know what to pass to create to make a new object, requires out-of-band knowledge to use an api correctly, doesn't have a standard way to deal with finders, etc.  All of these things have patches to fix them running out in the wild, but weren't accepted.  Even if/when they were accepted, they had to be tied to the larger release cycle of rails itself.  There have _already_ been patches accepted to the new ARes! \n", "created_at": "2012-03-16 15:52:27", "user": 57926, "id": 4542184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4542220", "text": "All new OSS projects accepts patches quick.  how have the other 'pull outs' been doing recently. All the rails helpers etc.\n", "created_at": "2012-03-16 15:54:05", "user": 24576, "id": 4542220}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4542347", "text": "I mean for the record, if this is how it's going, awesome. let's make it right (to quote Mike Holmes) but let's be a better Rails than Rails.  Meaning let's keep this new gem in step with those it depends on in core. Let's make core better by doing so, etc etc.\n", "created_at": "2012-03-16 15:59:21", "user": 24576, "id": 4542347}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 573, "updated_at": "2014-07-03 04:08:31", "user": 83449, "closed_at": "2011-05-16 02:48:10", "id": 903878, "title": "Add doc to #attribute_names", "url": "https://api.github.com/repos/rails/rails/issues/573", "created_at": "2011-05-16 00:36:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/300\nCreated by **Rob Anderton** - 2011-04-22 05:48:03 UTC\n\nThis was originally discussed but not resolved by others on the old Rails trac:\nhttp://dev.rubyonrails.org/ticket/5219\n\nI've attached a patch (with tests) that does the following:\n- changes the primary key data type for the MySQL adapter to be \"int(11) unsigned\"\n- changes the references (aka belongs_to) 'sexy' migration methods to generate unsigned foreign key fields by default when using MySQL (other adapters remain unchanged)\n- adds an :unsigned option (defaults to false) to table creation and modification migrations, so for example you can now do things like this:\n\n``` ruby\nt.integer :category_id, :null => true, :unsigned => true\nchange_column :suppliers, :category_id, :integer, :unsigned => false\n```\n- updates the SchemaDumper to understand unsigned integer fields\n\nThe unsigned option will be silently ignored by all but the MySQL adaptor. I've tested with MySQL 5.1 and SQLite 3.\n", "labels": [], "number": 574, "updated_at": "2011-05-21 15:11:45", "user": 789801, "closed_at": "2011-05-21 15:11:35", "id": 904146, "title": "Unsigned integers for MySQL", "url": "https://api.github.com/repos/rails/rails/issues/574", "created_at": "2011-05-16 02:52:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168528", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2008-06-05 21:34:03 UTC\n\nNot a good idea to create unsigned primary keys by default. However, Rails should allow people to do it nevertheless. I think the format could be something like :\n\n``` ruby\ncreate_table(:categories_suppliers, :id => :unsigned) do |t|\n....\nend\n```\n", "created_at": "2011-05-16 02:52:39", "user": 789801, "id": 1168528}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168529", "text": "_Imported from Lighthouse._\nComment by **Rob Anderton** - 2008-06-09 20:15:23 UTC\n\nUpdated patch attached: this doesn't touch the primary keys at all, it just adds an :unsigned option to migrations.\n\nI have some other, non-MySQL specific, ideas for primary key options, and will submit these in a separate patch (which will also include the ability for specifying an unsigned PK in MySQL) when I've had chance to work on them.\n", "created_at": "2011-05-16 02:52:40", "user": 789801, "id": 1168529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168530", "text": "_Imported from Lighthouse._\nComment by **Jason L Perry** - 2008-09-23 14:58:22 UTC\n\n@pratik: Why is it not a good idea to create unsigned primary keys by default? I've read over the mailing list thread related to this ticket (http://www.ruby-forum.com/topic/155218), is your concern just regarding backward compatibility? \n\nThat said, I'd really like to be able to use :unsigned => true in migrations, regardless of any changes to the primary keys.\n", "created_at": "2011-05-16 02:52:40", "user": 789801, "id": 1168530}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168531", "text": "_Imported from Lighthouse._\nComment by **Rob Anderton** - 2008-09-30 10:12:27 UTC\n\nMy understanding from the discussions was that changing the default would break backwards compatibility and that even though, as I pointed out, changes to the behaviour of the :limit option on numeric columns did the same thing, it wasn't acceptable for this patch.\n\nI'm still intending to either release a more configurable patch (there's a bit more I'd like to do with primary keys) or a plugin. Hopefully I'll get chance over the next few weeks as it's been on my todo list for too long now :)\n\nIn the meantime I've uploaded the monkey-patch edition, which I've been using successfully on recent projects, to [my blog](http://thewebfellas.com/blog/2008/6/2/unsigned-integers-for-mysql-on-rails/#comment-1924)\n", "created_at": "2011-05-16 02:52:41", "user": 789801, "id": 1168531}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168532", "text": "_Imported from Lighthouse._\nComment by **J√©r√©my Lecour** - 2010-01-07 16:51:35 UTC\n\nI don't really know where Rails is right now about this, but it sure would be usefull to be able to create unsigned integer columns from migrations.\n", "created_at": "2011-05-16 02:52:41", "user": 789801, "id": 1168532}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168533", "text": "_Imported from Lighthouse._\nComment by **Gabe da Silveira** - 2010-02-15 19:21:04 UTC\n\nGoing to add my request for :unsigned => true configuration option.  I don't so much care about the primary key issue.  But unsigned ints are extremely useful for one very common reason: IP Addresses.\n", "created_at": "2011-05-16 02:52:41", "user": 789801, "id": 1168533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168534", "text": "_Imported from Lighthouse._\nComment by **Rob Anderton** - 2010-02-15 21:54:42 UTC\n\nIf there was a likelihood of it making it into core I'd be happy to look at updating the patch for Rails 3. I know that other database-specific stuff has made it into core in the (almost) 2 years since I first looked at this, so maybe it'd be more acceptable now.\n", "created_at": "2011-05-16 02:52:42", "user": 789801, "id": 1168534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168535", "text": "_Imported from Lighthouse._\nComment by **Chip** - 2010-09-25 17:59:05 UTC\n\n\"I know that other database-specific stuff has made it into core in the (almost) 2 years since I first looked at this, so maybe it'd be more acceptable now.\"\n\nI agree...  Rails has recently added support for [MySQL's 'after' functionality](http://github.com/rails/rails/commit/e55284e8256461fc2440c41548ee9b4216f96b47) - showing the db_adapters are a great place for advanced DB-specific features.  Rails has always done a great job incorporating best practices, and efficiently using your DB is certainly a 'best practice'.\n", "created_at": "2011-05-16 02:52:42", "user": 789801, "id": 1168535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168536", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:59:29 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 02:52:43", "user": 789801, "id": 1168536}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168537", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-04-26 10:17:01 UTC\n\n[state:open]\n\nThe primary key change is not interesting to me, but:\n\n+1 for unsigned integer support.\n", "created_at": "2011-05-16 02:52:43", "user": 789801, "id": 1168537}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168538", "text": "Attachments saved to Gist: http://gist.github.com/969902\n", "created_at": "2011-05-16 02:52:44", "user": 789801, "id": 1168538}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/410\nCreated by **enebo** - 2008-06-13 17:25:12 UTC\n\nconstantize in lib/active_support/inflector.rb uses eval which is slow in both JRuby and Ruby 1.9.  This patch passes all tests and also significantly speeds up constantize on these ruby impl (without hurting perf of Ruby 1.8).\n", "labels": [], "number": 575, "updated_at": "2017-12-04 00:40:42", "user": 789801, "closed_at": "2011-05-21 15:11:45", "id": 904147, "title": "Inflector.constantize uses eval which is slow in JRuby and Ruby 1.9", "url": "https://api.github.com/repos/rails/rails/issues/575", "created_at": "2011-05-16 02:54:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168540", "text": "_Imported from Lighthouse._\nComment by **Chris Lloyd** - 2008-08-06 23:24:59 UTC\n\n+1\n\nPasses all tests. I've attached a benchmark which shows this is actually slightly faster with simple constant names running 1.8.6.\n\nIt slows down with multiple namespaces. Parity occurs with 3 nested namespaces (A::B::C) but the perf. difference on even up to 7 nested namespaces is minimal. Looks good.\n", "created_at": "2011-05-16 02:54:18", "user": 789801, "id": 1168540}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168541", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2008-08-07 00:34:14 UTC\n\n(from [88eec8327b179cd41314e85868879b46bcf2530e]) JRuby: improve constantize performance.  [#410 state:resolved]\nhttp://github.com/rails/rails/commit/88eec8327b179cd41314e85868879b46bcf2530e\n", "created_at": "2011-05-16 02:54:19", "user": 789801, "id": 1168541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168542", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2008-08-07 00:34:17 UTC\n\n(from [ed8a882e47e07b470b71cacd8cd50e251dca4d27]) JRuby: improve constantize performance.  [#410 state:resolved]\nhttp://github.com/rails/rails/commit/ed8a882e47e07b470b71cacd8cd50e251dca4d27\n", "created_at": "2011-05-16 02:54:19", "user": 789801, "id": 1168542}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168543", "text": "_Imported from Lighthouse._\nComment by **Michael Johnston** - 2008-09-11 07:36:18 UTC\n\nThis fails (after about 30 rounds of constantize / const_missing / parent)\n\n``` ruby\nclass Outer\n  TOM=5\nend\n\nmodule Bob\n  class Mary\n    class Foo < ::Outer\n    end\n    def self.doit\n      i = ::Bob::Mary::Foo.new   \n      puts \"dereference: #{::Bob::Mary::Foo::TOM}\"\n      puts \"constantize: #{\"::Bob::Mary::Foo::TOM\".constantize}\"\n    end\n  end\nend\n\nBob::Mary.doit\n\n```\n\nfor an example in the wild see the init function of picnic\n", "created_at": "2011-05-16 02:54:19", "user": 789801, "id": 1168543}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168544", "text": "_Imported from Lighthouse._\nComment by **Michael Johnston** - 2008-09-11 07:37:46 UTC\n\nsigh. lets try that again. \n\n``` ruby\nclass Outer\n  TOM=5\nend\n\nmodule Bob\n  class Mary\n    class Foo < ::Outer\n    end\n    def self.doit\n      i = ::Bob::Mary::Foo.new   \n      puts \"dereference: #{::Bob::Mary::Foo::TOM}\"\n      puts \"constantize: #{\"::Bob::Mary::Foo::TOM\".constantize}\"\n    end\n  end\nend\n\nBob::Mary.doit\n\n```\n\nfor an example in the wild see the init function of picnic\n", "created_at": "2011-05-16 02:54:20", "user": 789801, "id": 1168544}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168545", "text": "_Imported from Lighthouse._\nComment by **Michael Johnston** - 2008-09-11 07:51:06 UTC\n\nactually, this fails too:\n\n``` ruby\nclass Outer2\n  module Why\n    TOM2 = 5\n  end\n  include Why\nend\n\n\"Outer2::TOM2\".constantize\n\n```\n\nwhich is why \"Logger::INFO\".constantize fails which is (another reason) why picnic fails.\n", "created_at": "2011-05-16 02:54:20", "user": 789801, "id": 1168545}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168546", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2008-09-11 16:08:24 UTC\n\nMichael, could you add a failing test case? Do you have a workaround that doesn't use eval?\n", "created_at": "2011-05-16 02:54:21", "user": 789801, "id": 1168546}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168547", "text": "_Imported from Lighthouse._\nComment by **Ripta Pasay** - 2008-12-03 16:46:34 UTC\n\nIt's been awhile, so attached is my own attempt a failing test case. I added an \"Extension\" module to Ace::Base; it's the simplest I could come up with that fails. The \"Extension\" doesn't break the rest of the test cases.\n", "created_at": "2011-05-16 02:54:21", "user": 789801, "id": 1168547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168548", "text": "_Imported from Lighthouse._\nComment by **Frederick Cheung** - 2008-12-13 18:24:15 UTC\n\nThis seems to do the trick, speed seems on par with the previous implementation. Not 100% sure about the ruby 1.9 specific changes, the inflector tests do still pass but I'm not quite up to date on how const_defined? etc.. have  changed\n", "created_at": "2011-05-16 02:54:21", "user": 789801, "id": 1168548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168549", "text": "_Imported from Lighthouse._\nComment by **Frederick Cheung** - 2008-12-14 10:08:48 UTC\n\nOops, ruby 1.9 changes were a bit off. This should be better\n", "created_at": "2011-05-16 02:54:21", "user": 789801, "id": 1168549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168550", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2008-12-15 19:05:55 UTC\n\n(from [eca79e6bf052041c018c7ba08750238f8b2ecb7a]) Make constantize look into ancestors\n\n[#410 state:resolved]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\n\nConflicts:\n\n```\nactivesupport/lib/active_support/inflector.rb\n```\n\nhttp://github.com/rails/rails/commit/eca79e6bf052041c018c7ba08750238f8b2ecb7a\n", "created_at": "2011-05-16 02:54:22", "user": 789801, "id": 1168550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168551", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2008-12-15 19:05:56 UTC\n\n(from [262fef7ed57520b857605a0105fe7ba9265654f6]) Make constantize look into ancestors\n\n[#410 state:resolved]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\nhttp://github.com/rails/rails/commit/262fef7ed57520b857605a0105fe7ba9265654f6\n", "created_at": "2011-05-16 02:54:22", "user": 789801, "id": 1168551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168552", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2008-12-15 19:05:56 UTC\n\n(from [87790e00ec4a0b24146de3757d1d6892689b05e4]) Make constantize look into ancestors\n\n[#410 state:resolved]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\nhttp://github.com/rails/rails/commit/87790e00ec4a0b24146de3757d1d6892689b05e4\n", "created_at": "2011-05-16 02:54:22", "user": 789801, "id": 1168552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168553", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2008-12-16 02:22:12 UTC\n\n(from [d7b7ff0556ea5a66aeda455141ba06b558671e3d]) Revert \"Make constantize look into ancestors\"\n\n[#410 state:open]\n\nThis reverts commit 87790e00ec4a0b24146de3757d1d6892689b05e4.\nhttp://github.com/rails/rails/commit/d7b7ff0556ea5a66aeda455141ba06b558671e3d\n", "created_at": "2011-05-16 02:54:23", "user": 789801, "id": 1168553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168554", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2008-12-16 02:22:12 UTC\n\n(from [981314f45cbb42d1b5403ac0d984f37c82226438]) Revert \"Make constantize look into ancestors\"\n\n[#410 state:open]\n\nThis reverts commit eca79e6bf052041c018c7ba08750238f8b2ecb7a.\nhttp://github.com/rails/rails/commit/981314f45cbb42d1b5403ac0d984f37c82226438\n", "created_at": "2011-05-16 02:54:23", "user": 789801, "id": 1168554}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168555", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2008-12-16 02:22:55 UTC\n\n(from [19be3d35b38b6685789d8d343617d465a3652717]) Revert \"Make constantize look into ancestors\"\n\n[#410 state:open]\n\nThis reverts commit 262fef7ed57520b857605a0105fe7ba9265654f6.\nhttp://github.com/rails/rails/commit/19be3d35b38b6685789d8d343617d465a3652717\n", "created_at": "2011-05-16 02:54:24", "user": 789801, "id": 1168555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168556", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2009-01-09 01:17:13 UTC\n\nWhat does this patch need to be accepted? It appears from some discussion [here](http://www.ruby-forum.com/topic/51795) and [here](http://osdir.com/ml/lang.ruby.devel/2006-01/msg00026.html)\nthat the second argument to const_defined? was specifically added to make the test included here pass.\n\nAlso ran into this in a Picnic situation; \"Logger::DEBUG\".constantize wasn't finding the constant.\n\nThe 1.9 case in the current code overrides this behavior and restores the (somewhat hard to understand) behavior of Ruby 1.8. I know I was amazed when \"Logger::DEBUG\".constantize didn't work even though Logger::DEBUG evaluated without error.\n", "created_at": "2011-05-16 02:54:25", "user": 789801, "id": 1168556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168557", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-06-17 06:31:48 UTC\n\nAny updates in this ticket? is this still a issue on Rails master?\n", "created_at": "2011-05-16 02:54:26", "user": 789801, "id": 1168557}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168558", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2010-06-17 09:50:10 UTC\n\nThe original ticket title no longer applies as eval is no longer used in constantize however Michael Johnston's failing example still fails on master.\n\nThe actual problem now is that const_defined? doesn't look for constants in included modules in 1.8.7 but it does in 1.9.x. There's an optional second parameter that turns it off - which is what constantize does. The last patch tries to fix it by searching the ancestors list, however it's probably best to use the optimised behavior on 1.9.x and only search ancestors on 1.8.7.\n\nI can come up with a new patch if you want me to.\n", "created_at": "2011-05-16 02:54:26", "user": 789801, "id": 1168558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168559", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-17 11:43:40 UTC\n\n+1 for Andrew's idea.\n", "created_at": "2011-05-16 02:54:26", "user": 789801, "id": 1168559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168560", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-06-20 02:59:18 UTC\n\n+1 from me too\n", "created_at": "2011-05-16 02:54:27", "user": 789801, "id": 1168560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168561", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-08-03 06:50:19 UTC\n\nAndrew, have you been able to work on that patch?\n", "created_at": "2011-05-16 02:54:27", "user": 789801, "id": 1168561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168562", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2010-08-19 17:15:52 UTC\n\nI've looked at it and unfortunately using the optimized const_defined? in 1.9.2 returns top level constants which is different to the required behavior. I looked at using constant.constants.member? but it's unbearably slow. Therefore the technique in Fredrick's patch is about as good as it'll get and it results in about a 33% slowdown for a constant like ActiveSupport::Routing::Mapper. The same is true for 1.8.7 and 1.9.2 and const_defined? is slower by about 33% in 1.9.2 than 1.8.7 anyway.\n\nThis may or may not be acceptable - the attached patch is basically an update of Frederick's patch.\n", "created_at": "2011-05-16 02:54:27", "user": 789801, "id": 1168562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168563", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:29 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 02:54:27", "user": 789801, "id": 1168563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168564", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:28 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 02:54:28", "user": 789801, "id": 1168564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168565", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 02:54:28", "user": 789801, "id": 1168565}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168566", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 02:54:28", "user": 789801, "id": 1168566}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168567", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 02:54:29", "user": 789801, "id": 1168567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168568", "text": "Attachments saved to Gist: http://gist.github.com/969906\n", "created_at": "2011-05-16 02:54:29", "user": 789801, "id": 1168568}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/610\nCreated by **David Burger** - 2008-07-13 04:50:26 UTC\n\nWhen using ActiveRecord's to_json with the parameter :include => associations to include associations, the association's to_json method is not invoked to create the json for that association.  This prevents the ability to override the to_json method of a class and have it used appropriately when it is serialized as part of an :include.  This patch corrects this so that the to_json method of a class will be used to produce the json for that class when the class is used in an :include =>.\n", "labels": [], "number": 576, "updated_at": "2014-06-16 13:17:44", "user": 789801, "closed_at": "2011-05-21 15:11:45", "id": 904148, "title": "ActiveRecord to_json doesn't invoke :include's to_json", "url": "https://api.github.com/repos/rails/rails/issues/576", "created_at": "2011-05-16 02:54:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168569", "text": "_Imported from Lighthouse._\nComment by **Joshua Peek** - 2008-10-28 16:25:14 UTC\n\nStaling out, please reopen if this is still a problem.\n", "created_at": "2011-05-16 02:54:30", "user": 789801, "id": 1168569}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168570", "text": "_Imported from Lighthouse._\nComment by **bentlegen** - 2009-02-19 04:02:32 UTC\n\nThis is still an open issue for our team. Please consider re-opening.\n", "created_at": "2011-05-16 02:54:31", "user": 789801, "id": 1168570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168571", "text": "_Imported from Lighthouse._\nComment by **J√∂rg Battermann** - 2009-02-23 00:43:32 UTC\n\nJoshua / or anyone else listening,\n\nthis still -is- a problem (in Rails 2.2.2). Basically I have the following:\n\nMy 'User' model has an explicit 'def to_json' declaration that hides a couple of the model's attributes and also adds a couple methods to the output. All working fine when e.g. doing a @user_instance.to_json\n\nHowever, e.g. my photo model belongs_to an user. now when doing a @photo_instance.to_json(:include => [:user]), all my user-class's def to_json get ignored and the full user model is serialized, ignoring my :except and :methods declarations in the user's to_json method.\n\nSo basically yep, the to_json method of included ':include =>[:abc, :def]'s still don't get called.\n", "created_at": "2011-05-16 02:54:31", "user": 789801, "id": 1168571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168572", "text": "_Imported from Lighthouse._\nComment by **Seth Ladd** - 2009-02-27 20:12:38 UTC\n\nThis is still an issue.  I'd like to re-open, but I don't think normal users can.\n\nPlease reopen.\n", "created_at": "2011-05-16 02:54:31", "user": 789801, "id": 1168572}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168573", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2009-02-27 21:46:25 UTC\n\n@Seth - reopening at your request. I took a look at this, and it\ndoes appear that the problem still exists.\n\nAt a quick glance, the fix is going to require changes to:\n(around line 80, active_record/serialization.rb)\n\n``` ruby\nif records.is_a?(Enumerable)\n  serializable_record[association] = records.collect { |r| self.class.new(r, opts).serializable_record }\nelse\n  serializable_record[association] = self.class.new(records, opts).serializable_record\nend\n```\n\nIdeally, it would seem nice to have a hash equivalent to to_json that would return the desired hash without flattening it to a string first.\n\nAlternatively, one could borrow much of the implementation in xml_serializer.rb, but that's really just a sign that the abstract implementation of add_associations needs to be tweaked.\n", "created_at": "2011-05-16 02:54:32", "user": 789801, "id": 1168573}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168574", "text": "_Imported from Lighthouse._\nComment by **Ken Collins** - 2009-07-19 01:13:17 UTC\n\nI just had the same issue. I've got a model tree and I just defined to_json(options={}) in each model that add :only defaults and their own :include options. I was hoping that I could go all the way back up the chain at the end of this and just call #to_json on the parent object and was disappointed to some very very odd behavior.\n\nI also noticed that if I use :only on the top level, it applies it to all levels of :include. I'm searching for other tickets that address this but will try this patch too and let you know.\n", "created_at": "2011-05-16 02:54:32", "user": 789801, "id": 1168574}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168575", "text": "_Imported from Lighthouse._\nComment by **Ken Collins** - 2009-07-20 13:36:50 UTC\n\nOK, I did some poking around in master this weekend and this is what I found. First, this patch seems outdated with the new plugable JSON backends. Second, giving the new use of how #to_json is really calling #as_json as being the best way to remain JSON agnostic, this ticket may be moot for 3.0. Here is some model examples. So using #as_json in rails 3 does what I would hope and expect.\n\n``` ruby\n\n\nclass Foo\n  JSON_ATTRS = [:id,:created_at]\n  has_many :bars\n  def as_json(options=nil)\n    attributes.slice(*JSON_ATTRS).merge(:bars => bars)\n  end\nend\n\nclass Bar\n  JSON_ATTRS = [:id,:owner_id,:owner_type,:etc]\n  has_many :bats\n  def as_json(options=nil)\n    attributes.slice(*JSON_ATTRS).merge(:bats => bats)\n  end\nend\n\nclass Bat\n  JSON_ATTRS = [:not_this,:or_that]\n  def as_json(options=nil)\n    attributes.except(*JSON_ATTRS)\n  end\nend\n\n\nFoo.first.to_json # => Will include all associations defined by model.\n\n```\n", "created_at": "2011-05-16 02:54:32", "user": 789801, "id": 1168575}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168576", "text": "_Imported from Lighthouse._\nComment by **Ken Collins** - 2009-07-20 13:39:41 UTC\n\nBetter attempt at code formatting\n\n``` ruby\n\n\nclass Foo\n  JSON_ATTRS = [:id,:created_at]\n  has_many :bars\n  def as_json(options=nil)\n    attributes.slice(*JSON_ATTRS).merge(:bars => bars)\n  end\nend\n\nclass Bar\n  JSON_ATTRS = [:id,:owner_id,:owner_type,:etc]\n  has_many :bats\n  def as_json(options=nil)\n    attributes.slice(*JSON_ATTRS).merge(:bats => bats)\n  end\nend\n\nclass Bat\n  JSON_ATTRS = [:not_this,:or_that]\n  def as_json(options=nil)\n    attributes.except(*JSON_ATTRS)\n  end\nend\n\n\nFoo.first.to_json # => Will include all associations defined by model.\n\n```\n", "created_at": "2011-05-16 02:54:33", "user": 789801, "id": 1168576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168577", "text": "_Imported from Lighthouse._\nComment by **will bailey** - 2009-08-07 20:10:06 UTC\n\nIt appears that in Rails 2.3.3 the as_json method is not called on ActiveRecord Objects when to_json is called.  Is the code example in the previous post only planned to work in Rails 3?  I'm wondering what the reasoning is behind not having to_json invoke as_json in active_record/serializers/json_serializer.rb\n\nI would expect it to work like this:\n\n``` ruby\n\n    def to_json(options = {})\n      return ActiveSupport::JSON.encode(as_json) if respond_to?(:as_json)\n      hash = Serializer.new(self, options).serializable_record\n      hash = { self.class.model_name.element => hash } if include_root_in_json\n      ActiveSupport::JSON.encode(hash)\n    end\n\n    # Remove this implement in subclasses as desired\n    # def as_json(options = nil) self end #:nodoc:\n\n```\n", "created_at": "2011-05-16 02:54:33", "user": 789801, "id": 1168577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168578", "text": "_Imported from Lighthouse._\nComment by **Bart Zonneveld** - 2009-10-07 09:35:56 UTC\n\n+1, although the original patch is apparently outdated.\n", "created_at": "2011-05-16 02:54:33", "user": 789801, "id": 1168578}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168579", "text": "_Imported from Lighthouse._\nComment by **Jarred Nicholls** - 2009-10-07 22:05:25 UTC\n\nWhile this is clearly something that wasn't thought hard about (before 2.3.3 and after 2.3.3, irregardless of the new as_json functionality), I came up a simple solution to achieve the same effect until there is a better (more integrated) solution.  In fact, this \"magic method\" solution I came up with could easily be an ActiveRecord::Base class method (much like \"serialize\" or \"attr_protected\", etc.) to define a list of attributes that are deemed serializable.\n\nFirst I overrode the \"serializable_attribute_names\" method in ActiveRecord::Serialization::Serializer class:\n\n``` ruby\nmodule ActiveRecord\n  module Serialization\n    class Serializer\n      def serializable_attribute_names\n        attribute_names = @record.respond_to?(:serializable_attributes) ? @record.serializable_attributes : @record.attribute_names\n\n        if options[:only]\n          options.delete(:except)\n          attribute_names = attribute_names & Array(options[:only]).collect { |n| n.to_s }\n        else\n          options[:except] = Array(options[:except]) | Array(@record.class.inheritance_column)\n          attribute_names = attribute_names - options[:except].collect { |n| n.to_s }\n        end\n\n        attribute_names\n      end\n    end # class Serializer\n  end # module Serialization\nend # module ActiveRecord\n```\n\nNotice the change in the first line of the method, where I check to see if an ActiveRecord responds to \"serializable_attributes\".  If it does, I take the resulting array of attributes from that rather than the \"attribute_names\" method.  This can be the method we implement in our models:\n\n``` ruby\nclass User < ActiveRecord::Base\n  def serializable_attributes\n    # return array of attributes names we deem are safe to serialize\n    attribute_names - [\"secret_key\"]\n  end\nend\n```\n\nAnd Viola!, the net effect we wanted from overriding as_json...only now we are also compatible with XML serialization.\n", "created_at": "2011-05-16 02:54:34", "user": 789801, "id": 1168579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168580", "text": "_Imported from Lighthouse._\nComment by **Seth Ladd** - 2009-10-13 05:24:17 UTC\n\nFWIW this is still a problem in Rails 2.3.4.  I've created a sample app, with tests, that illustrates this problem.\n\nhttp://github.com/sethladd/to_json_busted\n", "created_at": "2011-05-16 02:54:35", "user": 789801, "id": 1168580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168581", "text": "_Imported from Lighthouse._\nComment by **Jarred Nicholls** - 2009-10-13 14:22:42 UTC\n\nYep it is.  My code above will make it work as expected if the \"expected method\" is used, as opposed to overriding as_json.  The net effect is the same as what was expected from overriding as_json, as well as working for XML serialization at the same time.  I looked into the serialization code and it's not as easy to fix as_json as one would think, without adding JSON serialization logic directly into the Serializer class, which is suppose to be agnostic to the serialization format.\n\nHope that helps.\n", "created_at": "2011-05-16 02:54:35", "user": 789801, "id": 1168581}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168582", "text": "_Imported from Lighthouse._\nComment by **wdlindmeier** - 2009-10-22 18:44:22 UTC\n\nI made the following patch to Rails 2.2.2 which fixed the problem for JSON serialization.\n\n``` ruby\n\nclass ActiveRecord::Base\n\n  def to_json_options(options={})\n    options.symbolize_keys!\n  end        \n\nend\n\nclass ActiveRecord::Serialization::JsonSerializer\n\n  def initialize(record, options = {})\n    super\n    @options = @record.to_json_options(@options)\n  end\n\nend\n\nclass Submission < ActiveRecord::Base\n\n  def to_json_options(options={})\n    returning(super) do |opts|\n      opts[:methods] ||= []\n      opts[:methods] = opts[:methods] | ['type', 'photo_urls']\n    end\n  end\n\nend\n\n```\n", "created_at": "2011-05-16 02:54:35", "user": 789801, "id": 1168582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168583", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2009-12-11 06:58:04 UTC\n\nDoes anyone know if the next Rails release will address this? It seems like really unexpected behavior for includes to just dump all of the children's attributes willy nilly.\n", "created_at": "2011-05-16 02:54:36", "user": 789801, "id": 1168583}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168584", "text": "_Imported from Lighthouse._\nComment by **Jarred Nicholls** - 2009-12-11 13:37:00 UTC\n\nWell I have 2.3.5 and this was not addressed.  See my solution above - I just overwrote the function that determines what attributes are serializable in ActiveSupport::Serialization::Serializer, and you can add a public method to your models that can return an array of (String) attribute names that can be serialized.  This is a fix for both JSON and XML serialization.  Of course, this solution doesn't allow for ad hoc decisions on what attributes to serialize when using \"include\", but it at least makes sure \"private\" attributes aren't ever included in serialization.\n\nMy suggestion (until \"include\" will accept attributes to include/exclude for child attributes) is to include a method rather than your ActiveRecord relationship that returns particular attributes of your relationship, and can in turn nest deep into the AR relationship tree.  It's not a good solution, it's just a workable solution.  The moment you have 3 or more \"special methods\" because you want different attributes in 3 different situations, you will start to taste vomit in your mouth (I know I would).  Until there is an elegant/incorporated solution (which we can certainly roll ourselves and submit as a patch), I've given the above solution to at least be able to exclude secret or unnecessary attributes from our models during serialization (at any level of the \"include\" hierarchy), and have just learned to live with possibly having too much information in my serialized data.\n", "created_at": "2011-05-16 02:54:36", "user": 789801, "id": 1168584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168585", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2009-12-11 19:09:29 UTC\n\nAh -- true that works -- I also found this plugin, http://github.com/vigetlabs/serialize_with_options, that seems to preserve the options of included associations; that is, if you use serialize_with_options { } for all your models in the includes.\n", "created_at": "2011-05-16 02:54:36", "user": 789801, "id": 1168585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168586", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 02:54:37", "user": 789801, "id": 1168586}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168587", "text": "_Imported from Lighthouse._\nComment by **kendall (at kendagriff)** - 2010-11-22 17:38:47 UTC\n\nAlso having this problem in Rails 3.0.3.\n", "created_at": "2011-05-16 02:54:37", "user": 789801, "id": 1168587}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168588", "text": "_Imported from Lighthouse._\nComment by **Alex Neth** - 2010-12-16 07:31:01 UTC\n\nBuilding a json api is a bit of a headache because of this bug.\n\nI tried to override as_json in each object class, but this only works when as_json/to_json is called directly on an object, not when it is included in another.\n\n@posts.as_json(:include => :author)\n\nincludes default author properties instead of using the as_json method.\n\nI ended up creating a static property on my objects and using that wherever necessary, which is in some ways a better solution anyway, since not every serialization will require the same attributes.\n", "created_at": "2011-05-16 02:54:37", "user": 789801, "id": 1168588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168589", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-17 00:00:12 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 02:54:37", "user": 789801, "id": 1168589}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168590", "text": "_Imported from Lighthouse._\nComment by **Betelgeuse** - 2011-03-17 08:00:12 UTC\n\nTested with rails 3.0.5 and still broken [state:open].\n\nin to_json model:\n\n```\n  def as_json(options = {})\n    options = {\n      :include => [:a, :b, :c],\n      :except => :a_id\n    }\n    super options\n  end\n```\n\na: belongs_to\nb: has_many :through\nc: has_many :through\n\nfor a, b, c:\n\n```\n  JSON_OPTIONS = {:only =>  [:id, :a] }\n\n  def as_json(options = {})\n    super JSON_OPTIONS\n  end\n```\n", "created_at": "2011-05-16 02:54:38", "user": 789801, "id": 1168590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168591", "text": "_Imported from Lighthouse._\nComment by **Betelgeuse** - 2011-03-17 08:00:53 UTC\n\n[state: open]\n", "created_at": "2011-05-16 02:54:38", "user": 789801, "id": 1168591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168592", "text": "_Imported from Lighthouse._\nComment by **Daniel** - 2011-03-18 13:25:09 UTC\n\nStill broken in 2.3.11 as well.\n", "created_at": "2011-05-16 02:54:38", "user": 789801, "id": 1168592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168593", "text": "_Imported from Lighthouse._\nComment by **Daniel** - 2011-03-18 13:28:13 UTC\n\n[state:open]\n", "created_at": "2011-05-16 02:54:39", "user": 789801, "id": 1168593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168594", "text": "Attachments saved to Gist: http://gist.github.com/969907\n", "created_at": "2011-05-16 02:55:23", "user": 789801, "id": 1168594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214178", "text": "This seems to fix it for me - https://gist.github.com/437968d6a5f9cbc93a8d\n\nIs this an acceptable solution? I can add some specs and send a pull request in case this is what is needed.\n", "created_at": "2011-05-21 11:24:45", "user": 66077, "id": 1214178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1594367", "text": "@prateekdayal Nice patch, though it would be better to modify the serializable_hash method in ActiveModel (instead of active record).\n", "created_at": "2011-07-18 11:02:05", "user": 122287, "id": 1594367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1632224", "text": "Has this been fixed? I'm still having the same exact problem in Rails 3.0.8.\n", "created_at": "2011-07-22 14:52:41", "user": 119154, "id": 1632224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1637097", "text": "I have just sent a pull request https://github.com/rails/rails/pull/2200\n", "created_at": "2011-07-23 10:47:07", "user": 66077, "id": 1637097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1655486", "text": "Still a problem in Rails 3.0.9. Thanks @prateekdayal for fixing this, would love to see it merged\n", "created_at": "2011-07-26 16:07:25", "user": 192021, "id": 1655486}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1670510", "text": "+1\n", "created_at": "2011-07-28 07:01:41", "user": 21961, "id": 1670510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1753098", "text": "+1\n", "created_at": "2011-08-08 10:39:34", "user": 194, "id": 1753098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1811067", "text": "I just noticed that if you use \"methods\" instead of \"include\" it will call the as_json method on the association.\n\n```\n# will not call the as_json method on MyModel instances\n@parent.to_json(:include => [ :mymodels ])\n\n# will call the as_json method on MyModel instances\n@parent.to_json(:methods => [:mymodels])\n```\n\nSo that's a quick way around the bug\n", "created_at": "2011-08-15 21:04:32", "user": 192021, "id": 1811067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1829076", "text": "I tried your workaround, runemadsen, but I couldn't get it to work. However,\nI did find another work-around that involves manually constructing the JSON\nrepresentation of each object in the as_json method.\n\nUser Model:\ndef as_json(options={})\n  {\n    :id => self.id,\n    :first_name => self.first_name,\n    :last_name => self.last_name,\n    :address => self.address\n  }\nend\n\nOrder Model:\ndef as_json(options={})\n  {\n    :id => self.id\n    :date => self.date,\n    :user => self.user\n  }\nend\n\nThe Order model will render the as_json method of the User model. It might\nbe a little tedious, but it does work nicely.\n\nLet's also say you need multiple JSON views within each object, so you want\nto hide the address for the User. Simple enough:\n\nUser Model:\ndef as_json(options={})\n  if options[:view] && options[:view] == \"address\"\n  {\n    :id => self.id,\n    :first_name => self.first_name,\n    :last_name => self.last_name,\n    :address => self.address\n  }\n  else\n  {\n    :id => self.id,\n    :first_name => self.first_name,\n    :last_name => self.last_name\n  }\nend\n\nAnd in the Orders model:\ndef as_json(options={})\n  {\n    :id => self.id\n    :date => self.date,\n    :user => self.user.as_json(:view => \"address\")\n  }\nend\n\nI'm sure there's a more elegant way to accomplish this (and one that doesn't\nbreak the MVC structure), but I just discovered this workaround and it's\nsuiting my needs.\n\nOn Mon, Aug 15, 2011 at 5:04 PM, runemadsen <\nreply@reply.github.com>wrote:\n\n> I just noticed that if you use \"methods\" instead of \"include\" it will call\n> the as_json method on the association.\n> \n> ```# will not call the as_json method on MyModel instances\n> @parent.to_json(:include => [ :mymodels ])\n> \n> # will call the as_json method on MyModel instances\n> \n> @parent.to_json(:methods => [:mymodels])\n> \n> So that's a quick way around the bug\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/576#issuecomment-1811067\n", "created_at": "2011-08-17 18:25:34", "user": 119154, "id": 1829076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1829710", "text": "@loudin Strange....\n\nAnyway, often I just end up with doing my own JSON implementation like you. But instead of overriding as_json, I create a to_hash method and then call to_json on the hash. This works really well with associations:\n\n```\nclass Parent\n  def to_hash\n    {\n      :name => name,\n      :children => children.map { |c| c.to_hash }\n    }\n  end\nend\n\nclass Child\n  def to_hash\n    {\n      :name => name\n    }\n  end\nend\n\n# to output json\n@parent.to_hash.to_json\n```\n", "created_at": "2011-08-17 19:32:13", "user": 192021, "id": 1829710}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2531513", "text": "+1\n", "created_at": "2011-10-26 15:14:47", "user": 458253, "id": 2531513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3040910", "text": "As of Rails 3.1, I still see serialization issues and had to do the custom hash method proposed above.  I'm assuming this just hasn't been looked at in a while but I'm happy to dive into details and/or help fix if any contributor wants to work through it\n", "created_at": "2011-12-06 23:44:06", "user": 46859, "id": 3040910}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3130869", "text": "I have found out we have an open pull request to fix that issue: https://github.com/rails/rails/pull/2200\n", "created_at": "2011-12-13 21:57:46", "user": 967155, "id": 3130869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10990295", "text": "This is still a problem as of Rails 3.2.8.\n", "created_at": "2012-12-04 09:47:55", "user": 5064, "id": 10990295}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12931915", "text": "I can confirm it on 3.2.11\n", "created_at": "2013-01-31 08:11:50", "user": 180154, "id": 12931915}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13770741", "text": "Still open in Rails 3.2.12\n", "created_at": "2013-02-19 12:48:14", "user": 659941, "id": 13770741}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17607964", "text": "same in 3.2.13\n", "created_at": "2013-05-08 14:08:46", "user": 875141, "id": 17607964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19562752", "text": "still happens in rails-4.0.0-rc1\n", "created_at": "2013-06-17 18:01:50", "user": 689198, "id": 19562752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20414573", "text": "Will this ever be fixed?\n", "created_at": "2013-07-03 13:20:33", "user": 66613, "id": 20414573}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20418181", "text": "Actually, reading the source, I don't think this is a bug, it is simply not supposed to work that way. I think that the model is just that, and overriding the `as_json` method to only show selected attributes is placing view logic (as the most common use of json representations is to \"view\" the model elsewhere) on the model (which MVC is against). The correct way of doing this, from what I understood from the source, is: \n\n```\nobject.to_json({\n  only: [:first_name, :last_name],\n  include: [\n    children: {only: [:age, :count]}\n  ]\n})\n```\n\nwhich, IMHO, is controller/view logic.\n", "created_at": "2013-07-03 14:18:40", "user": 689198, "id": 20418181}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/690\nCreated by **Christian Nolte** - 2011-02-19 09:28:23 UTC\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nI use the apache proxy to forward traffic to mongrel. The apache has\nmod_security enabled and since I made an update to Rails 2.1.0\nmod_security blocks access with the following message:\n\n[24/Jul/2008:16:13:36 +0200]\n[myhost/sid#988eef8][rid#a29a550][/myapp/][1] Access denied with code\n400 (phase 2). Pattern match \"%0[ad]\" at REQUEST_HEADERS:Cookie. [id\n\"950910\"] [msg \"HTTP Response Spli\ntting Attack. Matched signature <%0a>\"] [severity \"ALERT\"]\n\nI don't know what exactly is causing this. I am using\nrestful_authentication.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.7 (GNU/Linux)\nComment: Using GnuPG with Fedora - http://enigmail.mozdev.org\n\niD8DBQFIiJUVCNjA0nfhW7wRApu8AKDk9LU37uOpdogLGcnjJM+PG8r+qQCgl48P\nVMDMiC0VZpXzAW5OOwyc+LE=\n=NIF1\n-----END PGP SIGNATURE-----\n", "labels": [], "number": 577, "updated_at": "2011-05-21 15:11:45", "user": 789801, "closed_at": "2011-05-21 15:11:45", "id": 904152, "title": "Rails 2.1.0: mod_security reports a Response Splitting Attack", "url": "https://api.github.com/repos/rails/rails/issues/577", "created_at": "2011-05-16 02:55:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168595", "text": "_Imported from Lighthouse._\nComment by **Daniel Tsadok** - 2008-10-06 22:56:39 UTC\n\nI have the exact same issue - it seems to be related to the way Rails handles its cookies, particularly CRLF's: http://en.wikipedia.org/wiki/HTTP_response_splitting\n\nSo could this be a security issue in Rails?  The Wikipedia page suggests URL-encoding the cookies...\n\n(I'm not a security expert - I just want to get my app to work with mod_security. What I wrote above is simply what I've gathered from a bit of research)\n", "created_at": "2011-05-16 02:55:26", "user": 789801, "id": 1168595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168596", "text": "_Imported from Lighthouse._\nComment by **Ryan Stenhouse** - 2008-10-29 13:42:20 UTC\n\nThis issue is still present. For time time being, switching to using the Active Record session store is a viable work around - however something as serious as this does need to be addressed.\n\nSpecific issue:\n\nMessage: Access denied with code 400 (phase 2). Pattern match \"%0[ad]\" at REQUEST_HEADERS:Cookie. [id \"950910\"] [msg \"HTTP Response Splitting Attack. Matched signature <%0a>\"] [severity \"ALERT\"]\n\nWhile the CRs and LFs in the response body are being properly URI-Encoded (%0A), it is still enough to trigger the alert from mod_security. I for one am certainly not going to turn off part of mod_security's protection for my application although I'm sure mod_security could be tweaked to be more lenient for the requests being sent from Apache to Mongrel. \n\nOne solution would be to cease using the Cookie Session Store as the default and reverting back to the old database driven approach, especially since this is a security issue (albeit a minor one).\n", "created_at": "2011-05-16 02:55:26", "user": 789801, "id": 1168596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168597", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2009-03-13 11:00:24 UTC\n\nAny idea koz ?\n", "created_at": "2011-05-16 02:55:26", "user": 789801, "id": 1168597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168598", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-04-12 07:55:23 UTC\n\nKoz, any idea?\n", "created_at": "2011-05-16 02:55:27", "user": 789801, "id": 1168598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168599", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 02:55:27", "user": 789801, "id": 1168599}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168600", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:53:27 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 02:55:27", "user": 789801, "id": 1168600}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/873\nCreated by **shuber** - 2008-08-20 19:26:16 UTC\n\nvalidates_inclusion_of and validates_exclusion_of should also be able to accept a symbol representing an instance method or a proc that returns an enumerable object as the :in or :within option.\n\nExample\n\n``` ruby\nclass Page < ActiveRecord::Base\n  acts_as_tree\n  validates_exclusion_of :parent, :in => :self_and_all_children\n  # or\n  validates_exclusion_of :parent_id, :in => Proc.new { |page| page.self_and_all_children.collect(&:id) }\n\n  def self_and_all_children\n    self.children.inject([self]) { |array, child| array += child.self_and_all_children }\n  end\nend\n```\n\nAttached is a patch that adds this behavior to the validation methods in ActiveRecord and ActiveModel. I didn't see any tests for validations in ActiveModel, so I just added the tests for ActiveRecord.\n", "labels": [], "number": 578, "updated_at": "2011-05-21 15:11:46", "user": 789801, "closed_at": "2011-05-21 15:11:46", "id": 904153, "title": "validates_inclusion/exclusion_of should also accept a symbol or proc as the :in/:within option", "url": "https://api.github.com/repos/rails/rails/issues/578", "created_at": "2011-05-16 02:55:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168601", "text": "_Imported from Lighthouse._\nComment by **Chris Cherry** - 2008-08-20 21:32:10 UTC\n\n+1\n\nThis seems like a very useful addition, in fact I'm kinda surprised its not there already. The example he gives above is a pretty good demonstration of where it could be applied, checking for the existence of the value of the parent_id attribute in a dynamic set.\n\nTests relating to this change pass.\n", "created_at": "2011-05-16 02:55:29", "user": 789801, "id": 1168601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168602", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2008-08-21 10:25:42 UTC\n\nI like this as well. A few changes before it can be pushed :\n- Missing ActiveModel tests\n- Missing tests for validates_exclusion_of\n- I don't like 'case enum.class.to_s'. It should just use 'case enum'\n", "created_at": "2011-05-16 02:55:29", "user": 789801, "id": 1168602}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168603", "text": "_Imported from Lighthouse._\nComment by **shuber** - 2008-08-21 17:13:47 UTC\n\nUpdated patch -  uses 'case enum' instead of 'case enum.class.to_s'\n", "created_at": "2011-05-16 02:55:30", "user": 789801, "id": 1168603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168605", "text": "_Imported from Lighthouse._\nComment by **Stephan Kaag** - 2010-01-11 12:33:55 UTC\n\n+1\n", "created_at": "2011-05-16 02:55:30", "user": 789801, "id": 1168605}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168606", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:34 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 02:55:31", "user": 789801, "id": 1168606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168607", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-07-04 02:09:21 UTC\n\nAny updates here?\n", "created_at": "2011-05-16 02:55:31", "user": 789801, "id": 1168607}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168608", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 17:01:05 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 02:55:32", "user": 789801, "id": 1168608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168609", "text": "_Imported from Lighthouse._\nComment by **pmontrasio** - 2011-04-25 16:24:40 UTC\n\nIt seems that shuber's patch didn't make it into Rails 3. Too bad because I was looking for a way to validate against some dynamic value. I'll fall back to writing a custom validator but it takes more code to do that.\n", "created_at": "2011-05-16 02:55:32", "user": 789801, "id": 1168609}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168610", "text": "_Imported from Lighthouse._\nComment by **pmontrasio** - 2011-04-26 06:48:37 UTC\n\n[state:open]\n", "created_at": "2011-05-16 02:55:33", "user": 789801, "id": 1168610}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168611", "text": "Attachments saved to Gist: http://gist.github.com/969909\n", "created_at": "2011-05-16 02:55:33", "user": 789801, "id": 1168611}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/941\nCreated by **science** - 2011-02-17 08:07:21 UTC\n\nSynopsis: The postgressql-adapter create_datbase function does a reverse_merge on the database options - trying to set a _default_ value of \"utf8\" - however the incoming keys are all strings and the adapter sets a symbol ':encoding' which results in utf8 being used in all cases.\n\nThis is causing problems for me after upgrading to v2.1 b/c when the test database is recreated it is created as 'utf8' format which is incorrect for my situation.\n\nAnalysis: Line 490 in file 'active-record-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb' is currently:\n\n< options = options.reverse_merge(:encoding => \"utf8\")\n\nIt should be changed to be:\n\n> options = options.reverse_merge('encoding' => \"utf8\")\n\nOr the keys should be locally symbolized before messing with them (they are currently symbolized just after this line!).\n\nI'm sorry I'm not able to submit a patch - I don't use git yet (I just got to the point where I could submit patches in SVN and now git!) [smile]\n\nI hope this bug report is sufficient - I think this is a very easy / low impact thing to fix. Contact me anytime with questions.\n\nI think this bug will break any postgresql user who isn't using a utf8 database and who has tests which fail if utf8 is the format of the test database.\n", "labels": [], "number": 579, "updated_at": "2011-05-21 15:11:46", "user": 789801, "closed_at": "2011-05-21 15:11:46", "id": 904154, "title": "Postgres ActiveRecord adapter merges UTF8 encoding as symbol instead of string in create_database", "url": "https://api.github.com/repos/rails/rails/issues/579", "created_at": "2011-05-16 02:55:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168612", "text": "_Imported from Lighthouse._\nComment by **science** - 2008-08-30 07:25:46 UTC\n\nThere is a related ticket to this one: http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/940-databasesrake-does-not-find-encoding-var-correctly#ticket-940-4\n\nIn order to fix both problems, I _think_ the following monkey patch does the trick. However, I have the patch from the other ticket and this one running in the environment.rb file (after the regular Initializer section runs):\n\n```\nclass ActiveRecord::ConnectionAdapters::PostgreSQLAdapter\n  old_create_database = self.instance_method(:create_database)\n  define_method(:create_database) do |name, *args|\n    args[0] = (args[0] || {}).symbolize_keys\n    old_create_database.bind(self).call(name, *args)\n  end\nend\n```\n", "created_at": "2011-05-16 02:55:35", "user": 789801, "id": 1168612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168613", "text": "_Imported from Lighthouse._\nComment by **science** - 2008-08-30 07:27:04 UTC\n\nNote - from my last comment, it sounds like I'm not sure that the above patch works - it is working for me. What's not clear is that it effectively fixes both tickets. It definitely corrects the defect described in this ticket.\n", "created_at": "2011-05-16 02:55:35", "user": 789801, "id": 1168613}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168614", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2008-12-20 17:13:27 UTC\n\nCould you please submit a patch + failing test case - http://rails.lighthouseapp.com/projects/8994/sending-patches ?\n\nThanks!\n", "created_at": "2011-05-16 02:55:35", "user": 789801, "id": 1168614}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168615", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-04-10 07:56:31 UTC\n\nscience, how's your git now? Please submit a patch if you could.\n", "created_at": "2011-05-16 02:55:36", "user": 789801, "id": 1168615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168616", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:34 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 02:55:36", "user": 789801, "id": 1168616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168617", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:54:07 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 02:55:36", "user": 789801, "id": 1168617}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/950\nCreated by **Eloy Duran** - 2011-02-17 06:48:09 UTC\n\nThis is our AttributeDecorator plugin (http://github.com/Fingertips/attribute-decorator/tree/master) turned into a patch, as was discussed on rails-core the last week. See the comments by Manfred and me for more in depth info on the rational: http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4e6b7d035603da08 \n\nIt allows you to add reader and writer methods decorating one or more attributes\non an ActiveRecord model. It's comparable to composed_of, but has a much\nmore concise implementation and a lot less confusing configuration options.\n\nFrom the documentation:\n\n``` ruby\nclass CompositeDate\n  attr_accessor :day, :month, :year\n\n  # Gets the value from Artist#date_of_birth= and will return a CompositeDate instance with the :day, :month and :year attributes set.\n  def self.parse(value)\n    day, month, year = value.scan(/(\\d+)-(\\d+)-(\\d{4})/).flatten.map { |x| x.to_i }\n    new(day, month, year)\n  end\n\n  # Notice that the order of arguments is the same as specified with the :decorates option.\n  def initialize(day, month, year)\n    @day, @month, @year = day, month, year\n  end\n\n  # Here we return the parsed values in the same order as specified with the :decorates option.\n  def to_a\n    [@day, @month, @year]\n  end\n\n  # Here we return a string representation of the value, this will for instance be used by the form helpers.\n  def to_s\n    \"#{@day}-#{@month}-#{@year}\"\n  end\n\n  # Returns wether or not this CompositeDate instance is valid.\n  def valid?\n    @day != 0 && @month != 0 && @year != 0\n  end\nend\n\nclass Artist < ActiveRecord::Base\n  attribute_decorator :date_of_birth, :class => CompositeDate, :decorates => [:day, :month, :year]\n  validates_decorator :date_of_birth, :message => 'is not a valid date'\nend\n\n# Option examples:\nattribute_decorator :date_of_birth, :class => CompositeDate, :decorates => [:day, :month, :year]\nattribute_decorator :gps_location, :class_name => 'GPSCoordinator', :decorates => :location\nattribute_decorator :balance, :class_name => 'Money'\nattribute_decorator :english_date_of_birth, :class => (Class.new(CompositeDate) do\n  # This is a anonymous subclass of CompositeDate that supports the date in English order\n  def to_s\n    \"#{@month}/#{@day}/#{@year}\"\n  end\n\n  def self.parse(value)\n    month, day, year = value.scan(/(\\d+)\\/(\\d+)\\/(\\d{4})/).flatten.map { |x| x.to_i }\n    new(day, month, year)\n  end\nend)\n```\n\nThe patch also deprecates composed_of and a small refactor of code I came across in activerecord/lib/active_record/reflection.rb.\n\nEloy\n", "labels": [], "number": 580, "updated_at": "2011-05-21 15:11:46", "user": 789801, "closed_at": "2011-05-21 15:11:46", "id": 904155, "title": "AttributeDecorator, a new take on aggregation.", "url": "https://api.github.com/repos/rails/rails/issues/580", "created_at": "2011-05-16 02:55:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168618", "text": "_Imported from Lighthouse._\nComment by **Joel** - 2008-11-17 11:27:14 UTC\n\nThis looks pretty neat, will this trigger changed? on the attribute (which composed_of does not seem to do atm)\n", "created_at": "2011-05-16 02:55:38", "user": 789801, "id": 1168618}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168619", "text": "_Imported from Lighthouse._\nComment by **Joel** - 2008-11-17 16:01:03 UTC\n\nsigh ignore my comment ^^\n", "created_at": "2011-05-16 02:55:38", "user": 789801, "id": 1168619}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168620", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2008-11-17 19:29:14 UTC\n\nUpdated the patch for current HEAD.\n\n@Joel: I assume you found out that it does in fact trigger the \"dirty\" status?\n", "created_at": "2011-05-16 02:55:39", "user": 789801, "id": 1168620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168621", "text": "_Imported from Lighthouse._\nComment by **Joel** - 2008-11-18 04:09:48 UTC\n\nIndeed I did.\n\nI had missed a commit of a plugin that busted it tho =)\n", "created_at": "2011-05-16 02:55:39", "user": 789801, "id": 1168621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168622", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2008-12-05 12:26:28 UTC\n\nUpdated for current HEAD\n", "created_at": "2011-05-16 02:55:39", "user": 789801, "id": 1168622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168623", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2008-12-05 12:26:48 UTC\n\nAnd this time with a patch :-)\n", "created_at": "2011-05-16 02:55:40", "user": 789801, "id": 1168623}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168624", "text": "_Imported from Lighthouse._\nComment by **Pascal Ehlert** - 2008-12-08 08:34:39 UTC\n\nIn the example above, you say .to_s is for form helpers.\n\nI couldn't check it out, yet, but is that true?\nThe problem I've always had with my own solution to this problem is that form helpers were actually using attribute_before_typecast for reasons I never fully understood so that all formatting was gone.\n\nAnyway, this looks nice and much more sophisticated than the existing solution so +1 for the patch.\n", "created_at": "2011-05-16 02:55:40", "user": 789801, "id": 1168624}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168625", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2008-12-08 09:00:07 UTC\n\n@Pascal: You are right, so there is indeed an implementation of the foo_before_type_cast method (where `foo' is the decorator), which calls the #to_s method on the decorator instance to get the value for the form field.\n", "created_at": "2011-05-16 02:55:41", "user": 789801, "id": 1168625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168626", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2008-12-08 20:33:26 UTC\n\nNice! The API feels a bit wordy, though, like a specification rather than a declaration.\n\nConsider\n\n```\nattribute_decorator :date_of_birth, :class => CompositeDate, :decorates => [:day, :month, :year]\n```\n\nversus\n\n```\ncompose :date_of_birth, :of => [:day, :month, :year], :as => CompositeDate\n```\n\nor\n\n```\nview :date_of_birth, :as => ComposedDateAttribute.new(:day, :month, :year)\n```\n", "created_at": "2011-05-16 02:55:42", "user": 789801, "id": 1168626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168627", "text": "_Imported from Lighthouse._\nComment by **Manfred Stienstra** - 2008-12-09 10:34:19 UTC\n\nJeremy, your compose example doesn't read really well when you're decorating one attribute. I guess we can meet halfway? How about this:\n\n``` ruby\nclass Artist < ActiveRecord::Base\n  view :location, :as => Location, :decorating => :gps_location\n  view :date_of_birth, :as => CompositeDate, :decorating => [:day, :month, :year]\n\n  validate_view :location\n  validate_view :date_of_birth, :message => 'is not a valid date'\nend\n```\n", "created_at": "2011-05-16 02:55:43", "user": 789801, "id": 1168627}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168629", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2008-12-10 20:48:44 UTC\n\nUpdated the API according to what Manfred suggested, did some cleaning and updated for edge.\n", "created_at": "2011-05-16 02:55:43", "user": 789801, "id": 1168629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168630", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2008-12-10 21:03:45 UTC\n\nForgot to update a deprecation warning for composed_of.\n", "created_at": "2011-05-16 02:55:44", "user": 789801, "id": 1168630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168631", "text": "_Imported from Lighthouse._\nComment by **Brennan Dunn** - 2008-12-10 22:42:38 UTC\n\nWhat about aiming toward something a bit more like this plugin I recently wrote: http://github.com/brennandunn/attribute_assembler/tree/master\n\nThe reason being is that I think, for the purpose of adding helper functionality to attributes, the extension model implemented by AR's association proxy/named_scope is more concise and easy to work with.\n\nExample:\n\n``` ruby\n  class Person < ActiveRecord::Base\n\n    with_attribute :name do\n\n      def has_middle_name?\n        self.split(' ').size == 3\n      end\n\n      def surname\n        self.split(' ').last\n      end\n\n    end\n\n  end\n\n  @person = Person.create :name => 'John C. Doe'\n\n  @person.name.has_middle_name?  # => true\n  @person.name.surname           # => \"Doe\"\n\n  # and of course, \n  @person.name                   # => \"John C. Doe\"\n\n```\n\nThoughts?\n", "created_at": "2011-05-16 02:55:44", "user": 789801, "id": 1168631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168632", "text": "_Imported from Lighthouse._\nComment by **Manfred Stienstra** - 2008-12-11 14:49:23 UTC\n\nYesterday, we were talking to Jeremy on IRC and I promised to show some examples of how the API would function.\n\nIn short, we're trying to find a way to compose attributes on an ActiveRecord class in such a way that it supports:\n1. Conversions: Attributes <=> Value object <=> Form data\n2. Validation\n\nJeremy raised two problems: using existing classes and assigning instances through the attribute writer. Basically the following:\n\n``` ruby\nclass Artist < ActiveRecord::Base\n  view :date_of_birth, :as => DateDecorator, :decorating => [:day, :month, :year]\nend\n\nartist = Artist.new(:date_of_birth => '24-05-1980')\nartist.date_of_birth += 10.days\n```\n\nFrom what I understand he thought that meant changing the API slightly and have an object do all the conversions:\n\n``` ruby\nview :date_of_birth, :as => ComposedDateAttribute.new(:day, :month, :year)\n```\n\nThe conversion class could look something like this:\n\n``` ruby\nclass ComposedDateAttribute\n  attr_accessor :attributes\n\n  def initialize(*attributes)\n    @attributes = attributes.flatten\n  end\n\n  # Attributes => Value object\n  def instantiate(record)\n    Date.new(*attributes.reverse.map { |attribute| record.send(attribute) })\n  end\n\n  # Value object => Form data\n  def form_value(date)\n    date.strftime(\"%Y-%m-%d\")\n  end\n\n  # Form data => Value object\n  def parse(string)\n    Date.parse(string)\n  end\n\n  # Value object => Attributes\n  def attributes(date)\n    [date.year, date.month, date.day]\n  end\n\n  # Validation\n  def valid?(string)\n    string =~ /\\d{4}-\\d{2}-\\d{2}/\n  end\nend\n```\n\nThe upside is that you get an _actual_ Date object, the downside is that it looks like crap and becomes even weirder if you want to use the same class as the value object. Maybe I misunderstood Jeremy's intentions?\n\nAs far as I can see this can be solved with the current implementation:\n\n``` ruby\nclass DateDecorator < Date\n\n  # Attributes => Value object\n  def initialize(day, month, year)\n    super(year, month, day)\n  end\n\n  # Value object => Form data\n  def to_s\n    strftime(\"%Y-%m-%d\")\n  end\n\n  # Form data => Value object\n  def self.parse(value)\n    case value\n    when Date\n      new(value.day, value.month, value.year)\n    when CompositeDate\n      value\n    else # Assume it's a String\n      day, month, year = value.scan(/(\\d\\d)-(\\d\\d)-(\\d{4})/).flatten.map { |x| x.to_i }\n      new(day, month, year)\n    end\n  end\n\n  # Value object => Attributes\n  def to_a\n    [day, month, year]\n  end\n\n  # Validation\n  def valid?\n    day != 0 && month != 0 && year != 0\n  end\nend\n```\n\nThe upside of this solution is that the class makes sense: it's an actual decorator. The downside is that strict class checking code might break. I guess the method names should change to be more expressive so this use case makes more sense.\n\nFinally, Jeremy says that he \"[doesn't] think it should be the value object's responsibility to understand how it's composed from the database.\" I completely agree, that's why we use a decorator object to sit 'around' the value object to facilitate the conversions.\n", "created_at": "2011-05-16 02:55:45", "user": 789801, "id": 1168632}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168633", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2008-12-11 21:45:22 UTC\n\nCombining the value object and it's parse/dump behavior is more confusing to me. It's a poor separation of concerns that makes working with existing classes cumbersome.\n\nI suggest\n\n``` ruby\nclass ComposedDateView\n  def initialize(year, month, day) @y, @m, @d = year, month, day end\n\n  def load(record)\n    Date.new(record.send(@y), record.send(@m), record.send(@d))\n  end\n\n  def parse(string)\n    Date.parse(string)\n  end\n\n  def dump(date)\n    { @y => date.year, @m => date.month, @d => date.day }\n  end\nend\n```\n\nThen we can do nice things like share attribute types as plugins, subclass composers to change behavior without having to change the value object code, and refactor YAML serialization as a view.\n\nThe form value and validation stuff aren't really necessary. We can already handle that with ValueObject#to_s and existing model validations.\n", "created_at": "2011-05-16 02:55:46", "user": 789801, "id": 1168633}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168634", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2008-12-11 21:53:31 UTC\n\nYAML example:\n\n``` ruby\nclass YamlView\n  def initialize(attr) @attr = attr end\n\n  def load(record)\n    parse(record.send(@attr))\n  end\n\n  def parse(string)\n    YAML.load(string) if string\n  end\n\n  def dump(object)\n    { @attr => is_yaml?(object) ? object : YAML.dump(object) }\n  end\n\n  protected\n    def is_yaml?(object)\n      object.is_a?(String) && object =~ /\\A---/\n    end\nend\n```\n", "created_at": "2011-05-16 02:55:46", "user": 789801, "id": 1168634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168635", "text": "_Imported from Lighthouse._\nComment by **Manfred Stienstra** - 2008-12-12 10:41:27 UTC\n\nI have to admit, when you limit the responsibility of the view class to just loading, parsing, and dumping it looks ok.\n\nI don't agree on the ValueObject#to_s thing though, form helpers currently use `#{attribute_name}_before_type_cast` on the record instead of `to_s` to get the value to put back into the form on validation errors. So that still has to be addressed somehow.\n\nIf you like, I can set up an example project to explore your proposal.\n", "created_at": "2011-05-16 02:55:47", "user": 789801, "id": 1168635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168636", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2008-12-13 11:02:12 UTC\n\n@Manfred: I think that'd be a good idea. Maybe include our real use case that it all was based on?\n", "created_at": "2011-05-16 02:55:47", "user": 789801, "id": 1168636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168637", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-02-01 02:04:32 UTC\n\nRemoving from 2.3, I'd still like to get this in but we're close enough now that this shouldn't be 'blocking'\n\nAssigning to jeremy\n", "created_at": "2011-05-16 02:55:47", "user": 789801, "id": 1168637}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168638", "text": "_Imported from Lighthouse._\nComment by **Manfred Stienstra** - 2009-05-26 10:33:13 UTC\n\nI've been working on this again as part of a new application. I've been abstracting some of the composed, formatted and decorated attribute accessors. Now I basically do the following:\n\n``` ruby\nviews :fee, :as => Fee.new(:fee_in_cents)\n```\n\n``` ruby\nclass Fee < ActiveRecord::AttributeView\n  def load(fee_in_cents)\n    if fee_in_cents.blank? or fee_in_cents.zero?\n      ''\n    elsif (fee_in_cents % 100).zero?\n      \"%d\" % (fee_in_cents / 100)\n    else\n      \"%.2f\" % (fee_in_cents / 100.0)\n    end\n  end\n\n  def parse(input)\n    return nil if input.blank?\n\n    input = input.gsub(/[^\\.^\\,^\\d]/, '')\n    whole, cents = input.split(/\\,|\\./)\n    (whole.to_i * 100) + cents.to_i\n  end\nend\n```\n\nI've solved the problem with forms and before_type_cast. I'm considering a few things now:\n1. Should we add a format method to the view so you also get a formatted_fee accessor?\n2. Should we allow people to specify which accessors get defined (ie. :only_define => [:getter, :formatter])\n\nCurrent implementation on: http://gist.github.com/118033\n", "created_at": "2011-05-16 02:55:48", "user": 789801, "id": 1168638}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168639", "text": "_Imported from Lighthouse._\nComment by **Chris Hapgood** - 2009-06-25 16:11:30 UTC\n\nManfred's example feels like a natural evolution in Rails.  Jeremy hits the key point: it factors out the view behavior into a kind of Presenter, but since it also accommodates reversing the Presenter (to parse input) it might be called an attribute agent.  It could allow much of the existing composed_of behavior to remain since the construction of value objects from DB attributes is orthogonal to view behavior (although the :converter option might be merged into these attribute agents).\n\nOnce you've added support for these agents, why not take the next step and instantiate simple agents for EVERY model attribute and eliminate the troublesome call to <attrbute>_before_type_cast by the AR form helper altogether?  My impression is that <attrbute>_before_type_cast has become the de facto presenter for AR attributes and it doesn't feel right.\n\nYou would also expose an ideal entry point for i18n (parsing/presenting of dates, times, floats, etc.).\n", "created_at": "2011-05-16 02:55:48", "user": 789801, "id": 1168639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168640", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-06-26 05:11:25 UTC\n\nI can't see a reason to allow configuration for the different methods to be defined.  If they really care you can always either override them after the fact or undef_method if you want to lose them.\n", "created_at": "2011-05-16 02:55:49", "user": 789801, "id": 1168640}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168641", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 20:45:32 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 02:55:49", "user": 789801, "id": 1168641}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168642", "text": "Attachments saved to Gist: http://gist.github.com/969910\n", "created_at": "2011-05-16 02:55:50", "user": 789801, "id": 1168642}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1117\nCreated by **Victor Costan** - 2011-02-17 07:38:07 UTC\n\nI have a serialized field. In my migration, I use the type :binary for the column. This works fine on mysql, but raises the following on sqlite3:\n    NoMethodError: private method `gsub' called for #<Facebooker::User:0x1fe8fac>\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/connection_adapters/sqlite_adapter.rb:58:in`binary_to_string'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/connection_adapters/abstract/schema_definitions.rb:69:in `type_cast'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/dirty.rb:157:in`field_changed?'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/dirty.rb:131:in `write_attribute'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/attribute_methods.rb:211:in`facebooker_user='\n\nDiagnostic attempt: \nThe problem is that type_cast should not be called in the first place. The method's comment says that its arg should be a string, which won't be the case if the field is serialized.\nThis issue is masked if the column's type is string, because type_cast simply returns its arg. binary_to_string also returns its arg by default, but the sqlite adapter overrides that behavior.\nI think the solution is having a different field_changed? for serialized fields, or \n\nSadly, I don't have enough bandwidth to look further into this. I'll switch my field to a string in my deployment. I hope someone else does, though.\n\nThanks!\n    Victor\n", "labels": [], "number": 581, "updated_at": "2011-05-21 15:11:46", "user": 789801, "closed_at": "2011-05-21 15:11:46", "id": 904160, "title": "Serialized fields + sqlite :binary columns = exception", "url": "https://api.github.com/repos/rails/rails/issues/581", "created_at": "2011-05-16 02:57:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168645", "text": "_Imported from Lighthouse._\nComment by **Victor Costan** - 2008-09-26 07:13:54 UTC\n\nMore debugging:\n\nI first tried to fix the error in dirty.rb, by replacing field_changed? with the following:\n      def field_changed?(attr, old, value)\n        if column = column_for_attribute(attr)\n          if column.type == :integer && column.null && (old.nil? || old == 0)\n            # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.\n            # Hence we don't record it as a change if the value changes from nil to ''.\n            # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll\n            # be typecast back to 0 (''.to_i => 0)\n            value = nil if value.blank?\n          else\n            if self.class.serialized_attributes.has_key? attr\n              # nothing to do for serialized attributes\n              value = value\n            else\n              value = column.type_cast(value)\n            end\n          end\n        end\n\n```\n    old != value\n  end    \n```\n\nThis fixed writing, but reading still breaks with the following:\n    NoMethodError: private method `gsub' called for #<Facebooker::User:0x2019544>\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/connection_adapters/sqlite_adapter.rb:58:in`binary_to_string'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/connection_adapters/abstract/schema_definitions.rb:69:in `type_cast'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/attribute_methods.rb:269:in`read_attribute'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/base.rb:2587:in `attributes_with_quotes'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/base.rb:2585:in`each'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/base.rb:2585:in `attributes_with_quotes'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/base.rb:2507:in`create_without_callbacks'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/callbacks.rb:220:in `create_without_timestamps'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/timestamp.rb:29:in`create'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/base.rb:2483:in `create_or_update_without_callbacks'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/callbacks.rb:207:in`create_or_update'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/base.rb:2217:in `save_without_validation!'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/validations.rb:921:in`save_without_dirty!'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/dirty.rb:83:in `save_without_transactions!'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/transactions.rb:110:in`save!'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/connection_adapters/abstract/database_statements.rb:66:in `transaction'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/transactions.rb:79:in`transaction'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/transactions.rb:98:in `transaction'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/transactions.rb:110:in`save!'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/transactions.rb:118:in `rollback_active_record_state!'\n    /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/lib/active_record/transactions.rb:110:in`save!'\n\nHowever, the following quick fix in the SQLite adapter (lib/active_record/connection_adapters/sqlite_adapter.rb:31) works:\n\n```\n    def binary_to_string(value)\n      return value unless value.kind_of? String\n      value.gsub(/%00|%25/n) do |b|\n        case b\n          when \"%00\" then \"\\0\"\n          when \"%25\" then \"%\"\n        end\n      end\n    end\n```\n\nThis is not a proper fix, it just makes the adapter mask the error, like the other adapters. But it works(tm).\n", "created_at": "2011-05-16 02:57:25", "user": 789801, "id": 1168645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168646", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2009-01-18 06:55:57 UTC\n\nMaybe you could submit failing tests.\n\nThanks.\n", "created_at": "2011-05-16 02:57:26", "user": 789801, "id": 1168646}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168647", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-04-10 10:25:13 UTC\n\nOr even a concise example of how to duplicate the bug would be good.\n", "created_at": "2011-05-16 02:57:26", "user": 789801, "id": 1168647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168648", "text": "_Imported from Lighthouse._\nComment by **Victor Costan** - 2010-04-21 04:51:42 UTC\n\nWith the help of Boston.rb (especially Dan Pickett), I put together a failing test. The patch applies cleanly to both master and 2.3-stable.\n\nThe test passes for MySQL and PostgreSQL. On SQLite3, the test crashes ruby-1.8.7-p249 on Rails 3, and on 2-3-stable it raises the exception mentioned in the bug report.\n\nThanks.\n", "created_at": "2011-05-16 02:57:26", "user": 789801, "id": 1168648}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168649", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:35 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 02:57:27", "user": 789801, "id": 1168649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168650", "text": "Attachments saved to Gist: http://gist.github.com/969911\n", "created_at": "2011-05-16 02:57:27", "user": 789801, "id": 1168650}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1210\nCreated by **Gaius Centus Novus** - 2008-10-14 17:04:29 UTC\n\n1: set `config.active_record.table_name_prefix = 'pfx_'` in `/config/environment.rb`\n\n2: create some migrations.  For example:\n\n``` ruby\n    create_table :blogs do |t|\n      t.string  :name\n      t.timestamps\n    end\n```\n\n3: run `rake db:migrate`.  The generated schema is as follows:\n\n``` ruby\n    create_table \"pfx_blogs\", :force => true do |t|\n      t.string \"name\"\n      t.timestamps\n    end\n\n    create_table \"pfx_schema_migrations\", :primary_key => \"version\", :force => true do |t|\n    end\n\n    add_index \"pfx_schema_migrations\", [\"version\"], :name => \"unique_schema_migrations\", :unique => true\n```\n\n4: run `rake test`.  The tables created by `db:schema:load` are as follows:\n- pfx_schema_migrations\n- pfx_pfx_schema_migrations\n- pfx_pfx_blogs\n\nAdditionally, I don't know whether this is related, but under SQLite3, I get the following on `rake test` after a `rake db:migrate`:\n\n```\nSQLite3::SQLException: index unique_schema_migrations already exists: CREATE UNIQUE INDEX \"unique_schema_migrations\" ON \"pfx_schema_migrations\" (\"version\")\n```\n", "labels": [], "number": 582, "updated_at": "2012-01-02 12:12:42", "user": 789801, "closed_at": "2011-05-21 15:11:46", "id": 904161, "title": "table_name_prefix with db:schema:load causes double prefixes", "url": "https://api.github.com/repos/rails/rails/issues/582", "created_at": "2011-05-16 02:57:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168651", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2009-01-18 07:03:04 UTC\n\n#1543\n", "created_at": "2011-05-16 02:57:28", "user": 789801, "id": 1168651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168652", "text": "_Imported from Lighthouse._\nComment by **Ben Woosley** - 2010-07-01 22:00:15 UTC\n\nPratik, while his \"additionally\" note does describe #1543, the rest does not. I can confirm the duplicate prefix from db:test:prepare is a real problem on 2.3.5 at least.\n", "created_at": "2011-05-16 02:57:29", "user": 789801, "id": 1168652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168653", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:47 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 02:57:29", "user": 789801, "id": 1168653}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168654", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:28:26 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 02:57:29", "user": 789801, "id": 1168654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168655", "text": "_Imported from Lighthouse._\nComment by **DLitz** - 2010-12-20 20:57:20 UTC\n\nThe problem is that the SchemaDumper isn't aware of table_name_(prefix|suffix).  The attached patch against Rails 2.3.10 fixes this issue.\n", "created_at": "2011-05-16 02:57:30", "user": 789801, "id": 1168655}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168656", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-21 00:00:15 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 02:57:30", "user": 789801, "id": 1168656}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168657", "text": "_Imported from Lighthouse._\nComment by **DLitz** - 2011-03-21 14:41:19 UTC\n\nThis is a bug against 2-3-stable, not 3-0-stable, and yes it still applies.\n", "created_at": "2011-05-16 02:57:30", "user": 789801, "id": 1168657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168658", "text": "_Imported from Lighthouse._\nComment by **DLitz** - 2011-03-21 14:41:43 UTC\n\n[state:open]\n", "created_at": "2011-05-16 02:57:31", "user": 789801, "id": 1168658}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168659", "text": "Attachments saved to Gist: http://gist.github.com/969912\n", "created_at": "2011-05-16 02:57:31", "user": 789801, "id": 1168659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3298288", "text": "[state:open]\nI am working on rails 3.1.3 and have table_prefix_name set to 'pfx_' in application.rb. \nWhen I run my tests the environment add table prefix two times because of that I am not able to run my test cases.\n\nSo please look into this issue as this is very critical.\n", "created_at": "2011-12-29 05:31:40", "user": 180597, "id": 3298288}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3298341", "text": "@ankitenggcom Can you please open up a new issue with the older reference.  and also if you can setup a sample on github to show issue.. will be great.\n", "created_at": "2011-12-29 05:48:59", "user": 3948, "id": 3298341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3329184", "text": "Done with adding new issue with id 4259.\n", "created_at": "2012-01-02 12:12:42", "user": 180597, "id": 3329184}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1334\nCreated by **duncanbeevers** - 2011-02-19 09:28:30 UTC\n\nIssuing a count calculation on a scope that explicitly specifies a select option does not respect that select, resulting in incorrect counts.\n", "labels": [], "number": 583, "updated_at": "2011-05-21 15:11:46", "user": 789801, "closed_at": "2011-05-21 15:11:46", "id": 904162, "title": "Count calculations should respect scoped selects", "url": "https://api.github.com/repos/rails/rails/issues/583", "created_at": "2011-05-16 02:57:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168660", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-03-07 15:55:06 UTC\n\n(from [6543426c73fa9ccf3649d7cbacbbb0fda9b6a099]) Ensure calculations respect scoped :select [#1334 state:resolved]\n\nSigned-off-by: Pratik Naik pratiknaik@gmail.com\nhttp://github.com/rails/rails/commit/6543426c73fa9ccf3649d7cbacbbb0fda9b6a099\n", "created_at": "2011-05-16 02:57:32", "user": 789801, "id": 1168660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168661", "text": "_Imported from Lighthouse._\nComment by **Mislav** - 2009-03-17 12:34:02 UTC\n\nThis breaks counts on scoped associations:\n\n``` ruby\nauthor.posts.count  # => works\nauthor.posts.scoped(:conditions => '1=1')  # => FAIL\n```\n", "created_at": "2011-05-16 02:57:33", "user": 789801, "id": 1168661}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168662", "text": "_Imported from Lighthouse._\nComment by **Mislav** - 2009-03-17 12:38:21 UTC\n\nUh, the second line in my example should have `count`, `size`, `empty?` or whatever method at the end to trigger a COUNT query.\n\nI also forgot to state the error message: Mysql::Error (bad syntax). There is a join (hmt association) and this SELECT part is generated:\n\n```\nSELECT count(`posts`.*) AS ...\n```\n\nThis is invalid SQL, it should be \"count(posts.id)\".\n", "created_at": "2011-05-16 02:57:33", "user": 789801, "id": 1168662}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168663", "text": "_Imported from Lighthouse._\nComment by **Ian Terrell** - 2009-03-17 15:51:12 UTC\n\nAttached is a patch that includes a failing test case.\n", "created_at": "2011-05-16 02:57:33", "user": 789801, "id": 1168663}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168664", "text": "_Imported from Lighthouse._\nComment by **Ian Terrell** - 2009-03-17 16:12:11 UTC\n\nThe previous attachment was just a \"git diff.\"  Attached is a properly formatted patchfile to add my failing test.\n", "created_at": "2011-05-16 02:57:34", "user": 789801, "id": 1168664}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168665", "text": "_Imported from Lighthouse._\nComment by **Ian Terrell** - 2009-03-17 16:20:18 UTC\n\nCrossed with Mike above.  Reassigning.\n", "created_at": "2011-05-16 02:57:34", "user": 789801, "id": 1168665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168666", "text": "_Imported from Lighthouse._\nComment by **Miha Filej** - 2009-03-18 17:34:54 UTC\n\nWorkaround: #2189\n", "created_at": "2011-05-16 02:57:35", "user": 789801, "id": 1168666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168667", "text": "_Imported from Lighthouse._\nComment by **Steven Soroka** - 2009-03-26 16:07:17 UTC\n\nthis patch caused a bug with scopes and has-many-through's, see card #2310\n", "created_at": "2011-05-16 02:57:36", "user": 789801, "id": 1168667}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168668", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-06-01 01:56:46 UTC\n\nI'm reverting this in 2-3-stable so we can have a point release.\n\nHowever I'm leaving this open and targetting 3.0 so we can try and fix the original bug.\n", "created_at": "2011-05-16 02:57:36", "user": 789801, "id": 1168668}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168669", "text": "_Imported from Lighthouse._\nComment by **Wolfram Arnold** - 2009-06-29 22:09:47 UTC\n\nI wrote up something similar in #1652\n\nIt was suggested to me to implement the :counter_sql option for named_scope instead.  ActiveRecord::Base#find supports that too.\n", "created_at": "2011-05-16 02:57:37", "user": 789801, "id": 1168669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168670", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:29 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 02:57:37", "user": 789801, "id": 1168670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168671", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:29 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 02:57:38", "user": 789801, "id": 1168671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168672", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:48 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 02:57:38", "user": 789801, "id": 1168672}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168673", "text": "_Imported from Lighthouse._\nComment by **David Cuddeback** - 2011-02-04 20:18:11 UTC\n\nI have a patch that fixes this for the `2-3-stable` branch.  I used the tests from Ian Terrell's patch and added one that addresses Mislav's comment.\n", "created_at": "2011-05-16 02:57:38", "user": 789801, "id": 1168673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168674", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 02:57:39", "user": 789801, "id": 1168674}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168675", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 02:57:39", "user": 789801, "id": 1168675}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168676", "text": "_Imported from Lighthouse._\nComment by **Jared McFarland** - 2011-04-14 23:45:07 UTC\n\nIs this ticket still open? I couldn't reproduce the bug in Rails 3.1\n", "created_at": "2011-05-16 02:57:39", "user": 789801, "id": 1168676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168677", "text": "Attachments saved to Gist: http://gist.github.com/969913\n", "created_at": "2011-05-16 02:57:39", "user": 789801, "id": 1168677}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1432\nCreated by **qoobaa** - 2011-02-17 08:07:21 UTC\n\nThis patch fixes standard behaviour of check_box_tag:\n\n```\n# check_box_tag 'eula', 'accepted', false, :disabled => true\n# #=> <input disabled=\"disabled\" id=\"eula\" name=\"eula\" type=\"checkbox\" value=\"accepted\" />\n```\n\nto:\n\n```\n# check_box_tag 'eula', 'accepted', false, :disabled => true\n# #=> <input disabled=\"disabled\" id=\"eula_accepted\" name=\"eula\" type=\"checkbox\" value=\"accepted\" />\n```\n\nNow it's possible to use check_box_tag with the same name multiple times. Additionally I've cleaned radio_button_tag to use sanitize_to_id.\n", "labels": [], "number": 584, "updated_at": "2011-05-21 15:11:46", "user": 789801, "closed_at": "2011-05-21 15:11:46", "id": 904163, "title": "check_box_tag should behave like radio_button_tag", "url": "https://api.github.com/repos/rails/rails/issues/584", "created_at": "2011-05-16 02:57:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168679", "text": "_Imported from Lighthouse._\nComment by **Jacek Becela** - 2008-11-24 19:06:17 UTC\n\n+1. Take a look at this (typical habtm scenario with checkboxes):\n\nNow:\n\n```\ncheck_box_tag \"user[neighborhood_ids][]\", neighborhood.id, current_user.neighborhoods.include?(neighborhood), :id => \"user_neighborhood_id_#{neighborhood.id}\"\n```\n\nWith patch applied (notice I didn't need to specify my custom :id):\n\n```\ncheck_box_tag \"user[neighborhood_ids][]\", neighborhood.id, current_user.neighborhoods.include?(neighborhood)\n```\n", "created_at": "2011-05-16 02:57:41", "user": 789801, "id": 1168679}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168680", "text": "_Imported from Lighthouse._\nComment by **Jacek Becela** - 2008-11-24 19:08:46 UTC\n\nA second time today my +1 gets eaten. I forgot not to begin a sentence with a plus :)\n", "created_at": "2011-05-16 02:57:41", "user": 789801, "id": 1168680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168681", "text": "_Imported from Lighthouse._\nComment by **Frederick Cheung** - 2008-12-15 23:12:58 UTC\n\nIt would however break backwards compatibility (and in a way that is unlike to be covered by your application's tests), eg if you had\n\n``` ruby\n<%= check_box_tag 'foo', '1' %>\n<%= observe_field 'foo' %>\n```\n\nAlthough the simplification of the example in the first comment is nice.\n", "created_at": "2011-05-16 02:57:42", "user": 789801, "id": 1168681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168682", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2009-03-08 13:06:50 UTC\n\nI think this change needs to be discussed in the mailing list first. Also, it's probably better to commit it after 2.3 is released/branched.\n\nThanks !\n", "created_at": "2011-05-16 02:57:42", "user": 789801, "id": 1168682}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168683", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:36 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 02:57:42", "user": 789801, "id": 1168683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168684", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:53:56 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 02:57:43", "user": 789801, "id": 1168684}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168685", "text": "Attachments saved to Gist: http://gist.github.com/969914\n", "created_at": "2011-05-16 02:57:43", "user": 789801, "id": 1168685}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1533\nCreated by **Ed Lebert** - 2008-12-08 19:28:34 UTC\n\nRails often uses \"in\" sql clauses when preloading associations.  Oracle has a 1000 term restriction on such clauses, so that you cannot say something like \"WHERE parent_id IN (1,2,3,4 ... 1001)\".  One possible solution is to break it up like this:\n\n\"WHERE (parent_id IN (1,2,3,4,...) OR parent_id IN (1001,1002,...)\".\n\nIt has been proposed that the adapters can supply their \"in clause limit\", and the abstract adapter can just default to return nil if it has no limit.  But the oracle adapter can return 1000.\n\nI searched to make sure this isn't a duplicate ticket first.  Sorry if it is.  This is my first rails bug.\n", "labels": ["activerecord", "needs feedback"], "number": 585, "updated_at": "2013-03-03 03:50:23", "user": 789801, "closed_at": "2013-03-01 19:45:48", "id": 904165, "title": "Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle", "url": "https://api.github.com/repos/rails/rails/issues/585", "created_at": "2011-05-16 02:57:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168686", "text": "_Imported from Lighthouse._\nComment by **Frederick Cheung** - 2008-12-08 20:19:02 UTC\n\nI vaguely recall someone having the same issue, although I can't remember whether it was here or a post on one of the various mailing lists. This does seem reasonable, I suppose the only question I would ask would be is it preferable to do\n\n``` sql\nSelect * from foos where id in ( ... ) or id in ( ... )\n```\n\nor to do two queries, one for each chunk. I can't imagine that either would be very hard to do\n", "created_at": "2011-05-16 02:57:45", "user": 789801, "id": 1168686}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168687", "text": "_Imported from Lighthouse._\nComment by **Ed Lebert** - 2008-12-08 20:28:43 UTC\n\nI think the first option is best, but you're the expert.\n\nI used to just monkey patch ActiveRecord::AssociationPreload::ClassMethods::Find_assicoated_records.  But another place where this popped up was a habtm relationship where activerecord performed a join query.  I'm sure you know where this is in the code better than I do.\n\nHowever, another question is how far reaching will you make this fix?  It seems like a lot of work to make this fix complete, as you'd have to at least put it anywhere in activerecord where there's an 'in' clause.  Yikes.  Also, what about when a user does a condition on `:conditions => ['column_name IN (?)', ids]` \n\nI hate oracle.  But this is for a big corporate application the only database they allow is oracle.  Unfortunately that is a reality for a lot of web developers.\n", "created_at": "2011-05-16 02:57:45", "user": 789801, "id": 1168687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168688", "text": "_Imported from Lighthouse._\nComment by **Giorgio Gonnella** - 2008-12-17 11:57:09 UTC\n\nI have this problem with Oracle too. \n\nHere I found a discussion about it:\nhttp://www.ruby-forum.com/topic/164681\n\nThe solution proposed there seems not to work in my case, however.\n", "created_at": "2011-05-16 02:57:45", "user": 789801, "id": 1168688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168689", "text": "_Imported from Lighthouse._\nComment by **Frederick Cheung** - 2008-12-17 12:53:08 UTC\n\nPersonally I wouldn't worry about the case when the user does :conditions => {:foos => list_of_ids}. Users can work their way round that, whereas with the associations stuff you'd be stuck. I suspect that in the case with a big number of records you'd be better off triggering a fallback to the older joins based include\n", "created_at": "2011-05-16 02:57:46", "user": 789801, "id": 1168689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168690", "text": "_Imported from Lighthouse._\nComment by **Giorgio Gonnella** - 2008-12-17 13:11:42 UTC\n\nOK. The solution in the ruby-forum is of course incomplete, as patches only find_associated_records and not e.g. preload_belongs_to_association. (which is why is not working for me)\n", "created_at": "2011-05-16 02:57:46", "user": 789801, "id": 1168690}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168693", "text": "_Imported from Lighthouse._\nComment by **Giorgio Gonnella** - 2008-12-17 14:48:04 UTC\n\nI \"quick\"-fixed it as in the following diff:\n", "created_at": "2011-05-16 02:58:30", "user": 789801, "id": 1168693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168694", "text": "_Imported from Lighthouse._\nComment by **Giorgio Gonnella** - 2009-03-02 17:08:33 UTC\n\nHere is a patch (based on the rails-2.2 branch, can be easily adapted for the master branch)\n", "created_at": "2011-05-16 02:58:30", "user": 789801, "id": 1168694}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168695", "text": "_Imported from Lighthouse._\nComment by **Frederick Cheung** - 2009-03-02 17:50:12 UTC\n\n2 things:\n\nit looks to me like you are missing some parentheses in your sql - it will generate stuff that looks like\n\nid in (...) or id in (...) AND other conditions\n\ninstead of\n\n(id in (...) or id in (...)) AND other conditions\n\nsecondly, no tests :-)\n", "created_at": "2011-05-16 02:58:31", "user": 789801, "id": 1168695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168696", "text": "_Imported from Lighthouse._\nComment by **Giorgio Gonnella** - 2009-03-02 20:56:37 UTC\n\nHi Frederick, thank you for reviewing it. \n\nReply to your objections: \n- missing parenthesis: of course a couple of parenthesis more around it can only be good, you're right, I will correct it\n- no tests: I should definitely prepare them. I probably have still too less experience in testing ActiveRecord features, but I will have a look on the tests suite you guys provide\n", "created_at": "2011-05-16 02:58:31", "user": 789801, "id": 1168696}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168697", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-08-09 21:45:04 UTC\n\n-1 Not sure it's the right way to patch it, someone considered the performance issues with such a select? it's one of those things that are better left for the DBA to solve (that limit is configurable if i recall correctly).\n\nanyway, should not be patched in ActiveRecord, but rather on the OracleAdapter.\n", "created_at": "2011-05-16 02:58:31", "user": 789801, "id": 1168697}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168698", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-08-09 21:45:48 UTC\n\n+1 verified on a sample app and a none-configured Oracle database with limit on.\n", "created_at": "2011-05-16 02:58:32", "user": 789801, "id": 1168698}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168699", "text": "_Imported from Lighthouse._\nComment by **Nick M** - 2010-01-15 21:20:09 UTC\n\nFrom what I can tell, it's not possible to change this limit within Oracle. I also don't think that it's possible for the oracle adapter to cleanly fix this problem since it's Rails that generates all of this raw SQL. This means that any query that happens to be including more than 1000 associated records fails with this error: \"OCIError: ORA-01795: maximum number of expressions in a list is 1000\".\n\nThe earlier patch fixes this problem, but I'm also unsure if there might be performance implications of constructing the query that way for all other databases. Although, personally, for queries loading 1000s of associations, I'm more concerned with getting actual results than performance.\n\nI'm also attaching an simpler monkey patch that surely has worse performance. The only real benefit is that you can drop this into config/initializers and it only overrides one method to fix things, and it's only triggered if there are more than 1000 items. The earlier patch is a better solution, but I didn't want to maintain fully patched copies of the various methods involved.\n", "created_at": "2011-05-16 02:58:32", "user": 789801, "id": 1168699}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168700", "text": "_Imported from Lighthouse._\nComment by **Nick M** - 2010-01-15 21:24:19 UTC\n\nOops, here's the simpler monkey patch that can be dropped in config/initializers\n", "created_at": "2011-05-16 02:58:32", "user": 789801, "id": 1168700}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168701", "text": "_Imported from Lighthouse._\nComment by **Steve** - 2010-01-20 17:14:12 UTC\n\nHi Giorgio, \n    I have the same issue and tried your solution and this is not working for me. \nCan you please upload your file /vendor/rails/activerecord/lib/active_record/association_preload.rb ?\nbtw, I'm using rails 2.2\n\nThanks\n", "created_at": "2011-05-16 02:58:33", "user": 789801, "id": 1168701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168702", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-02-12 12:46:13 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/13645)]\n", "created_at": "2011-05-16 02:58:33", "user": 789801, "id": 1168702}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168703", "text": "_Imported from Lighthouse._\nComment by **Student** - 2010-03-04 15:42:55 UTC\n\nI've done a bit of checking.  It seems that the database adapters are not shy about opening ActiveRecord::Base to make changes.  (See, for instance vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, and gems/activerecord-oracle-adapter-1.0.0.9250/lib/active_record/connection_adapters/oracle_adapter.rb).\n\nThis indicates that the fix should probably be in the oracle adapter.\n\nAlso, while it has been commented that the user should take care of :conditions => {:foos => list_of_ids} themselves, I have problems with this.  If someone is using a plugin, the plugin might well generate the list.  So they have to hack someone else's code.  Furthermore, it is not a fix, but fixes that we need, as every instance would need to be corrected.\n\nNote that ActiveRecord::Base#quote_bound_value does not go through in_or_equals_for_ids, so the wrapper proposed is incomplete.\n", "created_at": "2011-05-16 02:58:33", "user": 789801, "id": 1168703}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168704", "text": "_Imported from Lighthouse._\nComment by **Student** - 2010-03-04 23:25:02 UTC\n\nWell, ... I lied.  I have a fix which should cover all issues.  The best solution, it would seem to me, is to adjust ActiveRecord::Base just a little to support the fix in the Oracle adapter:\n\ndiff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb\nindex cd67490..68dec91 100755\n--- a/activerecord/lib/active_record/base.rb\n+++ b/activerecord/lib/active_record/base.rb\n@@ -1639,13 +1639,17 @@ module ActiveRecord #:nodoc:\n             if value.respond_to?(:empty?) && value.empty?\n               connection.quote(nil)\n             else\n-              value.map { |v| connection.quote(v) }.join(',')\n- ```\n           join_quoted_values_for_condition(value.map{|v| connection.quote(v)})\n       end\n     else\n       connection.quote(value)\n     end\n   end\n  ```\n- ```\n     def join_quoted_values_for_condition(values) #:nodoc:\n  ```\n-          values \\* ','\n-        end\n  +\n       def raise_if_bind_arity_mismatch(statement, expected, provided) #:nodoc:\n         unless expected == provided\n           raise PreparedStatementInvalid, \"wrong number of bind variables (#{provided} for #{expected}) in: #{statement}\"\n  -- \n  1.6.0.4\n\nThis allows a clean fix to the oracle adapter (enhanced)\ndiff --git a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb b/lib/active_record/connection_adapters/oracle_enhance\nindex e01b07d..f92167a 100644\n--- a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb\n+++ b/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb\n@@ -107,6 +107,10 @@ module ActiveRecord\n     end\n     private :enhanced_write_lobs\n-    def join_quoted_values_for_condition(values) #:nodoc:\n-      values \\* ','\n-    end\n  +\n   class << self\n     # patch ORDER BY to work with LOBs\n     def add_order_with_lobs!(sql, order, scope = :auto)\n", "created_at": "2011-05-16 02:58:34", "user": 789801, "id": 1168704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168705", "text": "_Imported from Lighthouse._\nComment by **Student** - 2010-03-05 00:43:51 UTC\n\nUggh.  Formatting problems AND I grabbed the wrong changes...  (The patch above should be good)\n\n``` diff\n---\nactiverecord/lib/active_record/base.rb |    6 +++++-\n1 files changed, 5 insertions(+), 1 deletions(-)\n\ndiff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb\nindex cd67490..68dec91 100755\n--- a/activerecord/lib/active_record/base.rb\n+++ b/activerecord/lib/active_record/base.rb\n@@ -1639,13 +1639,17 @@ module ActiveRecord #:nodoc:\n            if value.respond_to?(:empty?) && value.empty?\n              connection.quote(nil)\n            else\n-              value.map { |v| connection.quote(v) }.join(',')\n+              join_quoted_values_for_condition(value.map{|v| connection.quote(v)})\n            end\n          else\n            connection.quote(value)\n          end\n        end\n\n+        def join_quoted_values_for_condition(values) #:nodoc:\n+          values * ','\n+        end\n+\n        def raise_if_bind_arity_mismatch(statement, expected, provided) #:nodoc:\n          unless expected == provided\n            raise PreparedStatementInvalid, \"wrong number of bind variables (#{provided} for #{expected}) in: #{statement}\"\n-- \n1.6.0.4\n```\n\nThis supports the fix in the oracle adapter:\n\n``` patch\n---\n .../connection_adapters/oracle_enhanced_adapter.rb |   14 ++++++++++++++\n 1 files changed, 14 insertions(+), 0 deletions(-)\n\ndiff --git a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb b/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb\nindex e01b07d..5f62266 100644\n--- a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb\n+++ b/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb\n@@ -107,6 +107,20 @@ module ActiveRecord\n     end\n     private :enhanced_write_lobs\n\n+    ORACLE_IN_LIMIT = 1000\n+\n+    def join_quoted_values_for_condition(values)\n+      return values * ',' unless values.length > ORACLE_IN_LIMIT\n+\n+      values.uniq!\n+      return values * ',' unless values.length > ORACLE_IN_LIMIT\n+\n+      quoted_chunks = values.in_groups_of(ORACLE_IN_LIMIT) do |chunk|\n+        \"(SELECT * FROM TABLE(sys.odcinumberlist(#{chunk * ','})))\"\n+      end\n+      quoted_chunks * \" UNION \"\n+    end\n+\n     class << self\n       # patch ORDER BY to work with LOBs\n       def add_order_with_lobs!(sql, order, scope = :auto)\n-- \n1.6.0.4\n```\n", "created_at": "2011-05-16 02:58:34", "user": 789801, "id": 1168705}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168706", "text": "_Imported from Lighthouse._\nComment by **Student** - 2010-03-05 14:46:05 UTC\n\nWell..  I found another place that needs to be touched...\n\n``` patch\n---\n activerecord/lib/active_record/base.rb |    8 ++++++--\n 1 files changed, 6 insertions(+), 2 deletions(-)\n\ndiff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb\nindex cd67490..563a645 100755\n--- a/activerecord/lib/active_record/base.rb\n+++ b/activerecord/lib/active_record/base.rb\n@@ -695,7 +695,7 @@ module ActiveRecord #:nodoc:\n         }.join(\", \")\n\n         if id.is_a?(Array)\n-          ids_list = id.map {|i| quote_value(i)}.join(', ')\n+          ids_list = join_quoted_values_for_condition(id.map{|i| quote_value(i)})\n           condition = \"IN  (#{ids_list})\"\n         else\n           condition = \"= #{quote_value(id)}\"\n@@ -1639,13 +1639,17 @@ module ActiveRecord #:nodoc:\n             if value.respond_to?(:empty?) && value.empty?\n               connection.quote(nil)\n             else\n-              value.map { |v| connection.quote(v) }.join(',')\n+              join_quoted_values_for_condition(value.map{|v| connection.quote(v)})\n             end\n           else\n             connection.quote(value)\n           end\n         end\n\n+        def join_quoted_values_for_condition(values) #:nodoc:\n+          values * ','\n+        end\n+\n         def raise_if_bind_arity_mismatch(statement, expected, provided) #:nodoc:\n           unless expected == provided\n             raise PreparedStatementInvalid, \"wrong number of bind variables (#{provided} for #{expected}) in: #{statement}\"\n-- \n1.6.0.4\n```\n", "created_at": "2011-05-16 02:58:35", "user": 789801, "id": 1168706}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168707", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-03-05 16:32:58 UTC\n\nNeeds a test case as well.\n", "created_at": "2011-05-16 02:58:35", "user": 789801, "id": 1168707}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168708", "text": "_Imported from Lighthouse._\nComment by **Student** - 2010-03-05 17:11:14 UTC\n\nThis patch is a nop for the rails core.  Its purpose is to provide a hook that the Oracle adapter can use.  Or do we need a test for join_quoted_values_for_condition ?\n", "created_at": "2011-05-16 02:58:35", "user": 789801, "id": 1168708}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168709", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-03-05 18:38:52 UTC\n\nAh, right. No test needed.\n", "created_at": "2011-05-16 02:58:36", "user": 789801, "id": 1168709}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168710", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-05-16 01:41:08 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20088)]\n", "created_at": "2011-05-16 02:58:36", "user": 789801, "id": 1168710}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168711", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-23 16:54:42 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20606)]\n", "created_at": "2011-05-16 02:58:36", "user": 789801, "id": 1168711}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168712", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-24 08:40:50 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20631)]\n", "created_at": "2011-05-16 02:58:37", "user": 789801, "id": 1168712}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168713", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-25 22:45:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20816)]\n", "created_at": "2011-05-16 02:58:37", "user": 789801, "id": 1168713}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168714", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:48 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 02:58:37", "user": 789801, "id": 1168714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168715", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:33:07 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 02:58:38", "user": 789801, "id": 1168715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168716", "text": "_Imported from Lighthouse._\nComment by **Robert Tarrall** - 2011-03-01 22:58:24 UTC\n\n[state:open]\nThis is still an issue in 3.0.4.  For example, assuming User has_many :posts and Post has_one :content... this:\n\n``` ruby\n  User.where(:username=>'somebody').includes(:posts)\n```\n\nworks fine, but this:\n\n``` ruby\n  User.where(:username=>'somebody').includes(:posts => :content)\n```\n\nwill give us \"ORA-01795: maximum number of expressions in a list is 1000\" when the user has more than 1000 posts.\n\nThe SQL generated looks like this:\n\n``` sql\n  SELECT \"contents\".* FROM \"contents\"\n    WHERE (\"contents\".\"post_id\" IN (ginormous list))\n```\n\nwhich is extremely non-performant in Oracle.  Ed's original suggestion of splitting the list of IDs should generate SQL which works in Oracle, but will be even worse performance-wise.\n\nIf possible, we're much better off if the Content eager-load generates SQL using JOINs rather than \"where ID in (x,y,z,...)\":\n\n``` sql\n  SELECT contents.* FROM contents\n    INNER JOIN posts ON posts.id=contents.post_id\n    INNER JOIN users ON users.id=posts.user_id\n    WHERE users.nid=1\n```\n", "created_at": "2011-05-16 02:58:38", "user": 789801, "id": 1168716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168717", "text": "Attachments saved to Gist: http://gist.github.com/969916\n", "created_at": "2011-05-16 02:58:38", "user": 789801, "id": 1168717}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10405067", "text": "Why was this ticket closed if it has not been resolved?  \n", "created_at": "2012-11-15 11:10:32", "user": 808, "id": 10405067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10406373", "text": "@cmrichards please feel free to provide a new example showing the issue, and we can either reopen or start a new issue. Thanks!\n", "created_at": "2012-11-15 12:04:10", "user": 26328, "id": 10406373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10406858", "text": "It was closed by the importer. We can reopen it\n", "created_at": "2012-11-15 12:24:31", "user": 47848, "id": 10406858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10407844", "text": "That said, even though it's re-opened, an example that's confirmed to demonstrate the issue would be great.\n", "created_at": "2012-11-15 13:06:25", "user": 27786, "id": 10407844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10411523", "text": "Just glanced this reopened issue because its subject has Oracle. but it would require some tasks to create a test case from these discussions. It would be very helpful if exact test case with exact Models, associations are provided. \n", "created_at": "2012-11-15 15:10:58", "user": 73684, "id": 10411523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11634582", "text": "@cmrichards can you provide @yahonda with a test case of some kind? If we don't have a way to reproduce the error, we should just close this.\n", "created_at": "2012-12-22 07:00:37", "user": 27786, "id": 11634582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11637947", "text": "Note that the request (from 2011) by Robert Tarrall is now at least partly possible - adding `references` to the query will force a load with joins rather than IDs.\n", "created_at": "2012-12-22 15:10:40", "user": 1191, "id": 11637947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13992267", "text": "Is this still an issue? While browsing the preloader source I noticed the [following lines](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/preloader/association.rb#L77-L80):\n\n``` ruby\n# Some databases impose a limit on the number of ids in a list (in Oracle it's 1000)\n# Make several smaller queries if necessary or make one query if the adapter supports it\nsliced  = owner_keys.each_slice(klass.connection.in_clause_length || owner_keys.size)\nrecords = sliced.map { |slice| records_for(slice).to_a }.flatten\n```\n", "created_at": "2013-02-23 16:04:37", "user": 5402, "id": 13992267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14307582", "text": "Thanks for linking the issue. I think we can close this then.\n", "created_at": "2013-03-01 19:45:48", "user": 5402, "id": 14307582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14308417", "text": "@senny yes, the preloading issue is solved. The problem that remains(as far as I know) is when you do something like I said [here](https://github.com/rsim/oracle-enhanced/issues/120#issuecomment-3140860):\n\n```\nSomeModel.where(:id => array_with_one_thousand_elements)\n```\n\nDo you know if there's an issue for that?\n", "created_at": "2013-03-01 20:02:54", "user": 4867, "id": 14308417}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14308546", "text": "@plentz I don't think there is an issue for that but I'm not sure this is an actual active_record problem. I see it as a limitation of the database that the user of the database needs to know.\n", "created_at": "2013-03-01 20:05:30", "user": 5402, "id": 14308546}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14309025", "text": "@senny I agree that's a database limitation, but I think that active_record could handle that case the same way we're handling this one. In fact, is the same limitation, but one case active_record handles it and in the other don't.\n", "created_at": "2013-03-01 20:15:24", "user": 4867, "id": 14309025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14309187", "text": "I think the two cases are very different. The case in this ticket is about preloading. This is an AR internal functionality that the user can't control. It must work on all different database adapters.\n\nThe case you mentioned is a normal query. There the user has full control and needs to act within the limitations of the database he is using.\n", "created_at": "2013-03-01 20:18:16", "user": 5402, "id": 14309187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14341066", "text": "I think that even if the user \"can\" control the number of elements inside a IN query, it doesn't mean that he should be obligated to do it. \n\nIf we can ease users lives, so, why not? (even if his database sucks)\n", "created_at": "2013-03-03 03:50:23", "user": 4867, "id": 14341066}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1564\nCreated by **sob** - 2011-02-14 09:36:21 UTC\n\nbelongs_to currently does not support before/after_add/remove callbacks as has_many does. There are a variety of applications in which this is beneficial. I found an original ticket from a few years ago but it only implemented the before/after_add callbacks and did not apply cleanly any more.\n\nI've reworked the existing patch from the link below to support all necessary callbacks including before_add, before_remove, after_add, and after_remove. More information on the original request can be found on the ticket here:\n\nhttp://dev.rubyonrails.org/ticket/6934\n\nThanks!\n- sob\n", "labels": ["activerecord"], "number": 586, "updated_at": "2014-10-03 18:27:10", "user": 789801, "closed_at": "2013-04-08 16:22:21", "id": 904168, "title": "Add support for before and after add/remove callbacks to belongs_to associations", "url": "https://api.github.com/repos/rails/rails/issues/586", "created_at": "2011-05-16 02:58:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168718", "text": "_Imported from Lighthouse._\nComment by **Trek** - 2010-04-13 22:55:14 UTC\n\n+1 for this (although I imagine it won't apply cleanly anymore).\n", "created_at": "2011-05-16 02:58:40", "user": 789801, "id": 1168718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168719", "text": "_Imported from Lighthouse._\nComment by **joel (at developwithstyle)** - 2010-05-04 11:17:38 UTC\n\n+1. Surprised it's not already in!\n", "created_at": "2011-05-16 02:58:41", "user": 789801, "id": 1168719}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168720", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 02:58:41", "user": 789801, "id": 1168720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168721", "text": "Attachments saved to Gist: http://gist.github.com/971611\n", "created_at": "2011-05-16 02:58:41", "user": 789801, "id": 1168721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168834", "text": "-1. This is quite easy to manage with the dirty functionality.\n", "created_at": "2011-05-16 03:10:39", "user": 9582, "id": 1168834}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3522901", "text": "How is this managed with \"dirty functionality\"? I have an excellent use case for this feature; can you please explain how this functionality can be implemented otherwise?\n", "created_at": "2012-01-17 04:08:28", "user": 458253, "id": 3522901}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3533410", "text": "An example might help explain why this would be useful.\n\nI have three classes modelled using single-table inheritance. Employee is the base class, which the Manager and Worker classes extend. A manager has_many workers, and a worker belongs_to a manager. If a new worker is added and its manager_id field references a worker, that worker should be automatically changed to a manager and have the worker added as a child.\n\nIdeally, you'd bind to a before_add event on the has_many association in the Manager class, since the conversion from a worker to manager object has nothing to do with the new worker object. Unfortunately, the relationship doesn't exist on the soon-to-be manager just yet, so the next best thing would be to add it to the before_add on the worker's belongs_to association, but as this issue indicates, this is not possible.\n\nYou'd think you could then put it on the before_save call, but that won't work because the validations will fail as the manager_id points to an as-of-yet unconverted worker object. Putting it on before_validation would work, but if someone called .valid? on the new worker object, it would convert the worker object referenced by manager_id, and that's not right. If the object wasn't saved after that, the validation would have made invalid changes to the database.\n\nI'm currently resorting to an add_worker method on the Worker class which does the conversion and then creates the association. It's unfortunate, mostly because I have to litter my controller's update and create actions to check for a manager_id, strip it out, create/update the object, and then call this add_worker method afterwards.\n\nI can't think of a better way to model this problem, but if you have any suggestions that are more appropriate than using the functionality presented in this issue, I'm all ears.\n\nThanks!\n", "created_at": "2012-01-17 18:54:11", "user": 458253, "id": 3533410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3650930", "text": "Reopening for discussion. /cc @jonleighton \n", "created_at": "2012-01-25 13:59:38", "user": 9582, "id": 3650930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3667085", "text": "``` ruby\nclass Post < ActiveRecord::Base\n  belongs_to :author\n\n  def author=(a)\n    super\n    author_assigned\n  end\n\n  def author_assigned\n    # do some stuff\n  end\nend\n```\n\nDoes this provide a solution?\n", "created_at": "2012-01-26 10:45:18", "user": 1979, "id": 3667085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3670601", "text": "Unfortunately not, although it's a more elegant solution than putting it on the validation.\n\nFollowing along with my example, if we override the association attribute writer method for the Employee class (like you've done on the Post class above), the type conversion (from Employee to Manager) on the associated object has to occur before the save, or we'll get an AssociationTypeMismatch exception when we save the employee because an employee can only belong to a manager.\n\nIf we do the type conversion as part of the attribute writer method, we have to save it to avoid the aforementioned exception, and if the attribute is updated but never persisted to the database, we could wind up with a recently-converted manager that has no employees.\n\nThe beauty of doing this in a before_add association callback is that we can make (and save) the type conversion of an employee to a manager _in a situation where we are absolutely certain that the relationship that's triggering it is about to be established and saved_. These two operations really need to be part of a transaction since they're useless individually.\n\nFrom a semantic perspective, I believe the before_add callback is the most appropriate place to put this code. As I've mentioned before, the ideal place would be in a before_add on the Manager class' has_many relationship, since this action really relates to house keeping on the associated object, and not on the object we're saving. However, since the Employee object hasn't been converted to a Manager yet, this isn't possible; it has to be done on the Employee class.\n\nI hope that helps clarify my use case. It may not be common, but I still think it's the most elegant approach, and I'm sure there are other situations in which it would be useful.\n", "created_at": "2012-01-26 15:33:06", "user": 458253, "id": 3670601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3930197", "text": "If I implement this functionality, provided that it's properly tested, will the pull request be accepted? I'd to help in whatever way I can to get this capability added, but I don't want to do the work unless it's going to be used.\n", "created_at": "2012-02-12 19:23:38", "user": 458253, "id": 3930197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5389438", "text": "@jonleighton please see the @jmacdonald proposition.  Can we close this issue or should he work to fix it?\n", "created_at": "2012-04-27 20:17:13", "user": 47848, "id": 5389438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5825090", "text": "+1 on this issue - for consistency's sake if nothing else.  Just refactored my code to remove a bunch of monkey-patching using :before_add on my associations.  has_many worked a charm, cleaned things up immensely.  has_one blew up with an invalid key on the association and I found my way here.  Use case, for the discussion:\n\nAll models can have files associated with them.  Originally I wrote this with a simple has_many relationship, but found that I kept needing to segment the files to allow grouping of different kinds of files, eg a Hospital could has_many :scanned_pdfs, but also want to has_one :logo.  The elegant solution here was to create a \"group\" parameter on my file models, then set it appropriately in the has_many and has_one association conditions.  Now eg @hospital.logo.build works great, but if I create the file elsewhere and associate it with the hospital, no attribute update is performed and the group is not set correctly.  Having :before_add work on has_one relationships, identical to has_many, would solve this problem in the most correct possible manner, IMHO.\n", "created_at": "2012-05-21 15:13:16", "user": 1086959, "id": 5825090}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5825328", "text": "+1.\nLet's unify these features!\n", "created_at": "2012-05-21 15:23:06", "user": 1063219, "id": 5825328}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13032744", "text": "+1.\nhas_one should have the callback as has_many has it.\n", "created_at": "2013-02-02 16:12:25", "user": 2457107, "id": 13032744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15369673", "text": "+1\n", "created_at": "2013-03-24 21:30:34", "user": 89839, "id": 15369673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16060885", "text": "This feature request is stale from a long time so I'm closing this one since we want to use the issues tracker to track issues and pull request.\n\nI suggest to open a pull request or if you want to discuss more send an email to the Rails Core mailing list.\n\nThank you\n", "created_at": "2013-04-08 16:22:21", "user": 47848, "id": 16060885}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17901328", "text": "It is very much still an issue that should be dealt with. It's not the child's job to inform the parent that a parent's value has changed. (Even though it may not have changed in the mongoDB entry itself, but it changed the value of the resulting Mongoid-object)\n\nChild.create(parent: Parent.last) will not trigger anything in the Parent class if I recall correctly. This functionality is implemented for has_many and I see no reason this should not be implemented for has_one.  I agree that it has no place on the belongs_to side -> rename Issue?\n", "created_at": "2013-05-14 20:03:54", "user": 4039894, "id": 17901328}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18508935", "text": "+1\n\nIf anyone has a good monkey patch in the mean time, I'd love to see it. \n", "created_at": "2013-05-27 17:51:19", "user": 1160310, "id": 18508935}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28283722", "text": "+1 this too.\n\n(edit removed code that obviously wouldn't work for the use case that's most interesting)\n", "created_at": "2013-11-12 10:45:07", "user": 44360, "id": 28283722}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29536117", "text": "guys you can use inverse_of on each of the has_one and belongs_to associations....\n", "created_at": "2013-11-29 20:25:04", "user": 242332, "id": 29536117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/37337187", "text": "@Javierchik except in the case of `belongs_to :through` and `has_one :through`.\n\nCallbacks could be used as a work around the problematic lack of :inverse_of when :through is present.\n", "created_at": "2014-03-11 19:11:17", "user": 145184, "id": 37337187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/55820919", "text": "+1 \n\nThis just came up for me on a client project, and I was surprised that Rails has callbacks for everything except 1:1 associations. The hacky way that jonleighton described is what we ended up going with. It's an acceptable solution, but it is weird that it's inconsistent with callbacks. Rails can't try to be everything to everyone or it would be Java.\n", "created_at": "2014-09-16 22:02:51", "user": 438465, "id": 55820919}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57834713", "text": "+1\n\nWith the jonleighton method, don't forget that you may need to handle the assignment by ID when doing it through a controller in response to a form submission.\n\n```\ndef author_id=(a_id)\n    if a_id.empty?\n        self.author = nil\n    else\n        self.author=Author.find(a_id)\n    end\nend\n```\n\nI invite any edits to improve this hack.\n", "created_at": "2014-10-03 18:26:54", "user": 805624, "id": 57834713}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1597\nCreated by **Gaius Centus Novus** - 2011-02-17 08:07:22 UTC\n\nI'd like to use the HTML ellipsis (&#8230;) as my `:omission` in `#truncate`.  The problem is that `#truncate` views that as a string of length 7, not of length 1.  That is,\n\n``` ruby\ntruncate('A really long string', :length => 10, :omission => '&#8230;')\n# => \"A r&#8230;\"\n```\n\nBut since `&#8230;` is really a single character in HTML, it should output `\"A real&#8230;\"`.\n", "labels": [], "number": 587, "updated_at": "2011-05-21 15:11:46", "user": 789801, "closed_at": "2011-05-21 15:11:46", "id": 904169, "title": "ActionView::Helpers::TextHelper#truncate should understand HTML encoding.", "url": "https://api.github.com/repos/rails/rails/issues/587", "created_at": "2011-05-16 02:58:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168722", "text": "_Imported from Lighthouse._\nComment by **Peter Wagenet** - 2008-12-18 19:52:06 UTC\n\nThe problem here is a bit more complicated that it seems. First, what if the user doesn't plan to format as HTML? I know that's an odd case, but should it be supported? If so, how do we know if \"&#8230;\" should be counted as one character or seven? If we do assume that it will always be output as HTML then counting it as one character is simple, as you can see in my attached patch. However, my patch does nothing about the case where we have special characters in the string to be truncated. Even worse, we could end up truncating in the middle of a special character which would be far from desired. There's probably the need for some additional work to be done here.\n", "created_at": "2011-05-16 02:58:43", "user": 789801, "id": 1168722}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168723", "text": "_Imported from Lighthouse._\nComment by **Peter Wagenet** - 2008-12-18 19:53:07 UTC\n\nThe ellipses in my comment should actually be the HTML string written out.\n", "created_at": "2011-05-16 02:58:43", "user": 789801, "id": 1168723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168724", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2008-12-22 00:45:30 UTC\n\nWe could have used CGI::unescapeHTML here, except it doesn't seem to be working with &#8230. So if there is a rack equivalent of that, it could work here.\n\nThanks.\n", "created_at": "2011-05-16 02:58:44", "user": 789801, "id": 1168724}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168725", "text": "_Imported from Lighthouse._\nComment by **Gaius Centus Novus** - 2008-12-22 00:59:39 UTC\n\n`CGI::unescapeHTML` is completely borked.  See my question on StackOverflow: http://stackoverflow.com/questions/378847/is-there-a-better-html-escaping-and-unescaping-tool-than-cgi-for-ruby\n", "created_at": "2011-05-16 02:58:44", "user": 789801, "id": 1168725}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168726", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 02:58:45", "user": 789801, "id": 1168726}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168727", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:53:48 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 02:58:45", "user": 789801, "id": 1168727}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168728", "text": "Attachments saved to Gist: http://gist.github.com/971597\n", "created_at": "2011-05-16 02:58:46", "user": 789801, "id": 1168728}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1598\nCreated by **Peter Wagenet** - 2011-02-22 08:32:34 UTC\n\nCurrently, Hash#to_xml and, by extension, ActiveResource ignore XML attributes in certain scenarios.\n\nFirst, attributes are ignored on tags that have no children. For example:\n\n``` ruby\nHash.from_xml(\"<tag attr='val'>content</tag>\") #=> {\"tag\"=>\"content\"}\n```\n\nUnfortunately, in some instances, one does want to retain these attributes. This patch adds support for a second parameter for Hash.from_xml. This parameter, when set to true (default is false), preserves the attributes.\n\n``` ruby\nHash.from_xml(\"<tag attr='val'>content</tag>\", true) #=> {\"tag\"=>{\"content\"=>\"content\", \"attr\"=>\"val\"}}\n```\n\nThe result is not quite as elegant, but is preferred to loss of data in some cases.\n\nFurthermore, if the attribute is \"type\", Rails will by default attempt to typecast the content as such:\n\n``` ruby\nHash.from_xml(\"<tag type='float'>1</tag>\") #=> {\"tag\"=>1.0}\n```\n\nWith the second parameter set to true, the normal behavior will still be retained where possible, but where no match can be found for the type, it will be passed through:\n\n``` ruby\nHash.from_xml(\"<tag type='float'>1</tag>\", true) #=> {\"tag\"=>1.0}\nHash.from_xml(\"<tag type='number'>1</tag>\", true) #=> {\"tag\"=>{\"type\"=>\"number\", \"content\"=>\"1\"}}\n```\n\nMore information about this problem and my solution is available in a writeup on my blog: [Stop Hash.from_xml from Killing XML Attributes](http://in.finitu.de/2008/11/05/stop-hash-from_xml-from-killing-xml-attributes)\n\nAlso included in this patch is a new format for ActiveResource called AttributePreservingXmlFormat in the event that you need ActiveResource to use the improved Hash.from_xml.\n\nIf anyone has a better idea about how to solve this problem, I'd love some feedback.\n", "labels": [], "number": 588, "updated_at": "2015-04-26 04:19:56", "user": 789801, "closed_at": "2011-05-21 15:11:47", "id": 904170, "title": "Preserve XML Attributes with Hash#from_xml and ActiveResource", "url": "https://api.github.com/repos/rails/rails/issues/588", "created_at": "2011-05-16 02:58:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168729", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2009-03-10 11:27:07 UTC\n\nSurely like the idea. I think it's better to use options hash for preseve_attributes. Something like :\n\n``` ruby\ndef from_xml(xml, options = {})\n  preserve_attributes = options.delete(:preserve_attributes)\n  ...\n```\n", "created_at": "2011-05-16 02:58:48", "user": 789801, "id": 1168729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168730", "text": "_Imported from Lighthouse._\nComment by **Peter Wagenet** - 2009-03-10 15:47:14 UTC\n\nSo instead of taking a boolean take a hash that could also be used for other stuff later? That's not a bad idea. I'll see about changing this. I'll also check that it's all still compatible (and necessary) with 2.3.\n", "created_at": "2011-05-16 02:58:48", "user": 789801, "id": 1168730}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168731", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2009-03-10 16:13:43 UTC\n\nThanks. I think it's probably a little late to push this for 2.3. But I'll commit as soon as the 2.3 stable release is out.\n", "created_at": "2011-05-16 02:58:48", "user": 789801, "id": 1168731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168732", "text": "_Imported from Lighthouse._\nComment by **Peter Wagenet** - 2009-03-13 00:29:13 UTC\n\nYeah, that's probably true. I'll take a look at 3.0 as well.\n", "created_at": "2011-05-16 02:58:49", "user": 789801, "id": 1168732}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168733", "text": "_Imported from Lighthouse._\nComment by **Peter Wagenet** - 2009-03-13 00:48:59 UTC\n\nHere's the Rails 2.3 version anyway.\n", "created_at": "2011-05-16 02:58:49", "user": 789801, "id": 1168733}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168734", "text": "_Imported from Lighthouse._\nComment by **Peter Wagenet** - 2009-03-13 01:04:25 UTC\n\nAnd here's the one for 3.0. The code is the same, but the patch wouldn't apply so I had to redo it.\n", "created_at": "2011-05-16 02:58:49", "user": 789801, "id": 1168734}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168735", "text": "_Imported from Lighthouse._\nComment by **Nick Eskelinen** - 2009-04-10 20:09:03 UTC\n\nWhile I like the general idea of this, the \"content\" key is troubling. What I'd like to see is a parsing of XML that preserves the difference between tag attributes and tag bodies.\n\nIn order to do this, it should separate the data into an (attributes, content) tuple.\n\nExamples:\n\n```\nHash.from_xml(\"<tag attr='val'>content</tag>\", true) #=> {\"tag\"=> [{\"attr\" => \"val\"}, \"content\"]}\n\nHash.from_xml(\"<tag content='inline' attr='val'>actual content</tag>\") #=> {\"tag\" => [{\"content\" => \"inline\", \"attr\" => \"val\"}, \"actual content\"]}\n```\n\n```\n```\n", "created_at": "2011-05-16 02:58:53", "user": 789801, "id": 1168735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168736", "text": "_Imported from Lighthouse._\nComment by **Mark Roach** - 2009-05-04 18:43:10 UTC\n\nNick: It would be nice to come up with a solution that couldn't possibly be generated by the current implementation. The tuple example you give fits that bill, but only in the case of an attribute. if \"tag\" were a nested resource instead, this would generate a list of hashes which already has a meaning.\n\nI don't love an idea that requires looking at the hash keys themselves, but I think it might be necessary. How about something like this:\n\n{\"tag\" =>\n  {:content => \"actual content\",\n   :attributes => {\"content\" => \"inline\", \"attr\" => \"val\"}\n  }\n}\n", "created_at": "2011-05-16 02:58:54", "user": 789801, "id": 1168736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168737", "text": "_Imported from Lighthouse._\nComment by **howardk** - 2009-08-21 17:22:52 UTC\n\nSo where does this stand?\n\nThis is a fundamental problem in Rails -- Hash.from_xml just isn't very XML savvy.\n\nElements can have multiple types of children, but there's 3 notable ones:\n- attribute\n- element \n- #text\n  e.g.\n  <A B='1'>2<C>3</C></A>\n\nNow arguably you could state an Element -or- #text is handled, but not both. This matches with the notion a Hash key's value can be 'primitive'/atomic value (String/etc) or 'complex' (Hash) (or a list of either, i.e. Array).\n\nBut the notion of only handling child Attributes if child Elements exist is seriously flawed.\n\nI'm not too fond of the key name (:content). Would be more accurate to call it :text or :value.\nEven better, to avoid collisions (yes, I've seen XML like <a value='1'>2</a>), how about an option to control the name of the key? ,eg.\nHash.from_xml(xml, :preserve_attributes => true, :text_value_keyname => :content) [or whatever you want to call it]\n", "created_at": "2011-05-16 02:58:54", "user": 789801, "id": 1168737}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168738", "text": "_Imported from Lighthouse._\nComment by **howardk** - 2009-08-21 19:18:36 UTC\n\nGah! In my comment \"Even better, to avoid collisions (yes, I've seen XML like 2)...\" the '2' was supposed to be the XML block\n\n``` XML\n<BLEH VALUE='1'>2</BLEH>\n```\n\nI'm sure everyone's seen XML ranging from pretty and elegant to really ugly and coarse, even down to things like\n\n``` XML\n<ITEM TYPE='PURCHASEORDER'><ID VALUE='123'/></ITEM>\n```\n\nMy point being, any (sane) name you pick for the #text's key in the Hash can collide with attributes in use in the real world, so pick a sane default and give callers the option to override the default key if they have to deal with a collision.\n", "created_at": "2011-05-16 02:58:55", "user": 789801, "id": 1168738}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168739", "text": "_Imported from Lighthouse._\nComment by **howardk** - 2009-08-21 19:21:04 UTC\n\nGrrrr. OK, the 'Formatting help' isn't -- it's still mangling my sample XML. Fine. Here's the previous comment, but with curly braces instead of angle brackets. Let's see if he handles that:\n\nGah! In my comment \"Even better, to avoid collisions (yes, I've seen XML like 2)...\" the '2' was supposed to be the XML block\n\n```\n{BLEH VALUE='1'}2{/BLEH}\n```\n\nI'm sure everyone's seen XML ranging from pretty and elegant to really ugly and coarse, even down to things like\n\n``` XML\n{ITEM TYPE='PURCHASEORDER'}{ID VALUE='123'/}{/ITEM}\n```\n\nMy point being, any (sane) name you pick for the #text's key in the Hash can collide with attributes in use in the real world, so pick a sane default and give callers the option to override the default key if they have to deal with a collision.\n", "created_at": "2011-05-16 02:58:55", "user": 789801, "id": 1168739}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168740", "text": "_Imported from Lighthouse._\nComment by **laran (at evanscode)** - 2009-08-24 06:08:41 UTC\n\nI ran into this today. Bummer! Going to have to work around for sure.\n", "created_at": "2011-05-16 02:58:55", "user": 789801, "id": 1168740}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168741", "text": "_Imported from Lighthouse._\nComment by **sbwoodside** - 2009-09-02 20:47:38 UTC\n\nSlightly related is that current implementation can't deal with arrays. See https://rails.lighthouseapp.com/projects/8994/tickets/3133-activerecordserialization-class-method-from_xml-handles-arrays-and-singleton-xml-instances\n", "created_at": "2011-05-16 02:58:56", "user": 789801, "id": 1168741}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168742", "text": "_Imported from Lighthouse._\nComment by **Matthew Ford** - 2009-10-28 22:10:54 UTC\n\nI need this too, will try and merge the patch into the current master and report back. \n\nI like nick's suggestion for the syntax, if preserving XML attributes was an option that needed to be turned on, then I don't see why the same structure that could possibly be generated would be an issue.\n", "created_at": "2011-05-16 02:58:56", "user": 789801, "id": 1168742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168743", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 02:58:57", "user": 789801, "id": 1168743}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168745", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-07 04:38:12 UTC\n\nAny updates here?\n\nBesides the milestone update (using bulk edit) this ticket hasn't been updated since October 28th 2009. So is this still an issue or relevant now?\n\nI'll monitor the comments so in case this is still an issue please do leave a comment, or rebase that patch or make a new one. Else I think it's best to close this ticket as stale.\n", "created_at": "2011-05-16 02:59:35", "user": 789801, "id": 1168745}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168746", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 20:56:15 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 02:59:35", "user": 789801, "id": 1168746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168747", "text": "_Imported from Lighthouse._\nComment by **Boris** - 2010-11-11 10:52:57 UTC\n\nIndeed, the problem still exists in Rails 3.0.1.\n", "created_at": "2011-05-16 02:59:35", "user": 789801, "id": 1168747}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168748", "text": "Attachments saved to Gist: http://gist.github.com/971598\n", "created_at": "2011-05-16 02:59:36", "user": 789801, "id": 1168748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2519372", "text": "hmm, why did this get auto-closed?  If it was closed with a comment 'rejected' or something... but what's up with this? Feature would be useful to me too. \n", "created_at": "2011-10-25 16:26:59", "user": 149304, "id": 2519372}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2520929", "text": "All issues imported from LH were closed earlier this year. If you are interested, please investigate and make a new PR. Thanks.\n", "created_at": "2011-10-25 18:27:04", "user": 146214, "id": 2520929}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26838468", "text": "@nickl- Whats the status of this?  Is it possible to build this as a monkey patch and put it in it's own gem?  I'm using Hash.from_xml in a non-Rails context, so that would be a completely reasonable solution for me while we wait for the Rails Core team to accept this.\n", "created_at": "2013-10-22 19:58:14", "user": 2154282, "id": 26838468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29059078", "text": "@betesh I opted for SimpleXml with the following patch to hash conversions\n\n``` ruby\nrequire 'active_support/core_ext/hash/conversions'\n\nclass Hash\n  def to_xml(options = {})\n    require 'xmlsimple'\n    options.delete(:builder)\n    options.delete(:skip_instruct)\n    options.delete(:dasherize)\n    options.delete(:skip_types)\n\n    options[:Indent] = ' '*options.delete(:indent) unless options[:indent].nil?\n    options[:RootName] = options.delete(:root)\n\n    XmlSimple.xml_out(self, options)\n  end\n\n  class << self\n    def from_xml(xml, disallowed_types = nil)\n      require 'xmlsimple'\n      XmlSimple.xml_in(xml, KeepRoot: true, SuppressEmpty: true, KeyToSymbol: true, ForceArray: false)\n    end\n  end\nend\n```\n\nWorks for me... perhaps ymmv...\n", "created_at": "2013-11-22 09:19:01", "user": 1404606, "id": 29059078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29086570", "text": "Thanks, @nickl-\nIn the end I opted for Nokogiri (at betesh/mblox@6894e60b8c00c9a68802e35c602cf267063bd78d),\nwhich is probably a lot more overhead than I need.\n", "created_at": "2013-11-22 16:30:02", "user": 2154282, "id": 29086570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29393781", "text": "@betesh Wow! I knew it would be elaborate but had no idea...\n\nNokogiri is awesome in its \"whole kitchen zink\" kind of way but I prefer SimpleXml for traversal tasks any day.\n", "created_at": "2013-11-27 15:38:55", "user": 1404606, "id": 29393781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/96321616", "text": "Just ran into this issue, thanks for the solution @nickl- \n", "created_at": "2015-04-26 04:19:56", "user": 9292367, "id": 96321616}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1639\nCreated by **Gabriel Gironda** - 2010-10-25 02:19:06 UTC\n\nI needed to use an observer to observe multiple models, but only wanted to observe certain sets of changes on each one. There was also a bug where calling `observe` twice in an ActiveRecord Observer would clear out any previous list of observed classes. This patch adds both the :on option and refactors the workings of the `observe` method to not clear out models from previous declarations\n", "labels": [], "number": 589, "updated_at": "2011-05-21 15:11:47", "user": 789801, "closed_at": "2011-05-21 15:11:47", "id": 904171, "title": "Adds an :on option to ActiveRecord observers", "url": "https://api.github.com/repos/rails/rails/issues/589", "created_at": "2011-05-16 02:59:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168749", "text": "_Imported from Lighthouse._\nComment by **Bryan Liles** - 2008-12-27 01:12:13 UTC\n\nThe would read much better if you could do:\n\nobserve :comment, :photo, :after => :create\n\n-or-\n\nobserve :comment, :photo, :on => [:create, :update]\n", "created_at": "2011-05-16 02:59:37", "user": 789801, "id": 1168749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168750", "text": "_Imported from Lighthouse._\nComment by **Gabriel Gironda** - 2008-12-27 01:24:53 UTC\n\nThanks for the comments, Bryan!\n\nThe former, I agree with. When I get a moment I'll add that functionality to the patch.\n\nThe latter would be a problem because there's cases where you might want `before_update` rather than `after_update`. Defaulting it to use `after_` by convention would cause problems in the case where a custom callback is being used - `notify(:before_some_domain_specific_event)` in your models, for example.\n", "created_at": "2011-05-16 02:59:37", "user": 789801, "id": 1168750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168751", "text": "_Imported from Lighthouse._\nComment by **Gabriel Gironda** - 2009-01-27 22:45:14 UTC\n\nHere's a new patch that adds the :after => :create kind of syntax.\n", "created_at": "2011-05-16 02:59:38", "user": 789801, "id": 1168751}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168752", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2009-08-08 21:44:16 UTC\n\n+1 this is nice syntax\n\nhaving trouble applying the patch - will try to apply to master and modify as necessary\n", "created_at": "2011-05-16 02:59:38", "user": 789801, "id": 1168752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168753", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:29 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 02:59:38", "user": 789801, "id": 1168753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168754", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:29 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 02:59:38", "user": 789801, "id": 1168754}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168755", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:48:25 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 02:59:39", "user": 789801, "id": 1168755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168756", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 02:59:39", "user": 789801, "id": 1168756}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168757", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 02:59:39", "user": 789801, "id": 1168757}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168758", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 02:59:40", "user": 789801, "id": 1168758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168759", "text": "Attachments saved to Gist: http://gist.github.com/971599\n", "created_at": "2011-05-16 02:59:40", "user": 789801, "id": 1168759}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1641\nCreated by **Aupajo** - 2011-02-19 09:28:16 UTC\n\nI found myself changing the default from project to project, so here's my patch for it.\n\nThis sets `truncate`'s default `:omission` from three dots (...) to the \"proper\" HTML character entity for an ellipsis (`&hellip;`). This will render the ellipsis properly as a single character and is more semantically correct.\n\nI think, in the context where truncate is used, this is nicer.\n", "labels": [], "number": 590, "updated_at": "2011-05-21 15:11:47", "user": 789801, "closed_at": "2011-05-21 15:11:47", "id": 904172, "title": "truncate with HTML ellipsis character entity", "url": "https://api.github.com/repos/rails/rails/issues/590", "created_at": "2011-05-16 02:59:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168760", "text": "_Imported from Lighthouse._\nComment by **Jeremy Olliver** - 2009-03-08 07:12:32 UTC\n\nI think this sounds like a good idea.\n\nA concern that I'd have before this patch gets applied is that when specifying the total length, of the truncated string, the escape character is counting as an 8 character string \"&hellip;\" rather than the roughly 3 character space it takes up when displayed in the browser.\n\ne.g. truncate(\"Hi my name is\", :length => 10)\n\n# => \"Hi&hellip;\"\n\nwhere what might be expected is:\n\n# => \"Hi my n&hellip;\"\n\nI've added a patch to be applied ontop of your patch to show the behavior I expect in the tests. I'm not quite sure how best to change this behaviour (ie, treat \"&hellip;\" as not taking up the space of 8 characters) yet though\n", "created_at": "2011-05-16 02:59:42", "user": 789801, "id": 1168760}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168761", "text": "_Imported from Lighthouse._\nComment by **Aupajo** - 2009-03-09 03:20:34 UTC\n\nA trade-off might be to increase the default `:length` by 5 characters.\n\nAnother solution would be to treat length as the encoded character length, and treat `&etc;` as single characters, thus changing the eight characters of the `&hellip;` to one.\n", "created_at": "2011-05-16 02:59:42", "user": 789801, "id": 1168761}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168762", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2009-08-08 21:35:52 UTC\n\nnot reproducible\n\n-1 The patch doesn't work properly.\n\n+1 The idea isn't bad. I think using proper HTML characters is always nice.\n", "created_at": "2011-05-16 02:59:42", "user": 789801, "id": 1168762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168763", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-03-27 12:55:07 UTC\n\nPlease post a patch where &hellip; is considered a three character string. This will be backwards compatible yet supporting correct HTML character. When making this patch, please make it against master. Thanks. You can assign it to me when done.\n\nI am changing ticket's state to stale.\n", "created_at": "2011-05-16 02:59:42", "user": 789801, "id": 1168763}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1683\nCreated by **Adam** - 2011-02-22 08:32:35 UTC\n\nIf a belongs to uses a custom counter cache that is not of the form #{attribute_name}_count of the corresponding has_many association then they are not used.\n\nA simple solution is to add a :counter_cache option to the has_many association.\n\nThe attached patch is complete with docs and tests.\n", "labels": [], "number": 591, "updated_at": "2011-05-21 15:11:47", "user": 789801, "closed_at": "2011-05-21 15:11:47", "id": 904174, "title": "Custom counter caches not being used", "url": "https://api.github.com/repos/rails/rails/issues/591", "created_at": "2011-05-16 03:03:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168770", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2009-03-07 19:15:06 UTC\n\nI think the key needs to be named differently, probably :counter_cache_attribute or something. Also, the tests shouldn't really use mocking/stubbing.\n\nThanks.\n", "created_at": "2011-05-16 03:03:33", "user": 789801, "id": 1168770}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168771", "text": "_Imported from Lighthouse._\nComment by **Derander** - 2009-08-09 20:49:51 UTC\n\n-1, this is fixed in 2-3-stable and master.\n", "created_at": "2011-05-16 03:03:33", "user": 789801, "id": 1168771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168772", "text": "_Imported from Lighthouse._\nComment by **Derander** - 2009-08-09 20:52:32 UTC\n\nTo verify the fix, \n\nrails test2\n\ncd test2\n\nscript/generate model Post title:string custom_count:integer\n\nscript/generate model Comment title:string post_id:integer\n\nIn post.rb: has_many :comments\n\nin comment.rb: belongs_to :post, :counter_cache => :custom_count\n\n./script/console\n\np = Post.create(:title => \"A Post\")\n\np.comments.build(:title => \"A comment\")\n\np.save\n\np.custom_count should be 1\n", "created_at": "2011-05-16 03:03:33", "user": 789801, "id": 1168772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168773", "text": "_Imported from Lighthouse._\nComment by **Derander** - 2009-08-10 07:47:44 UTC\n\nJose Valim found an error in my understanding of the patch.\n\nThe problem is not found by examining the value of p.custom_count, instead, starting from p.save:\n\np.custom_count = 10\n\np.save\n\np.comments.count will be 1.  #It should be 10 if custom_count were being used.\n", "created_at": "2011-05-16 03:03:34", "user": 789801, "id": 1168773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168774", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2009-08-10 07:51:24 UTC\n\nSince we added :inverse_of in master (Rails 3.0), we could make use of it to retrieve the counter cache column, instead of adding a new option to has_many which may be confusing.\n", "created_at": "2011-05-16 03:03:34", "user": 789801, "id": 1168774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168775", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:03:34", "user": 789801, "id": 1168775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168776", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-21 02:36:21 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:03:35", "user": 789801, "id": 1168776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168777", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-24 12:11:42 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:03:35", "user": 789801, "id": 1168777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168778", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-24 12:12:51 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:03:35", "user": 789801, "id": 1168778}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168779", "text": "Attachments saved to Gist: http://gist.github.com/971601\n", "created_at": "2011-05-16 03:03:36", "user": 789801, "id": 1168779}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1717\nCreated by **Matthew Moore** - 2011-02-17 07:38:07 UTC\n\nIf you compare the two methods in ActiveResrouce::CustomMethods, you see:\n\n``` ruby\n\n      def post(method_name, options = {}, body = nil)\n        request_body = body.blank? ? encode : body\n        if new?\n          connection.post(custom_method_new_element_url(method_name, options), request_body, self.class.headers)\n        else\n          connection.post(custom_method_element_url(method_name, options), request_body, self.class.headers)\n        end\n      end\n\n      def put(method_name, options = {}, body = '')\n        connection.put(custom_method_element_url(method_name, options), body, self.class.headers)\n      end\n```\n\nI can't figure out for the life of me why the post method has \n\n``` ruby\nrequest_body = body.blank? ? encode : body\n```\n\nbut put doesn't.  \n\nShould I add that line to put?\n", "labels": [], "number": 592, "updated_at": "2011-11-22 19:36:22", "user": 789801, "closed_at": "2011-05-21 15:11:48", "id": 904175, "title": "ActiveResource::CustomMethods#put should behave like #post for body encoding", "url": "https://api.github.com/repos/rails/rails/issues/592", "created_at": "2011-05-16 03:03:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168780", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-04-11 01:51:09 UTC\n\nCould you please make a test case & patch for this?\n", "created_at": "2011-05-16 03:03:37", "user": 789801, "id": 1168780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168781", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:03:38", "user": 789801, "id": 1168781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168782", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-19 06:09:43 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:03:39", "user": 789801, "id": 1168782}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168783", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-02-03 10:52:43 UTC\n\nIt is simple. This methods are designed (as I understand) to invoke REST methods. For example you can use post method to create a new object. And you can not to pass a body with new object data as argument, but just call a post method on a new object like it is done in test_custom_new_element_method (custom_method_test.rb): ryan.post(:register)\n\nEncode will just serialize ryan object into some appropriate representation and passe it to the post method as a param like you just have submitted a form.\n\nBut since this designed to invoke REST methods you can't use put for creating a new object and if you don't send a body it means that you don't want to send a body so encode is not needed here in the put method.\n\nSo I think this ticket should be closed.\n", "created_at": "2011-05-16 03:03:39", "user": 789801, "id": 1168783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2839190", "text": "Why is this closed?\nThis is a real issue.\n", "created_at": "2011-11-22 19:33:49", "user": 195891, "id": 2839190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2839237", "text": "Calling put method with WHATEVER parameter just BOOMs to my face (on rails 3.0.7, 3.0.11).\n\n``` ruby\n  # addresses is an array and i want to post is as JSON body to the addresslist\n  # I am in fact modifying property of the addresslist resource, but not the whole, just it's one single property!\n  def add_addresses(addresses)\n    put(:add_addresses, addresses.to_json)\n  end\n```\n\nThis just BOOMs with this:\n\n``` ruby\nArgumentError (wrong number of arguments (0 for 1)):\n  app/models/cm/addresslist.rb:25:in `add_addresses'\n```\n\nFurther inspection results in this:\n\n```\nactivesupport (3.0.11) lib/active_support/core_ext/object/to_query.rb:8:in `to_query'\nactiveresource (3.0.11) lib/active_resource/base.rb:912:in `query_string'\nactiveresource (3.0.11) lib/active_resource/custom_methods.rb:111:in `custom_method_element_url'\nactiveresource (3.0.11) lib/active_resource/custom_methods.rb:101:in `put'\napp/models/cm/addresslist.rb:25:in `add_addresses'\n```\n\nI discovered that I just CAN NOT pass ANY parameter to PUT method.\nQuestion is: WHY?\n", "created_at": "2011-11-22 19:36:22", "user": 195891, "id": 2839237}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1860\nCreated by **Anselm Helbig** - 2010-11-25 12:13:12 UTC\n\n`with_scope' fails to merge complex includes. Take this code:\n\n```\nArticle.with_scope(:find => { :include => :comments }) do\n  Article.with_scope(:find => { :include => { :comments => :users } }) do\n    Article.find(:all)\n  end\nend\n```\n\nThe includes in effect are [:comments, { :comments => :users }] instead of [{ :comments => :users }] which might result in an unnecessary join. \n\nResponsible for this behaviour is the code in ActiveRecord::Base::merge_includes - it should be able to recognize such complex includes and merge them accordingly.\n", "labels": [], "number": 593, "updated_at": "2011-05-16 03:11:22", "user": 789801, "closed_at": "2011-05-16 03:11:22", "id": 904176, "title": "with_scope should merge complex includes", "url": "https://api.github.com/repos/rails/rails/issues/593", "created_at": "2011-05-16 03:03:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168784", "text": "_Imported from Lighthouse._\nComment by **Brian Rose** - 2010-04-12 22:51:32 UTC\n\nUnable to replicate under Rails 3.0. The following code only produces three queries (one for each table):\n\nArticle.includes(:comments => :user).includes(:comments).all\n", "created_at": "2011-05-16 03:03:42", "user": 789801, "id": 1168784}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168785", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-04-12 23:39:05 UTC\n\nI agree, this is more than likely fixed in Rails 3.\n", "created_at": "2011-05-16 03:03:42", "user": 789801, "id": 1168785}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168786", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 11:11:24 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:03:42", "user": 789801, "id": 1168786}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168787", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-10-13 21:11:57 UTC\n\nI think that this is still happening in Rails 3.  It've been struggling with this for a while.  Could it be re-opened?\n\nIt shows up when you use a where/order which causes Rails to create a join query rather than using separate queries for the eager loading.\n\nHere's an example in my app that is failing:\nChange.includes(:user).includes(:user => :regions).where('users.deleted_at IS NULL').all\n\nThe application uses Postgres, so I get the following error:\n\nActiveRecord::StatementInvalid: PGError: ERROR:  missing FROM-clause entry for table \"users_changes\"\nLINE 1: ...\" AS t1_r18, \"users\".\"email_signature\" AS t1_r19, \"users_cha...\n\nOf course the \"users_changes\" table doesn't exist as \"user\" is a has_many association on the Change model.\n\nIn the SQL query, the \"changes\", \"users\", and \"regions\" tables are used among the select fields.  \"changes\", \"users\", \"regions_users\", and \"regions\" are all joined in the FROM clause (see attachment for the full error including the SQL query and backtrace)\n\nUsing Rails 3.0.0 and RVM on OS 10.6 with ruby version \"ruby 1.8.7 (2010-08-16 patchlevel 302) [i686-darwin10.4.0]\"\n", "created_at": "2011-05-16 03:03:42", "user": 789801, "id": 1168787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168788", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-10-13 21:36:23 UTC\n\nPerhaps not surprisingly, Change.includes(:user).includes(:user => :regions).where('users.deleted_at IS NULL').size works, probably because there are no fields specified in the SELECT clause but rather a COUNT(DISTINCT \"changes\".\"id\").  Here is the query that in generates:\n\n  SQL (51.7ms)  SELECT COUNT(DISTINCT \"changes\".\"id\") AS count_id FROM \"changes\" LEFT OUTER JOIN \"users\" ON \"users\".\"id\" = \"changes\".\"user_id\" LEFT OUTER JOIN \"regions_users\" ON \"regions_users\".\"user_id\" = \"users\".\"id\" LEFT OUTER JOIN \"regions\" ON \"regions\".\"id\" = \"regions_users\".\"region_id\" WHERE (users.deleted_at IS NULL)\n", "created_at": "2011-05-16 03:03:43", "user": 789801, "id": 1168788}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168789", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-10-13 21:44:28 UTC\n\nDigging around a bit myself, it looks like the \"includes_values\" instance_variable is getting set to [:user, {:user=>:regions}].  Is that right?\n\nI found that variable being used in ActiveRecord::FinderMethods#find_with_associations\n\nSearching for the string \"includes_values\", the only place that I see it being assigned is in ActiveRecord::QueryMethods#includes\n\nAm I on the right track (I'm also about to get off the train and my connection is slow)?\n", "created_at": "2011-05-16 03:03:43", "user": 789801, "id": 1168789}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168790", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-10-13 23:29:40 UTC\n\nI've done some more digging and I've created a patch which seems to work.  Please have a look.\n", "created_at": "2011-05-16 03:03:43", "user": 789801, "id": 1168790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168791", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-10-14 13:36:24 UTC\n\nI've made a better patch including tests.  Please have a look and thanks!\n", "created_at": "2011-05-16 03:03:44", "user": 789801, "id": 1168791}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168792", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:30 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:03:44", "user": 789801, "id": 1168792}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168793", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-10-18 13:23:03 UTC\n\nJust curious: what happens to this ticket now?  Should it be marked as open again?  Does the milestone changing to 3.0.2 mean that it will go in, or that it targeted for that version?  Thanks!\n", "created_at": "2011-05-16 03:03:44", "user": 789801, "id": 1168793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168794", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-10-18 13:25:03 UTC\n\nSorry for being so persistent.  It's my first patch and I'm a bit caught up in the excitement of open source code in action ;)\n", "created_at": "2011-05-16 03:03:45", "user": 789801, "id": 1168794}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168795", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-18 13:37:52 UTC\n\nHi Brian,\n\nNo it doesnt mean that explicitly, i think that was just a bulk update.\n\nAdding a patch tag to the ticket and marking it open for now since you can reproduce the problem on Rails 3. Someone will need to validate that the patch applies and comment/code review etc. It may then end up in Rails. \n\nI've not validated your patch but maybe i'll give it a shot as soon as i get the time.\n\nI understand your enthusiasm, i was in a similar boat a few weeks ago! Keep it up!\n", "created_at": "2011-05-16 03:03:45", "user": 789801, "id": 1168795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168796", "text": "_Imported from Lighthouse._\nComment by **Anatoliy Lysenko** - 2010-10-25 12:44:25 UTC\n\nHi Brian,\n–êccidentally I and Ernie Miller fix this error when we work on #5845. \nWe have two patches, hope you'll review them both.\nUnfortunately I dislike your patch, it fail because loop isn't right way to work with associations.\nHere I added test that fail with you patch:\nhttps://rails.lighthouseapp.com/projects/8994/tickets/5845/a/735636/0003-fix-eager-loading-of-duplicated-associations.patch\nYour patch is good for [:price_estimates,{:price_estimates => :pirate} where loop is good enough. But it fail on [{:posts=>:author}, {:posts=>:comments}] where you should use recursion, like in JoinDependecy#build.\n", "created_at": "2011-05-16 03:03:46", "user": 789801, "id": 1168796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168797", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-10-25 17:38:44 UTC\n\nThanks!  I'm just glad to see that it's going to be fixed ;)  I've got my patch frozen into our version of 3.0.1 in our app, but I look forward to having your patch in soon (and being able to merge hashes in includes)!\n", "created_at": "2011-05-16 03:03:46", "user": 789801, "id": 1168797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168798", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:06:24 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:03:46", "user": 789801, "id": 1168798}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168799", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:03:47", "user": 789801, "id": 1168799}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168800", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:03:47", "user": 789801, "id": 1168800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168801", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:03:47", "user": 789801, "id": 1168801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168802", "text": "Attachments saved to Gist: http://gist.github.com/971608\n", "created_at": "2011-05-16 03:03:48", "user": 789801, "id": 1168802}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168838", "text": "Not relevant anymore. with_scope is out on 3.1.\n", "created_at": "2011-05-16 03:11:22", "user": 9582, "id": 1168838}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1895\nCreated by **Damien MATHIEU** - 2011-02-17 08:07:23 UTC\n\nWhen exporting OrderedHash objects with to_json or to_xml, they become arrays and doesn't stay as hashes.\nWith those methods, they're exported as if they were hashes.\n", "labels": [], "number": 594, "updated_at": "2011-05-21 15:11:48", "user": 789801, "closed_at": "2011-05-21 15:11:48", "id": 904177, "title": "Export OrderedHash to XML and JSON", "url": "https://api.github.com/repos/rails/rails/issues/594", "created_at": "2011-05-16 03:03:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168803", "text": "_Imported from Lighthouse._\nComment by **Damien MATHIEU** - 2009-02-07 22:35:46 UTC\n\nDid I use the inappropriate method to suggest a patch ?\n", "created_at": "2011-05-16 03:03:49", "user": 789801, "id": 1168803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168804", "text": "_Imported from Lighthouse._\nComment by **Damien MATHIEU** - 2009-02-10 08:40:12 UTC\n\nSo I guess not. Whatever.\nThanks anyway for not even taking a few seconds to look at my patch.\n", "created_at": "2011-05-16 03:03:49", "user": 789801, "id": 1168804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168805", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-02-10 09:40:12 UTC\n\nHow about doing something like the following?\n\n``` ruby\ndef to_json\n  to_hash.to_json\nend\n\ndef to_xml\n  to_hash.to_xml\nend\n```\n\nThis way we won't need to maintain the code for cerating JSON and XML in multiple places.\n", "created_at": "2011-05-16 03:03:49", "user": 789801, "id": 1168805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168806", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-02-10 09:43:53 UTC\n\nOh btw, that attitude is not very nice. I would have not replied if I had seen your last comment.\n\nPeople are busy with work _and_ busy creating/fixing code that _you_ can use, for free. It's also stated very clear in the explanation in the right hand bar. But I guess you didn't read that.\n\n‚ÄúThen don't get your hopes up. Unless you have a \"Code Red, Mission Critical, The World is Coming to an End\" kinda bug, you're creating this ticket in the hope that others with the same problem will be able to collaborate with you on solving it. Do not expect that the ticket automatically will see any activity or that others will jump to fix it. Creating a ticket like this is mostly to help yourself start on the path of fixing the problem and for others to sign on to with a \"I'm having this problem too\"..‚Äù\n", "created_at": "2011-05-16 03:03:51", "user": 789801, "id": 1168806}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168807", "text": "_Imported from Lighthouse._\nComment by **Damien MATHIEU** - 2009-02-10 09:43:58 UTC\n\nBecause if we move from an OrderedHash to an hash, we're losing the order in 1.8 ?\n", "created_at": "2011-05-16 03:03:54", "user": 789801, "id": 1168807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168808", "text": "_Imported from Lighthouse._\nComment by **Damien MATHIEU** - 2009-02-10 09:45:49 UTC\n\nAnd sorry for the harsh message. I must admit that it's quite frustrating to see other tickets being assigned or at least having someone show an interest to it and feel alone with his ticket not being replied ;)\n", "created_at": "2011-05-16 03:03:54", "user": 789801, "id": 1168808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168809", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-02-10 09:51:04 UTC\n\n> Because if we move from an OrderedHash to an hash, we're losing the order in 1.8 ?\n\nYes that's true, but is it important for JSON and XML? (I don't know)\n\n> And sorry for the harsh message. I must admit that it's quite frustrating to see other tickets being assigned or at least having someone show an interest to it and feel alone with his ticket not being replied ;)\n\nI understand, but such emotional messages never help. But enough about this.\n", "created_at": "2011-05-16 03:03:55", "user": 789801, "id": 1168809}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168810", "text": "_Imported from Lighthouse._\nComment by **Damien MATHIEU** - 2009-02-10 09:53:32 UTC\n\nWell in my case it was. I have a date for every key of the hash (in the format \"YYYY-MM-DD) and I need it to be ordered by date, even when I give it in json or xml (otherwise the application using the feed need to reorder it).\n", "created_at": "2011-05-16 03:03:55", "user": 789801, "id": 1168810}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168811", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-02-10 10:05:33 UTC\n\nAt least in JSON the spec (json.org) says clearly:\n\n‚ÄúAn object is an **unordered** set of name/value pairs. An object begins with { (left brace) and ends with } (right brace). Each name is followed by : (colon) and the name/value pairs are separated by , (comma).‚Äù\n\nFrom googling it seems that in XML the same applies, but I haven't found a definitive answer yet so you'd have to look this up more thoroughly.\n", "created_at": "2011-05-16 03:03:55", "user": 789801, "id": 1168811}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168812", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-02-10 10:07:45 UTC\n\nMaybe someone on rubyonrails-core@googlegroups.com knows this about XML?\n", "created_at": "2011-05-16 03:03:56", "user": 789801, "id": 1168812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168813", "text": "_Imported from Lighthouse._\nComment by **Nate Wiger** - 2009-02-10 13:03:52 UTC\n\nIn XML, order may or may not matter. It's application-dependent.\n\nMy opinion: writing your app to rely on Rails to spit out XML/JSON automatically in some order (ASCII order?) is a bad idea.  It's not actually part of either the JSON or XML specs to do so.  It's a fragile approach.\n\nI'm not against this patch, but kazhar, I would strongly suggest a different approach for your app.  It is quite likely, since this is NOT a formally-defined behavior for JSON/XML, that sometime in the future a subsequent patch will get applied which will revert this behavior.\n\nJust write a .rxml and spit it out ordered by date.  Or create an ActiveRecord::Base subclass with \"abstract_class = true\" that overrides the to_xml/to_json methods.  Use the Ruby sort method and spit out what you need.\n", "created_at": "2011-05-16 03:03:56", "user": 789801, "id": 1168813}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168814", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-02-10 13:31:23 UTC\n\nAlso, I just remembered OrderedHash is a subclass of Hash nowadays, so this probably already works as it should in 2.3.\n(That is, dumping as an unordered hash).\n", "created_at": "2011-05-16 03:03:56", "user": 789801, "id": 1168814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168815", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:03:57", "user": 789801, "id": 1168815}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168816", "text": "Attachments saved to Gist: http://gist.github.com/971609\n", "created_at": "2011-05-16 03:03:57", "user": 789801, "id": 1168816}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/1979\nCreated by **akia** - 2011-02-22 08:32:35 UTC\n\nThe syntax may be:  \n\n```\ngenerate scaffold Post title:string body:text comment:nested name:string message:text\n```\n\nThen Post and Comment resource will be created and Comment is nested in Post\n\nAnd nested model:  \n    generate model Post title:string body:text comment:nested name:string message:text\n\nAny idea about this feature?\n", "labels": [], "number": 595, "updated_at": "2011-05-16 03:11:47", "user": 789801, "closed_at": "2011-05-16 03:11:47", "id": 904183, "title": "Command to generate nested resource", "url": "https://api.github.com/repos/rails/rails/issues/595", "created_at": "2011-05-16 03:08:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168824", "text": "_Imported from Lighthouse._\nComment by **CancelProfileIsBroken** - 2009-04-22 21:23:25 UTC\n\nIf you have a patch, please submit + reopen. Note though that generator code is being rewritten for 3.0 so it might be best to hold off for a while.\n", "created_at": "2011-05-16 03:08:40", "user": 789801, "id": 1168824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168825", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:08:40", "user": 789801, "id": 1168825}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2067\nCreated by **Amiel Martin** - 2011-02-19 09:28:18 UTC\n\nIs there a reason that ActiveSupport::CoreExtensions::Numeric::Time#minutes (and hours) don't their own unit as a type when creating an ActiveSupport::Duration ?\n\n``` ruby\n# for example\ndef hours\n  ActiveSupport::Duration.new(self * 3600, [[:seconds, self * 3600]])\nend\n# could be\ndef hours\n  ActiveSupport::Duration.new(self * 1.hour, [[:hours, self]])\nend\n```\n\nThe problem is that this creates confusing output for ActiveSupport::Duration#inspect\n\n``` ruby\n# for example\n(1.month + 1.day + 5.minutes).inspect\n=> \"1 month, 1 day, and 300 seconds\"\n```\n\nI have included a patch with tests to show this example\n\nI can write the fixes, I just want to know if there is a reason for what is there.\n\nas a side note, I found this bug because I wanted to add functionality for outputting a number in seconds to a sentence.\n\nI wrote this: http://gist.github.com/69934 which I was planning to add to ActiveSupport::Duration until I noticed #inspect.\nAnother question is? does it make sense to use ActiveSupport::Duration#inspect for user output? should I add something like the method I wrote that can pull apart a number in seconds and still output a nice sentence (like: 65.seconds.inspect # => \"1 minute and 5 seconds\")?\n", "labels": [], "number": 596, "updated_at": "2011-05-21 15:11:49", "user": 789801, "closed_at": "2011-05-21 15:11:48", "id": 904184, "title": "Numeric::Time is not consistent giving confusing results to Duration#inspect", "url": "https://api.github.com/repos/rails/rails/issues/596", "created_at": "2011-05-16 03:08:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168826", "text": "_Imported from Lighthouse._\nComment by **Amiel Martin** - 2009-02-25 06:04:35 UTC\n\nanother idea is to write a method in ActiveSupport::Duration that \"normalizes\" internal data.\n\n``` ruby\n# example\n>> 65.seconds\n=> 65 seconds\n>> 65.seconds.parts\n=> [[:seconds, 65]]\n>> 65.seconds.normalize\n=> 1 minute and 5 seconds\n>> 65.seconds.normalize.parts\n=> [[:minutes, 1], [:seconds, 5]]\n```\n\nany thoughts?\n", "created_at": "2011-05-16 03:08:41", "user": 789801, "id": 1168826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168827", "text": "_Imported from Lighthouse._\nComment by **Amiel Martin** - 2009-02-25 06:09:28 UTC\n\nor, maybe this would be better\n\n``` ruby\n>> 5.seconds + 1.minute\n=> 65 seconds\n>> _.humanize\n=> \"1 minute and 5 seconds\"\n```\n\nI'm happy to implement any of the above, the only question is which.\n", "created_at": "2011-05-16 03:08:49", "user": 789801, "id": 1168827}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2104\nCreated by **Charles Oliver Nutter** - 2009-02-28 23:53:35 UTC\n\nCurrently script/console (via railties/lib/commands/console.rb) launches the actual IRB session using exec and by default \"irb\". However this causes problems for many reasons:\n- Implementations may not have IRB installed as IRB; for example, in JRuby it's \"jirb\", and I have Ruby 1.9 installed as irb1.9.\n- For implementations with a slower process startup time, this penalizes them. JRuby has to start the JVM twice. On platforms or JVM versions with slow startup, this causes us to be doubly slow.\n- On platforms where exec doesn't actually replace the calling process, this cases two processes to be in memory rather than just the one. This affects JRuby and running any impls on Windows.\n\nThe odd thing is that it doesn't appear that the exec is actually necessary. I'm attaching a patch that simply launches IRB from within the same process. This resolves all issues I list above. It may not be perfect but it should be a good starting point.\n\nFWIW, the reason it works at all in JRuby is because we have long had a hack in \"exec\" logic that if the command being executed is \"irb\" we force it to run in the same JVM. But it's buggy, and we'd like to be able to get rid of that.\n", "labels": [], "number": 597, "updated_at": "2011-05-21 15:11:49", "user": 789801, "closed_at": "2011-05-21 15:11:49", "id": 904190, "title": "script/console execs irb, causes double process-launch and limits other impls", "url": "https://api.github.com/repos/rails/rails/issues/597", "created_at": "2011-05-16 03:11:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168840", "text": "_Imported from Lighthouse._\nComment by **Charles Oliver Nutter** - 2009-02-28 23:58:00 UTC\n\nI just noticed that the script/console script also requires config/boot, which means that the exec is also causing a second load of Rails and the application. So this fix would potentially improve the startup time of the console on all implementations.\n", "created_at": "2011-05-16 03:11:32", "user": 789801, "id": 1168840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168841", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-03-01 01:04:46 UTC\n\n(from [3b169cd693f45911ee71e26708fb9267811c8d83]) Speed up script/console by launching IRB directly.\n\n[#2104 state:committed]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\nhttp://github.com/rails/rails/commit/3b169cd693f45911ee71e26708fb9267811c8d83\n", "created_at": "2011-05-16 03:11:33", "user": 789801, "id": 1168841}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168842", "text": "_Imported from Lighthouse._\nComment by **JasonKing** - 2009-03-02 01:38:42 UTC\n\nFix for the bug iffy mentions here: http://github.com/rails/rails/commit/3b169cd693f45911ee71e26708fb9267811c8d83#comments\n", "created_at": "2011-05-16 03:11:33", "user": 789801, "id": 1168842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168843", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-03-02 03:04:51 UTC\n\n(from [04fdb6eccb3a49b26bdbf779031f427da23a8bb4]) Revert \"Speed up script/console by launching IRB directly.\"\n\n[#2104 state:open]\n\nThis reverts commit 3b169cd693f45911ee71e26708fb9267811c8d83.\nhttp://github.com/rails/rails/commit/04fdb6eccb3a49b26bdbf779031f427da23a8bb4\n", "created_at": "2011-05-16 03:11:34", "user": 789801, "id": 1168843}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168844", "text": "_Imported from Lighthouse._\nComment by **Charles Oliver Nutter** - 2009-03-03 14:43:21 UTC\n\nI noticed the whole commit was reverted, even though a fix was proposed. Is there something else wrong with the change?\n", "created_at": "2011-05-16 03:11:34", "user": 789801, "id": 1168844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168845", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-03-03 16:45:10 UTC\n\nThe fix doesn't work. The environment has already been loaded by boot.rb at that point.\n", "created_at": "2011-05-16 03:11:34", "user": 789801, "id": 1168845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168846", "text": "_Imported from Lighthouse._\nComment by **JasonKing** - 2009-03-03 22:01:02 UTC\n\nUmm, my fix does work, it moves the command line arg parsing into railties/bin/console before the boot is loaded.\n", "created_at": "2011-05-16 03:11:35", "user": 789801, "id": 1168846}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168847", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-03-03 22:49:54 UTC\n\nSorry Jason, I misread your patch.\n", "created_at": "2011-05-16 03:11:35", "user": 789801, "id": 1168847}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168848", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-03-08 20:32:27 UTC\n\nPostponing this since existing apps' script/console will appear to work but load the wrong environment. Fixing it will require everyone to `rake rails:update:scripts` which hasn't been part of the 2.3 RC.\n", "created_at": "2011-05-16 03:11:35", "user": 789801, "id": 1168848}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168849", "text": "_Imported from Lighthouse._\nComment by **Charles Oliver Nutter** - 2009-03-13 13:18:31 UTC\n\nCouldn't the new console behavior be added in a different file, and new script/console require that one instead? Then the old behavior would still work in existing apps and newly-generated apps would get the new behavior, starting up fastest, etc.\n\nI'd really like to see this get into 2.3.\n", "created_at": "2011-05-16 03:11:36", "user": 789801, "id": 1168849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168850", "text": "_Imported from Lighthouse._\nComment by **buddy12lbcat** - 2009-05-16 10:28:28 UTC\n\nhi, i wanted to add my 2 cents by saying that this issue should include the use of /usr/bin/env ruby sherbangs in multiple files. i need to be able to support a custom compiled ruby1.9 on production servers that use 1.8 system gems. unfortunately, console, dbconsole, and lots of other scripts use env to load (for me) the wrong ruby. \n\ni just returned from dhh and was inspired by his \"have it your way\" speech. in light of this, why can't we just have an optional RUBY_PATH constant that can be set explicitly if i need to. without it, the scripts do as expected, but if present, it just loads everything from that directory. this seems much cleaner and incurs less overhead than doing all manner of gyrations to \"detect\" ruby automagically. \n\ni guess i don't believe that convention over configuration means no explicit configuration at all. however implemented, it should be a clean one-line explicit statement.\n", "created_at": "2011-05-16 03:11:36", "user": 789801, "id": 1168850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168851", "text": "_Imported from Lighthouse._\nComment by **buddy12lbcat** - 2009-05-16 18:07:53 UTC\n\nok. so not to be a whiner without a solution, i've patched my rails to do the following:\n1) symlink /usr/local/ruby/bin -> /usr/local/ruby/<somerubyversion currently 1.9.1-p129>/bin\n2) replaced all /usr/bin/env ruby sherbangs with /usr/local/ruby/bin/ruby\n3) added RUBY_PATH = '/usr/local/ruby/bin' to boot.rb\n4) changed console.rb and other references to RUBY_PLATFORM to say irb = \"#{RUBY_PATH}/irb\" || RUBY_PLATFORM ... \n\nnot sure if this is generalizeable to other systems, but it seems to take care of most of my issues and allows me to switch ruby versions with just the symlink. i kept the symlink off the usual paths so it doesn't screw with my production 1.8 gems/paths. at the very least this will give me experience maintaining my own rails patches via git clone/rebase. :)\n", "created_at": "2011-05-16 03:11:36", "user": 789801, "id": 1168851}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168852", "text": "_Imported from Lighthouse._\nComment by **buddy12lbcat** - 2009-05-16 18:11:13 UTC\n\nsorry looks like lighthouse monkeyed with my post. #1 should say: symlink /usr/local/ruby/bin -> /usr/local/ruby/1.9.1-p129/bin\n", "created_at": "2011-05-16 03:11:37", "user": 789801, "id": 1168852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168853", "text": "_Imported from Lighthouse._\nComment by **buddy12lbcat** - 2009-05-16 19:07:44 UTC\n\nok. so maybe rails has done this before :) turns out that if you use rails -r /path/to/ruby it will reset all your shebangs. so don't need that. i have legacy code and don't run rails to create new projects at all so i missed that option. so that just leaves console using path/irb. i defer to the great oz that is rails core.\n", "created_at": "2011-05-16 03:11:37", "user": 789801, "id": 1168853}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168854", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:40 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:11:37", "user": 789801, "id": 1168854}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168855", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-06-17 06:11:34 UTC\n\nAny updates to this ticket?\n", "created_at": "2011-05-16 03:11:38", "user": 789801, "id": 1168855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168856", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:29 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:11:38", "user": 789801, "id": 1168856}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168857", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:30 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:11:39", "user": 789801, "id": 1168857}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168858", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:33:23 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:11:39", "user": 789801, "id": 1168858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168859", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:48:44 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:11:39", "user": 789801, "id": 1168859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168860", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:11:39", "user": 789801, "id": 1168860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168861", "text": "_Imported from Lighthouse._\nComment by **Charles Oliver Nutter** - 2010-11-24 07:47:51 UTC\n\nAny chance of getting this prioritized some day? JRuby itself starts up pretty fast, Rails less so...and with this double-booting it's almost unbearable.\n\nHere's a gist showing the differing times from starting up IRB alone, IRB with RubyGems (with a tweak in my env to speed it up), IRB with RubyGems and boot.rb, and the Rails 3 console. Compared to IRB alone, Rails 3's console takes an order of magnitude longer to start up, and compared to IRB + boot.rb, it's almost 2x, as you'd expect from double-initializing.\n\nhttps://gist.github.com/713286\n", "created_at": "2011-05-16 03:11:40", "user": 789801, "id": 1168861}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168862", "text": "_Imported from Lighthouse._\nComment by **Charles Oliver Nutter** - 2010-11-24 19:34:27 UTC\n\nAlso, to make it sound less snarky...I'd happily work with someone to get an acceptable patch put together.\n", "created_at": "2011-05-16 03:11:40", "user": 789801, "id": 1168862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168863", "text": "_Imported from Lighthouse._\nComment by **Jason King** - 2010-11-24 20:27:06 UTC\n\nI haven't really begun digging around in Rails3 yet, but I'm pretty sure your benchmarks should be including `config/application.rb` not `config/boot.rb`.  I think you'll get much more similar times then because `boot.rb` is only doing the Bundler setup now.\n\nYou'll get more similar times because... I think your change has been included in Rails3 as part of their general improvements.  Looking in [railties/lib/rails/commands/console.rb](https://github.com/rails/rails/blob/master/railties/lib/rails/commands/console.rb#L44) I see `IRB.start` now.\n", "created_at": "2011-05-16 03:11:41", "user": 789801, "id": 1168863}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168864", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:11:41", "user": 789801, "id": 1168864}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168865", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:11:41", "user": 789801, "id": 1168865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168866", "text": "Attachments saved to Gist: http://gist.github.com/971613\n", "created_at": "2011-05-16 03:11:42", "user": 789801, "id": 1168866}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2114\nCreated by **Ryan Neufeld** - 2011-02-17 06:48:07 UTC\n\nNeeded something to give me the beginning of the hour but it appears ActiveSupport lacks that. Code below\n\n``` ruby\ndef beginning_of_hour\n  change(:min => 0, :sec => 0, :usec => 0)\nend\n```\n\nahh, just realized this is more of a feature request :(, sorry.\n", "labels": [], "number": 598, "updated_at": "2012-04-24 14:13:44", "user": 789801, "closed_at": "2011-05-21 15:11:49", "id": 904191, "title": "ActiveSupport lacks beginning_of_hour", "url": "https://api.github.com/repos/rails/rails/issues/598", "created_at": "2011-05-16 03:11:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168867", "text": "_Imported from Lighthouse._\nComment by **Mat√≠as Flores** - 2009-09-27 14:05:34 UTC\n\n+1 for the feature\n\nI've attached a patch adding beginning_of_hour and end_of_hour support. Notice that there are two patch files, the first one applies to master and the other to 2-3-stable.\n", "created_at": "2011-05-16 03:11:42", "user": 789801, "id": 1168867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168868", "text": "_Imported from Lighthouse._\nComment by **hsume2 (Henry)** - 2009-09-27 14:13:25 UTC\n\n+1, verified both patches apply successfully\n", "created_at": "2011-05-16 03:11:43", "user": 789801, "id": 1168868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168869", "text": "_Imported from Lighthouse._\nComment by **Elomar Fran√ßa** - 2009-09-27 14:52:30 UTC\n\n+1, verified.\n\nAgree with the addition, and both patches apply.\n", "created_at": "2011-05-16 03:11:43", "user": 789801, "id": 1168869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168870", "text": "_Imported from Lighthouse._\nComment by **Mike Enriquez** - 2009-09-27 19:42:39 UTC\n\n+1 verified both patches.\nIt may be worth discussing if we need beginning_of_minute and beginning_of_second.\n", "created_at": "2011-05-16 03:11:44", "user": 789801, "id": 1168870}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168871", "text": "_Imported from Lighthouse._\nComment by **travis (at appoxy)** - 2010-01-28 21:20:39 UTC\n\n+1\n", "created_at": "2011-05-16 03:11:44", "user": 789801, "id": 1168871}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168872", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-02-12 12:46:14 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/13645)]\n", "created_at": "2011-05-16 03:11:45", "user": 789801, "id": 1168872}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168873", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:40 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:11:45", "user": 789801, "id": 1168873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168874", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:54:00 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:11:46", "user": 789801, "id": 1168874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168875", "text": "_Imported from Lighthouse._\nComment by **Oscar Del Ben** - 2011-02-12 10:38:24 UTC\n\nThis hasn't been added to rails 3. Before rolling out a patch again is the core team interested at all in adding the feature?\n\n[state:open]\n", "created_at": "2011-05-16 03:11:46", "user": 789801, "id": 1168875}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168876", "text": "Attachments saved to Gist: http://gist.github.com/971614\n", "created_at": "2011-05-16 03:11:47", "user": 789801, "id": 1168876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5305278", "text": "Why is it closed? I just had to add this patch to my local patches.\n", "created_at": "2012-04-24 14:13:44", "user": 263328, "id": 5305278}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2155\nCreated by **kwerle** - 2011-02-19 09:28:20 UTC\n\nlink_to_remote currently supports :position => :top, :bottom, :before, :after and implicitly supports :content (the contents of the element with the tag).  It seems natural to me to include :position => :replace for the times you want to replace the container element.\n\nThe current workaround is\n\n```\n<%= link_to_remote('text', ... %>\n```\n\ncoupled with\n\n```\n    respond_to do |format|\n      ...\n      format.js {\n        render(:update) do |page|\n          page.replace 'some_dom_id', :partial => 'new_content\n        end\n      }\n    end\n```\n\nand that works fine.  But it means your UI code needs to be even more tightly coupled to the controller, and it hardly seems DRY.\n\nWhat I'm suggesting seems cleaner and DRYer:\n\n```\n<%= link_to_remote('text', :position => :replace, ... %>\n```\n\ncoupled with\n\n```\n    respond_to do |format|\n      ...\n      format.js #no code needed\n    end\n```\n", "labels": [], "number": 599, "updated_at": "2011-05-16 03:18:14", "user": 789801, "closed_at": "2011-05-16 03:18:14", "id": 904192, "title": "Please add :position => :replace to link_to_remote (and family)", "url": "https://api.github.com/repos/rails/rails/issues/599", "created_at": "2011-05-16 03:11:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168877", "text": "_Imported from Lighthouse._\nComment by **Sai Emrys** - 2010-01-24 03:53:10 UTC\n\nAny progress on this? I'd like it too.\n", "created_at": "2011-05-16 03:11:48", "user": 789801, "id": 1168877}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168878", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:41 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:11:48", "user": 789801, "id": 1168878}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168879", "text": "_Imported from Lighthouse._\nComment by **Carsten Gehling** - 2010-06-15 05:52:39 UTC\n\nI think development focus is more on RJS, but I could sometimes need this too. I'll have a look and see what I can do.\n\n/Carsten\n", "created_at": "2011-05-16 03:11:48", "user": 789801, "id": 1168879}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168880", "text": "_Imported from Lighthouse._\nComment by **Carsten Gehling** - 2010-06-15 06:01:45 UTC\n\nIn the meantime, you could use :update and reference an immediate parent container.\n\n/Carsten\n", "created_at": "2011-05-16 03:11:48", "user": 789801, "id": 1168880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168881", "text": "_Imported from Lighthouse._\nComment by **Carsten Gehling** - 2010-06-15 06:09:14 UTC\n\n...or you could just put your responding RJS code in a template file:\n\n**youraction.rjs**\n\n```\npage.replace 'some_dom_id', :partial => 'new_conten\n```\n\nThen you've got your view/controller separation back\n\n/Carsten\n", "created_at": "2011-05-16 03:11:49", "user": 789801, "id": 1168881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168882", "text": "_Imported from Lighthouse._\nComment by **kwerle** - 2010-06-15 06:20:28 UTC\n\nThe problem with referencing the immediate parent is that you are then tightly coupling a partial to its container.  It just seems totally natural to 'replace self', as it were.\n\nWith rails3 on the horizon, I'm not sure if this makes sense in the rails3/unobtrusive world, but I still miss it in the 2.x world.\n", "created_at": "2011-05-16 03:11:49", "user": 789801, "id": 1168882}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168883", "text": "_Imported from Lighthouse._\nComment by **Carsten Gehling** - 2010-06-15 08:02:39 UTC\n\nAgreed, but it was also only meant as a short-term fix - until I saw how old this ticket is :-)\n\nBut better yet ATM is the rjs-template file to decouple controller and view code.\n\nI would say that even with unobtrusive JS in Rails3, this is still a valid issue. link_to_remote(:update => etc..) will still be usable. The only difference will be, that the javascript is not generated inline - instead you add some classnames and let an external JS handle the job. From a rails-programmers perspective, there will be no difference.\n\n/Carsten\n", "created_at": "2011-05-16 03:11:49", "user": 789801, "id": 1168883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168884", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:08:01 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:11:50", "user": 789801, "id": 1168884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169046", "text": "No longer relevant.\n", "created_at": "2011-05-16 03:18:14", "user": 9582, "id": 1169046}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [13420273]}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2188\nCreated by **Jonas Nicklas** - 2010-11-25 12:27:59 UTC\n\nIn Ruby 1.9 translating Strings which have non-ascii characters in them does not work for me.\n\nIf I have keys like this is my translation file:\n\n```\n\"sv\":\n  test1: blah\n  test2: bl√•h\n```\n\nCalling this works fine:\n\n```\nI18n.translate(:test1)\n```\n\nHowever, calling this raises an exception:\n\n```\nI18n.translate(:test2)\n```\n\nHere's the error:\n\n```\nActionView::TemplateError (incompatible character encodings: ASCII-8BIT and UTF-8)\n```\n\nThis is the same error as in #2038, I did run this against edge Rails and it looked like the patch from #2038 has been applied, so I am assuming this is a different issue.\n", "labels": [], "number": 600, "updated_at": "2011-05-16 03:19:09", "user": 789801, "closed_at": "2011-05-16 03:19:09", "id": 904193, "title": "i18n fails with multibyte Strings in Ruby 1.9 (similar to #2038)", "url": "https://api.github.com/repos/rails/rails/issues/600", "created_at": "2011-05-16 03:11:50", "comments": [{"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168885", "text": "_Imported from Lighthouse._\nComment by **Jonas Nicklas** - 2009-03-18 22:19:12 UTC\n\nI figured out now that I18n isn't the culprit. I18n.t returns a UTF-8 string, the issue seems to be that templates by default are ASCII-8BIT encoded, and when a UTF-8 string is used they switch over.\n\n<%= \"√•\" %><%= \"√•\".encoding %>\n\nWorks, and would return '√•ASCII-8BIT'\n\n<%= \"√•\".force_encoding('utf-8') %>\n\nAlso works. However:\n\n<%= \"√•\" %><%= \"√•\".force_encoding('utf-8') %>\n\nFails with the above mentioned error.\n\nI have attached a test case that proves the bug.\n", "created_at": "2011-05-16 03:11:51", "user": 789801, "id": 1168885}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168886", "text": "_Imported from Lighthouse._\nComment by **Mauricio Eduardo Szabo** - 2009-03-26 01:36:44 UTC\n\nI confirm this error on Rails 2.3.2 and Ruby1.9.\n\nIf, for example, I add on one controller:\n@errors = [\"√Å\", 'B√™']\n\nOn any view, a simple:\n<%= @errors.inspect %>\n\nthrows the error\nincompatible character encodings: ASCII-8BIT and UTF-8\n", "created_at": "2011-05-16 03:11:51", "user": 789801, "id": 1168886}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168887", "text": "_Imported from Lighthouse._\nComment by **Hector E. Gomez Morales** - 2009-03-27 18:58:06 UTC\n\nThe problem is erb code in ruby 1.9 distribution. When it compiles the template code it forces a 'ASCII-8bit' encoding, the problem is when the template code has multibyte characters the template code is returned in a 'ASCII-8bit' string and when this string is concat with a 'UTF8' string with multibyte character the exception is raised because the strings between this encodings are only compatible when both only have seven-bit characters.\n\nThis patch is the result of my research for my proposal for end to end encoding support for rails.\nI am working for a patch for erb to resolve this problem.\nThe included patch is quick hack to force the encoding of the template method code to be utf-8.\n#1988 is a duplicate of this bug.\n", "created_at": "2011-05-16 03:11:52", "user": 789801, "id": 1168887}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168888", "text": "_Imported from Lighthouse._\nComment by **crazy_bug (at terletzki)** - 2009-04-06 12:57:49 UTC\n\nHello!\nWe've got the same problem! Only the error occurs when we fetch data from the database. We're using Mysql and Charset is UTF-8, but the Active Record returns ASCII-8BIT. Is it possible to do similar changes to the activerecord as you did to the actionpack? Seems as we're not the only ones with that problem (http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/45cf95921c8fe21f/8864497725a0a4af?lnk=raot). Can somebody help me with this? Thanks!\n", "created_at": "2011-05-16 03:11:53", "user": 789801, "id": 1168888}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168889", "text": "_Imported from Lighthouse._\nComment by **Hector E. Gomez Morales** - 2009-04-06 14:03:36 UTC\n\nI will take a look I will post any findings\n", "created_at": "2011-05-16 03:11:53", "user": 789801, "id": 1168889}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168890", "text": "_Imported from Lighthouse._\nComment by **Hector E. Gomez Morales** - 2009-04-10 15:38:13 UTC\n\nHi, sorry to be so late but I got some solutions to this problem\nplease take a look to #2476\n", "created_at": "2011-05-16 03:11:55", "user": 789801, "id": 1168890}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168891", "text": "_Imported from Lighthouse._\nComment by **Mauricio Eduardo Szabo** - 2009-04-13 13:18:52 UTC\n\nHector, sorry but this is not my problem. My problem is not when I fetch data from a database, it's on template rendering, as I shown on my previous post. The ERB Workaround, by the way, worked for me.\n\n(By the way, I use the postgres-pr adapter to fetch data from my database)\n", "created_at": "2011-05-16 03:11:55", "user": 789801, "id": 1168891}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168892", "text": "_Imported from Lighthouse._\nComment by **hkstar** - 2009-04-19 22:12:21 UTC\n\n+1 to Hector's workaround-erb.diff patch, works for me.\n", "created_at": "2011-05-16 03:11:55", "user": 789801, "id": 1168892}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168893", "text": "_Imported from Lighthouse._\nComment by **Portfonica** - 2009-04-20 00:07:44 UTC\n\nI'm afraid hector's patch doesn't resolve the problem with another template system such as HAML. :-/ So I think this patch isn't useful.\n", "created_at": "2011-05-16 03:11:56", "user": 789801, "id": 1168893}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168894", "text": "_Imported from Lighthouse._\nComment by **Hector E. Gomez Morales** - 2009-04-21 00:14:20 UTC\n\nThis patch is concerned with erb as the default templating engine, that I think a lot of people use. If you have a particular haml template that presents the same problem can you provide it so I can dig out the proper fix.\n", "created_at": "2011-05-16 03:11:57", "user": 789801, "id": 1168894}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168895", "text": "_Imported from Lighthouse._\nComment by **qoobaa** - 2009-05-12 22:31:00 UTC\n\nI've created the patch that fixes problems described by Jonas Nicklas. Now everything in views is encoded using UTF-8. The bad news are that a lot of things are broken now. Described problems with HAML may be caused by Rack params encoding (ASCII-8BIT), sqlite3-ruby strings encoding (ASCII-8BIT). I've created the ticket in Rack's lighthouse, we need also to fix sqlite3-ruby gem. Does anybody use mysql or pg gems? Are they broken also?\n", "created_at": "2011-05-16 03:11:58", "user": 789801, "id": 1168895}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168896", "text": "_Imported from Lighthouse._\nComment by **Mauricio Eduardo Szabo** - 2009-05-13 15:39:37 UTC\n\nwith templates_using_utf_8_encoding patch, I confirm there are problems with the postgresql gem (even with the postgres-pr gem).\n\nOne more thing, now line errors on templates are wrong (when I have an error on line #14, rails says it's on line #15).\n", "created_at": "2011-05-16 03:11:58", "user": 789801, "id": 1168896}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168897", "text": "_Imported from Lighthouse._\nComment by **Manfred Stienstra** - 2009-05-13 15:46:03 UTC\n\nAlso, the utf_8_encoding patch assumes that everyone will want to use UTF-8 in their templates, this might not be the case.\n", "created_at": "2011-05-16 03:11:59", "user": 789801, "id": 1168897}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168898", "text": "_Imported from Lighthouse._\nComment by **qoobaa** - 2009-05-13 16:14:40 UTC\n\nUTF-8 encoding may be changed easily (we can put ome variable there), but we've to provide some configuration for that (in environment.rb?). I've fixed issue in sqlite3-ruby gem (http://github.com/qoobaa/sqlite3-ruby), however it has no UTF-16 support yet (to be done). I've tried to fix pg gem, but I need to read Posgtres documentation first to do it (the version in my repository uses UTF-8 as default encoding). I've also created the ticket on Rack's lighthouse.\n", "created_at": "2011-05-16 03:12:00", "user": 789801, "id": 1168898}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168899", "text": "_Imported from Lighthouse._\nComment by **Portfonica** - 2009-05-26 11:41:25 UTC\n\nHector: I don't any solution, I have only a hack. You can put those lines into your environment.rb\n\nEncoding.default_internal = 'utf-8'\nEncoding.default_external = 'utf-8'\n\nOh, hack != solution :)\n", "created_at": "2011-05-16 03:12:00", "user": 789801, "id": 1168899}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168900", "text": "_Imported from Lighthouse._\nComment by **Anton Ageev** - 2009-05-31 11:54:21 UTC\n\nStrings in params[] have ASCII-8BIT encoding too. Is it Rack issue?\n", "created_at": "2011-05-16 03:12:01", "user": 789801, "id": 1168900}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168901", "text": "_Imported from Lighthouse._\nComment by **Anton Ageev** - 2009-05-31 12:00:36 UTC\n\n> Hector: I don't any solution, I have only a hack. You can put those lines into your environment.rb\n\n```\nEncoding.default_internal = 'utf-8'\nEncoding.default_external = 'utf-8'\n```\n\nThis doesn't work for me.\n", "created_at": "2011-05-16 03:12:02", "user": 789801, "id": 1168901}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168902", "text": "_Imported from Lighthouse._\nComment by **qoobaa** - 2009-05-31 12:42:18 UTC\n\nThe params ASCII-8BIT encoding is a Rack issue: http://rack.lighthouseapp.com/projects/22435/tickets/48-rackutilsunescape-problems-in-ruby-191#ticket-48-1\n\nChanging the default internal and external encoding also doesn't work in my app.\n", "created_at": "2011-05-16 03:12:02", "user": 789801, "id": 1168902}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168903", "text": "_Imported from Lighthouse._\nComment by **Adam S** - 2009-07-22 15:56:17 UTC\n\nI'm also seeing this issue with Ruby 1.9 and HAML templates.\nIt's very annoying and confusing... I think the only solution is for Rails to set a default encoding in environment.rb and then do translation from other encodings...\nRaising errors for every encoding type is silly.\nI basically want my whole app to use utf8, others may want another encoding, then fine just put it in environment.rb.\n", "created_at": "2011-05-16 03:12:03", "user": 789801, "id": 1168903}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168904", "text": "_Imported from Lighthouse._\nComment by **J√©r√¥me** - 2009-08-15 23:44:46 UTC\n\nIt would be just definitely great if rails could avoid us editing all our files containing unicode characters, _all_ ruby files. I feel like getting a regression with ruby1.9 when I have to add a # encoding: utf-8 header to my hundreds of files...\n", "created_at": "2011-05-16 03:12:03", "user": 789801, "id": 1168904}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168905", "text": "_Imported from Lighthouse._\nComment by **Rocco Di Leo** - 2009-08-26 02:44:33 UTC\n\nI also would like to see a environment line where one can set the application wide encoding instead of adding magic comments to all files. Also i did not manage to add magic comments to the .erb files, how would this work? \n\nAt least those two possibilities did not work for me:\n\n<%#= encoding: utf-8 %>\n<%# encoding: utf-8 %>\n\n-act\n", "created_at": "2011-05-16 03:12:04", "user": 789801, "id": 1168905}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168906", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-08-26 05:58:41 UTC\n\nYou guys aren't saying _where_ you get these Encoding errors. Please include backtraces or, better, failing test cases so we can reproduce.\n\nUTF-8 is already the default external encoding. The magic comments are only if you want to write a template in a _different_ encoding than the default.\n", "created_at": "2011-05-16 03:12:04", "user": 789801, "id": 1168906}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168907", "text": "_Imported from Lighthouse._\nComment by **Rocco Di Leo** - 2009-08-26 12:32:32 UTC\n\nReproduce the problem by using this process\n\n``` codeblock\nrails utf8errors -d mysql\n# add credentials if necessary to config/database.yml\ncd utf8errors\nrake db:create\nscript/generate controller utf8errors index\nscript/generate model user\n\n# add \"t.string :name\" to the migration file before next step\nrake db:migrate\ntouch app/views/utf8errors/_partial.html.erb\necho \"Multibyte String √∂√§√º works here\" >> app/views/utf8errors/_partial.html.erb\necho \"Multibyte String √∂√§√º works here\" >> app/views/utf8errors/_partial.html.erb\necho \"Inserting User with multibyte characters\" >> app/views/utf8errors/_partial.html.erb\necho \"<% User.create(:name => 'Multibyte Username √∂√§√º') %>\" >> app/views/utf8errors/_partial.html.erb\necho \"Multibyte String from database does NOT work now:\" >> app/views/utf8errors/_partial.html.erb\necho \"<% User.all.each do |u| %>\" >> app/views/utf8errors/_partial.html.erb\necho \"<%= u.name %>\" >> app/views/utf8errors/_partial.html.erb\necho \"<% end %>\" >> app/views/utf8errors/_partial.html.erb\necho \"<%= render :partial => 'partial' %>\" >> app/views/utf8errors/index.html.erb \n```\n\n# take care to use ruby 1.9.1 when starting the server\n\n./script/server \n\n=> surf to http://127.0.0.1:3000/utf8errors # should display the error\n\n``````\n\nThe error does NOT appear when using the workaround patch by hector which adds the line\nsource.force_encoding('utf-8') if '1.9'.respond_to?(:force_encoding) to the actionpack/lib/action_view/renderable.rb\n\nBacktrace:\n``` backtrace\nActionView::TemplateError (incompatible character encodings: ASCII-8BIT and UTF-8) on line #7 of app/views/utf8errors/_partial.html.erb:\n4: <% User.create(:name => 'Multibyte Username √∂√§√º') %>\n5: Multibyte String from database does NOT work now:\n6: <% User.all.each do |u| %>\n7: <%= u.name %>\n8: <% end %>\n\n    app/views/utf8errors/_partial.html.erb:7:in `concat'\n    app/views/utf8errors/_partial.html.erb:7:in `block in _run_erb_app47views47utf8errors47_partial46html46erb_locals_object_partial'\n    app/views/utf8errors/_partial.html.erb:6:in `each'\n    app/views/utf8errors/_partial.html.erb:6\n    app/views/utf8errors/index.html.erb:3\n    <internal:prelude>:8:in `synchronize'\n    /usr/local/lib/ruby19/1.9.1/webrick/httpserver.rb:111:in `service'\n    /usr/local/lib/ruby19/1.9.1/webrick/httpserver.rb:70:in `run'\n    /usr/local/lib/ruby19/1.9.1/webrick/server.rb:183:in `block in start_thread'\n\nRendered rescues/_trace (80.9ms)\nRendered rescues/_request_and_response (0.9ms)\nRendering rescues/layout (internal_server_error)\n``````\n\nI hope this helps and that the formatting is working...\n\n-act\n", "created_at": "2011-05-16 03:12:05", "user": 789801, "id": 1168907}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168908", "text": "_Imported from Lighthouse._\nComment by **Rocco Di Leo** - 2009-08-26 12:35:16 UTC\n\nokay the formatting is kinda broken but i think you get the idea ... in addition, it should fail with Ruby 1.9 (instead of 1.9.1) as well. Also the problem arises with postgresql too (havent tested sqlite3.\n\n-act\n", "created_at": "2011-05-16 03:12:06", "user": 789801, "id": 1168908}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168909", "text": "_Imported from Lighthouse._\nComment by **Rocco Di Leo** - 2009-08-26 13:11:35 UTC\n\nOne more note. I just rechecked this process with postgresql 8.4 and in this case the workaround-erb patch by hector is NOT working. Sorry for the confusion before. So summarized for my Setup:\n\nRuby 1.9.x + Rails 2.3.3 + Mysql 5.1 => not working\nRuby 1.9.x + Rails 2.3.3 + with hector patch + Mysql 5.1  => working\nRuby 1.9.x + Rails 2.3.3 (with and without hector patch) + Postgresql 8.4 => not working\n\nGreets\n-act\n", "created_at": "2011-05-16 03:12:06", "user": 789801, "id": 1168909}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168910", "text": "_Imported from Lighthouse._\nComment by **Adam S** - 2009-08-26 13:11:54 UTC\n\nAre you sure this isn't the mysql gem?\n\nI used the process here: and I can create multibyte users etc. In fact no real issues with multibyte now...\n\nhttp://www.taylorluk.com/articles/2009/08/12/ruby-19-and-passenger\n\nAlso used this adapter for sqlite3:\n\nhttp://github.com/qoobaa/sqlite3-ruby/tree/master\n", "created_at": "2011-05-16 03:12:06", "user": 789801, "id": 1168910}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168911", "text": "_Imported from Lighthouse._\nComment by **Rocco Di Leo** - 2009-08-26 14:25:53 UTC\n\nthank you, i updated from mysql gem 2.7 to the self-built 2.81 .. with the process above i got the error 'uninitialized constant Encoding::UTF' accessing http://localhost:3000/utf8errors using Rails 2.3.3\n\nwhen i changed in Rack::utils.rb \n\nRUBY_VERSION >= \"1.9\" ? result.force_encoding(Encoding::UTF-8) : result\n\nfor \n\nRUBY_VERSION >= \"1.9\" ? result.force_encoding('utf-8') : result\n\nthe rendering worked indeed.\n\nHere is the output without alteration for the interested:\n\n``` errors\n\n[2009-08-26 16:19:01] ERROR NameError: uninitialized constant Encoding::UTF\n    /usr/local/lib/ruby19/gems/1.9.1/gems/activesupport-2.3.3/lib/active_support/dependencies.rb:105:in `rescue in const_missing'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/activesupport-2.3.3/lib/active_support/dependencies.rb:94:in `const_missing'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/rack-1.0.0/lib/rack/utils.rb:27:in `unescape'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/rails-2.3.3/lib/rails/rack/static.rb:36:in `file_exist?'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/rails-2.3.3/lib/rails/rack/static.rb:18:in `call'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/rack-1.0.0/lib/rack/urlmap.rb:46:in `block in call'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/rack-1.0.0/lib/rack/urlmap.rb:40:in `each'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/rack-1.0.0/lib/rack/urlmap.rb:40:in `call'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/rails-2.3.3/lib/rails/rack/log_tailer.rb:17:in `call'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/rack-1.0.0/lib/rack/content_length.rb:13:in `call'\n    /usr/local/lib/ruby19/gems/1.9.1/gems/rack-1.0.0/lib/rack/handler/webrick.rb:46:in `service'\n    /usr/local/lib/ruby19/1.9.1/webrick/httpserver.rb:111:in `service'\n    /usr/local/lib/ruby19/1.9.1/webrick/httpserver.rb:70:in `run'\n    /usr/local/lib/ruby19/1.9.1/webrick/server.rb:183:in `block in start_thread'\n\nerrors\n\n\nHowever, to recap: Does the Problem lie in the database connectors? This would mean one must wait for updated versions of the pg and probably mysql gem ...\n\ngreets\n-act\n```\n", "created_at": "2011-05-16 03:12:07", "user": 789801, "id": 1168911}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168912", "text": "_Imported from Lighthouse._\nComment by **Rocco Di Leo** - 2009-08-26 15:02:44 UTC\n\nOkay, i now reinstalled actionpack, rack and the pg-gem. Postgresql works now without any modification. Also the Encoding:: Error has disappeared. I don't know why the problem occured before but for now the problem is solved. When using MySQL, the 2.81-Version is needed as discussed. I will recheck on different machines and operation systems later since there must be some bug or unlucky condition somewhere which results in the problem before.\n", "created_at": "2011-05-16 03:12:07", "user": 789801, "id": 1168912}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168913", "text": "_Imported from Lighthouse._\nComment by **Manfred Stienstra** - 2009-08-26 15:07:53 UTC\n\nRocco, first off: thanks for all the effort you're putting into this! Do you think you can do all your investigating first and post a short summary with proper formatting afterwards? It's becoming hard to find actual information in your torrent of posts.\n", "created_at": "2011-05-16 03:12:08", "user": 789801, "id": 1168913}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168914", "text": "_Imported from Lighthouse._\nComment by **engineerDave** - 2009-09-23 05:53:53 UTC\n\nI get this error just by having quotes in the text being displayed. \n\nActionView::TemplateError (incompatible character encodings: UTF-8 and ASCII-8BIT) on line #30 \n...\n  app/views/blogs/index.html.erb:30:in `concat'\n    app/views/blogs/index.html.erb:30:in`block in _run_erb_app47views47blogs47index46html46erb'\n    app/views/blogs/index.html.erb:27:in `each'\n    app/views/blogs/index.html.erb:27\n    app/controllers/blogs_controller.rb:33:in`index'\n    internal:prelude:8:in `synchronize'\n    thin (1.2.4) lib/thin/connection.rb:76:in`block in pre_process'\n    thin (1.2.4) lib/thin/connection.rb:74:in `catch'\n    thin (1.2.4) lib/thin/connection.rb:74:in`pre_process'\n    thin (1.2.4) lib/thin/connection.rb:57:in `process'\n    thin (1.2.4) lib/thin/connection.rb:42:in`receive_data'\n    eventmachine (0.12.8) lib/eventmachine.rb:242:in `run_machine'\n    eventmachine (0.12.8) lib/eventmachine.rb:242:in`run'\n    thin (1.2.4) lib/thin/backends/base.rb:57:in `start'\n    thin (1.2.4) lib/thin/server.rb:156:in`start'\n    thin (1.2.4) lib/thin/controllers/controller.rb:80:in `start'\n    thin (1.2.4) lib/thin/runner.rb:174:in`run_command'\n    thin (1.2.4) lib/thin/runner.rb:140:in `run!'\n    thin (1.2.4) bin/thin:6:in`<top (required)>'\n    /usr/local/bin/thin:19:in `load'\n    /usr/local/bin/thin:19:in`<main>'\n", "created_at": "2011-05-16 03:12:08", "user": 789801, "id": 1168914}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168915", "text": "_Imported from Lighthouse._\nComment by **Adam S** - 2009-09-23 06:27:20 UTC\n\nI'm not sure why people are using multibtye characters in most html... shouldn't you be using html entities? [1]  Most (all?) html can be rendered using just the standard ASCII character set.\n\nI don't have any issues with encoding and the latest rails gems.\n\nPlease try checking your app for bad encodings... [2] You may have some invisible encodings in your templates or be using a non-standard version of the quote char...\n\n[1] http://www.w3schools.com/tags/ref_entities.asp\n[2] http://github.com/adamsalter/bad_encodings-ruby19/tree\n", "created_at": "2011-05-16 03:12:08", "user": 789801, "id": 1168915}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168916", "text": "_Imported from Lighthouse._\nComment by **James Healy** - 2009-09-23 06:34:45 UTC\n\n\"I'm not sure why people are using multibtye characters in most html... shouldn't you be using html entities?\"\n\nThere's nothing saying you _should_ use entities is there (other than for reserved chars like &, etc)?\n\nUnicode has a hell of a lot more characters than there are HTML entities. As an example, what about asian, indic and arabic scripts?\n", "created_at": "2011-05-16 03:12:09", "user": 789801, "id": 1168916}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168917", "text": "_Imported from Lighthouse._\nComment by **yury** - 2009-10-31 20:40:57 UTC\n\n+1 to Hector's workaround-erb.diff patch, works for me too.\n", "created_at": "2011-05-16 03:12:09", "user": 789801, "id": 1168917}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168918", "text": "_Imported from Lighthouse._\nComment by **Adam S** - 2009-11-09 01:10:51 UTC\n\nThis patch works for me (with Erb templates at least).\n\nNathan Weizenbaum has just made a commit to fix this issue in HAML.\n\nhttp://github.com/nex3/haml/commit/76bd406875920079bb26445ddeb0d3842e825f01\n\nAfter thinking about this and spending quite a lot of time trying to track it down I think the best fix would be for Ruby1.9/Rails to include a encoding converter ASCII-8BIT <=> UTF-8.\nIf Rails included this then it would fix all the rails issues anyway.\nClearly UTF-8 to ASCII-8BIT is a no-op, it's essentially the same as using force_encoding, but ASCII-8BIT to UTF-8 would mean that you could depend on all data to be valid UTF-8. It would really make life so much easier.\nIt would also meant that Rails didn't have to 'force_encoding' anything. It would use the natural encoding converter for any string and if people wanted to run in a different encoding they could still specify it on the command-line.\nFor full support it would actually require ASCII-8BIT <=> 'chosen encoding', but UTF-8 would be a great start.\nI know almost nothing about adding encoding converters to Ruby1.9, but this seems like the most forward compatible change. Data would pass through all levels, Rack, DB, Rails, and be compatible (at least for UTF-8, initially).\n", "created_at": "2011-05-16 03:12:09", "user": 789801, "id": 1168918}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168919", "text": "_Imported from Lighthouse._\nComment by **hkstar** - 2009-11-18 07:03:18 UTC\n\nCan this be merged into 2.3-stable, please?\n\nIt was freaking 6 months ago.\n\nHector's workaround-erb.diff solved the problem and as far as I'm concerned UTF8 is the standard and everyone should use it. Opinionated software, remember?\n\n@Adam S: \"I'm not sure why people are using multibtye characters in most html\"\n\nWhat on earth are you talking about? Almost every language other than english has multibyte characters and they are, of course, going to be placed in HTML files. Where else would they go? What a ridiculous comment.\n", "created_at": "2011-05-16 03:12:10", "user": 789801, "id": 1168919}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168920", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-11-18 07:47:02 UTC\n\nThe workaround is just as broken as it was six months ago. Please do investigate.\n", "created_at": "2011-05-16 03:12:10", "user": 789801, "id": 1168920}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168921", "text": "_Imported from Lighthouse._\nComment by **Vladimir Penkin** - 2009-11-27 12:09:18 UTC\n\nRails 2.3.5 : Not working, \nRails 2.3.5 + Hector patch: Working.\n", "created_at": "2011-05-16 03:12:11", "user": 789801, "id": 1168921}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168922", "text": "_Imported from Lighthouse._\nComment by **Jonas Nicklas** - 2009-11-27 12:49:22 UTC\n\nSo the alternatives are:\n1) Pretty much every real world Rails app anywhere is broken on Ruby 1.9\n2) The patch is applied and we simply assume UTF-8 for templates. Which _everyone_ uses anyway.\n\nHow is that broken? Since no one has provided a better solution over the last six months, shouldn't we just apply this, and _if_ someone needs to change the encoding used in templates, then they can patch it properly so we they choose the encoding.\n\nAs mentioned above, Rails is oppinionated software, why can't we have an oppinion on what encoding people should use?\n", "created_at": "2011-05-16 03:12:11", "user": 789801, "id": 1168922}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168923", "text": "_Imported from Lighthouse._\nComment by **Michael Hasenstein** - 2009-11-27 14:19:00 UTC\n\nI applied the one-line patch to my just installed Rails 2.3.5 - but it does not help. Well, it does help with one issue: I no longer get an error when a partial is to be rendered. Instead I now get an error later, where I call a helper function in the view which <%= some_function() %> which returns some HTML.\n\n\"incompatible character encodings: UTF-8 and ASCII-8BIT\" once more.\n\nGiven these issues, how can ANYONE be using ruby 1.9.1 at this point? Or are those who are able to use it using ASCII as default encoding for all files? I (most certainly!) use UTF-8, as it should be in this world. The ASCII-60s and 70s and maybe 80s are long over...\n\nI'm not (usually) concerned with the inner workings of ruby and rails, just use it (even though I consider myself \"hard-core\" in other fields I don't want to become an expert with _everything_). What I find disturbing is that I find no guidelines on Rails and Ruby 1.9.1. I just _assumed_ it should be working by now, since I read a lot of \"fixed ruby 1.9 compatibility issues\" in Rails and Passenger.\n\nDoes (all of) this discussion mean it isn't so, it's still experimental? I cannot imagine my application is very special.\n", "created_at": "2011-05-16 03:12:12", "user": 789801, "id": 1168923}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168924", "text": "_Imported from Lighthouse._\nComment by **Manfred Stienstra** - 2009-11-27 14:31:05 UTC\n\n> Given these issues, how can ANYONE be using ruby 1.9.1 at this point?\n\nI assume nobody is running applications on 1.9. The encoding changes are in Ruby are pretty big and it will take a lot of work to resolve all the encoding issues in all libraries and Rails.\n", "created_at": "2011-05-16 03:12:13", "user": 789801, "id": 1168924}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168925", "text": "_Imported from Lighthouse._\nComment by **Mezza** - 2009-11-27 17:33:31 UTC\n\nWith regards to the postgres pg gem (not the pure ruby version), I originally encountered issues with encoding with the 0.8.0 version of the gem, but the developers of the gem seem to have applied a patch which works fine in the following branch:\n\nhttp://ruby-pg.rubyforge.org/svn/ruby-pg/branches/i17n-19-patches/\n\nThe relevant issue is here:\n\nhttp://rubyforge.org/tracker/?func=detail&aid=25931&group_id=3214&atid=12398\n", "created_at": "2011-05-16 03:12:13", "user": 789801, "id": 1168925}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168926", "text": "_Imported from Lighthouse._\nComment by **Anton Ageev** - 2009-11-27 17:37:43 UTC\n\n> I assume nobody is running applications on 1.9. The encoding changes are in Ruby are pretty big and it will take a lot of work to resolve all the encoding issues in all libraries and Rails.\n\nI am running rails application on 1.9.1.\n\nI use two monkey patches: `config/initializers/fix_renderable.rb` (Hector's patch) and `config/initializers/fix_params.rb`.\n\nAnd I patched postgres gem (http://github.com/antage/postgres) to force UTF-8 encoding for all strings returning from a database.\n", "created_at": "2011-05-16 03:12:13", "user": 789801, "id": 1168926}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168927", "text": "_Imported from Lighthouse._\nComment by **Valentin Nemcev** - 2009-12-05 02:56:59 UTC\n\nI'm also trying to run applications on 1.9.1. I'm not very familiar with rails internal structure, but I'm using it in few applications and i want to migrate them to ruby 1.9 to benefit from speed and memory efficiency (not talking about new Ruby features I want to use in future Rails projects). \n\nBut I can't! \n\nI've tried all the patches and fixes I could find, but they are not working. I'm using Mysql for DB and Haml for templates and I get \"incompatible character encodings: UTF-8 and ASCII-8BIT\" when I try to render model attribute with Russian letters. Other UTF-8 strings are okay.\n\nWhat additional information should I provide to help fixing this issue?\n", "created_at": "2011-05-16 03:12:14", "user": 789801, "id": 1168927}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168928", "text": "_Imported from Lighthouse._\nComment by **trevor** - 2009-12-11 19:57:20 UTC\n\n+1 Rails 2.3.5 + Hector patch: Working.\n\nsolved my problem with render partial and Œºm.\n", "created_at": "2011-05-16 03:12:15", "user": 789801, "id": 1168928}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168929", "text": "_Imported from Lighthouse._\nComment by **Thilo Utke** - 2009-12-17 00:16:03 UTC\n\n+1 Rails 2.3.5 + Hector patch is working for me too\n", "created_at": "2011-05-16 03:12:15", "user": 789801, "id": 1168929}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168930", "text": "_Imported from Lighthouse._\nComment by **James Conroy-Finn** - 2009-12-17 12:40:38 UTC\n\n@Jakub Instructions on patching pg to return UTF-8 strings are here: http://gist.github.com/215955 (the diff is http://gist.github.com/215956)\n", "created_at": "2011-05-16 03:12:15", "user": 789801, "id": 1168930}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168931", "text": "_Imported from Lighthouse._\nComment by **Andrew Grim** - 2009-12-21 20:15:13 UTC\n\nHector's patch works in the case where your default encoding is UTF-8, but doesn't respect the encoding specified by template itself.  Using the latest tests in rails I was able to achieve both with this patch.  It only affects ERB, but I believe that is where the bug lies anyway.  ERB#src will always return strings encoded as either ASCII or ASCII-8BIT, regardless of both your default encoding and the encoding specified by the ERB string.\n\nThis doesn't appear to be an issue with rails 3 as Erubis is used by default, and the bug seems to be ERB specific.\n\nAttached is a patch for 2-3-stable and also a little script that demonstrates the issue (for fun, change the script's encoding to ASCII-8BIT).\n", "created_at": "2011-05-16 03:12:16", "user": 789801, "id": 1168931}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168932", "text": "_Imported from Lighthouse._\nComment by **Andreas Haller** - 2010-01-21 19:04:53 UTC\n\n> ERB#src will always return strings encoded as either ASCII or ASCII-8BIT, regardless of both your default encoding and the encoding specified by the ERB string.\n\nIs there a bug about this on ruby-lang.org?\n\nErb#src seems to behave strange, but rendering with Erb seems to just work.\nAt least on ruby 1.9.2dev (2010-01-22 trunk 26370) [i386-darwin9.8.0]\n\n``` ruby\n# encoding: UTF-8\nrequire 'erb'\ntemplate = ERB.new(\"This is Int√©raŒ´i·Ωân√§l P√∂◊óy√ü\")\nputs template.src.encoding       # US-ASCII                     # This is not expected‚Ä¶\nputs template.result             # This is Int√©raŒ´i·Ωân√§l P√∂◊óy√ü   # ‚Ä¶ but it just works.\nputs template.result.encoding    # UTF-8                        # This is just works, doesn't it?\n```\n", "created_at": "2011-05-16 03:12:17", "user": 789801, "id": 1168932}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168933", "text": "_Imported from Lighthouse._\nComment by **Vladimir Penkin** - 2010-02-03 07:26:06 UTC\n\nI'm still having issues with UTF. \nWith this patches: \n- mysql.rb\n- fix_renderable.rb\n- fix_params.rb\n\nHaving troubles when trying to POST russian characters to controller.\n", "created_at": "2011-05-16 03:12:17", "user": 789801, "id": 1168933}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168934", "text": "_Imported from Lighthouse._\nComment by **Marcello Barnaba** - 2010-03-21 12:15:46 UTC\n\nHello,\n\nhere is my monkey patch (hack? :-) to fix this issue on current Rails 2.3.5 apps on 1.9.1, that doesn't involve copy-pasting code from ActionView. It is also available [as a Gist on GitHub](http://gist.github.com/339265).\n\n``` ruby\n# Rails 2.3.5, Ruby 1.9. ERB returns templates with an ASCII-8BIT encoding, unless they contain\n# an unicode character, and when you render a partial with unicode chars into a layout without,\n# the infamous \"incompatible character encodings: ASCII-8BIT and UTF-8\" error comes out.\n#\n# This module monkey-patches module_eval into the ActionView::Base::CompiledTemplates module to\n# convert the first argument encoding to UTF-8, if needed.\n#\n# Put it into lib/patches/compiled_templates.rb and require it into the config.after_initialize\n# block of your environment.rb.\n#\n# LH ticket x-reference: https://rails.lighthouseapp.com/projects/8994/tickets/2188\n#\n# - vjt@openssl.it\n#\nmodule Patches\n  module CompiledTemplates\n    def self.extended(base)\n      base.metaclass.alias_method_chain(:module_eval, :utf8)\n    end\n\n    def module_eval_with_utf8(*args, &block)\n      if args.first.respond_to?(:encoding) && args.first.encoding != Encoding::UTF_8\n        args.first.force_encoding(Encoding::UTF_8)\n      end\n      module_eval_without_utf8(*args, &block)\n    end\n  end\n\n  begin\n    RUBY_VERSION.to_f >= 1.9 &&\n      ActionView::Base::CompiledTemplates.method(:module_eval_with_utf8)\n  rescue NameError\n    ActionView::Base::CompiledTemplates.extend Patches::CompiledTemplates\n  end\nend\n```\n\nTested on 1.9.1-p378 and a big Rails app with unicode characters in templates :-).\n", "created_at": "2011-05-16 03:12:50", "user": 789801, "id": 1168934}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168935", "text": "_Imported from Lighthouse._\nComment by **Ivan Ukhov** - 2010-04-06 23:55:18 UTC\n\nHere is my solution for HAML (http://gist.github.com/358275):\n\n``` ruby\nmodule Haml\n  class Buffer\n    class UTF8String < String\n      def << text; super text.toutf8; end\n    end\n\n    alias original_initialize initialize\n\n    def initialize *args\n      original_initialize *args\n      @buffer = UTF8String.new\n    end\n  end\nend\n```\n", "created_at": "2011-05-16 03:12:51", "user": 789801, "id": 1168935}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168936", "text": "_Imported from Lighthouse._\nComment by **Alberto Fern√°ndez Capel** - 2010-04-09 00:39:19 UTC\n\nThere seems to be a problem when returning an UTF8 string from an erb tag, like this\n\n```\n <%= \"Hasta ma√±ana\" %> \n```\n\nI traced the problem to action_view/template_handlers/erb.rb. There, ERB.new always return a ASCII-8BIT string when asked for its ruby source. When the view concat this string with the UTF8 string from the tag you get the infamous error.\n\nAttached is a patch with a failing test case and a possible solution. Hope it helps!\n", "created_at": "2011-05-16 03:12:51", "user": 789801, "id": 1168936}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168937", "text": "_Imported from Lighthouse._\nComment by **Cezary Baginski** - 2010-04-24 23:15:16 UTC\n\nChangeset with workaround for ERB in an encoding-friendly way.\n- rebased to 2-3-stable\n- uses encoding comment handling from Andrew Grim's patch\n- introduces new concept for handling encodings from non-rails sources (external_encode!)\n- test cases\n- ActionPack works with -Ku, -Ks, -Ke, -Kn and without -K (as long as #4466 is applied also)\n\nComments, feedback, questions are more than welcome ;)\n- for Haml, MySQL, db, rack encoding issues, see other tickets (I might provide a summary soon) - this patch fixes ONLY the ERB handler!\n\nThanks to everyone, who helped nail this issue.\n", "created_at": "2011-05-16 03:12:52", "user": 789801, "id": 1168937}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168938", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-04-25 00:29:02 UTC\n\nGreat, working through this. I just backported master changes to 2.3 so I'll rebase it again.\n\nNew development needs to start in master and move back to 2.3, also. Can't have a solution on 2.3 but none on 3.0.\n", "created_at": "2011-05-16 03:12:52", "user": 789801, "id": 1168938}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168939", "text": "_Imported from Lighthouse._\nComment by **Cezary Baginski** - 2010-04-25 02:38:41 UTC\n\nI'll be glad to switch efforts to 3.0 if this patch turns out to be ok.\n", "created_at": "2011-05-16 03:12:53", "user": 789801, "id": 1168939}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168940", "text": "_Imported from Lighthouse._\nComment by **Cezary Baginski** - 2010-04-27 15:29:08 UTC\n\nPatch for Rails 3.0\n\nactivesupport:\n- rewrote the external_encode! function from scratch\n- added more test cases\n\nactionpack:\n- added test for line numbering (rendering errors)\n- got erb to work with all Ruby options (-Ks, -Ke, -Ku, -Kn, normal, us-ascii)\n- tries to play nice with any encoding settings or templates without requiring magic comments\n- transcode internally to utf-8 because Ruby's concat cannot really transcode and will fail anyway\n- slight cleanup in render encoding test cases\n\nI'll backport this to 2-3-stable (instead of the previous patch) if everything is ok.\n", "created_at": "2011-05-16 03:12:53", "user": 789801, "id": 1168940}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168941", "text": "_Imported from Lighthouse._\nComment by **Yaroslav Markin** - 2010-04-28 22:39:57 UTC\n\nIs there any chance we can have a Rails::Configuration key like \n\n<pre>\n...\nconfig.action_view.encoding = \"utf8\"\n...\n</pre>\n\n\nto skip on defining encoding in each and every template? Would be really handy IMO.\n", "created_at": "2011-05-16 03:12:53", "user": 789801, "id": 1168941}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168942", "text": "_Imported from Lighthouse._\nComment by **Cezary Baginski** - 2010-04-29 08:45:25 UTC\n\nYES! By all means!\n\nIf you have no magic comments, Ruby's own default encoding: **External.default_external** is assumed.\n\nYou can set this inside your application with:\n\n``` ruby\n  Encoding.default_external = Encoding::UTF_8 if RUBY_VERSION > \"1.9\"\n```\n\nIf for some reason you want to set it outside the application, you can:\n1. Change it in the command line or shebang line of the server you are running using Ruby's -E or -K option, e.g:\n\n``` shell\n  # /usr/bin/ruby -Ku \n```\n1. Use environment variables (useful if your production has a non-utf8 locale, like LANG=\"C\"):\n\n``` shell\n   LC_CTYPE=en_US.UTF-8 LANG=en_US.UTF-8 start_my_server   \n```\n1. Set UTF-8 for all Ruby applications, by setting this for your shell:\n\n``` shell\n   export RUBYOPT=-Ku\n```\n", "created_at": "2011-05-16 03:12:54", "user": 789801, "id": 1168942}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168943", "text": "_Imported from Lighthouse._\nComment by **The_Lord** - 2010-04-29 10:46:17 UTC\n\nYou could also wait for Rails 3.0 or start having fun with the current beta. In 3.0.0.beta3 there already is such a line in the application.rb file: \n    \"config.encoding = \"utf-8\"\nWorks great :)\n", "created_at": "2011-05-16 03:12:54", "user": 789801, "id": 1168943}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168944", "text": "_Imported from Lighthouse._\nComment by **Cezary Baginski** - 2010-05-10 20:03:19 UTC\n\nI did my homework on m17n in Ruby and talked a lot with Yehuda. I'll redo the patches from scratch, since I the above aren't as they should be. \n\nI'll probably open a new ticket for Rails 3.0 once I have a proper solution for 2.3, but I will try to keep the patches as identical as possible.\n\nIf I find any other related issues, but not ERB specific, I'll open new tickets for patches.\n", "created_at": "2011-05-16 03:12:55", "user": 789801, "id": 1168944}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168945", "text": "_Imported from Lighthouse._\nComment by **Cezary Baginski** - 2010-05-12 12:26:09 UTC\n\nNew ticket for the Rails 3 version of the patch: #4582\n\nThe following patch is rebased to 2-3-stable and hopefully solves all the Erb encoding issues with Ruby 1.9 and this ticket can be closed.\n\nTest cases pass with 1.9 using -Ks, -Ku, -Kn, -Ke and 1.8.\n\nFor non Rails 2-3.X Erb specific issues (Haml, DB, Rack, Rails 3), please find existing tickets or create new ones.\n\nPossible problems with the patch:\n- adds a convenience method to String which may look like overkill, but it is\n  used twice and may be useful for other templating engines. Rails encoding\n  support is an ongoing issue anyway and similar functionality will probably be\n  required anyway.\n- line numbering in errors may need better coverage\n- requiring the contents of all templates to already match the internal\n  encoding might be a cleaner solution to this kind of problem, but would be\n  less flexible\n- test cases may need improvements\n", "created_at": "2011-05-16 03:12:55", "user": 789801, "id": 1168945}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168946", "text": "_Imported from Lighthouse._\nComment by **Jonas Nicklas** - 2010-05-12 13:06:06 UTC\n\nThere is a method called `external_encode` which is documented as \"Encode to internal encoding\". That seems pretty strange, but I can't say I understand much of what that method does, so maybe it's correct?\n", "created_at": "2011-05-16 03:12:56", "user": 789801, "id": 1168946}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168947", "text": "_Imported from Lighthouse._\nComment by **Cezary Baginski** - 2010-05-12 14:03:58 UTC\n\nRuby 1.9 has Encoding.default_external and Encoding.default_internal and when the second is nil, the first is used. So encoding to 'internal' is usually the same as encoding to 'external' in most ruby environments.\n\nA method name to say what it does would be:\n\n  encode-from-given-param-or-default_external-to-default_internal\n\nIt works like Ruby's \"encode\", except it tries to handle additional cases with binary (ASCII-8BIT) strings, and catching things encode(dst,src) would not.\n\nMaybe it should be called encode_external, encode_to_internal, etc?\n\nAny suggestions for better names, implementations, documentation are welcome.\n", "created_at": "2011-05-16 03:12:56", "user": 789801, "id": 1168947}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168948", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-05-16 01:41:09 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20088)]\n", "created_at": "2011-05-16 03:12:57", "user": 789801, "id": 1168948}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168949", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-23 16:54:42 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20606)]\n", "created_at": "2011-05-16 03:12:57", "user": 789801, "id": 1168949}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168950", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-24 08:40:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20631)]\n", "created_at": "2011-05-16 03:12:58", "user": 789801, "id": 1168950}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168951", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-25 22:45:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20816)]\n", "created_at": "2011-05-16 03:12:58", "user": 789801, "id": 1168951}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168952", "text": "_Imported from Lighthouse._\nComment by **Stefano Diem** - 2010-06-13 05:09:38 UTC\n\nThis error also presents itself under rails 3.0.0.beta3 and rails 3.0.0.beta4.\nSince Haml uses Erb::Utils to escape strings, overriding html_escape in application.rb worked for me with both ERB and Haml:\n\n```\nmodule ERB::Util\n  def html_escape(s)\n    s = s.to_s.force_encoding(\"utf-8\")\n    if s.html_safe?\n      s\n    else\n      s.gsub(/[&\"><]/) { |special| HTML_ESCAPE[special] }.html_safe\n    end\n  end\nend\n```\n\n(Not trying to verify if it is 1.9 or do test cases, just putting the simplest and comprehensive way i got to make it work so maybe it can help someone do a proper patch)\n", "created_at": "2011-05-16 03:12:59", "user": 789801, "id": 1168952}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168953", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:48 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 03:13:00", "user": 789801, "id": 1168953}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168954", "text": "_Imported from Lighthouse._\nComment by **Damien MATHIEU** - 2010-09-28 11:37:22 UTC\n\nI see this same problem in rails3.  \nStefano's solution solves it. There's one problem with it though. It won't work if the string is frozen.\n", "created_at": "2011-05-16 03:13:00", "user": 789801, "id": 1168954}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168955", "text": "_Imported from Lighthouse._\nComment by **wout** - 2010-09-29 09:33:30 UTC\n\nI'm having this problem as well with a rails 3 app.\n", "created_at": "2011-05-16 03:13:01", "user": 789801, "id": 1168955}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168956", "text": "_Imported from Lighthouse._\nComment by **wout** - 2010-09-29 11:09:33 UTC\n\nStefano's solution worked for me but I had to rework it a little to get it working with frozen strings:\n\n```\nmodule ERB::Util\n  def html_escape(s)\n    frozen = s.frozen?\n\n    s = s.dup if frozen\n    s = s.to_s.force_encoding(\"utf-8\")\n    s = s.gsub(/[&\"><]/) { |special| HTML_ESCAPE[special] }.html_safe unless s.html_safe?\n    s.freeze if frozen\n\n    s\n  end\nend\n```\n\nNot the nicest solution but it fixes my production app.\n", "created_at": "2011-05-16 03:13:02", "user": 789801, "id": 1168956}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168957", "text": "_Imported from Lighthouse._\nComment by **wout** - 2010-10-01 19:05:36 UTC\n\nThe previous workaround worked ok for the views, but it's more of a patch than a solution. The only thing that finally worked for me was installing the ruby-mysql gem:\n\ngem 'ruby-mysql'\n\nFinally, make sure you set the encoding of your database to UTF-8. Otherwise you will keep getting errors anyway.\n", "created_at": "2011-05-16 03:13:02", "user": 789801, "id": 1168957}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168958", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 21:02:25 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:13:03", "user": 789801, "id": 1168958}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168959", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:01:36 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:13:04", "user": 789801, "id": 1168959}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168960", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:50:28 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:13:04", "user": 789801, "id": 1168960}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168961", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:51:19 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:13:05", "user": 789801, "id": 1168961}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168962", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:53:03 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:13:05", "user": 789801, "id": 1168962}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168963", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:53:34 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:13:05", "user": 789801, "id": 1168963}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168964", "text": "_Imported from Lighthouse._\nComment by **joost baaij** - 2011-02-22 10:45:21 UTC\n\nFWIW, this gist contains all patches for Rails 2.3 so this problem goes away.\nNote that it doesn't patch the mysql gem since you should use the mysql2 gem on Ruby 1.9 anyway.\n\nhttps://gist.github.com/838489\n", "created_at": "2011-05-16 03:13:06", "user": 789801, "id": 1168964}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168965", "text": "_Imported from Lighthouse._\nComment by **Andrew Selder** - 2011-04-27 19:12:44 UTC\n\nI've updated the normalize parameters portion of joost's patch.\n\nThis checks to make sure that the parameter is acutally valid in the UTF-8 encoding. If it's not, it tries to interpret the parameter as ISO-8859-1 and then transcode it to UTF-8.\n\nWe're getting lots of query parameters like:\n- URL       : http://www.blah.com?&_category=concerts&_headliner=Charles%20Dub%E9abc\n\nwhere there is a 0xE9 byte encoded in the URL. Legal ISO-8859-1, but not UTF-8\n\nhttps://gist.github.com/944943\n", "created_at": "2011-05-16 03:13:06", "user": 789801, "id": 1168965}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168966", "text": "Attachments saved to Gist: http://gist.github.com/971615\n", "created_at": "2011-05-16 03:13:07", "user": 789801, "id": 1168966}, {"reactions": {"+1": [13420273]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169051", "text": "Fixed on Rails 3.1.\n", "created_at": "2011-05-16 03:19:09", "user": 9582, "id": 1169051}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2205\nCreated by **Russ Smith** - 2011-02-17 08:07:20 UTC\n\nI made a note of this in another ticket (http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1875-posting-a-multipart-form-with-file-data-can-break-params-assignment-in-23), but it might be a slighty different issue.\n\nHere is the error output: http://gist.github.com/77057\n\nWhen input.read(boundary_size) is called it looks like it clears the buffer so when the next read gets called the buffer returns nil.\n\nI'm really stuck on this one. I would appreciate any help.\n", "labels": [], "number": 601, "updated_at": "2011-05-16 03:20:45", "user": 789801, "closed_at": "2011-05-16 03:20:45", "id": 904194, "title": "Multipart forms \"bad content body\"", "url": "https://api.github.com/repos/rails/rails/issues/601", "created_at": "2011-05-16 03:13:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168967", "text": "_Imported from Lighthouse._\nComment by **Russ Smith** - 2009-03-11 00:25:52 UTC\n\nIgnore the above comment. It was an issue with the way the LSAPI worked. I'm submitting a patch on the Rack side.\n", "created_at": "2011-05-16 03:13:08", "user": 789801, "id": 1168967}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168968", "text": "_Imported from Lighthouse._\nComment by **mat** - 2009-05-29 18:05:04 UTC\n\nRuss - did you ever submit a patch? I'm seeing something similar. Thanks\n", "created_at": "2011-05-16 03:13:08", "user": 789801, "id": 1168968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168970", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:41 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:13:08", "user": 789801, "id": 1168970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169108", "text": "Afaik this has been fixed in Rack.\n", "created_at": "2011-05-16 03:20:45", "user": 9582, "id": 1169108}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2251\nCreated by **Luca Guidi** - 2011-02-16 07:20:11 UTC\n\n**I opened this ticket as continuation of an off topic discussion in #2146**\n[Martin Andert](http://rails.lighthouseapp.com/users/36086) reported:\n\nI found some unexpected behavior dealing with `has_many :through` associations. Given the following:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  has_many :taggings\n  has_many :tags, :through => :taggings\nend\n\npost = Post.first\ntag = post.tags.first\n```\n\nCalling `post.tags.delete(tag)` removes the tagging from the database and leaves the tag intact.\nBut calling `post.tags.destroy(tag)` removes the tag from the database (not the tagging).\nIMO, I don't expect destroy to delete the record from the database, only the through_association item.\n", "labels": [], "number": 602, "updated_at": "2011-05-21 15:11:49", "user": 789801, "closed_at": "2011-05-21 15:11:49", "id": 904195, "title": "AssociationCollection#destroy should only delete join table records", "url": "https://api.github.com/repos/rails/rails/issues/602", "created_at": "2011-05-16 03:13:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168971", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-03-16 10:45:25 UTC\n\nThere is a difference between `delete` and `destroy`: the former is for remove associations, and if configured, to destroy the endpoint.\n\nExample:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  has_many :comments, :dependent => :destroy\nend\n\npost.destroy # => will also delete orphan comments from database\n```\n\nThe latter was designed for **always** destroy the association endpoint.\n\n``` ruby\nclass Post < ActiveRecord::Base\n  has_many :taggings\n  has_many :tags, :through => :taggings\nend\n\npost.tags.delete(tag) # => is the proper way to remove the association.\npost.tags.destroy(tag) # => should remove __both__ the association and the tag itself.\n```\n\nFor your purposes you should use `delete`, but you raised a good point, there is a bug in `destroy`: because it leaves an orphan record in `taggings` table.\n\nI'll write and attach a patch\n", "created_at": "2011-05-16 03:13:10", "user": 789801, "id": 1168971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168972", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-03-16 10:46:04 UTC\n\nWhoops, sorry Pratik\n", "created_at": "2011-05-16 03:13:11", "user": 789801, "id": 1168972}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168973", "text": "_Imported from Lighthouse._\nComment by **Martin Andert** - 2009-03-16 11:07:25 UTC\n\n> The latter was designed for always destroy the association endpoint.\n\nOkay. I should have read the documenting comments more conscientious.\n", "created_at": "2011-05-16 03:13:12", "user": 789801, "id": 1168973}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168974", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-03-16 11:16:04 UTC\n\nThe patch is already there ;)\n", "created_at": "2011-05-16 03:13:13", "user": 789801, "id": 1168974}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168975", "text": "_Imported from Lighthouse._\nComment by **Martin Andert** - 2009-03-16 11:46:10 UTC\n\nEloy, wouldn't it be better to do \n\n``` ruby\ndef destroy(*records)\n  delete_records(flatten_deeper(records))\n  super\nend\n```\n\ninstead of \n\n``` ruby\ndef destroy(*records)\n  delete_records(flatten_deeper(records))\n  super\nend\n```\n\nbecause there could exist foreign key contraints (on delete cascade) at the endpoint.\n\nAnd somehow my test case from above still fails. Am I doing anything wrong?\n", "created_at": "2011-05-16 03:13:15", "user": 789801, "id": 1168975}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168976", "text": "_Imported from Lighthouse._\nComment by **Martin Andert** - 2009-03-16 11:47:00 UTC\n\nOh, the second code snippet must be \n\n``` ruby\ndef destroy(*records)\n  super\n  delete_records(flatten_deeper(records))\nend\n```\n\nSorry.\n", "created_at": "2011-05-16 03:13:16", "user": 789801, "id": 1168976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168977", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-03-16 12:31:57 UTC\n\nOk, I changed the order. Previously I was calling `super` before, just to perform the `raise_on_type_mismatch` check.\nNow I wrapped the operation in a transaction, so if the type check fails, it rollbacks the database status.\n\nMartin, sorry, but it's not clear for me the following statement in your test:\n\n``` ruby\npost.people.destroy << person\n```\n", "created_at": "2011-05-16 03:13:16", "user": 789801, "id": 1168977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168978", "text": "_Imported from Lighthouse._\nComment by **Martin Andert** - 2009-03-16 12:45:50 UTC\n\nOh, that last \"<<\" should not be there in my test (copy & paste error). Now the test passes. Thank you.\n", "created_at": "2011-05-16 03:13:17", "user": 789801, "id": 1168978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168979", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-03-16 13:49:36 UTC\n\nApplies and runs. +1\n", "created_at": "2011-05-16 03:13:18", "user": 789801, "id": 1168979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168980", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-04-09 08:37:02 UTC\n\nPing\n", "created_at": "2011-05-16 03:13:18", "user": 789801, "id": 1168980}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168981", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-05-18 20:36:55 UTC\n\n(from [7a85927da21859a6868c3e0ec92267706b0a14bf]) Ensure HasManyThroughAssociation#destroy delete orphan records [#2251 state:resolved]\n\nSigned-off-by: Pratik Naik pratiknaik@gmail.com\nhttp://github.com/rails/rails/commit/7a85927da21859a6868c3e0ec92267706b0a14bf\n", "created_at": "2011-05-16 03:13:19", "user": 789801, "id": 1168981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168982", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-05-18 20:36:56 UTC\n\n(from [cef76c8af4705dc60f85a721e3a14adb99418d33]) Ensure HasManyThroughAssociation#destroy delete orphan records [#2251 state:resolved]\n\nSigned-off-by: Pratik Naik pratiknaik@gmail.com\nhttp://github.com/rails/rails/commit/cef76c8af4705dc60f85a721e3a14adb99418d33\n", "created_at": "2011-05-16 03:13:20", "user": 789801, "id": 1168982}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168983", "text": "_Imported from Lighthouse._\nComment by **Olly Headey** - 2009-05-22 14:46:43 UTC\n\nAs of [this commit](http://github.com/rails/rails/commit/7a85927da21859a6868c3e0ec92267706b0a14bf), calling `destroy_all` on a `:has_many :through` association raises an `ActiveRecord::HasManyThroughCantAssociateThroughHasManyReflection` exception.  This wasn't the case before this commit.\n\ne.g. Given:\n\n```\nclass Company\n  has_many :projects, :through => :contacts\nend   \n```\n\nCalling `company.projects.destroy_all` results in:\n\n```\nActiveRecord::HasManyThroughCantAssociateThroughHasManyReflection: Cannot \nmodify association 'MyClass#projects' because the source reflection class 'Project' \nis associated to 'Contact' via :has_many\n```\n\nCalling `company.projects.all.destroy_all` works, however.\n", "created_at": "2011-05-16 03:13:20", "user": 789801, "id": 1168983}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168984", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-05-22 14:49:53 UTC\n\nI'll verify it ASAP\n", "created_at": "2011-05-16 03:13:21", "user": 789801, "id": 1168984}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168985", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-05-24 17:17:08 UTC\n\nIt works fine for me.\nOlly, please look at this gist (http://bit.ly/siWGR) and tell me if I'm missing something.\n\nI vendored Rails, then checked out the this commit (git checkout cef76c8af4705dc60f85a721e3a14adb99418d33) and tried with the code reported in the gist above.\n\nEverything worked as expected.\n", "created_at": "2011-05-16 03:13:22", "user": 789801, "id": 1168985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168986", "text": "_Imported from Lighthouse._\nComment by **Olly Headey** - 2009-06-01 21:09:56 UTC\n\nI've created a new gist which demonstrates the problem with the latest 2-3-stable code.\n\nhttp://gist.github.com/121794\n\nHere's how I created the test project\n\n```\nrails destroy_all_test\ncd destroy_all_test/vendor\ngit clone git://github.com/rails/rails.git\ncd rails\ngit checkout -b 2-3-stable origin/2-3-stable\n```\n\nIf you then copy in the files from the gist and run\n\n```\nrake test\n```\n\nYou'll see this failure:\n\n```\n/opt/ruby-enterprise-1.8.6-20090421/bin/ruby -I\"lib:test\" \"/opt/ruby-enterprise-1.8.6-20090421/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb\" \"test/unit/company_test.rb\" \"test/unit/contact_test.rb\" \"test/unit/project_test.rb\" \nLoaded suite /opt/ruby-enterprise-1.8.6-20090421/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader\nStarted\nE..\nFinished in 0.054827 seconds.\n\n  1) Error:\ntest_destroy_all(CompanyTest):\nActiveRecord::HasManyThroughCantAssociateThroughHasManyReflection: Cannot modify association 'Company#projects' because the source reflection class 'Project' is associated to 'Contact' via :has_many.\n    /test/unit/company_test.rb:8:in `test_destroy_all'\n\n3 tests, 2 assertions, 0 failures, 1 errors\n```\n\nAs you can see I'm running Ruby Enterprise Edition 1.8.6\n", "created_at": "2011-05-16 03:13:22", "user": 789801, "id": 1168986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168987", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-06-03 10:08:46 UTC\n\nI gave a look at the Olly's gist, I don't know if it's a proper way to use an `hmt` relation, please look at the `Contact` class, it uses both `belongs_to` and `has_many` macros.\n\nI always thought about `hmt` as an _extended_ `habtm` relation.\n\n``` ruby\nclass Feed < ActiveRecord::Base\n  has_many :subscriptions\n  has_many :subscribers, :through => :subscriptions, :source => :user\nend\n\nclass Subscription < ActiveRecord::Base\n  belongs_to :subscription\n  belongs_to :user\nend\n\nclass User < ActiveRecord::Base\n  has_many :subscriptions\n  has_many :feeds, :through => :subscriptions\nend\n```\n\nLook at how `Subscription` uses `belongs_to`, it acts as a _bridge_ between the other two models.\n\nThe exampled posted by Olly breaks this pattern, just because a `Company` instance tries to delete records which are _property_ of `Contact`.\nThis is the reason we didn't found the bug until now.\n\nI'll take care about this issue.\n", "created_at": "2011-05-16 03:13:23", "user": 789801, "id": 1168987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168988", "text": "_Imported from Lighthouse._\nComment by **Olly Headey** - 2009-06-03 13:09:28 UTC\n\nThanks for looking at this.  I do think my example model is fairly typical of a has_many :through situation.\n\nA Company has_many Contacts.\nA Contact has_many Projects.\nTherefore, a Company has_many Projects through Contacts.\n\nLooking forward to the fix!\n", "created_at": "2011-05-16 03:13:24", "user": 789801, "id": 1168988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168989", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-06-03 13:36:38 UTC\n\nI found a contradictory behavior, if look at `[has_many_association_test.rb:858](http://github.com/rails/rails/blob/971e2438d98326c994ec6d3ef8e37b7e868ed6e2/activerecord/test/cases/associations/has_many_associations_test.rb#L858)` the `hmt` association should raise an exception if tries to modify the endpoint collection.\n\nAccording to this test the this isn't a bug, but I found something else: `[has_many_through_association_test.rb:104](http://github.com/rails/rails/blob/971e2438d98326c994ec6d3ef8e37b7e868ed6e2/activerecord/test/cases/associations/has_many_through_associations_test.rb#L104)`. As you can see this test endorses an opposite policy.\n\nWhy `hmt` is tested twice in the above files? Why it misbehaves, and works both with opposite guidelines?\n\nFirst: there is a TODO in `[has_many_through_association.rb:100](http://github.com/rails/rails/blob/e9a75451236119e1db3e5d7cc7703637d048c7f8/activerecord/lib/active_record/associations/has_many_through_association.rb#L100)`: TODO: revist this to allow it for deletion, supposing dependent option is supported\n\nSecond: the strange thing is the first test case uses `Article`, `Post` and `Comment` classes in the same way are used by Olly, otherwise `Post`, `Person` and `Reader` (second case) are associated like my example above (with the _bridge model_).\n\nWhat's the correct behavior?\n", "created_at": "2011-05-16 03:13:24", "user": 789801, "id": 1168989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168990", "text": "_Imported from Lighthouse._\nComment by **Will Bryant** - 2009-06-04 09:36:58 UTC\n\nYeah, I'm hitting the destroy_all issue too - it certainly works fine in a 2.2 app.  I see no reason why it should delete the records it goes through; for example, when we have customers who have projects and they have tasks, and when I destroy_all tasks for a customer, there's no reason to expect the projects should be destroyed too.\n", "created_at": "2011-05-16 03:13:25", "user": 789801, "id": 1168990}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168991", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-06-08 02:56:23 UTC\n\nreopening to block 2.3.3\n", "created_at": "2011-05-16 03:13:25", "user": 789801, "id": 1168991}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168992", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-06-08 09:02:34 UTC\n\nOk, I believe we should focus our attention on the nature of `hmt`.\n\nI think it was introduced as an `habmt` on steroids association, look at my latest example above, `Subscription` is a _join model_, so if an user is being destroyed I expect the related subscriptions **should** be destroyed too.\n\nIn the other hand `hmt` is actually used as shortcut to avoid the classic train-wreck syntax, as Will has suggested, destroying tasks for a customer's project **shouldn't** destroy the project too.\n\nIn other words, we have different use cases for the same association kind, both are right, and if we satisfy only one of them, we could break existing code.\n\nSo my suggestion is to use the ignored `dependent` option for `hmt` (http://bit.ly/XNfuG look at the Supported Options section), and destroy records according that value.\n\nIf you agree I will take care about the related patch.\n", "created_at": "2011-05-16 03:13:26", "user": 789801, "id": 1168992}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168995", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-06-09 08:06:11 UTC\n\nOK, I've reverted this from 2-3-stable until we resolve the discussions here.  It's still in master.\n\nFWIW I _don't_ consider HMT a join model on steroids.  It's merely a convenient accessor, the 'real' association is from user to membership, not user to accounts.  The accounts accessor is just for convinience.\n", "created_at": "2011-05-16 03:13:52", "user": 789801, "id": 1168995}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168996", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-06-10 09:04:08 UTC\n\nOk, if `hmt` is **only** a convenient accessor, we should revert my original patch from master too. Please look at the description of this ticket (`Post`, `Tagging` and `Tag`), in that case the associated taggings shouldn't be destroyed, even if users could expect so.\n\nIs it right, or am I missing something?\n", "created_at": "2011-05-16 03:13:54", "user": 789801, "id": 1168996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168997", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-06-26 05:37:21 UTC\n\nHaving thought some more about this I'm not entirely sure what I think should happen...\n\nBasically the hmt exists as a convinient accessor but calling destroy_all is unclear...\nFor the case of has_many tags through taggings, it's 'obvious' we want to destroy all the taggings.  Without the tags they're useless.\n\nHowever we also support has_many tasks through projects, and for that case destroying the projects is 'obviously' wrong.\n\nI think one option could be only destroying when the :through class has belongs_to associations on either side...\n\nOn the other hand perhaps it's safer just to revert this from master too.\n\nAnyone else had any thoughts on the matter?\n", "created_at": "2011-05-16 03:13:55", "user": 789801, "id": 1168997}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168998", "text": "_Imported from Lighthouse._\nComment by **Will Bryant** - 2009-07-02 23:39:10 UTC\n\nI think that's a great idea - if Task.belongs_to :project, :dependent => destroy, then customer.tasks.destroy_all should destroy all projects too.\n\nOtherwise - if Task doesn't belong_to :project or if Task.belongs_to :project without :dependent => :destroy, then customer.tasks.destroy_all shouldn't destroy projects too.\n\nThat makes it nice and consistent with what should happen if you call destroy on each Task you've loaded individually, with or without using the has_many :through.\n", "created_at": "2011-05-16 03:13:56", "user": 789801, "id": 1168998}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1168999", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-07-03 00:06:10 UTC\n\nOK, I'm in agreement with will here.  Can someone upload a patch to do\nthis, and then I think we're good to go.\n\n(or does it do this already?)\n", "created_at": "2011-05-16 03:13:57", "user": 789801, "id": 1168999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169000", "text": "_Imported from Lighthouse._\nComment by **John** - 2009-07-04 10:57:46 UTC\n\nHy Michael \n\n```\n Please find attached patch\n```\n", "created_at": "2011-05-16 03:13:58", "user": 789801, "id": 1169000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169002", "text": "_Imported from Lighthouse._\nComment by **Luca Guidi** - 2009-07-06 10:26:22 UTC\n\nWill, I don't agree: `:dependent => :destroy` was designed for the opposite use case:\n\n``` ruby\nclass task < ActiveRecord::Base\n  belongs_to :project, :dependent => :destroy\nend\n```\n\n``` ruby\nproject.destroy # => all the associated tasks will be destroyed\n```\n\nUsing `customer.tasks.destroy_all` I don't expect the owner project is being destroyed too.\n\nMy idea is to use `dependent` as flag for `hmt`:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  has_many :tags, :through => :taggings, :dependent => :destroy\nend\n\nclass Company < ActiveRecord::Base\n  has_many :projects, :through => :contacts\nend\n```\n\n``` ruby\npost.tags.destroy_all        # => destroy taggings too\ncompany.projects.destroy_all # => doesn't destroy contacts\n```\n\nAs already said that option is actually ignored for `hmt` ( http://bit.ly/XNfuG ), so we can use it.\n", "created_at": "2011-05-16 03:13:59", "user": 789801, "id": 1169002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169003", "text": "_Imported from Lighthouse._\nComment by **jamesw** - 2009-08-08 18:18:42 UTC\n\nI'm not sure if this ticket is related to the ticket I just filed\nhttps://rails.lighthouseapp.com/projects/8994/tickets/3007-accepts_nested_attributes-causes-errors-eith-has_many-through-relationships\n\nBut whether or not it is some comments here have concerned me so I thought I'd take the opportunity to clear something up as far as expected behaviour is concerned on has_many :through\n\nIn a normal database scenario it is quite legitimate to have joins to grandchildren that are NOT a many to many join on the join table.\n\nA grandparent has_many parents which in turn have many children\nIf I wanted to make sure that a product could exist for only one category and a category could only exist for one catalogue I would have a foreign key in my category table for the catalogue and I would have a foreign key in my products table for my category. but I would not have any other foreign keys to make up a many to many join. Yes there is an argument that a category should be able to exist in more than one catalogue and by association a product can also belong in more than one catalogue thus you have a many to many \n\nMany to many joins are cumbersome and are usually avoided in other development environments and used only as a last resort.\n\nThus my interpretation of the HABTM functionality offered by rails was to meet the many to many join requirement and I can and do use has_many :through for quite a few non many to many joins and I was rather surprised to read here that has_many :through is not really for the purpose I thought it was for and this could partly explain the problem I'm having with accepts_nested_attributes as outlined in my ticket.\n\nIf this is the case (and I hope I read the posts wrong) then I have no solution for multi level nested tables that are not a many to many join which seems like totaly madness to me.\n\nIt seems that if I can define table relationships in whatever way I want to define them to meet my customers requirements then functionality such as accepts_nested_attributes and has_many through should work consistently and raise errors if I don't have all the foreign keys defined for a many to many and a \"different\" option should be allowed or accepts_nested_attributes should be intelligent enough to work out that a particular join table being used for a has_many :through is wither a HABTM model or not depending on the foreign keys.\n\nOf course I could have totally misunderstood what I was reading here as a lot of it went straight over the top of my head and I hope that I haven't got this totally wrong.\n", "created_at": "2011-05-16 03:14:00", "user": 789801, "id": 1169003}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169004", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-09-11 22:04:35 UTC\n\n[milestone:id#50064 bulk edit command]\n", "created_at": "2011-05-16 03:14:00", "user": 789801, "id": 1169004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169005", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-05-16 01:41:09 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20088)]\n", "created_at": "2011-05-16 03:14:01", "user": 789801, "id": 1169005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169006", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-23 16:54:42 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20606)]\n", "created_at": "2011-05-16 03:14:02", "user": 789801, "id": 1169006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169007", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-24 08:40:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20631)]\n", "created_at": "2011-05-16 03:14:03", "user": 789801, "id": 1169007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169008", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-25 22:45:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20816)]\n", "created_at": "2011-05-16 03:14:03", "user": 789801, "id": 1169008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169009", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:48 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 03:14:04", "user": 789801, "id": 1169009}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2253\nCreated by **Erik Andrejko** - 2011-01-17 08:17:54 UTC\n\n`named_scope` currently has some unexpected behavior when nesting `:order` clauses.  This problem also occurs in the underlying `with_scope` implementation.\n\nThis test does not pass:\n\n```\ndef test_scoping_with_multiple_order\n  expected = Monk.find(:all, :order => \"birth_year, first_name\").map{|m| m.full_name}\n  options = {:order => \"birth_year\"}\n  Monk.with_scope(:find => options) do\n    assert_equal expected, Monk.find(:all, :order => \"first_name\").map{|m| m.full_name}\n  end\nend\n```\n\nThis test passes, and has the expected behavior:\n\n```\ndef test_single_named_scope_overrides_default_scope_order\n  expected = Monk.find(:all, :order => \"last_name asc\").collect {|m| m.id}\n  received = Monk.by_last_name.collect {|m| m.id}\n  assert_equal expected, received\nend\n```\n\nThis test does not pass:\n\n```\ndef test_nested_scopes_orders_combined\n  expected = Monk.find(:all, :order => \"last_name asc, first_name asc\").collect {|m| m.last_name + \", \" + m.first_name}\n  received = Monk.by_last_name.by_first_name.collect {|m| m.last_name + \", \" + m.first_name}\n  assert_equal expected, received\nend\n```\n\nI have included a patch containing these tests and the `Monk` model.\n\nFor more discussion see this [conversation on Rails Core](http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4478264d9a8ff702).\n", "labels": [], "number": 603, "updated_at": "2011-05-16 03:20:55", "user": 789801, "closed_at": "2011-05-16 03:20:55", "id": 904196, "title": "named_scope and nested order clauses", "url": "https://api.github.com/repos/rails/rails/issues/603", "created_at": "2011-05-16 03:14:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169011", "text": "_Imported from Lighthouse._\nComment by **Peter Wagenet** - 2009-03-19 14:05:24 UTC\n\nThis may be fixed in my patch here: http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1812-default_scope-cant-take-procs\n", "created_at": "2011-05-16 03:14:06", "user": 789801, "id": 1169011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169012", "text": "_Imported from Lighthouse._\nComment by **Maur√≠cio Linhares** - 2009-05-28 21:20:16 UTC\n\nOn Rails 2.3.2 this isn't fixed yet.\n\n+1\n\nWould be really nice to have this fixed.\n\n``` ruby\n                if key == :conditions && merge\n                  if params[key].is_a?(Hash) && hash[method][key].is_a?(Hash)\n                    hash[method][key] = merge_conditions(hash[method][key].deep_merge(params[key]))\n                  else\n                    hash[method][key] = merge_conditions(params[key], hash[method][key])\n                  end\n                elsif key == :include && merge\n                  hash[method][key] = merge_includes(hash[method][key], params[key]).uniq\n                elsif key == :joins && merge\n                  hash[method][key] = merge_joins(params[key], hash[method][key])\n                elsif key == :order && merge\n                  hash[method][key] = [params[key], hash[method][key]].join(' , ')\n                else\n                  hash[method][key] = hash[method][key] || params[key]\n                end\n```\n", "created_at": "2011-05-16 03:14:06", "user": 789801, "id": 1169012}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169013", "text": "_Imported from Lighthouse._\nComment by **Erik Andrejko** - 2009-06-06 23:23:51 UTC\n\nA patch that includes tests for the desired behavior is attached.\n", "created_at": "2011-05-16 03:14:06", "user": 789801, "id": 1169013}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169014", "text": "_Imported from Lighthouse._\nComment by **Jon** - 2009-06-25 20:50:38 UTC\n\nStill having this problem as you can see in this gist: http://gist.github.com/136140\n\nProbably related to this ticket: #2346\n", "created_at": "2011-05-16 03:14:07", "user": 789801, "id": 1169014}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169015", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2009-07-03 11:49:56 UTC\n\nHey,\n\nCan we have a patch without new tables please ?\n\nThanks!\n", "created_at": "2011-05-16 03:14:07", "user": 789801, "id": 1169015}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169016", "text": "_Imported from Lighthouse._\nComment by **Emilio Tagua** - 2009-07-07 20:43:09 UTC\n\nYou may want to take a look to this ticket/patch, i think that solves this problem:\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2810-with_scope-should-accept-and-use-order-option\n", "created_at": "2011-05-16 03:14:08", "user": 789801, "id": 1169016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169017", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:42 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:14:08", "user": 789801, "id": 1169017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169018", "text": "Attachments saved to Gist: http://gist.github.com/971620\n", "created_at": "2011-05-16 03:14:08", "user": 789801, "id": 1169018}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169111", "text": "This has been fixed on master.\n", "created_at": "2011-05-16 03:20:55", "user": 9582, "id": 1169111}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2324\nCreated by **Andrew White** - 2011-02-19 09:28:20 UTC\n\nThe seemingly obvious place to add config.reload_plugins = true is in development.rb, however this doesn't work because add_plugin_load_paths is called before load_environment. I'm not sure whether this is a documentation issue or whether to come up with a patch.\n\nSetting it in environment.rb shouldn't have any detrimental effect in production (I think), so a documentation update would be the easiest fix. However, if a patch is preferred maybe it'd be better to add a new process step rather than moving add_plugin_load_paths to after load_environment as changing the order of the process steps always seems to break something.\n", "labels": [], "number": 604, "updated_at": "2011-05-16 03:21:14", "user": 789801, "closed_at": "2011-05-16 03:21:13", "id": 904197, "title": "config.reload_plugins = true only works in environment.rb", "url": "https://api.github.com/repos/rails/rails/issues/604", "created_at": "2011-05-16 03:14:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169019", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:43 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:14:09", "user": 789801, "id": 1169019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169020", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-07 16:57:25 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:14:09", "user": 789801, "id": 1169020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169021", "text": "_Imported from Lighthouse._\nComment by **JackC** - 2011-01-13 16:18:50 UTC\n\nconfig.reload_plugins = true in development.rb is working for me on Rails 3.0.2 running in development mode through Passenger/Apache2.\n", "created_at": "2011-05-16 03:14:10", "user": 789801, "id": 1169021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169121", "text": "Fixed on master.\n", "created_at": "2011-05-16 03:21:14", "user": 9582, "id": 1169121}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2346\nCreated by **Alexander Podgorbunsky** - 2011-02-22 08:32:33 UTC\n\nThere's a problem of not overriding deafult_scope's keys that don't merge (:order for instance) by same keys of named_scopes\n\n```\nclass Post\n  default_scope :order => 'posts.created_at asc'\n  named_scope :recent, :order => 'posts.created_at desc'\nend\n\nPost.recent # sorts posts in ascending order\n```\n\nThis behavior appeared as a result of resolving #1960\n\nHere's the the patch to fix it\nPatch also fixes test that was broken too (see comments on #1960)\n\nAdded code checks if scoping that was current on creation of Scope object is in scoped_methods stack on execution of scope, and if so - doesn't apply it second time (as it's been already implicitly accounted for during merging named scope's scoping with current_scoped_methods). This eliminates a problem of overriding keys of named scope by default scope\n", "labels": [], "number": 605, "updated_at": "2011-06-09 11:17:46", "user": 789801, "closed_at": "2011-05-16 03:21:39", "id": 904198, "title": "named_scope doesn't override default_scope's :order key", "url": "https://api.github.com/repos/rails/rails/issues/605", "created_at": "2011-05-16 03:14:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169022", "text": "_Imported from Lighthouse._\nComment by **Max Lapshin** - 2009-03-26 16:52:39 UTC\n\n+1 Fix this, please.\n", "created_at": "2011-05-16 03:14:11", "user": 789801, "id": 1169022}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169023", "text": "_Imported from Lighthouse._\nComment by **Yaroslav Markin** - 2009-03-26 16:55:39 UTC\n\n+1 since 2.3 named_scope merging is a problem for all folks using default_scope\n", "created_at": "2011-05-16 03:14:11", "user": 789801, "id": 1169023}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169024", "text": "_Imported from Lighthouse._\nComment by **J√©r√¥me** - 2009-03-26 18:37:42 UTC\n\n+1\n", "created_at": "2011-05-16 03:14:12", "user": 789801, "id": 1169024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169025", "text": "_Imported from Lighthouse._\nComment by **Anton Ageev** - 2009-03-26 18:40:53 UTC\n\n+1\n", "created_at": "2011-05-16 03:14:12", "user": 789801, "id": 1169025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169026", "text": "_Imported from Lighthouse._\nComment by **Samsonov Ivan** - 2009-03-26 21:00:34 UTC\n\n+1\n", "created_at": "2011-05-16 03:14:12", "user": 789801, "id": 1169026}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169027", "text": "_Imported from Lighthouse._\nComment by **igonef** - 2009-03-27 06:31:51 UTC\n\n+1\n", "created_at": "2011-05-16 03:14:13", "user": 789801, "id": 1169027}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169028", "text": "_Imported from Lighthouse._\nComment by **Akira Matsuda** - 2009-03-27 11:20:18 UTC\n\n+1\n", "created_at": "2011-05-16 03:14:13", "user": 789801, "id": 1169028}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169029", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-03-27 11:31:15 UTC\n\nI'm gonna be the party pooper here, but simply saying \"+1\" does nothing good for the ticket. Please see the contribution guide linked in the help text =>.\n\nThe part about commenting:\n\n> Reviewing Changes\n> Are you happy with the tests, can you follow what they're testing, is there anything missing\n> Does the documentation still seem right to you\n> Do you like the implementation, can you think of a nicer or faster way to implement a part of their change\n> Once you're happy it's a good change, comment on the lighthouse ticket indicating your approval. Your comment should indicate that you like the change and what you like about it.\n> Something like: I like the way you've restructured that code in generate_finder_sql, much nicer. The tests look good too.\n> If your comment simply says +1, then odds are other reviewers aren't going to take it too seriously. Show that you took the time to review the patch. Once three people have approved it, add the verified tag. This will bring it to the attention of a committer who'll then review the changes looking for the same kinds of things.\n", "created_at": "2011-05-16 03:14:14", "user": 789801, "id": 1169029}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169030", "text": "_Imported from Lighthouse._\nComment by **Yaroslav Markin** - 2009-03-27 11:38:07 UTC\n\n@Eloy AFAIR old Rails Trac used to have something like \"+1 only if you've tested it yourself\", and I think this is the case here ‚Äî tests pass, works as expected, \"works for me\".\n\nWhen someone comes with \"something's wrong with this\", well, different story.\n", "created_at": "2011-05-16 03:14:14", "user": 789801, "id": 1169030}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169031", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-03-27 11:47:42 UTC\n\n> @Eloy AFAIR old Rails Trac used to have something like \"+1 only if you've tested it yourself\", and I think this is the case here ‚Äî tests pass, works as expected, \"works for me\".\n\nWell I don't know about the past, I'm just reading what it currently says:\n\n> Your comment should indicate that you like the change and what you like about it. Something like: I like the way you've restructured that code in generate_finder_sql, much nicer. The tests look good too. If your comment simply says +1, then odds are other reviewers aren't going to take it too seriously. Show that you took the time to review the patch.\n\nSo in both cases (good/problem) only a +/- 1 won't be taken too seriously. Which I can understand as it's basically not constructive criticism. Note that I'm also not claiming it's deconstructive criticism, it's neither :)\n", "created_at": "2011-05-16 03:14:15", "user": 789801, "id": 1169031}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169032", "text": "_Imported from Lighthouse._\nComment by **Pratik** - 2009-03-27 11:54:15 UTC\n\nI agree with Eloy. Being the asignee here, I wouldn't take seriously the massive influx of +1s in a very short time.\n\nThat is not to say there is anything wrong with the patch itself. Patch looks ok and I'll apply the next time I am applying pending patches.\n", "created_at": "2011-05-16 03:14:16", "user": 789801, "id": 1169032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169033", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-05-01 21:45:57 UTC\n\n(from [db0bfe4ede3cdfc2e4ccdb2a89525a914e6d0913]) Default scope :order should be overridden by named scopes.\n\n[#2346 state:committed]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\nhttp://github.com/rails/rails/commit/db0bfe4ede3cdfc2e4ccdb2a89525a914e6d0913\n", "created_at": "2011-05-16 03:14:16", "user": 789801, "id": 1169033}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169034", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-05-01 21:45:58 UTC\n\n(from [628b4ad679b1971427a20461e8c2332d492e4655]) Default scope :order should be overridden by named scopes.\n\n[#2346 state:committed]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\nhttp://github.com/rails/rails/commit/628b4ad679b1971427a20461e8c2332d492e4655\n", "created_at": "2011-05-16 03:14:17", "user": 789801, "id": 1169034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169035", "text": "_Imported from Lighthouse._\nComment by **Jon** - 2009-06-25 20:49:39 UTC\n\nI'm not so sure this bug is fixed. Product.my_named_scope works now, but I'm losing the order key on something like @store.products.my_named_scope.  So a scoped query isn't respecting the :order key of a named_scope when a default_scope is present or an order clause of a parent model is present.\n\nI made a gist of some of my app's output here: http://gist.github.com/136140\n\nProbably related to ticket #2253\n", "created_at": "2011-05-16 03:14:17", "user": 789801, "id": 1169035}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169036", "text": "_Imported from Lighthouse._\nComment by **jack dempsey (jackdempsey)** - 2009-07-29 15:16:24 UTC\n\nNot working for me as well. Following a couple of the links, starting with Jon's to ticket #2253, lead to what looks like a good solution. Will try the patch later if I can, but for now wanted to give another \"ain't working here\".\n", "created_at": "2011-05-16 03:14:18", "user": 789801, "id": 1169036}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169037", "text": "_Imported from Lighthouse._\nComment by **Jon** - 2009-07-29 15:19:50 UTC\n\nThanks Jack.  In my experimentation, some of the other keys weren't working either. Primarily :select.  This is a pretty dangerous bug.\n", "created_at": "2011-05-16 03:14:18", "user": 789801, "id": 1169037}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169038", "text": "_Imported from Lighthouse._\nComment by **Jamie Hill** - 2009-12-05 14:25:46 UTC\n\nSorry to resurrect an old ticket but this is definitely still an issue, default_scope becomes pretty much unusable without being able to override the :order etc. in named scopes.\n", "created_at": "2011-05-16 03:14:18", "user": 789801, "id": 1169038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169165", "text": "Fixed on rails 3.1.\n", "created_at": "2011-05-16 03:21:39", "user": 9582, "id": 1169165}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2357\nCreated by **Steffen Bartsch** - 2011-02-17 08:07:22 UTC\n\nRight now, ActiveRecord assigns table aliases for association joins fairly unpredictable.  The first association to a certain table keeps the table name.  Further joins with associations to that table use aliases consisting of the association names in the path.\n\nWith the great flexibility of named_scoped, it is increasingly common for app developers not to know about already existing joins at coding time.  Also, the order of joins in a Hash is undefined in Ruby 1.8.\n\nTable aliases are needed, though, for building conditions on the association tables.  With our plugin declarative_authorization, which is using named_scopes to rewrite queries according to permissions, we frequently run into problems because of unpredictable table aliases.\n\nI'd like to propose (and am willing to implement) the following simple API for querying the expected table alias for certain association join path, to be used by app developers\n\n``` ruby\nActiveRecord::Base.table_alias_for(*path)\n\n# Example:\ncompany_alias = User.table_alias_for(:home_branch, :company)\nUser.some_scope.find(:all, \n    :joins      => {:home_branch => :company}, \n    :conditions => [\"#{company_alias}.name LIKE ?\", search])\n```\n\nThe actual algorithm for determining the table alias should work as follows:\n- All joins receive a table alias according to the join path\n- Association names in a path are concatenated into a long alias, i.e. :home_branch, :company => \"home_branch_company\"\n- Aliases exceeding the max alias name length are shortened to (max_length - 9) and concatenated with an underscore and 8 characters from the long alias string hash in hex\n\nI.e.\n\n``` ruby\nlong_alias = join_path * \"_\"\ntable_alias = long_alias[0, max_table_alias_length - 9] + \n    \"_\" + (\"%x\" % long_alias.hash)[0,8]\n```\n\nThoughts?\n", "labels": [], "number": 606, "updated_at": "2015-02-19 16:00:37", "user": 789801, "closed_at": "2011-05-21 15:11:49", "id": 904214, "title": "Predictable Table Aliases in Joins", "url": "https://api.github.com/repos/rails/rails/issues/606", "created_at": "2011-05-16 03:20:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169054", "text": "_Imported from Lighthouse._\nComment by **ronin-38963 (at lighthouseapp)** - 2009-04-25 00:50:26 UTC\n\nThis should definitely be addressed. It's a huge issue for named_scope use, as you stated.\n", "created_at": "2011-05-16 03:20:06", "user": 789801, "id": 1169054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169055", "text": "_Imported from Lighthouse._\nComment by **Brian Langenfeld** - 2009-04-26 07:03:38 UTC\n\nGood to see you again, Steffen!\n\nI recently did some screwing around in ActiveRecord base.rb to make `:conditions` \"follow along\" with the `:joins` specified in `find`.  So you can do something like this...\n\n``` ruby\nBlah.find(:all,\n  :joins => {:foo => {:bar => {:baz => :foos}}},\n  :conditions => {:foo => {:bar => {:baz => {:foos => {:name => 'Qux'}}}}}\n)\n```\n\n...and the generated SQL will have the correct table alias for `:foos` (probably something like `blahs_foos`).  The conditions can be arbitrarily complex, as long as your attribute and association names are correct and all referenced associations are included in `:joins`.\n\nThis patch doesn't really do what Steffen requested, but it might help some users.  It makes `:conditions` behave in such a way that you don't really need to know the table aliases in the first place.\n\nOf course, if you want to test for anything but equality (like in Steffen's example, using a LIKE), this patch isn't going to help.  I wonder if we could/should get the job done by also amending `find` to make `:conditions` able to handle things other than equality (e.g. like, not_like, between, not_between).\n\n``` ruby\nUser.some_scope.find(:all, \n    :joins      => {:home_branch => :company}, \n    :conditions => {:home_branch => :company => {:name => like {search}}})\n```\n\nPatch attached.  It doesn't include any new tests, but I did make sure that none of the existing ActiveRecord tests broke.  (Tested against sqlite3 only.)\n", "created_at": "2011-05-16 03:20:06", "user": 789801, "id": 1169055}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169056", "text": "_Imported from Lighthouse._\nComment by **Steffen Bartsch** - 2009-04-26 10:16:57 UTC\n\nI'd say, we should have both, a way of predicting table aliases for complex named_scopes and an easy mechanism for nested conditions as you propose, Brian.\n\nThe problem with the last code block in Brian's comment is that it relies on the method like to be available in the scope of the find call.  Even if you  added all operators as instance methods to AR (which would introduce quite a lot of noise in the models), you still wouldn't be able to use those when calling find from a controller, for instance.\n\nYou could do something like this, but it is quite a lot of code, I'd say:\n\n``` ruby\nUser.some_scope.find(:all,\n    :conditions => ActiveRecord.condition {\n        {:home_branch => :company => {:name => like {search}}}})\n```\n", "created_at": "2011-05-16 03:20:07", "user": 789801, "id": 1169056}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169057", "text": "_Imported from Lighthouse._\nComment by **ronin-38963 (at lighthouseapp)** - 2009-06-06 10:01:25 UTC\n\nI still support strongly Steffen's original report. It's easy to misuse the nested hash conditions/joins syntax and think you're doing The Right Thing, until you look at the SQL on the console.\n\nJoining a table twice requires a crafted joins string and a crafted conditions string, else all hell breaks loose. It really kills the joy of scoping.\n\nI would love to see what Frederick Cheung has to say about this.\n", "created_at": "2011-05-16 03:20:07", "user": 789801, "id": 1169057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169058", "text": "_Imported from Lighthouse._\nComment by **wtn** - 2009-09-28 22:18:27 UTC\n\nYou should check out arel:\n\nhttp://github.com/nkallen/arel\n\nI think Emilio's arel branch will get merged into ActiveRecord at some point.\n", "created_at": "2011-05-16 03:20:07", "user": 789801, "id": 1169058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169059", "text": "_Imported from Lighthouse._\nComment by **wtn** - 2009-09-28 22:22:36 UTC\n\nThis looks like a dupe of #2087\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2087\n\nEven though you offer a solution, I think the preference is to stick with the status quo for now, so I imagine it will be marked as won't fix.\n", "created_at": "2011-05-16 03:20:08", "user": 789801, "id": 1169059}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169060", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:44 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:20:08", "user": 789801, "id": 1169060}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169061", "text": "_Imported from Lighthouse._\nComment by **tankwanghow** - 2011-02-18 14:12:39 UTC\n\nYes Predictable table aliasing in needed in activerecord\n", "created_at": "2011-05-16 03:20:08", "user": 789801, "id": 1169061}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169062", "text": "Attachments saved to Gist: http://gist.github.com/971622\n", "created_at": "2011-05-16 03:20:09", "user": 789801, "id": 1169062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3140625", "text": "shouldn't this issue be reopened? I think that is was automatically closed in import. Also I think that it is clear that the issue exists even if the solution might not be the proposed one, but very different. I personally think, that it would be enough to allow user to define join aliases manually and let developers override the default **unpredictable** naming convention (when combining  scopes from different sources i.e. plugins etc).\n", "created_at": "2011-12-14 15:02:08", "user": 19652, "id": 3140625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29442005", "text": "Hit the same issue. Ability to define my alias would have helped. Is this planned?\n", "created_at": "2013-11-28 05:58:38", "user": 2002310, "id": 29442005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29552274", "text": "@azitabh : Hello, the issues imported from lightroom have all been closed. If you still experience this problem with a supported rails version (I mean 4.0.0 and greater) please open an issue with an executable gist that reproduce the problem you are exepriecing. You can use [this snippet](https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_gem.rb) as a foundation. Thank you!\n", "created_at": "2013-11-30 13:21:49", "user": 354185, "id": 29552274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/75077200", "text": "I have a similar problem! I have posted a question on stack overflow:\n\nhttp://stackoverflow.com/questions/28595636/rails-4-how-to-give-alias-names-to-includes-and-joins-in-active-record-que\n\nHere an example app:\n\nhttps://gist.github.com/phlegx/add77d24ebc57f211e8b\n", "created_at": "2015-02-19 15:58:51", "user": 111506, "id": 75077200}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2358\nCreated by **ippa** - 2011-02-22 08:32:33 UTC\n\nThe new smart render that automaticly chooses if it's a file, a partial etc seems to miss arguments sometimes. I haven't done extensive research but I've encountered it a couple of times.\n\nThis works as expected:\n<%= render :partial => \"open_hours\", :locals => { :foo => \"bar\"} %> ## variable \"foo\" contains \"bar\" when accessed in the partial _open_hours.erb\n\nThis doesn't:\n<%= render \"open_hours\", :locals => { :foo => \"bar\"} %> ## variable \"foo\" is undefined when accessed in the partial _open_hours.erb\n\nIf I remember it correctly, I encountered the very same problem when rendering a partial with a collection, trying to modify the local variable with the :as option.\n", "labels": [], "number": 607, "updated_at": "2011-05-16 03:23:47", "user": 789801, "closed_at": "2011-05-16 03:23:47", "id": 904215, "title": "new smart render misses arguments", "url": "https://api.github.com/repos/rails/rails/issues/607", "created_at": "2011-05-16 03:20:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169064", "text": "_Imported from Lighthouse._\nComment by **Jeffrey Hardy** - 2009-03-27 15:56:59 UTC\n\nActionView::Base#render != ActionController::Base#render. The new, \"smart\" rendering isn't in AV::Base#render. This confused me too.\n", "created_at": "2011-05-16 03:20:15", "user": 789801, "id": 1169064}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169065", "text": "_Imported from Lighthouse._\nComment by **thedarkone** - 2009-03-27 16:48:36 UTC\n\nYou need to call render like this:\n\n```\n<%= render 'open_hours', :foo => 'bar' %>\n```\n", "created_at": "2011-05-16 03:20:15", "user": 789801, "id": 1169065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169066", "text": "_Imported from Lighthouse._\nComment by **ippa** - 2009-03-27 17:14:43 UTC\n\n@Jeffrey: right, but.. both my snippets Does render the correct partial. The confusing part is that the :locals param Only works when I explicity use :partial.\n\n@thedarkone: Thanks for the shortcut to :locals, but the same \"problem\" shows itself in others forms too, this is another example:\n\n<%= render :partial => \"kids/kid_presentation\", :collection => @kids, :as => :kid %>  ## Renders the correct  partial, defining the variable \"kid\" for the items in the collection in the view.\n\n<%= render \"kids/kid_presentation\", :collection => @kids, :as => :kid %>  ## Renders the correct partial, but the variable \"kid\" is undefined in the view.\n\nShouldn't both work since they both understand that it's a partial?\n", "created_at": "2011-05-16 03:20:15", "user": 789801, "id": 1169066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169067", "text": "_Imported from Lighthouse._\nComment by **Jeffrey Hardy** - 2009-03-27 19:39:57 UTC\n\nWhen rendering using a string as the first arg, the second arg is assumed to be the locals hash. So, what you're really getting here is:\n\n<%= render \"kids/kid_presentation\", :locals => { :collection => @kids, :as => :kid } %>\n\nhttp://github.com/rails/rails/blob/dd2eb1ea7c34eb6496feaf7e42100f37a8dae76b/actionpack/lib/action_view/base.rb#L240\n", "created_at": "2011-05-16 03:20:16", "user": 789801, "id": 1169067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169068", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:44 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:20:16", "user": 789801, "id": 1169068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169069", "text": "_Imported from Lighthouse._\nComment by **Szymon Je≈º** - 2010-05-16 16:02:14 UTC\n\nI have a similar issue like the one described by ippa.\nIn my case no variables (locals, objects, collections) passed to render \"get\" to the partial.\nThe only variables that \"get\" to the partial are the instance variables from the controller action and from the template which is calling the partial to render.\nI tried for several hours (more than 4) many configurations of the render method. Nothing worked. I even tried to dig in to the Rails source code but failed to find the problem.\n\nI'm using Rails 3.0.0beta3 on Ruby 1.8.7p249.\n\nI used:\n\n<pre>\n<%= render :partial => \"organization_unit\", :collection => @organization_units %>\n<%= render \"organization_unit\", {:collection => @organization_units, :as => :organization_unit} %>\n<%= render @organization_units %>\n<%= render :partial => 'organization_unit', :locals => {:organization_unit => @organization_unit} %>\n</pre>\n\n\netc.\n\nAnd I always get:\n\n<pre>\nNoMethodError in Organization_units#index\n\nShowing /app/views/organization_units/_organization_unit.html.erb where line #2 raised:\n\nundefined method `name' for nil:NilClass\n\nExtracted source (around line #2):\n\n1: <tr>\n2:   <td><%= @organization_unit.name %></td>\n3:   <td><%= @organization_unit.email %></td>\n\nTrace of template inclusion: app/views/organization_units/index.html.erb \n</pre>\n\n\nOnly this code works:\n\n<pre>\n<% @organization_units.each do |organization_unit| %>\n  <% @organization_unit = organization_unit%>\n  <%= render \"row\" %>\n<% end %>\n</pre>\n\n\nAny clue?\n", "created_at": "2011-05-16 03:20:16", "user": 789801, "id": 1169069}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169070", "text": "_Imported from Lighthouse._\nComment by **Szymon Je≈º** - 2010-05-16 16:06:38 UTC\n\nHuh? Not all of the comment got posted. It seems that the HTML tags caused some trouble.\n\nHire is the continuation of the above comment:\n\nAnd I always get:\n\n<pre>\nNoMethodError in Organization_units#index\n\nShowing /app/views/organization_units/_organization_unit.html.erb where line #2 raised:\n\nundefined method `name' for nil: NilClass\n\nExtracted source (around line #2):\n\n1: < tr>\n2:   < td><%= @organization_unit.name %></ td>\n3:   < td><%= @organization_unit.email %></ td>\n\nTrace of template inclusion: app/views/organization_units/index.html.erb \n</pre>\n\n\nOnly this code works:\n\n<pre>\n<% @organization_units.each do |organization_unit| %>\n  <% @organization_unit = organization_unit%>\n  <%= render \"row\" %>\n<% end %>\n</pre>\n\n\nAny clue?\n", "created_at": "2011-05-16 03:20:17", "user": 789801, "id": 1169070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169071", "text": "_Imported from Lighthouse._\nComment by **iHiD** - 2010-08-04 09:08:10 UTC\n\nDid you try:\n\n``` ruby\n<%= render 'organization_unit', :organization_unit => @organization_unit %>\n```\n\nand\n\n``` ruby\n<% @organization_units.each do |organization_unit| %>\n  <%= render \"row\", :organization_unit => organization_unit %>\n<% end %>\n```\n\n?\n", "created_at": "2011-05-16 03:20:17", "user": 789801, "id": 1169071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169072", "text": "_Imported from Lighthouse._\nComment by **Szymon Je≈º** - 2010-08-05 19:17:18 UTC\n\nToday a checked out Rails 3 RC and plyed with my code, this is working:\n\n``` erb\n<%= render @organization_units %>\n```\n\nand the single organization unit is available as `organization_unit` local variable in the partial `_organization_unit.html.erb`.\n\nI tested this code on Rails 3.0.0.beta4 and 3.0.0.beta3 it's working there to... so actually it was my error [embarrassed]. I used `@organization_unit` instead of `organization_unit` in the partial (which was the Rails Way in Rails < 3).\n\nSorry for bothering you and IHID - thanks for the suggestion.\n", "created_at": "2011-05-16 03:20:18", "user": 789801, "id": 1169072}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169073", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 20:44:52 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:20:18", "user": 789801, "id": 1169073}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169074", "text": "_Imported from Lighthouse._\nComment by **Dave Schweisguth** - 2011-04-04 17:22:09 UTC\n\nThis is still a problem. My version:\n\nrender 'foo', :object => bar\n\ndefined a local named foo with the value of bar in Rails 2.3.11. It does not in Rails 3.0.5. A workaround is\n\nrender 'foo', :foo => bar\n\nbut this is ever so slightly duplicative. Is this a regression (which is my guess) or an intentional change? If a regression it would be nice to fix it sooner rather than later and remove one bump in the road from Rails 2 to Rails 3.\n", "created_at": "2011-05-16 03:20:18", "user": 789801, "id": 1169074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169075", "text": "_Imported from Lighthouse._\nComment by **Dave Schweisguth** - 2011-04-04 17:29:19 UTC\n\nP.S. On futher consideration it's possible that the warning box in the section of http://guides.rubyonrails.org/layouts_and_rendering.html documenting :object says that the behavior I was using is intentionally not in Rails 3. (I'm uncertain whether \"default local variable\" refers to the one set by :object.) Confirmation of that welcome.\n", "created_at": "2011-05-16 03:20:19", "user": 789801, "id": 1169075}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2368\nCreated by **Richard Delph** - 2011-02-19 09:28:16 UTC\n\nHi everyone, I seem to be having what appears to be a major issue with sessions. I'm running rails 2.3.2, with mysql on mac os x and the problem arose whilst following the prag prog's agile dev with rails book (3rd edition latest release). I change the default session store to use active record, run all the necessary rake tasks to create the sessions migration, run the migration itself and reset the rails mongrel server. Now as soon as an action is called that tries to access the session I receive an InvalidAuthenticityToken error however I can see in my trace that this token is included in the request params. SO... I didn't some hunting around and added the following line to controller the action lies in:\n\nprotect_from_forgery :only => [:create, :update, :destroy]\n\nand while this solves the invalidauthenticitytoken error it doesn't solve the invalidauthenticitytoken error when actions in other controllers are called e.g. create/edit/destroy! so eventually I just overrode the lot by adding this to my development.rb env file:\n\nconfig.action_controller.allow_forgery_protection = false\n\nand this produced some strange results, it seems to create a new session id for each request which I can see whilst monitoring the DB table!\n\ni finally decided to revert to the default cookie store but then started receiving more errors as I filled up the 4kb data limit pretty quickly which is understandable! so this leaves me stumped! is this a problem with the latest rails release or am I completely missing something here?\n\nany help is much appreciated.\n\nkind regards\n\nRichard Delph\n", "labels": [], "number": 608, "updated_at": "2011-05-16 03:24:31", "user": 789801, "closed_at": "2011-05-16 03:24:31", "id": 904217, "title": "Rails 2.3.2 sessions problem", "url": "https://api.github.com/repos/rails/rails/issues/608", "created_at": "2011-05-16 03:20:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169076", "text": "_Imported from Lighthouse._\nComment by **Richard Delph** - 2009-04-02 02:38:14 UTC\n\nJust wondering if anyone has encountered the same error as described above when using the active record session store?\n", "created_at": "2011-05-16 03:20:24", "user": 789801, "id": 1169076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169077", "text": "_Imported from Lighthouse._\nComment by **Richard Delph** - 2009-04-02 03:26:22 UTC\n\nWith the help of someone else who has encountered this error it seems I just needed to comment out the line\n\nprotect_from_forgery\n\nin the application controller and this seemed to have sorted it. though the error still stands with new sessions being created when inserting the line \n\nconfig.action_controller.allow_forgery_protection = false\n\nin the dev environment file...\n\nRich\n", "created_at": "2011-05-16 03:20:25", "user": 789801, "id": 1169077}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169078", "text": "_Imported from Lighthouse._\nComment by **ronin-52463 (at lighthouseapp)** - 2009-04-05 08:51:28 UTC\n\nI've had the same problem and didn't find any solution.\n\nI think that disabling protections will go around the problem and not solve it.\n", "created_at": "2011-05-16 03:20:25", "user": 789801, "id": 1169078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169079", "text": "_Imported from Lighthouse._\nComment by **Tony Pitale** - 2009-05-09 03:06:00 UTC\n\n+1 using anything other than cookie sessions\n", "created_at": "2011-05-16 03:20:25", "user": 789801, "id": 1169079}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169080", "text": "_Imported from Lighthouse._\nComment by **philip (at packetnode)** - 2009-05-16 06:03:56 UTC\n\n+1 here. Went back to 2.1.1 and it went away.\n", "created_at": "2011-05-16 03:20:26", "user": 789801, "id": 1169080}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169081", "text": "_Imported from Lighthouse._\nComment by **John Smilanick** - 2009-05-18 17:20:45 UTC\n\nI have similar session issues under slightly different circumstances. I overloaded render_optional_error_file (called from rescue_action_in_public) and read some data from the session to display custom 500 and 404 layouts based on the session data. No matter what happens after the session is loaded the session gets reset and the user gets logged out (might be caused by a new session_id). Since these are both related to error handling I thought this might be relevant.\n", "created_at": "2011-05-16 03:20:26", "user": 789801, "id": 1169081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169082", "text": "_Imported from Lighthouse._\nComment by **Robin Wunderlin** - 2009-06-22 15:12:37 UTC\n\nSame problem here.\n\nLooks like the authenticity_token of the form is not saved correctly by the session.\nSo after submitting the form the comparison of the param value and the session value doesn't work correctly.\n\n(Removing \"protect_from_forgery\" is not a solution)\n-> I changed to cookies. (Till the problem is solved)\n", "created_at": "2011-05-16 03:20:26", "user": 789801, "id": 1169082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169083", "text": "_Imported from Lighthouse._\nComment by **windix** - 2009-06-26 00:40:11 UTC\n\nI had exactly the same problem here yesterday.\n\n(My environment: ROR 2.3.2, MySQL 5.1.35 on Mac OS X 10.5.7)\n\nI logged authenticity_token and found it changed for each request but the params value submitted by the form still used the old value which caused the problem. \n\nIt's the same as Robin Wunderlin mentioned above.\n\nBut curiously, I restarted my Mac this morning and it seems works fine now.\n", "created_at": "2011-05-16 03:20:27", "user": 789801, "id": 1169083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169084", "text": "_Imported from Lighthouse._\nComment by **Mauricio Gomes** - 2009-06-29 13:12:35 UTC\n\nI've had the same problem with ActiveRecord sessions and I was skeptical about windix's solution. I rebooted my mac though and my AuthenticityToken problems seemed to have gone away. It doesn't really make sense...\n", "created_at": "2011-05-16 03:20:27", "user": 789801, "id": 1169084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169085", "text": "_Imported from Lighthouse._\nComment by **Sebastian Nanek** - 2009-07-07 10:09:25 UTC\n\nPerhaps trying to use edge rails may help with your problem.\n", "created_at": "2011-05-16 03:20:27", "user": 789801, "id": 1169085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169086", "text": "_Imported from Lighthouse._\nComment by **Robin Wunderlin** - 2009-08-07 14:03:06 UTC\n\nWorks well with 2.3.3\n", "created_at": "2011-05-16 03:20:28", "user": 789801, "id": 1169086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169087", "text": "_Imported from Lighthouse._\nComment by **Geoff** - 2010-02-25 22:55:04 UTC\n\nI appear to be having the same issue in 2.3.4.\n\nApp was working fine with cookie store but client requested we switch to active record store and i keep getting ActionController::InvalidAuthenticityToken errors on all form submissions. The authenticity_token is getting sent in the request but apparently is not valid.\n\nI'm seeing sessions get created in the sessions table as well. Very strange.\n", "created_at": "2011-05-16 03:20:28", "user": 789801, "id": 1169087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169088", "text": "_Imported from Lighthouse._\nComment by **realbite** - 2010-03-16 14:33:43 UTC\n\nHad the same problem... new sessions table entry for every request and getting ActionController::InvalidAuthenticityToken. Solved it by just clearing the cookie cache in the Browser.\n", "created_at": "2011-05-16 03:20:28", "user": 789801, "id": 1169088}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169089", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:44 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:20:29", "user": 789801, "id": 1169089}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169090", "text": "_Imported from Lighthouse._\nComment by **kristian.hellquist (at gmail)** - 2010-09-17 10:55:39 UTC\n\n\"I'm seeing sessions get created in the sessions table as well. Very strange.\"\n\nI hade similar problem. When I specified:\n\n  ActionController::Base.session_options[:expire_after]=2.years \n\nNew sessions weren't created every request.\n\nThis might not have anything to do with ActionController::InvalidAuthenticityToken, but maybe helps someone\n", "created_at": "2011-05-16 03:20:29", "user": 789801, "id": 1169090}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169311", "text": "This seems to be fixed on Rails 3.1 with the Rack::Session move.\n", "created_at": "2011-05-16 03:24:31", "user": 9582, "id": 1169311}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2379\nCreated by **Phil Hagelberg** - 2010-11-25 12:13:40 UTC\n\nTo ease certain types of deployments, it's desirable that the tmp directory be configurable in the Initializer block rather than hardcoded in. This patch implements that option as well as making other parts of Rails respect the new option.\n\nThis (along with ticket #2350) makes it possible to deploy Rails apps as ruby gems, keeping all instance-specific data in a single directory while the application code lives in the gem home.\n", "labels": [], "number": 609, "updated_at": "2011-05-21 15:11:49", "user": 789801, "closed_at": "2011-05-21 15:11:49", "id": 904219, "title": "[PATCH] Make path to tmp directory configurable", "url": "https://api.github.com/repos/rails/rails/issues/609", "created_at": "2011-05-16 03:20:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169091", "text": "_Imported from Lighthouse._\nComment by **Jeff Hodges** - 2009-03-30 23:15:31 UTC\n\n+1\n\nThis is a solid patch. I would like the task description \"Clears all session files in tmp\" changed to desc \"Clears all session files in the tmp directory\" and similar to the other one. However, that's just being picky.\n", "created_at": "2011-05-16 03:20:35", "user": 789801, "id": 1169091}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169092", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2009-03-31 04:01:13 UTC\n\nTwo things I'd like to improve:\n- I think tmp_dir may be useful to the end user, what about documentation for it.\n- I think it is better style not to mix slashes and File.join. If you use File.join then leave slashes to it.\n- The analogous accessors for lots of stuff end with \"_path\". To be consistent in that naming I'd call it \"tmp_path\".\n", "created_at": "2011-05-16 03:20:36", "user": 789801, "id": 1169092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169093", "text": "_Imported from Lighthouse._\nComment by **Phil Hagelberg** - 2009-03-31 04:08:49 UTC\n\nThanks, fellas. I will make these changes and attach another patch.\n\nI added comments for the tmp_dir accessor; I believe those should get picked up by RDoc. Is there somewhere else it should be documented?\n", "created_at": "2011-05-16 03:20:36", "user": 789801, "id": 1169093}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169094", "text": "_Imported from Lighthouse._\nComment by **Phil Hagelberg** - 2009-04-22 03:59:11 UTC\n\nMade the fixes Xavier suggested.\n", "created_at": "2011-05-16 03:20:37", "user": 789801, "id": 1169094}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169095", "text": "_Imported from Lighthouse._\nComment by **Shane Liebling** - 2009-07-12 20:39:06 UTC\n\nI was wondering if this was going to get rolled into the mainline rails anytime soon - I for one could really use it!!\n", "created_at": "2011-05-16 03:20:37", "user": 789801, "id": 1169095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169096", "text": "_Imported from Lighthouse._\nComment by **Kieran P** - 2009-08-08 06:05:22 UTC\n\n+1, but the patch supplied does not apply cleanly to Rails 3.0 (master). I've uploaded a modified patch that does.\n", "created_at": "2011-05-16 03:20:38", "user": 789801, "id": 1169096}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169097", "text": "_Imported from Lighthouse._\nComment by **Kieran P** - 2009-08-08 06:28:06 UTC\n\nPrevious file wasn't a proper patch. This one should be better.\n", "created_at": "2011-05-16 03:20:39", "user": 789801, "id": 1169097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169098", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2009-08-08 22:52:39 UTC\n\n+1 for the feature\n\nverified that the patch applies cleanly to master\n\nThere currently isn't any tests associated with this patch - would it be possible to include tests on this? (I'm asking if its possible, not being patronizing :-) )\n", "created_at": "2011-05-16 03:20:39", "user": 789801, "id": 1169098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169099", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2009-08-08 23:08:28 UTC\n\nI was discussing about this feature with Yehuda a week ago. He told me that all Rails paths should be configurable, like Rails.paths.vendor #=> RAILS_ROOT/vendor. Not sure if he is already working on that with Carl, but I'm assigning it to him.\n", "created_at": "2011-05-16 03:20:40", "user": 789801, "id": 1169099}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169100", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2009-08-08 23:16:56 UTC\n\n+1 I agree with Yehuda on all Rails path being configurable... that would be awesome!\n", "created_at": "2011-05-16 03:20:40", "user": 789801, "id": 1169100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169101", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-08-09 04:25:24 UTC\n\n+1 on idea and approach to have all paths as configurable.\n\npatch applies cleanly but contains a typo (fixed patch attached), i was unable to think of a proper way to test it, nor where other paths are tested.\nI also think that it should be somewhat a Configuration accessor, other than the Rails instance.\n", "created_at": "2011-05-16 03:20:41", "user": 789801, "id": 1169101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169102", "text": "_Imported from Lighthouse._\nComment by **Kieran P** - 2009-08-09 04:36:42 UTC\n\nMichael (Koz) suggested (on IRC) that it be Rails.tmpdir  to match  Dir.tmpdir  used other places in Rails, so I based the getter/setter from public_path, rather than make a Configuration accessor as in the original patch.\n", "created_at": "2011-05-16 03:20:41", "user": 789801, "id": 1169102}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169103", "text": "_Imported from Lighthouse._\nComment by **Yehuda Katz (wycats)** - 2009-08-09 09:00:01 UTC\n\nOn master, we have already moved toward a more flexible way to describe paths. Check out this block from configuration.rb\n\n``` ruby\n      @paths = Rails::Application::Root.new(root_path)\n      @paths.app                 \"app\",             :load_path => true\n      @paths.app.metals          \"app/metal\",       :eager_load => true\n      @paths.app.models          \"app/models\",      :eager_load => true\n      @paths.app.controllers     \"app/controllers\", builtin_directories, :eager_load => true\n      @paths.app.helpers         \"app/helpers\",     :eager_load => true\n      @paths.app.services        \"app/services\",    :load_path => true\n      @paths.lib                 \"lib\",             :load_path => true\n      @paths.vendor              \"vendor\",          :load_path => true\n      @paths.vendor.plugins      \"vendor/plugins\"\n      @paths.tmp                 \"tmp\"\n      @paths.tmp.cache           \"tmp/cache\"\n      @paths.config              \"config\"\n      @paths.config.locales      \"config/locales\"\n      @paths.config.environments \"config/environments\", :glob => \"#{RAILS_ENV}.rb\"\n```\n\nThe basic idea is that we mirror the default directory structure for ease of understanding, but users can specify whatever paths they want for a part of the path hierarchy. Each virtual path can also have multiple physical paths. When Carl gets back from vacation we'll finish this up (we got detoured to work on the gem bundler) and write it up.\n", "created_at": "2011-05-16 03:20:42", "user": 789801, "id": 1169103}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169104", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:30 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:20:42", "user": 789801, "id": 1169104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169105", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:31 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:20:43", "user": 789801, "id": 1169105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169106", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:20:44", "user": 789801, "id": 1169106}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169107", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:20:44", "user": 789801, "id": 1169107}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169109", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:20:45", "user": 789801, "id": 1169109}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2423\nCreated by **Andrew Bloom** - 2011-02-19 09:28:27 UTC\n\nI found an untested corner of ActionController and a bug in TestProcess when I dug in.\n\nImagine you need to stream some XML (try not to think about all the downsides). See my simple example below and pretend it generates valid output.\n\n``` rails\ndef render_text_with_proc\n  render :text => Proc.new{ |resp, out|\n    1.upto(10){ |i| out.write \"<element>#{i}</element>\" }\n  }\nend\n```\n\nAfter writing something like you see above, you then try to write a test that probably looks something like this:\n\n``` rails\ndef test_render_text_with_proc\n  get :render_text_with_proc\n  assert_response :success\n  assert_select \"element\", 10\nend\n```\n\nThat test will fail with the following trace:\n\n  1) Error:\n  test_render_text_with_proc(RenderTest):\n  TypeError: can't convert Proc into String\n    ./test/../lib/action_controller/vendor/html-scanner/html/tokenizer.rb:26:in `initialize'\n    ./test/../lib/action_controller/vendor/html-scanner/html/tokenizer.rb:26:in`new'\n    ./test/../lib/action_controller/vendor/html-scanner/html/tokenizer.rb:26:in `initialize'\n    ./test/../lib/action_controller/vendor/html-scanner/html/document.rb:16:in`new'\n    ./test/../lib/action_controller/vendor/html-scanner/html/document.rb:16:in `initialize'\n    ./test/../lib/action_controller/test_process.rb:498:in`new'\n    ./test/../lib/action_controller/test_process.rb:498:in `html_document'\n    ./test/../lib/action_controller/assertions/selector_assertions.rb:614:in`response_from_page_or_rjs'\n    ./test/../lib/action_controller/assertions/selector_assertions.rb:213:in `assert_select'\n    ./test/controller/render_test.rb:952:in`test_render_text_with_proc'\n    ./test/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'\n    ./test/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in`run'\n\nI have attached a patch that updates TestProcess and lets this test succeed. This has been built against tags/v2.3.2.1.\n", "labels": [], "number": 610, "updated_at": "2011-05-16 03:24:42", "user": 789801, "closed_at": "2011-05-16 03:24:42", "id": 904220, "title": "Rendering Text with a Proc fails in testing", "url": "https://api.github.com/repos/rails/rails/issues/610", "created_at": "2011-05-16 03:20:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169110", "text": "_Imported from Lighthouse._\nComment by **Andrew Bloom** - 2009-04-06 04:31:37 UTC\n\nI wrote up a slightly more thorough explanation here: http://www.somethingunimportant.com/2009/04/06/rails-bug-found-while-streaming-output-in-actioncontroller-tests/\n", "created_at": "2011-05-16 03:20:51", "user": 789801, "id": 1169110}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169113", "text": "_Imported from Lighthouse._\nComment by **Steve Madsen** - 2009-10-07 19:51:31 UTC\n\nI can confirm that this problem still exists in 2.3.4, although this patch doesn't fix it for me because it only triggers the call to the proc due to assert_select. If you evaluate @response.body in the test or have set Mocha expectations on methods that should be called within the proc, those tests still fail.\n\nI've reworked the patch slightly and existing tests pass, as well as the new test added by Andrew.\n", "created_at": "2011-05-16 03:21:04", "user": 789801, "id": 1169113}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169114", "text": "_Imported from Lighthouse._\nComment by **Steve Madsen** - 2009-10-07 19:57:44 UTC\n\nMinor change to my previous patch. That one caused problems for Mocha expectations because it allowed the proc to be called more than once.\n", "created_at": "2011-05-16 03:21:05", "user": 789801, "id": 1169114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169115", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:45 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:21:05", "user": 789801, "id": 1169115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169116", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-14 13:46:30 UTC\n\nAny updates here?\n\nCould somebody try and reproduce this on latest 2.x/3.x releases or branches? The ticket may be marked as stale if it's not updated in 2 months so if it's still an issue please leave a comment, preferably with a failing test for Rails.\n", "created_at": "2011-05-16 03:21:06", "user": 789801, "id": 1169116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169117", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:31:30 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:21:06", "user": 789801, "id": 1169117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169118", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:24:00 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:21:09", "user": 789801, "id": 1169118}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169119", "text": "Attachments saved to Gist: http://gist.github.com/971623\n", "created_at": "2011-05-16 03:21:09", "user": 789801, "id": 1169119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169322", "text": "Giving a proc to :text is not longer supported.\n", "created_at": "2011-05-16 03:24:42", "user": 9582, "id": 1169322}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2439\nCreated by **Steven Luscher** - 2009-04-07 03:46:04 UTC\n\nFixed what [I thought was a bug in Webrat](https://webrat.lighthouseapp.com/projects/10503-webrat/tickets/199), but turned out to be a bug in Rails.\n\nTurns out, if you try:\n\n``` ruby\npost :update, :\"foo(1i)\" => 1980, :\"foo(2i)\" => 2, :\"foo(3i)\" => 27\n```\n\n‚Ä¶everything works as you would expect. The moment you make that post multipart, though, by adding a file to the mix:\n\n``` ruby\npost :update, :\"foo(1i)\" => 1980, :\"foo(2i)\" => 2, :\"foo(3i)\" => 27, :file => fixture_file_upload(\"birthday_suit.jpg\", \"image/jpg\")\n```\n\n‚Ä¶`params[:\"foo(1i)\"]` unexpectedly becomes `params[:\"foo%281i%29\"]` as the curved brackets get escaped.\n\nPatch attached!\n", "labels": [], "number": 611, "updated_at": "2011-05-16 03:24:51", "user": 789801, "closed_at": "2011-05-16 03:24:51", "id": 904221, "title": "[PATCH] ActionController::Integration::Session no longer mangles multiparameter attribute params when processing multipart requests", "url": "https://api.github.com/repos/rails/rails/issues/611", "created_at": "2011-05-16 03:21:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169122", "text": "_Imported from Lighthouse._\nComment by **Mike Enriquez** - 2009-05-10 00:56:56 UTC\n\nI think there's something funky with the patch.  You probably meant this\n\n``` ruby\nk = first ? key.to_s : \"[#{key.to_s}]\"\n```\n\ninstead of\n\n``` ruby\nk = first ? key.to_s : \"[key.to_s}]\"\n```\n", "created_at": "2011-05-16 03:21:16", "user": 789801, "id": 1169122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169123", "text": "_Imported from Lighthouse._\nComment by **Steven Luscher** - 2009-05-10 02:59:37 UTC\n\nBeautiful typo. Patched patch attached!\n", "created_at": "2011-05-16 03:21:16", "user": 789801, "id": 1169123}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169124", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-06-09 08:15:09 UTC\n\nApplied to 2-3-stable, moving to 3.0.\n\nThis patch doesn't apply cleanly to master, is it no longer needed or?\n", "created_at": "2011-05-16 03:21:16", "user": 789801, "id": 1169124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169125", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2010-04-21 01:31:28 UTC\n\nWe've added the test cases to Rails 3 to verify that this errant behavior does not exist on master\n\nPatch attached\n", "created_at": "2011-05-16 03:21:17", "user": 789801, "id": 1169125}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169126", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2010-04-21 01:31:47 UTC\n\nFYI I worked with the Boston.rb team on this!\n", "created_at": "2011-05-16 03:21:17", "user": 789801, "id": 1169126}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169127", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:30 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:21:17", "user": 789801, "id": 1169127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169128", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:31 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:21:18", "user": 789801, "id": 1169128}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169129", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:21:18", "user": 789801, "id": 1169129}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169130", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:21:18", "user": 789801, "id": 1169130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169131", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:21:19", "user": 789801, "id": 1169131}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169132", "text": "_Imported from Lighthouse._\nComment by **belstaff bag** - 2011-03-25 11:50:09 UTC\n\nChickens slaughtered in the United States\n", "created_at": "2011-05-16 03:21:19", "user": 789801, "id": 1169132}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169133", "text": "Attachments saved to Gist: http://gist.github.com/971624\n", "created_at": "2011-05-16 03:21:19", "user": 789801, "id": 1169133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169344", "text": "This has been fixed.\n", "created_at": "2011-05-16 03:24:51", "user": 9582, "id": 1169344}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2448\nCreated by **Joseph Chen** - 2011-02-01 22:51:19 UTC\n\nIn Rails 2.2, I can perform a request JSON put request by:\n\n1) Use method POST\n2) Set Content-Type header to \"application/json\"\n3) JSON-encode post data\n4) Make sure to add \"_method\"=\"put\" to post data\n\nIn Rails 2.2, this works fine, and my controller correctly invokes the put handler method.\n\nThe great thing with this is that the post data can be highly structured value.  For instance:\n\n```\nvar jsonPostData = {\n   \"_method\": \"put\",\n   \"hash1\": {\n     \"array1\" : [{\n       \"key1\" : \"val\"\n     },{\n       \"key2\" : \"val2\"\n     }]\n   },\n   \"stringVal\" : \"val3\"\n}\n```\n\nThis big structure will automatically be converted into a Ruby hash when it is posted to the controller.\n\nWith Rails 2.3.2, this no longer works.  An error is thrown when the data is posted.\n\nNote that in Rails 2.3, a request submitted \"normally\" with Content-Type set to \"application/x-www-form-urlencoded\" works fine.  However, I don't know of a way to convert my highly structured JSON data (example given above) into data that can be submitted in the \"normal\" fashion.  (If someone knows how to do this, please let me know as it would be an acceptable workaround).\n\nAs it stands, we're stuck using Ruby 2.2 until this problem is resolved.\n", "labels": [], "number": 612, "updated_at": "2011-05-21 15:11:50", "user": 789801, "closed_at": "2011-05-21 15:11:50", "id": 904222, "title": "Rails 2.3 JSON \"put\" request routing is broken", "url": "https://api.github.com/repos/rails/rails/issues/612", "created_at": "2011-05-16 03:21:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169135", "text": "_Imported from Lighthouse._\nComment by **David Burger** - 2009-04-17 01:39:21 UTC\n\nI'm having the same problem.  Code that performed a POST with _method=\"PUT\" using Prototype Ajax.Request worked fine under 2.2.2 and now does not route to the update action in Rails 2.3.2.\n", "created_at": "2011-05-16 03:21:25", "user": 789801, "id": 1169135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169136", "text": "_Imported from Lighthouse._\nComment by **jonas (at stixy)** - 2009-04-23 08:15:12 UTC\n\nYeah, me too. Is anyone working on this? Or, have anyone found a solution?\n", "created_at": "2011-05-16 03:21:25", "user": 789801, "id": 1169136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169137", "text": "_Imported from Lighthouse._\nComment by **Andriy Tyurnikov** - 2009-04-26 08:41:25 UTC\n\nDid you call rake rails:update after switching to 2.3.2?\nPlease post your error message\n", "created_at": "2011-05-16 03:21:26", "user": 789801, "id": 1169137}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169138", "text": "_Imported from Lighthouse._\nComment by **Joseph Chen** - 2009-04-26 16:58:00 UTC\n\nYes rake rails:update was run.\n\nThe error is:\n\n\"Only get, put, and delete requests are allowed.\"\n\nThe stack:\n\n/Users/jc/.multiruby/install/1.8.7-p72/lib/ruby/gems/1.8/gems/actionpack-2.3.2/lib\n/action_controller/routing/recognition_optimisation.rb:64:in `recognize_path'\n/Users/jc/.multiruby/install/1.8.7-p72/lib/ruby/gems/1.8/gems/actionpack-2.3.2/lib/action_controller\n/routing/route_set.rb:437:in`recognize'\n/Users/jc/.multiruby/install/1.8.7-p72/lib/ruby/gems/1.8/gems/actionpack-2.3.2/lib/action_controller\n/routing/route_set.rb:432:in `call'\n", "created_at": "2011-05-16 03:21:26", "user": 789801, "id": 1169138}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169139", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2009-04-26 22:21:20 UTC\n\nPlease show the code you are using that is generating the form / whatever that is PUT'ing.\n", "created_at": "2011-05-16 03:21:26", "user": 789801, "id": 1169139}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169140", "text": "_Imported from Lighthouse._\nComment by **Joseph Chen** - 2009-04-26 23:27:00 UTC\n\nThe post is being done in Ajax, and we happen to be using the ExtJS library for the Ajax request.  As I have mentioned, you can reproduce this simply by doing a POST, passing the form variable \"_method\" = \"put\", and setting content-type to \"application/json\".\n\nvar postData = \n{\n            '_method': 'put',\n            'test': {\n                'name':'test name'\n            },\n            'authenticity_token':window._token\n        }\n\nExt.lib.Ajax.setDefaultPostHeader(false);\n        Ext.lib.Ajax.initHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n```\n    Ext.Ajax.request({\n        url: url,\n        method: 'POST',\n        params: Ext.util.JSON.encode(postData),\n\n    });\n```\n", "created_at": "2011-05-16 03:21:27", "user": 789801, "id": 1169140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169141", "text": "_Imported from Lighthouse._\nComment by **Joseph Chen** - 2009-05-02 04:46:48 UTC\n\nI've stepped through the ActionController routing code and seem to have a fix for the problem.\n\nI've edited the gems/actionpack-2.3.2/lib/action_controller/routing/route_set.rb, line 483.\n\nThe problem was that the previous code set the method to request.method and didn't take into the account the '_method' parameter.  So I simply change the code to check if the method is a post and the '_method' parameter is provided, then the method should be set to whatever the value for method is.\n\ndef extract_request_environment(request)\n        method = request.method\n        if method == :post\n          if request.env['action_controller.request.request_parameters'].include?('_method')\n            method = request.env['action_controller.request.request_parameters']['_method'].to_sym\n          end\n        end\n\n```\n    { :method => method }\n  end\n```\n\nI've attached the route_set.rb file.\n\nI'm not sure if this is the best place to be setting the method type, but it seems to fix the problem.\n", "created_at": "2011-05-16 03:21:27", "user": 789801, "id": 1169141}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169142", "text": "_Imported from Lighthouse._\nComment by **Joseph Chen** - 2009-05-02 05:08:27 UTC\n\nI found a bug with the fix I posted above.  It turns out that the key 'action_controller.request.request_parameters' is not always present.  So we need to check if it exists.\n\nI also extracted the fix out into a file that can be added as config/initializers/rails_action_controller_fix.rb.  So the fix simply overrides the default method with the fix.\n\nIn addition, I added a check for the Rails version so that the fix is only applied when using Rails 2.3.2.\n\nif RAILS_GEM_VERSION == '2.3.2'\n  module ActionController\n    module Routing\n      class RouteSet\n        def extract_request_environment(request)\n          method = request.method\n          if method == :post\n            params_key = 'action_controller.request.request_parameters'\n\n```\n        if request && request.env && request.env.include?(params_key) && request.env[params_key].include?('_method')\n          method = request.env[params_key]['_method'].to_sym\n        end\n      end\n\n      { :method => method }\n    end\n  end\nend\n```\n\n  end\nend\n\nI'd appreciate any suggestions if anyone has a better way to implement this fix.\n", "created_at": "2011-05-16 03:21:27", "user": 789801, "id": 1169142}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169143", "text": "_Imported from Lighthouse._\nComment by **Zyclops** - 2009-05-15 00:27:22 UTC\n\nJoseph - I implement your fix but could not get it too work. In firebug under the post tab in the xhr request i have {\"whatever\":{\"hello\":\"test\"}}, but after adding your fix in, the params do not show up.\n\nSwitching to 2.2 works however.\n", "created_at": "2011-05-16 03:21:28", "user": 789801, "id": 1169143}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169144", "text": "_Imported from Lighthouse._\nComment by **Zyclops** - 2009-05-15 00:30:53 UTC\n\nClient side this is what i have to make the request:\n\n``` javascript\n<script type=\"text/javascript\">\nExt.onReady(function() {\n  Ext.Ajax.request({\n    url: '/publications/index',\n    method: 'POST',\n    jsonData: {whatever: {hello: 'test'}}\n  });\n});\n</script>\n```\n", "created_at": "2011-05-16 03:21:28", "user": 789801, "id": 1169144}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169145", "text": "_Imported from Lighthouse._\nComment by **Joseph Chen** - 2009-05-15 01:03:50 UTC\n\nZyclops, you are missing the '_method': 'put' in your jsonData.  Your request should look like:\n\n```\nurl: '/publications/index',\nmethod: 'POST',\njsonData: {\n  'whatever': {'hello': 'test'},\n  '_method': 'put'\n}\n```\n", "created_at": "2011-05-16 03:21:28", "user": 789801, "id": 1169145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169146", "text": "_Imported from Lighthouse._\nComment by **Seth Ladd** - 2009-06-08 09:00:50 UTC\n\nFor the record, we ran into this bug as well.\n", "created_at": "2011-05-16 03:21:29", "user": 789801, "id": 1169146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169147", "text": "_Imported from Lighthouse._\nComment by **Laurence A. Lee** - 2009-06-08 11:22:56 UTC\n\nIIRC, Rails 2.3 is now Rack Based.  This may be the same Rack bug I ran into months ago.  Here's the quick-fix:\n\nhttp://github.com/lalee/rack/commit/1f3fa756192cd5a0524f6fa136c71d9a9de16f03\n\nHope this helps.\n", "created_at": "2011-05-16 03:21:29", "user": 789801, "id": 1169147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169148", "text": "_Imported from Lighthouse._\nComment by **seamusabshere** - 2009-06-16 21:57:39 UTC\n\nThis may help:\n\n  module ActionController\n    class ParamsParser\n      private\n        def parse_formatted_parameters(env)\n          env['rack.input'].rewind             # <-- add this\n          request = Request.new(env)\n", "created_at": "2011-05-16 03:21:29", "user": 789801, "id": 1169148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169149", "text": "_Imported from Lighthouse._\nComment by **lbayes (at patternpark)** - 2009-06-19 00:07:09 UTC\n\nWe are experiencing this issue also.\n", "created_at": "2011-05-16 03:21:30", "user": 789801, "id": 1169149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169150", "text": "_Imported from Lighthouse._\nComment by **Cameron Westland** - 2009-07-02 20:54:38 UTC\n\nIt seems like this could be because the ParamsParser rack middleware is converting application/json requests to a single json object‚Ä¶ I'm having the problem too.\n", "created_at": "2011-05-16 03:21:31", "user": 789801, "id": 1169150}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169151", "text": "_Imported from Lighthouse._\nComment by **Uwe Mesecke** - 2010-03-26 12:50:11 UTC\n\nThis issue is still present in rails 2.3.5. The fix by Joseph Chen (adding the file to config/initializers) fixed this bug for me. Is there any change that a fix for this problem can be added to the next release? The problem is easily reproducable, a fix is present and reported to be working by several people. Are there any other obstacles I am missing?\n", "created_at": "2011-05-16 03:21:31", "user": 789801, "id": 1169151}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169152", "text": "_Imported from Lighthouse._\nComment by **eggie5** - 2010-03-30 08:48:50 UTC\n\ni'm seeing this bug too, Joseph Chen's fix works.\n", "created_at": "2011-05-16 03:21:31", "user": 789801, "id": 1169152}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169153", "text": "_Imported from Lighthouse._\nComment by **edraut** - 2010-04-06 17:36:26 UTC\n\nI see this in rails 2.3.5, and Joseph Chen's fix did not work, because the Rack::Request object does not have #action_controller. However, this _is_ available:\n\nRack::Request#params\n\nSo I modified Joseph Chen's fix thusly:\n\n<pre><code>\nmodule ActionController\n  module Routing\n    class RouteSet\n      def extract_request_environment(request)\n        method = request.method\n        if method == :post\n          params_key = 'action_controller.request.request_parameters'\n          Rails.logger.info(\"REQUEST::::::::: #{request.env['QUERY_STRING']}\")\n\n          if request && request.params && request.params.include?('_method')\n            method = request.params['_method'].to_sym\n          end\n          if request && request.env && request.env.include?(params_key) && request.env[params_key].include?('_method')\n            method = request.env[params_key]['_method'].to_sym\n          end\n        end\n        Rails.logger.info(\"METHOD::::::::: #{method}\")\n        { :method => method }\n      end\n    end\n  end\nend\n</code></pre>\n\n\nI left the other bit in there in case there's some ambiguity I don't know about where #action_controller may be available in some other case. Can anyone confirm for me that this is necessary?\n\nIn any event this works for me now.\n", "created_at": "2011-05-16 03:21:32", "user": 789801, "id": 1169153}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169155", "text": "_Imported from Lighthouse._\nComment by **Neeraj** - 2010-04-19 16:32:50 UTC\n\nGiven that rails3 is just around the corner how about using -H \"X-Http-Method-Override: put\" as an extra option to get around this issue.\n\n<code>\nthis works\ncurl -X POST -d \"user[name]=John\" -d \"_method=PUT\" http://localhost:3000/users/1\n</code>\n\n<code>\nthis does not work\ncurl   -H 'Accept: application/xml' -H 'Content-type: application/xml' http://localhost:3000/users/1.xml -d '<user><name>John</name></user>' -X POST\n</code>\n\n<code>\nthis works\ncurl  -H \"X-Http-Method-Override: put\" -H 'Accept: application/xml' -H 'Content-type: application/xml' http://localhost:3000/users/1.xml -d '<user><name>John</name></user>' -X POST\n</code>\n", "created_at": "2011-05-16 03:21:32", "user": 789801, "id": 1169155}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169156", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-05-16 01:41:09 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20088)]\n", "created_at": "2011-05-16 03:21:32", "user": 789801, "id": 1169156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169157", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-23 16:54:43 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20606)]\n", "created_at": "2011-05-16 03:21:32", "user": 789801, "id": 1169157}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169158", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-24 08:40:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20631)]\n", "created_at": "2011-05-16 03:21:33", "user": 789801, "id": 1169158}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169159", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-25 22:45:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20816)]\n", "created_at": "2011-05-16 03:21:33", "user": 789801, "id": 1169159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169160", "text": "_Imported from Lighthouse._\nComment by **nicolas_o** - 2010-07-07 10:53:08 UTC\n\nI have this problem too, using rails 2.3.8. The fix works. Any better solution in sight ?\n", "created_at": "2011-05-16 03:21:33", "user": 789801, "id": 1169160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169161", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 03:21:34", "user": 789801, "id": 1169161}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169162", "text": "_Imported from Lighthouse._\nComment by **Dru Jensen** - 2010-12-27 18:31:56 UTC\n\nWhat about setting the method to \"PUT\" instead of \"POST\"?\n\nExt.onReady(function() {\nExt.Ajax.request({\nurl: '/publications/index',\nmethod: 'PUT',\njsonData: {whatever: {hello: 'test'}}\n}); });\n", "created_at": "2011-05-16 03:21:34", "user": 789801, "id": 1169162}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169163", "text": "_Imported from Lighthouse._\nComment by **nicolas_o** - 2011-02-25 11:26:13 UTC\n\nThe issue is gone with rails 3. I don't need the monkey-patch anymore.\n", "created_at": "2011-05-16 03:21:34", "user": 789801, "id": 1169163}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169164", "text": "Attachments saved to Gist: http://gist.github.com/971625\n", "created_at": "2011-05-16 03:21:35", "user": 789801, "id": 1169164}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2503\nCreated by **Dave Grijalva** - 2010-11-08 23:12:04 UTC\n\nmysql is case insensitive by default.  for case insensitive comparisions, the following is efficient.\n\nWHERE users.username = 'myUsername'\n\nvalidates_uniqueness_of currently generates\n\nWHERE LOWER(users.username) = BINARY 'myusername'\n\nthis is redundant and completely clobbers performance.  If you have a unique index on the column (and you should, because validates_uniqueness_of cannot be trusted), you don't get any of the benefit of the index because the system has to transform the column.\n", "labels": [], "number": 613, "updated_at": "2011-05-21 15:11:50", "user": 789801, "closed_at": "2011-05-21 15:11:50", "id": 904223, "title": "validates_uniqueness_of is horribly inefficient in mysql", "url": "https://api.github.com/repos/rails/rails/issues/613", "created_at": "2011-05-16 03:21:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169166", "text": "_Imported from Lighthouse._\nComment by **CancelProfileIsBroken** - 2009-05-17 12:54:15 UTC\n\nPlease submit a patch if you want to propose a change here. You'd want to look in activerecord/lib/active_record/validations.rb. What's happening is that the code first requests a case-sensitive equality operator, then later notices that the database is case-insensitive but doesn't change equality operators. So you'd need to fix the logic and add a method to the adapter to return a case-insensitive equality operator as well.\n", "created_at": "2011-05-16 03:21:40", "user": 789801, "id": 1169166}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169167", "text": "_Imported from Lighthouse._\nComment by **Phil Ross** - 2009-05-31 14:55:45 UTC\n\nI'm using the attached patch to avoid the full table scan. This adds a :case_sensitive => :db option to validates_uniqueness_of, which causes the normal equality operator to be used. The validation will therefore use the database's case-sensitivity mode.\n", "created_at": "2011-05-16 03:21:41", "user": 789801, "id": 1169167}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169168", "text": "_Imported from Lighthouse._\nComment by **Scott Storck** - 2009-06-15 23:45:37 UTC\n\nI am using this patch because I had a lot of problems with the SQL generated by validate_uniqueness_of not matching an existing row which would cause a duplicate row error.\n\nRemoving the BINARY keyword from the sql results in the match working correctly.\nThe data being tested for uniqueness which fails to match has trailing spaces.\nMysql doesn't seem to interested in the trailing space when checking for uniqueness.\nThe BINARY keyword however causes mysql to do a byte for byte check.\n\nI would think it usually would make sense to keep the uniqueness test as close to the test from the underlying database that is used as possible.\n\nI also have never used a database that doesn't use an index to enforce a unique field.\nI suspect that other databases might not be able to use the index if a modifying clause like BINARY is used.\nIt would be interesting to hear from users of the other databases about this.\n\nI have applied the patch manually as it doesn't apply to my ActiveRecord version (2.3.2).\n", "created_at": "2011-05-16 03:21:41", "user": 789801, "id": 1169168}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169169", "text": "_Imported from Lighthouse._\nComment by **David Stevenson** - 2009-06-20 17:49:33 UTC\n\nI've had this problem before too.  It's a tricky situation because it depends on the setup of MySQL (and its case sensitivity, which is different by default depending on your platform).  I'm completely in favor of a :db option that puts that responsibility on the person who sets up the DB, rather than on rails itself.\n", "created_at": "2011-05-16 03:21:41", "user": 789801, "id": 1169169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169170", "text": "_Imported from Lighthouse._\nComment by **chad.ingram (at me)** - 2009-06-29 22:05:57 UTC\n\nThis now has a patch. Assigning so maybe it can move forward since it's no longer 'incomplete' but I can't change that...\n", "created_at": "2011-05-16 03:21:42", "user": 789801, "id": 1169170}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169171", "text": "_Imported from Lighthouse._\nComment by **Renaud Kern** - 2009-08-08 21:07:52 UTC\n\nThe patch doesn't pass. The file activerecord/test/cases/validations/uniqueness_validation_test.rb doesn't exit anymore. Test are now in activerecord/test/cases/validations_test.rb\n", "created_at": "2011-05-16 03:21:42", "user": 789801, "id": 1169171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169172", "text": "_Imported from Lighthouse._\nComment by **Phil Ross** - 2009-08-08 21:47:01 UTC\n\n@Renaud Kern I still see activerecord/test/cases/validations/uniqueness_validation_test.rb in the master branch and my patch still applies cleanly.\n\nThere is an activerecord/test/cases/validations_test.rb file, but this doesn't contain any tests for validates_uniqueness_of.\n", "created_at": "2011-05-16 03:21:42", "user": 789801, "id": 1169172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169173", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-08-08 22:06:29 UTC\n\n+1 on idea, -1 on patch.\nPatch does not apply on 2-3-stable.\n", "created_at": "2011-05-16 03:21:43", "user": 789801, "id": 1169173}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169174", "text": "_Imported from Lighthouse._\nComment by **Hugo Peixoto** - 2009-08-08 22:34:28 UTC\n\n+1 on the idea. But the patch does not apply to 2-3-stable.\nI've attached a patch that ports Phil's code to this branch.\n", "created_at": "2011-05-16 03:22:08", "user": 789801, "id": 1169174}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169175", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-08-09 08:16:09 UTC\n\n:case_sensitive => :db is a strange option to add to the public API.\n\nIdeas for clarifying, or perhaps sidestepping, this issue?\n", "created_at": "2011-05-16 03:22:08", "user": 789801, "id": 1169175}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169176", "text": "_Imported from Lighthouse._\nComment by **Hugo Peixoto** - 2009-08-09 13:16:03 UTC\n\nI agree, Jeremy. But sidestepping doesn't seem like the right thing to do.\n\nHow about \":case_sensitive => :use_database_default\" ?\n", "created_at": "2011-05-16 03:22:09", "user": 789801, "id": 1169176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169177", "text": "_Imported from Lighthouse._\nComment by **Dan Croak** - 2009-08-10 02:01:47 UTC\n\n-1 on changing case_insensitive to non-boolean.\n\nMy understanding is that the problem here is the BINARY conversion for MySQL, correct? When running a 2.3.3 app, I do not see the reported LOWER().\n\nSo, the fix needs to simply be:\n\nmake MySQL act like SQLite3, for instance, and simply not add the BINARY conversion?\n", "created_at": "2011-05-16 03:22:09", "user": 789801, "id": 1169177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169178", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2009-08-10 02:10:55 UTC\n\n-1 on changing case_sensitive. Agreed with Dan.\n\nHugo: The patch doesn't work anymore.\n", "created_at": "2011-05-16 03:22:09", "user": 789801, "id": 1169178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169179", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-08-13 21:13:36 UTC\n\n+1 on feature, although not exactly fits into the current boolean convention, it's a well required addition, i would not scope it only for mysql, since FTS are a cross RDBMS issue and there is a need to help developers deal with them before it getting to be a problem.\n\nsince the patch for 2-3-stable did work as Rizwan said, i took the liberty to fix it.\n", "created_at": "2011-05-16 03:22:10", "user": 789801, "id": 1169179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169180", "text": "_Imported from Lighthouse._\nComment by **Blue Box Jesse** - 2009-09-27 00:38:39 UTC\n\nWe've seen this issue bite a number of customers, so this is a very valuable commit.\n\nBugMash: +1\n\nI agree that the best naming convention would be :non-boolean but using the same description field.\n\nI've confirmed the patch applies on 2-3-stable.\n", "created_at": "2011-05-16 03:22:10", "user": 789801, "id": 1169180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169181", "text": "_Imported from Lighthouse._\nComment by **Jordan Brough** - 2009-11-12 22:33:11 UTC\n\nI think this is worth fixing either way, but for anyone interested here's a ticket I've added for a way to sidestep the issue -- #3486 (update rails to handle db unique-constraints and omit the validates_uniqueness_of)\n", "created_at": "2011-05-16 03:22:10", "user": 789801, "id": 1169181}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169182", "text": "_Imported from Lighthouse._\nComment by **Ryan Angilly** - 2009-11-17 14:52:46 UTC\n\nJust wanted to throw my $0.02 to keep the discussion going.  I do think it's a necessary fix, although I'm not crazy about the :case_sensitive => :db option.  I feel like the model should reflect whether or not the intent is for case sensitivity or not.  Using :case_sensitive => :db leaves it ambiguous, and would force someone to go check the database engine to find out if case sensitivity was actually enabled.  I'm thinking maybe an api like:\n\nvalidates_uniqueness_of :email, :db_case_sensitive => :false\n\nAnd that option would turn off the LOWER and the BINARY, and let the db do its magic.\n", "created_at": "2011-05-16 03:22:11", "user": 789801, "id": 1169182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169183", "text": "_Imported from Lighthouse._\nComment by **Ken Miller** - 2009-12-30 22:14:55 UTC\n\nI don't at present have a patch, but doesn't this seem like the sort of thing the connection adapter should be able to report on?  Either by introspecting the database, or explicitly declared in the connection spec.  That would require editing all the connection adapters, but that seems preferable to having to declare it in each model.\n", "created_at": "2011-05-16 03:22:11", "user": 789801, "id": 1169183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169184", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-02-12 12:46:14 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/13645)]\n", "created_at": "2011-05-16 03:22:11", "user": 789801, "id": 1169184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169185", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-04-20 16:04:01 UTC\n\nIn my test index is not used when I use Lower(user.email). Otherwise index is being used. That means BINARY is not the issue as Dan Croak suggested. Please correct me if I am wrong.\n\nI will say that current code is okay. However it should be documented that if users want better performance then they need to do two things.\n- set case_sensitive to true\n- add before_validation callback to lowercase the model attribute\n", "created_at": "2011-05-16 03:22:12", "user": 789801, "id": 1169185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169186", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:47 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:22:12", "user": 789801, "id": 1169186}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169187", "text": "_Imported from Lighthouse._\nComment by **metavida** - 2010-08-12 20:19:30 UTC\n\nI wanted to agree with Neeraj that BINARY isn't the problem. On my MySQL 5.0.89 install I get the following results.\n\n```\n# Using the SQL generated by Rails the index is NOT used.\nEXPLAIN SELECT * FROM `users` WHERE LOWER(login) = BINARY 'test';\n+-------------+------+------+------+------+-------------+\n| select_type | type | key  | ref  | rows | Extra       |\n+-------------+------+------+------+------+-------------+\n| SIMPLE      | ALL  | NULL | NULL |   94 | Using where | \n+-------------+------+------+------+------+-------------+\n\n# Using neither LOWER nor BINARY the index IS used.\nEXPLAIN SELECT * FROM `users` WHERE login = 'test';\n+-------------+------+-------------------+-------+------+-------------+\n| select_type | type | key               | ref   | rows | Extra       |\n+-------------+------+-------------------+-------+------+-------------+\n| SIMPLE      | ref  | users_login_index | const |    2 | Using where | \n+-------------+------+-------------------+-------+------+-------------+\n\n# Using only BINARY the index IS used, and the comparison IS case sensitive.\nEXPLAIN SELECT * FROM `users` WHERE login = BINARY 'test';\n+-------------+-------+-------------------+------+------+-------------+\n| select_type | type  | key               | ref  | rows | Extra       |\n+-------------+-------+-------------------+------+------+-------------+\n| SIMPLE      | range | users_login_index | NULL |    2 | Using where | \n+-------------+-------+-------------------+------+------+-------------+\n```\n\nSeems like a bug in the default behavior to me. With :case_sensitive=>true we should be adding BINARY to the conditions to make the assertion work as it claims it does.\n", "created_at": "2011-05-16 03:22:12", "user": 789801, "id": 1169187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169188", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-15 09:58:51 UTC\n\nAny updates here?\n", "created_at": "2011-05-16 03:22:13", "user": 789801, "id": 1169188}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169189", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:07:07 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:22:13", "user": 789801, "id": 1169189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169190", "text": "_Imported from Lighthouse._\nComment by **viktor tron (strawberry)** - 2011-01-12 13:10:16 UTC\n\nAny updates on this issue?\n", "created_at": "2011-05-16 03:22:13", "user": 789801, "id": 1169190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169191", "text": "_Imported from Lighthouse._\nComment by **Grant Hollingworth** - 2011-01-19 16:36:08 UTC\n\nHere's a patch I've been using, rebased against the current HEAD. It adds a `case_insensitive_equality_operator` method to `ActiveRecord::ConnectionAdapters::DatabaseStatements`, following the existing `case_sensitive_equality_operator`. `MysqlAdapter` overrides it.\n\nThere are no tests because it changes performance but not behaviour.\n", "created_at": "2011-05-16 03:22:14", "user": 789801, "id": 1169191}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169192", "text": "_Imported from Lighthouse._\nComment by **Raphael Sofaer** - 2011-02-17 05:11:27 UTC\n\nThat patch (Grant's patch) looks like it will break case-insensitive comparison in databases with a collation like utf8_bin.  I'm definitely having this problem too, though.  We spend a huge amount of time in those queries.\n", "created_at": "2011-05-16 03:22:14", "user": 789801, "id": 1169192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169193", "text": "Attachments saved to Gist: http://gist.github.com/971627\n", "created_at": "2011-05-16 03:22:14", "user": 789801, "id": 1169193}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2519\nCreated by **Christos Zisopoulos** - 2011-02-22 08:32:35 UTC\n\nIt seems that because `ActiveSupport::TestCase` fails to require `test/unit` before requiring `test/unit/testcase` none of the test cases that inherit from `ActiveSupport::TestCase` are being run.\n\nNormal Rails application tests that require `test_helper`, which in turn requires `environment`, don't exhibit this problem. This is possibly due to the fact that `test/unit` is required somewhere during Rails initialization.\n\nI came across the issue when trying to run tests for a plugin created by Rails' own plugin generator which creates a `test_helper` which requires `ActiveSupport::TestCase`\n\nThe following won't execute any tests:\n\n``` ruby\n  #\n  # test_helper.rb\n  #\n  require 'rubygems'\n  require 'active_support'\n  require 'active_support/test_case'\n```\n\n``` ruby\n  #\n  # my_plugin_test.rb\n  #\n  require 'test_helper'\n\n  class MyPluginTest < ActiveSupport::TestCase\n    test \"the truth\" do\n      assert true\n    end\n  end\n```\n\nI am attaching the one-line patch which fixes it for me. I tried to figure a way to test that the test cases are run, but to be honest, I am lost. If anyone wants to point me to the right direction, I'll give it another try.\n", "labels": [], "number": 614, "updated_at": "2011-05-21 15:11:50", "user": 789801, "closed_at": "2011-05-21 15:11:50", "id": 904224, "title": "[PATCH] Requiring ActiveSupport::TestCase in a vanilla test fails to run the test case ", "url": "https://api.github.com/repos/rails/rails/issues/614", "created_at": "2011-05-16 03:22:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169194", "text": "_Imported from Lighthouse._\nComment by **giles bowkett** - 2009-08-04 23:30:25 UTC\n\nFor what it's worth, you don't need to patch ActiveSupport, you can just require 'test/unit' in your plugin tests.\n\nAlso, I think the best place to patch this is not in ActiveSupport, but the plugin generator.\n", "created_at": "2011-05-16 03:22:20", "user": 789801, "id": 1169194}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169195", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:47 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:22:21", "user": 789801, "id": 1169195}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169196", "text": "Attachments saved to Gist: http://gist.github.com/971628\n", "created_at": "2011-05-16 03:22:21", "user": 789801, "id": 1169196}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2521\nCreated by **John Small** - 2010-11-25 12:13:39 UTC\n\nThis is Rails 2.3.2 and going back to 2.2.2\nThe documentation in ActiveResource describes to_xml having the option :dasherize, which defaults to false. But in active_support/core_ext/hash/conversions.rb we have\n\ndef rename_key(key, options = {})\n          camelize = options.has_key?(:camelize) && options[:camelize]\n          dasherize = !options.has_key?(:dasherize) || options[:dasherize]\n          key = key.camelize if camelize\n          dasherize ? key.dasherize : key\n        end\nWhere dasherize is defaulting to true on line  147\n\nThe consequence of this is that ActiveResource#to_xml and #encode both assume it's defaulting to false, when it isn't and so they will replace underscores with hyphens. It's not picked up  in any tests on ActiveResource because the test cases don't use attributes with underscores and don't test to see that the field names aren't changed when you save the record. Hence if you read in an ActiveResource record from an external server not running Rails and the field names have underscores, you can't save it because the field names get changed to have hyphens in the POST data.\n\nProbably the default should leave keys as they are and you have to add the option :dasherize=>true if you want it different. \n\nSolution : remove the ! from !options.has_key?(:dasherize) and do things the same way camelize is done to be consistent. \n\nI couldn't find the test suite for ActiveSupport where is it?\n\nJohn Small\n", "labels": [], "number": 615, "updated_at": "2011-05-21 15:11:52", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904226, "title": "hash#to_xml :dasherize defaults to true", "url": "https://api.github.com/repos/rails/rails/issues/615", "created_at": "2011-05-16 03:22:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169197", "text": "_Imported from Lighthouse._\nComment by **John Small** - 2009-04-19 16:15:42 UTC\n\nOk, I've found the tests for hash#to_xml added a test to check the default for :dasherize is false, fixed the code and now lots of things all over the place are broken.\n\nIt seems that a lot of code has been written with the expectation that hash#to_xml defaults to :dasherize=>true, even though that's obviously daft, you don't let the default change something unexpectedly, you should let the default leave things as they are. It violates the rule of \"least surprise\". The result is that \n{ :name => \"David\", :street_name => \"Paulina\" }.to_xml contains\n<street-name> and not <street_name>.\n\nAlso the test for dasherize assumes the default for camelize is false (as it should be) but it shouldn't be implied in the test for dasherize. There's no test for camelize == false and no test for a default value for camelize and no test for what should happen if  both camelize and dasherize are set to true.\n\nI can see that hash#to_xml is setup to behave the same way that array#to_xml behaves, that is by default :dasherize=>true, so that when serializing an active record to XML underscores are changed to dashes. Is that a policy decision? That seems odd to me.\n\nActing on the premise of \"least surprise\" sending a record with underscores in the field names to xml and getting <created-at> in the xml when you expect <created_at> would certainly surprise me.\n\nIf it is a policy decision to change field names by default then it needs to be made clear in the documentation and we need to have a way to override the default behavior. \n\nI'll argue with that choice but there's so much code written on the assumption that \"created_at\" becomes <created-at> when XMLized that it will have to be lived with unless there's a way to set it as a class default in RAILS initialization so that by default :dasherize=>false unless you set it to true on in Rails initialization. \n\nCurrently I've got no way to override the default behavior when I save an ActiveResource. This will cause problems in future when Rails starts to be used more for integration with non-Rails systems. At the moment Rails is an island so it doesn't matter much. But this will become known as an annoying \"Rails quirk\" when more people start doing system integration using ActiveResource.\n\nComments please\n", "created_at": "2011-05-16 03:22:27", "user": 789801, "id": 1169197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169198", "text": "_Imported from Lighthouse._\nComment by **Taryn East** - 2009-04-20 10:51:13 UTC\n\n...no Rails is an island\n\nWe're currently running into this problem right now trying to integrate with another API and it's a right pain to force it to use dashes instead of underscores.\nI'd be happy with just some config option where I can tell ActiveResource to always use underscores, but right now there seems to be no way to do this.\n", "created_at": "2011-05-16 03:22:28", "user": 789801, "id": 1169198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169199", "text": "_Imported from Lighthouse._\nComment by **John Small** - 2009-04-20 12:04:39 UTC\n\nMmm, well at least I know that it's not just me begin ignorant about some undocumented feature that everyone else knows about.\n\nI've raised this issue in the Rails-Core google group. I've worked out what the fixes are and am ready to push my changes, but there's an awful lot of code out there, and in the Rails test suite that assumes \"created_at\" will become \"created-at\" when converted to XML. It seems daft to me, but it's been in the code for a long time so there might even be a rationale behind it.\n\nI suspect that this is something that's slipped through because there aren't thousands of people using ActiveResource & REST for systems integration. Though I need to find out if it's a policy choice of some sort, the absence of a test for default values makes me think that it's just something no one has thought about.\n\nYou might get a fix in the next few days. If you need the fix right now and don't mind lots of tests in the Rails test suite breaking then go to active_support/core_ext/hash/conversions.rb find def rename_key(key, options = {}) go to line 147 (as it was last night when I cloned the source) then change\n\ndasherize = !options.has_key?(:dasherize) || options[:dasherize]\n\nto\n\ndasherize = options.has_key?(:dasherize) && options[:dasherize]\n\nThat will do the magic required to get your XML api working. The rest of my patch just adds the missing tests, and alters the tests for the things that break. I also need to add a way to set the default behaviour for those that prefer the existing default.\n", "created_at": "2011-05-16 03:22:28", "user": 789801, "id": 1169199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169200", "text": "_Imported from Lighthouse._\nComment by **John Small** - 2009-04-24 17:00:55 UTC\n\nI've attached a patch which allows you to set the default behaviour for :dasherize in Hash#to_xml. This patch covers\n\n1) Extra tests for the default values of :dasherize and :camelize\n2) Make sure that the tests for each values of :dasherize and :camelize make no assumptions about the default value of the other one. E.g. the tests for :dasherize true and false, set :camelize=>false in the option, and the tests for :camelize true and false set :dasherize=>false in the options.\n\n3) added cattr_accessor for :dasherize_xml and :camelize_xml. In this patch Hash.dasherize_xml = true and Hash.camelize_xml = false to work with existing code. But this allows people to set Hash.dasherize_xml = false so ActiveResource doesn't dasherize underscores when sending XML back to non-Rails services. \n\nFor existing users who expect underscores to be converted to dashes in Hash#.to_xml they don't have to do anything. For users that need the default to be correct, they can set Hash.dasherize_xml = false in an initializer. \n\nBecause the default should be to leave things alone I recommend that in future the default should be changed to Hash.dasherize_xml = false.\n\nBecause Ruby cannot use dashes in attribute names incoming XML with dashes in the tag names must be converted to underscores. But the converse is not true, outbound XML from attributes with underscores in the names does not need to have the underscores converted into dashes. If XML comes in with underscores it should go back out with underscores.\n\nIf you have both dashes and underscores in your XML tags then you're in trouble and this patch won't help. Try XSLT.\n", "created_at": "2011-05-16 03:22:28", "user": 789801, "id": 1169200}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169201", "text": "_Imported from Lighthouse._\nComment by **John Small** - 2009-04-25 06:21:24 UTC\n\nWhoops I missed off the changed documentation to ActiveResource#to_xml. Here's the updated patch with the changed documentation.\n\nThe old documentation incorrectly said that the default value of :dasherize was false, in fact it was and still is true. Which is the source of our problems when integrating ActiveResource with non-Rails applications. The new documentation says that the default is true, and tells people how to change the default if they need to so they can integrate with non-Rails apps. I've also added documentation for the :camelize option, which was missing.\n", "created_at": "2011-05-16 03:22:29", "user": 789801, "id": 1169201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169202", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-05-07 01:07:16 UTC\n\nAwesome stuff, looks good apart from a few minor things.\n\nI don't know that I'm sold on using the class vars on Hash,  perhaps instead something like we do with JSON.\n\n```\nActiveSupport.use_standard_json_time_format = true\n```\n\nAlso you don't need the begins in your test methods\n\n```\n  def test_something \n    #...\n  ensure\n    # ...\n  end\n```\n\nFinally can you rebase it down to a single patch, and provide it for 2.3?\n", "created_at": "2011-05-16 03:22:29", "user": 789801, "id": 1169202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169203", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-05-07 01:07:46 UTC\n\nSorry if it wasn't clear but I meant 2.3 as well as master, not instead of it :)\n", "created_at": "2011-05-16 03:22:29", "user": 789801, "id": 1169203}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169204", "text": "_Imported from Lighthouse._\nComment by **John Small** - 2009-05-07 12:16:04 UTC\n\nOk do you want it based of off 2.3.0 or 2.3.2, the latest stable release?\n\nThe layout of module and class containers has changed a lot from 2.3.3 to current edge hasn't it.\n\nLet me know which basis you want and I'll do it asap.\n", "created_at": "2011-05-16 03:22:30", "user": 789801, "id": 1169204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169205", "text": "_Imported from Lighthouse._\nComment by **CancelProfileIsBroken** - 2009-05-07 12:45:04 UTC\n\nYou should pull the 2-3-stable branch from github, and base 2.3 patches on the edge of that branch.\n", "created_at": "2011-05-16 03:22:30", "user": 789801, "id": 1169205}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169206", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-05-07 16:46:52 UTC\n\nLike mike said, base the 2.3 patches off 2-3-stable and the master\npatches off master.  You'll probably have to upload two patches but\nhopefully git-cherry-pick will help you.\n", "created_at": "2011-05-16 03:22:30", "user": 789801, "id": 1169206}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169207", "text": "_Imported from Lighthouse._\nComment by **John Small** - 2009-05-08 08:45:22 UTC\n\nOk, here are the patches, three in one file. I've done two with the attributes dasherize_xml and camelize_xml added to ActiveSupport as requested. Then I've done one for edge only with dasherize_xml and camelize_xml on the Hash class. Putting attributes on ActiveSupport, when the attributes are only required for the Hash class doesn't look right to me. \n\nIn 2-3-stable it kind of makes sense because of the way the modules are arranged and the fact that the code in 2-3-stable has Hash as a module contained in the ActiveSupport module.\n\nIn the development since 2-3-stable the modules have been re-arranged and the conversion code for Hash is now attached to the class and as far as I can see the Hash class doesn't live inside the ActiveSupport module. In the code I've had to introduce the ActiveSupport module into conversions.rb, but it sits outside the Hash class. It looks very wrong to me, but maybe it's a Rails convention to do things like that. If so I'd question the convention. \n\nThe patch 2-3-stable_hash_to_xml_patch.diff  is the patch for 2-3-stable (obviously) with mattr_accessors on ActiveSupport\n\nThe patch edge_AS_hash_to_xml_patch.diff is the version for edge with mattr_accessors on ActiveSupport\n\nThe patch edge_hash_to_xml_path.diff is the version for edge with cattr_accessors on Hash\n\nI've removed the extraneous 'begin' from the tests for default values in all variants of the patches.\n\nI'll also start looking at what needs to be done to bring ActiveRecord into line with ActiveResource in .to_xml. It seems the code base between the two has diverged.\n\nThanks for adding this patch. We'll now be able to read-write via REST to non-Rails apps without having to go through XSLT. \n\nCheers\n\nJohn Small\n", "created_at": "2011-05-16 03:22:31", "user": 789801, "id": 1169207}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169208", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-05-10 01:14:10 UTC\n\nThis went into 2.3 as of 7bf9bf3\n\nMoving the milestone to 3.0.\n\nDo other contributors have any thoughts on the two options here for configuration options for core_ext stuff?\n\n```\n  Hash.dasherize_xml\n```\n\nOR\n\n```\n  ActiveSupport.dasherize_xml\n```\n\nThe second is consistent with other 2-3isms, but for 3.0 and forward do we want to move it?\n", "created_at": "2011-05-16 03:22:31", "user": 789801, "id": 1169208}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169209", "text": "_Imported from Lighthouse._\nComment by **John Small** - 2009-05-10 19:10:01 UTC\n\nI can see the benefit of keeping all the options/attributes for mixins to Ruby core modules that are introduced by ActiveSupport attached to the ActiveSupport module. It makes it very clear that you're altering the behaviour of something that's not part of standard Ruby, but part of something added by ActiveSupport. But I still feel ill about adding an attribute that's intended solely for an extension to Hash to something outside of Hash and which isn't up the inheritance chain. It breaks the idea of encapsulation of object behaviour. As you can see from the code, it looks really weird having to open ActiveSupport inside conversions.rb just to attach some new attributes to the module, and it looks just as weird having to refer to an outside attribute while inside Hash#rename_keys to determine the output. \n\nThere must be other instances like this dotted about in the code and as you mentioned in your post, it's the way things have been done in the past, but it might not be a bright idea for the future. \n\nMaybe something like;-\n\n```\nActiveSupport::CoreExt::HashMixins.dasherize_xml\n```\n\nThat keeps the attribute localised to the mixins added to Hash, and at the same time makes sure that if you set the thing you know you're setting an attribute introduced as part of the ActiveSupport extensions to Ruby core. It would require re-adjusting the modules though, and they've just been through an extensive house cleaning exercise.\n\nI'm all in favour of extremely descriptive variable names even if it requires more typing. I can well see that a few months or years hence someone who hasn't read this conversation will be looking at  \n    Hash.dasherize_xml = false \n\nin someone's code and thinking \"dasherize_xml!? wtf is that? That's nowhere to be found in the Ruby documentation for Hash!\" and they'd then have to spend ages googling about to work out what it is and why it's there.\n", "created_at": "2011-05-16 03:22:31", "user": 789801, "id": 1169209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169210", "text": "_Imported from Lighthouse._\nComment by **John Small** - 2009-05-11 06:59:23 UTC\n\nHo hum. I've just downloaded the new 2-3-stable and found that someone has changed something in XmlMini so that parsing XML preserves case in element names, which it should, but loading ActiveResource hasn't been changed to compensate and now I'm getting attributes starting with upper case which isn't the Ruby convention. \n\nI feel a new ticket coming on but for now I'm going to bodge things via XSLT on my server.\n", "created_at": "2011-05-16 03:22:32", "user": 789801, "id": 1169210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169211", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-05-14 06:09:25 UTC\n\nAssigning to jeremy who has been active in the 3.0 core_ext rejigging.\n", "created_at": "2011-05-16 03:22:32", "user": 789801, "id": 1169211}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169212", "text": "_Imported from Lighthouse._\nComment by **Chris Hapgood** - 2009-11-02 18:11:34 UTC\n\nAm I missing something, or is the \"symmetricity\" of Hash.to_xml and Hash.from_xml still broken even with the latest patch on this ticket?\n\nWe've introduced the configuration options \"dasherize_xml\" and \"camelize_xml\" but we don't apply them in the #unrename_keys method, only in #rename_keys.  Consequently, when reading from an ARes service that has an \"itemId\" attribute, there is no way to have that attribute converted to a Rails-conventional #item_id accessor.  It _used_ to be converted automatically and unconditionally before changeset ebe8dd61.  Now I'm stuck with method_missing to approximate the same behavior.\n", "created_at": "2011-05-16 03:22:32", "user": 789801, "id": 1169212}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169213", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:30 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:22:33", "user": 789801, "id": 1169213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169214", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:31 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:22:33", "user": 789801, "id": 1169214}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169215", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:22:33", "user": 789801, "id": 1169215}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169216", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:22:33", "user": 789801, "id": 1169216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169217", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:22:34", "user": 789801, "id": 1169217}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169218", "text": "Attachments saved to Gist: http://gist.github.com/971629\n", "created_at": "2011-05-16 03:22:34", "user": 789801, "id": 1169218}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2577\nCreated by **danielh** - 2011-02-19 09:28:20 UTC\n\nHere's an example irb session:\n\nirb(main):002:0> require 'rubygems'\n=> true\nirb(main):003:0> require 'active_record'\n=> true\nirb(main):004:0> ActiveRecord\n=> ActiveRecord\nirb(main):005:0> ActiveRecord::Associations\nNameError: uninitialized constant ActiveRecord::Associations\n    from /usr/local/lib/ruby/gems/1.8/gems/activesupport-2.3.2/lib/active_support/dependencies.rb:440:in `load_missing_constant'\n    from /usr/local/lib/ruby/gems/1.8/gems/activesupport-2.3.2/lib/active_support/dependencies.rb:80:in`const_missing'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/base.rb:3144\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/base.rb:3137:in `class_eval'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/base.rb:3137\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations.rb:2\n    from (irb):6\n    from :0\n\nThis happens because ruby loads the associations.rb file, which references ActiveRecordError before defining the Associations module. ActiveRecordError is defined in base.rb, which tries to include the Association module before it's been defined.\n\nPatch attached.\n", "labels": [], "number": 616, "updated_at": "2011-05-21 15:11:52", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904227, "title": "When using ActiveRecord::Associations outside of Rails, a NameError is thrown", "url": "https://api.github.com/repos/rails/rails/issues/616", "created_at": "2011-05-16 03:22:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169219", "text": "_Imported from Lighthouse._\nComment by **Elijah Miller** - 2009-06-06 15:43:28 UTC\n\n+1 Applies cleanly to 2-3-stable and works, all tests pass.\n\nNo test cases are provided for this issue but here is a command to test. Run within activerecord/lib.\n\nruby -e \"require 'activerecord'; ActiveRecord::Associations; puts 'pass'\"\n\nBefore patch:\n\n<pre>\n./../../activesupport/lib/active_support/dependencies.rb:440:in `load_missing_constant': uninitialized constant ActiveRecord::Associations (NameError)\n    from ./../../activesupport/lib/active_support/dependencies.rb:80:in `const_missing'\n    from ./active_record/base.rb:3139\n    from ./active_record/base.rb:3132:in `class_eval'\n    from ./active_record/base.rb:3132\n    from ./active_record/associations.rb:2\n    from -e:1\n</pre>\n\n\nAfter patch:\n\n<pre>\npass\n</pre>\n", "created_at": "2011-05-16 03:22:40", "user": 789801, "id": 1169219}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169220", "text": "_Imported from Lighthouse._\nComment by **Elijah Miller** - 2009-06-06 16:34:04 UTC\n\nFor now a simple work-around is to reference ActiveRecord::ActiveRecordError before ActiveRecord::Associations\n\n``` ruby\nrequire 'activerecord'\nActiveRecord::ActiveRecordError\n# now you can use ActiveRecord::Associations\n```\n", "created_at": "2011-05-16 03:22:40", "user": 789801, "id": 1169220}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169221", "text": "_Imported from Lighthouse._\nComment by **Murray Steele** - 2009-08-05 16:32:12 UTC\n\nThe same is true if you try to use ActiveRecord::Validations.  The similarities are that both active_record/validations.rb and active_record/associations.rb both define ActiveRecordError subclasses before they define their Validations and Associations modules.  \n\nNote really sure what the fix is.  It also affects 3.0.\n", "created_at": "2011-05-16 03:22:41", "user": 789801, "id": 1169221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169223", "text": "_Imported from Lighthouse._\nComment by **ggwang** - 2009-12-01 00:03:51 UTC\n\nIt seems to be same problem, the following is #3528 I added just now:\n\nI am  intending to have a try to use CMS ansuz(http://www.ansuzcms.com/). But Ijust can not make it get to work. When ever start up the webtick server, or try to migrate its database(yml setting finished), it shows: \n\n=> Booting WEBrick\n=> Rails 2.3.5 application starting on http://0.0.0.0:3000\n/home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:440:in `load_missing_constant': uninitialized constant ActiveRecord::Associations (NameError)\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:80:in`const_missing'\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:3154\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:3147:in `class_eval'\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:3147\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/associations.rb:2\n    from /home/ggwang/ansuz/lib/isotope11/active_record_extensions.rb:2\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in`gem_original_require'\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in `require'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:156:in`require'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:521:in `new_constants_in'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:156:in`require'\n    from /home/ggwang/ansuz/config/environments/development.rb:24:in `load_environment'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:386:in`load_environment'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/core_ext/kernel/reporting.rb:11:in `silence_warnings'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:379:in`load_environment'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:137:in `process'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:113:in`send'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:113:in `run'\n    from /home/ggwang/ansuz/config/environment.rb:39\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in`gem_original_require'\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in `require'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:156:in`require'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:521:in `new_constants_in'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:156:in`require'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/commands/server.rb:84\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in `gem_original_require'\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in`require'\n    from script/server:3\nggwang@ggwang-laptop:~/ansuz$ ruby script/server\n=> Booting WEBrick\n=> Rails 2.3.5 application starting on http://0.0.0.0:3000\n/home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:440:in `load_missing_constant': uninitialized constant ActiveRecord::Associations (NameError)\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:80:in`const_missing'\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:3154\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:3147:in `class_eval'\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:3147\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/associations.rb:2\n    from /home/ggwang/ansuz/lib/isotope11/active_record_extensions.rb:2\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in`gem_original_require'\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in `require'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:156:in`require'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:521:in `new_constants_in'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:156:in`require'\n    from /home/ggwang/ansuz/config/environments/development.rb:24:in `load_environment'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:386:in`load_environment'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/core_ext/kernel/reporting.rb:11:in `silence_warnings'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:379:in`load_environment'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:137:in `process'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:113:in`send'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/initializer.rb:113:in `run'\n    from /home/ggwang/ansuz/config/environment.rb:39\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in`gem_original_require'\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in `require'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:156:in`require'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:521:in `new_constants_in'\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:156:in`require'\n    from /home/ggwang/.gem/ruby/1.8/gems/rails-2.3.5/lib/commands/server.rb:84\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in `gem_original_require'\n    from /usr/local/lib/site_ruby/1.8/rubygems/custom_require.rb:31:in`require'\n    from script/server:3\n\nI took referenced to the ticket #2577 and thought maybe that was the problem. I tried to use the patch file attached but could not make it work. The following is my gem list:\n\n```\n    *** LOCAL GEMS ***\n```\n\nactionmailer (2.3.5, 2.2.2)\nactionpack (2.3.5, 2.3.2, 2.2.2)\nactiverecord (2.3.5, 2.3.2, 2.2.2)\nactiveresource (2.3.5, 2.2.2)\nactivesupport (2.3.5, 2.3.4, 2.3.2, 2.2.2)\nBlueCloth (1.0.1)\ncalendar_date_select (1.15)\ncmdparse (2.0.2)\ndatanoise-actionwebservice (2.3.2)\nfacets (2.4.5)\nmaruku (0.5.9)\nmislav-will_paginate (2.2.3)\nmocha (0.9.8)\nmysql (2.8.1)\nrack (1.0.1)\nrails (2.3.5, 2.2.2)\nrake (0.8.7)\nrdoc (2.4.3)\nRedCloth (4.2.2)\nrubygems-update (1.3.5)\nrubyist-aasm (2.0.7)\nsqlite3-ruby (1.2.5)\nsyntax (1.0.0)\nwebgen (0.5.10)\nwill_paginate (2.3.11, 2.2.2)\n\nAnd, I followed the ticket to test in irb and it shows:\n\n:~/ansuz$ ruby -e \"require 'rubygems';require 'active_record'; ActiveRecord::Associations; puts 'pass'\"\n/home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:440:in `load_missing_constant': uninitialized constant ActiveRecord::Associations (NameError)\n    from /home/ggwang/.gem/ruby/1.8/gems/activesupport-2.3.5/lib/active_support/dependencies.rb:80:in`const_missing'\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:3154\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:3147:in `class_eval'\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:3147\n    from /home/ggwang/.gem/ruby/1.8/gems/activerecord-2.3.5/lib/active_record/associations.rb:2\n    from -e:1\n\nIs it really a bug of rails? Can anyone help me?\n", "created_at": "2011-05-16 03:22:41", "user": 789801, "id": 1169223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169224", "text": "_Imported from Lighthouse._\nComment by **seraphim** - 2009-12-22 06:31:00 UTC\n\nI ran into the same problem... anyone solved the issue?\n", "created_at": "2011-05-16 03:22:42", "user": 789801, "id": 1169224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169225", "text": "_Imported from Lighthouse._\nComment by **PeppyHeppy** - 2009-12-30 10:31:10 UTC\n\nditto\n", "created_at": "2011-05-16 03:22:42", "user": 789801, "id": 1169225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169226", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-01-18 13:13:28 UTC\n\nI can reproduce this in Rails 3 pre.\n", "created_at": "2011-05-16 03:22:42", "user": 789801, "id": 1169226}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169227", "text": "_Imported from Lighthouse._\nComment by **Rhett Sutphin** - 2010-04-03 01:28:13 UTC\n\nSeems to me that the lowest-impact fix would be to move ActiveRecordError out of base.rb and into its own file.  That would break the autoload cycle (ActiveRecordError loads from base.rb, base.rb loads Associations, Associations loads ActiveRecordError).\n\nIn any case, another workaround is to explicitly require 'active_record/base' after requiring 'active_record'.\n", "created_at": "2011-05-16 03:22:43", "user": 789801, "id": 1169227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169228", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:48 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:22:43", "user": 789801, "id": 1169228}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169229", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:28:50 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:22:43", "user": 789801, "id": 1169229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169230", "text": "_Imported from Lighthouse._\nComment by **Betelgeuse** - 2011-02-02 17:35:16 UTC\n\n[state:open]\n\n```\nirb(main):008:0> ActiveRecord::Associations\nNameError: uninitialized constant ActiveRecord::Associations\n        from /usr/local/lib/ruby/gems/1.8/gems/activesupport-2.3.10/lib/active_support/dependencies.rb:466:in `load_missing_constant'\n        from /usr/local/lib/ruby/gems/1.8/gems/activesupport-2.3.10/lib/active_support/dependencies.rb:106:in `const_missing'\n        from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.10/lib/active_record/base.rb:3207\n        from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.10/lib/active_record/base.rb:3200:in `class_eval'\n        from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.10/lib/active_record/base.rb:3200\n        from /usr/local/lib/ruby/gems/1.8/gems/activerecord-2.3.10/lib/active_record/associations.rb:2\n        from (irb):8\n```\n", "created_at": "2011-05-16 03:22:44", "user": 789801, "id": 1169230}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169231", "text": "Attachments saved to Gist: http://gist.github.com/971630\n", "created_at": "2011-05-16 03:22:44", "user": 789801, "id": 1169231}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2594\nCreated by **Ruy Asan** - 2011-02-19 09:28:19 UTC\n\nFor example, given:\n\n``` ruby\nclass Sponsor < ActiveRecord::Base\n  belongs_to :sponsorable, :polymorphic => true\nend\n\nclass Organization < ActiveRecord::Base\nend\n\nclass SponsorableOrganization < Organization\n  has_one  :sponsor, :as => :sponsorable\nend\n```\n\n`Sponsor#sponsorable` will work as expected, however, `SponsorableOrganization#sponsor` will always query for `sponrable_type = 'Organization'`, which will fail.\n\nThis is because, for some reason, `ActiveRecord::Associations::HasOneAssociation#construct_sql` will explicitly try to insert `@owner.class.base_class` into the query (rather then just `@owner.class`).\n\nI used annotate to try and figure out just why, but I have been unable to - as far as I can tell, this behavior has simply been cargo-culted forward from its original implementation _4 years_ ago ;)\n\nPatch with tests included.\n", "labels": ["activerecord"], "number": 617, "updated_at": "2013-07-25 19:03:04", "user": 789801, "closed_at": "2012-06-15 21:16:33", "id": 904229, "title": "Bug with polymorphic has_one :as pointing to STI record", "url": "https://api.github.com/repos/rails/rails/issues/617", "created_at": "2011-05-16 03:23:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169232", "text": "_Imported from Lighthouse._\nComment by **patcito** - 2009-05-01 20:58:28 UTC\n\n+1\n", "created_at": "2011-05-16 03:23:09", "user": 789801, "id": 1169232}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169233", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-05-01 21:50:31 UTC\n\n(from [99c103be1165da9c8299bc0977188ecf167e06a5]) Fixed bug with polymorphic has_one :as pointing to an STI record\n\n[#2594 state:committed]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\nhttp://github.com/rails/rails/commit/99c103be1165da9c8299bc0977188ecf167e06a5\n", "created_at": "2011-05-16 03:23:10", "user": 789801, "id": 1169233}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169234", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-05-01 21:50:32 UTC\n\n(from [93c557828e1873004911acfd25d3b3903210bc40]) Fixed bug with polymorphic has_one :as pointing to an STI record\n\n[#2594 state:committed]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\nhttp://github.com/rails/rails/commit/93c557828e1873004911acfd25d3b3903210bc40\n", "created_at": "2011-05-16 03:23:11", "user": 789801, "id": 1169234}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169235", "text": "_Imported from Lighthouse._\nComment by **Josh Knowles** - 2009-05-11 18:50:53 UTC\n\nUnfortunately it looks like this commit broke the \"create_association\" methods as the record gets interested into the table using the base class name but it is now querying using the child-class name.\n\nHappy to try and put together a patch to rectify this, but seeing as how it started failing a ton of our scenarios in our app it makes me question whether this is appropriate for a point-release.  Seems like all records which were inserted using the base-class style would need to be updated, which could break a ton of apps.\n", "created_at": "2011-05-16 03:23:11", "user": 789801, "id": 1169235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169236", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-05-11 19:00:02 UTC\n\nI didn't see that this breaks existing behavior. No tests fail, unfortunately. Reverting.\n", "created_at": "2011-05-16 03:23:12", "user": 789801, "id": 1169236}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169237", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-05-11 19:22:30 UTC\n\n(from [35e17850819d99d78a3bd02865652c7882201bf0]) Revert \"Fixed bug with polymorphic has_one :as pointing to an STI record\"\n\n[#2594 state:open]\n\nThis reverts commit 93c557828e1873004911acfd25d3b3903210bc40.\nhttp://github.com/rails/rails/commit/35e17850819d99d78a3bd02865652c7882201bf0\n", "created_at": "2011-05-16 03:23:12", "user": 789801, "id": 1169237}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169238", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-05-11 19:22:32 UTC\n\n(from [ddbeb15a5e7e0c3c5f316ccf65b557bc5311a6c4]) Revert \"Fixed bug with polymorphic has_one :as pointing to an STI record\"\n\n[#2594 state:open]\n\nThis reverts commit 99c103be1165da9c8299bc0977188ecf167e06a5.\nhttp://github.com/rails/rails/commit/ddbeb15a5e7e0c3c5f316ccf65b557bc5311a6c4\n", "created_at": "2011-05-16 03:23:13", "user": 789801, "id": 1169238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169239", "text": "_Imported from Lighthouse._\nComment by **Ruy Asan** - 2009-05-11 19:35:34 UTC\n\nDarn - i thought that was too easy ;)\n\nDo you have a patch to add some failing test units for me mr. Knowles?\n", "created_at": "2011-05-16 03:23:13", "user": 789801, "id": 1169239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169240", "text": "_Imported from Lighthouse._\nComment by **Josh Knowles** - 2009-05-11 19:41:36 UTC\n\nHi Ruy,\n\nI will try and whip together a test which show-cases this behavior this evening.  Regardless of the missing test, switching the defaults is a bit concerning to me as anyone with an existing dataset is left in the cold.\n", "created_at": "2011-05-16 03:23:14", "user": 789801, "id": 1169240}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169241", "text": "_Imported from Lighthouse._\nComment by **Ruy Asan** - 2009-05-11 19:46:22 UTC\n\nWell from my POV the existing behaviour just seemed like a flat out bug so anyone that actually ran into this issue would have had to work around it in some way. I suspected that it was possible the change would affect cases other then this particular issue, but I figured the unit tests should have caught anything really bad... guess not!\n", "created_at": "2011-05-16 03:23:14", "user": 789801, "id": 1169241}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169242", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2009-06-08 20:25:13 UTC\n\nThis is related to several other reported issues with STI and polymorphic associations, and they all have a similar issue: expecting that the _type field match the real type of the target object. This is not the case in the current code - the _type field is used to figure out which table to query, not the type of the result. Note that, in this example, that this will work:\n\n``` ruby\nOrganization.find(SponsorableOrganization.first.id) # => a SponsorableOrganization object\n```\n", "created_at": "2011-05-16 03:23:15", "user": 789801, "id": 1169242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169243", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:48 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:23:15", "user": 789801, "id": 1169243}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169244", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-09 03:23:41 UTC\n\nMarking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.\n", "created_at": "2011-05-16 03:23:16", "user": 789801, "id": 1169244}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169245", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 20:48:06 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:23:16", "user": 789801, "id": 1169245}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169246", "text": "_Imported from Lighthouse._\nComment by **Spencer Dillard** - 2011-01-06 15:59:06 UTC\n\nWe are still seeing this happening on version 3.0.3.  We have the following code:\n\nCoverage < ActiveRecord::Base\n  has_one :contact, :as => :contactable\nend\n\nContactInfo < ActiveRecord::Base\n  belongs_to :contactable, :polymorphic => true\nend\n\nHere's the console output:\n\nirb(main):001:0> Coverage.first.contact\nArgumentError: wrong number of arguments (2 for 1)\n        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations/has_one_association.rb:88:in `find'\n        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations/has_one_association.rb:88:in`find_target'\n        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations/association_proxy.rb:237:in `load_target'\n        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations/association_proxy.rb:118:in`reload'\n        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations.rb:1451:in `contact'\n        from (irb):1\n", "created_at": "2011-05-16 03:23:17", "user": 789801, "id": 1169246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169247", "text": "_Imported from Lighthouse._\nComment by **Spencer Dillard** - 2011-01-06 16:03:40 UTC\n\nCorrection.  The code we had was:\nCoverage < ActiveRecord::Base\n  has_one :contact, :as => :contactable\nend\nContact < ActiveRecord::Base\n  belongs_to :contactable, :polymorphic => true \nend\n", "created_at": "2011-05-16 03:23:17", "user": 789801, "id": 1169247}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169248", "text": "_Imported from Lighthouse._\nComment by **Xac** - 2011-01-28 17:51:09 UTC\n\nThis is definitely still broken in Rails 3.\n", "created_at": "2011-05-16 03:23:18", "user": 789801, "id": 1169248}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169249", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-01-29 00:44:32 UTC\n\nSorry for the late response.\n\nCould one of you write a failing test for Rails? Or better yet write a patch with failing tests that fixes the issue?\n", "created_at": "2011-05-16 03:23:18", "user": 789801, "id": 1169249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169250", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-02-03 12:43:45 UTC\n\nXac, Rohit Arondekar As i see it is not broken in Rails 3 because to the sponsors table will be added a sponsor with sponsorable_type set to Organization (to the base_class) and so organizations(:sponsorable).sponsor will work correct.\n\nRails writes the base class to the #{reflection.options[:as]}_type column to give an ability to call something like a tagging.posts. Here we need to return all posts of type Post and of type SpecialPost (which is STI from Post). If we will write a class into #{reflection.options[:as]}_type instead of class.base_class we won't get posts of class SpecialPost which is not correct behavior.\n\nI think this ticket could be closed for Rails3.\n", "created_at": "2011-05-16 03:23:19", "user": 789801, "id": 1169250}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169251", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2011-02-03 13:53:50 UTC\n\n@2kan, I disagree.\n\nStoring the base_class in the type field of a polymorphic association does indeed allow the use case you give, but it does not allow efficient selection of a subset of STI types from a polymorphic association.\n\nFor example, extending your example, let's assume we also have @NiceSpecialPost@, @NastySpecialPost@ as additional subclasses of @SpecialPost@, plus @GoalPost@ as an additional subclass of @Post@.  Now consider these use cases:\n- you want to get the set of NiceSpecialPosts.\n- you want to get the set of SpecialPosts and it's subclasses.\n- you want to get the set of GoalPosts and NiceSpecialPosts.\n\nThese are all terribly inefficient if the polymorphic type does not hold the subclass.\n\nOn the other hand, if the polymorphic type does have the subclass, then queries such as this are possible, e.g. for the second case above:\n@Tags.find(:all, :include => :posts, :conditions => {:posts_type => [SpecialPosts, SpecialPosts.subclasses]})@\n\nIf you can do such a query using @find@ then you can generally achieve the same thing in an association.\n\nApologies if this is all a bit Rails2 - we haven't upgraded yet.  I have actually made these changes to our Rails2 installation and all of our polymorphic associations work this way because it enables queries in ActiveRecord that would otherwise be a pain to write.\n\nAlthough my opinions are based on Rails2, I don't see why this doesn't affect Rails3 - I'd have thought the same use cases could only be solved in the same way in Rails3 too, but the generally approved style and syntax would be different.\n", "created_at": "2011-05-16 03:23:19", "user": 789801, "id": 1169251}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169252", "text": "_Imported from Lighthouse._\nComment by **Paul K** - 2011-02-12 04:01:12 UTC\n\nI agree with Jonathan. There are non-trivial performance gains by storing the actual STI class in the polymorphic type column ... effectively removing the need to make extra joins.\n\nI've first stumbled onto this \"problem\" in Rails 1.x and have been applying patches as I've been upgrading Rails. Now I'm looking to upgrade to Rails 3 and oh no ... Rails 3 still stores the base class in polymorphic type columns and no there is no patch :(.\n\nGoing from the existing Rails behavior to what's proposed will require a migration to update the polymorphic columns and simple code changes (i.e. instead of parent_type = 'Person' you need parent_type = [Person, Person.subclasses]).\n\nGoing the other way also requires a migration but the code changes are potentially much more complex as additional joins have to be worked into the code. \n\nBTW, this seems to be same as [#5617](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/5617). No?\n", "created_at": "2011-05-16 03:23:20", "user": 789801, "id": 1169252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169253", "text": "Attachments saved to Gist: http://gist.github.com/971631\n", "created_at": "2011-05-16 03:23:20", "user": 789801, "id": 1169253}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1521248", "text": "+1 have just stumbled upon this behaviour the first time.\n", "created_at": "2011-07-07 08:48:05", "user": 10952, "id": 1521248}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3624779", "text": "Someone made a gem for this:\nhttps://github.com/pkmiec/store_base_sti_class_for_3_0\n\nSeems like this should be fixed in core :(\n", "created_at": "2012-01-24 00:03:02", "user": 6336, "id": 3624779}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3625042", "text": "BTW, can be fixed by changing:\n\nBelongsToPolymorphicAssociation:\n\n```\n-          owner[reflection.foreign_type] = record && record.class.base_class.name\n+          owner[reflection.foreign_type] = record && record.class.sti_name \n```\n", "created_at": "2012-01-24 00:24:45", "user": 6336, "id": 3625042}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3950436", "text": "+1 can this be fixed in the next 3.2 release?\n", "created_at": "2012-02-13 22:02:57", "user": 22553, "id": 3950436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4376252", "text": "+1 FWIW, the original ticket by Ruy is the problem I'm experiencing. (I'm on 3.1.3)\n", "created_at": "2012-03-07 20:13:35", "user": 151907, "id": 4376252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5409399", "text": "Hmm, this needs a failing test\n", "created_at": "2012-04-29 22:31:56", "user": 48928, "id": 5409399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5635571", "text": "Hi, just wanted to comment here in case anyone finds this thread while trying to solve this problem.  We've cleaned up the versions that were 3.0 and 3.1 specific and rolled them into a single gem \"store_base_sti_class\".  You can find it here:\n\nhttps://github.com/appfolio/store_base_sti_class\n\nIt should be compatible with all versions of rails above 3.0.5.  We'll be maintaining this for future versions of rails for the time being.\n", "created_at": "2012-05-10 20:23:35", "user": 919763, "id": 5635571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6366819", "text": "This appears to be working in 3.2.6:\n\n``` irb\n\nLoading development environment (Rails 3.2.6)\n>> o = SponsorableOrganization.new\n=> #<SponsorableOrganization id: nil, type: \"SponsorableOrganization\", created_at: nil, updated_at: nil>\n>> o.sponsor = Sponsor.new\n   (0.1ms)  begin transaction\n   (0.0ms)  commit transaction\n=> #<Sponsor id: nil, sponsorable_id: nil, sponsorable_type: \"Organization\", created_at: nil, updated_at: nil>\n>> o.save\n   (0.1ms)  begin transaction\n  SQL (32.9ms)  INSERT INTO \"organizations\" (\"created_at\", \"type\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", Fri, 15 Jun 2012 21:13:01 UTC +00:00], [\"type\", \"SponsorableOrganization\"], [\"updated_at\", Fri, 15 Jun 2012 21:13:01 UTC +00:00]]\n  SQL (0.4ms)  INSERT INTO \"sponsors\" (\"created_at\", \"sponsorable_id\", \"sponsorable_type\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"created_at\", Fri, 15 Jun 2012 21:13:01 UTC +00:00], [\"sponsorable_id\", 1], [\"sponsorable_type\", \"Organization\"], [\"updated_at\", Fri, 15 Jun 2012 21:13:01 UTC +00:00]]\n   (2.9ms)  commit transaction\n=> true\n>> Sponsor.first.sponsorable\n  Sponsor Load (0.3ms)  SELECT \"sponsors\".* FROM \"sponsors\" LIMIT 1\n  Organization Load (0.2ms)  SELECT \"organizations\".* FROM \"organizations\" WHERE \"organizations\".\"id\" = 1 LIMIT 1\n=> #<SponsorableOrganization id: 1, type: \"SponsorableOrganization\", created_at: \"2012-06-15 21:13:01\", updated_at: \"2012-06-15 21:13:01\">\n>> SponsorableOrganization.first.sponsor\n  SponsorableOrganization Load (0.3ms)  SELECT \"organizations\".* FROM \"organizations\" WHERE \"organizations\".\"type\" IN ('SponsorableOrganization') LIMIT 1\n  Sponsor Load (0.3ms)  SELECT \"sponsors\".* FROM \"sponsors\" WHERE \"sponsors\".\"sponsorable_id\" = 1 AND \"sponsors\".\"sponsorable_type\" = 'Organization' LIMIT 1\n=> #<Sponsor id: 1, sponsorable_id: 1, sponsorable_type: \"Organization\", created_at: \"2012-06-15 21:13:01\", updated_at: \"2012-06-15 21:13:01\">\n```\n\nClosing this - if anyone can give me an example where it fails I'll take another look at it.\n", "created_at": "2012-06-15 21:16:32", "user": 6321, "id": 6366819}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14048364", "text": "FYI, this is still the behaviour of rails (3.2) but the [store_base_sti_class gem](https://github.com/appfolio/store_base_sti_class) works for all rails 3.x (its origins are traceable to [here](https://github.com/rails/rails/issues/724)).\n", "created_at": "2013-02-25 15:28:21", "user": 769725, "id": 14048364}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2646\nCreated by **Jarl Friis** - 2011-03-04 01:59:41 UTC\n\nWhen using attributes= on a nested attribute for which :allow_destroy => true, and deleting an entry, no validation is taking place.\n\nI supply a test case that demonstrates the problem.\n", "labels": [], "number": 618, "updated_at": "2012-02-07 23:16:02", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904231, "title": "validations not called when model updating using nested attributes", "url": "https://api.github.com/repos/rails/rails/issues/618", "created_at": "2011-05-16 03:23:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169254", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2009-05-14 19:03:35 UTC\n\nThere's an issue here, but your test does not trigger it. You'll need to save the Pirate record before bird.id will even have a value to use in the attribute call.\n\nI've attached a diff with a correct test; the fix is going to be more complicated.\n\nThe issue is that, until the after_save callbacks from the nested_attributes code run, pirate.birds.size is 1. The bird instance has marked_for_destruction? set, but has not yet been destroyed.\n\n@jarl - in the interim, you might want to try a custom validation that only counts records with marked_for_destruction? false.\n\nExample:\n\n``` ruby\nassert_nothing_raised do\n  Pirate.validates_each(:birds) do |record, attr, value|\n    record.errors.add attr, 'is too short.' if value.reject { |v| v.marked_for_destruction? }.size < 1\n  end\nend\n```\n\nor even define a custom attribute (a bit of a hack):\n\n``` ruby\n  Pirate.class_eval do\n    def birds_not_destroyed\n      birds.reject { |v| v.marked_for_destruction? }\n    end\n  end\n```\n\nand run validates_size_of on that.\n", "created_at": "2011-05-16 03:23:27", "user": 789801, "id": 1169254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169255", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-05-15 03:24:30 UTC\n\nAssigning to eloy as he's the dude here.\n", "created_at": "2011-05-16 03:23:27", "user": 789801, "id": 1169255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169256", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2009-05-15 08:16:03 UTC\n\nThanks for taken my ticket serious.\n\nActually the line in my test reading\n    p.attributes = {:birds_attributes => [ {:_delete => 1, :id => bird.id}]}\nshould have been\n    p.update_attributes :birds_attributes => [ {:_delete => 1, :id => bird.id}]\n\nThis was more like the code generated by scaffold that lead me to discover this problem, and as you have mentioned update_attributes do call save after the attributes=. Sorry for the confusion.\n\n@Matt: Thanks a lot for the temporary workaround you have suggested.\n", "created_at": "2011-05-16 03:23:27", "user": 789801, "id": 1169256}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169257", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2009-05-15 09:01:00 UTC\n\nWhat ever the fix is going to be I think it is worth considering to make a fix so that p.birds.size should result in 0 after\n    p.attributes = {:birds_attributes => [ {:_delete => 1, :id => bird.id}]}\nBasically that probably means that size has to be implemented to not count birds for which marked_for_destruction? is true. Remember that birds that is marked_for_destruction only still exists because the ids are need when p is saved to the database (so that the birds can be deleted). Alternatively is to store all birds that is marked_for_destruction into a different list which is then cleared when p is saved to the database.\n", "created_at": "2011-05-16 03:23:28", "user": 789801, "id": 1169257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169258", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2009-05-15 13:51:38 UTC\n\n@Matt: I see your point now. The test have to call save _before_ the call to attributes=.\n\nPlease ignore my comment @ 09:16 AM\n", "created_at": "2011-05-16 03:23:28", "user": 789801, "id": 1169258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169259", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-05-16 08:42:53 UTC\n\nThe dude has reserved some time at the end of the coming week to review problems and patches. :)\n", "created_at": "2011-05-16 03:23:28", "user": 789801, "id": 1169259}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169260", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-07-12 12:04:20 UTC\n\nI stil haven't been able to make up my mind on how to fix this cleanly. I'm currently leaning to overriding AssociationCollection #size & #length to ignore records that have been marked for destruction. Thoughts?\n", "created_at": "2011-05-16 03:23:29", "user": 789801, "id": 1169260}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169261", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-07-12 23:56:26 UTC\n\nWouldn't it be cleaner just to remove the records from the in memory array once they're marked for destruction.  Then size and length will function as intended?\n", "created_at": "2011-05-16 03:23:29", "user": 789801, "id": 1169261}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169262", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2009-07-13 07:20:36 UTC\n\nGood suggestion Koz, it would solve another problems as having destroyed records being validated when they shouldn't.\n", "created_at": "2011-05-16 03:23:29", "user": 789801, "id": 1169262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169263", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2009-07-13 07:34:09 UTC\n\nThe only issue with removing them is that if some other validation fails, they'll need to be someplace so they can be returned back to the user. \n\nThe most specific instance of this would be a validation that ensures that exactly N associated records exist (bad design, but it could happen). In that case, a user will have to delete some records if more are added, but the whole array will need to be around to display with the validation error.\n", "created_at": "2011-05-16 03:23:30", "user": 789801, "id": 1169263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169264", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2009-07-13 07:38:55 UTC\n\nWhile I was typing an elaborate comment, Matt posted his, which says exactly what I wanted to say, but better :)\n\nSo the problem is how to put them back _after_ a failed validation, which might occur elsewhere then the current association, or an exception is raised etc. This might not be such a problem at all of course, I'd just have to look into it, but it seemed a way more complicated solution then having the collection return the size of what's actually going to be in the database.\n", "created_at": "2011-05-16 03:23:30", "user": 789801, "id": 1169264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169265", "text": "_Imported from Lighthouse._\nComment by **Adam Ingram-Goble** - 2010-01-02 22:22:11 UTC\n\nwould it be possible to either move the marked_for_destruction records to another in memory array, or modify the association method so that it doesn't return the marked records by default?  Either procedure allow for \"rolling back\" the failure.  I think this is important for supporting the principle of least surprise.\n", "created_at": "2011-05-16 03:23:30", "user": 789801, "id": 1169265}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169266", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:23:31", "user": 789801, "id": 1169266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169267", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-07-08 10:38:26 UTC\n\nDid not know there were so many tickets related to nested_attributes. I will take a look at this one too.\n", "created_at": "2011-05-16 03:23:31", "user": 789801, "id": 1169267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169268", "text": "_Imported from Lighthouse._\nComment by **Eloy Duran** - 2010-07-08 11:57:17 UTC\n\nThere aren't that many different ones though :)\n\nThis is basically the same problem that comes up once in a while; how to make validates_size_of etc work with records marked for destruction. To use a separate array or not, that is the question‚Ä¶\n", "created_at": "2011-05-16 03:23:31", "user": 789801, "id": 1169268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169269", "text": "_Imported from Lighthouse._\nComment by **wout** - 2010-08-19 08:41:43 UTC\n\nI found out why associations sometimes aren't saved. If one of the database fields is changed validations are started and associations are saved, but if an attr_accessor value is changed not. Currently I add a hidden field to my nested forms setting :updated_at to Time.now and all is working fine again.\n", "created_at": "2011-05-16 03:23:32", "user": 789801, "id": 1169269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169270", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:48:05 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:23:32", "user": 789801, "id": 1169270}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169271", "text": "Attachments saved to Gist: http://gist.github.com/971632\n", "created_at": "2011-05-16 03:23:32", "user": 789801, "id": 1169271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3859039", "text": "Thanks for the tip on the hidden field.  You're right it seems that updated \"virtual attributes\" don't trigger the callback hooks. Although oddly enough the nested fields are validated.\n\nSo validations are run but before_validation is not on nested models when only virtual attribute are changed.\n", "created_at": "2012-02-07 23:16:02", "user": 1136629, "id": 3859039}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2662\nCreated by **Alexander Simonov** - 2011-02-22 08:32:35 UTC\n\nIn one of RoR projects I have had to save Model with custom SQL query.\nI've used nested SQL query.\nThe problem was that all the attributes of the model were quoted.\nPatch fix this problem.\nIn the model we add new **attr_accesor** and name it like attribute name with \"_sql\" postfix. Value of this instance variable is our nested SQL query.\n", "labels": [], "number": 619, "updated_at": "2011-05-21 15:11:52", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904233, "title": "Add support for nested SQL queries", "url": "https://api.github.com/repos/rails/rails/issues/619", "created_at": "2011-05-16 03:23:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169272", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:23:38", "user": 789801, "id": 1169272}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169273", "text": "_Imported from Lighthouse._\nComment by **Alexander Simonov** - 2010-07-19 08:43:17 UTC\n\nHm... Sorry but I have one question.\nJeremy Kemper changed milestone from 2.x to 3.x so I must rewrite patch to Rails3?\n", "created_at": "2011-05-16 03:23:38", "user": 789801, "id": 1169273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169274", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-07 06:29:37 UTC\n\nAlexander, I think 2.x has come to an end to it's lifecycle. I don't think there will be a 2.4 &mdash; only bug fixes to 2.3.x &mdash; hence no feature changes (at least in theory) can be done on that branch. Hence the change in the milestone.\n\nIf you would like to work on making that patch for 3 I guess you can go ahead. Else I can close this ticket.\n", "created_at": "2011-05-16 03:23:38", "user": 789801, "id": 1169274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169275", "text": "_Imported from Lighthouse._\nComment by **Alexander Simonov** - 2010-10-07 06:58:13 UTC\n\nThank you for the reply!\nOk, I will rewrite this patch for Rails3.\n", "created_at": "2011-05-16 03:23:39", "user": 789801, "id": 1169275}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169276", "text": "Attachments saved to Gist: http://gist.github.com/971633\n", "created_at": "2011-05-16 03:23:39", "user": 789801, "id": 1169276}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2667\nCreated by **Sam Ruby** - 2009-05-18 01:51:08 UTC\n\nThe attached tests works on Rails 2.1.2, 2.2.2, and 2.3.2 (released).  It fails on edge Rails.\n", "labels": [], "number": 620, "updated_at": "2011-05-21 15:11:52", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904235, "title": "xhr clobbers id param on non-REST routes", "url": "https://api.github.com/repos/rails/rails/issues/620", "created_at": "2011-05-16 03:23:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169278", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-05-18 03:06:49 UTC\n\nAppears to be a difference in priority between ?id= and the route recognition stuff.\n\nWill investigate.\n", "created_at": "2011-05-16 03:23:45", "user": 789801, "id": 1169278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169279", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-06-23 12:37:01 UTC\n\nAny updates to this ticket?\n", "created_at": "2011-05-16 03:23:45", "user": 789801, "id": 1169279}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169280", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:30 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:23:45", "user": 789801, "id": 1169280}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169281", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:32 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:23:46", "user": 789801, "id": 1169281}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169282", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:33:29 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:23:46", "user": 789801, "id": 1169282}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169283", "text": "_Imported from Lighthouse._\nComment by **Cesario** - 2010-11-13 23:56:56 UTC\n\nSam, Michael,\n\nDo you think [this branch](https://github.com/cesario/rails/tree/lighthouse/2667) and especially [that commit](https://github.com/cesario/rails/commit/0a5b356355f304fa26180beff29b837f1e3fc0d9) reproduces the bug you mention?\n\nIf so, the tests pass and there's no more bug on Rails edge.\n", "created_at": "2011-05-16 03:23:46", "user": 789801, "id": 1169283}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169284", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:23:47", "user": 789801, "id": 1169284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169285", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:23:47", "user": 789801, "id": 1169285}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169286", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:23:47", "user": 789801, "id": 1169286}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169287", "text": "Attachments saved to Gist: http://gist.github.com/971634\n", "created_at": "2011-05-16 03:23:48", "user": 789801, "id": 1169287}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2672\nCreated by **Elia Schito** - 2011-02-19 09:28:18 UTC\n\nhi pratik,\njust found a couple of inconsistencies in active support gem:\nit depends on nothing gem but it should depend on (at least) a couple of other gems...\n\nparticularly as far as I know it sould depend on \"builder\" (since it requires balnkslate) and on I18n (which in turn doesn't seem to be available as an independent gem...)\n", "labels": [], "number": 621, "updated_at": "2011-05-21 15:11:52", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904238, "title": "ActiveSupport gem should depend on builder (and i18n?)", "url": "https://api.github.com/repos/rails/rails/issues/621", "created_at": "2011-05-16 03:23:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169289", "text": "_Imported from Lighthouse._\nComment by **Rishav Rastogi** - 2010-04-11 22:32:44 UTC\n\nI think this is taken care of in rails 3. i18n is a separate gem as well now.\n\nBuilder and i18n are installed as dependencies for rails 3 now.\n", "created_at": "2011-05-16 03:24:13", "user": 789801, "id": 1169289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169290", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-04-11 23:06:44 UTC\n\nIs this also taken care of on the 2.3.x branch? I think there's going to be one more 2.3.x release along with 3.0. But I am purely speculating here.\n", "created_at": "2011-05-16 03:24:14", "user": 789801, "id": 1169290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169291", "text": "_Imported from Lighthouse._\nComment by **Rishav Rastogi** - 2010-04-13 22:51:58 UTC\n\nuntil rails 3, all these dependencies were vendored into the activesupport gem.\n\nFound at /usr/lib/ruby/gems/1.8/gems/activesupport-2.2.x/lib/active_support/vendor\n\nI have also checked in 2.3.x.\n", "created_at": "2011-05-16 03:24:14", "user": 789801, "id": 1169291}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169292", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-04-13 23:10:03 UTC\n\nRight. Marking as invalid.\n", "created_at": "2011-05-16 03:24:14", "user": 789801, "id": 1169292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169293", "text": "_Imported from Lighthouse._\nComment by **ravinggenius** - 2010-10-07 23:20:54 UTC\n\nPlease reopen this ticket. I have a Sinatra app that requires Pony (for sending mail). Pony depends on Mail. Mail depends on ActiveSupport. ActiveSupport depends on i18n, but does not declare that fact. Thus, unless I add i18n to my Gemfile, nothing works.\n", "created_at": "2011-05-16 03:24:15", "user": 789801, "id": 1169293}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169294", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-07 23:24:29 UTC\n\nPlease submit a patch to this ticket to fix this problem.\n", "created_at": "2011-05-16 03:24:15", "user": 789801, "id": 1169294}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169295", "text": "_Imported from Lighthouse._\nComment by **David Haslem** - 2010-10-20 17:04:13 UTC\n\nExperiencing the same issue - mail depends on activesupport, which doesn't require i18n as it should. Here's a patch moving the i18n dependency from ActiveModel and ActionPack to ActiveSupport, so the dependency can be managed in one place.\n", "created_at": "2011-05-16 03:24:15", "user": 789801, "id": 1169295}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169296", "text": "_Imported from Lighthouse._\nComment by **David Haslem** - 2010-10-20 17:05:28 UTC\n\nForgot to add patch tag.\n", "created_at": "2011-05-16 03:24:16", "user": 789801, "id": 1169296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169297", "text": "_Imported from Lighthouse._\nComment by **Gabe da Silveira** - 2010-10-20 17:13:14 UTC\n\nThis should be marked invalid.  I had this same problem, but it was because the library was requiring active_support/core_ext.  I changed it to just require 'active_support' and it works, at least as of this commit: http://github.com/rails/rails/commit/39d6f9e1#diff-21\n\nSince Rails 3 makes active_support less monolithic, I believe this should be the approved approach going forward.  If individual components have specific dependency issues those should be reviewed on a case-by-case basis, however the general claim that active_support does not declare it's dependency of I18n is false.\n", "created_at": "2011-05-16 03:24:16", "user": 789801, "id": 1169297}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169299", "text": "_Imported from Lighthouse._\nComment by **Gabe da Silveira** - 2010-10-20 17:15:54 UTC\n\nUh sorry David, you posted while I was typing :(\n\n+1 on the patch to fix the gemspec (I already had Rails installed, so didn't notice that aspect of it)\n", "created_at": "2011-05-16 03:24:16", "user": 789801, "id": 1169299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169300", "text": "_Imported from Lighthouse._\nComment by **David Haslem** - 2010-10-20 17:26:56 UTC\n\nPrevious patch neglected builder, because it looks like it's supposed to be optional for activesupport (builder isn't required until to_xml is called). Here's a patch with both i18n and builder dependency moved into activesupport if you prefer that option.\n", "created_at": "2011-05-16 03:24:17", "user": 789801, "id": 1169300}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169301", "text": "_Imported from Lighthouse._\nComment by **David Haslem** - 2010-10-20 17:42:17 UTC\n\nNo problem Gabe, same happened to me - didn't see your comment until after my second patch :(. \n\nYour comment makes my second patch unnecessary, since it'd just make active_support more monolithic - only the i18n gem is required to get an 'active_support/core_ext' require to work.\n", "created_at": "2011-05-16 03:24:17", "user": 789801, "id": 1169301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169302", "text": "_Imported from Lighthouse._\nComment by **Y.C. Ling** - 2011-01-03 08:32:49 UTC\n\nEncountered the same issue. \n\nI still think it's good to apply David's patch. \nI'm working on a project depend on ActiveSupport (not other parts in rails), \nand using meta-programming methods such as alias_method_chain, set_callback.\nIt's strange that I need to setting i18n gem manually in the Gemfile, \neven if I didn't use any localization functionality of ActiveSupport. \n\nI think make an `unnecessary' dependency to i18n and builder is good. \nIt makes the annoying things behind the scene.\n", "created_at": "2011-05-16 03:24:17", "user": 789801, "id": 1169302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169303", "text": "Attachments saved to Gist: http://gist.github.com/971635\n", "created_at": "2011-05-16 03:24:17", "user": 789801, "id": 1169303}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2677\nCreated by **Paul** - 2011-02-22 08:32:35 UTC\n\ni had trouble getting a MS Outlook Client to display utf-8 properly. The only way to support special characters was to send all the stuff with iso-8859-1. But hey, all the rails app stuff is utf-8 encoded (DB, Templates, Files...)\n\nSo i decided to add an 'arguments_charset' to actionmailer to tell actionmailer to recode the input with iconv if the 'charset' definition differs from the 'arguments_charset' definition.\n\nWith this one can write \n\n  config.action_mailer.default_charset = 'ISO-8859-1'\n  config.action_mailer.default_arguments_charset = 'UTF-8'\n\nwithin environment.rb to send all email as 'ISO-8859-1'\n\nAttached a patch. No tests included - but it works for me now and MS Outlook users will see √º√§√∂ :)\n", "labels": [], "number": 622, "updated_at": "2011-05-21 15:11:52", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904240, "title": "ActionMailer and client encoding trouble", "url": "https://api.github.com/repos/rails/rails/issues/622", "created_at": "2011-05-16 03:24:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169304", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:50 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:24:23", "user": 789801, "id": 1169304}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169305", "text": "Attachments saved to Gist: http://gist.github.com/971636\n", "created_at": "2011-05-16 03:24:24", "user": 789801, "id": 1169305}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2792\nCreated by **Andrew Arrow** - 2011-02-22 08:32:36 UTC\n\nOnce you have lots of gems and plugins and routes start can take a long time.  It helps a lot to see verbose output of what is taking so long.  This patch file make rails show nice output like:\n\n```\n                   starting 0.0000\n         check_ruby_version 0.0016\n     install_gem_spec_stubs 0.0016\n              set_load_path 0.0006\n         add_gem_load_paths 0.0330\n                         ============== REQUIRE FRAMEWORKS =================\n                                              active_record 0.0107\n                                          action_controller 0.0023\n                                                action_view 0.0023\n                                              action_mailer 0.2798\n                                            active_resource 0.3606\n         set_autoload_paths 0.0001\n      add_plugin_load_paths 0.1356\n           load_environment 0.0736\n         preload_frameworks 0.0000\n        initialize_encoding 0.0000\n        initialize_database 0.3531\n           initialize_cache 0.0059\ninitialize_framework_caches 0.1401\n          initialize_logger 0.0019\n```\n\n   initialize_framework_logging 0.0001\ninitialize_dependency_mechanism 0.0000\n          initialize_whiny_nils 0.0035\n           initialize_time_zone 0.0000\n                initialize_i18n 0.0000\n  initialize_framework_settings 0.0002\n     initialize_framework_views 0.0017\n               initialize_metal 0.0148\n         add_support_load_paths 0.0000\netc.\n\nif the env var RAILS_VERBOSE_STARTUP is set.\n", "labels": [], "number": 623, "updated_at": "2011-05-21 15:11:52", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904243, "title": "add verbose output to rails startup if RAILS_VERBOSE_STARTUP env is true", "url": "https://api.github.com/repos/rails/rails/issues/623", "created_at": "2011-05-16 03:24:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169306", "text": "_Imported from Lighthouse._\nComment by **Nick Quaranto** - 2009-06-11 17:21:58 UTC\n\nI love this idea, but I'm not necessarily sure if this should be in the core. I think this extended out to more parts of the framework could be a great way to benchmark what's slow about an app and even point out parts that need refactoring. If you could wrap this up in a decent plugin/gem and it could go far.\n", "created_at": "2011-05-16 03:24:29", "user": 789801, "id": 1169306}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169307", "text": "_Imported from Lighthouse._\nComment by **Andrew Arrow** - 2009-06-11 18:32:28 UTC\n\nThanks Nick!  Trouble is I need to hack into rails before any plugin or gem is loaded.  By the time it gets to loading my gem, it's too late.  But the patch as is needs some work.  I just threw it in my local copy of rails and have been using it.  I figured some rails core guru could take it from here and implement it cleaner if they see the value.\n", "created_at": "2011-05-16 03:24:30", "user": 789801, "id": 1169307}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169308", "text": "_Imported from Lighthouse._\nComment by **Daniel Schierbeck** - 2009-06-11 23:45:59 UTC\n\nHi Andrew\n\nI like the concept, but I think the patch definitely needs to be cleaned up. I've fixed some of it; take a look if you want :-)\n", "created_at": "2011-05-16 03:24:30", "user": 789801, "id": 1169308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169309", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:24:30", "user": 789801, "id": 1169309}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169310", "text": "Attachments saved to Gist: http://gist.github.com/971637\n", "created_at": "2011-05-16 03:24:30", "user": 789801, "id": 1169310}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2823\nCreated by **Joshua Krall** - 2009-06-22 07:43:09 UTC\n\nI ran into a problem with geokit and will_paginate... that I tracked down to a bad interaction between the :select option and calculation methods.\n\nIt boils down to a simple case that looks like this:\n\n``` ruby\nAccount.scoped(:select => \"credit_limit, COS(credit_limit) as cosine_of_credit_limit\").count\n```\n\nThis case demonstrates what geokit adds to the :select argument, but it also fails if you do something as simple as :select=>'a,b'\n\nI'm uploading a new patch to fix this, by splitting the column on commas and taking the first column for the COUNT() directive.  So, :select=>'a,b' turns into \"SELECT COUNT(a) as count_a ...\"\n\nAll tests pass, but take a look and see if you find anything wrong here.  Thanks!\n", "labels": [], "number": 624, "updated_at": "2011-05-21 15:11:52", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904244, "title": "Calculations break with multi-column :select argument", "url": "https://api.github.com/repos/rails/rails/issues/624", "created_at": "2011-05-16 03:24:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169313", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-08-08 01:54:43 UTC\n\nWe can't just take the first column specified, while it works for your example it's not 'good enough' in general.  Instead we need a way to fix it permanently\n\nI'd question why we're even taking the :select key from find scopes.  I've attached a patch that takes it from :count scopes instead.\n\nI've attached a patch for this and would appreciate your feedback.   Your fix would look like:\n\n```\n    Account.with_scope(:find=>{:select=>\"COS(id), SIN(id)\"}, :count=>{:select=>\"id\"}) do\n```\n", "created_at": "2011-05-16 03:24:36", "user": 789801, "id": 1169313}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169314", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-08-08 23:35:20 UTC\n\nThis is messy indeed. I'd almost see an error raised than let this slip through or get hacked around.\n\nMichael, that fix works for count, but not the other calculations.\n", "created_at": "2011-05-16 03:24:37", "user": 789801, "id": 1169314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169315", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-08-08 23:37:19 UTC\n\nOK, I agree on the error case,  let's just raise an exception in the\nevent that the :select scope doesn't map onto the column_name\n", "created_at": "2011-05-16 03:24:37", "user": 789801, "id": 1169315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169316", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:30 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:24:37", "user": 789801, "id": 1169316}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169317", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:24:37", "user": 789801, "id": 1169317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169318", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:24:38", "user": 789801, "id": 1169318}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169319", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:24:38", "user": 789801, "id": 1169319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169320", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:24:38", "user": 789801, "id": 1169320}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169321", "text": "Attachments saved to Gist: http://gist.github.com/971638\n", "created_at": "2011-05-16 03:24:39", "user": 789801, "id": 1169321}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2872\nCreated by **Andrey \"Zed\" Zaikin** - 2011-02-19 09:28:21 UTC\n\nexample migrations:\n\n``` ruby\nclass M1 < ActiveRecord::Migration\n  def self.up\n    create_table 'users' do |t|\n      t.string 'name'\n      t.decimal 'v1', :precision => 10, :scale => 3\n    end\n  end\n\n  def self.down\n    drop_table 'users'\n  end\nend\n\nclass M2 < ActiveRecord::Migration\n  def self.up\n    change_column :users, :v1, :decimal, :precision => 12, :scale => 5\n  end\n\n  def self.down\n  end\nend\n```\n\nexpected resulting schema:\n\n``` ruby\nActiveRecord::Schema.define(:version => 20090706090649) do\n  create_table \"users\", :force => true do |t|\n    t.string  \"name\"\n    t.decimal \"v1\",   :precision => 12, :scale => 5\n  end\nend\n```\n\nactual resulting schema:\n\n``` ruby\nActiveRecord::Schema.define(:version => 20090706090649) do\n  create_table \"users\", :force => true do |t|\n    t.string  \"name\"\n    t.decimal \"v1\"\n  end\nend\n```\n", "labels": [], "number": 625, "updated_at": "2011-05-21 15:11:52", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904246, "title": "[PATCH] sqlite3 adapter drops :decimal columns precision & scale when migration tries to alter them", "url": "https://api.github.com/repos/rails/rails/issues/625", "created_at": "2011-05-16 03:24:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169323", "text": "_Imported from Lighthouse._\nComment by **Taryn** - 2009-07-06 09:49:16 UTC\n\nI've hit this problem too.\nLooking into the sqlite adaptor code, you can see that it's simply dropping any+all options.\n", "created_at": "2011-05-16 03:24:45", "user": 789801, "id": 1169323}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169324", "text": "_Imported from Lighthouse._\nComment by **Yehuda Katz (wycats)** - 2009-07-07 23:12:36 UTC\n\nAny chance I could get you to include a new test case for this?\n", "created_at": "2011-05-16 03:24:45", "user": 789801, "id": 1169324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169325", "text": "_Imported from Lighthouse._\nComment by **Paul Hinze** - 2009-07-20 18:43:48 UTC\n\nHere's a test case that fails without the above patch and passes when it is applied.  It tests that you can use change_column to alter a column's scale and precision.  The attributes are dropped in the code without this patch, and they are properly changed when it is applied.\n", "created_at": "2011-05-16 03:24:45", "user": 789801, "id": 1169325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169327", "text": "_Imported from Lighthouse._\nComment by **Taryn East** - 2009-07-22 11:19:03 UTC\n\nOk, when I click on Paul's patch I get some sort of key error, so here's my own patch that includes a test that fails with the current Rails code, as well as Adnrey's code - which makes it pass.\n\nNote - I've made the test-case specific to sqlite3 as that's where the issue is located.\n", "created_at": "2011-05-16 03:24:46", "user": 789801, "id": 1169327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169328", "text": "_Imported from Lighthouse._\nComment by **Taryn East** - 2009-07-22 11:27:10 UTC\n\nI meant to add... but technically the test should pass on all adapters. Only I can't test Postgres - because I don't have that installed.\nit runs fine for all the other standard adapters ie it doesn't fail when I remove the adapter-check line except for the postgres section which doesn't run at all.\n", "created_at": "2011-05-16 03:24:46", "user": 789801, "id": 1169328}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169329", "text": "_Imported from Lighthouse._\nComment by **Taryn East** - 2009-07-22 12:27:12 UTC\n\nOk - that's weird. Looks like running a migration with this sets the local values for precision/scale... but doesn't actually change the real db properly.\nYou can test that with a migration that changes _two_ columns' precisions:\n\nclass M¬£ < ActiveRecord::Migration\n  def self.up\n    change_column :users, :v1, :decimal, :precision => 12, :scale => 5\n    change_column :users, :v2, :decimal, :precision => 12, :scale => 5\n  end\n\n  def self.down\n  end\nend\n\nexpected resulting schema:\n\nActiveRecord::Schema.define(:version => 20090706090649) do\n  create_table \"users\", :force => true do |t|\n    t.string  \"name\"\n    t.decimal \"v1\",   :precision => 12, :scale => 5\n    t.decimal \"v2\",   :precision => 12, :scale => 5\n  end\nend\n\nactual resulting schema:\n\nActiveRecord::Schema.define(:version => 20090706090649) do\n  create_table \"users\", :force => true do |t|\n    t.string  \"name\"\n    t.decimal \"v1\"\n    t.decimal \"v2\",   :precision => 12, :scale => 5\n  end\nend\n\nIf you reverse the order of two change_column names in the migration... you get:\n\nActiveRecord::Schema.define(:version => 20090706090649) do\n  create_table \"users\", :force => true do |t|\n    t.string  \"name\"\n    t.decimal \"v1\",   :precision => 12, :scale => 5\n    t.decimal \"v2\"\n  end\nend\n\nie - only the last migration seems to actually change the schema...\n", "created_at": "2011-05-16 03:24:46", "user": 789801, "id": 1169329}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169330", "text": "_Imported from Lighthouse._\nComment by **Taryn East** - 2009-07-22 12:28:14 UTC\n\nhmmm... and \"edit last comment\" feature would be appreciated.. ;)\n", "created_at": "2011-05-16 03:24:47", "user": 789801, "id": 1169330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169331", "text": "_Imported from Lighthouse._\nComment by **Taryn East** - 2009-07-22 16:04:33 UTC\n\nHokay... so after much digging there is one important fact we need to remember.\nSQLite doesn't actually (natively) support :precision/scale.\n\nThe troubles that my company ran into were more based on the fact that in doing the migration... the schema lost the precision/scale - which means that when we uploaded into a NON-sqlite instance of the db... we then ran into issues.\n\nI'm not sure how to test for this as we don't have Rails tests (that I see) where we dump the schema from one adaptor, then try to schema:load into another.\n\nIn any case, I ran across one other place where the precision/scale are \"lost\" in the sqlite adaptor... adding the following patch seemed to solve that... but I can't officially test it.\n\nAny comments/suggestions welcome.\n", "created_at": "2011-05-16 03:24:47", "user": 789801, "id": 1169331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169332", "text": "_Imported from Lighthouse._\nComment by **Matt Kern** - 2009-08-06 23:54:25 UTC\n\nSo if I understand this correctly, the schema should retain the precision and scale, but the sqlite3 adapter should ignore it when creating the columns, correct?\n", "created_at": "2011-05-16 03:24:47", "user": 789801, "id": 1169332}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169333", "text": "_Imported from Lighthouse._\nComment by **Bryce Thornton** - 2009-08-09 19:38:30 UTC\n\nI've ran into this as well. Yes, it would be nice for the schema to retain the precision and scale for when we actually load it on a production database.\n", "created_at": "2011-05-16 03:24:48", "user": 789801, "id": 1169333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169334", "text": "_Imported from Lighthouse._\nComment by **Matt Kern** - 2009-08-09 19:51:48 UTC\n\nI think it's more than nice, it's required. The recommendation to load from schema rather than running thru the migrations on a production deploy or any new instance deploy makes this pretty high priority.\n", "created_at": "2011-05-16 03:24:48", "user": 789801, "id": 1169334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169335", "text": "_Imported from Lighthouse._\nComment by **Taryn East** - 2009-08-10 09:47:48 UTC\n\nMatt - yep - that's the ticket.\nThe patches I've submitted do this now.\n\nWe ran into the issue because during testing we used Sqlite - but production (of course) is on a real db... and loading the schema started causing all sorts of truncation errors in our money columns :P\n", "created_at": "2011-05-16 03:24:48", "user": 789801, "id": 1169335}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169336", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:30 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:24:49", "user": 789801, "id": 1169336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169337", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 21:02:17 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:24:49", "user": 789801, "id": 1169337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169339", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-10 12:04:57 UTC\n\nUsing the \"patch\" tag instead of prefixing the ticket title with \"[PATCH]\" to make sure patched tickets end up in the [open patches bin](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/bins/5805). :)\n", "created_at": "2011-05-16 03:24:49", "user": 789801, "id": 1169339}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169340", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:24:50", "user": 789801, "id": 1169340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169341", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-07 16:53:06 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:24:50", "user": 789801, "id": 1169341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169342", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:24:50", "user": 789801, "id": 1169342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169343", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:24:50", "user": 789801, "id": 1169343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169345", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:24:51", "user": 789801, "id": 1169345}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169346", "text": "Attachments saved to Gist: http://gist.github.com/971639\n", "created_at": "2011-05-16 03:24:51", "user": 789801, "id": 1169346}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2907\nCreated by **Szymon Nowak** - 2011-02-19 09:28:15 UTC\n\nWhile writing a patch for belongs_to association, I've encountered the following issue:\n\n``` ruby\nclass Author < AR::Base\n  has_many :posts\nend\nclass Post < AR::Base\n  belongs_to :author, :counter_cache => \"custom_posts_count\"\nend\n\na = Author.create\np = Post.create\n\np.author = a # updates counter on Author, but doesn't save post object\n\nAuthor.find(a.id).send(:read_attribute, \"custom_posts_count\" # 1; uses counter cache\nAuthor.find(a.id).posts.size # 0; uses SQL count\n```\n\nIn the second example SQL count is used because in HasManyAssociation#count_records method, there's check if there's cache counter:\n\n``` ruby\ndef has_cached_counter?\n  @owner.attribute_present?(cached_counter_attribute_name)\nend\ndef cached_counter_attribute_name\n  \"#{@reflection.name}_count\"\nend\n```\n\nwhich fails in this case. It simply uses name of the reflection, not the value of :counter_cache option on belongs_to association, or table name as described in [docs](http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M002125).\n\nNot sure if there's an easy solution for this if counter cache column name is defined on belongs_to association and not has_many.\n", "labels": [], "number": 626, "updated_at": "2012-07-20 10:06:53", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904248, "title": "Custom counter_cache is not used when using collection.size method", "url": "https://api.github.com/repos/rails/rails/issues/626", "created_at": "2011-05-16 03:24:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169347", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-09-11 22:04:37 UTC\n\n[milestone:id#50064 bulk edit command]\n", "created_at": "2011-05-16 03:24:57", "user": 789801, "id": 1169347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169348", "text": "_Imported from Lighthouse._\nComment by **Balint Erdi** - 2010-01-13 16:48:21 UTC\n\nI think this is not related with the counter_cache column having the default name or a custom one. I found two tests for this:\n\n``` ruby\n  def test_counter_cache\n    topic = Topic.create :title => \"Zoom-zoom-zoom\"\n    assert_equal 0, topic[:replies_count]\n\n    reply = Reply.create(:title => \"re: zoom\", :content => \"speedy quick!\")\n    reply.topic = topic\n\n    assert_equal 1, topic.reload[:replies_count]\n    assert_equal 1, topic.replies.size\n\n    topic[:replies_count] = 15\n    assert_equal 15, topic.replies.size\n  end\n\n  def test_custom_counter_cache\n    reply = Reply.create(:title => \"re: zoom\", :content => \"speedy quick!\")\n    assert_equal 0, reply[:replies_count]\n\n    silly = SillyReply.create(:title => \"gaga\", :content => \"boo-boo\")\n    silly.reply = reply\n\n    assert_equal 1, reply.reload[:replies_count]\n    assert_equal 1, reply.replies.size\n\n    reply[:replies_count] = 17\n    assert_equal 17, reply.replies.size\n  end\n\n```\n\nBoth of these pass, of course. Now if you comment out the line that reloads the \"has-many end\" of the association,\n\n``` ruby\n# assert_equal 1, topic.reload[:replies_count]\n```\n\nand\n\n``` ruby\n# assert_equal 1, reply.reload[:replies_count]\n```\n\nthen both of them fail.\n\nNow I guess that the tests serve as specifications, too, so that the collection size should only show the updated value through the counter_cache after a reload. If this is not the case, then probably both cases (tests) have to be redefined and fixed.\n", "created_at": "2011-05-16 03:24:58", "user": 789801, "id": 1169348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169349", "text": "_Imported from Lighthouse._\nComment by **Balint Erdi** - 2010-01-13 17:55:23 UTC\n\nHmm, but I did manage to recreate the original problem:\n\nWith :counter_cache => true :\n\n``` bash\n>> Author.find(a.id).send(:read_attribute, \"posts_count\")\n=> 1\n>> Author.find(a.id).posts.size\n=> 1\n```\n\nWith :counter_cache => \"custom_posts_count\":\n\n``` bash\n>> Author.find(a.id).send(:read_attribute, \"custom_posts_count\")\n=> 1\n>> Author.find(a.id).posts.size\n=> 0\n```\n\nBut failed to write a failing unit test at this point.\n", "created_at": "2011-05-16 03:24:58", "user": 789801, "id": 1169349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169350", "text": "_Imported from Lighthouse._\nComment by **Balint Erdi** - 2010-01-15 10:27:53 UTC\n\nAdded failing unit test.\n", "created_at": "2011-05-16 03:24:59", "user": 789801, "id": 1169350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169351", "text": "_Imported from Lighthouse._\nComment by **Balint Erdi** - 2010-01-15 12:54:31 UTC\n\nAnd here is the patch that fixes it.\n", "created_at": "2011-05-16 03:25:18", "user": 789801, "id": 1169351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169352", "text": "_Imported from Lighthouse._\nComment by **Fernando Guillen** - 2010-01-16 08:41:18 UTC\n\n+1 I trust completely on Balint.\n", "created_at": "2011-05-16 03:25:18", "user": 789801, "id": 1169352}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169353", "text": "_Imported from Lighthouse._\nComment by **Balint Erdi** - 2010-01-16 12:35:46 UTC\n\n@Fernando, I am really happy to hear that, but beyond trust, could you check out the 2-3-stable branch, apply my patch, and tell me if it works? Only if you have the time, of course. Thank you!\n", "created_at": "2011-05-16 03:25:19", "user": 789801, "id": 1169353}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169354", "text": "_Imported from Lighthouse._\nComment by **pablo (at teambox)** - 2010-01-25 10:40:51 UTC\n\n+1 for the patch\n", "created_at": "2011-05-16 03:25:19", "user": 789801, "id": 1169354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169355", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-05-16 01:41:10 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20088)]\n", "created_at": "2011-05-16 03:25:19", "user": 789801, "id": 1169355}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169356", "text": "_Imported from Lighthouse._\nComment by **Tanja Otto** - 2010-05-16 19:58:04 UTC\n\nadapted testcases of Balint Erdi because apply of his diff doesn't work in master. I‚Äôve attached a patch.\n", "created_at": "2011-05-16 03:25:20", "user": 789801, "id": 1169356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169357", "text": "_Imported from Lighthouse._\nComment by **Tanja Otto** - 2010-05-16 20:19:54 UTC\n\nadapted fix of Balint Erdi because apply of his diff doesn't work in master. I‚Äôve attached a patch.\n", "created_at": "2011-05-16 03:25:20", "user": 789801, "id": 1169357}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169358", "text": "_Imported from Lighthouse._\nComment by **Hussein Morsy** - 2010-05-17 07:38:59 UTC\n\n+1 verified. The testcase and the fix of Tanja works for the master (3.x)\n", "created_at": "2011-05-16 03:25:20", "user": 789801, "id": 1169358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169359", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-23 16:54:43 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20606)]\n", "created_at": "2011-05-16 03:25:20", "user": 789801, "id": 1169359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169360", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-24 08:40:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20631)]\n", "created_at": "2011-05-16 03:25:21", "user": 789801, "id": 1169360}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169362", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-25 22:45:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20816)]\n", "created_at": "2011-05-16 03:25:21", "user": 789801, "id": 1169362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169363", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 03:25:22", "user": 789801, "id": 1169363}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169364", "text": "Attachments saved to Gist: http://gist.github.com/971640\n", "created_at": "2011-05-16 03:25:22", "user": 789801, "id": 1169364}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7126713", "text": "This issue still exists in 3.2.6\n", "created_at": "2012-07-20 10:06:53", "user": 157270, "id": 7126713}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2946\nCreated by **Geoff Buesing** - 2011-01-29 13:33:21 UTC\n\nThis patch adds functionality to ActiveRecord::ConnectionAdapters::Quoting#quoted_date so that Time and time-like objects are converted to ActiveRecord::Base.default_timezone before being sent to the database.\n\nCurrently, if ActiveRecord::Base.default_timezone == :utc (the Rails default as of 2.1), and you use Time.now in find conditions, ex:\n\n``` ruby\nArticle.all :conditions => ['posted_at < ?', Time.now]\n```\n\n...you'll create a query for a posted_at time that will be off by however many hours your system time zone differs from UTC. Given that Rails does automatic time zone conversions when reading and assigning model attributes, you'd expect that it would handle time zone conversions for you in find conditions (I've seen many reports of people being confused by this.)\n\nTo further confuse things, this query _will_ work correctly with default_timezone == :utc:\n\n``` ruby\nArticle.all :conditions => ['posted_at < ?', 1.day.ago]\n```\n\n...but this one won't:\n\n``` ruby\nArticle.all :conditions => ['posted_at < ?', Time.now - 1.day]\n```\n\nThis patch will fix this behavior, so that any time-like object passed in to find conditions will be sent to the database in the appropriate zone.\n\nAnother benefit of this patch: it will allow ActiveRecord time_zone_aware_attributes to be used with default_timezone == :local, a combination that doesn't work correctly right now. Tests still needed to confirm this.\n", "labels": [], "number": 627, "updated_at": "2011-05-21 15:11:53", "user": 789801, "closed_at": "2011-05-21 15:11:52", "id": 904249, "title": "quoted_date converts time objects to default_timezone", "url": "https://api.github.com/repos/rails/rails/issues/627", "created_at": "2011-05-16 03:25:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169365", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-07-24 04:09:54 UTC\n\nThis seems reasonable to me,  it makes the query conversion match the input conversion right?\n\n{{{\n\n  n = Time.now\n  @foo.bar = n\n  @foo.save\n\n  assert_equal @foo, Foo.find_by_bar(n)\n\n}}}\n", "created_at": "2011-05-16 03:25:28", "user": 789801, "id": 1169365}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169366", "text": "_Imported from Lighthouse._\nComment by **Tekin** - 2009-07-24 13:04:21 UTC\n\nBig plus one from me as this recently bit me, the fixed behaviour makes much more sense.\n", "created_at": "2011-05-16 03:25:29", "user": 789801, "id": 1169366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169367", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2009-07-25 08:18:24 UTC\n\nYeah I've been bitten by that one as well. This is the behaviour I'd expect. +1.\n", "created_at": "2011-05-16 03:25:30", "user": 789801, "id": 1169367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169368", "text": "_Imported from Lighthouse._\nComment by **Tekin** - 2009-07-25 10:32:34 UTC\n\nAlternatively, I'll just wait until winter when the clocks go forward. ;)\n", "created_at": "2011-05-16 03:25:31", "user": 789801, "id": 1169368}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169369", "text": "_Imported from Lighthouse._\nComment by **Sam Oliver** - 2009-07-25 10:49:54 UTC\n\nI'm also fighting with this.\n\nAgree with Tekin, we should just wait for the clocks to go forward and all will be well again.\n", "created_at": "2011-05-16 03:25:32", "user": 789801, "id": 1169369}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169370", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-07-26 21:21:54 UTC\n\nSo no objections, I say go for it geoff.\n", "created_at": "2011-05-16 03:25:33", "user": 789801, "id": 1169370}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169371", "text": "_Imported from Lighthouse._\nComment by **Will Bryant** - 2009-07-27 11:43:26 UTC\n\n+1.  I discovered the other day that if I have config.time_zone = 'Wellington', I need to explicitly convert my times using #utc before using them in certain conditions, or else they would be incorrectly expressed in the SQL - inconsistent with what we do elsewhere.\n\nThis patch removes the need for me to, and it doesn't fail the test for where I'm using the workaround either, so it looks good to me.  Tested against 2.3.\n", "created_at": "2011-05-16 03:25:34", "user": 789801, "id": 1169371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169372", "text": "_Imported from Lighthouse._\nComment by **Geoff Buesing** - 2009-07-27 12:44:07 UTC\n\nGreat, thanks for the feedback, I'm going to write a few more tests around this, and then I'll pull it in.\n", "created_at": "2011-05-16 03:25:35", "user": 789801, "id": 1169372}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169373", "text": "_Imported from Lighthouse._\nComment by **Will Bryant** - 2009-07-27 13:23:01 UTC\n\nHmm, one thing that warrents note.  I tried this out in a second project and it did cause some spec failures.  The underlying problem is that String#to_time returns UTC by default -\n\n> > Time.parse('2007-02-20 23:59:59')\n> > => Tue Feb 20 23:59:59 +1300 2007\n> > '2007-02-20 23:59:59'.to_time\n> > => Tue Feb 20 23:59:59 UTC 2007\n> > '2007-02-20 23:59:59'.to_time(:local)\n> > => Tue Feb 20 23:59:59 +1300 2007\n\nThat's all fine.  However, if say you are running with no config.active_record.default_timezone - so the local db is in the local system time, as is the app - then if you ran #to_time on a string and used the result to initialize an attribute on a model, it would effectively be assumed to be already in the appropriate timezone, because the timezone conversion was not performed:\n\n> > r = MyModel.create!(:some_datetime => '2007-02-20 23:59:59')\n> > => #<MyModel id: 3, some_datetime: \"2007-02-20 23:59:59\">\n> > r.reload\n> > => #<MyModel id: 3, some_datetime: \"2007-02-20 23:59:59\">\n> > r = MyModel.create!(:some_datetime => '2007-02-20 23:59:59'.to_time)\n> > => #<MyModel id: 4, some_datetime: \"2007-02-20 23:59:59\">\n> > r.reload\n> > => #<MyModel id: 4, some_datetime: \"2007-02-20 23:59:59\">\n\nThis is wrong, but it seems pretty reasonable when you look at the above output.  What will happen with Geoff's patch applied looks like a bug:\n\n> > r = MyModel.create!(:some_datetime => '2007-02-20 23:59:59')\n> > => #<MyModel id: 1, some_datetime: \"2007-02-20 23:59:59\">\n> > r.reload\n> > => #<MyModel id: 1, some_datetime: \"2007-02-20 23:59:59\">\n> > r = MyModel.create!(:some_datetime => '2007-02-20 23:59:59'.to_time)\n> > => #<MyModel id: 2, some_datetime: \"2007-02-20 23:59:59\">\n> > r.reload\n> > => #<MyModel id: 2, some_datetime: \"2007-02-21 12:59:59\">\n\nIt's not though - it's now more consistent, but\n1. You might assume otherwise, since the AR inspect format shows datetimes without a timezone, making it look like the time has changed on reload (it hasn't, it's just reported in a different timezone).\n2. Anyone who's been misusing #to_time up till now will get regressions.\n\nTime.parse already returns results in the local timezone by default, so no issue there - so I'm ok with this, I think people should be using Time.parse instead of String#to_time normally anyway.\n\nBut just wanted to get something in this ticket to help people confused by this breakage - and clarify that this patch doesn't only affect queries, it can also affect attribute writes in the (rare) case where you're parsing strings yourself using #to_time or any other function that returns times in a different timezone to the database timezone (itself rare, since most of us run the database in UTC, making this change have no behavioural impact).\n", "created_at": "2011-05-16 03:25:36", "user": 789801, "id": 1169373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169374", "text": "_Imported from Lighthouse._\nComment by **Will Bryant** - 2009-07-27 13:25:40 UTC\n\nOnce again, with formatting:\n\nHmm, one thing that warrants note.  I tried this out in a second project and it did cause some spec failures.  The underlying problem is that String#to_time returns UTC by default -\n\n``` ruby\n>> Time.parse('2007-02-20 23:59:59')\n=> Tue Feb 20 23:59:59 +1300 2007\n>> '2007-02-20 23:59:59'.to_time\n=> Tue Feb 20 23:59:59 UTC 2007\n>> '2007-02-20 23:59:59'.to_time(:local)\n=> Tue Feb 20 23:59:59 +1300 2007\n```\n\nThat's all fine.  However, if say you are running with no config.active_record.default_timezone - so the local db is in the local system time, as is the app - then if you ran #to_time on a string and used the result to initialize an attribute on a model, it would effectively be assumed to be already in the appropriate timezone, because the timezone conversion was not performed:\n\n``` ruby\n>> r = MyModel.create!(:some_datetime => '2007-02-20 23:59:59')\n=> #<MyModel id: 3, some_datetime: \"2007-02-20 23:59:59\">\n>> r.reload\n=> #<MyModel id: 3, some_datetime: \"2007-02-20 23:59:59\">\n>> r = MyModel.create!(:some_datetime => '2007-02-20 23:59:59'.to_time)\n=> #<MyModel id: 4, some_datetime: \"2007-02-20 23:59:59\">\n>> r.reload\n=> #<MyModel id: 4, some_datetime: \"2007-02-20 23:59:59\">\n```\n\nThis is wrong, but it seems pretty reasonable when you look at the above output.  What will happen with Geoff's patch applied looks like a bug:\n\n``` ruby\n>> r = MyModel.create!(:some_datetime => '2007-02-20 23:59:59')\n=> #<MyModel id: 1, some_datetime: \"2007-02-20 23:59:59\">\n>> r.reload\n=> #<MyModel id: 1, some_datetime: \"2007-02-20 23:59:59\">\n>> r = MyModel.create!(:some_datetime => '2007-02-20 23:59:59'.to_time)\n=> #<MyModel id: 2, some_datetime: \"2007-02-20 23:59:59\">\n>> r.reload\n=> #<MyModel id: 2, some_datetime: \"2007-02-21 12:59:59\">\n```\n\nIt's not though - it's now more consistent, but\n1. You might assume otherwise, since the AR inspect format shows datetimes without a timezone, making it look like the time has changed on reload (it hasn't, it's just reported in a different timezone).\n2. Anyone who's been misusing #to_time up till now will get regressions.\n\nTime.parse already returns results in the local timezone by default, so no issue there - so I'm ok with this, I think people should be using Time.parse instead of String#to_time normally anyway.\n\nBut just wanted to get something in this ticket to help people confused by this breakage - and clarify that this patch doesn't only affect queries, it can also affect attribute writes in the (rare) case where you're parsing strings yourself using #to_time or any other function that returns times in a different timezone to the database timezone (itself rare, since most of us run the database in UTC, making this change have no behavioural impact).\n", "created_at": "2011-05-16 03:25:37", "user": 789801, "id": 1169374}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169375", "text": "_Imported from Lighthouse._\nComment by **Will Bryant** - 2009-07-27 13:26:43 UTC\n\nAlso, wanted to buy: accurate lighthouse list formatting instructions :|.\n", "created_at": "2011-05-16 03:25:38", "user": 789801, "id": 1169375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169376", "text": "_Imported from Lighthouse._\nComment by **Geoff Buesing** - 2009-07-28 04:10:55 UTC\n\n@Will -- thanks for the report. Indeed, this change has the potential to break apps that use Time.utc and Time.local objects interchangeably when building find conditions, or, if time_zone_aware_attributes are turned off, assigning to model attributes.\n\nTime#to_s(:db) doesn't do any zone conversion when it reports the time to the database, so you can currently get away with treating Time.utc and Time.local instances interchanegably:\n\n``` ruby\n>> Time.utc(2000).to_s(:db)\n=> \"2000-01-01 00:00:00\"\n>> Time.local(2000).to_s(:db)\n=> \"2000-01-01 00:00:00\"\n```\n\nWith this patch, Time.utc and Time.local report themselves in a zone appropriate manner (I'm adding in a #getutc call to illustrate coercion to default_timezone :utc):\n\n``` ruby\n>> Time.utc(2000).getutc.to_s(:db)\n=> \"2000-01-01 00:00:00\"\n>> Time.local(2000).getutc.to_s(:db)\n=> \"2000-01-01 06:00:00\"\n```\n\n...which is more appropriate behavior, given that these two objects represent different times. Apps that treat them as the same will get breakage -- best we can do is, document this well. I'm putting together a Rails guide on time handling; I'll make sure add info about this as a potential gotcha.\n", "created_at": "2011-05-16 03:25:39", "user": 789801, "id": 1169376}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169377", "text": "_Imported from Lighthouse._\nComment by **Will Bryant** - 2009-07-28 11:05:21 UTC\n\nYeah sounds good, thanks.\n\nSo, maybe this is a q for Koz - think this should land in 2.3 as well as 3.0?  I think the issue I mentioned is rare, so I wouldn't let that alone hold it back?\n", "created_at": "2011-05-16 03:25:40", "user": 789801, "id": 1169377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169378", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2009-07-28 20:01:30 UTC\n\nI'm not 100% sure that it justifies a backport to 2-3-stable, but\ncould probably be convinced.\n\nThe behaviour has been present from the beginning, and dates and\ntimezones are ... tricky enough... to mean people are aware of this as\nis?\n", "created_at": "2011-05-16 03:25:41", "user": 789801, "id": 1169378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169379", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-08-04 03:04:47 UTC\n\n(from [6f97ad07ded847f29159baf71050c63f04282170]) quoted_date converts time-like objects to ActiveRecord::Base.default_timezone before serialization. This allows you to use Time.now in find conditions and have it correctly be serialized as the current time in UTC when default_timezone == :utc [#2946 state:resolved]\nhttp://github.com/rails/rails/commit/6f97ad07ded847f29159baf71050c63f04282170\n", "created_at": "2011-05-16 03:25:42", "user": 789801, "id": 1169379}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169380", "text": "_Imported from Lighthouse._\nComment by **Will Bryant** - 2009-08-04 10:50:59 UTC\n\nYeah, we've fixed other timezone-handling bugs of similar magnitude in minor 2.x releases, so I'd vote for this to be applied to 2.3 too, personally.\n", "created_at": "2011-05-16 03:25:43", "user": 789801, "id": 1169380}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169381", "text": "_Imported from Lighthouse._\nComment by **r.s.seidler (at gmail)** - 2009-08-04 12:36:09 UTC\n\nHello!\n", "created_at": "2011-05-16 03:25:44", "user": 789801, "id": 1169381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169382", "text": "_Imported from Lighthouse._\nComment by **Raimonds Simanovskis** - 2009-08-07 14:15:22 UTC\n\nAlready commented in github on this commit:\n\nquoted_date will not change DateTime values local time zone if ActiveRecord::Base.default_timezone == :local\nbecause DateTime objects do not have getlocal method (just getutc method).\n\nEither this implementation should be changed or maybe ActiveSupport could add getlocal method to DateTime class (so that it would behave similar to Time class in this aspect).\n\nBecause of this issue test_saves_both_date_and_time in date_time_test.rb is not failing but should be failing (because DateTime UTC value is stored in database and then compared with local time zone Time value).\n", "created_at": "2011-05-16 03:25:45", "user": 789801, "id": 1169382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169383", "text": "_Imported from Lighthouse._\nComment by **Geoff Buesing** - 2009-08-11 03:33:31 UTC\n\n@Raimonds Simanovskis -- thanks for catching this. Indeed, that's unexpected behavior, given that all other combinations of default_timezone and Time-like objects will do a conversion.\n\nMakes sense to add a DateTime#getlocal method, so that conversion will occur.  test_saves_both_date_and_time should then be modified so that the now input value is in the proper local offset.\n", "created_at": "2011-05-16 03:25:45", "user": 789801, "id": 1169383}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169384", "text": "_Imported from Lighthouse._\nComment by **Raimonds Simanovskis** - 2009-08-11 08:03:53 UTC\n\nHere is patch that I created (otherwise my Oracle enhanced adapter was failing on JRuby):\n\nhttp://github.com/rsim/rails/commit/4ed223327c11b903904fd2bad8691c188a801d44\n", "created_at": "2011-05-16 03:25:46", "user": 789801, "id": 1169384}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169385", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-08-03 06:47:59 UTC\n\nAny updates here?\n", "created_at": "2011-05-16 03:25:47", "user": 789801, "id": 1169385}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169386", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:30 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:25:48", "user": 789801, "id": 1169386}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169388", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:34 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:25:49", "user": 789801, "id": 1169388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169389", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:25:49", "user": 789801, "id": 1169389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169390", "text": "_Imported from Lighthouse._\nComment by **Colin Kelley** - 2010-12-05 00:53:21 UTC\n\nHi Geoff,\n\nWe too have been burned by this problem so I was happy to see it addressed here.  We also patched our copy of Rails to fix it. Initially our patch matched yours, in the quoted_value method.  But we still found it very surprising that\n\n``` ruby\n  Time.now.to_s(:db)\n```\n\nreturned a string in system local time zone whereas\n\n``` ruby\n  Time.zone.now.to_s(:db)\n```\n\nreturned a string in UTC.  This was a problem because we have methods that were using to_s(:db) and counting on the conversion to UTC to happen.  Given Ruby's duck typing, the callers could pass either Time or TimeWithZone and it would appear to work but yield wrong results.\n\nSo we decided to fix this problem at its root:  we patched active_support/core_ext/time/conversions.rb.  Currently in Rails 3.0.3 that reads like:\n\n``` ruby\n  def to_formatted_s(format = :default)\n    if formatter = DATE_FORMATS[format]\n      formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)\n    else\n      to_default_s\n    end\n  end\n```\n\nHere it is patched:\n\n``` ruby\n  def to_formatted_s(format = :default)\n    if formatter = DATE_FORMATS[format]\n      instance =\n        if format == :db\n          ActiveRecord::Base.default_timezone == :utc ? dup.utc : dup.localtime # avoid changing self by calling utc or localtime\n        else\n          self\n        end\n      formatter.respond_to?(:call) ? formatter.call(instance).to_s : instance.strftime(formatter)\n    else\n      to_default_s\n    end\n  end\n```\n\nI believe ActiveSupport shouldn't be coupled to ActiveRecord like this, so one last step would be to move that default_time_zone down to ActiveSupport with a pass-through accessor at the ActiveRecord level.\n\nWhat do you think of this approach?  If it looks good I could submit a patch with tests.\n", "created_at": "2011-05-16 03:25:51", "user": 789801, "id": 1169390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169391", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:25:52", "user": 789801, "id": 1169391}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169392", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:25:53", "user": 789801, "id": 1169392}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169393", "text": "_Imported from Lighthouse._\nComment by **Will Bryant** - 2011-04-12 10:51:43 UTC\n\nColin, I agree that passing the timezone setting down from activerecord to activesupport would be a much better approach (if #to_s needs to know about this at all).\n\nActivesupport could/should ship without a :db format at all, and activerecord should add this format using the proc support already present, doing the necessary timezone conversion in the proc before calling the normal strftime.\n\nStill not entirely convinced we need to do all this, since quoted_date and friends are actually used for any query stuff now, but at least it'd unbreak Rails 2 upgraders who have non-UTC databases.\n", "created_at": "2011-05-16 03:25:54", "user": 789801, "id": 1169393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169394", "text": "_Imported from Lighthouse._\nComment by **Colin Kelley** - 2011-04-12 17:47:49 UTC\n\nWill,\n\n> Activesupport could/should ship without a :db format at all, and activerecord should add this format using the proc support already present, doing the necessary timezone conversion in the proc before calling the normal strftime.\n\nI agree that shipping ActiveSupport without a :db format and then overriding it at the ActiveRecord level would work too.\n\nThe tie-breaker would probably be whether anyone who just uses ActiveSupport finds the :db format useful, or whether very many are using it already.  Both seem like decent possibilities to me.\n\n> Still not entirely convinced we need to do all this, since quoted_date and friends are actually used for any query stuff now, but at least it'd unbreak Rails 2 upgraders who have non-UTC databases.\n\nI think it's important to do _something_ because the current behavior violates the Principle of Least Surprise.  (I believe this principle is critical with duck typing since there is an implicit assumption in duck typing that methods with identical names accept the same parameters with the same calling contracts.  I guess overloading to_s() to take a parameter was already on this ice in this regard.)\n\nImagine a method write_to_file() that takes a timestamp parameter that it writes to the file in :db format.  It's really easy for calling code to be changed from this:\n\n``` ruby\nwrite_to_file(Time.now)\n```\n\nto this:\n\n``` ruby\nwrite_to_file(1.second.ago) # timestamp should always be in the past\n```\n\nHow many would realize they just changed the parameter type from a Time to a TimeWithZone?\n\nCurrently making the change above causes time zone to shift unexpectedly, which you can't directly tell since the time zone is not included in the :db format.  You can waste a lot of time debugging this.  I know this from experience.  More than once in fact. :)\n", "created_at": "2011-05-16 03:25:55", "user": 789801, "id": 1169394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169395", "text": "_Imported from Lighthouse._\nComment by **Espen Antonsen** - 2011-04-20 08:39:45 UTC\n\nI have been using this patch for so long I forgot I had it. Tried without it today and see that this is still not fixed in Rails 3.0.7. Is there a reason why this has not been implemented?\n\n`````` ruby\nActiveRecord::ConnectionAdapters::PostgreSQLAdapter.module_eval do\n  def quoted_date(value)\n    if value.acts_like?(:time) && value.respond_to?(:usec)\n      begin\n        \"#{value.getutc.to_s(:db)}.#{sprintf(\"%06d\", value.usec)} #{value.formatted_offset}\"\n      rescue\n        \"#{super}.#{sprintf(\"%06d\", value.usec)}\"\n      end\n    else\n      super\n    end\n  end\nend\n```@\n``````\n", "created_at": "2011-05-16 03:25:56", "user": 789801, "id": 1169395}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169396", "text": "_Imported from Lighthouse._\nComment by **Espen Antonsen** - 2011-04-20 09:30:48 UTC\n\nPerson.where(:created_at => Time.zone.now).to_sql\n => \"SELECT \\\"people\\\".\\* FROM \\\"people\\\" WHERE \\\"people\\\".\\\"created_at\\\" = '2011-04-20 16:44:52.349977'\" \nTime.zone.now\n => Wed, 20 Apr 2011 10:44:57 CEST +02:00 \nexit # apply override patch\nLoading development environment (Rails 3.0.7)\nPerson.where(:created_at => Time.zone.now).to_sql\n => \"SELECT \\\"people\\\".\\* FROM \\\"people\\\" WHERE \\\"people\\\".\\\"created_at\\\" = '2011-04-20 08:45:16.063987 +02:00'\"\n", "created_at": "2011-05-16 03:25:57", "user": 789801, "id": 1169396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169397", "text": "_Imported from Lighthouse._\nComment by **Espen Antonsen** - 2011-04-20 10:27:45 UTC\n\nSame bug? https://rails.lighthouseapp.com/projects/8994/tickets/1562-postgresql_adapter-include-time-zone-in-result-of-quoted_date\n", "created_at": "2011-05-16 03:25:58", "user": 789801, "id": 1169397}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169398", "text": "Attachments saved to Gist: http://gist.github.com/971641\n", "created_at": "2011-05-16 03:25:58", "user": 789801, "id": 1169398}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/2986\nCreated by **Luke Melia** - 2011-02-17 08:07:23 UTC\n\nIf I have a class Project and a subclass SpecialProject, but only map.resources :projects defined in routes, it seems natural that polymorphic_url(@special_projects) would return http://example.com/projects/#{@special_project.id}\n\nCurrently, however, it fails looking for the method special_projects_path.\n\nThe attached patch (against master) implements a partial solution to this problem. When the named route determined by the normal heuristics is missing, the code walks up the inheritance chain checking if there a suitable route exists. The patch includes thorough test coverage.\n\nLimitations of the patch in it's current state:\n\n1) It handles the inheritance walking for only the last segment of a nested route. Handling more than that opens up more complexity, and while I think it's the right way to go, I thought I would start this conversation modestly.\n2) It does not cache the results of the inheritance walking, which could be a opportunity for better performance here.\n3) I have not used it in production. It started as a proof of concept and was freshened up in response to some conversation between wycats and brynary.\n", "labels": [], "number": 628, "updated_at": "2013-08-16 18:10:54", "user": 789801, "closed_at": "2011-05-21 15:11:53", "id": 904254, "title": "polymorphic_url should handle STI better", "url": "https://api.github.com/repos/rails/rails/issues/628", "created_at": "2011-05-16 03:26:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169399", "text": "_Imported from Lighthouse._\nComment by **Yehuda Katz (wycats)** - 2009-08-03 06:07:33 UTC\n\nI like this a lot.\n\nI'd like to see (1) and (2) handled. Caching will make this fast, and therefore viable. Handling only the last segment would probably produce confusion when other parts don't work. I'd also be interested to see if you could make this work against Josh's rack-mount, which will probably form the basis for the Rails 3 router.\n\nI'm attaching this patch to the 2.x milestone since we'll need a different patch against 3.0 once Josh's router is in place.\n", "created_at": "2011-05-16 03:26:05", "user": 789801, "id": 1169399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169400", "text": "_Imported from Lighthouse._\nComment by **Luke Melia** - 2009-08-03 06:31:31 UTC\n\nI'll take a look at implementing on top of rack-mount. Handling (1) on 2.x will require major surgery the routing engine that seems dubious given a different approach for 3.x.\n", "created_at": "2011-05-16 03:26:05", "user": 789801, "id": 1169400}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169401", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-04 17:48:54 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/19097)]\n", "created_at": "2011-05-16 03:26:05", "user": 789801, "id": 1169401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169402", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-09 02:30:32 UTC\n\nMarking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.\n", "created_at": "2011-05-16 03:26:06", "user": 789801, "id": 1169402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169403", "text": "_Imported from Lighthouse._\nComment by **Sven Fuchs** - 2010-10-13 18:54:23 UTC\n\nI'm interested in this, too. I don't think it's stale, at least the issue/limitation does not seem resolved.\n\nUnfortunately the patch is missing on S3. Luke, any updates on this? Could you post the patch again? I realize this is over 1 year old ... :/\n", "created_at": "2011-05-16 03:26:06", "user": 789801, "id": 1169403}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169404", "text": "_Imported from Lighthouse._\nComment by **Luke Melia** - 2010-10-13 18:58:19 UTC\n\nI never got anywhere on the Rails 3 compatible approach due to lack of time. We're upgrading our app to Rails 3 soonish, so hopefully I can dig in and take a crack at this then.\n", "created_at": "2011-05-16 03:26:06", "user": 789801, "id": 1169404}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169405", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:31:11 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:26:07", "user": 789801, "id": 1169405}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169406", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:54:26 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:26:07", "user": 789801, "id": 1169406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169407", "text": "_Imported from Lighthouse._\nComment by **Sven Fuchs** - 2010-11-21 16:52:45 UTC\n\nSo, here's a commit that implements this behavior: https://github.com/svenfuchs/rails/commit/2d298f2a140cdc8388bf09ce517dd73b698c7a4e\n\nGiven an array of records it will first build an array of permutations of these record's classes and superclasses (excluding ActiveRecord::Base). Then it will build a named route url generation helper from the first permutation, check if the view responds to it and if so, return the method name. If not, it will try the next permutation and so on.\n\nThe first matching permutation will be cached with a cache key that is cheaper to calculate than the whole named route helper method name. I'd expect that this implementation of `build_named_route_call` therefor is also slightly faster than the current one which doesn't use any caching.\n\nSay we have:\n\n```\nclass Site < ActiveRecord::Base; end\nclass Section < ActiveRecord::Base; end\nclass Blog < Section; end\nclass Content < ActiveRecord::Base; end\nclass Post < Content; end\n```\n\nThen passing `[site, blog, post]` will try the following permutations:\n\n```\nsite_blog_post_url\nsite_blog_content_url\nsite_section_post_url\nsite_section_content_url\n```\n\nWe're already using something like this, so this code has been extracted from a working code base.\n\nCaching needs to be improved though. Currently we're just populating a mattr_accessor Hash on the NamedRouteCall class. This cache never gets invalidated but probably should be invalidated in development mode. I'm not sure what the best way is to accomplish this. Maybe named route helper methods should be cached on the actual route set which will be thrown away and rebuilt?\n\nAlso, the patch above applies to current 3-0-stable. I'm unclear about which branch to base this on.\n", "created_at": "2011-05-16 03:26:07", "user": 789801, "id": 1169407}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169408", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-12-22 08:12:47 UTC\n\nRails' inability to automatically route my link_to and form_for in STI subclasses to the superclass is a constant source of frustration to me. +1 for fixing this bug.\n", "created_at": "2011-05-16 03:26:09", "user": 789801, "id": 1169408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5890683", "text": "Why was this issue closed? It doesn't appear to have been fixed...\n", "created_at": "2012-05-24 04:44:26", "user": 98913, "id": 5890683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22783566", "text": "Would be super nice to have this instead of having to litter my code with X.becomes(Y)\n", "created_at": "2013-08-16 18:10:54", "user": 788828, "id": 22783566}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3034\nCreated by **tim_linquist** - 2011-02-16 07:20:06 UTC\n\nI am using Rails 2.1 & Ruby 1.8.7.  I have an issue where querying an association proxy or the parent class of that association does not include the types of the child classes in the query.  The cause appears to be that Rails internal loading engine does not properly load child models of models using Single Table Inheritance.\n\nI resolved this temporarily by explicitly loading all of the classes in the env.rb file.  So now when I call app.breadcrumbs it generates a select statement with a where clause: \"WHERE type='Breadcrumb' OR type='Mark' OR type='Measure'\".\n\nI would be happy to dig through the Rails internals and provide a patch if someone can at least point me where to dig.  I also looked for similar bugs but found none.  \n\nIf this bug has already been resolved I apologize for the erroneous ticket.\n\nI have attached a sample file that demonstrates my structure.\n", "labels": [], "number": 629, "updated_at": "2011-05-16 03:31:27", "user": 789801, "closed_at": "2011-05-16 03:31:27", "id": 904256, "title": "Rails Single Table Inheritance loading child classes ", "url": "https://api.github.com/repos/rails/rails/issues/629", "created_at": "2011-05-16 03:26:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169409", "text": "_Imported from Lighthouse._\nComment by **Peer Allan** - 2009-08-11 12:55:45 UTC\n\nThis may be related to ticket #2389\n", "created_at": "2011-05-16 03:26:15", "user": 789801, "id": 1169409}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169675", "text": "We can't solve this.\n", "created_at": "2011-05-16 03:31:27", "user": 9582, "id": 1169675}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3132\nCreated by **Sam Ruby** - 2009-09-02 01:53:18 UTC\n\ngenerate any sort of controller, and attempt to run \"rack test\" immediately afterwards, and the test fails.  Standalone test script and patch attached.\n\nProblem was introduced with commit a79790e1a5733694baef3d03d8d79b76948a9d69\n\nSymptoms are as follows:\n\n```\nactionpack/lib/action_controller/testing/process.rb:87: no such file to load -- rack/test (MissingSourceFile)\n```\n", "labels": [], "number": 630, "updated_at": "2011-05-16 03:32:43", "user": 789801, "closed_at": "2011-05-16 03:32:43", "id": 904257, "title": "simple \"rack test\" fails", "url": "https://api.github.com/repos/rails/rails/issues/630", "created_at": "2011-05-16 03:26:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169410", "text": "_Imported from Lighthouse._\nComment by **Sam Ruby** - 2009-09-02 01:55:48 UTC\n\nI don't know if this is ideal, but it solves the issue and seems consistent with the approach taken in commits ad49895fe82da5fcad2f401c1238c274e944c062 and c5f6e038daf2221ddd5a7534e68f4158d84a5975\n", "created_at": "2011-05-16 03:26:20", "user": 789801, "id": 1169410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169411", "text": "_Imported from Lighthouse._\nComment by **Joshua Peek** - 2009-09-02 02:40:59 UTC\n\nThis should actually be handled by the initializer. The initializer is in charge of what package manager is used, by default it is rubygems.\n\nHand off to Yehuda and Carl who are working on that atm.\n", "created_at": "2011-05-16 03:26:21", "user": 789801, "id": 1169411}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169412", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-09-02 02:51:02 UTC\n\nPatched at http://github.com/rails/rails/commit/847907d7531331e4b8bc1b8bd80352f87b45ad3a but needs a real fix\n", "created_at": "2011-05-16 03:26:21", "user": 789801, "id": 1169412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169413", "text": "_Imported from Lighthouse._\nComment by **Yehuda Katz (wycats)** - 2009-09-02 02:52:06 UTC\n\nJosh is correct, but I pulled this patch to keep things going in the interim.\n", "created_at": "2011-05-16 03:26:21", "user": 789801, "id": 1169413}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169414", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-07-01 09:37:35 UTC\n\nAny updates to this ticket? Was the issue resolved properly?\n", "created_at": "2011-05-16 03:26:22", "user": 789801, "id": 1169414}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169415", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:31 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:26:22", "user": 789801, "id": 1169415}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169416", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:35 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:26:22", "user": 789801, "id": 1169416}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169417", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:26:23", "user": 789801, "id": 1169417}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169418", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:26:23", "user": 789801, "id": 1169418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169419", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:26:23", "user": 789801, "id": 1169419}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3134\nCreated by **Aaron Gibralter** - 2011-02-17 06:48:21 UTC\n\nMaybe it's just late at night, and I'm going crazy... but it seems to me that MemCacheStore allows for the client to decide what session_id it wants to use. All the a user has to do is edit his session_id cookie to be whatever he wants it to be and Rails will use it. Is this even a problem to worry about?\n\nWould it make sense to HMAC the session_id with some sort of server-side secret? session_options[:secret] isn't even being used for MemCacheStore. \n\nI saw ticket #571... didn't seem to answer the question though.\n", "labels": [], "number": 631, "updated_at": "2011-05-16 03:33:54", "user": 789801, "closed_at": "2011-05-16 03:33:54", "id": 904258, "title": "MemCacheStore allows for arbitrary client generated session_ids?", "url": "https://api.github.com/repos/rails/rails/issues/631", "created_at": "2011-05-16 03:26:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169420", "text": "_Imported from Lighthouse._\nComment by **Kevin Menard** - 2010-07-13 12:53:37 UTC\n\nI think it's definitely something to worry about.  We had legitimate issues as a result of this behavior.  But, since the core team stance (per #571) seems to be that it's not a problem, we just patched it locally.  I guess if you think it's unlikely that a user could ever guess another's session ID or that two users modifying their session IDs would ever pick the same one, then it's probably not an issue.  But, we saw otherwise.\n", "created_at": "2011-05-16 03:26:29", "user": 789801, "id": 1169420}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169421", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2010-07-13 16:23:55 UTC\n\nWould you mind posting your patch?\n", "created_at": "2011-05-16 03:26:29", "user": 789801, "id": 1169421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169422", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:36:16 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:26:30", "user": 789801, "id": 1169422}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169423", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2011-02-14 14:53:19 UTC\n\nDoes anyone else think it makes sense for Rails to HMAC the session_ids it creates with a timestamp and a secret? This way people would not be able to brute force their way into hijacking sessions...\n", "created_at": "2011-05-16 03:26:30", "user": 789801, "id": 1169423}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169424", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2011-02-14 14:54:38 UTC\n\noops forgot: [state:open]\n", "created_at": "2011-05-16 03:26:30", "user": 789801, "id": 1169424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169810", "text": "HMAC won't reduce the probability of someone hijacking it.\n", "created_at": "2011-05-16 03:33:53", "user": 9582, "id": 1169810}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3149\nCreated by **jeffp** - 2010-11-17 01:58:29 UTC\n\nLocation: actionpack-2.3.4/lib/action_view/helpers/active_record_helpers.rb\n\nLine with error \ncontents = form_tag({:action => action}, :method =>(options[:method] || 'post'), :encrypt => ...\n\nFix\ncontents = form_tag(action, :method=>(options[:method] || 'post'), :encrypt => ...\n\nDescription\nThe 'action' variable has already been cast as a URL with url_for a few lines before this.  It is not proper to use it as a value for :action in a hash when sending it to form_tag.\n", "labels": [], "number": 632, "updated_at": "2011-05-16 03:36:58", "user": 789801, "closed_at": "2011-05-16 03:36:58", "id": 904259, "title": "Active Record Helper form(record_name, options={}) fails (but simple fix)", "url": "https://api.github.com/repos/rails/rails/issues/632", "created_at": "2011-05-16 03:26:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169425", "text": "_Imported from Lighthouse._\nComment by **Daniel Hofstetter** - 2009-09-27 08:57:03 UTC\n\nI've attached a patch for this issue. active_record_helper.rb.diff is for 2-3-stable, and active_model_helper.rb.diff is for master.\n", "created_at": "2011-05-16 03:26:36", "user": 789801, "id": 1169425}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169426", "text": "_Imported from Lighthouse._\nComment by **hsume2 (Henry)** - 2009-09-27 09:28:45 UTC\n\n+1, verified in master and 2-3-stable. (master patch applies cleanly to both)\n", "created_at": "2011-05-16 03:26:36", "user": 789801, "id": 1169426}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169427", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-05-15 17:45:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20085)]\n", "created_at": "2011-05-16 03:26:37", "user": 789801, "id": 1169427}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169428", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:31 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:26:37", "user": 789801, "id": 1169428}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169429", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:35 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:26:37", "user": 789801, "id": 1169429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169430", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:26:38", "user": 789801, "id": 1169430}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169431", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-02-08 02:56:19 UTC\n\nit looks like the patches were lost for some reason (I can't access them)\n", "created_at": "2011-05-16 03:26:38", "user": 789801, "id": 1169431}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169432", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:26:38", "user": 789801, "id": 1169432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169433", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:37 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:26:38", "user": 789801, "id": 1169433}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3165\nCreated by **≈Åukasz Bandzarewicz** - 2009-09-08 14:23:02 UTC\n\nAfter update Rails to 2.3.4 version I get following exception:\n\n```\n  1) Error:\ntest_tagging(BacklogItemTest):\nActiveRecord::MissingAttributeError: missing attribute: domain_id\n    app/models/mixins/domain_checks.rb:54:in `ensure_same_domain'\n    app/models/mixins/domain_checks.rb:35:in `after_find'\n    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `send'\n    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `callback'\n    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `send'\n    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `instantiate'\n    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'\n    vendor/rails/activerecord/lib/active_record/base.rb:661:in `collect!'\n    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'\n    vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'\n    vendor/rails/activerecord/lib/active_record/base.rb:1505:in `find_initial'\n    vendor/rails/activerecord/lib/active_record/base.rb:692:in `exists?'\n    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'\n    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing'\n    vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'\n    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'\n    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'\n    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing'\n    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:336:in `include?'\n    test/unit/backlog_item_test.rb:159:in `test_tagging'\n    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'\n    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run\n```\n\nError occurs when in test I'm doing something like that:\n\n```\nitem.tags.include? tags(:banana)\n```\n\n..it generates following sql query:\n\n```\nTag Load (0.2ms)   SELECT `tags`.id FROM `tags` INNER JOIN `backlog_item_tags` ON `tags`.id = `backlog_item_tags`.tag_id WHERE (`tags`.`id` = 59467727) AND ((`backlog_item_tags`.backlog_item_id = 1737950289)) ORDER BY name ASC LIMIT 1\n```\n", "labels": [], "number": 633, "updated_at": "2011-05-21 15:11:53", "user": 789801, "closed_at": "2011-05-21 15:11:53", "id": 904262, "title": "ActiveRecord::MissingAttributeError after update to rails v 2.3.4", "url": "https://api.github.com/repos/rails/rails/issues/633", "created_at": "2011-05-16 03:26:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169434", "text": "_Imported from Lighthouse._\nComment by **Adam Byrtek** - 2009-09-09 08:37:08 UTC\n\nThe SQL query is fine, id is enough to do include?. The problem is that models are instantiated having only id, without other properties and after_find assumes fully instantiated models.\n", "created_at": "2011-05-16 03:26:44", "user": 789801, "id": 1169434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169435", "text": "_Imported from Lighthouse._\nComment by **Adam Byrtek** - 2009-09-09 09:06:52 UTC\n\nTrivial patch attached, do \"SELECT *\" instead of \"SELECT id\". This is done only on a single row (LIMIT 1) so there is no need for micro-optimization.\n", "created_at": "2011-05-16 03:26:45", "user": 789801, "id": 1169435}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169436", "text": "_Imported from Lighthouse._\nComment by **Jorge Dias** - 2009-09-10 11:15:49 UTC\n\nI was having the same error, applied the patch and now it works\n", "created_at": "2011-05-16 03:26:45", "user": 789801, "id": 1169436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169437", "text": "_Imported from Lighthouse._\nComment by **Marek Kowalski** - 2009-09-17 15:34:15 UTC\n\nI spend some time debugging this issue and the problem is with the ActiveRecord::Base.exists? method. In Rails 2.3.2 it looked like this:\n\n```\n     def exists?(id_or_conditions = {})\n        connection.select_all(\n          construct_finder_sql(\n            :select     => \"#{quoted_table_name}.#{primary_key}\",\n            :conditions => expand_id_conditions(id_or_conditions),\n            :limit      => 1\n          ),\n          \"#{name} Exists\"\n        ).size > 0\n      end\n```\n\nMethod above doesn't instantiate the record nor does it call the after_find filter chain.\n\nIn Rails 2.3.4 exists? method calls find_initial with :select => \"#{table}.#{primary_key}\". This causes record to be instantiated and after_find filter called. However the only attribute loaded is 'id', so calling any other method inside the filter will cause the ArgumentError. \n\nIMO after_find filter should be called but with all the columns loaded\n", "created_at": "2011-05-16 03:26:45", "user": 789801, "id": 1169437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169438", "text": "_Imported from Lighthouse._\nComment by **Tim Connor** - 2009-09-26 19:16:19 UTC\n\nThis also pops up if you try to access any attributes in an after_initialize, which almost makes it seem like a regression from about 2007, or so.  Not sure that the patch will fix that part of the bug.\n", "created_at": "2011-05-16 03:26:45", "user": 789801, "id": 1169438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169439", "text": "_Imported from Lighthouse._\nComment by **kbrock** - 2009-10-02 08:08:18 UTC\n\nThis patch should fix after_initialize\n\nBut I still like the previous way of testing exists.\n\nIt did not pull back fields, it did not instantiate an object. It just pulled back the id.\n\nI'd go back to the previous code. And better yet, Id tweak the select clause to optimize even more (do :select => 1)\nThat way it could possibly only use the index and not even touch the data page depending upon the exists clause.\n\nsuggestion:\n\n``` ruby\n      def exists?(id_or_conditions = {})\n        connection.select_all(\n          construct_finder_sql(\n            :select     => 1,\n            :conditions => expand_id_conditions(id_or_conditions),\n            :limit      => 1\n          ),\n          \"#{name} Exists\"\n        ).size > 0\n      end\n```\n\nThanks for writing this up\n", "created_at": "2011-05-16 03:26:46", "user": 789801, "id": 1169439}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169440", "text": "_Imported from Lighthouse._\nComment by **Adam Byrtek** - 2009-10-02 18:32:23 UTC\n\nOne way or another it would be nice to have this resolved by a Rails commiter.\n", "created_at": "2011-05-16 03:26:46", "user": 789801, "id": 1169440}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169441", "text": "_Imported from Lighthouse._\nComment by **Kieran P** - 2009-10-08 00:38:02 UTC\n\n+1 This problem has caused some issues in our application. The fixes above don't help though.\n\n```1) Error:\ntest: The topic related image slideshow when several images are related to a topic, the slideshow should be populated in the session on selected image visit. (TopicsControllerTest):\nActiveRecord::MissingAttributeError: missing attribute: basket_id\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:309:in`send'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:309:in `preload_belongs_to_association'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:308:in`each'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:308:in `preload_belongs_to_association'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:120:in`send'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:120:in `preload_one_association'\n    vendor/rails/activesupport/lib/active_support/ordered_hash.rb:97:in`each'\n    vendor/rails/activesupport/lib/active_support/ordered_hash.rb:97:in `each'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:114:in`preload_one_association'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:91:in `preload_associations'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:90:in`preload_associations'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:90:in `each'\n    vendor/rails/activerecord/lib/active_record/association_preload.rb:90:in`preload_associations'\n    vendor/rails/activerecord/lib/active_record/base.rb:1549:in `find_every'\n    vendor/rails/activerecord/lib/active_record/base.rb:615:in`find'\n    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:60:in `find'\n    lib/image_slideshow.rb:194:in`find_related_images'\n    lib/image_slideshow.rb:139:in `populate_slideshow'\n    lib/image_slideshow.rb:119:in`prepare_slideshow'\n    vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'\n    vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in`evaluate_method'\n    vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'\n    vendor/rails/actionpack/lib/action_controller/filters.rb:225:in`call'\n    vendor/rails/actionpack/lib/action_controller/filters.rb:629:in `run_before_filters'\n    vendor/rails/actionpack/lib/action_controller/filters.rb:615:in`call_filters'\n    vendor/rails/actionpack/lib/action_controller/filters.rb:610:in `perform_action_without_benchmark'\n    vendor/rails/actionpack/lib/action_controller/benchmarking.rb:68:in`perform_action_without_rescue'\n    vendor/rails/activesupport/lib/active_support/core_ext/benchmark.rb:17:in `ms'\n    /opt/ruby-enterprise-1.8.7-20090928/lib/ruby/1.8/benchmark.rb:308:in`realtime'\n    vendor/rails/activesupport/lib/active_support/core_ext/benchmark.rb:17:in `ms'\n    vendor/rails/actionpack/lib/action_controller/benchmarking.rb:68:in`perform_action_without_rescue'\n    vendor/rails/actionpack/lib/action_controller/rescue.rb:160:in `perform_action_without_flash'\n    vendor/rails/actionpack/lib/action_controller/flash.rb:146:in`perform_action'\n    vendor/rails/actionpack/lib/action_controller/base.rb:532:in `send'\n    vendor/rails/actionpack/lib/action_controller/base.rb:532:in`process_without_filters'\n    vendor/rails/actionpack/lib/action_controller/filters.rb:606:in `process'\n    vendor/rails/actionpack/lib/action_controller/test_process.rb:567:in`process_with_test'\n    vendor/rails/actionpack/lib/action_controller/test_process.rb:447:in `process'\n    vendor/rails/actionpack/lib/action_controller/test_process.rb:398:in`get'\n    lib/image_slideshow_test_helper.rb:22:in `__bind_1254962019_963356'\n    /opt/ruby-enterprise-1.8.7-20090928/lib/ruby/gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in`call'\n    /opt/ruby-enterprise-1.8.7-20090928/lib/ruby/gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `test: The topic related image slideshow when several images are related to a topic, the slideshow should be populated in the session on selected image visit. '\n    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in`**send**'\n    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run'\n\n```\n```\n", "created_at": "2011-05-16 03:26:47", "user": 789801, "id": 1169441}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169442", "text": "_Imported from Lighthouse._\nComment by **Tim Connor** - 2009-10-19 20:34:05 UTC\n\nI wonder what we have to do to get this in the queue for 2.3.5?\n", "created_at": "2011-05-16 03:26:47", "user": 789801, "id": 1169442}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169443", "text": "_Imported from Lighthouse._\nComment by **Randy Souza** - 2009-10-21 12:58:18 UTC\n\n+1 -- bitten by this same problem.\n", "created_at": "2011-05-16 03:26:47", "user": 789801, "id": 1169443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169444", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2009-10-21 21:37:46 UTC\n\nThis is being caused by the fix introduced in #2543, which switched to using find_initial to properly account for scoping applied to the association. Assigning to Koz, as he handled the original ticket.\n", "created_at": "2011-05-16 03:26:48", "user": 789801, "id": 1169444}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169445", "text": "_Imported from Lighthouse._\nComment by **Caius** - 2009-10-22 14:08:00 UTC\n\n> This also pops up if you try to access any attributes in an after_initialize\n\n+1 - I'm running into this trying to set default values in after_initialise.\n", "created_at": "2011-05-16 03:26:48", "user": 789801, "id": 1169445}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169446", "text": "_Imported from Lighthouse._\nComment by **Rob Olson** - 2009-10-24 08:16:21 UTC\n\nThe issue is that find_by_sql is\n\nThis bug bit me as well. Instead of changing the select query from 'id' to '*', I believe the correct fix is to not instantiate the ActiveRecord object for calls to `#exists?`. In the ticket that created this bug, [#2543](https://rails.lighthouseapp.com/projects/8994/tickets/2543), Peter Marklund proposed adding a `:instantiate = false` option to find_every that would tell find_by_sql to not instantiate the records.\n\nI have attached a patch with a test which demonstrates this bug by attempting to access a database attribute in an after_initialize. As a solution, I've implemented Peter Marklund's idea for a skip instantiation option. In addition to resolving this issue, this patch is beneficial because it improves the performance of calls to `#exists?`. As Koz stated in the previous ticket, this saves AR from firing the relevant callbacks for the model.\n\nAny feedback is welcome.\n", "created_at": "2011-05-16 03:26:48", "user": 789801, "id": 1169446}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169447", "text": "_Imported from Lighthouse._\nComment by **Marek Kowalski** - 2009-10-24 11:40:32 UTC\n\n-1. In my opinion #exists? should instantiate the object. At least I would expect the after_find filter to be fired.\n", "created_at": "2011-05-16 03:26:49", "user": 789801, "id": 1169447}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169448", "text": "_Imported from Lighthouse._\nComment by **Rob Olson** - 2009-10-25 04:18:49 UTC\n\nMarek,\n\nWhy would you expect the after_find filter to be fired for exists? As you mentioned earlier, that was not the behavior in Rails 2.3.2.\n\nI think of #exists? as the equivalent of executing a SQL count (even though it is not for performance reasons) and intuitively would not expect it to call after_find.\n", "created_at": "2011-05-16 03:26:49", "user": 789801, "id": 1169448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169449", "text": "_Imported from Lighthouse._\nComment by **Marek Kowalski** - 2009-10-25 09:54:04 UTC\n\nRob,\n\nIn fact in Rails 2.3.2 the after_find filter was not fired but I found out about it just when I was debugging the issue with missing attributes. Why I think it should be fired? Well, we should consider for what purpose  people use the after_find filter. In the application I work on we use it as the last security fence - it makes sure that the newly instantiated object belongs to the scope of interest of the current user. So not firing this filter when using #exists? theoretically opens the way for the true-negative effect: checking exists? returns true, because the record with given ID is present, however attempt to load the object will fail. Of course we have other security algorithms to double check it, but maybe some other people don't. Or maybe I'm just talking non sense... So for what purpose do you use the after_find filter ?\n\nBest,\nMarek\n", "created_at": "2011-05-16 03:26:49", "user": 789801, "id": 1169449}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169450", "text": "_Imported from Lighthouse._\nComment by **Marek Kowalski** - 2009-10-25 10:02:53 UTC\n\nRob,\n\nIn fact in Rails 2.3.2 the after_find filter was not fired but I found out about it just when I was debugging the issue with missing attributes. Why I think it should be fired? Well, we should consider for what purpose  people use the after_find filter. In the application I work on we use it as the last security fence - it makes sure that the newly instantiated object belongs to the scope of interest of the current user. So not firing this filter when using #exists? theoretically opens the way for the true-negative effect: checking exists? returns true, because the record with given ID is present, however attempt to load the object will fail. Of course we have other security algorithms to double check it, but maybe some other people don't. Or maybe I'm just talking non sense... So for what purpose do you use the after_find filter ?\n\nBest,\nMarek\n", "created_at": "2011-05-16 03:26:50", "user": 789801, "id": 1169450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169451", "text": "_Imported from Lighthouse._\nComment by **Rob Olson** - 2009-10-26 03:26:57 UTC\n\nMarek, thank you for sharing how you have employed after_find in your application. I do not know all of the details of your application but I typically handle that situation differently.\n\nOne common way I ensure that the object I am finding belongs to the scope of interest of the current user is to do the find on an association proxy. Koz covered this in a [blog post on therailsway.com](http://www.therailsway.com/2007/3/26/association-proxies-are-your-friend).\n\nIn that case the find will return `nil` which then tells me that the record does not exist. With this technique I can accomplish the same thing in 1 sql query that you are doing with 2.\n\nTo be honest I have not found a good use for the after_find filter yet. However, since I did not know that it was available until recently, I would not have thought to use it before.\n", "created_at": "2011-05-16 03:26:50", "user": 789801, "id": 1169451}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169452", "text": "_Imported from Lighthouse._\nComment by **Marek Kowalski** - 2009-10-26 10:09:49 UTC\n\nRob, of course you are right, this is sensible  approach. But you also have to take into consideration that some lame developer could forget about accessing the object through the association, just like: Model.find(params[:id]). This would be a major security breach, but after_find filter comes to the rescue. Rails code is not very idiot-resistant, so if you are working in the team where people come and go you should better optimize the security rather than the number of SQL queries.\n", "created_at": "2011-05-16 03:26:50", "user": 789801, "id": 1169452}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169453", "text": "_Imported from Lighthouse._\nComment by **Tom Lea** - 2009-10-26 15:20:36 UTC\n\n@Rob Olson: Just a note, your failing test does not fail. after_initialize is not quite like other callbacks, it's slipped unless defined as an actual method (for performance reasons).\n", "created_at": "2011-05-16 03:26:51", "user": 789801, "id": 1169453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169454", "text": "_Imported from Lighthouse._\nComment by **Rob Olson** - 2009-10-28 06:52:58 UTC\n\n@Tom Lea: I have been unable to recreate after_initialize not running. On my machines it runs (and results in an error) the way I have specified it. Any ideas?\n\nAlso, I realize that the test results in an error instead of a failure. To receive a failure instead the test could be written like this:\n\n``` ruby\ndef test_exists_on_model_with_after_initialize_method_should_not_blow_up\n  assert_nothing_raised { assert Entrant.exists? }\nend\n```\n", "created_at": "2011-05-16 03:26:51", "user": 789801, "id": 1169454}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169455", "text": "_Imported from Lighthouse._\nComment by **Rob Olson** - 2009-11-10 03:37:38 UTC\n\nAs Tom Lea pointed out, in the 2-3-stable branch after_initialize must be declared as an actual method. It was working fine for me before but after updating Rails passing a block to after_initialize stopped working.\n\nI've adjusted the patch for 2-3-stable. The old patch file (above) still works for Rails 3.0 and is preferred for the master branch since \"def after_initialize\" gives a deprecation warning in Rails 3.\n", "created_at": "2011-05-16 03:26:51", "user": 789801, "id": 1169455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169456", "text": "_Imported from Lighthouse._\nComment by **Mark Dodwell** - 2009-12-06 01:16:05 UTC\n\nI ran into this same bug, and side-stepped it by changing the way I was setting my attribute in **#after_initialize**:\n\n``` ruby\ndef after_initialize\n  self.token ||= \"foobar\"\nend\n```\n\nbecomes:\n\n``` ruby\ndef after_initialize\n  write_attribute(:token, \"foobar\") unless read_attribute(:token)\nend\n```\n\nand that made the **ActiveRecord::MissingAttributeError** error go away. Might be of use to somebody?\n", "created_at": "2011-05-16 03:26:52", "user": 789801, "id": 1169456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169457", "text": "_Imported from Lighthouse._\nComment by **CDD Developers** - 2010-02-19 06:52:54 UTC\n\nRob's patch works well on 2.3.5 for our production server. It would be nice if this could be committed for 2.3.6\n", "created_at": "2011-05-16 03:26:52", "user": 789801, "id": 1169457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169458", "text": "_Imported from Lighthouse._\nComment by **Tim Connor** - 2010-05-23 21:37:36 UTC\n\nDid this NOT make it into 2.3.6?\n", "created_at": "2011-05-16 03:26:53", "user": 789801, "id": 1169458}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169459", "text": "_Imported from Lighthouse._\nComment by **Nikos Dimitrakopoulos** - 2010-06-08 19:34:02 UTC\n\nAnd nor in 2.3.8... Could a committer please spend some integrating Rob's patch?\n\nThanks\n", "created_at": "2011-05-16 03:26:53", "user": 789801, "id": 1169459}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169460", "text": "_Imported from Lighthouse._\nComment by **Yuri** - 2010-07-09 15:11:47 UTC\n\nStill broken in 2.3.8. Annoying.\n", "created_at": "2011-05-16 03:26:53", "user": 789801, "id": 1169460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169461", "text": "_Imported from Lighthouse._\nComment by **Geoffroy** - 2010-07-28 10:13:20 UTC\n\nStill seems unresolved in 3.0.0rc\n\nthe solution from Mark Dodwell works though\n\ndef after_initialize\n  write_attribute(:token, \"foobar\") unless read_attribute(:token)\nend\n\nmaybe worth to include in the final?\n", "created_at": "2011-05-16 03:26:54", "user": 789801, "id": 1169461}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169462", "text": "_Imported from Lighthouse._\nComment by **Ernie Miller** - 2010-07-28 20:28:15 UTC\n\nYup, just ran into this in 3.0.0rc as well. Only happens when doing a query that includes associations with corresponding conditions, triggering the old join code.\n", "created_at": "2011-05-16 03:26:54", "user": 789801, "id": 1169462}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169463", "text": "_Imported from Lighthouse._\nComment by **Brian Artiaco** - 2010-09-02 18:07:33 UTC\n\nI just spent half a day on this, before I finally found this ticket.  While I'm sad that it's been almost exactly a year since this was reported, and it hasn't been fixed yet, here's my simple work around for my scenario:\n\n```\nvalidates_uniqueness_of :email, :scope => :library_id\n\ndef after_initialize\n  self.status ||= \"Invited\"\nend\n```\n\nAs explained above, this will cause a 'MissingAttributeError' to be thrown, if there are records returned by the validates_uniqueness_of query.  My simple solution is this:\n\n```\ndef after_initialize\n  self.status ||= \"Invited\" if new_record?\nend\n```\n\nWhile other people are having more complex issues, this should solve the simple case, until an actual solution is commited into rails.\n\n(Also added 2.3.8 to the list of tags, as that is what I'm working against, in preparation for upgrading to rails 3)\n", "created_at": "2011-05-16 03:26:54", "user": 789801, "id": 1169463}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169464", "text": "_Imported from Lighthouse._\nComment by **Tim Connor** - 2010-09-02 18:37:55 UTC\n\nBrian, no need for that new_record check, if you just use read_attribute and write_attribute.  I don't think there is any more complex case that can't solve as a work-around.\n", "created_at": "2011-05-16 03:26:55", "user": 789801, "id": 1169464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169465", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:49:04 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:26:55", "user": 789801, "id": 1169465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169466", "text": "_Imported from Lighthouse._\nComment by **Victor Costan** - 2011-02-17 06:36:42 UTC\n\nThe bug is still present in Rails 3.0.4. This blog post (not mine) shows a workaround: http://blog.edseek.com/archives/2009/04/16/missingattributeerror-from-within-after_initialize/\n\nThe error is confusing, and will waste a few hours of time for anyone doing after_initialize / after_find hooks.\n\n[state:open]\n", "created_at": "2011-05-16 03:27:20", "user": 789801, "id": 1169466}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169467", "text": "_Imported from Lighthouse._\nComment by **Rob Olson** - 2011-04-18 21:55:00 UTC\n\nThis has finally been resolved in Rails 3.0.7 by [#6127](https://rails.lighthouseapp.com/projects/8994/tickets/6127-after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation).\n\nIt's still present in 2-3-stable though.\n", "created_at": "2011-05-16 03:27:21", "user": 789801, "id": 1169467}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169468", "text": "Attachments saved to Gist: http://gist.github.com/971642\n", "created_at": "2011-05-16 03:27:21", "user": 789801, "id": 1169468}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3188\nCreated by **Rados≈Çaw Bu≈Çat** - 2011-02-19 09:28:28 UTC\n\nLately I've encountered strange behavior of ActiveRecord. Suppose we have classic Post and Comment models (post has many comments, comment belongs to post). There are a few ways to create comment to given post. For example:\n\nComment.create(:post => @post)\nComment.create(:post_id => @post.id)\n\nI made a mistake and mixed those two:\n\nComment.create(:post_id => @post)\n\nIn this case it always create Comment with post_id = 1 regardless of given Post object. It take me several hours to find this bug in my code and I think that it's not acceptable behavior.\n\nI think that description is enough clear but for formality. How to reproduce:\n\n$ rails -v\nRails 2.3.4\n\n$ rails bug && cd bug\n$ ./script/generate model Post title:string\n$ ./script/generate model Comment post:references title:string\n$ rake db:migrate\n$ ./script/console\n# first scenario (OK)\n\n> > p1 = Post.create(:title => \"1\")\n> >   Post Create (0.8ms)   INSERT INTO \"posts\" (\"updated_at\", \"title\", \"created_at\") VALUES('2009-09-11 07:41:32', '1', '2009-09-11 07:41:32')\n> > => #<Post id: 1, title: \"1\", created_at: \"2009-09-11 07:41:32\", updated_at: \"2009-09-11 07:41:32\">\n> > p2 = Post.create(:title => \"2\")\n> >   Post Create (0.5ms)   INSERT INTO \"posts\" (\"updated_at\", \"title\", \"created_at\") VALUES('2009-09-11 07:41:37', '2', '2009-09-11 07:41:37')\n> > => #<Post id: 2, title: \"2\", created_at: \"2009-09-11 07:41:37\", updated_at: \"2009-09-11 07:41:37\">\n> > c1 = Comment.create(:title => \"comment\", :post => p2)\n> >   Comment Create (1.3ms)   INSERT INTO \"comments\" (\"updated_at\", \"title\", \"post_id\", \"created_at\") VALUES('2009-09-11 07:41:43', 'comment', 2, '2009-09-11 07:41:43')\n> > => #<Comment id: 1, post_id: 2, title: \"comment\", created_at: \"2009-09-11 07:41:43\", updated_at: \"2009-09-11 07:41:43\">\n> > c1.post_id\n> > => 2\n# second scenario (OK)\n\n> > c2 = Comment.create(:title => \"comment\", :post_id => p2.id)\n> >   Comment Create (0.6ms)   INSERT INTO \"comments\" (\"updated_at\", \"title\", \"post_id\", \"created_at\") VALUES('2009-09-11 07:42:35', 'comment', 2, '2009-09-11 07:42:35')\n> > => #<Comment id: 2, post_id: 2, title: \"comment\", created_at: \"2009-09-11 07:42:35\", updated_at: \"2009-09-11 07:42:35\">\n> > c2.post_id\n> > => 2\n# third scenario (BAD)\n\n> > c3 = Comment.create(:title => \"comment\", :post_id => p2)\n> >   Comment Create (0.6ms)   INSERT INTO \"comments\" (\"updated_at\", \"title\", \"post_id\", \"created_at\") VALUES('2009-09-11 07:42:54', 'comment', 1, '2009-09-11 07:42:54')\n> > => #<Comment id: 3, post_id: 1, title: \"comment\", created_at: \"2009-09-11 07:42:54\", updated_at: \"2009-09-11 07:42:54\">\n> > c3.post_id\n> > => 1\n", "labels": [], "number": 634, "updated_at": "2011-05-21 15:11:53", "user": 789801, "closed_at": "2011-05-21 15:11:53", "id": 904265, "title": "[ActiveRecord] create(:association_id => @object.id) vs create(:association_id => @object)", "url": "https://api.github.com/repos/rails/rails/issues/634", "created_at": "2011-05-16 03:27:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169469", "text": "_Imported from Lighthouse._\nComment by **Rados≈Çaw Bu≈Çat** - 2009-09-22 10:53:38 UTC\n\nNo comments? It could save a lot of time for me and I believe that others to.\n", "created_at": "2011-05-16 03:27:27", "user": 789801, "id": 1169469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169470", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-09-27 15:50:35 UTC\n\n+1 verified on 2-3-stable and master.\n\niv'e attached a patch with a failing test (created on 2-3-stable, applies on master too).\n", "created_at": "2011-05-16 03:27:27", "user": 789801, "id": 1169470}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169471", "text": "_Imported from Lighthouse._\nComment by **sr.iniv.t** - 2009-09-27 17:42:16 UTC\n\n+1 verified.\n\nElad's patch applies cleanly on master and 2-3-stable and the issue is reproducible.\n", "created_at": "2011-05-16 03:27:28", "user": 789801, "id": 1169471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169472", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-09-27 18:09:01 UTC\n\ni Dug into it, and came up with `type_cast` as the issue, i added a special case for type casting AR:Base decedent instances as values (defaults to primary key returns as value).\n\nThe only issue is in the test, which still fails.\nI scattered a bunch of debug prints all over the method chain `create` => `attributes_with_quotes' =>`read_attribute`=>`type_cast`to make sure that the right value is assigned and still, when i access`@post.attributes`in the test,`author_id`is as expected but`@post.author_id` is still 1. (more on this \"gist\":http://gist.github.com/194887 )\n\niv'e attached a patch with the changes and the failing test, + some debug prints to make it clear.\n", "created_at": "2011-05-16 03:27:28", "user": 789801, "id": 1169472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169473", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-09-27 18:09:36 UTC\n\nargh, markdown fails. :)\n", "created_at": "2011-05-16 03:27:28", "user": 789801, "id": 1169473}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169474", "text": "_Imported from Lighthouse._\nComment by **Mat√≠as Flores** - 2009-09-27 18:19:12 UTC\n\nI've verified the issue exists and it's easily reproducible\n", "created_at": "2011-05-16 03:27:29", "user": 789801, "id": 1169474}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169475", "text": "_Imported from Lighthouse._\nComment by **Elomar Fran√ßa** - 2009-09-27 18:27:18 UTC\n\n+1, verified.\n\nI had some failures when applying the patch from Elad Meidar, both on master and 2-3-stable.\n\nI think this issue could also be solved in \"write_attribute\". If the attr is from a belongs_to association and the given value is a AR::Base, write value.id to the attribute, but I couldn't discover how implement it yet :(\n", "created_at": "2011-05-16 03:27:29", "user": 789801, "id": 1169475}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169476", "text": "_Imported from Lighthouse._\nComment by **Evgeniy Dolzhenko** - 2009-10-21 11:58:17 UTC\n\n+1 just spend an hour or so on figuring out the exact issue, and then found this ticket.\n\nThe following snippet from `Column#type_cast` seems just wrong (or just the intention isn't obvious):\n\n```\nwhen :integer   then value.to_i rescue value ? 1 : 0\n```\n", "created_at": "2011-05-16 03:27:30", "user": 789801, "id": 1169476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169477", "text": "_Imported from Lighthouse._\nComment by **Evgeniy Dolzhenko** - 2009-10-21 12:17:44 UTC\n\n@Elad, the problem is that your patch adds new functionality to `Column#type_cast` but doesn't repeats that for `Column#type_cast_code` which is user by the attribute read method (`@post.author_id` in your case)\n", "created_at": "2011-05-16 03:27:30", "user": 789801, "id": 1169477}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169478", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-02-12 12:46:17 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/13645)]\n", "created_at": "2011-05-16 03:27:30", "user": 789801, "id": 1169478}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169479", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 21:13:35 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:27:31", "user": 789801, "id": 1169479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169480", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-21 02:39:30 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:27:31", "user": 789801, "id": 1169480}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169481", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-24 12:08:40 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:27:32", "user": 789801, "id": 1169481}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3206\nCreated by **Emin Hasanov** - 2010-12-28 03:36:10 UTC\n\nAs of 2.3.4 rails now raises an exception when habtm table contains a primary key (see #2086).\n\nHowever, on Postgresql, when used with Slony Replication (which is a most popular replication tool), you have to have primary key in order to replicate the table. While you can make a composite key on habtm table, one of the options is to add a synthetic primary key to the table, which was a standard approach with Slony for quite some time now. This is what I had in my setup - multiple replications set up on all of my applications with synthetic keys for all habtm tables.\n\nAfter upgrading to 2.3.4, they have all failed and I had to manually edit has_and_belongs_to_many_association.rb to comment out lines 42-45 to disable the check.\n\nNow, while it is possible for me to alter all my database schemes and redo the replication, it seems to me that for a minor upgrade from 2.3.3 to 2.3.4, this is not the right way. May be it is more appropriate to set up some sort of configuration key that will allow to disable the check for those who really need now and announce that it will not work anymore from version 3.0?\n\nthis is the code that I had commented out\n\nif has_primary_key?\n  raise ActiveRecord::ConfigurationError,\n  \"Primary key is not allowed in a has_and_belongs_to_many join table (#{@reflection.options[:join_table]}).\"\nend\n", "labels": [], "number": 635, "updated_at": "2011-05-21 15:11:54", "user": 789801, "closed_at": "2011-05-21 15:11:53", "id": 904266, "title": "Problem with 2.3.4, habtm and Slony Replication on Postgresql, related to #2086", "url": "https://api.github.com/repos/rails/rails/issues/635", "created_at": "2011-05-16 03:27:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169482", "text": "_Imported from Lighthouse._\nComment by **pseudonym_ima** - 2009-10-18 01:58:31 UTC\n\nhttp://rubyforge.org/projects/slubydoo/\n", "created_at": "2011-05-16 03:27:38", "user": 789801, "id": 1169482}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169483", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-02-12 12:46:18 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/13645)]\n", "created_at": "2011-05-16 03:27:38", "user": 789801, "id": 1169483}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169484", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 20:46:45 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:27:39", "user": 789801, "id": 1169484}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3217\nCreated by **Sidu Ponnappa** - 2011-02-19 09:28:11 UTC\n\nThis issue occurs when a collection is serialised to xml, and has attributes other than type='array' on the root node (for example is you choose to suppy page/per-page information for pagination as root attributes). This completely breaks ActiveResource when dealing with paginated collections.\n\nI've taken the patch against rails/activesupport. I've changed Hash#typecast_xml_value to ignore extra attributes when 'type' is present. The sample data to reproduce the issue is included as part of the specs.\n", "labels": [], "number": 636, "updated_at": "2011-05-21 15:11:54", "user": 789801, "closed_at": "2011-05-21 15:11:54", "id": 904268, "title": "[Patch] Parsing an xml file with multiple records and extra attributes (besides type) fails", "url": "https://api.github.com/repos/rails/rails/issues/636", "created_at": "2011-05-16 03:27:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169485", "text": "_Imported from Lighthouse._\nComment by **Dmitry Polushkin** - 2010-02-26 15:51:56 UTC\n\n+1\n", "created_at": "2011-05-16 03:27:46", "user": 789801, "id": 1169485}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169486", "text": "_Imported from Lighthouse._\nComment by **Niranjan Paranjape** - 2010-09-23 15:25:39 UTC\n\nThis problem persists in Rails 3.0.0\n", "created_at": "2011-05-16 03:27:46", "user": 789801, "id": 1169486}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169487", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-10 19:11:22 UTC\n\nUsing the \"patch\" tag instead of prefixing the ticket title with \"[PATCH]\" to make sure patched tickets end up in the [open patches bin](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/bins/5805). :)\n", "created_at": "2011-05-16 03:27:46", "user": 789801, "id": 1169487}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169488", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-14 13:08:05 UTC\n\nSidu, the patch doesn't apply any more. Can you rebase/rewrite it and follow http://rails.lighthouseapp.com/projects/8994/sending-patches so that you get credit? :)\n\nAlso when the new patch comes, we need more then just a '+1'. If you are reviewing the patch please do comment on the code, whether it solves the problem and make sure the tests fail before the fix is applied.\n", "created_at": "2011-05-16 03:27:46", "user": 789801, "id": 1169488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169489", "text": "_Imported from Lighthouse._\nComment by **Niranjan Paranjape** - 2011-02-18 15:23:24 UTC\n\nThis issue still persists in current rails head. And as the old patch is no more applicable, I am resubmitting the patch for latest code.\n", "created_at": "2011-05-16 03:27:47", "user": 789801, "id": 1169489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169490", "text": "_Imported from Lighthouse._\nComment by **Ryan Heneise** - 2011-02-23 16:16:19 UTC\n\nFWIW, pox_paginate extends will_paginate using attributes on the top-level xml node: https://github.com/c42/pox_paginate\n", "created_at": "2011-05-16 03:27:47", "user": 789801, "id": 1169490}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169491", "text": "Attachments saved to Gist: http://gist.github.com/971643\n", "created_at": "2011-05-16 03:27:47", "user": 789801, "id": 1169491}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3234\nCreated by **Greg Hazel** - 2009-09-19 13:34:55 UTC\n\nrelated to: http://dev.rubyonrails.org/ticket/10963\n\n``` ruby\nadd_column :mytable, :data, :string\nchange_column :mytable, :data, :binary\n```\n\nWill fail (on MySQL anyway) with: \n\n``` text\nMysql::Error: BLOB/TEXT column 'data' can't have a default value: ALTER TABLE `mytable` CHANGE `data` `data` blob DEFAULT '' NOT NULL\n```\n\nThis is because the default from the string column, which defaults to '', is carried over to the new column.\n\nCulprit:\n\n``` ruby\ndef change_column(table_name, column_name, type, options = {}) #:nodoc:\n  column = column_for(table_name, column_name)\n\n  unless options_include_default?(options)\n    options[:default] = column.default\n  end\n\n  unless options.has_key?(:null)\n    options[:null] = column.null\n  end\n```\n\nSee how it takes column.default without considering the type of the new column?\n\nSimilar to has_default?\n\n``` ruby\ndef has_default?\n  return false if type == :binary || type == :text #mysql forbids defaults on blob and text columns\n  super\nend\n```\n\nIt could check the type. Something like:\n\n``` ruby\n-  unless options_include_default?(options)\n+  unless options_include_default?(options) or type == :binary or type == :text #mysql forbids defaults on blob and text\n     options[:default] = column.default\n   end\n```\n", "labels": [], "number": 637, "updated_at": "2011-05-21 15:11:55", "user": 789801, "closed_at": "2011-05-21 15:11:54", "id": 904269, "title": "change_column carries over default when it can't be carried", "url": "https://api.github.com/repos/rails/rails/issues/637", "created_at": "2011-05-16 03:27:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169492", "text": "_Imported from Lighthouse._\nComment by **dira** - 2009-09-27 09:37:18 UTC\n\nNot reproducible.\n\nTested  in 2.3.stable and on master, by running the migration on the dev app & also in tests. The column is changed correctly and there is no error.\n\nThe attached file is a patch for the migration tests on stable; it shows that the error does not happen.\n", "created_at": "2011-05-16 03:27:54", "user": 789801, "id": 1169492}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169493", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2009-09-27 11:31:51 UTC\n\nWhat version of MySQL, and what sql_mode? I run 5.0.xx in TRADITIONAL mode. Can you see the  ALTER TABLE line it generates?\n", "created_at": "2011-05-16 03:27:55", "user": 789801, "id": 1169493}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169494", "text": "_Imported from Lighthouse._\nComment by **Elomar Fran√ßa** - 2009-09-27 16:44:23 UTC\n\n+1, verified on Mysql 5.0.81 in TRADITIONAL mode.\n\nI've attached a patch with a test based on the one from dira and a tiny fix. Applies on 2-3-stable and master.\n", "created_at": "2011-05-16 03:27:56", "user": 789801, "id": 1169494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169495", "text": "_Imported from Lighthouse._\nComment by **Elomar Fran√ßa** - 2009-09-27 16:45:04 UTC\n\n+1, verified on Mysql 5.0.81 in TRADITIONAL mode.\n\nI've attached a patch with a test based on the one from dira and a tiny fix. Applies on 2-3-stable and master.\n", "created_at": "2011-05-16 03:27:57", "user": 789801, "id": 1169495}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169496", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-02-12 12:46:18 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/13645)]\n", "created_at": "2011-05-16 03:27:58", "user": 789801, "id": 1169496}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169497", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-05-16 01:41:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20088)]\n", "created_at": "2011-05-16 03:27:59", "user": 789801, "id": 1169497}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169498", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-05-16 08:45:04 UTC\n\n(from [ddadcc7cf8332415ba48b66904ee6136b43dda6b]) Don't carry default value when changing column for a binary type on MySQL [#3234 state:resolved]\n\nSigned-off-by: Jos√© Valim jose.valim@gmail.com\nhttp://github.com/rails/rails/commit/ddadcc7cf8332415ba48b66904ee6136b43dda6b\n", "created_at": "2011-05-16 03:28:01", "user": 789801, "id": 1169498}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169499", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-05-16 08:53:10 UTC\n\n(from [edec1afe25014749f0e2df86d27477b45586a9e3]) Don't carry default value when changing column for a binary type on MySQL [#3234 state:resolved]\n\nSigned-off-by: Jos√© Valim jose.valim@gmail.com\nhttp://github.com/rails/rails/commit/edec1afe25014749f0e2df86d27477b45586a9e3\n", "created_at": "2011-05-16 03:28:02", "user": 789801, "id": 1169499}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169500", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-05-18 18:04:39 UTC\n\n(from [9d99e610be0da6e4b682ebb8cc410cdca1ca633a]) Revert \"Don't carry default value when changing column for a binary type on MySQL\"\n\nBroke mysql tests.\n\nThis reverts commit ddadcc7cf8332415ba48b66904ee6136b43dda6b.\n\nConflicts:\n\n```\nactiverecord/test/cases/migration_test.rb\n```\n\n[#3234 state:open]\nhttp://github.com/rails/rails/commit/9d99e610be0da6e4b682ebb8cc410cdca1ca633a\n", "created_at": "2011-05-16 03:28:04", "user": 789801, "id": 1169500}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169501", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-05-18 18:04:44 UTC\n\n(from [223d6415d045e670610603665c21e93b06a01db7]) Revert \"Don't carry default value when changing column for a binary type on MySQL\"\n\nBroke mysql tests.\n\nThis reverts commit edec1afe25014749f0e2df86d27477b45586a9e3.\n\nConflicts:\n\n```\nactiverecord/test/cases/migration_test.rb\n```\n\n[#3234 state:open]\nhttp://github.com/rails/rails/commit/223d6415d045e670610603665c21e93b06a01db7\n", "created_at": "2011-05-16 03:28:05", "user": 789801, "id": 1169501}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169502", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-23 16:54:44 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20606)]\n", "created_at": "2011-05-16 03:28:06", "user": 789801, "id": 1169502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169503", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-24 08:40:52 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20631)]\n", "created_at": "2011-05-16 03:28:07", "user": 789801, "id": 1169503}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169504", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-25 22:45:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20816)]\n", "created_at": "2011-05-16 03:28:09", "user": 789801, "id": 1169504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169505", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 03:28:09", "user": 789801, "id": 1169505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169506", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:32:37 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:28:10", "user": 789801, "id": 1169506}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169507", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-02-02 19:23:13 UTC\n\n[state:open]\n", "created_at": "2011-05-16 03:28:12", "user": 789801, "id": 1169507}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169508", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 20:27:40 UTC\n\nGreg, glad you reopen the issue, can you make a patch that doesn't break mysql tests, for master, 3-0-stable and 2-3-stable.\nThanks a lot :).\n", "created_at": "2011-05-16 03:28:13", "user": 789801, "id": 1169508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169509", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-05-03 00:00:09 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:28:14", "user": 789801, "id": 1169509}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169510", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-05-03 00:06:14 UTC\n\nOh no, not this again.\n\n[state:open]\n\nI would be happy to fix the patch, but I don't see how it failed. It just said \"Broke mysql tests.\". That's not very helpful.\n", "created_at": "2011-05-16 03:28:15", "user": 789801, "id": 1169510}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3254\nCreated by **Joshua Peek** - 2010-11-17 01:58:30 UTC\n\naction_controller/dispatch/dispatcher.rb and action_controller/dispatch/middlewares.rb configs are related to the \"Application object\".\n\nWe may want to magically point (w/ a deprecation) ActionController::Dispatcher some how to the default application object instance so old versions of config.ru and passenger don't totally break.\n", "labels": [], "number": 638, "updated_at": "2011-05-16 03:38:38", "user": 789801, "closed_at": "2011-05-16 03:38:38", "id": 904273, "title": "Merge Dispatcher and Middleware in Application object", "url": "https://api.github.com/repos/rails/rails/issues/638", "created_at": "2011-05-16 03:28:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169511", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:31 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:28:21", "user": 789801, "id": 1169511}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169512", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:36 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:28:22", "user": 789801, "id": 1169512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169513", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:33:50 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:28:22", "user": 789801, "id": 1169513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169514", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:12 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:28:22", "user": 789801, "id": 1169514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169515", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:28:23", "user": 789801, "id": 1169515}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169516", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:28:23", "user": 789801, "id": 1169516}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3271\nCreated by **Bruce Burdick** - 2011-04-22 05:48:03 UTC\n\nThis changeset introduced data corruption in active_record/connection_adapters/postgresql_adapter.rb: http://dev.rubyonrails.org/changeset/7329\n\n``` ruby\n        elsif value.kind_of?(String) && column && column.sql_type =~ /^bit/\n          case value\n            when /^[01]*$/\n              \"B'#{value}'\" # Bit-string notation\n            when /^[0-9A-F]*$/i\n              \"X'#{value}'\" # Hexadecimal notation\n```\n\nThis is a dangerous design that will result in data corruption every time it is passed a string representing a hexadecimal number that is strictly composed of zeros and ones. That string will be saved as though it represented a binary number, instead. It is not possible to determine whether such a string represents a binary or hexadecimal number by scanning its contents. Ruby itself imposes prefix tags to make this distinction: e.g. 0b1010 vs. 0x1010. No ActiveRecord DB driver should pretend to infer the base of an untagged string of ones and zeros.\n\nThe solution must either:\n- avoid using bitstring column types altogether (not preferred)\n- support either binary or hexadecimal, make no warranty for the other, and fix the driver code\n- reject untagged strings and fix the driver code\n", "labels": [], "number": 639, "updated_at": "2011-05-25 08:37:45", "user": 789801, "closed_at": "2011-05-21 15:11:55", "id": 904274, "title": "Postgres data corruption for hexadecimal strings composed of zeros and ones destined for bitstring columns", "url": "https://api.github.com/repos/rails/rails/issues/639", "created_at": "2011-05-16 03:28:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169517", "text": "_Imported from Lighthouse._\nComment by **Bruce Burdick** - 2009-09-26 23:10:21 UTC\n\nCredit goes to Kurt Stephens for identifying this bug.\n", "created_at": "2011-05-16 03:28:29", "user": 789801, "id": 1169517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169518", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-02-12 12:46:19 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/13645)]\n", "created_at": "2011-05-16 03:28:29", "user": 789801, "id": 1169518}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169519", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:55:13 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:28:30", "user": 789801, "id": 1169519}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169520", "text": "_Imported from Lighthouse._\nComment by **Alex Shulgin** - 2011-03-23 17:21:51 UTC\n\nHello,\n\nAttached is a patch against current master to fix this issue.\n\nI've decided to go with the option two proposed by the reporter: \"support either binary or hexadecimal, make no warranty for the other, and fix the driver code.\"  I think it's best to keep only support for binary strings and drop support for hexadecimal, and here's why:\n1. as pointed out in this issue the hexadecimal notation cannot be used reliably to put the data into a bit-string column;\n2. when the data is read from a bit-string column it is always returned as a binary string, so sticking to binary representation helps consistency and avoids surprises;\n\nNow, this change might break some existing code, but since the nature of the issue, this is going to affect only instances of (relatively) short hard-coded hexadecimal strings being put into bit-string columns.  Problematic application code will manifest itself with a database error exception, rather than putting incorrect data into column.\n\n## \n\nAlex\n", "created_at": "2011-05-16 03:28:30", "user": 789801, "id": 1169520}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169521", "text": "_Imported from Lighthouse._\nComment by **Bruce Burdick** - 2011-03-29 18:35:20 UTC\n\n+1 Alex!\n\nI'm amazed that no one from Rails core has thought that this is important for ~18 months. C'est la vie. Thanks for fixing.\n", "created_at": "2011-05-16 03:28:31", "user": 789801, "id": 1169521}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169522", "text": "Attachments saved to Gist: http://gist.github.com/971644\n", "created_at": "2011-05-16 03:28:31", "user": 789801, "id": 1169522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233755", "text": "How do I reopen this issue?  My patch was not reviewed/applied as far as I can tell.\n", "created_at": "2011-05-25 07:30:36", "user": 489601, "id": 1233755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233926", "text": "Correct me if I'm wrong: Can't we just reverse the case statements to check for hex first and then binary? Won't it be fool proof for all cases?\n", "created_at": "2011-05-25 08:03:16", "user": 146214, "id": 1233926}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234070", "text": "@vijaydev: no, if you'd try to store a binary string, the hex regexp will catch it and interpret incorrectly.  See my blog post on the topic for detailed rationale behind the patch: http://commandprompt.com/blogs/alex_shulgin/2011/03/when_too_smart_becomes_stupid_fixing_a_ror_pgsql_driver_issue/\n", "created_at": "2011-05-25 08:34:01", "user": 489601, "id": 1234070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234087", "text": "@a1exsh: ahh. understood. Thanks!\n", "created_at": "2011-05-25 08:37:44", "user": 146214, "id": 1234087}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3300\nCreated by **Joshua Peek** - 2010-11-17 01:58:29 UTC\n\nAbstract html parsing so we can swap out backends similar to XML and JSON parsing.\n- Move \"HTML Scanner\" into ActiveSupport as the default pure ruby parser\n- Allow it to be swaped out with different backends: Hpricot, Nokogiri\n", "labels": [], "number": 640, "updated_at": "2011-05-21 15:11:55", "user": 789801, "closed_at": "2011-05-21 15:11:55", "id": 904275, "title": "ActiveSupport::HTML", "url": "https://api.github.com/repos/rails/rails/issues/640", "created_at": "2011-05-16 03:28:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169523", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:31 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:28:37", "user": 789801, "id": 1169523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169524", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:36 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:28:37", "user": 789801, "id": 1169524}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169525", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:33:36 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:28:38", "user": 789801, "id": 1169525}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169526", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:12 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:28:38", "user": 789801, "id": 1169526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169527", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-01-30 10:00:54 UTC\n\nAnybody working on this?\n\nAlso this involves changes to the user facing API, if so shouldn't this be moved to the 3.1 or 3.x milestone?\n", "created_at": "2011-05-16 03:28:38", "user": 789801, "id": 1169527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169528", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:28:39", "user": 789801, "id": 1169528}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169529", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:28:39", "user": 789801, "id": 1169529}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3348\nCreated by **Eric Chapweske** - 2010-10-25 02:23:39 UTC\n\nDecouples the attribute/typecasting implementation, introducing an Attributes:Store and ActiveRecord::Types. I think this simplifies things and lays the groundwork for other improvements. Assuming this seems like a good idea, I'd like to continue by improving the Types implementation and seeing if it makes sense to extract any other attribute/typecasting behavior.\n", "labels": [], "number": 641, "updated_at": "2013-05-05 22:35:59", "user": 789801, "closed_at": "2011-05-21 15:11:55", "id": 904276, "title": "Refactoring of attributes/typecasting behavior", "url": "https://api.github.com/repos/rails/rails/issues/641", "created_at": "2011-05-16 03:28:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169530", "text": "_Imported from Lighthouse._\nComment by **Joshua Peek** - 2009-10-16 00:37:35 UTC\n\nThis is pretty awesome!\n\nBut its not applying cleanly for me. Can you please rebase it.\n\nI would love to eventually pull this stuff back into ActiveModel.\n", "created_at": "2011-05-16 03:28:45", "user": 789801, "id": 1169530}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169531", "text": "_Imported from Lighthouse._\nComment by **Eric Chapweske** - 2009-10-17 00:55:45 UTC\n\nWoops, this new one should apply.\n", "created_at": "2011-05-16 03:28:45", "user": 789801, "id": 1169531}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169532", "text": "_Imported from Lighthouse._\nComment by **Eric Chapweske** - 2009-10-17 01:21:35 UTC\n\nSorry, I created that last patch without the tests. This is the complete version.\n", "created_at": "2011-05-16 03:28:45", "user": 789801, "id": 1169532}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169533", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2009-10-17 17:37:31 UTC\n\n(from [f936a1f100e75082081e782e5cceb272885c2df7]) Refactoring attributes/types [#3348 state:resolved]\n\nhttp://github.com/rails/rails/commit/f936a1f100e75082081e782e5cceb272885c2df7\n", "created_at": "2011-05-16 03:28:46", "user": 789801, "id": 1169533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169534", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-01-21 21:45:45 UTC\n\nThis is a great refactoring but it's a huge performance regression: https://gist.github.com/3b5884a2c87755f4015d\n", "created_at": "2011-05-16 03:28:46", "user": 789801, "id": 1169534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169535", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-01-21 21:52:41 UTC\n\n(from [6d30002a52133bd105adb29084f4cc72b1ee847f]) Revert \"Refactoring attributes/types\" [#3348 state:open]\n\nThis reverts commit f936a1f100e75082081e782e5cceb272885c2df7.\n\nConflicts:\n\n```\nactiverecord/lib/active_record.rb\nactiverecord/lib/active_record/base.rb\n```\n\nRevert \"Fixed: #without_typecast should only disable typecasting on the duplicated attributes\" [#3387 state:open]\n\nThis reverts commit 2831996483c6a045f1f38d8030256eb58d9771c3.\n\nReason :\n\n  It's not generating attribute methods properly, making object.column 5x slower.\nhttp://github.com/rails/rails/commit/6d30002a52133bd105adb29084f4cc72b1ee847f\n", "created_at": "2011-05-16 03:28:47", "user": 789801, "id": 1169535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169536", "text": "_Imported from Lighthouse._\nComment by **Eric Chapweske** - 2010-01-25 17:20:55 UTC\n\nHey guys,\n\nWhat's the performance goal for this? \n\nCurrent results: reading attributes is now 3x slower, though a couple methods are a fair bit faster. (query_attribute is 6x faster). The remaining performance differences are due to the longer method call path. \n\nI'd like to explore pulling the @attributes_cache into AR::Attributes and cache most methods by default, performance is then the same or better than 2.3.\n\nCheers,\n-Eric\n", "created_at": "2011-05-16 03:28:47", "user": 789801, "id": 1169536}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169537", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-01-25 17:43:05 UTC\n\nEric, the goal is 2.3 speed or better.\n", "created_at": "2011-05-16 03:28:47", "user": 789801, "id": 1169537}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169538", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-06-17 06:36:50 UTC\n\nAny updates to this ticket? Eric, have you had the chance to work on a new patch?\n", "created_at": "2011-05-16 03:28:48", "user": 789801, "id": 1169538}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169539", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:31 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:28:48", "user": 789801, "id": 1169539}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169540", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:36 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:28:48", "user": 789801, "id": 1169540}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169541", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:33:43 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:28:49", "user": 789801, "id": 1169541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169542", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:50 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:28:49", "user": 789801, "id": 1169542}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169543", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:28:49", "user": 789801, "id": 1169543}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169544", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:28:50", "user": 789801, "id": 1169544}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169545", "text": "Attachments saved to Gist: http://gist.github.com/971645\n", "created_at": "2011-05-16 03:28:50", "user": 789801, "id": 1169545}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4491926", "text": "I wonder, are there any plans to refactor typecasting to active_model again?\n", "created_at": "2012-03-14 04:11:45", "user": 4512, "id": 4491926}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3426\nCreated by **Elad Meidar** - 2009-10-25 23:47:02 UTC\n\nI tried to find a way to access the current child index while invoking `fields_for` on a collection, i needed that in order to provide meaningful CSS selectors for each and every item and i wasn't able to find a way to access it.\n\nThe patch i added (for 2-3-stable) is basically an addition of an `attr_accessor` for `ActionView::Helpers::FormBuilder` that holds the current child index and a method named `current_child_index` that returns the current index based on those guidelines:\n- If there is only one item (a single object or an association with 1 item), the index returned will be always 0\n- if there's a specific :index directive on the `fields_for` options, return it.\n- otherwise, return the actual index (existing methodology to determine current index is kept).\n\nIn order to preserve the value between FormBuilder's instances (apparently `FormHelper#fields_for` is creating one for each iteration), I've added a conditional statement that carries the value from the initial builder (the one that is calling the FormHelper one) to the next iteration.\n\nConfused? so do i.\n", "labels": [], "number": 642, "updated_at": "2013-01-17 05:01:24", "user": 789801, "closed_at": "2011-05-21 15:11:55", "id": 904278, "title": "current child index on fields_for nested attributes", "url": "https://api.github.com/repos/rails/rails/issues/642", "created_at": "2011-05-16 03:28:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169546", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2009-10-26 02:49:17 UTC\n\nPatch looks useful, but a couple formatting notes:\n- It's hard to tell what this patch does, as it's got several commits in it. You'll want to format it as a single commit for inclusion in Rails.\n- Don't reformat existing code; it makes the changelog noisy and doesn't serve a purpose. I'm specifically referencing the blank lines after 'def foo_bar(x,y,z)'.\n- Similarly, blank lines shouldn't have spaces - especially not lines that were really blank before (just \\n) and are now \"\\n        \". It's always good to turn on visible newlines (or equivalent in your editor) and make sure that there's not trailing whitespace.\n\nThanks for contributing!\n", "created_at": "2011-05-16 03:28:56", "user": 789801, "id": 1169546}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169547", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-10-26 02:57:37 UTC\n\nWell, Pratik and i talked and he suggested a totally different way to solve this issue, `fields_for_with_index`.\n\nAs far as i am concerned, this patch is invalid :), i'll format a new one (better formatted too e.g) in the next couple of days.\n", "created_at": "2011-05-16 03:28:56", "user": 789801, "id": 1169547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169548", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2009-10-26 05:08:54 UTC\n\nOk, this patch makes more sense.\n\nI've added `FormHelper#fields_for_with_index` and some tests (duplicates of some fields_for tests). \n\nGoing through the entire `fields_for` cycle, i found that it was really integrated with the entire process of rendering a form, more specifically `fields_for_with_index_nested_model`. i chose to duplicate the entire method chain of `fields_for` to match the `fields_for_with_index` need in a second block parameter ( |builder, index| ) mainly because i didn't find a better way to patch the existing code to consider that, and @Matt's 2nd note \"don't reformat existing code\"\n", "created_at": "2011-05-16 03:28:56", "user": 789801, "id": 1169548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169549", "text": "_Imported from Lighthouse._\nComment by **Giulio Turetta** - 2009-11-06 17:00:19 UTC\n\nthis patch is useful!\nin the mean time (on 2.3.2) I use a wrong/bad/ridiculous solution :)\n\n<% f.fields_for :emails do |email_fields| %>\n  <span id=\"emails_box_<%= email_fields.object_name.gsub(/[^0-9]+/,'') %>\">\n    <%= email_fields.text_field :address %>\n  </span>\n<% end %>\n\nemail_fields.object_name.gsub(/[^0-9]+/,'') => actual fields_for index!\n\nso....\n\n<span id=\"emails_box_1\">\n <input type=\"text\" value=\"\" name=\"model[emails_attributes][1][address]\" id=\"model_emails_attributes_1_address\" />\n</span>\n\nuahhhh! yes! we can! :P\n", "created_at": "2011-05-16 03:28:57", "user": 789801, "id": 1169549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169550", "text": "_Imported from Lighthouse._\nComment by **Chris Johnson** - 2010-09-04 00:49:09 UTC\n\nSeems like quite useful functionality; I need it right now.\n+1\n", "created_at": "2011-05-16 03:28:57", "user": 789801, "id": 1169550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169551", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2010-10-20 09:54:49 UTC\n\n+1 for the feature.\n\nI haven't look at the implentation/patch\n", "created_at": "2011-05-16 03:28:57", "user": 789801, "id": 1169551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169552", "text": "_Imported from Lighthouse._\nComment by **Sakchai Siripanyawuth** - 2011-02-02 08:43:29 UTC\n\n+1 for this too\n", "created_at": "2011-05-16 03:28:58", "user": 789801, "id": 1169552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169553", "text": "_Imported from Lighthouse._\nComment by **Nick Hoffman** - 2011-03-13 21:04:15 UTC\n\n+1 for this. It'll make it much easier to add new nested objects dynamically.\n", "created_at": "2011-05-16 03:28:58", "user": 789801, "id": 1169553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169554", "text": "Attachments saved to Gist: http://gist.github.com/971646\n", "created_at": "2011-05-16 03:28:58", "user": 789801, "id": 1169554}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3430434", "text": "Hi, sorry if this has already been answered, but has fields_for_with_index been added to rails 3? I cannot find it and this functionality seems very useful.\n", "created_at": "2012-01-10 14:32:34", "user": 13421, "id": 3430434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3687117", "text": "I need that too\n", "created_at": "2012-01-27 14:11:48", "user": 527350, "id": 3687117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5083612", "text": "This was added for master (4.0) in the this pull request above.\n", "created_at": "2012-04-12 02:46:26", "user": 47848, "id": 5083612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12342311", "text": "For any monkeys who need a Rails 3.2.9+ monkey patch for this. It's a backport of the relevant changes in @spastorino's Rails 4 patch which is referenced in this thread. _Use at your own risk_. Put in /config/initializers/:\n\n``` ruby\nmodule ActionView\n  module Helpers\n    class FormBuilder\n\n      def index\n        @options[:index] || @options[:child_index]\n      end\n\n      def fields_for(record_name, record_object = nil, fields_options = {}, &block)\n        fields_options, record_object = record_object, nil if record_object.is_a?(Hash) && record_object.extractable_options?\n        fields_options[:builder] ||= options[:builder]\n        fields_options[:parent_builder] = self\n        fields_options[:namespace] = options[:namespace]\n\n        case record_name\n          when String, Symbol\n            if nested_attributes_association?(record_name)\n              return fields_for_with_nested_attributes(record_name, record_object, fields_options, block)\n            end\n          else\n            record_object = record_name.is_a?(Array) ? record_name.last : record_name\n            record_name   = ActiveModel::Naming.param_key(record_object)\n        end\n\n        index = if options.has_key?(:index)\n                  options[:index]\n                elsif defined?(@auto_index)\n                  self.object_name = @object_name.to_s.sub(/\\[\\]$/,\"\")\n                  @auto_index\n                end\n\n        record_name = index ? \"#{object_name}[#{index}][#{record_name}]\" : \"#{object_name}[#{record_name}]\"\n        fields_options[:child_index] = index\n\n        @template.fields_for(record_name, record_object, fields_options, &block)\n      end\n\n      def fields_for_with_nested_attributes(association_name, association, options, block)\n        name = \"#{object_name}[#{association_name}_attributes]\"\n        association = convert_to_model(association)\n\n        if association.respond_to?(:persisted?)\n          association = [association] if @object.send(association_name).is_a?(Array)\n        elsif !association.respond_to?(:to_ary)\n          association = @object.send(association_name)\n        end\n\n        if association.respond_to?(:to_ary)\n          explicit_child_index = options[:child_index]\n          output = ActiveSupport::SafeBuffer.new\n          association.each do |child|\n            options[:child_index] = nested_child_index(name) unless explicit_child_index\n            output << fields_for_nested_model(\"#{name}[#{options[:child_index]}]\", child, options, block)\n          end\n          output\n        elsif association\n          fields_for_nested_model(name, association, options, block)\n        end\n      end\n\n    end\n  end\nend\n```\n", "created_at": "2013-01-16 21:52:40", "user": 27655, "id": 12342311}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12349441", "text": "johnnyshields, thank you so much for posting this patch. Timing was perfect.\n", "created_at": "2013-01-17 01:00:01", "user": 1278951, "id": 12349441}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12354443", "text": "My pleasure, @KenStipek!\n", "created_at": "2013-01-17 04:52:13", "user": 27655, "id": 12354443}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3457\nCreated by **blythe** - 2009-11-04 21:11:46 UTC\n\nSince Sweeper is a singleton(derived from `ActiveRecord::Observer` or `ActiveModel::Observer` edge) it seems that multiple threads could modify the single controller instance set and cleared in the around_filter.\n\n```\n  class Sweeper < ActiveRecord::Observer #:nodoc:\n    attr_accessor :controller\n\n    def before(controller)\n      self.controller = controller\n      callback(:before) if controller.perform_caching\n    end\n\n    def after(controller)\n      callback(:after) if controller.perform_caching\n      # Clean up, so that the controller can be collected after this request\n      self.controller = nil\n    end\n```\n\nWould using `Thread.current` be preferable?\n", "labels": [], "number": 643, "updated_at": "2011-12-13 16:12:36", "user": 789801, "closed_at": "2011-05-21 15:11:55", "id": 904279, "title": "ActionController::Caching::Sweeper controller instance is not thread safe", "url": "https://api.github.com/repos/rails/rails/issues/643", "created_at": "2011-05-16 03:29:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169555", "text": "_Imported from Lighthouse._\nComment by **Timothy Jones** - 2010-02-04 05:12:55 UTC\n\n+1\n", "created_at": "2011-05-16 03:29:04", "user": 789801, "id": 1169555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169557", "text": "_Imported from Lighthouse._\nComment by **Michael Rykov** - 2010-04-07 20:07:43 UTC\n\nThis often yields to the following errors when two requests overlap on the sweeper\n\n``` exception\nNoMethodError (undefined method `controller_name' for nil:NilClass):\n  ...actionpack-2.3.5/lib/action_controller/caching/sweeper.rb:32:in `callback'\n  ...actionpack-2.3.5/lib/action_controller/caching/sweeper.rb:14:in `after'\n  ...actionpack-2.3.5/lib/action_controller/filters.rb:208:in `around_proc'\n```\n\nWorkaround:\n\n``` ruby\nclass ActionController::Caching::Sweeper\n  def controller\n    Thread.current[:\"#{self}_controller\"]\n  end\n\n  def controller=(c)\n    Thread.current[:\"#{self}_controller\"] = c\n  end\nend  \n```\n", "created_at": "2011-05-16 03:29:05", "user": 789801, "id": 1169557}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169558", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2010-12-15 05:01:06 UTC\n\n+1\n\nRan in to this (several times a second...) when trying to use Rails with config.threadsafe!\n", "created_at": "2011-05-16 03:29:05", "user": 789801, "id": 1169558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169559", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2010-12-20 02:37:03 UTC\n\nI'd take this as fix for 2-3-stable and possibly 3-0-stable.  but for master we should probably do this _right_ and have a sweeper instance per controller rather than a weird 'instance variable backed by a thread local'.  There's a reason why we have a controller per request rather than request, session, etc all being in Thread.current.\n\nCare to take a stab at that larger refactoring?\n", "created_at": "2011-05-16 03:29:05", "user": 789801, "id": 1169559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169560", "text": "_Imported from Lighthouse._\nComment by **Matt D** - 2011-02-09 22:31:01 UTC\n\nRunning into this issue regularly in production. +1\n", "created_at": "2011-05-16 03:29:06", "user": 789801, "id": 1169560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169561", "text": "Attachments saved to Gist: http://gist.github.com/971647\n", "created_at": "2011-05-16 03:29:06", "user": 789801, "id": 1169561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1554949", "text": "This has not yet been solved Can the issue be reopened?\n", "created_at": "2011-07-12 15:12:39", "user": 7229, "id": 1554949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3124618", "text": "I'm also still running into this on 2.3.14. Is this something that could still be accepted into 2-3-stable?\n", "created_at": "2011-12-13 15:43:00", "user": 64751, "id": 3124618}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3125019", "text": "Monkey patch for 2.3.14, for those who can't wait :-)\n\n```\n# Fix https://github.com/rails/rails/issues/643\nmodule ActionController::Caching\n  class Sweeper < ActiveRecord::Observer\n    def controller\n      Thread.current[\"#{self.class.name}_controller\"]\n    end\n\n    def controller=(controller)\n      Thread.current[\"#{self.class.name}_controller\"] = controller\n    end\n\n  private\n\n    def method_missing(method, *arguments, &block)\n      return if controller.nil?\n      controller.__send__(method, *arguments, &block)\n    end\n  end\nend\n```\n", "created_at": "2011-12-13 16:12:36", "user": 64751, "id": 3125019}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3461\nCreated by **Helmut Juskewycz** - 2010-09-16 10:34:23 UTC\n\nI have two models: Project and Tags\n\n``` ruby\nclass Project < ActiveRecord::Base\n  has_many :tags, :dependent => :destroy\nend\n\nclass Tag < ActiveRecord::Base\n  belongs_to :project, :touch => true\nend\n```\n\nAnd every project must have at least one tag (I skipped the valiations). So when project.destroy is called, I get the following error message:\n\n...application/vendor/rails/activerecord/lib/active_record/validations.rb:1090:in `save_without_dirty!'\n...application/vendor/rails/activerecord/lib/active_record/dirty.rb:87:in`save_without_transactions!'\n...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'\n...application/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:136:in`transaction'\n...application/vendor/rails/activerecord/lib/active_record/transactions.rb:182:in `transaction'\n...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in`save!'\n...application/vendor/rails/activerecord/lib/active_record/transactions.rb:208:in `rollback_active_record_state!'\n...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in`save!'\n...application/vendor/rails/activerecord/lib/active_record/timestamp.rb:37:in `touch'\n...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in`send'\n...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in `method_missing'\n...application/vendor/rails/activerecord/lib/active_record/associations.rb:1380:in`belongs_to_touch_after_save_or_destroy_for_project'\n...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'\n...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in`evaluate_method'\n...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'\n...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:93:in`run'\n...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in `each'\n...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in`send'\n\nIt seems that every tag.destroy call project.touch, and my guess the last touch is invalid because the project needs at least one tag. In my opinion, when the project is destroyed it shouldn't be touched at all.\n\nDoes someone know a workaround? Thanks\n", "labels": [], "number": 644, "updated_at": "2011-05-21 15:11:56", "user": 789801, "closed_at": "2011-05-21 15:11:55", "id": 904281, "title": "Touch called on parent destroy", "url": "https://api.github.com/repos/rails/rails/issues/644", "created_at": "2011-05-16 03:29:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169562", "text": "_Imported from Lighthouse._\nComment by **joel** - 2010-08-03 16:34:46 UTC\n\nWhy has this not been addressed?  This is affecting my application also, you should be able to limit :touch to save, update, or destroy.  Otherwise validations are running on an object that is trying to be destroyed (the parent in the dependent destroy).\n", "created_at": "2011-05-16 03:29:12", "user": 789801, "id": 1169562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169563", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-08-03 17:54:03 UTC\n\n@Joel what version of rails you are using?\n", "created_at": "2011-05-16 03:29:13", "user": 789801, "id": 1169563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169564", "text": "_Imported from Lighthouse._\nComment by **perrycz** - 2010-09-15 00:03:02 UTC\n\nSame here. Tested on Rails 2.3.8 and 2.3.9.\n", "created_at": "2011-05-16 03:29:13", "user": 789801, "id": 1169564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169565", "text": "_Imported from Lighthouse._\nComment by **Tony Daly** - 2011-01-24 18:25:32 UTC\n\nAny news on this? Also experiencing this in 2.3.8.\n", "created_at": "2011-05-16 03:29:26", "user": 789801, "id": 1169565}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169566", "text": "_Imported from Lighthouse._\nComment by **Ryan Wallace** - 2011-03-16 22:39:12 UTC\n\nFYI: This is fixed in Rails 3\n", "created_at": "2011-05-16 03:29:27", "user": 789801, "id": 1169566}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [3765168, 41740]}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3486\nCreated by **Jordan Brough** - 2011-04-22 05:48:03 UTC\n\nThis is a patch to enable ActiveRecord to identify db-generated errors for unique constraint violations.  For example, it makes the following work _without_ declaring a validates_uniqueness_of:\n\n```\ncreate_table \"users\" do |t|\n  t.string   \"email\",   :null => false\nend\nadd_index \"users\", [\"email\"], :unique => true\n```\n\n```\nclass User < ActiveRecord::Base\nend\n```\n\n```\nUser.create!(:email => 'asdf@asdf.com')\nu = User.create(:email => 'asdf@asdf.com')\nu.errors[:email]\n=> \"has already been taken\"\n```\n\nThe benefits are speed, ease of use, and completeness --\n## Speed\n\nWith this approach you don't need to do a db lookup to check for uniqueness when saving (which can sometimes be quite slow when the index is missed -- https://rails.lighthouseapp.com/projects/8994/tickets/2503-validates_uniqueness_of-is-horribly-inefficient-in-mysql ).  If you really care about validating uniqueness you're going to have to use database constraints anyway so the database will validate uniqueness no matter what and this approach removes an extra query.  Checking the index twice isn't a problem for the DB (it's cached the 2nd time around), but saving a DB round-trip from the application is a big win.\n## Ease of use\n\nGiven that you have to have db constraints for true uniqueness anyway, this approach will let everything just happen automatically once the db constraints are in place.  You can still use validates_uniqueness_of if you want to.\n## Completeness\n\nvalidates_uniqueness_of has always been a bit of a hack -- it can't handle race conditions properly and results in exceptions that must be handled using somewhat redundant error handling logic.  (See \"Concurrency and integrity\" section in http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html)\n\nSome things to consider with this approach are:\n1. u.valid? returns true before `save` is called since the save must be attempted for the error to be caught.  However, you can still use validates_uniqueness_of in combination with this approach to keep `valid?` working (as far as it can work).\n2. In order to extract the field names of the unique constraint that was violated I am doing a DB lookup after the `save` fails (to query the DB indexes).  If this is a 'bad thing' we could also investigate pre-caching the indexes so that the DB lookup isn't necessary.\n3. It could be (I have no data on this) that applications with high levels of unique-conflicts might see a performance hit by using this approach instead of validates_uniqueness_of, depending on how the DB handles rolling back from a failed update/insert.  However, this patch improves the common case and and anyone with a high percentage of rollbacks that does see a performance hit can just add the validates_uniquenes_of constraint.\n\nI've implemented handling for mysql (tested on 5.0 & 5.1), sqlite (tested on 3.6.11) & postgres (tested on 8.3.6) with graceful failover if the db error message can't be parsed or for other dbs that don't handlers written for them. (Outputs a generic error message in that case).\n\nI added handling for composite unique indexes as follows:\n\n```\n# composite unique index on [:field1, :field2, :field3]\nu1 = User.create!(:field1 => 'a', :field2 => 'a', :field3 => 'a')\nu2 = User.create(:field1 => 'a', :field2 => 'a', :field3 => 'a')\nu2.errors[:field1]\n=> [\"has already been taken for field2/field3\"]\n```\n\nPatches attached for master and 2-3-stable including tests.  Thoughts?\n\nNOTE:  The 2-3-stable patch depends on applying the following patches from ticket #2419 (which seems like a good idea to me anyway, given that they apply cleanly).  Do the follwing before trying to apply to 2-3-stable:\n\n```\ngit co 2-3-stable\ngit cherry-pick 4d614ec0429ce40c4784162c45ed06e125c0d7de\ngit cherry-pick 605acee71391729ae82ba9012bc37f2f1716fb80\ngit cherry-pick 9b39032925b68a724bd75174db642bc3d2f891fb\n# now apply 2-3-stable patch\n```\n", "labels": [], "number": 645, "updated_at": "2017-04-20 09:41:47", "user": 789801, "closed_at": "2011-05-21 15:11:56", "id": 904283, "title": "Alternative to validates_uniqueness_of using db constraints", "url": "https://api.github.com/repos/rails/rails/issues/645", "created_at": "2011-05-16 03:29:33", "comments": [{"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169567", "text": "_Imported from Lighthouse._\nComment by **JasonKing** - 2009-11-19 18:21:41 UTC\n\nThat looks really nice.  I don't have time to test it right now, but +1 on a read-through.\n", "created_at": "2011-05-16 03:29:33", "user": 789801, "id": 1169567}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169568", "text": "_Imported from Lighthouse._\nComment by **JasonKing** - 2009-11-19 18:30:02 UTC\n\n...although, the core behavior should be consistent - ie. throw an exception on any DB error.  The Rails user should have to do _something_ in order to get the special behavior in your patch.\n\nMaybe you could rewrite so that the special handling of the constraint exception only happens if the user specifies vuo in their model?\n", "created_at": "2011-05-16 03:29:33", "user": 789801, "id": 1169568}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169569", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2009-12-02 22:42:21 UTC\n\n+1, this feature looks great! If save! and such which should throw an exception if there is an error do with this patch, then I'm fine using it by default. It's not important to me as a user whether the error was raised in a validator or by the DB itself, as long as the DB is not changed either way.\n", "created_at": "2011-05-16 03:29:34", "user": 789801, "id": 1169569}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169570", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-12-22 07:21:57 UTC\n\nGreat patch. Could you rebase against latest master + 2-3-stable?\n", "created_at": "2011-05-16 03:29:35", "user": 789801, "id": 1169570}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169571", "text": "_Imported from Lighthouse._\nComment by **Jordan Brough** - 2009-12-22 16:12:09 UTC\n\nSure thing, attached.  2-3-stable patch now has pre-req patches rolled into it.\n", "created_at": "2011-05-16 03:29:35", "user": 789801, "id": 1169571}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169572", "text": "_Imported from Lighthouse._\nComment by **blythe** - 2009-12-25 05:00:11 UTC\n\n+1! Super excited to see this patch! It would be nice to populate the AR error messages for save! before raising the exception as well, to be consistent with standard validation functionality. Those who make heavy use of save!/rescue RecordInvalid will miss out.\n\nSince this looks wrapped up, I pulled some changes from my [similar 2.3 gem](http://github.com/blythedunham/rails_devs_for_data_integrity), and logged a separate ticket #3614 to resolve this and some of the other inconsistencies mentioned above. It add hooks to `validates_uniqueness_of` so developers can explicitly declare intent to use this alternative, provide custom error messages, and raises RecordInvalid instead of RecordNotUnique errors consistent with AR validation functionality.\n", "created_at": "2011-05-16 03:29:36", "user": 789801, "id": 1169572}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169573", "text": "_Imported from Lighthouse._\nComment by **Jordan Brough** - 2010-01-16 03:51:15 UTC\n\nAttaching updated patches rebased against latest master + 2-3-stable.  Re-ran activerecord tests successfully on mysql (5.0.41, 5.1.40), sqlite (3.6.11) & postgres (8.3.6).\n\nI've included an extra patch in each to add bang method handling.  (thanks to blythe for pointing that out!).\n\nI don't agree with trying to squeeze `validates_uniqueness_of` into use here.  The model can't configure or enable/disable the DB constraint and I think it's confusing to pretend that it does.  The exception will happen regardless of model settings so Rails ought to just handle it automatically as gracefully as possible.  Custom error messages can already be configured via config/locales files. e.g., adding this:\n\n```\nen:\n  activerecord:\n    errors:\n      models:\n        user:\n          attributes:\n            email:\n              taken: \"has already been taken - custom\"\n              taken_multiple: \"has already been taken for {{context}} - custom\"\n              taken_generic: \"Unique requirement not met - custom\"\n```\n\nto config/locales/en.yml.\n", "created_at": "2011-05-16 03:29:36", "user": 789801, "id": 1169573}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169574", "text": "_Imported from Lighthouse._\nComment by **Jordan Brough** - 2010-01-16 04:00:01 UTC\n\nOops, had a small typo in one of the test assertion messages.  updates attached.\n", "created_at": "2011-05-16 03:29:36", "user": 789801, "id": 1169574}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169575", "text": "_Imported from Lighthouse._\nComment by **Jordan Brough** - 2010-02-09 21:25:33 UTC\n\nJeremy - attached updated patch rebased against latest master.  Still interested in the patch?  Any chance of getting it into Rails 3 betas?\n\nRan the tests against postgres 8.3.6, mysql 5.1.40 & 5.0.41, and sqlite3 3.6.11 on both master and on 2-3-stable.\n", "created_at": "2011-05-16 03:29:37", "user": 789801, "id": 1169575}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169576", "text": "_Imported from Lighthouse._\nComment by **J.D. Hollis** - 2010-02-11 20:13:39 UTC\n\n+1! I could use this (today).\n", "created_at": "2011-05-16 03:29:38", "user": 789801, "id": 1169576}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169577", "text": "_Imported from Lighthouse._\nComment by **Christos Zisopoulos** - 2010-02-11 21:44:53 UTC\n\nI would happily +1 if the following caveat was addressed.\n\nJordan - at least for MySQL using the NDB (cluster) engine , UNIQUE indexes can throw another error message:\n\n```\n ERROR 1169 (23000): Can't write, because of unique constraint, to table <table>\n```\n\nSee here: http://bugs.mysql.com/bug.php?id=21881\n\nI've also come across this error in the MySQL list of error messages, but I am not sure it applies to unique indexes.\n\n```\n Error: 1291 SQLSTATE: HY000 (ER_DUPLICATED_VALUE_IN_TYPE)\n```\n\n(list of MySQL errors: http://dev.mysql.com/doc/refman/5.1/en/error-messages-server.html)\n", "created_at": "2011-05-16 03:29:39", "user": 789801, "id": 1169577}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169578", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2010-02-24 19:25:31 UTC\n\n+1\n", "created_at": "2011-05-16 03:29:39", "user": 789801, "id": 1169578}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169579", "text": "_Imported from Lighthouse._\nComment by **Kyle J. Ginavan** - 2010-04-02 20:09:24 UTC\n\n+1\n", "created_at": "2011-05-16 03:29:40", "user": 789801, "id": 1169579}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169580", "text": "_Imported from Lighthouse._\nComment by **Lawrence Pit** - 2010-04-30 07:17:51 UTC\n\n+1 on the idea, not for the implementation as is. I don't believe these constraint errors are always presented in English Instead of checking for English words like 'unique constraint', 'Duplicate entry', etc. I think it'd be better to check for the error codes. So e.g. for Oracle you'd check for \"ORA-00001:\", for mysql you'd check for ER_DUP_KEYNAME, ER_DUP_UNIQUE and ER_DUPLICATED_VALUE_IN_TYPE, etc.\n", "created_at": "2011-05-16 03:29:40", "user": 789801, "id": 1169580}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169581", "text": "_Imported from Lighthouse._\nComment by **JasonKing** - 2010-04-30 17:07:25 UTC\n\nThis would require more changes to the AR API, to expose those error numbers before these exceptions are thrown.\n\nGenerally, I think this would be a really good idea.  I'm really not that familiar with the other Ruby ORMs, but exposing things like the error numbers, seems like a robust and mature step for AR to take.\n", "created_at": "2011-05-16 03:29:40", "user": 789801, "id": 1169581}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169582", "text": "_Imported from Lighthouse._\nComment by **Jordan Brough** - 2010-05-14 19:53:28 UTC\n\nUpdated patches rebased onto latest master & 2-3-stable.\n\nLawrence - your complaint is about detecting unique constraint violations, which is something that's already in Rails 3 (see http://github.com/rails/rails/commit/53a3eaa8 and note that error codes [are being used](http://github.com/rails/rails/blob/a0621c1086165e4b3cff71b54f08a190851b6314/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb#L614-618) in some cases.)  Whether to improve that is probably a good item for a separate ticket.  This ticket is about using the db (for the reasons above) to enforce uniqueness while making it fit into the standard AR model as nicely as possible.  Figuring out which columns caused the unique constraint violation is something that db's _can't_ provide via error numbers.  I see your point about the parsing failing in non-english, but this patch was designed to fail gracefully in that case to a generic uniqueness message while still bringing normal AR error handling.  Patches that build on this one to add multi-language support seem like a great idea to me.\n\nChristos - the issue you brings up spans both the earlier commit I mentioned as well as mine.  Sounds like a great add-on patch (to address it on both levels) after we get this committed.  In any case, this patch won't make the situation any worse for NDB.  As I don't have NDB, if you could help out on figuring out an additional patch for NDB handling it'd be much appreciated.\n", "created_at": "2011-05-16 03:29:41", "user": 789801, "id": 1169582}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169583", "text": "_Imported from Lighthouse._\nComment by **Arfon Smith** - 2010-10-24 22:06:37 UTC\n\nDid this ever make it into 2.3.X ?\n", "created_at": "2011-05-16 03:29:42", "user": 789801, "id": 1169583}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169584", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:23:50 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:29:42", "user": 789801, "id": 1169584}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169585", "text": "_Imported from Lighthouse._\nComment by **Jordan Brough** - 2011-02-05 06:46:50 UTC\n\nI'm attaching updated patches rebased on top of latest master and 2-3-stable.\n\nFwiw, we've been using this in production at animoto.com with Rails 2.3 for over a year now.  This patch makes it easy to have reliable and fast uniqueness in a way that plays nicely with Rails.  The most common cases are covered well and the less common cases have sensible fallbacks, or at least don't make things worse than they were before.\n\nI'd love to get feedback from the Rails team on whether they think this is something they would consider adding.  Jeremy commented initially that it sounded like a good idea and I've continued to rebase and attach patches (and use them at Animoto) but would love to hear some feedback.  Any thoughts?\n\nAll tests pass for me with MySQL 5.1.50, PostgreSQL 8.4.6 and SQLite 3.7.0.1.\n\n[state:open]\n", "created_at": "2011-05-16 03:29:42", "user": 789801, "id": 1169585}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169586", "text": "_Imported from Lighthouse._\nComment by **Arfon Smith** - 2011-02-05 20:49:06 UTC\n\n+1\n", "created_at": "2011-05-16 03:29:43", "user": 789801, "id": 1169586}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169587", "text": "Attachments saved to Gist: http://gist.github.com/971648\n", "created_at": "2011-05-16 03:29:44", "user": 789801, "id": 1169587}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10949137", "text": "Hi. This issue seams abandoned. Why ? It was a great idea :confused:\n", "created_at": "2012-12-03 11:17:04", "user": 119303, "id": 10949137}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10949770", "text": "@simonc Active Record does raise exceptions when unique and foreign key constraints are violated - see commits: 53a3eaa8603cf6e7a3c007f327fe5d3bb68de1ee, 00a5fd3d18ac908af688c5944922cf69c56e850b and b5dfdc714fab7d2836e0a979ca88b4a17db9ec06.\n\nThe reasons for it not being incorporated as part of `validates_uniqueness_of` are lost in the mists of time but I suspect it's to do with backwards compatibility, cross database compatibility and applications varying on how they want/need to handle these kind of errors.\n", "created_at": "2012-12-03 11:40:07", "user": 6321, "id": 10949770}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10949785", "text": "Also, @simonc , many issues that were imported from lighthouse were closed as stale; as you can see, this hasn't been touched in two years.\n", "created_at": "2012-12-03 11:40:52", "user": 27786, "id": 10949785}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10949912", "text": "IIRC all the imported issues were closed after importing them as there was just too much noise.\n", "created_at": "2012-12-03 11:46:00", "user": 6321, "id": 10949912}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10949918", "text": "Yes I saw it in the comments but I thought it would worth a shot to ask.\nI came to this issue because I have an issue with `validates_uniqueness_of` and a db index that still makes this exception raise. But it's out of this issue's scope.\n\nThanks !\n", "created_at": "2012-12-03 11:46:12", "user": 119303, "id": 10949918}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/239179748", "text": "This Gem seems to resolve it!:  https://github.com/reverbdotcom/rescue-unique-constraint\n", "created_at": "2016-08-11 14:35:58", "user": 3765168, "id": 239179748}, {"reactions": {"+1": [3765168, 41740]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/295654538", "text": "thanks @williantenfen, hopefully something more general goes into the core!", "created_at": "2017-04-20 09:41:47", "user": 41740, "id": 295654538}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3502\nCreated by **Arya Asemanfar** - 2011-02-19 01:45:27 UTC\n\nIf there is a race to create a new record for the same ID, and you try to reload, the resulting record is in an inconsistent state.\n\nFor example, if two processes do a find_or_initialize_by_id(5) and both come back with new records, then the first process saves, then the second tries and throws a ActiveRecord::RecordNotUnique. If you rescue that and do record.reload, it will load the record the first process saved, but without clearing the new_record flag. So if you try to save that record in the process that reloaded, it does an insert and throws another ActiveRecord::RecordNotUnique. The behavior is inconsistent, it should either not allow you to call reload on a new_record, or it should clear the new_record flag if the reload succeeded. The documentation for new_record? says that it returns false if a record for the object doesn't exist yet, which maybe indicates the fix should be to clear the new_record flag.\n", "labels": [], "number": 646, "updated_at": "2011-05-21 15:11:56", "user": 789801, "closed_at": "2011-05-21 15:11:56", "id": 904285, "title": "Reloading a new record results in an inconsistent state", "url": "https://api.github.com/repos/rails/rails/issues/646", "created_at": "2011-05-16 03:29:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169588", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2009-11-22 07:48:10 UTC\n\nWhy on earth are you trying to pick an ID for the record before it's saved? The whole situation has \"race condition disaster\" written all over it.\n", "created_at": "2011-05-16 03:29:50", "user": 789801, "id": 1169588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169589", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-11-22 07:50:57 UTC\n\nYes, indeed. Patch welcome for next 2.3 release!\n", "created_at": "2011-05-16 03:29:50", "user": 789801, "id": 1169589}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169590", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2009-11-22 07:51:43 UTC\n\nMatt, the scenario does have code smell, but it's broken nonetheless :)\n", "created_at": "2011-05-16 03:29:50", "user": 789801, "id": 1169590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169591", "text": "_Imported from Lighthouse._\nComment by **Arya Asemanfar** - 2009-11-22 07:52:28 UTC\n\n@matt Facebook application, we use their facebook user id as the id column. When you interact with a friend on the app, their record is created by their ID.\n", "created_at": "2011-05-16 03:29:51", "user": 789801, "id": 1169591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169592", "text": "_Imported from Lighthouse._\nComment by **Arya Asemanfar** - 2009-11-22 07:54:03 UTC\n\nI should clarify that the ID column is not an auto-increment column.\n", "created_at": "2011-05-16 03:29:51", "user": 789801, "id": 1169592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169593", "text": "_Imported from Lighthouse._\nComment by **Arya Asemanfar** - 2010-01-18 01:29:55 UTC\n\nHere is a patch and test for this ticket.\n\nMy earlier comment cleared the assigned user because I had loaded the form before it was assigned, so I'm assigning it back to Jeremy. Sorry about that.\n", "created_at": "2011-05-16 03:29:51", "user": 789801, "id": 1169593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169594", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-05-16 01:41:11 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20088)]\n", "created_at": "2011-05-16 03:29:52", "user": 789801, "id": 1169594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169595", "text": "_Imported from Lighthouse._\nComment by **Anil Wadghule** - 2010-05-16 15:04:03 UTC\n\n-1\n\nWithout the fix, test doesn't fail on Rails master and Rails 2-3 stable.\n", "created_at": "2011-05-16 03:29:52", "user": 789801, "id": 1169595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169596", "text": "_Imported from Lighthouse._\nComment by **Bastes** - 2010-05-16 15:05:48 UTC\n\nLooks fixed already, patch does nothing.\n", "created_at": "2011-05-16 03:29:52", "user": 789801, "id": 1169596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169597", "text": "_Imported from Lighthouse._\nComment by **Arya Asemanfar** - 2010-05-16 18:14:53 UTC\n\nPatch doesn't apply anymore because the relevant code was moved from base.rb to persistence.rb, but the problem still exists. I just tried the test on master and it's still broken. Looking through the code also confirms that new_record is not set to false after successful reload, and save checks \"new_record?\" and then chooses \"create\" which does an insert.\n", "created_at": "2011-05-16 03:29:53", "user": 789801, "id": 1169597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169598", "text": "_Imported from Lighthouse._\nComment by **Colin Casey** - 2010-05-16 21:19:57 UTC\n\n+1 test does fail on master.\n\nRewrote Arya's patch so it applies to master.  I've attached a patch and I've attached a test.\n", "created_at": "2011-05-16 03:29:53", "user": 789801, "id": 1169598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169599", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-23 16:54:44 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20606)]\n", "created_at": "2011-05-16 03:29:54", "user": 789801, "id": 1169599}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169600", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-24 08:40:52 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20631)]\n", "created_at": "2011-05-16 03:29:54", "user": 789801, "id": 1169600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169601", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-25 22:45:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/20816)]\n", "created_at": "2011-05-16 03:29:54", "user": 789801, "id": 1169601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169602", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:50 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 03:29:55", "user": 789801, "id": 1169602}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169603", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-09-23 09:56:58 UTC\n\nIMHO, the correct way to fix this would be to not allow reloading of new records at all. After all, the whole idea of reloading is to re-fetch the record from the database and bring it back in sync with the reloaded object. Since a new record is not yet in the database, reloading does not make sense conceptually.\n", "created_at": "2011-05-16 03:29:55", "user": 789801, "id": 1169603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169604", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-08 14:43:34 UTC\n\n-1 I agree with David, I don't see the use of reloading a new record.\n", "created_at": "2011-05-16 03:29:55", "user": 789801, "id": 1169604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169605", "text": "_Imported from Lighthouse._\nComment by **Arya Asemanfar** - 2010-10-09 21:20:41 UTC\n\nI don't disagree. In fact that solution was stated in my original ticket. The reason I patched it the way I did was because my particular use case needed me to fetch the record I thought was new, but wasn't, from the database. So if I didn't do it that way, I'd have to do something like record.replace(Model.find(record.id)).\n\nWhether or not use you a non-auto-increment PK is another argument, but that case is clearly supported. So in conclusion, it's still inconsistent, and either solution will resolve the inconsistency.\n", "created_at": "2011-05-16 03:29:56", "user": 789801, "id": 1169605}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169606", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-11 06:34:30 UTC\n\nAs far as I'm concerned, I'd rather see #reload raise if passed a new_record?\n", "created_at": "2011-05-16 03:29:56", "user": 789801, "id": 1169606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169607", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 11:09:27 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:29:56", "user": 789801, "id": 1169607}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169608", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:26:21 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:29:56", "user": 789801, "id": 1169608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169609", "text": "Attachments saved to Gist: http://gist.github.com/971649\n", "created_at": "2011-05-16 03:29:57", "user": 789801, "id": 1169609}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3521\nCreated by **Scott Windsor** - 2011-02-22 08:32:33 UTC\n\nOne common pattern that I keep repeating is lots of repeated code to handle cache counters based on a flag or status.  Take the example of Posts & Comments.  I want a counter cache for comments, but I don't want to include ones that are deleted.  This should also take into account updates as well as creates & deletes.\n\nHere's an example of the syntax:\n\n  belongs_to :post, :counter_cache => {:condition => lambda {|c| !c.deleted } }\n\nThis only increments or decrements the counter if the lambda returns true (and the lambda has self passed in).\n\nI've added support for this in the following patch.  I've also included unit tests for this functionality.  This works in 2-3-stable, but I haven't tested against master.\n", "labels": [], "number": 647, "updated_at": "2011-05-21 15:11:56", "user": 789801, "closed_at": "2011-05-21 15:11:56", "id": 904286, "title": "[PATCH] Add conditional counter cache", "url": "https://api.github.com/repos/rails/rails/issues/647", "created_at": "2011-05-16 03:30:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169610", "text": "_Imported from Lighthouse._\nComment by **Les Nightingill** - 2009-12-12 10:48:31 UTC\n\nNot convinced that the condition pattern is as common as Scott suggests, but I definitely feel that the omission of the counter_cache increment/decrement method for updates is an oversight and should be included in Rails.\n", "created_at": "2011-05-16 03:30:03", "user": 789801, "id": 1169610}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169611", "text": "_Imported from Lighthouse._\nComment by **Scott Windsor** - 2009-12-12 15:48:09 UTC\n\nThe conditional happens more frequently in my code because I tend to use status columns on all of my tables.  That way, I only ever soft delete something (changing the status rather than actually deleting the row).  But, if the status is deleted, the user likely doesn't see the object listed anymore, so the counts are off.  I also always have to write multiple callbacks as well - since checking a column for changes doesn't work on create (and there's no way to tell if an object is new in after_save), I have to make two callbacks, one for after_update and one for after_create - and they usually both have very similar logic.  Mostly, I'd just like to cut down on the redundant code in my models.\n", "created_at": "2011-05-16 03:30:03", "user": 789801, "id": 1169611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169612", "text": "_Imported from Lighthouse._\nComment by **Cyrille** - 2010-01-07 09:47:33 UTC\n\n+1\n\nImagine if your models have state machine most of the time you want to count only 'active' elements.\nVery common e-commerce case : product and category. In front office you might want to display very often number of \"active\" products per category. Make sense. Same for forum posts where posts can be soft deleted for moderation. Another great one is comments and spam you might want to display only the number of comments not marked as spam or under_moderation\n", "created_at": "2011-05-16 03:30:03", "user": 789801, "id": 1169612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169613", "text": "_Imported from Lighthouse._\nComment by **cricy** - 2010-01-26 08:35:43 UTC\n\nbelongs_to :post, :counter_cache => (:deleted ? 1 :0)\n", "created_at": "2011-05-16 03:30:04", "user": 789801, "id": 1169613}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169614", "text": "_Imported from Lighthouse._\nComment by **cricy** - 2010-01-26 08:36:20 UTC\n\nbelongs_to :post, :counter_cache => (:deleted ? true : false )\n", "created_at": "2011-05-16 03:30:04", "user": 789801, "id": 1169614}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169615", "text": "_Imported from Lighthouse._\nComment by **Scott Windsor** - 2010-01-26 16:41:59 UTC\n\ncricy, I don't quite think that sytanx would work because it's not valid ruby.  belongs_to is still a function call that takes arguments (and in the above cases a symbol, then a hash with options.  Additionally, the \":deleted ? true : false\" expression would be evaluated too early (at class compilation time, and not at execution time).  The only real way around this is a lambda.  I could simplify the code to:\n\nbelongs_to :post, :counter_cache => lambda {|c| !c.deleted }\n\nBut then, there's no way for the existing option of having a custom column name to be passed in W\n\nWhich is what the current options allow:\n\nbelongs_to :post, :counter_cache => :users_postz\n\nSo the only way to allow both of these existing options is to provide a hash as the argument, in which case the logic can handle both options (and future options as well).\n\nbelongs_to :post, :counter_cache => {:condition => lambda {|c| !c.deleted }, :cache_column => :user_postz}\n", "created_at": "2011-05-16 03:30:04", "user": 789801, "id": 1169615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169616", "text": "_Imported from Lighthouse._\nComment by **Jim Meyer** - 2010-08-23 23:07:50 UTC\n\nDefinite +1 for the functionality. The patch as offered is a good start, but will break some existing functionality. For example, it's perhaps not well known that this is a valid counter cache declaration:\n\n``` ruby\nclass Comment\n  belongs_to :post, :counter_cache => 'visible_comments_count'\nend\n```\n\nThis works because ActiveRecord::Reflection::AssociationReflection#counter_cache_column does this:\n\n``` ruby\n  def counter_cache_column\n    if options[:counter_cache] == true\n      \"#{active_record.name.demodulize.underscore.pluralize}_count\"\n    elsif options[:counter_cache]\n      options[:counter_cache]\n    end\n  end\n```\n\n... so slinging a Hash as :counter_cache won't work. Perhaps better to pass it as :counter_cache_conditions.\n\nThe other breakage has to do with ActiveRecord::Base.reset_counters, which currently expects to operate entirely inside the database. If the counter cache's conditions aren't able to be reduced to SQL, reset_counters must load all counted objects and consider them in Rails-space, which chews up memory and is not likely to perform well for large numbers of counted objects.\n\nI'm working on a fix as a plugin inside an app which needs this; if I manage it well, I'll gemify it and share.\n", "created_at": "2011-05-16 03:30:05", "user": 789801, "id": 1169616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169617", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 21:11:19 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:30:05", "user": 789801, "id": 1169617}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169618", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-10 12:03:24 UTC\n\nUsing the \"patch\" tag instead of prefixing the ticket title with \"[PATCH]\" to make sure patched tickets end up in the [open patches bin](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/bins/5805). :)\n", "created_at": "2011-05-16 03:30:06", "user": 789801, "id": 1169618}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169619", "text": "_Imported from Lighthouse._\nComment by **Szymon Nowak** - 2011-04-27 08:37:13 UTC\n\nWouldn't actually moving `counter_cache` declaration from `belongs_to` to `has_many` solve this problem?\n\n``` ruby\nclass Post\n  has_many :likes, :class_name => \"Vote\", :conditions => { :flag => true }, :counter_cache => true\n  has_many :dislikes, :class_name => \"Vote\", :conditions => { :flag => false }, :counter_cache => \"some_fancy_column_name\"\nend\n\nclass Vote\n  belongs_to :post\nend\n\nPost.first.likes.size # could use proper counter cache\n```\n", "created_at": "2011-05-16 03:30:06", "user": 789801, "id": 1169619}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169620", "text": "_Imported from Lighthouse._\nComment by **swindsor** - 2011-04-27 16:18:23 UTC\n\nThat might be another solution - it's less backwards compatible, but might be a good direction. If you want to add a patch, feel free. Until then, I'm still waiting on someone on the rails team to actually look at this. =/\n", "created_at": "2011-05-16 03:30:07", "user": 789801, "id": 1169620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169621", "text": "Attachments saved to Gist: http://gist.github.com/971650\n", "created_at": "2011-05-16 03:30:07", "user": 789801, "id": 1169621}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3523\nCreated by **Gavin Stark** - 2009-11-30 19:14:24 UTC\n\nWhen using MySQL any existing view will be dumped as a create table. The attached patch excludes any view from being output as a table in schema.rb  Without any schema support for creating views this seems like the most expected behavior.\n", "labels": [], "number": 648, "updated_at": "2011-05-21 15:11:56", "user": 789801, "closed_at": "2011-05-21 15:11:56", "id": 904288, "title": "MySQL adapter should not dump views as create table statements for db:schema:dump", "url": "https://api.github.com/repos/rails/rails/issues/648", "created_at": "2011-05-16 03:30:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169622", "text": "_Imported from Lighthouse._\nComment by **Marshall Huss** - 2009-12-01 02:49:03 UTC\n\n+1 I've seen the same issue.\n", "created_at": "2011-05-16 03:30:32", "user": 789801, "id": 1169622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169623", "text": "_Imported from Lighthouse._\nComment by **Gavin Stark** - 2010-01-17 21:59:48 UTC\n\nHere is a patch against rails master @ c6850d8361bbf288cf3adefd087cb9a4bc9c97bc\n", "created_at": "2011-05-16 03:30:32", "user": 789801, "id": 1169623}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169624", "text": "_Imported from Lighthouse._\nComment by **Gavin Stark** - 2010-01-17 22:11:15 UTC\n\nThe bugmash instructions (for the Jan 2010 bugmash) state I should say: I've attached a patch.  The patch \"mysql_dumper_not_include_views.diff\" is for Rails 2.3 and \"mysql_dont_dump_views_as_tables_30_master.patch\" is against master (3.0pre) at the commit noted above.\n", "created_at": "2011-05-16 03:30:32", "user": 789801, "id": 1169624}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169625", "text": "_Imported from Lighthouse._\nComment by **Gavin Stark** - 2010-05-15 18:06:51 UTC\n\nThe patch mysql_dont_dump_views_as_tables_30_master.patch still passes all tests on rails master @ 3436fdfc12d58925e3d981e0afa61084ea34736c\n", "created_at": "2011-05-16 03:30:32", "user": 789801, "id": 1169625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169626", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:38:51 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:30:33", "user": 789801, "id": 1169626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169627", "text": "_Imported from Lighthouse._\nComment by **Daniel** - 2011-03-10 15:06:27 UTC\n\nCould we reopen it as \"still a problem\" now that I'm commenting on it? I just got bit by this problem in 2.3.11.\n", "created_at": "2011-05-16 03:30:33", "user": 789801, "id": 1169627}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169628", "text": "_Imported from Lighthouse._\nComment by **Daniel** - 2011-03-18 13:26:50 UTC\n\n[state:open]\n", "created_at": "2011-05-16 03:30:33", "user": 789801, "id": 1169628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169629", "text": "_Imported from Lighthouse._\nComment by **Gavin Stark** - 2011-03-19 14:58:10 UTC\n\nI have reimplemented the patch (with a test) against rails 3.0 master at 445241\n", "created_at": "2011-05-16 03:30:34", "user": 789801, "id": 1169629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169630", "text": "_Imported from Lighthouse._\nComment by **Gavin Stark** - 2011-03-19 15:02:45 UTC\n\nDaniel, I have \"worked around\" my patch not being in ActiveRecord by creating config/initializers/schema_dumper.rb with:\n\n```\n# We name all our views beginning with 'view_' and they can be excluded from the schema dump\nActiveRecord::SchemaDumper.ignore_tables = [/view_.+/]\n```\n\nIf you keep a naming scheme for views, this will help.\n", "created_at": "2011-05-16 03:30:34", "user": 789801, "id": 1169630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169631", "text": "_Imported from Lighthouse._\nComment by **barrye (at gmail)** - 2011-03-19 15:19:27 UTC\n\n+1 This is a real problem.\n", "created_at": "2011-05-16 03:30:34", "user": 789801, "id": 1169631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169632", "text": "_Imported from Lighthouse._\nComment by **Daniel** - 2011-03-21 14:05:33 UTC\n\nThanks for the update, Gavin. I discovered the rails_sql_views gem, which is part of the ActiveWarehouse project, and it includes a fix for this problem as well. Here's a link:\n\nhttp://activewarehouse.rubyforge.org/rails_sql_views/\n\nHopefully the Rails team will address this problem soon.\n", "created_at": "2011-05-16 03:30:35", "user": 789801, "id": 1169632}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169633", "text": "Attachments saved to Gist: http://gist.github.com/971651\n", "created_at": "2011-05-16 03:30:35", "user": 789801, "id": 1169633}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3565\nCreated by **Stephen Celis** - 2011-02-22 08:32:35 UTC\n\nThe convenience methods @.first@ and @.last@ on @ActiveRecord::Base@ have had me itching to pass in an integer limit as you can with @Array#first@ and @#last@. E.g.,\n\n``` ruby\narray = [1, 2, \"buckle\", :my, Shoe]\narray.first    # => 1\narray.first(2) # => [1, 2]\narray.first(1) # => [1]\narray.last(2)  # => [:my, Shoe]\n```\n\nAttached is a patch that adds this functionality.\n\n``` ruby\nPerson.first    # => #<Person id: 1>\nPerson.first(2) # => [#<Person id: 1>, #<Person id: 2>]\nPerson.first(1) # => [#<Person id: 1>]\nPerson.last(2)  # => [#<Person id: 49>, #<Person id: 50>]\n```\n\nConsiderations:\n\nActiveRecord::Base subclasses are not kinds of Array, but named scopes and association proxies come closer. Consider the following:\n\n``` ruby\n>> Person.scoped({}).first    # SELECT * FROM `people` LIMIT 1\n=> #<Person>\n>> Person.scoped({}).first(2) # SELECT * FROM `people`\n=> [#<Person>, #<Person>]\n```\n\nThe first gets special treatment. The second does not. In order to make the second consistent, it only makes sense to add the behavior to @ActiveRecord::Base@ as well. (Named scope functionality requires additions to this patch, but I'd prefer a consensus before making any more changes.)\n\nAdditionally, it made the most sense to add logic through to @ActiveRecord.find_initial@, rather than merely to the convenience, surface methods, but this obviously could cause problems for those who have been blindly passing options hashes to @find(:first)@ and @:last@ that include a @:limit@. I'm open to the idea of a less-invasive approach that merely adds the functionality to the convenience methods, but this seemed less desirable and messier.\n\nIf this is of interest to others, it could also be added to @ActiveResource::Base@.\n", "labels": [], "number": 649, "updated_at": "2011-05-21 15:11:57", "user": 789801, "closed_at": "2011-05-21 15:11:56", "id": 904289, "title": "Add limit functionality to find first and last", "url": "https://api.github.com/repos/rails/rails/issues/649", "created_at": "2011-05-16 03:30:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169634", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 11:09:20 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:30:41", "user": 789801, "id": 1169634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169635", "text": "_Imported from Lighthouse._\nComment by **Anil Wadghule** - 2010-10-12 08:10:32 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:30:42", "user": 789801, "id": 1169635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169636", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-12 09:10:45 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:30:43", "user": 789801, "id": 1169636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169637", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-12 09:13:51 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:30:44", "user": 789801, "id": 1169637}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169638", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-13 17:13:26 UTC\n\n@Stephen, this functionality is now already in place in Rails 3.0.0. Marking this ticket as resolved. Feel free to comment, if you think otherwise.\n", "created_at": "2011-05-16 03:30:45", "user": 789801, "id": 1169638}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169639", "text": "_Imported from Lighthouse._\nComment by **Stephen Celis** - 2010-10-13 22:43:22 UTC\n\nDoes not appear to be in place in 3.0.0:\n\n```\n% rails c\nLoading development environment (Rails 3.0.0)\nruby-1.9.2-p0 > User.first 2\n  User Load (0.2ms)  SELECT `users`.* FROM `users`\n => []\nruby-1.9.2-p0 > User.last 2\n  User Load (0.3ms)  SELECT `users`.* FROM `users`\n => []\n```\n", "created_at": "2011-05-16 03:30:46", "user": 789801, "id": 1169639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169640", "text": "_Imported from Lighthouse._\nComment by **Stephen Celis** - 2010-10-13 22:44:33 UTC\n\nThat is, the SQL query is not limited. Please re-open or change to a different state than \"resolved.\"\n", "created_at": "2011-05-16 03:30:46", "user": 789801, "id": 1169640}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169641", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-13 22:47:36 UTC\n\nI can verify this issue exists on Rails 3.\n", "created_at": "2011-05-16 03:30:47", "user": 789801, "id": 1169641}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169642", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-14 05:23:11 UTC\n\n@stephen, patch also does not apply cleanly anymore since there has been much refactoring around ARel. \n\nI misread the second half of your OP and looked on the net result ( which works ) but the query does not since it does not use limit but gets all and then pick n from array.\n\nFeel free to submit another patch.\n", "created_at": "2011-05-16 03:30:48", "user": 789801, "id": 1169642}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169643", "text": "_Imported from Lighthouse._\nComment by **Elad Meidar** - 2010-10-14 14:26:41 UTC\n\nMakes sense that the Rails default would fetch all and select back n accordingly, proper SQL query should be implemented on the adapter level since it involves different syntax for each DBMS.\n", "created_at": "2011-05-16 03:30:49", "user": 789801, "id": 1169643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169644", "text": "_Imported from Lighthouse._\nComment by **Stephen Celis** - 2010-10-15 18:58:45 UTC\n\nI'm happy to fix the patch if there's interest in getting this into Rails.\n\n@Elad, I'm not sure what you're saying. The Rails default for ActiveRecord::Base.first is to fetch one record from the database (with :limit => 1). As soon as you add a numeric argument, however, it fetches all, which is not what I would have expected. The only case I can think of where .first(n) would fetch all is ActiveRecord::Base.all.first(n), because .all returns an Array.\n", "created_at": "2011-05-16 03:30:50", "user": 789801, "id": 1169644}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169645", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:33:09 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:30:51", "user": 789801, "id": 1169645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169646", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-17 11:10:20 UTC\n\nI would add such functionality, anyone have anything against it?\n", "created_at": "2011-05-16 03:30:52", "user": 789801, "id": 1169646}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169647", "text": "Attachments saved to Gist: http://gist.github.com/971652\n", "created_at": "2011-05-16 03:30:53", "user": 789801, "id": 1169647}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3644\nCreated by **ujihisa** - 2011-02-17 06:48:23 UTC\n\nIt may be preferable to show more details in http://localhost:3000/rails/info/properties  for ease of bug reporting.\n", "labels": [], "number": 650, "updated_at": "2011-05-21 15:11:57", "user": 789801, "closed_at": "2011-05-21 15:11:57", "id": 904290, "title": "More Details in /rails/info/properties", "url": "https://api.github.com/repos/rails/rails/issues/650", "created_at": "2011-05-16 03:30:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169648", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-07 21:26:06 UTC\n\nThis patch does not apply cleanly to master. Please re-submit a version that does.\n", "created_at": "2011-05-16 03:30:59", "user": 789801, "id": 1169648}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169649", "text": "_Imported from Lighthouse._\nComment by **ujihisa** - 2010-10-08 19:59:44 UTC\n\nNow I made the newer version of the patch for the latest rails.\n", "created_at": "2011-05-16 03:30:59", "user": 789801, "id": 1169649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169650", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-08 23:02:55 UTC\n\nThank you for your patch.\n", "created_at": "2011-05-16 03:31:00", "user": 789801, "id": 1169650}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169651", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:22:31 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:31:00", "user": 789801, "id": 1169651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169652", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:29:47 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:31:00", "user": 789801, "id": 1169652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169653", "text": "_Imported from Lighthouse._\nComment by **ujihisa** - 2011-02-02 17:33:46 UTC\n\nthanks for letting me know it.\n[state:open]\n", "created_at": "2011-05-16 03:31:01", "user": 789801, "id": 1169653}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169654", "text": "_Imported from Lighthouse._\nComment by **ujihisa** - 2011-04-20 01:12:08 UTC\n\n```\nirb(main):001:0> Date.today - Date.parse('2011-02-02')\n=> (76/1)\n```\n", "created_at": "2011-05-16 03:31:01", "user": 789801, "id": 1169654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169655", "text": "Attachments saved to Gist: http://gist.github.com/971653\n", "created_at": "2011-05-16 03:31:01", "user": 789801, "id": 1169655}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3663\nCreated by **Kai Krakow** - 2011-02-22 08:32:35 UTC\n\nI'm using RestfulAuthentication and discovered a session hijacking issue related due to rails skipping the generation of \"Cache-Control\" headers during redirections. Every default deployment of rails sends headers to make responses non-cacheable which is a security-wise decision. But the problem is, as soon as you call \"redirect_to\" it does no longer generate these default headers BUT it still sends the \"Set-Cookie\" header if you accessed the session before (which you usually do if you create session-based authenticators and redirect back to a previous page). But http responses without \"Cache-Control\" headers are allowed to be cached by either reverse proxies or client caches - and this includes the \"Set-Cookie\" header!\n\nWhat follows is a whole cascade of other problems:\n- \"Location\" headers become cachable (we loose control over if a request is to be redirected or not because the cache decides)\n- \"Set-Cookie\" headers become cacheable which opens Rails to session hijacking on redirects\n- ...\n\nCounter measures:\n- Rails should not send a \"Set-Cookie\" handler if I only did a read access to the session[] hash (it won't change, why send again?)\n- Rails should not skip default headers on redirects\n- Rails should handle bad combinations of Set-Cookie and Cache-Control gracefully (except the user EXPLICITLY wants to make Set-Cookie cachable) and especially never generate those bad combinations\n- Rails should never skip sending default Cache-Control headers if Set-Cookie is to be send (which actually happens in current versions when you use redirect_to)\n\nQuickfix:\n\nOverwrite `redirect_to_full_url` in your `ApplicationController` like so:\n\n``` ruby\nclass ApplicationController < ActionController::Base\n\n  private\n\n  def redirect_to_full_url(url, status)\n    headers[\"Cache-Control\"] = \"private, no-cache, max-age=0, must-revalidate\"\n    super url, status\n  end\nend\n```\n", "labels": [], "number": 651, "updated_at": "2011-05-21 15:11:57", "user": 789801, "closed_at": "2011-05-21 15:11:57", "id": 904292, "title": "redirect_to skips generation of headers (security problem)", "url": "https://api.github.com/repos/rails/rails/issues/651", "created_at": "2011-05-16 03:31:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169656", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-08 02:18:18 UTC\n\nMarking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.\n\nIf this is still relevant can you please move this to http://groups.google.com/group/rubyonrails-security Which is listed here http://rubyonrails.org/community for critical patches regarding security. Thanks!\n", "created_at": "2011-05-16 03:31:07", "user": 789801, "id": 1169656}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169657", "text": "_Imported from Lighthouse._\nComment by **Kai Krakow** - 2010-10-11 16:44:05 UTC\n\nCurrently I can still reproduce with Rails 2.3.8, I'll check later versions soon.\n", "created_at": "2011-05-16 03:31:08", "user": 789801, "id": 1169657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169659", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-14 09:19:18 UTC\n\nKai, thanks for the quick response! :)\n", "created_at": "2011-05-16 03:31:10", "user": 789801, "id": 1169659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169660", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2010-10-15 09:33:37 UTC\n\nI can't reproduce this in a test application in either 2.3.10 or 3.0.1 - here's the output I get:\n\n```\ncurl -I -b \"_testapp2_session=BAh7BzoJcGFnZSIJdGVzdDoPc2Vzc2lvbl9pZCIlNzRiZGY3ZjRmY2QxZDA1OGFlNTlmMDg5MWEwNmY0Mzk%3D--56ad78acb2575e17b8d2131b2fa81b6f9332bee4\"  http://127.0.0.1:3000/\nHTTP/1.1 302 Moved Temporarily\nConnection: close\nDate: Fri, 15 Oct 2010 09:01:36 GMT\nLocation: http://127.0.0.1:3000/pages/test\nContent-Type: text/html; charset=utf-8\nX-Runtime: 2\nContent-Length: 98\nSet-Cookie: _testapp2_session=BAh7BzoJcGFnZSIJdGVzdDoPc2Vzc2lvbl9pZCIlNzRiZGY3ZjRmY2QxZDA1OGFlNTlmMDg5MWEwNmY0Mzk%3D--56ad78acb2575e17b8d2131b2fa81b6f9332bee4; path=/; HttpOnly\nCache-Control: no-cache\n```\n\nI do get the Set-Cookie header when just reading the session but there's also a Cache-Control: no-cache header. The session is just a hash stored in the Rack environment under the key 'rack.session' so there's no straightforward way of telling whether it's been modified so it's safer just to write it out again.\n\nKai, if you're still seeing the problem can you please upload a sample app here or create a repo on GitHub.\n", "created_at": "2011-05-16 03:31:12", "user": 789801, "id": 1169660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169661", "text": "_Imported from Lighthouse._\nComment by **Kai Krakow** - 2010-10-15 10:03:19 UTC\n\nI'm pretty sure that Rails should send \"Cache-Control: private\" (which it does on normal, unredirected responses) to protect the Set-Cookie header from being disclosed in a non-private cache. See http://code.google.com/p/doctype/wiki/ArticleHttpCaching.\n\nHowever, I wonder why it sends a \"no-cache\" value - it never did that in my application: This seems to be a new behaviour since 2.3.8 (which I am currently using).\n\nEssentially, what the link says is that sending Set-Cookie (or Location) with a missing Cache-Control may make public caches store these headers for later responses from the cache. Rails should have counter-measures to prevent such cases if the user/programmer/developer does not implicitly create such situations.\n\nAlthough the document also says that special response codes like 302 would never be cached, I found that some caches (eg mod_cache in Apache) cache that.\n", "created_at": "2011-05-16 03:31:12", "user": 789801, "id": 1169661}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169662", "text": "_Imported from Lighthouse._\nComment by **Kai Krakow** - 2010-10-15 10:21:16 UTC\n\nTo reproduce, create a test application:\n\n```\n  $ rails test\n  $ ruby script/generate controller Test index redirect\n  $ rm public/index.html\n  $ vim app/controllers/test_controller.rb\n```\n\nChange TestController#redirect to \"redirect_to '/test/index'\"\n\n```\n  $ ruby script/server\n```\n\nNow on another console run\n\n```\n  $ curl -I \"http://localhost:3000/test/index\"\n  HTTP/1.1 200 OK\n  [...]\n  Cache-Control: private, max-age=0, must-revalidate\n```\n\nNow compare the redirect action:\n\n```\n  $ curl -I \"http://localhost:3000/test/redirect\"\n  HTTP/1.1 302 Moved Temporarily\n  [...]\n  Location: http://localhost:3000/test/index\n  Cache-Control: no-cache\n```\n\nIt's no longer sending \"Cache-Control: private\". Previous versions of Rails sent no \"Cache-Control\" header at all in this situation (but still generated a Set-Cookie header!). I'm still thinking \"no-cache\" is not enough otherwise it would be default for non-redirected responses. (compare anti-patterns in the link I posted above)\n\n<em>Edited by [Rohit Arondekar](https://rails.lighthouseapp.com/users/89656) for formatting.</em>\n", "created_at": "2011-05-16 03:31:13", "user": 789801, "id": 1169662}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169663", "text": "_Imported from Lighthouse._\nComment by **Kai Krakow** - 2010-10-15 10:23:35 UTC\n\nSorry, lighthouse killed my formatting and there's no way to edit a post. _sigh_\n", "created_at": "2011-05-16 03:31:13", "user": 789801, "id": 1169663}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169664", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-15 10:27:26 UTC\n\nFixed the formatting. And yes it's a real pain that you can't edit your own posts. :(\n", "created_at": "2011-05-16 03:31:14", "user": 789801, "id": 1169664}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169665", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2010-10-15 11:35:10 UTC\n\nI'm still getting a no-cache header with Rails 2.3.8 - is there a plugin that may be affecting things?\n\nThe setting of no-cache for redirection seems logical to me. One of the use cases for redirecting is to redirect to a login page when a protected page (e.g. admin page) is accessed. If we used private then this would allow the browser to cache the response. The default max-age of zero would mean that in effect it would work but the explicit no-cache seems the right response and is what the link recommends.\n\nIn terms of the anti-pattern you specify that relates to a missing expires header with a set-cookie header being cached with HTTP/1.0 proxies. In this case we are sending a 302 response which shouldn't be cached unless explicitly specified using cc:public or an expires header set in the future.\n\nAs the comment points out at the bottom of the article, the chances of running into a HTTP/1.0 proxy that doesn't respond to cache-control headers is virtually zero anyway.\n", "created_at": "2011-05-16 03:31:14", "user": 789801, "id": 1169665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169666", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:33:03 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:31:15", "user": 789801, "id": 1169666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169667", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:52:03 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:31:15", "user": 789801, "id": 1169667}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3677\nCreated by **Ary Djmal** - 2011-04-09 22:41:48 UTC\n\nGiven the following controller:\n\n``` ruby\nclass PostsController < ApplicationController\n  caches_action :index\n\n  def index\n    @posts = Post.all\n    render :json => @posts, :callback => params[:callback]\n  end\nend\n```\n\nIt's not possible to successfully cache json requests with callbacks (jsonp) because of the nature of how callbacks work.\n\nThis patch modifies the caches_action around filter by resetting the callback before rendering the fragment if it's a json request.\n\nNOTE: This implementation saves the fragment with callback and reset it on read. Another implementation could be to remove the callback on save, and add (if necessary) on read.\n", "labels": [], "number": 652, "updated_at": "2011-05-21 15:11:57", "user": 789801, "closed_at": "2011-05-21 15:11:57", "id": 904293, "title": "Add support for action-cache json requests wrapped in a callback (jsonp)", "url": "https://api.github.com/repos/rails/rails/issues/652", "created_at": "2011-05-16 03:31:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169668", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-09 02:16:21 UTC\n\nMarking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.\n", "created_at": "2011-05-16 03:31:22", "user": 789801, "id": 1169668}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169669", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 11:10:45 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:31:22", "user": 789801, "id": 1169669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169670", "text": "_Imported from Lighthouse._\nComment by **Ary Djmal** - 2010-10-11 19:20:08 UTC\n\nThis is still an issue, I am uploading the updated patch.\n", "created_at": "2011-05-16 03:31:23", "user": 789801, "id": 1169670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169671", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 20:25:42 UTC\n\nThis patch applies cleanly to master and the tests are complete. +1\n", "created_at": "2011-05-16 03:31:23", "user": 789801, "id": 1169671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169672", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:31:17 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:31:24", "user": 789801, "id": 1169672}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169673", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:07:54 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:31:24", "user": 789801, "id": 1169673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169674", "text": "Attachments saved to Gist: http://gist.github.com/971654\n", "created_at": "2011-05-16 03:31:25", "user": 789801, "id": 1169674}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3761\nCreated by **twalpole** - 2010-01-21 02:43:52 UTC\n\nGiven two classes\n\n``` ruby\nclass A < ActiveRecord::Base\n  belongs_to :b, :inverse_of=>:a\n  accepts_nested_attributes_for :b\nend\n\nclass B < ActiveRecord::Base\n  has_one :a, :inverse_of=>:b\nend\n```\n\nattempting to build and save via\n\n``` ruby\na=A.new\na.attributes={:b_attributes=>{}}\na.save\n```\n\ncreates an infinite loop and gnereates stack level too deep error.  Removing the inverse_of or changing the direction of the belongs_to <=> has_one relationship makes it work correctly\n", "labels": [], "number": 653, "updated_at": "2011-05-21 15:11:57", "user": 789801, "closed_at": "2011-05-21 15:11:57", "id": 904295, "title": "inverse_of causes infinite loop with accepts_nested_attributes_for", "url": "https://api.github.com/repos/rails/rails/issues/653", "created_at": "2011-05-16 03:31:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169676", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-14 01:00:53 UTC\n\nPlease attach a patch to duplicate this issue in Rails.\n", "created_at": "2011-05-16 03:31:31", "user": 789801, "id": 1169676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169677", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:30:51 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:31:32", "user": 789801, "id": 1169677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169678", "text": "_Imported from Lighthouse._\nComment by **Hung Le** - 2010-11-07 23:59:20 UTC\n\nWe ran to a similar issue using Rails 3.0 and traced it down to having \"accepted_nested_attributes_for\" in both the parent and its associated model(s). The problem went away when we removed the statement in the associated models.\n", "created_at": "2011-05-16 03:31:33", "user": 789801, "id": 1169678}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169679", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-09 00:32:02 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:31:34", "user": 789801, "id": 1169679}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169680", "text": "_Imported from Lighthouse._\nComment by **Stephan Kaag** - 2011-02-21 09:26:37 UTC\n\nThis is still an issue.\n\nSee: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6449-use-accepts_nested_attributes_for-with-inverse_of-cause-infinite-loop\n\n[state:open]\n", "created_at": "2011-05-16 03:31:34", "user": 789801, "id": 1169680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169681", "text": "_Imported from Lighthouse._\nComment by **hemant** - 2011-02-26 18:30:59 UTC\n\nSantiago,\n\nI've attached a patch that demonstrates test for this problem on master branch.\n\nAlso I could replicate the issue locally on 3.0.3 stable branch.\n", "created_at": "2011-05-16 03:31:35", "user": 789801, "id": 1169681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169682", "text": "_Imported from Lighthouse._\nComment by **Joey** - 2011-03-20 02:12:19 UTC\n\nI am experiencing the same issue on the 3.0.5 stable branch with Ruby 1.9.2 p180.\n", "created_at": "2011-05-16 03:31:36", "user": 789801, "id": 1169682}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169683", "text": "_Imported from Lighthouse._\nComment by **pechorin-andrey** - 2011-04-26 14:27:02 UTC\n\nsame error on 3.0.7 with 1.8.7 mri\n", "created_at": "2011-05-16 03:31:36", "user": 789801, "id": 1169683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169684", "text": "Attachments saved to Gist: http://gist.github.com/971655\n", "created_at": "2011-05-16 03:31:37", "user": 789801, "id": 1169684}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3766\nCreated by **Stephan Kaag** - 2011-02-14 05:41:57 UTC\n\nSummary:\n\nI create a named_scope at runtime (a pattern that searchlogic (http://github.com/binarylogic/searchlogic) also relies on). When the named-scope is first called on the super class an error is raised when I call that same scope in the subclass. I am not familiar enough with the codebase to provide a solution myself.\n\nThis error occurs in both Rails 2.3.5 and 3.0pre.\n\nTo reproduce:\n\n``` ruby\nRails3::Application.configure do\n  config.cache_classes = true\nend\n\nclass Candidate < ActiveRecord::Base\n  def self.create_second_order_scope\n    return if respond_to?(:second_order)\n    named_scope :second_order, :conditions => {}\n  end\nend\n\nclass Admin::Candidate < Candidate\nend\n```\n\nError trigger:\n\n``` ruby\nCandidate.create_second_order_scope\nCandidate.second_order\nAdmin::Candidate.create_second_order_scope\nAdmin::Candidate.second_order\n```\n\n```\n>> undefined method `call' for nil:NilClass\n```\n", "labels": [], "number": 654, "updated_at": "2011-05-21 15:11:58", "user": 789801, "closed_at": "2011-05-21 15:11:57", "id": 904297, "title": "On-the-fly created named-scope raises 'undefined method `call' when called from subclass with cache_classes = true", "url": "https://api.github.com/repos/rails/rails/issues/654", "created_at": "2011-05-16 03:31:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169685", "text": "_Imported from Lighthouse._\nComment by **Stephan Kaag** - 2010-02-01 09:36:45 UTC\n\nIs anyone experiencing this same problem?\n", "created_at": "2011-05-16 03:31:43", "user": 789801, "id": 1169685}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169686", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2010-02-04 21:27:58 UTC\n\nI've experienced this EXACT problem, in the Hobo project which does automatic scope generation much like this.\n\nSee [this ticket](https://hobo.lighthouseapp.com/projects/8324/tickets/492) for more info, and the commit at the end of the ticket for a tweak that may help your case. As you can see in the ticket, I was _supposed_ to have already made a ticket for this here... :)\n\nIf it works for you, I'll see about writing up a patch + some tests (you're welcome to give it a try as well).\n", "created_at": "2011-05-16 03:31:44", "user": 789801, "id": 1169686}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169687", "text": "_Imported from Lighthouse._\nComment by **Espen Antonsen** - 2010-04-15 18:16:48 UTC\n\nSame problem here. Rails 2.3.5. Using STI.\n", "created_at": "2011-05-16 03:31:44", "user": 789801, "id": 1169687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169688", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-06-24 21:22:05 UTC\n\nCan someone create a test case following https://rails.lighthouseapp.com/projects/8994/sending-patches\nThanks.\n", "created_at": "2011-05-16 03:31:45", "user": 789801, "id": 1169688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169689", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-25 00:44:50 UTC\n\nI am not able to reproduce this problem with rails3 edge.\n\n``` ruby\nActiveRecord::Schema.define(:version => 20100624220122) do\n\n  create_table \"users\", :force => true do |t|\n    t.string   \"name\"\n    t.datetime \"created_at\"\n    t.datetime \"updated_at\"\n  end\n\nend\nclass User < ActiveRecord::Base\n  def self.create_second_order_scope\n    return if respond_to?(:second_order)\n    named_scope :second_order, :conditions => {}\n  end\n\n  def self.lab\n    User.create_second_order_scope\n    puts User.second_order.all.inspect\n  end\nend\n\nclass Admin::User < User\n  def self.lab\n    Admin::User.create_second_order_scope\n    puts Admin::User.second_order.all.inspect\n  end\nend\n\n# User.lab #=> produces sql query\n# Admin::User.lab #=> produces sql query\n```\n", "created_at": "2011-05-16 03:31:46", "user": 789801, "id": 1169689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169690", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-06-25 01:56:12 UTC\n\nNeeraj did you do config.cache_classes = true? What about 2-3-stable?\n", "created_at": "2011-05-16 03:31:46", "user": 789801, "id": 1169690}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169691", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-25 02:54:14 UTC\n\n@Santiago I just did User.lab and Admin::User.lab in production environment and I get the same result. \n\nwill try with 2-3 and will let you know.\n", "created_at": "2011-05-16 03:31:47", "user": 789801, "id": 1169691}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169692", "text": "_Imported from Lighthouse._\nComment by **Matt Jones** - 2010-06-25 03:04:16 UTC\n\n@Neeraj: at least in Rails 2.3.x, the issue is caused by the scope's method being propagated up the inheritance chain, while the scope conditions are not. The trick is that the scopes are stored in an inheritable attribute - not a big deal for 3.0, since the methods are defined in-place without an actual reference to the array (see around line 89 in named_scopes.rb on master). On 2.3.x, the method that's defined only references the array:\n\n``` ruby\ndefine_method name do |*args|\n  scopes[name].call(self, *args)\nend\n```\n\nThus, in Admin::User above, you end up with a `second_order` method inherited from the parent, but scopes[:second_order] returns nil since the subclass has an empty hash which was inherited from the parent at definition time.\n", "created_at": "2011-05-16 03:31:47", "user": 789801, "id": 1169692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169693", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-25 21:10:34 UTC\n\nI can confirm that it is indeed and error with 2-3-stable. But it works fine on rails3 edge.\n", "created_at": "2011-05-16 03:31:48", "user": 789801, "id": 1169693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169694", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:50 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 03:31:48", "user": 789801, "id": 1169694}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169695", "text": "_Imported from Lighthouse._\nComment by **mrcsparker** - 2010-10-18 22:36:34 UTC\n\nI put together some code based on the Hobo link placed here.  I am still testing it, but it seems to work so far.  Once I am sure that it works, I will put together the patch.\n\nHere is the change to lib/active_record/named_scope.rb against 2.3.10\n\ndef named_scope(name, options = {}, &block)\n        name = name.to_sym\n\n```\n    scopes[name] = lambda do |parent_scope, *args|\n      Scope.new(parent_scope, case options\n        when Hash\n          options\n        when Proc\n          if self.model_name != parent_scope.model_name\n            options.bind(parent_scope).call(*args)\n          else\n            options.call(*args)\n          end\n      end, &block)\n    end\n\n    singleton_class.send :define_method, name do |*args|\n      scopes[name].call(self, *args)\n    end\n\n    _name = name.to_sym\n    _scope = scopes[_name]\n    subclasses.each do |s|\n      s.scopes[_name] = _scope\n    end\n\n  end\nend\n```\n", "created_at": "2011-05-16 03:31:49", "user": 789801, "id": 1169695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169696", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:29:32 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:31:49", "user": 789801, "id": 1169696}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169697", "text": "_Imported from Lighthouse._\nComment by **Ryan Burrows** - 2011-02-14 21:08:00 UTC\n\nI just ran into this today on Rails 2.3.10 uses searchlogic.\n\nI've attached a patch with a test that exposes the bug on Rails 2.3 stable and a fix for the issue. The fix is basically mrcsparker's fix above.\n", "created_at": "2011-05-16 03:31:50", "user": 789801, "id": 1169697}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169698", "text": "_Imported from Lighthouse._\nComment by **Ryan Burrows** - 2011-02-14 21:23:20 UTC\n\nForgot to open the ticket\n\n[state:open]\n", "created_at": "2011-05-16 03:31:50", "user": 789801, "id": 1169698}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169699", "text": "Attachments saved to Gist: http://gist.github.com/971656\n", "created_at": "2011-05-16 03:31:51", "user": 789801, "id": 1169699}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3768\nCreated by **Rodrigo Rosenfeld Rosas** - 2011-04-09 22:41:48 UTC\n\nFollows a patch to add a full_message option to validations.\n\nCurrently Rails don't allow full control over validation messages without making use of I18n and even that solution is overkill when you only need to have full control over a validation message.\n\nThis patch allow validations to be written as:\n\n  validates_presence_of :name, :full_message => 'Please, specify your full name.'\n", "labels": [], "number": 655, "updated_at": "2011-05-16 03:38:34", "user": 789801, "closed_at": "2011-05-16 03:38:34", "id": 904299, "title": "[PATCH] Add :full_message option to validations", "url": "https://api.github.com/repos/rails/rails/issues/655", "created_at": "2011-05-16 03:31:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169700", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-01-21 20:17:53 UTC\n\nThere is no documentation nor test files in the patch because I need some help about how to write them.\n\nI've asked for instructions in the topic below but got no answer yet:\nhttp://groups.google.com/group/rubyonrails-core/msg/041076c49fcaccac\n\nHere is an extract:\n\n---\n\nI don't know how to proceed with documentation, since it is not very DRY...\n\nShould I send a description to appreciation and then copy and paste it on every validation method?\n\nIf so, would the following description be ok?\n\n\"Configuration options:\n- <tt>message</tt> - A custom error message (default is: \"can't be blank\"). <tt>full_message</tt> can\n  be specified instead, in which case the humanized attribute name won't be prepended to the message.\n  You have to choose between either <tt>message</tt> or <tt>full_message</tt>, not both. If that happens,\n  <tt>full_message</tt> takes precedence.\n  ...\"\n\nThe only difference between validations would be the default...\n\nRegarding test writing, I would also ask for some guidance on it.\n\nI've noted that not all options are tested on each validation respective test.\n\nSo, I would like to know if I should add a test on with_validations_test.rb,\nadd a new test file or add a new test for every validation class.\n\nPlease, how should I proceed?\n\n---\n\nCould you help me with documentation and test instructions?\n", "created_at": "2011-05-16 03:31:56", "user": 789801, "id": 1169700}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169701", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-02-24 07:33:08 UTC\n\nHey mate, if you need help to get it documented and tests, please ask in the mailing list. The patch needs to be improved in a sense that ErrorMessage should behave like a string, so self.errors[:attribute] always return strings and not mixed objects.\n", "created_at": "2011-05-16 03:31:57", "user": 789801, "id": 1169701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169702", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-02-24 10:30:20 UTC\n\nValim, I have first tried the list, as you can see in the link I've posted in my first comment, but I didn't get any help there.\n\nI had already discussed the issue you are talking about on the list. The problem is that I can't extend an String in a way that makes sense. I first tried ErrorMessage to extend String, but it didn't work as I was expecting... The mixed object was the only thing I could think of for not breaking API compatibility.\n\nFor instance, if self.errors[:attribute] always return a string, how errors.full_messages would know if it has to include a prefix or not? If it returns an ErrorMessage object, it would break the API and possible a lot of plugins. The solution I proposed, although not ideal, is less invasive to current API.\n\nThe correct way to do this in my opinion is to change the API so that errors[:attribute] would return an ErrorMessage object instead of a String, but that would be a big change. I could write such patch but I doubt it would be accepted as the core team doesn't seem to be interested in such a \":full_message\" feature...\n", "created_at": "2011-05-16 03:31:57", "user": 789801, "id": 1169702}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169703", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-02-24 10:34:26 UTC\n\nSomething like this would work:\n\n  class ErrorMessage < String\n    def initialize(message, full_message=false)\n      @full_message = full_message\n      super(message)\n    end\n\n```\ndef full_message!\n  @full_message = true\nend\n\ndef full_message?\n  @full_message\nend\n```\n\n  end\n\nAnd then in full error messages:\n\n  each do |message|\n    if message.respond_to?(:full_message?) && message.full_message?\n      array << message\n    else\n      # what we do today\n    end\n  end\n\nI cannot see any drawbacks in this solution. Or am I missing something?\n", "created_at": "2011-05-16 03:31:57", "user": 789801, "id": 1169703}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169704", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-02-24 14:33:53 UTC\n\nYou're right. When I tested subclassing String, I probably missed the message parameter in initialize.\n\nBut it is still a hack in the sense that unexpected things can happen (it would also happen with the current patch). For instance:\n\n  error = ErrorMessage.new('test', true)\n  error.sub(/t/,'a').full_message? # returns nil, although error.sub(/t/,'a').class == ErrorMessage\n\nThat is just an example for sub, but other methods are affected too.\n\nBut I think that is OK. At least it is better than the current patch. I'll update the patch to subclass String instead of mixed objects and will update this ticket than. Probably tonight when I have some time... Changing Rails API would be more elegant but much more intrusive too.\n\nThanks!\n", "created_at": "2011-05-16 03:31:58", "user": 789801, "id": 1169704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169705", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-02-25 03:34:10 UTC\n\nHere is a new patch (still lacking documentation and tests) using your suggested approach.\n\nShould I post to rails core list again asking for help on documentation and tests?\n", "created_at": "2011-05-16 03:31:58", "user": 789801, "id": 1169705}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169706", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-02-25 06:24:13 UTC\n\nSure, without tests and/or documentation is quite hard to understand some pieces of the code. For example, why are you checking inside ErrorMessage if it's receiving another ErrorMessage? What is the use case? Why not use duck typing?\n\nAlso, I noticed that you changed all validators. Would be better if we encapsulate the logic in one method in the EachValidator and DRY the +record.errors.add+ logic.\n", "created_at": "2011-05-16 03:31:58", "user": 789801, "id": 1169706}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169707", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-02-25 12:00:14 UTC\n\nI have dryied the code. The part I have changed in all validators were necessary because it was not modular, so I couldn't change just one place. See an example:\n\n``` ruby\n# record.errors.add(attr_name, :not_a_number, :value => raw_value, :default => options[:message])\n  record.errors.add(attr_name, :not_a_number, :value => raw_value, :default => message)\n\n# message is a new method from Validator:\ndef message\n  return nil unless options[:full_message] || options[:message]\n  @message ||= Errors::ErrorMessage.new(options)\nend\n```\n\nHow could I not change every validator once they extract the :message value from options?\n\nSupporting full_messages is not the only goal of this patch. Now plugins are able to do more interesting things with the params passed to validations.\n\nFor instance:\n\n``` ruby\n  # show this specific message in blue if this validation fails\n  validates_presence_of :field, :show_error => :blue\n```\n\nAll options would be available through error.message[:field].first.options, and it is also possible to know if a symbol was passed to the message evaluating what os passed for :full_message or :message with error.message[:field].first.message.\n\nHaving said that, duck typing in ErrorMessage#initialize would loose the options and original message if another ErrorMessage is passed to ErrorMessage#new. The above extract of the patch wouldn't be necessary, but it is there just for performance concerns:\n\n``` ruby\n  predicate = ErrorMessage.new(predicate) unless predicate.is_a? ErrorMessage\n  # this could be just:\n  predicate = ErrorMessage.new(predicate)\n```\n\nRegarding the documentation, it would be like the text in my first comment. I just don't know if I should add that explanation to every single validation...\n\nThe test case would be something like (I didn't test the code below):\n\n``` ruby\n  test \"Validation should accept an :full_message option\" do\n    fm = 'You should specify your full name.'\n    # some setup code (validates_presence_of :name, :full_message => fm)\n    assert_equals fm, errors.full_messages[:name]\n  end\n  # one more test for passing a symbol instead of a string to :full_message\n```\n\nDon't hesitate in asking me further doubts.\n\nP.S: one more thing: with this change of subclassing String, now it is possible to use Array(messages) as in the original code instead of Array.wrap(messages). I just forgot to change this back on my patch, but I'll do it on next patch.\n", "created_at": "2011-05-16 03:31:59", "user": 789801, "id": 1169707}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169708", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-02-25 12:15:57 UTC\n\nYes, you need to change all validators but if you are going to do that, it's better that they now all call the same method. However, validators should not know about ErrorMessage, they should simple call record.errors.add which will know what to do.\n\nAlso, I don't see the point in having options inside ErrorMessage. Don't try to embrace the world in this first patch (like adding extra options to validations), just ensure :full_message works. It makes hard to review and hides the real intent. After we get full_messages patch applied, we can continue from it.\n", "created_at": "2011-05-16 03:32:00", "user": 789801, "id": 1169708}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169709", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-02-25 13:48:16 UTC\n\nSorry, I didn't understand. How much dryier can this be? All validators just call the message method from Validator (from which them all inherit from). That method extract the message from the options. What would suggest instead of this? How could this be simpler than that?\n\nAnd I don't get what are the advantages for not storing all validation options? Why should this go in a separate patch?\n\nI'm not hiding the real intent, but I do intend multiple features:\n- supporting full_messages\n- store all validation options\n\nIf I have some way to know what options were passed to some validation, I could have done a plugin without monkey patches for supporting full_messages, for instance... This change will be specially useful for I18n plugins because they will be able to do lazy evaluation (actually re-evaluation) for instance if they decide to override full_messages_for, for instance.\n\nThe patch for supporting just the :full_message option would not be that different from what it is now. Why do you think this is difficult to review? I'll add all this documentation (including custom options) in the final patch.\n", "created_at": "2011-05-16 03:32:00", "user": 789801, "id": 1169709}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169710", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-02-25 16:14:47 UTC\n\nThis is exactly the issue. If you want to add multiple features, do them in separate patches and not in only one.\n\nAnd is not only about being dry, validators should not know anything about ErrorMessage. ErrorMessage is an ActiveModel::Errors concern, not a ActiveModel::Validators one. Everything on the validators should be done through the errors.add interface.\n", "created_at": "2011-05-16 03:32:00", "user": 789801, "id": 1169710}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169711", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-02-25 16:55:38 UTC\n\n> This is exactly the issue. If you want to add multiple features, do them in separate patches and not in only one.\n\nI would agree if they were two completely and independent things, but I think they are too closely related in terms of implementation that I don't understand why would it be better to separate in two patches... The final review effort will actually be higher... Splitting it in two patches would require me a lot of effort and I would just want to understand why it does compensate... I mean, what are the disadvantages of storing the options passed to the validators alongside with the message?\n\nI can't understand why you are insisting that validators should not know about ErrorMessage... There is no mention to ErrorMessage in any of the validators... The only difference is that instead of passing options[:message] to errors.add, they would pass the result of the method 'message' from their parent Validator. If they wish to pass options[:message] instead, it will still work as before, but will not support the full_message parameter... Could you please be more specific about your concerns?\n", "created_at": "2011-05-16 03:32:01", "user": 789801, "id": 1169711}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169712", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-02-25 17:05:52 UTC\n\nYou wrote previously:\n\n```\n# message is a new method from Validator:\ndef message\n  return nil unless options[:full_message] || options[:message]\n  @message ||= Errors::ErrorMessage.new(options)\nend\n```\n\nAnd I don't agree with it. Validator should use record.errors.add.\n", "created_at": "2011-05-16 03:32:01", "user": 789801, "id": 1169712}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169713", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-02-25 17:43:12 UTC\n\nAre you suggesting me to change errors.add API to include an additional option?\n\nI could do that, but that would be a completely different patch. I was trying to avoid changing errors.add API.\n\nBut there is a problem with this approach. For each validator it would be necessary to change the errors.add line to something like:\n\n``` ruby\n# record.errors.add(attr_name, :not_a_number, :value => raw_value, :default => options[:message])\n  record.errors.add(attr_name, :not_a_number, :value => raw_value, :default => options[:full_message] || options[:message], :full_message => options.has_key?(:full_message)\n# or\n  record.errors.add(attr_name, :not_a_number, :value => raw_value, :default => message, :full_message => options.has_key?(:full_message) # with message returning options[:full_message] || options[:message]\n```\n\nThis seems much uglier to me. What do you think?\n\nBut I still think that the current proposed patch would be much more complete and benefic than just adding a :full_message option, don't you think?\n", "created_at": "2011-05-16 03:32:02", "user": 789801, "id": 1169713}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169714", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-02-25 20:42:37 UTC\n\nWhy changing each validator is a problem? We are changing it anyway, we just need a method that does it for us:\n\n```\ndef add_error(record, attribute, message, extra_options = {})\n  record.errors.add(attribute, message, { :message => message, :full_message => full_message }.merge(extra_options))\nend\n```\n\nDoing it with errors.add allows me to use :full_message in any other place in my code, without requiring knowledge of a class called ErrorMessage, which should be an implementation detail.\n", "created_at": "2011-05-16 03:32:02", "user": 789801, "id": 1169714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169715", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-02-26 20:40:12 UTC\n\nWell, I would document ErrorMessage, anyway.\n\nFollows a patch for supporting just :full_message, as you have suggested. Is it as you were expecting?\n\nPlease note that some parts could be simplified but the I18n tests would fail because they use mocha to expect a specific Hash would be passed to generate_message... Simplifying the code would require to change a lot of I18n tests...\n", "created_at": "2011-05-16 03:32:02", "user": 789801, "id": 1169715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169716", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-07-19 13:42:49 UTC\n\nSomeone did exactly what we were discussing above. He used a separate patch to clean up validators and allow any option to be given to validations. He also was motivated enough to simplify the code even if it required to change a lot of I18n tests. :)\n\nThat said, if you are still interested in getting this in, you could rebase your patch. Marking this as stale until we get there.\n", "created_at": "2011-05-16 03:32:02", "user": 789801, "id": 1169716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169718", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-14 01:48:02 UTC\n\nI don't know why, but I didn't receive any notification by e-mail about your last update. I just happen to see how this ticket was today and I could see your message... Well, I'll take a look at how Rails base code  is at the moment so that I can rebase the patch. Thank you for reporting this.\n", "created_at": "2011-05-16 03:32:03", "user": 789801, "id": 1169718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169719", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-24 03:16:13 UTC\n\nFollows an initial patch, without tests and documentation for a first review.\n", "created_at": "2011-05-16 03:32:03", "user": 789801, "id": 1169719}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169720", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-24 03:22:05 UTC\n\nI don't think generate_message should care about full_message, you can simply wrap the result of generate_message in errors.add. Also, you should rather implement full_message in the ErrorMessage and check if it is defined instead of checking if you have ErrorMessage (i.e. use duck typing).\n", "created_at": "2011-05-16 03:32:03", "user": 789801, "id": 1169720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169721", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-24 10:39:23 UTC\n\nSecond attempt. Remember options is frozen in #add.\n", "created_at": "2011-05-16 03:32:04", "user": 789801, "id": 1169721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169722", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-28 13:38:16 UTC\n\nGreat! We are almost there! Just a few notes:\n\n1) I should be able to specify both :message and :full_message. So there is no need to make full_message overwrite message in the hash. Doing this change, you need to make sure :full_message won't be passed as option to the underlying I18n.t in generate_message.\n\n2) At first I was thinking that we could move generate_message to the ErrorMessage object but I believe it will be better if we don't. That said, there is no need to pass @base and @attributes to the ErrorMessage object. This should be enough:\n\n```\nErrorMessage.new(message, options[:full_message])\n\nclass ErrorMessage < String\n  attr_reader :full_message\n\n  def initialize(message, full_message)\n    super(message)\n    @full_message = full_message\n  end\nend\n```\n\n3) And one final note, I know your patch is a initial version, but be sure to use full names like \"full_messages\" as variable names instead of \"fm\". :)\n\nThanks and good work!\n", "created_at": "2011-05-16 03:32:04", "user": 789801, "id": 1169722}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169723", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 14:50:55 UTC\n\nPlease, take a look if this patch meets your expectative.\n", "created_at": "2011-05-16 03:32:04", "user": 789801, "id": 1169723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169724", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 15:07:02 UTC\n\nOr maybe this is a better approach.\n", "created_at": "2011-05-16 03:32:05", "user": 789801, "id": 1169724}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169725", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-28 19:17:37 UTC\n\nWhy is the logic used just when message is a symbol? Why we cannot pass \"full_message\" when message is a proc?\n", "created_at": "2011-05-16 03:32:05", "user": 789801, "id": 1169725}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169726", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 19:25:12 UTC\n\nThe patch aims including :full_message to validators. Could you tell me of any validator that passes a non-symbol value to the message parameter?\n\nMaybe a custom validator? I can make that change, but I changed the logic inside the symbols because I was thinking only in the shipped validators...\n\nI'll make the change and post a new patch here.\n", "created_at": "2011-05-16 03:32:05", "user": 789801, "id": 1169726}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169727", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 19:29:13 UTC\n\nHere it is.\n", "created_at": "2011-05-16 03:32:06", "user": 789801, "id": 1169727}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169728", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-28 19:29:20 UTC\n\nPlugins that have date/time validators use extensively the proc support for message because they are based on Time.now or Date.current. Maybe even full_message should support a proc as option, but better to add it as functionality just when someone needs it.\n", "created_at": "2011-05-16 03:32:06", "user": 789801, "id": 1169728}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169729", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-28 19:29:23 UTC\n\nPlugins that have date/time validators use extensively the proc support for message because they are based on Time.now or Date.current. Maybe even full_message should support a proc as option, but better to add it as functionality just when someone needs it.\n", "created_at": "2011-05-16 03:32:06", "user": 789801, "id": 1169729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169730", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 19:34:52 UTC\n\nI can do that, that is trivial, just a minute...\n", "created_at": "2011-05-16 03:32:06", "user": 789801, "id": 1169730}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169731", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 19:37:22 UTC\n\nHere it is\n", "created_at": "2011-05-16 03:32:07", "user": 789801, "id": 1169731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169732", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-28 19:40:32 UTC\n\nThe :message should not be overwritten by the :full_message, they are different concerns. I should be able to specify both:\n\n  validates_presence_of :name, :message => \"cannot be blank\", :full_message => \"Name cannot be left blank\"\n", "created_at": "2011-05-16 03:32:07", "user": 789801, "id": 1169732}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169733", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 20:19:45 UTC\n\nI misunderstood what you have told me before.\n\nPlease, take a look if that is what you were talking about. (I also fixed some bugs...)\n", "created_at": "2011-05-16 03:32:07", "user": 789801, "id": 1169733}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169735", "text": "_Imported from Lighthouse._\nComment by **Ruy Asan** - 2010-08-28 20:21:37 UTC\n\nHow are they separate concerns? When would both be used?\n", "created_at": "2011-05-16 03:32:08", "user": 789801, "id": 1169735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169737", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 20:23:23 UTC\n\nOr maybe you prefer the '&&=' syntax, as in:\n\nfull_message &&= generate_message(attribute, message, options.merge(:message => full_message))\n\nand\n\nfull_message &&= message\n\nand\n\nmessage &&= ErrorMessage.new(message, full_message) if full_message\n", "created_at": "2011-05-16 03:32:37", "user": 789801, "id": 1169737}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169738", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 20:26:43 UTC\n\nHi, Ruy (almost Ruby, huh?)\n\nValim and I have been changing some messages by e-mail. He thinks that maybe some one would like to have messages appearing twice in a form as in:\n\nErrors:\n\nYou should specify your full name\n\nName field here (error message here, for instance: should not be blank)\n\nThat is what I've understood.\n", "created_at": "2011-05-16 03:32:37", "user": 789801, "id": 1169738}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169739", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-28 20:45:16 UTC\n\nI'm not following one thing. Why full_message needs to pass through generate_message()? generate_message() does a lookup under errors.messages which is unrelated to full_messages. They are completely different concerns, they should not be mixed.\n", "created_at": "2011-05-16 03:32:38", "user": 789801, "id": 1169739}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169740", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 21:19:09 UTC\n\nThe line following line is unnecessary for what you have in mind:\n\nfull_message = generate_message(attribute, message, options.merge(:message => full_message)) if full_message\n\nThe idea is the possibility to write something like\n\nvalidates_uniqueness_of :name, :full_message => :name_not_unique\n\nen.yml:\nen:\n  name_not_unique: You should specify an unique name.\n\nIs this useful? I know that it is possible to override the format in I18n yaml files, but maybe this approach would be useful and consistent with how :message currently works...\n\nHere is another patch without the line if you prefer.\n", "created_at": "2011-05-16 03:32:38", "user": 789801, "id": 1169740}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169741", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 21:24:26 UTC\n\nActually, options.except(:full_message, *CALLBACKS_OPTIONS) reads better, as in the new attachment.\n", "created_at": "2011-05-16 03:32:38", "user": 789801, "id": 1169741}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169742", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-28 21:24:30 UTC\n\nIf we are allowing such behavior, the lookup cannot be in the same place as generate_message (which is error.messages). It needs its own namespace like (error.full_messages) (probably a configuration option you can give to generate_message).\n", "created_at": "2011-05-16 03:32:39", "user": 789801, "id": 1169742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169743", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 21:26:23 UTC\n\nA new patch, just updating ErrorMessage outdated documentation.\n", "created_at": "2011-05-16 03:32:39", "user": 789801, "id": 1169743}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169744", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 21:36:32 UTC\n\nPlease, take a look if this is what you're talking about.\n", "created_at": "2011-05-16 03:32:39", "user": 789801, "id": 1169744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169745", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 21:37:14 UTC\n\nSorry, ignore the last message, I'll write another one.\n", "created_at": "2011-05-16 03:32:39", "user": 789801, "id": 1169745}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169746", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 21:52:34 UTC\n\nThis patch seems more correct to me...\n", "created_at": "2011-05-16 03:32:40", "user": 789801, "id": 1169746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169747", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-28 22:03:09 UTC\n\nI was thinking a bit more about this... Shouldn't it be possible to specify a validation like:\n\nvalidates_uniqueness_of :email, :message => lambda{some_method_here}\n\nWith the current API this would not be possible... With the patch, this would be possible for :full_message, but not for :message, as it is already the behavior...\n\nShould we support this style for normal validations?\n\nAnyway, is there any use case where passing a Proc makes any sense? I mean, no args are currently being passed to proc.call. The only reason I could see at the moment is to postpone message generation...\n\nPlease, could someone clarify this situation with any real use case?\n", "created_at": "2011-05-16 03:32:40", "user": 789801, "id": 1169747}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169748", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-28 22:17:39 UTC\n\n\"Shouldn't it be possible to specify a validation like:\"\n\nIf we really needed it, someone would already have provided a patch with it as a feature. :)\n\nYour patch is almost there, the only change I would do is to change generate_message to receive a key as argument:\n\ngenerate_message(attributes, message, options, type)\n\nThis way you can skip checking for :full_message inside generate_message and do everything based on the type given.\n\nAnother thing is that, once you write tests, you will see your patch is broken because generate_message is acting destructively in the hash. So the first time it is called, it will remove :full_message and :message from the options hash, so the second call won't work!\n", "created_at": "2011-05-16 03:32:40", "user": 789801, "id": 1169748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169749", "text": "_Imported from Lighthouse._\nComment by **Ruy Asan** - 2010-08-28 23:22:37 UTC\n\nI think it would be unexpected and inconsistent behavior if :message accepted lambdas but :full_message did not.\n", "created_at": "2011-05-16 03:32:41", "user": 789801, "id": 1169749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169750", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-08-28 23:24:20 UTC\n\nThe feature I was talking about is the ability to call an instance method from the lambda.\n", "created_at": "2011-05-16 03:32:41", "user": 789801, "id": 1169750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169751", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-08-29 01:47:55 UTC\n\nI've played a bit with proc params. Please, take a look and let me know what do you think...\n", "created_at": "2011-05-16 03:32:41", "user": 789801, "id": 1169751}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169752", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-09-02 06:52:55 UTC\n\nLooks good. Just note there is no need to check the arity of the proc. Simple call it with all args (and it is backward compatible).\n", "created_at": "2011-05-16 03:32:42", "user": 789801, "id": 1169752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169754", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 11:31:10 UTC\n\nI don't think it is a good idea. Follow some examples:\n\nRuby 1.8.7:\n\nlambda{}.arity == -1; lambda{}.call(*[1,2,3]) # OK, no error\n\nRuby 1.9.2:\n\nlambda{}.arity == 0; lambda{}.call(*[1,2,3]) # ArgumentError: wrong number of arguments (3 for 0)\n\nBoth 1.8 and 1.9:\nlambda{|a|}.arity == 1; lambda{}.call(*[1,2,3]) # ArgumentError: wrong number of arguments (3 for 1)\n\nI don't understand why you are saying it is backward compatible... Could you please, clarify?\n", "created_at": "2011-05-16 03:32:42", "user": 789801, "id": 1169754}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169755", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 11:32:08 UTC\n\nThe last example should be read:\nlambda{|a|}.arity == 1; lambda{|a|}.call(*[1,2,3]) # ArgumentError: wrong number of arguments (3 for 1)\n", "created_at": "2011-05-16 03:32:42", "user": 789801, "id": 1169755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169756", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-09-02 11:41:15 UTC\n\nHrm, sorry! I forgot that lambda in Ruby 1.8.7 does not enforce the arity properly. Not sure I like the current patch though, can we simply not pass any parameter to the proc, as we do today?\n", "created_at": "2011-05-16 03:32:43", "user": 789801, "id": 1169756}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169757", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 11:50:08 UTC\n\nThis is what already happens on full_messages-v10.patch, but it is only useful for things like Time.now...\n\nThe last patch allows the use of the record attribute values on error messages, making procs more useful, while still being backward compatible.\n", "created_at": "2011-05-16 03:32:43", "user": 789801, "id": 1169757}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169758", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-09-02 11:52:45 UTC\n\nYes, but it also adds a lot of complexity to the code. Remember that you can add validations from the instance level, where there is no need for a proc and you have all the customization and access to attributes, options and values you need.\n", "created_at": "2011-05-16 03:32:43", "user": 789801, "id": 1169758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169759", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 11:59:52 UTC\n\nOk, that was why I asked about you opinion on the last patch. Then, what do you think about v10 patch?\n", "created_at": "2011-05-16 03:32:44", "user": 789801, "id": 1169759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169760", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-09-02 12:02:17 UTC\n\nMy comments for patch v10 are above. I will copy them for convenience:\n\nYour patch is almost there, the only change I would do is to change generate_message to receive a key as argument:\n\n```\ngenerate_message(attributes, message, options, type)\n```\n\nThis way you can skip checking for :full_message inside generate_message and do everything based on the type given.\n\nAnother thing is that, once you write tests, you will see your patch is broken because generate_message is acting destructively in the hash. So the first time it is called, it will remove :full_message and :message from the options hash, so the second call won't work (because it won't have any)! But this should be fixed by generating the message as I just mentioned above.\n", "created_at": "2011-05-16 03:32:44", "user": 789801, "id": 1169760}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169761", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 12:09:44 UTC\n\nOk, sorry. Please, verify if I understood the approach you are suggested in generate_message for v11.\n", "created_at": "2011-05-16 03:32:44", "user": 789801, "id": 1169761}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169762", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-09-02 12:25:52 UTC\n\nI worked a bit in the generate_message in this diff as an example:\n\nhttp://gist.github.com/562212\n\nHowever, note that some places I cannot use #{key} in the lookup meaning that we are going to look into the same place for both full_messages and messages, which is going to cause a bug.\n\nOne option is to, instead of looking up in \"errors.full_messages\" for full_messages, we could look at \"full_errors.messages\". It solves the issue, but seems weird. What do you think?\n", "created_at": "2011-05-16 03:32:45", "user": 789801, "id": 1169762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169763", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 13:04:52 UTC\n\nI commented on the gist, but thinking more about the problem, maybe we are overcomplicating the problem...\n\nIf we don't support the feature of passing both :message and :full_message (giving preference to :full_message in this case), the patch would be much smaller and less confuse...\n\nDo you really think passing both :message and :full_message is that useful? Or maybe could we support this feature in a later patch?\n", "created_at": "2011-05-16 03:32:45", "user": 789801, "id": 1169763}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169764", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-09-02 16:11:23 UTC\n\nI'm a 100% sure that if we don't allow both to be passed, it is going  \nto cause confusion and subsequent reports in LH. I'm saying that  \nbecause this is what happened in 2.3 branch. :)\n\nOn Sep 2, 2010, at 15:05, \"Lighthouse\" &lt;no-reply@lighthouseapp.com&gt;  \nwrote:\n", "created_at": "2011-05-16 03:32:45", "user": 789801, "id": 1169764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169765", "text": "_Imported from Lighthouse._\nComment by **windock** - 2010-09-02 17:07:50 UTC\n\nFor sure both options should be allowed to pass. Think of this scenario. You have 2 kind of forms: first is with inline errors, second one is usual. For inline ones, you'd want to show just \"this can't be blank, dude\", but for regular one - \"Dude, please, fill in username\". Also, you'd want to show full errors passed through flash (say, you want to show errors on different page) Currently it's not possible to do this nicely. At all. And this is kind of situation I have with my project, so it is very important feature.\n", "created_at": "2011-05-16 03:32:46", "user": 789801, "id": 1169765}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169766", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 17:37:21 UTC\n\nOk, I'll give it more thoughts tonight when I get home. I need to think a bit about how to achieve that without using full_errors or think in a better name for it...\n", "created_at": "2011-05-16 03:32:46", "user": 789801, "id": 1169766}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169767", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 23:47:49 UTC\n\nValim, I was thinking more about I18n keys, I think I would prefer something like:\n\n# don't change signature, avoiding rewriting other tests with no advantages with this approach...\n\ndef generate_message(attribute, type = :invalid, options = {})\n  type = options.delete(key) if options[key].is_a?(Symbol)\n  type = \"_full_#{type}\" if options[:full_message]\n  ...\nend\n\nThen, for the default backend, we could write something like:\n\nen:\n  activerecord:\n    errors:\n      models:\n        user:\n          attributes:\n            name:\n              blank: should be specified\n              _full_blank: You must specify your name\n\nI think it is much easier to maintain than:\n\nen:\n  activerecord:\n    errors:\n      models:\n        user:\n          attributes:\n            name:\n              blank: should be specified\n    full_errors:\n      models:\n        user:\n          attributes:\n            name:\n              blank: You must specify your name\n\nWhat do you think?\n", "created_at": "2011-05-16 03:32:46", "user": 789801, "id": 1169767}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169768", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 23:49:08 UTC\n\nSorry for not using Preview... The h1 text was meant to be a Ruby comment... :)\n", "created_at": "2011-05-16 03:32:46", "user": 789801, "id": 1169768}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169769", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-02 23:50:45 UTC\n\nTrying again (Please remove last comments):\n\n<pre>\n# don't change signature, avoiding rewriting other tests with no advantages with this approach...\ndef generate_message(attribute, type = :invalid, options = {})\n  type = options.delete(key) if options[key].is_a?(Symbol)\n  type = \"_full_#{type}\" if options[:full_message]\n  ...\nend\n\nThen, for the default backend, we could write something like:\n\nen:\n  activerecord:\n    errors:\n      models:\n        user:\n          attributes:\n            name:\n              blank: should be specified\n              _full_blank: You must specify your name\n\nI think it is much easier to maintain than:\n\nen:\n  activerecord:\n    errors:\n      models:\n        user:\n          attributes:\n            name:\n              blank: should be specified\n    full_errors:\n      models:\n        user:\n          attributes:\n            name:\n              blank: You must specify your name\n</pre>\n\n\nWhat do you think?\n", "created_at": "2011-05-16 03:32:47", "user": 789801, "id": 1169769}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169770", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-03 23:44:34 UTC\n\nActually (I was re-reading my post), I meant 'options.delete(:message)' instead of 'options.delete(key)'...\n", "created_at": "2011-05-16 03:32:47", "user": 789801, "id": 1169770}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169771", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-04 13:19:03 UTC\n\nI've just found one more issue with generate_message...\n\nWhile moving an application to Rails3, I replaced the passive_record plugin with ActiveModel. I'm facing a problems with current generate_message approach.\n\nThe class is under a module namespace and klass.model_name.underscore yields 'module_name/class_name'. I think 'module_name.class_name' would suit better for generate_message (something like \"klass.model_name.underscore.gsub('/', '.')\")...\n\nWhat do you think?\n", "created_at": "2011-05-16 03:32:47", "user": 789801, "id": 1169771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169772", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-09-05 08:01:47 UTC\n\nYes, you are right, this is a bug. Could you please provide a patch with test in another ticket? :D\n", "created_at": "2011-05-16 03:32:48", "user": 789801, "id": 1169772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169773", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-07 13:44:00 UTC\n\nI've created ticket #5572... And, please, tell me what you think about my suggestion for the current ticket...\n", "created_at": "2011-05-16 03:32:48", "user": 789801, "id": 1169773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169774", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 21:12:56 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:32:48", "user": 789801, "id": 1169774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169775", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-10 12:02:11 UTC\n\nUsing the \"patch\" tag instead of prefixing the ticket title with \"[PATCH]\" to make sure patched tickets end up in the [open patches bin](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/bins/5805). :)\n", "created_at": "2011-05-16 03:32:49", "user": 789801, "id": 1169775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169776", "text": "_Imported from Lighthouse._\nComment by **spovich** - 2011-01-14 19:02:25 UTC\n\n+1, would love to see this change.  I like Rodrigo's suggestion of providing the full message right next to the regular message.  This keeps similar string next to each other which is better semantically.\n", "created_at": "2011-05-16 03:32:49", "user": 789801, "id": 1169776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169777", "text": "_Imported from Lighthouse._\nComment by **Lailson Bandeira** - 2011-01-14 19:46:46 UTC\n\n+1, this is a very useful feature, especially for some languages (like portuguese =D).\n", "created_at": "2011-05-16 03:32:49", "user": 789801, "id": 1169777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169778", "text": "_Imported from Lighthouse._\nComment by **Dmitry Polushkin** - 2011-01-24 17:50:06 UTC\n\nPlease update state of this feature.\n", "created_at": "2011-05-16 03:32:50", "user": 789801, "id": 1169778}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169779", "text": "_Imported from Lighthouse._\nComment by **Dmitry Polushkin** - 2011-02-04 15:25:47 UTC\n\nNearly the same functionality can be found here: https://github.com/svenfuchs/i18n-message/\n\n1) Store symbols instead of string messages;\n2) Generate messages for full/short/etc. using symbols by requirement (possible chached);\n3) OrderedHash should be structured in hierarchy, not in flat error array, eg:\n\n```\n{\n  :name => [:blank],\n  :email => [:blank, :invalid]\n}\n```\n\nSo it will be possible to translate it on the remote activerecord server (for example). Right now error messages almost useless in ActiveResource, because it's impossible to detect which errors on which attributes happend.\n\nIf everything is clear and just implementation need, I can try to do it.\n", "created_at": "2011-05-16 03:32:50", "user": 789801, "id": 1169779}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169780", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2011-02-04 16:18:56 UTC\n\nHi Dmitry, \n\nI think the i18n-message plugin approach is much more complex than what I've proposed. I prefer\n\nvalidates_presence_of :some_attribute, :full_message => 'My custom full message'\n\nover\n\nvalidates_presence_of :foo, :message => { :full => 'My custom full message.' }, :format => { :full => '{{message}}' }\n", "created_at": "2011-05-16 03:32:50", "user": 789801, "id": 1169780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169781", "text": "_Imported from Lighthouse._\nComment by **Dmitry Polushkin** - 2011-02-04 17:05:25 UTC\n\nRodrigo,\n\nHow to translate full_message in this case? I mean how it will be connected to the different locales?\n\nIn approach that I've listed above, it's possible to have a message with different formats. Also it fixes another bugs (for example in ActiveResource::Error class for i18n strings). And code will be more flexible, plus without hacks.\n", "created_at": "2011-05-16 03:32:51", "user": 789801, "id": 1169781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169782", "text": "_Imported from Lighthouse._\nComment by **Dmitry Polushkin** - 2011-02-04 17:09:49 UTC\n\nSome off-topic (but anyway still related) about the ActiveResource. Look to this code to understand why it's bad:\n\n```\ndef from_array(messages, save_cache = false)\n  clear unless save_cache\n  humanized_attributes = Hash[@base.attributes.keys.map { |attr_name| [attr_name.humanize, attr_name] }]\n  messages.each do |message|\n    attr_message = humanized_attributes.keys.detect do |attr_name|\n      if message[0, attr_name.size + 1] == \"#{attr_name} \"\n        add humanized_attributes[attr_name], message[(attr_name.size + 1)..-1]\n      end\n    end\n\n    self[:base] << message if attr_message.nil?\n  end\nend\n```\n\nI think, if ActiveModel::Errors have an OrderedHash with the sturcture that I've written in the three posts before, then it will be possible to detect correct error columns in the ActiveResource.\n\nSorry for a small off-topic, but I think it should be discussed here also.\n", "created_at": "2011-05-16 03:32:51", "user": 789801, "id": 1169782}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169783", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2011-02-04 18:18:42 UTC\n\nHi Dmitry, I was not talking about implementation but about the API.\n\nI don't know about the i18n-message implementation. And it really doesn't matter to me. I'm just saying that I would be happy to use i18n-message if its API allowed me to use 'validates... :full_message => \"My custom message\"'. It's much simpler for the common case.\n\nAbout i18n, I think the following API would also be interesting:\n\n```\nvalidates_presence_of :some_attribute, :full_message => :\"some.i18n.symbol.here\"\n```\n\nThis could be translated by the gem to\n\n```\nvalidates_presence_of :some_attribute, :message => {:full => :\"some.i18n.symbol.here\"}, format => {:full => '{{message}}'}\n```\n", "created_at": "2011-05-16 03:32:51", "user": 789801, "id": 1169783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169785", "text": "_Imported from Lighthouse._\nComment by **Dmitry Polushkin** - 2011-02-04 20:21:38 UTC\n\nRodrigo,\n\nI'm talking also about API :) (sorry_for_my_bad_english unless something_could_be_understood).\n\nActually good idea to use :message => {:full => 'message'}, but for the i18n I'd prefer splitted version, that you quoted above:\n\n```\nen:\n  activerecord:\n    errors:\n      models:\n        user:\n          attributes:\n            name:\n              blank: should be specified\n    full_errors:\n      models:\n        user:\n          attributes:\n            name:\n              blank: You must specify your name\n```\n\nSo it will be generated automatically based on those locale strings. So no:\n\n```\n:message => {:full => :\"some.i18n.symbol.here\"}\n```\n", "created_at": "2011-05-16 03:32:52", "user": 789801, "id": 1169785}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169786", "text": "_Imported from Lighthouse._\nComment by **Dmitry Polushkin** - 2011-02-04 20:25:18 UTC\n\nBut only one thing, if you are generating short (standard) message, then it will be taken from short, if you are generating it using full_messages, then it will be taken from full, if not found then formatted using `errors.format.full`, like `%{attribute} %{message}` (or whatever).\n", "created_at": "2011-05-16 03:32:52", "user": 789801, "id": 1169786}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169787", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2011-02-05 01:47:10 UTC\n\nDmitry, I didn't understand your message very well.\n\nI didn't propose using \":message => {:full => 'message'}\". I think the syntax is too big for the common case of specifying a full message for some validation. I just said that I think the proposed API could be internally translated to the former style in the mentioned plugin.\n\nThe proposed API should be useful both for i18n applications and one-language only applications without adding much overhead for the simple task of defining a custom full message for some validation (like creating a i18n yaml even if your application doesn't require i18n).\n", "created_at": "2011-05-16 03:32:52", "user": 789801, "id": 1169787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169788", "text": "Attachments saved to Gist: http://gist.github.com/971657\n", "created_at": "2011-05-16 03:32:53", "user": 789801, "id": 1169788}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3806\nCreated by **Corey** - 2011-02-19 14:02:24 UTC\n\nWhen using the **mathn** ruby standard library, either directly or indirectly, the display of distance_of_time_in_words for time distances of one year or greater shows a Rational number instead of an integer.\n\nFor example:\n\n```\n$ script/console \nLoading development environment (Rails 2.3.5)\n>> from_time = Time.now\n=> Thu Jan 28 09:11:53 -0800 2010\n>> helper.distance_of_time_in_words(from_time, from_time + 1.year + 3.days)\n=> \"about 1 year\"\n>> require 'mathn'\n=> [\"Prime\"]\n>> helper.distance_of_time_in_words(from_time, from_time + 1.year + 3.days)\n=> \"about 368/365 years\"\n>> \n```\n\nI think that if line 92 in rails/actionpack/lib/action_view/helpers/date_helper.rb uses the **round** method on the result of the division for the **distance_in_years** value the display will be as expected.\n", "labels": [], "number": 656, "updated_at": "2013-02-04 15:18:25", "user": 789801, "closed_at": "2011-05-21 15:11:58", "id": 904303, "title": "distance_of_time_in_words displays Rational instead of integer", "url": "https://api.github.com/repos/rails/rails/issues/656", "created_at": "2011-05-16 03:32:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169789", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-07 10:37:37 UTC\n\nMarking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.\n", "created_at": "2011-05-16 03:32:58", "user": 789801, "id": 1169789}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169790", "text": "_Imported from Lighthouse._\nComment by **Corey** - 2010-10-08 01:59:48 UTC\n\nFrom the latest 2.3.x release:\n\n```\n    $ script/console \n    Loading development environment (Rails 2.3.9)\n    >> from_time = Time.now\n    => Thu Oct 07 18:20:30 -0700 2010\n    >> helper.distance_of_time_in_words(from_time, from_time + 1.year + 3.days)\n    => \"about 1 year\"\n    >> require 'mathn'\n    => [\"Prime\"]\n    >> helper.distance_of_time_in_words(from_time, from_time + 1.year + 3.days)\n    => \"about 368/365 years\"\n    >>\n```\n\nFrom the latest Rails release:\n\n```\n    $ rails console\n    Loading development environment (Rails 3.0.0)\n    >> from_time = Time.now\n    => Thu Oct 07 18:28:08 -0700 2010\n    >> helper.distance_of_time_in_words(from_time, from_time + 1.year + 3.days)\n    => \"about 1 year\"\n    >> require 'mathn'\n    => [\"Prime\"]\n    >> helper.distance_of_time_in_words(from_time, from_time + 1.year + 3.days)\n    => \"about 368/365 years\"\n    >>\n```\n\nI wanted to add a test case that would illustrate the problem.  However, as it turned out requiring 'mathn' in the date_helper_test.rb also had it loaded for all of the tests that run after it and some of those then also failed.  I don't know how to sandbox the loading of 'mathn' in the test suite so that other tests aren't affected.\n\nHowever, for Fixnums the methods **/** and **div** give the same result, and that changing from **/** to **div** ensures that mathn's Rationals are not returned.  I've created a patch from 2-3-stable which does that for distance_of_time_in_words and attached it.\n", "created_at": "2011-05-16 03:32:59", "user": 789801, "id": 1169790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169791", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-08 02:07:01 UTC\n\nWait, so mathn is redefining '/'? I think then it's the gems fault and not Rails. I mean Rails shouldn't change because of this. Still, opening ticket to get a consensus on this issue. Thanks for the reply!\n", "created_at": "2011-05-16 03:32:59", "user": 789801, "id": 1169791}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169792", "text": "_Imported from Lighthouse._\nComment by **Corey** - 2010-10-08 02:34:36 UTC\n\nUnfortunately, in my application I'm not loading 'mathn' directly, some gem I just happen to use is loading it.  Everything was ok for me with until [this change](http://github.com/rails/rails/commit/c9318e9010712aeae33b1dd0e8bed4795ae37caf) to the **DateHelper**.\n\nJust for reference, here's the [Ruby issue](http://redmine.ruby-lang.org/issues/show/2121) related to mathn's behavior.\n", "created_at": "2011-05-16 03:32:59", "user": 789801, "id": 1169792}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169793", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 20:57:33 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:33:00", "user": 789801, "id": 1169793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169794", "text": "Attachments saved to Gist: http://gist.github.com/971658\n", "created_at": "2011-05-16 03:33:00", "user": 789801, "id": 1169794}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1273149", "text": "I have just been bitten by this too. I've no idea what code might be including \"mathn\". I just saw Rails break in an obscure fashion from one release to another.\n\nI can't understand why the Rails team resist fixing this by changing to \"div\", whoever's fault they care to say it might be, when changing to \"div\" makes the code work properly with the wider Ruby universe at no cost to Rails itself. You were even sent a patch! Just apply it, and save countless developers the hassle of trying to tackle this bug independently.\n", "created_at": "2011-06-01 09:25:24", "user": 188364, "id": 1273149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13081189", "text": "We've just been bitten by this. In our case, mathn leaks out of ruby-units (see https://github.com/olbrich/ruby-units/pull/43#issuecomment-7092135). Perhaps it would make sense for rails to emit a warning on startup if mathn is detected (along the lines that stuff might get broken when integer division is redefined to return a rational, for example).\n", "created_at": "2013-02-04 15:16:38", "user": 38485, "id": 13081189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13081269", "text": "This issue is already fixed on master\n", "created_at": "2013-02-04 15:18:25", "user": 47848, "id": 13081269}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3927\nCreated by **tadman** - 2011-01-27 05:34:14 UTC\n\nIn Rails 3.0.0-pre, when caching JavaScript and CSS assets, a mysterious error is generated on systems with a separate partition for temporary files.\n\nActionView::Helpers.write_asset_file_contents makes use of File.atomic_write with no tmp_dir parameter specified. This defaults to Dir.tmpdir accordingly, however, it appears that if this directory is on a different volume than the Rails application then an error will result when apparently trying to create a hard-link to move the cached asset file:\n\n```\nActionView::Template::Error (Invalid cross-device link - /tmp//_main.css20100210-24481-ilznwv-0 or public/stylesheets/_main.css)\n```\n\nThis was generated from a simple asset-caching request:\n\n```\nstylesheet_link_tag('reset', 'master', 'forms', :cache => '_main')\n```\n\nThis would only seem to be an issue on systems where Dir.tmpname returns a path on a different volume than where Rails.root is situated. On some Linux installations /tmp is given its own partition.\n\nA simple patch is to use the default Rails tmp/ directory by modifying the call in write_asset_file_contents to be:\n\n```\nmodule ActionView\n  module Helpers\n    def write_asset_file_contents(joined_asset_path, asset_paths)\n\n      FileUtils.mkdir_p(File.dirname(joined_asset_path))\n      File.atomic_write(joined_asset_path, File.join(Rails.root, 'tmp')) { |cache| cache.write(join_asset_file_contents(asset_paths)) }\n\n      # Set mtime to the latest of the combined files to allow for\n      # consistent ETag without a shared filesystem.\n      mt = asset_paths.map { |p| File.mtime(asset_file_path(p)) }.max\n      File.utime(mt, mt, joined_asset_path)\n    end\n  end\nend\n```\n\nIt stands to reason that the environment could be tweaked so that TMPDIR is assigned accordingly somewhere during the initialization, but that may alter behavior on a much larger scale.\n\nThe previous implementation in Rails 2.3.5 does not use atomic_write and does not suffer from this problem:\n\n```\nFile.open(joined_asset_path, \"w+\") { |cache| cache.write(join_asset_file_contents(asset_paths)) }\n```\n\nThis has the unfortunate effect of presumably failing if the Rails application does not have its own tmp/ directory.\n", "labels": [], "number": 657, "updated_at": "2011-05-21 15:11:58", "user": 789801, "closed_at": "2011-05-21 15:11:58", "id": 904304, "title": "Rails 3.0.0-pre - stylesheet_link_tag, javascript_include_tag cache fails when using File.atomic_write: Invalid cross-device link", "url": "https://api.github.com/repos/rails/rails/issues/657", "created_at": "2011-05-16 03:33:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169796", "text": "_Imported from Lighthouse._\nComment by **renchap** - 2010-03-08 13:03:32 UTC\n\nSame problem here, /tmp is on a different partition and I get the error.\n", "created_at": "2011-05-16 03:33:06", "user": 789801, "id": 1169796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169797", "text": "_Imported from Lighthouse._\nComment by **Scott Marshall** - 2010-03-22 18:26:44 UTC\n\nI can confirm that atomic_write is indeed the culprit.\n\nwrite_asset_file_contents calls it without a tmp path argument so it defaults to the system tmp dir which normally is /tmp.\n\nBeing able to configure an alternate tmp dir for atomic writes would solve the problem.\n", "created_at": "2011-05-16 03:33:06", "user": 789801, "id": 1169797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169799", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:31 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:33:38", "user": 789801, "id": 1169799}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169800", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:44 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:33:38", "user": 789801, "id": 1169800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169801", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:34:03 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:33:38", "user": 789801, "id": 1169801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169802", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:50 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:33:38", "user": 789801, "id": 1169802}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169803", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:33:39", "user": 789801, "id": 1169803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169804", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:33:39", "user": 789801, "id": 1169804}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/3983\nCreated by **andreas** - 2010-10-02 09:56:33 UTC\n\nMySQL does not support 4 byte characters in UTF-8 strings. If you try to insert/update a row with a string containing a 4 byte character, the statement succeeds, but the string is truncated at the position of the character. Only the warnings indicate that something went wrong:\n\n```\nmysql> set names 'utf8';                                                        Query OK, 0 rows affected (0.00 sec)\nmysql> update test set `test` = 'AAAAAAAAAAAAA\n```\n", "labels": [], "number": 658, "updated_at": "2011-05-21 15:11:58", "user": 789801, "closed_at": "2011-05-21 15:11:58", "id": 904310, "title": "MySQL adapter silently truncates strings with 4 byte UTF-8 chars", "url": "https://api.github.com/repos/rails/rails/issues/658", "created_at": "2011-05-16 03:33:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169805", "text": "_Imported from Lighthouse._\nComment by **andreas** - 2010-09-27 10:09:15 UTC\n\nConfirmed that this is still open with rails 3.0.0 and jdbcmysql.\n", "created_at": "2011-05-16 03:33:45", "user": 789801, "id": 1169805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169806", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-10-09 14:40:55 UTC\n\nPlease provide a patch (https://rails.lighthouseapp.com/projects/8994/sending-patches) with a failing test and/or a fix.\n", "created_at": "2011-05-16 03:33:45", "user": 789801, "id": 1169806}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169807", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:58:06 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:33:46", "user": 789801, "id": 1169807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169808", "text": "_Imported from Lighthouse._\nComment by **andreas** - 2011-04-06 21:11:03 UTC\n\n[state:open]\n\nStill open in latest 3.x.\n", "created_at": "2011-05-16 03:33:46", "user": 789801, "id": 1169808}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4091\nCreated by **phan** - 2011-02-19 09:28:20 UTC\n\nActiveRecord::SessionStore::Session does not check for empty session_id value. So when cookie_only = false and passing in empty session_key value, a session with empty session_id can be saved into db.\n\nThe problematic code seems to be in AbstractStore\n\n``` ruby\n     def load_session(env)\n          request = Rack::Request.new(env)\n          sid = request.cookies[@key]\n          unless @cookie_only\n            sid ||= request.params[@key]\n          end\n          sid, session = get_session(env, sid)\n          [sid, session]\n      end\n```\n\nand in ActiveRecord::SessionStore\n\n``` ruby\n  def find_session(id)\n        @@session_class.find_by_session_id(id) ||\n         @@session_class.new(:session_id => id, :data => {})\n  end\n```\n\nNone of these check for empty value sid.\n", "labels": [], "number": 659, "updated_at": "2014-03-05 23:10:38", "user": 789801, "closed_at": "2011-05-21 15:11:58", "id": 904312, "title": "ActiveRecord::SessionStore allows blank session_id", "url": "https://api.github.com/repos/rails/rails/issues/659", "created_at": "2011-05-16 03:33:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169811", "text": "_Imported from Lighthouse._\nComment by **Yehuda Katz (wycats)** - 2010-03-29 00:08:03 UTC\n\nWhat's the case where the user unintentionally passes in an empty session ID?\n", "created_at": "2011-05-16 03:33:54", "user": 789801, "id": 1169811}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169812", "text": "_Imported from Lighthouse._\nComment by **phan** - 2010-03-29 00:14:39 UTC\n\nIf the user unintentionally pass in a empty session ID, I would think, we'd have to generate one for them. Otherwise if two users \\* unintentionally\\* passing empty session ids, they are gonna share a session object therefore a security risk.\n", "created_at": "2011-05-16 03:33:55", "user": 789801, "id": 1169812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169813", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2010-05-15 01:00:45 UTC\n\nCan someone write a failing test case to verify this behavior? Patches welcome as well, of course!\n", "created_at": "2011-05-16 03:33:55", "user": 789801, "id": 1169813}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169814", "text": "_Imported from Lighthouse._\nComment by **Anil Wadghule** - 2010-05-15 09:27:18 UTC\n\nnot reproducible\n\nI have added following lines in session_store.rb\n\nRails.application.config.session_store :active_record_store, :cookie_only => false, :key => nil\n\nAttached is a rails app showing it is not reproducible. Hit multiple requests to http://localhost:3000/ (with multiple browsers). It never adds a record with session_id as nil / blank.\n", "created_at": "2011-05-16 03:33:56", "user": 789801, "id": 1169814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169815", "text": "_Imported from Lighthouse._\nComment by **Rust/OGAWA** - 2010-05-25 07:31:15 UTC\n\nAttached patch is a test which should fail : a blank session_id is allowed.\n", "created_at": "2011-05-16 03:33:57", "user": 789801, "id": 1169815}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169816", "text": "_Imported from Lighthouse._\nComment by **Rust/OGAWA** - 2010-05-25 07:38:16 UTC\n\nAbove patch is for 2-3-stable.\n", "created_at": "2011-05-16 03:33:58", "user": 789801, "id": 1169816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169817", "text": "_Imported from Lighthouse._\nComment by **Rust/OGAWA** - 2010-05-25 07:50:53 UTC\n\nIn ActionController::Session::AbstractStore, session_id is regenerated if it is nil. However, session_id is null string(\"\"), it is not regenereted.\n\nThrefore, if session_id is null string, AbstractStore runs the code like ActionController::Request#reset_session and regenerates session_id. And ActionController::Session::AbstractStore#load_session treats correctly if request.cookies[@key] is blank.\n\nThis patch for 2-3-stable is attached.\n", "created_at": "2011-05-16 03:33:58", "user": 789801, "id": 1169817}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169818", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:32 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:33:59", "user": 789801, "id": 1169818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169819", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:46 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:33:59", "user": 789801, "id": 1169819}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169820", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:34:09 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:34:00", "user": 789801, "id": 1169820}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169821", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:50 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:34:01", "user": 789801, "id": 1169821}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169822", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:20 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:34:02", "user": 789801, "id": 1169822}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169823", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:34:03", "user": 789801, "id": 1169823}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169824", "text": "Attachments saved to Gist: http://gist.github.com/971660\n", "created_at": "2011-05-16 03:34:03", "user": 789801, "id": 1169824}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4113\nCreated by **Chris Westbrook** - 2010-11-17 01:58:30 UTC\n\nThis unique situation comes from having your Ruby on Rails project on one hard drive and your bundler gems installed by default on another drive.\n\nI have confirmed with Bundler Dev that this issue is coming from Rails and probably ActiveSupport\n\nThis issue was resolved by creating a system link and launching rails server from within the 'new' system link folder.\n<code>\nC:>mklink /D c:\\ra200 \"D:\\ra200\"\n</code>\n- Error Message: \n  <code>\n  different prefix: \"D:/\" and \"C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/railties/builtin/rails_info\"\n  </code>\n\nThe command you ran to generate exception(s) \n<code>\nruby script/rails server\n(Then access your Rails project)\n</code>\nThe exception backtrace(s) \n<code>\nD:/Ruby19/lib/ruby/1.9.1/pathname.rb:742:in relative_path_from'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:357:inblock in loadable_constants_for_path'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:355:in each'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:355:ininject'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:355:in loadable_constants_for_path'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:408:inload_file'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:310:in require_or_load'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:452:inload_missing_constant'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:153:in block in const_missing'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:151:ineach'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/dependencies.rb:151:in const_missing'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/inflector/methods.rb:112:inblock in constantize'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/inflector/methods.rb:111:in each'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/inflector/methods.rb:111:inconstantize'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/routing/route_set.rb:47:in controller'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/routing/route_set.rb:25:incall'\nrack-mount (0.5.2) lib/rack/mount/recognition/route_set.rb:75:in block in call'\\* rack-mount (0.5.2) lib/rack/mount/recognition/code_generation.rb:99:inblock in recognize'\nrack-mount (0.5.2) lib/rack/mount/recognition/code_generation.rb:76:in optimized_each'\\* rack-mount (0.5.2) lib/rack/mount/recognition/code_generation.rb:98:inrecognize'\nrack-mount (0.5.2) lib/rack/mount/recognition/route_set.rb:66:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/routing/route_set.rb:417:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/query_cache.rb:29:in block in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:34:incache'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/query_cache.rb:9:in cache'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/query_cache.rb:28:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:365:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/head.rb:14:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rack-7f693f2e7da5dbeb0403886fdee49dbe39a6beda-master/lib/rack/methodoverride.rb:24:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/params_parser.rb:20:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/flash.rb:167:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/session/cookie_store.rb:107:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/cookies.rb:205:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/callbacks.rb:46:inblock in call'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/callbacks.rb:429:in _run_call_callbacks'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activesupport/lib/active_support/callbacks.rb:88:inrun_callbacks'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/callbacks.rb:44:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rack-7f693f2e7da5dbeb0403886fdee49dbe39a6beda-master/lib/rack/sendfile.rb:105:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:62:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/railties/lib/rails/rack/logger.rb:13:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rack-7f693f2e7da5dbeb0403886fdee49dbe39a6beda-master/lib/rack/runtime.rb:17:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rack-7f693f2e7da5dbeb0403886fdee49dbe39a6beda-master/lib/rack/lock.rb:11:in block in call'\\* internal:prelude:8:insynchronize'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rack-7f693f2e7da5dbeb0403886fdee49dbe39a6beda-master/lib/rack/lock.rb:11:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/static.rb:30:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/railties/lib/rails/application.rb:91:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/railties/lib/rails/application.rb:41:inmethod_missing'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/railties/lib/rails/rack/log_tailer.rb:15:in call'\\* C:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rack-7f693f2e7da5dbeb0403886fdee49dbe39a6beda-master/lib/rack/content_length.rb:13:incall'\nC:/Users/Christopher/.bundle/ruby/1.9.1/bundler/gems/rack-7f693f2e7da5dbeb0403886fdee49dbe39a6beda-master/lib/rack/handler/webrick.rb:48:in service'\\* D:/Ruby19/lib/ruby/1.9.1/webrick/httpserver.rb:111:inservice'\nD:/Ruby19/lib/ruby/1.9.1/webrick/httpserver.rb:70:in run'\\* D:/Ruby19/lib/ruby/1.9.1/webrick/server.rb:183:inblock in start_thread'\n</code>\n", "labels": [], "number": 660, "updated_at": "2013-09-20 13:53:08", "user": 789801, "closed_at": "2011-05-21 15:11:58", "id": 904314, "title": "Rails 3 - Windows Vista x64 - Error \"different prefix:\" - Two Hard Drives", "url": "https://api.github.com/repos/rails/rails/issues/660", "created_at": "2011-05-16 03:34:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169825", "text": "_Imported from Lighthouse._\nComment by **Damien White** - 2010-05-23 19:51:48 UTC\n\nThanks for the workaround Chris, the mklink worked like a charm.\n\n-Damien\n", "created_at": "2011-05-16 03:34:10", "user": 789801, "id": 1169825}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169826", "text": "_Imported from Lighthouse._\nComment by **Dave Sanders** - 2010-06-14 01:06:04 UTC\n\nFYI, this isn't just when the files are on two different drives.  Here I have the error cropping up even though ruby is installed on my D: drive, which also where my rails app and sever are running from.\n\ndifferent prefix: \"d:/\" and \"D:/Ruby187/lib/ruby/gems/1.8/gems/declarative_authorization-0.4.1/app/controllers\"\n\nRails.root: d:/git/PestNow/PestNow\n\nD:/Ruby187/lib/ruby/1.8/pathname.rb:723:in `relative_path_from'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:360:in`loadable_constants_for_path'\nrack-mount (0.6.4) lib/rack/mount/code_generation.rb:61:in `inject'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:358:in`each'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:358:in `inject'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:358:in`loadable_constants_for_path'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:411:in `load_file'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:313:in`require_or_load'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:455:in `load_missing_constant'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:156:in`const_missing'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:154:in `each'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:154:in`const_missing'\nactivesupport (3.0.0.beta4) lib/active_support/inflector/methods.rb:103:in `constantize'\nactivesupport (3.0.0.beta4) lib/active_support/inflector/methods.rb:102:in`each'\nactivesupport (3.0.0.beta4) lib/active_support/inflector/methods.rb:102:in `constantize'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:487\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:497:in`call'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:497:in `default'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:497:in`[]'\nactivesupport (3.0.0.beta4) lib/active_support/dependencies.rb:497:in `get'\nactionpack (3.0.0.beta4) lib/action_dispatch/routing/route_set.rb:44:in`controller'\nactionpack (3.0.0.beta4) lib/action_dispatch/routing/route_set.rb:23:in `call'\nrack-mount (0.6.4) lib/rack/mount/route_set.rb:148:in`call'\nrack-mount (0.6.4) lib/rack/mount/code_generation.rb:89:in `recognize'\nrack-mount (0.6.4) lib/rack/mount/code_generation.rb:66:in`optimized_each'\nrack-mount (0.6.4) lib/rack/mount/code_generation.rb:88:in `recognize'\nrack-mount (0.6.4) lib/rack/mount/route_set.rb:139:in`call'\nactionpack (3.0.0.beta4) lib/action_dispatch/routing/route_set.rb:457:in `call'\nhaml (3.0.12) lib/sass/plugin/rack.rb:41:in`call'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/head.rb:14:in `call'\nrack (1.1.0) lib/rack/methodoverride.rb:24:in`call'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/params_parser.rb:21:in `call'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/flash.rb:177:in`call'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/session/abstract_store.rb:106:in `call'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/cookies.rb:235:in`call'\nactiverecord (3.0.0.beta4) lib/active_record/query_cache.rb:31:in `call'\nactiverecord (3.0.0.beta4) lib/active_record/connection_adapters/abstract/query_cache.rb:28:in`cache'\nactiverecord (3.0.0.beta4) lib/active_record/query_cache.rb:11:in `cache'\nactiverecord (3.0.0.beta4) lib/active_record/query_cache.rb:30:in`call'\nactiverecord (3.0.0.beta4) lib/active_record/connection_adapters/abstract/connection_pool.rb:365:in `call'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/callbacks.rb:46:in`call'\nactivesupport (3.0.0.beta4) lib/active_support/callbacks.rb:414:in `_run_call_callbacks'\nactivesupport (3.0.0.beta4) lib/active_support/callbacks.rb:88:in`send'\nactivesupport (3.0.0.beta4) lib/active_support/callbacks.rb:88:in `run_callbacks'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/callbacks.rb:44:in`call'\nrack (1.1.0) lib/rack/sendfile.rb:105:in `call'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/remote_ip.rb:48:in`call'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/show_exceptions.rb:48:in `call'\nrailties (3.0.0.beta4) lib/rails/rack/logger.rb:14:in`call'\nrack (1.1.0) lib/rack/runtime.rb:17:in `call'\nactivesupport (3.0.0.beta4) lib/active_support/cache/strategy/local_cache.rb:72:in`call'\nrack (1.1.0) lib/rack/lock.rb:11:in `call'\nrack (1.1.0) lib/rack/lock.rb:11:in`synchronize'\nrack (1.1.0) lib/rack/lock.rb:11:in `call'\nactionpack (3.0.0.beta4) lib/action_dispatch/middleware/static.rb:30:in`call'\nrailties (3.0.0.beta4) lib/rails/application.rb:145:in `call'\nrailties (3.0.0.beta4) lib/rails/application.rb:81:in`send'\nrailties (3.0.0.beta4) lib/rails/application.rb:81:in `method_missing'\nrailties (3.0.0.beta4) lib/rails/rack/log_tailer.rb:15:in`call'\nrack (1.1.0) lib/rack/content_length.rb:13:in `call'\nrack (1.1.0) lib/rack/handler/webrick.rb:48:in`service'\nD:/Ruby187/lib/ruby/1.8/webrick/httpserver.rb:104:in `service'\nD:/Ruby187/lib/ruby/1.8/webrick/httpserver.rb:65:in`run'\nD:/Ruby187/lib/ruby/1.8/webrick/server.rb:173:in `start_thread'\nD:/Ruby187/lib/ruby/1.8/webrick/server.rb:162:in`start'\nD:/Ruby187/lib/ruby/1.8/webrick/server.rb:162:in `start_thread'\nD:/Ruby187/lib/ruby/1.8/webrick/server.rb:95:in`start'\nD:/Ruby187/lib/ruby/1.8/webrick/server.rb:92:in `each'\nD:/Ruby187/lib/ruby/1.8/webrick/server.rb:92:in`start'\nD:/Ruby187/lib/ruby/1.8/webrick/server.rb:23:in `start'\nD:/Ruby187/lib/ruby/1.8/webrick/server.rb:82:in`start'\nrack (1.1.0) lib/rack/handler/webrick.rb:14:in `run'\nrack (1.1.0) lib/rack/server.rb:155:in`start'\nrailties (3.0.0.beta4) lib/rails/commands/server.rb:62:in `start'\nrailties (3.0.0.beta4) lib/rails/commands.rb:30\nrailties (3.0.0.beta4) lib/rails/commands.rb:27:in`tap'\nrailties (3.0.0.beta4) lib/rails/commands.rb:27\nscript/rails:6:in `require'\nscript/rails:6\n\nhope it helps, basically putting me to a standstill - I don't see how to mklink my way out of this one?\n", "created_at": "2011-05-16 03:34:10", "user": 789801, "id": 1169826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169827", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:32 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:34:11", "user": 789801, "id": 1169827}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169828", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:47 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:34:11", "user": 789801, "id": 1169828}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169829", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:34:24 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:34:11", "user": 789801, "id": 1169829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169830", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:12 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:34:12", "user": 789801, "id": 1169830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169831", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:34:12", "user": 789801, "id": 1169831}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169832", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:34:13", "user": 789801, "id": 1169832}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/24811654", "text": "What is the status of this bug? Will it be fixed, because it's closed and I'm still experiencing it when I `@import 'bootstrap'`\n", "created_at": "2013-09-20 13:53:08", "user": 1722672, "id": 24811654}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4141\nCreated by **Kandada Boggu** - 2011-02-16 07:20:11 UTC\n\nThe rake tasks `db:create` and `db:drop` throws an error when the `database.yml` file is configured in a non default location.\n\nThe `database.yml` file location is configured using the `database_configuration_file` attribute of `Rails::Configuration` class.\n### environment.rb\n\n```\nRAILS_GEM_VERSION = '2.3.5' unless defined? RAILS_GEM_VERSION\nrequire File.join(File.dirname(__FILE__), 'boot')\nRails::Initializer.run do |config|\n  config.time_zone = 'UTC'\n\n  # configure the database.yml file location\n  config.database_configuration_file = File.join(\"c:/siteconfig/test\", 'database.yml')\nend\n```\n\nRake tasks `db:drop` and `db:create` throw the following error:\n\n```\n>rake db:drop\n(in C:/test)\nrake aborted!\nNo such file or directory - C:/test/config/database.yml\n```\n\nI am able to run the other rake tasks such as `db:migrate`. The rails application runs without any error.\n\nI located the issue in `db:load_config`.\n\n```\ntask :load_config => :rails_env do\n require 'active_record'\n ActiveRecord::Base.configurations = Rails::Configuration.new.database_configuration\nend\n```\n\nThis task ignores the database config file location override in `environment.rb`. Hence the location always defaults to `RAILS_ROOT/config/database.yml`.\n", "labels": [], "number": 661, "updated_at": "2011-05-21 15:11:58", "user": 789801, "closed_at": "2011-05-21 15:11:58", "id": 904315, "title": "The rake tasks db:create and db:drop throws an error when the database.yml file is configured in a non default location.", "url": "https://api.github.com/repos/rails/rails/issues/661", "created_at": "2011-05-16 03:34:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169833", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:54:31 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:34:18", "user": 789801, "id": 1169833}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169834", "text": "_Imported from Lighthouse._\nComment by **Kandada Boggu** - 2011-02-02 19:21:45 UTC\n\nI can still reproduce this error on Rails 2.3.9.  Please run `rake db:create` on the attached project to reproduce the error.\n", "created_at": "2011-05-16 03:34:19", "user": 789801, "id": 1169834}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169835", "text": "_Imported from Lighthouse._\nComment by **Vijay Dev** - 2011-02-12 19:44:11 UTC\n\nThe issue seems to be solved when I change the <code>load_config</code> task to depend on the <code>environment</code> task instead of <code>rails_env</code> and remove the assignment to <code>ActiveRecord::Base.configurations</code>. Is this a right approach? How can I test this?\n\nI would like to know the reasoning behind allowing the path to database.yml to be configurable. \n\nAlso, there is at least one more issue concerning the database.yml path #1710\n", "created_at": "2011-05-16 03:34:19", "user": 789801, "id": 1169835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169836", "text": "_Imported from Lighthouse._\nComment by **Kandada Boggu** - 2011-02-13 01:14:50 UTC\n\nWe have built a product using Rails framework. Most of our customers/field engineers have no ruby/rails background. When the product is installed, code resides in a directory with read permissions and log/config files reside in a directory with read/write permission. The config directory contain ONLY the files that an administrator can change, i.e. `database.yml` and `app_config.yml`. This done in order to avoid any mishaps in production systems. \n\nThis is a common pattern for a corporate deployment. When we deploy on EC2, an EBS volume stores the configuration and log files and AMI has the project source.\n", "created_at": "2011-05-16 03:34:20", "user": 789801, "id": 1169836}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4176\nCreated by **Sai Emrys** - 2010-03-14 18:49:20 UTC\n\nCurrently, change_table executes every change as an ALTER TABLE in sequence.\n\nThis is extremely inefficient if making multiple changes, especially for a large table. (E.g. right now I'm adding ~25 columns to a table with ~1M rows.) Instead of just e.g. reallocating the table space for the full new size, it reallocates it for every single increment. That's lame.\n\nInstead, change_table should batch together the operations requested (if compatible) and execute them as a single ALTER TABLE command, which would allow the database to optimize its operation.\n\ncf. http://dev.mysql.com/doc/refman/5.1/en/alter-table.html for the mysql version; this is probably true of all other vendors also.\n\nThanks!\n", "labels": [], "number": 662, "updated_at": "2011-05-21 15:11:58", "user": 789801, "closed_at": "2011-05-21 15:11:58", "id": 904316, "title": "Make change_table execute changes in batch", "url": "https://api.github.com/repos/rails/rails/issues/662", "created_at": "2011-05-16 03:34:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169837", "text": "_Imported from Lighthouse._\nComment by **Kenn Ejima** - 2011-01-19 07:03:53 UTC\n\n+1\n\nAs our tables have grown to 10M+ rows, almost all significant migrations have raw ALTER TABLE statements in it due to this exact problem. It would be awesome if change_table runs as a single ALTER TABLE statement.\n", "created_at": "2011-05-16 03:34:25", "user": 789801, "id": 1169837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169838", "text": "_Imported from Lighthouse._\nComment by **Morgan Christiansson** - 2011-02-28 17:41:41 UTC\n\nhttp://m.onkey.org/bulk-alter-table-with-rails-3-and-mysql\n", "created_at": "2011-05-16 03:34:26", "user": 789801, "id": 1169838}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169839", "text": "_Imported from Lighthouse._\nComment by **Kenn Ejima** - 2011-03-08 16:54:32 UTC\n\nAwesome - IMHO :bulk => true should be the default behavior for MySQL, once it's battle-tested in the wild.\n", "created_at": "2011-05-16 03:34:26", "user": 789801, "id": 1169839}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4203\nCreated by **Horace Ho** - 2011-02-17 06:48:06 UTC\n\n```\n$ rails -v\nRails 2.3.5\n$ rails tour\n$ cd tour\n$ script/generate model country code:string name:string --skip-timestamps\n\n    class CreateCountries < ActiveRecord::Migration\n      def self.up\n        create_table :countries, :id => false do |t|\n          t.string :code\n          t.string :name\n        end\n      end\n\n      def self.down\n        drop_table :countries\n      end\n    end\n\n$ rake db:migrate   \n$ script/console\nLoading development environment (Rails 2.3.5)\n>> Country.create(:code => 'ZW', :name => 'Zimbabwe')\n=> #<Country code: \"ZW\", name: \"Zimbabwe\">\n```\n\ndefine a primary key in country.rb:\n\n```\nclass Country < ActiveRecord::Base\n  set_primary_key :code\nend\n```\n\nback to console:\n\n```\n>> reload!\nReloading...\n=> true\n>> Country.find_or_create_by_code('X1')\n=> #<Country code: \"X1\", name: nil>\n>> Country.create(:code => 'X2')\n=> #<Country code: 2, name: nil>\n>> Country.all\n=> [#<Country code: \"ZW\", name: \"Zimbabwe\">, #<Country code: nil, name: nil>, #<Country code: \"X1\", name: nil>]\n```\n\nAfter \"set_primary_key\" is defined, Country.create no longer works. The :code field (primary key) of newly created records is a nil. find_or_create_by_code still works.\n", "labels": [], "number": 663, "updated_at": "2011-05-21 15:11:58", "user": 789801, "closed_at": "2011-05-21 15:11:58", "id": 904317, "title": "create and find_or_create_by behaves differently on model with no :id column", "url": "https://api.github.com/repos/rails/rails/issues/663", "created_at": "2011-05-16 03:34:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169840", "text": "_Imported from Lighthouse._\nComment by **Alexey Nayden** - 2011-01-14 00:10:23 UTC\n\n@Horace actually AR always marks primary key column as attr_protected, so you're unable to mass-assign it with hash in #create. If you try to activate logging to stdout\n  ActiveRecord::Base.logger = Logger.new(STDOUT)\nyou'll get an error message regarding mass-assignment protected attribute. So in your case you're trying to create a record without PK column set to any value. And due to your database inconsistency in that example (i.e. PK insn't NOT NULL and UNIQUE as it always should), DB allows you to create such invalid record. If you set DB constraints for PK, you'd get an error ‚Äî¬†all correct.\n\nThat's it.\n", "created_at": "2011-05-16 03:34:32", "user": 789801, "id": 1169840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169841", "text": "_Imported from Lighthouse._\nComment by **Alexey Nayden** - 2011-01-14 00:11:08 UTC\n\nAnd, of course, your example is obviously fixed with \"c = Country.new; c.code = 'X2'; c.save\"\n", "created_at": "2011-05-16 03:34:32", "user": 789801, "id": 1169841}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4229\nCreated by **Slava** - 2011-03-03 09:20:17 UTC\n\nruby 1.9.2-head\nrails 3.0.beta1 \n\nDeveloping a Rails 3 application I created an initializer that loads some date from db.\n\n```\n...\nputs \"count \" + StatSource.all.count.to_s\n```\n\nAfter adding this initializer when making http requests to the application I get error:\n\n```\nStarted GET \"/websites/3\" for 127.0.0.1 at 2010-03-18 21:03:41\n\nNameError (uninitialized constant ActiveRecord::Base::MysqlCompat):\n\n\nRendered /home/slava/.rvm/gems/ruby-1.9.2-head/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.0ms)\nRendered /home/slava/.rvm/gems/ruby-1.9.2-head/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (0.8ms)\nRendered /home/slava/.rvm/gems/ruby-1.9.2-head/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/actionpack/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (4.6ms)\n```\n\nif i comment out that line in initializer everything works, error goes away..\n", "labels": [], "number": 664, "updated_at": "2011-05-16 03:39:28", "user": 789801, "closed_at": "2011-05-16 03:39:28", "id": 904318, "title": "uninitialized constant ActiveRecord::Base::MysqlCompat", "url": "https://api.github.com/repos/rails/rails/issues/664", "created_at": "2011-05-16 03:34:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169842", "text": "_Imported from Lighthouse._\nComment by **Matija Folnovic** - 2010-04-03 11:16:23 UTC\n\nI'm getting same error, also in initializer ( seems that's initializers issue ), but in rails3.0.beta2!\n", "created_at": "2011-05-16 03:34:38", "user": 789801, "id": 1169842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169843", "text": "_Imported from Lighthouse._\nComment by **xdanger (at gmail)** - 2010-05-25 09:57:09 UTC\n\nI'm getting same error, also in initializer, in BETA3\n", "created_at": "2011-05-16 03:34:38", "user": 789801, "id": 1169843}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169844", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-05-25 12:45:28 UTC\n\nLooks like this is not an issue with ruby 1.8.7. I am not able to produce this error with ruby 1.8.7 and rails edge.\n\nruby 1.8.7 (2010-01-10 patchlevel 249) [i686-darwin10.3.0]\n", "created_at": "2011-05-16 03:34:39", "user": 789801, "id": 1169844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169845", "text": "_Imported from Lighthouse._\nComment by **Daniel Morris** - 2010-05-26 13:04:43 UTC\n\nI'm getting this error with 1.8.7 and rails 3 beta 3\n\nNameError: uninitialized constant ActiveRecord::Base::MysqlCompat\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:70:in `mysql_connection'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:226:in`send'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:226:in `new_connection'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:248:in`checkout_new_connection'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:190:in `checkout'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:186:in`loop'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:186:in `checkout'\n    from /usr/local/rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/monitor.rb:242:in`synchronize'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:185:in `checkout'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:99:in`connection'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:330:in `retrieve_connection'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:103:in`retrieve_connection'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:95:in `connection'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/base.rb:758:in`columns'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/persistence.rb:224:in `attributes_from_column_definition'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/locking/optimistic.rb:62:in`attributes_from_column_definition'\n    from /usr/local/rvm/gems/ruby-1.8.7-p249/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/base.rb:1425:in `initialize'\n", "created_at": "2011-05-16 03:34:39", "user": 789801, "id": 1169845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169846", "text": "_Imported from Lighthouse._\nComment by **ronin-45053 (at lighthouseapp)** - 2010-05-29 05:29:08 UTC\n\nI can confirm that I get this problem with both ruby 1.8.7 and 1.9.1 on Windows 7 64bit.\nI first noticed it in the rails console after reloading to see my model changes.\n\n```\nC:\\Users\\Samuel Kadolph\\My Projects\\Rails\\Genti>rails console\nLoading development environment (Rails 3.0.0.beta3)\nirb(main):001:0> u = User.new\n=> #<User id: nil, type: nil, username: nil, ...snip... created_at: nil, updated_at: nil>\nirb(main):002:0> u.username = \"Samuel\"\n=> \"Samuel\"\nirb(main):003:0> u.password = \"abc123\"\n=> \"abc123\"\nirb(main):004:0> u.save\n=> false\nirb(main):005:0> reload!\nReloading...\n=> true\nirb(main):006:0> u\nNameError: uninitialized constant ActiveRecord::Base::MysqlCompat\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/mysql_adapter.rb:70:in `mysql_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:226:in `send'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:226:in `new_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:248:in `checkout_new_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:190:in `checkout'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:186:in `loop'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:186:in `checkout'\n        from C:/Ruby/lib/ruby/1.8/monitor.rb:242:in `synchronize'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:185:in `checkout'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:99:in `connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:330:in `retrieve_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_specification.rb:103:in `retrieve_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_specification.rb:95:in `connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:862:in `columns'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:875:in `column_names'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:1957:in `inspect'\n        from C:/Ruby/lib/ruby/1.8/irb.rb:310:in `output_value'\n        from C:/Ruby/lib/ruby/1.8/irb.rb:159:in `eval_input'\n        from C:/Ruby/lib/ruby/1.8/irb.rb:271:in `signal_status'\n        from C:/Ruby/lib/ruby/1.8/irb.rb:155:in `eval_input'\n        from C:/Ruby/lib/ruby/1.8/irb.rb:154:in `eval_input'\n        from C:/Ruby/lib/ruby/1.8/irb.rb:71:in `start'\n        from C:/Ruby/lib/ruby/1.8/irb.rb:70:in `catch'\n        from C:/Ruby/lib/ruby/1.8/irb.rb:70:in `start'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/railties-3.0.0.beta3/lib/rails/commands/console.rb:47:in `start'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/railties-3.0.0.beta3/lib/rails/commands/console.rb:8:in `start'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/railties-3.0.0.beta3/lib/rails/commands.rb:34\n        from script/rails:9:in `require'\n        from script/rails:9\nirb(main):007:0> User.new\nNameError: uninitialized constant ActiveRecord::Base::MysqlCompat\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/mysql_adapter.rb:70:in `mysql_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:226:in `send'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:226:in `new_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:248:in `checkout_new_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:190:in `checkout'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:186:in `loop'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:186:in `checkout'\n        from C:/Ruby/lib/ruby/1.8/monitor.rb:242:in `synchronize'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:185:in `checkout'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:99:in `connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_pool.rb:330:in `retrieve_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_specification.rb:103:in `retrieve_connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/connection_adapters/abstract/connection_specification.rb:95:in `connection'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:862:in `columns'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:2105:in `attributes_from_column_definition_without_lock'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/locking/optimistic.rb:55:in `attributes_from_column_definition'\n        from C:/Ruby/lib/ruby/gems/1.8/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:1525:in `initialize'\n        from (irb):7:in `new'\n        from (irb):7\nirb(main):008:0>\n```\n", "created_at": "2011-05-16 03:34:39", "user": 789801, "id": 1169846}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169847", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:51:11 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:34:40", "user": 789801, "id": 1169847}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170035", "text": "Installation error.\n", "created_at": "2011-05-16 03:39:28", "user": 9582, "id": 1170035}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4249\nCreated by **Andreas Mayer** - 2011-02-19 09:28:16 UTC\n\nIn Rails 2.3, I used the following line as shebang line for my scripts that should run in a Rails environment:\n    #!/usr/bin/env /path/to/my/app/script/runner\n\nso exec(\"/usr/bin/env\", \"/path/to/my/app/script/runner\", \"./my-script.rb\") was called and it worked.\n\nIn Rails 3.0.0beta1, the script/runner has been merged into the rails tool and as I understand it, I should call it as follows:\n$ rails runner ./my-script.rb\nwhich works.\n\nBut, when I want to use the runner as a shebang line (as \"rails runner -h\" tells me:\n    You can also use runner as a shebang line for your scripts like this:\n    -------------------------------------------------------------\n    #!/usr/bin/env /path/to/my/app/script/rails\n    Product.find(:all).each { |p| p.price *= 2 ; p.save! }\n    -------------------------------------------------------------\n) it doesn't work because:\n\n1) The given shebang from rails runner tells me:\n    $ ./my-script.rb \n    Error: Command not recognized\n    Usage: rails COMMAND [ARGS]\n    ...\n\nbecause \"rails\" alone is not enough, it should be \"rails runner\"\n\n2) I can't use \"#!/usr/bin/env /path/to/my/app/script/rails runner\" because parameters don't get separated in shebang lines, so\nexec(\"/usr/bin/env\", \"/path/to/my/app/script/rails runner\", \"./my-script.rb\"); is called which returns\n    $ ./my-script.rb \n    /usr/bin/env: /path/to/my/app/script/rails runner: file or directory not found\n\n3) So I would have to use `#!/path/to/my/app/script/rails runner` the the parameters are correct but shebangs doesn't execute scripts => env is needed\n\nSo my only possibility would be a wrapper script, i.e. I would have to re-write script/runner that calls \"rails runner\" or to always call \"rails runner script.rb\" instead of \"./script.rb\" directly.\n\nSo:\n1) Please fix the output of \"rails runner -h\". The suggested shebang doesn't work.\n2) Maybe re-introduce script/runner?\n", "labels": [], "number": 665, "updated_at": "2017-06-28 19:24:33", "user": 789801, "closed_at": "2011-05-21 15:11:59", "id": 904319, "title": "\"rails runner\" can't be used in shebang lines", "url": "https://api.github.com/repos/rails/rails/issues/665", "created_at": "2011-05-16 03:34:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169848", "text": "_Imported from Lighthouse._\nComment by **trevor** - 2010-03-23 00:28:16 UTC\n\n+1\n\nthis is a big issue for me as well\n", "created_at": "2011-05-16 03:34:45", "user": 789801, "id": 1169848}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169849", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-06-22 05:00:10 UTC\n\nYehuda, will you be working on this? There is this one more ticket [#2244](https://rails.lighthouseapp.com/projects/8994/tickets/2244-script-runner-should-overwrite-0) and I was about to write some tests, I'm guessing I should wait for changes caused by this ticket?\n", "created_at": "2011-05-16 03:34:46", "user": 789801, "id": 1169849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169850", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-06-22 07:52:41 UTC\n\n> ... because parameters don't get separated in shebang lines ...\n\nAccording to this [Wikipedia](http://en.wikipedia.org/wiki/Shebang_%28Unix%29#Portability) entry it's a portability thing. Not all systems separate the arguments :(\n\nSo building a wrapper might be the only option imho.\n", "created_at": "2011-05-16 03:34:46", "user": 789801, "id": 1169850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169851", "text": "_Imported from Lighthouse._\nComment by **raggi** - 2010-06-22 14:16:15 UTC\n\nYup, portability is a bitch with this, we have the same problem with `rackup` for cgis in rack. No ideal solution, I just recommend to people that they write a .cgi / .fcgi with a shebang directed at `which ruby`.\n", "created_at": "2011-05-16 03:34:46", "user": 789801, "id": 1169851}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169852", "text": "_Imported from Lighthouse._\nComment by **raggi** - 2010-06-22 14:18:12 UTC\n\nMaybe add a generator that makes a script/runner?\n\nThat way it could be built by a rake task, rather than having a potentially non-working committed version?\n", "created_at": "2011-05-16 03:34:47", "user": 789801, "id": 1169852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169853", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:32 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:34:47", "user": 789801, "id": 1169853}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169854", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-09-16 04:08:39 UTC\n\nAttached is a patch that fixes the --help output to include runner in the shebang line. Although it won't work on many systems it might still work on some as indicated here https://rails.lighthouseapp.com/projects/8994/tickets/5637\n\nTill a wrapper is introduced I think it's a good idea to fix the help output to something that's not entirely wrong.\n", "created_at": "2011-05-16 03:34:47", "user": 789801, "id": 1169854}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169855", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-09-18 18:50:27 UTC\n\n(from [76266a818449c732440e7e2ef4de8442ac6af891]) Fix output of 'rails runner --help' [#4249 state:open]\nhttp://github.com/rails/rails/commit/76266a818449c732440e7e2ef4de8442ac6af891\n", "created_at": "2011-05-16 03:34:48", "user": 789801, "id": 1169855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169856", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-09-19 07:34:48 UTC\n\nI think the patch should be applied to 3-0-stable too so that in 3.0.1 as a bare minimum the help message will be correct, in case the wrapper isn't ready by then.\n", "created_at": "2011-05-16 03:34:48", "user": 789801, "id": 1169856}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169857", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:49 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:34:49", "user": 789801, "id": 1169857}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169858", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:34:30 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:34:49", "user": 789801, "id": 1169858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169859", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-11 03:18:14 UTC\n\nHey Rohit which is the state of this issue?. Needs something else?\n", "created_at": "2011-05-16 03:34:49", "user": 789801, "id": 1169859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169860", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-11-12 02:41:57 UTC\n\nSantiago, the original issue still remains. You can't use rails runner from shell scripts (in the shebang line) on certain platforms. I'll take a look at it again as soon as I can and try to work on a patch.\n", "created_at": "2011-05-16 03:34:50", "user": 789801, "id": 1169860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169861", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:50 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:34:50", "user": 789801, "id": 1169861}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169862", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-01-27 04:51:32 UTC\n\nI tried 3 ways of going about this &mdash;\n\n1] Moving the <code>rails runner</code> command code into <code>script/runner</code>\n\nThis is easy and I think I've gotten it working 100%. But it leads to duplication i.e there is a rails runner command and the same code in script/runner. We could maybe deprecate <code>rails runner</code> and in the next to next release remove it altogether.\n\n2] Running the <code>rails runner</code> command from within <code>script/runner</code> using shell script\n\nI don't know if I can write a general script that will work in bash, sh and other scripting environments. So I immediately stopped trying in this direction.\n\n3] Running the <code>rails runner</code> command from within <code>script/runner</code> using Ruby\n\nThis looks like the most promising way and seems to work perfectly fine. I use the <code>rails</code> executable from <tt>app/script/rails</tt> since even the rails command uses it.\n\nI can work on a patch on either option 1 or option 2. I personally suggest option 3 since it reuses the rails runner command using just a 3 line ruby script. No duplication that comes with the first method.\n", "created_at": "2011-05-16 03:34:50", "user": 789801, "id": 1169862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169863", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-01-27 04:54:22 UTC\n\nP.S the script for option 3 is as follows:\n\n``` ruby\n#!/usr/bin/env ruby\n\npath_to_rails = File.dirname(File.expand_path(__FILE__))\nexec(\"#{path_to_rails}/rails runner #{ARGV[0]}\")\n```\n\nYou can just drop it in <code>your_rails_app/script/runner</code> &mdash; <code>chmod +x</code> the file and use it in place of rails runner.\n", "created_at": "2011-05-16 03:34:51", "user": 789801, "id": 1169863}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169864", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-01-28 10:41:53 UTC\n\nI'm actually trying to find somebody who uses the runner as shebang lines in their scripts and I honestly can't find one person. If anybody following this ticket does use runner that way, could you give some feedback on the above wrapper approach? I don't know if there are any limitations of doing it that way.\n", "created_at": "2011-05-16 03:34:51", "user": 789801, "id": 1169864}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169865", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-01-28 10:59:54 UTC\n\nI'm going to just attach the patch which creates a wrapper for rails runner &mdash; basically the script just executes rails runner command.\n", "created_at": "2011-05-16 03:34:51", "user": 789801, "id": 1169865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169866", "text": "_Imported from Lighthouse._\nComment by **Andreas Mayer** - 2011-01-29 13:16:42 UTC\n\n@Rohit: I did, and why shouldn't I? It is a documented feature and I didn't even have the idea that I couldn't run a Ruby script from crontab with a single command (so, using the shebang line).\n\nOf course, if it's documented that this doesn't work, it's also OK. I just want to be able to call method from my Rails project from crontab with one command.\n", "created_at": "2011-05-16 03:34:52", "user": 789801, "id": 1169866}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169867", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-01-29 13:20:32 UTC\n\nAndreas, could you give some feedback on the above patch? Does that do what you want? I'm sorry but I'm unsure about things as I myself don't use the rails runner. If the patch isn't satisfactory could you please work on one?\n", "created_at": "2011-05-16 03:34:52", "user": 789801, "id": 1169867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169868", "text": "_Imported from Lighthouse._\nComment by **Andreas Mayer** - 2011-01-29 13:57:45 UTC\n\n@Rohit: Thank you. As far as I see, this should work, but I haven't tested yet.\n", "created_at": "2011-05-16 03:34:52", "user": 789801, "id": 1169868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169869", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-02-01 05:04:13 UTC\n\nAndreas, please do test it. I'm finding it hard to find more people who can take a look at it actually. So if you know anybody else who might have an opinion please do direct them here! Thanks :)\n", "created_at": "2011-05-16 03:34:53", "user": 789801, "id": 1169869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169870", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2011-02-01 09:36:07 UTC\n\nPlease remove the help message from the script/rails runner output. I think it is easier for people to roll their own script then having a script/runner in rails mostly because using script/runner directly wouldn't work as you need to call bundle exec script/runner.\n", "created_at": "2011-05-16 03:34:53", "user": 789801, "id": 1169870}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169871", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:34:53", "user": 789801, "id": 1169871}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169872", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:34:54", "user": 789801, "id": 1169872}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169873", "text": "Attachments saved to Gist: http://gist.github.com/971661\n", "created_at": "2011-05-16 03:34:54", "user": 789801, "id": 1169873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18224803", "text": "I believe this works and is portable:\n\n```\n#!/usr/bin/env ruby\n\nif not defined?(Rails) then\n  exec(\"rails\", \"runner\", __FILE__, *ARGV)\nend\n```\n", "created_at": "2013-05-21 17:45:01", "user": 4090, "id": 18224803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/44961585", "text": "@cout That just made my day!\n\nsodding brilliant!\n", "created_at": "2014-06-03 13:06:54", "user": 287640, "id": 44961585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/311761892", "text": "If you use\r\n```\r\n#!/usr/bin/env ruby\r\n\r\nif not defined?(Rails) then\r\n  exec(\"rails\", \"runner\", File.expand_path(__FILE__), *ARGV)\r\nend\r\n```\r\nyou can run from directories in the Rails subtree other than the Rails root directory.", "created_at": "2017-06-28 19:24:33", "user": 1706896, "id": 311761892}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4337\nCreated by **Mike Perham** - 2011-02-17 08:07:24 UTC\n\nMy work on Phat (http://www.mikeperham.com/2010/04/03/introducing-phat-an-asynchronous-rails-app/) brought to light a few issues in making Rails working in a single Thread, multiple Fiber environment.\n\nThe full set of patches required for ActiveRecord is here:\n\nhttp://github.com/mperham/em_postgresql/blob/master/lib/active_record/patches.rb\n\nSome of these changes can't be easily rolled back into Rails but the ones that can IMO are:\n- The connection pool's checkout method should mark a connection as checked out before actually using it, otherwise another Fiber may try to use the same connection while the verify! operation is in progress.\n\nIn connection_pool.rb\n\n```\ndef checkout_and_verify(c)\n  @checked_out << c\n  c.verify!\n  c.run_callbacks :checkout\n  c\nend\n```\n- The connection pool Mutex should be configurable.  Since Fibers cause a single thread to check out many connections from the pool, the Mutex causes deadlocks, even though there is only a single Thread executing.  Ideally, I should be able to supply my own Mutex and Condition classes which are Fiber-friendly.\n", "labels": [], "number": 666, "updated_at": "2011-05-21 15:11:59", "user": 789801, "closed_at": "2011-05-21 15:11:59", "id": 904320, "title": "Tweaks to make ActiveRecord Fiber-friendly", "url": "https://api.github.com/repos/rails/rails/issues/666", "created_at": "2011-05-16 03:34:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169875", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-04-07 17:24:38 UTC\n\nCool - thanks for working on this, Mike!\n\nLooks like the pool implementation itself could be configurable so you could pick a threaded or fibered variant.\n\nPatches (and tests) welcome, of course :)\n", "created_at": "2011-05-16 03:35:00", "user": 789801, "id": 1169875}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169876", "text": "_Imported from Lighthouse._\nComment by **Mike Perham** - 2010-04-07 17:56:23 UTC\n\nAny suggestions on the switching logic?  I like the idea of config.fibersafe! which works in a similar fashion to config.threadsafe!  It would be able to rejigger the Rails stack (AR, memcache-client, e.g.) to use Fiber-safe versions.\n", "created_at": "2011-05-16 03:35:00", "user": 789801, "id": 1169876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169877", "text": "_Imported from Lighthouse._\nComment by **Mike Perham** - 2010-04-07 21:32:33 UTC\n\nPatch attached.  I'm unhappy with a few areas that perhaps you can suggest alternatives:\n1. How do we cleanly get the concurrency_model value from the Rails::Application instance down to the ConnectionPool?  My defined? code is definitely a hack.\n2. I had to pull in EventMachine into the Gemfile in order to test the Fibers actually executing.  The wait queue uses EM to pause while waiting for a connection and I'm not sure we want to introduce that dependency into ActiveRecord, even if it's pulled in dynamically.\n3. There's no real way to implement remove_stale_cached_threads! since we can't get a list of Fibers in the system.  I hacked it in em_postgresql by registering the application's FiberPool manually.  I don't know if this is a showstopper but it's a concern.\n", "created_at": "2011-05-16 03:35:00", "user": 789801, "id": 1169877}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169878", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2010-05-15 00:54:33 UTC\n\nAdvanced bugmashin': Can some bugmashers critique the patch and revise/comment as necessary?\n", "created_at": "2011-05-16 03:35:01", "user": 789801, "id": 1169878}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169879", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:32 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:35:01", "user": 789801, "id": 1169879}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169880", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:35:01", "user": 789801, "id": 1169880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169881", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:55:03 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:35:02", "user": 789801, "id": 1169881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169882", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:50 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:35:02", "user": 789801, "id": 1169882}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169883", "text": "_Imported from Lighthouse._\nComment by **wtn** - 2010-11-20 05:59:41 UTC\n\n+1\n\nHope to see this patch get accepted.\n", "created_at": "2011-05-16 03:35:02", "user": 789801, "id": 1169883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169884", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-12-15 23:31:28 UTC\n\nI will attempt to test / fix this.  I don't like the architecture of the patch.  I think we should have two subclasses of connection pool (one for threads and one for fibers) then switch the instantiation logic.  Having initialize extend the current instance seems not good.\n\nWe can have the [spec contain configuration info](http://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb#L284-286).  IIRC, the spec comes from the database configuration yaml file, so config could be something like:\n\n```\ndevelopment:\n  adapter: sqlite3\n  database: db/development.sqlite3\n  pool: 5\n  timeout: 5000\n  concurrency: fiber\n```\n\n(I'm not sure this is _exactly_ what the config file would look like)\n\nI'm marking this for Rails 3.1 as this seems like too much for a bugfix release.\n", "created_at": "2011-05-16 03:35:03", "user": 789801, "id": 1169884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169885", "text": "Attachments saved to Gist: http://gist.github.com/971662\n", "created_at": "2011-05-16 03:35:03", "user": 789801, "id": 1169885}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4346\nCreated by **khagimoto** - 2010-12-28 03:36:18 UTC\n\nPlease see the post titled \n\n\"time_select and MultiparameterAssignmentErrors\" on \"Ruby on Rails: Talk\" group here:\nhttp://groups.google.com/group/rubyonrails-talk/browse_thread/thread/dfc64e24151c7880\n\nGist is that when time_select helper is used with ANY options (:prompt => true, etc.), it fails to interpret the multi-parameter correctly.\n\nExample:\nWhen :ignore_date => true AND I don't include seconds, only params (4i) and (5i) are passed as expected, but they are interpreted as Year and Month instead of Hour and Minute.\n", "labels": [], "number": 667, "updated_at": "2011-05-16 15:00:15", "user": 789801, "closed_at": "2011-05-16 15:00:15", "id": 904321, "title": "time_select not interpreting the multi-parameter correctly", "url": "https://api.github.com/repos/rails/rails/issues/667", "created_at": "2011-05-16 03:35:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169887", "text": "_Imported from Lighthouse._\nComment by **ultimasnake** - 2010-10-04 17:38:53 UTC\n\nAt first I \"blamed\" an I8n compatiblity problem (wrong format interpeted) and was deeply looking into it, but khagimoto seems to be right. I have been using prompt for \"please select\" text for hours/minutes with the select_time and it kept giving me problems when selecting values above 12 minutes (also rather at random)... any value on :prompt different then true seems to break the code.\n", "created_at": "2011-05-16 03:35:09", "user": 789801, "id": 1169887}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169888", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-10-08 08:26:37 UTC\n\nPlease provide a patch with a fix/failing test.\n", "created_at": "2011-05-16 03:35:09", "user": 789801, "id": 1169888}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169889", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-08 14:39:14 UTC\n\nI confirm this is a bug. I'm working on a failing test and a deeper description of the problem(s). Just a couple of hours ...\n", "created_at": "2011-05-16 03:35:09", "user": 789801, "id": 1169889}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169890", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-08 19:51:52 UTC\n\nIf you use time_select with the :ignore_date => true option, you will get this error. The patch i've added adds the failing test. The error received is \"1 error(s) on assignment of multiparameter attributes\". You will NOT get an error if the chosen minute is between 0-12. time select needs a default date, without the date, the Hour, Minute, Second become Year, Month, Day. So the Hour shifts to year, minute shifts to month (so if you have it bigger than 12 you get an error and if its less than 12 you don't get an error), seconds shifts to day (if you seconds greater than 30/31 you will also see an error).\n\nSimply put, i think the documentation and the time_select function needs to be modified to not accept :ignore_date => true as an option.\n\nPlease see test \"test_time_select_without_date_hidden_fields\" in actionpack/test/template/date_helper_test.rb which tests for creation of fields without the date bits. \n\nOnce we are convinced about this. I'll submit another patch which will really fix the documentation, code, test etc.\n", "created_at": "2011-05-16 03:35:10", "user": 789801, "id": 1169890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169891", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-10-08 21:22:01 UTC\n\nAditya can you provide a patch please?.\nAnd this is for 3.0 I guess right?\n", "created_at": "2011-05-16 03:35:10", "user": 789801, "id": 1169891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169892", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-09 07:53:55 UTC\n\nI think this is a problem in 2.3.X also and yes I will provide a patch for that too.\n", "created_at": "2011-05-16 03:35:10", "user": 789801, "id": 1169892}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169893", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-09 08:02:39 UTC\n\nCan someone highlight the use case for \":ignore_date => true\" when using time_select by the way? \n\nNo point removing the option if there really is a valid use case for it.\n", "created_at": "2011-05-16 03:35:11", "user": 789801, "id": 1169893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169894", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-09 08:23:46 UTC\n\n> This method will also generate 3 input hidden tags, for the actual year, month and day unless the option :ignore_date is set to true.\n\n<em>http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#method-i-time_select</em>\n", "created_at": "2011-05-16 03:35:11", "user": 789801, "id": 1169894}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169895", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-09 08:42:49 UTC\n\nThanks Rohit, I read the documentation but it doesn't say WHY we would need the :ignore_date field.\n\nBut the gumshoe that i am, the use-case for :ignore_date was found in this ticket more than 2 years ago.\n\nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/503-add-deny_hidden-option-to-date-helpers-so-rails-doesn-t-render-them\n\nThe requirement stated in this ticket is dubious to say the least but some how got approved. Emilio wants to use the time_select and date_select on the same field for design reasons. Why dont they just use datetime_select, i dont know? \n\nI would love to hear from the core committers on their viewpoint before i proceed.\n\nIf nothing else gets fixed, at the very least the documentation should be update to ensure that if :ignore_date is used on time_select, a date_select on the same field is mandatory. Sounds silly to me anyway.\n", "created_at": "2011-05-16 03:35:11", "user": 789801, "id": 1169895}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169896", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-09 09:01:07 UTC\n\n<code>datetime_select</code> will return a set of selects. What Emilio had asked for is the ability to have the same select tags in different locations. At least that's how I see it. I guess it's best if you wait for some direction on how to proceed here.\n\nAnyways keep up the good work! :)\n", "created_at": "2011-05-16 03:35:12", "user": 789801, "id": 1169896}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169897", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-09 15:57:38 UTC\n\nI'm including a comment update patch which should ideally be applied anyway. This remove redundant examples and invalid comment from above the time_select helper. I've also included a comment to ensure proper usage of :ignore_date => true (i.e. if you do this, you must also do date_select on the same attribute in the form).\n\n@santiago, i request you to please have a look at the patch and commit if you think so.\n", "created_at": "2011-05-16 03:35:12", "user": 789801, "id": 1169897}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169898", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2010-10-10 09:12:26 UTC\n\nAditya I think more coverage would be better for the user: a use case for :ignore_date, why is another helper needed at all, and why one wouldn't use a different helper in the first place instead of that pair.\n", "created_at": "2011-05-16 03:35:12", "user": 789801, "id": 1169898}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169899", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-10 11:16:39 UTC\n\nXavier, I'm actually at a total loss about the use case for this. Apparently it was introduced 2 years ago for design reasons in ticket [#503](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/503-add-deny_hidden-option-to-date-helpers-so-rails-doesn-t-render-them).\n\nDid you mean more coverage in tests or documentation? \n\nFrankly, i believe the use case is invalid and ideally we should remove this functionality of <code>:ignore_date => true</code>.\n", "created_at": "2011-05-16 03:35:13", "user": 789801, "id": 1169899}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169900", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2010-10-10 11:35:46 UTC\n\nDocumentation coverage. This is an unclear option, in such cases it is good to explain why it is useful to the end-user. The motivation for #503 seems a good use-case. The explanation could briefly cover why the helper is generating hidden fields at all, which is the role of the date part in all this.\n", "created_at": "2011-05-16 03:35:38", "user": 789801, "id": 1169900}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169901", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-10 12:26:39 UTC\n\nXavier, why would one not use <code>datetime_select</code> instead for this? I've updated the documentation with more conviction this time :)\n", "created_at": "2011-05-16 03:35:38", "user": 789801, "id": 1169901}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169902", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-10 19:30:19 UTC\n\nPlease use the \"patch\" tag when adding a patch to make sure patched tickets end up in the [open patches bin](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/bins/5805). :)\n", "created_at": "2011-05-16 03:35:39", "user": 789801, "id": 1169902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169903", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-13 06:58:28 UTC\n\nNote this applies to edge too (just verified), so the milestone should be reset accordingly.\n\nMy first hunch was to find a fix for the root issue, as an alternative to documenting the current behavior (which is quite surprising IMO), but then I started delving deeper into the code, @ActiveRecord::Base#assign_multiparameter_attributes@ in particular.\n\n@#assign_multiparameter_attributes@ calls @#execute_callstack_for_multiparameter_attributes@, and this method grew quite big over time; it does try to do the right thing (tm) for Dates, but that just ends messing things up for Time.\nI'd like to spend a bit more time on this and try a different solution; will provide a patch as soon as I'm done.\n\nJust for early feedback, my current reasoning is this:\nthe current code trusts that all \"multiparameter\" values are provided, sequentially. In other words, these will be equivalent:\n\n```\nextract_callstack_for_multiparameter_attributes('datetime(1i)' => '1') # => {\"sometime\"=>[1]}\nextract_callstack_for_multiparameter_attributes('datetime(1i)' => '', 'datetime(2i)' => '1') # => {\"sometime\"=>[nil, 1]}\n# missing field\nextract_callstack_for_multiparameter_attributes('datetime(2i)' => '1') # => {\"sometime\"=>[1]}\n```\n\nFor a Date attribute, the nil are preserved and replaced with default values; for a Time attribute that doesn't happen, leading to POLA failures.\nThis looks silly to me: we have a position index, we should use it to either provide default values for missing parts (if sensible) or raise an exception if we still can't make sense of the input. What we should never, ever do is let malformed input silently cause unintended changes.\n\nIN FACT, now that I think of it, I think this can be exploited by an attacker to change the date part of a Datetime, as long as she is authorized to change the time part of it:\n\n```\nt = TimeTest.new(:sometime => DateTime.now - 1.month)\n => #<TimeTest id: nil, sometime: \"2010-09-13 06:50:55\", created_at: nil, updated_at: nil> \n...\n\n# legitimate access to a form with time_select(:sometime)\n# params = {\"time_test\"=>{\"sometime(1i)\"=>\"2010\", \"sometime(2i)\"=>\"9\", \"sometime(3i)\"=>\"13\", \"sometime(4i)\"=>\"06\", \"sometime(5i)\"=>\"12\"}}\nt.update_attributes(params['time_test']) # => true \nt                                        # => #<TimeTest id: 2, sometime: \"2010-09-13 06:12:00\", created_at: \"2010-10-13 06:49:26\", updated_at: \"2010-09-13 2010-09-13 06:12:00\"> \n\n# maliciously crafted POST\n# params = {\"time_test\"=>{\"sometime(4i)\"=>\"2009\", \"sometime(5i)\"=>\"12\", \"sometime(6i)\"=>\"12\"}}\nt.update_attributes(params['time_test']) # => true \nt                                        # => #<TimeTest id: 2, sometime: \"2009-12-12 00:00:00\", created_at: \"2010-10-13 06:49:26\", updated_at: \"2010-10-13 06:51:06\"> \n```\n\nBecause of this I think this issue should get a higher priority; I will provide a patch within the day.\n", "created_at": "2011-05-16 03:35:39", "user": 789801, "id": 1169903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169904", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-13 07:08:45 UTC\n\n(and just after I press update--sorry for following up on myself)\n\nMaybe considering this a security issue is a bit of a stretch, as any web application trusting its input is bound to be broken way worse that this. But it would still make for a hell of a debugging session ;)\n", "created_at": "2011-05-16 03:35:39", "user": 789801, "id": 1169904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169905", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-13 14:31:15 UTC\n\nAwesome Andrea,\n\nActually i'd been working on the exactly the same thing as you but abandoned that line as i thought it might not be way to go. \n\nAnyway, i'm attaching my patch (with tests) for review as well. This patch applies and runs on master branch though.\n", "created_at": "2011-05-16 03:35:40", "user": 789801, "id": 1169905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169906", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-13 15:32:44 UTC\n\nAditya: here is my current patch (not in git format-patch yet), as you can see it's pretty similar in principle to yours :)\n\nI want to go over it once more, because I realized there still is a failure case:\n\n```\nparams = {\"time_test\"=>{\"sometime(4i)\"=>\"2009\", \"sometime(6i)\"=>\"12\"}}\n```\n\nI'm not sure this can happen using our helpers, but I'd rather be extra careful. My current thinking is to simply disallow missing pieces except in the last positions (of course empty ones would still be allowed).\n", "created_at": "2011-05-16 03:35:40", "user": 789801, "id": 1169906}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169907", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-13 19:39:59 UTC\n\nMy preference is to give nils for missing components between 1 and the maximum provided key param to the class and let the class initializer handle or raise an error, except for date/time for which we default the date bits. For example, Time can handle a nil minute/hour.\n", "created_at": "2011-05-16 03:35:40", "user": 789801, "id": 1169907}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169908", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-13 21:47:25 UTC\n\nGood point. I'll give that I try.\n", "created_at": "2011-05-16 03:35:41", "user": 789801, "id": 1169908}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169909", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-14 04:59:17 UTC\n\nAndrea, My patch takes care of filling in the missing bits with nil.\n", "created_at": "2011-05-16 03:35:41", "user": 789801, "id": 1169909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169911", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-15 07:13:25 UTC\n\nYour patch makes sense _if_ we want to implicitly accept a missing part of a multiparameter and interpret it just the same as if it where empty.\n\nIn other words, should these two cases behave the same?\n\n``` ruby\n  def test_multiparameter_attributes_on_time_with_raise_on_small_time_if_missing_date_parts\n    attributes = {\n      \"written_on(4i)\" => \"16\", \"written_on(5i)\" => \"12\", \"written_on(6i)\" => \"02\"\n    }\n    topic = Topic.find(1)\n    topic.attributes = attributes\n    assert_equal Time.local(1, 1, 1, 16, 12, 2), topic.written_on\n  end\n\n\n  def test_multiparameter_attributes_on_time_with_seconds_will_ignore_date_if_empty\n    attributes = {\n      \"written_on(1i)\" => \"\", \"written_on(2i)\" => \"\", \"written_on(3i)\" => \"\",\n      \"written_on(4i)\" => \"16\", \"written_on(5i)\" => \"12\", \"written_on(6i)\" => \"02\"\n    }\n    topic = Topic.find(1)\n    topic.attributes = attributes\n    assert_equal Time.local(1, 1, 1, 16, 12, 02), topic.written_on\n  end\n```\n\nNote that this is not specific to times and dates, the same can be argued of:\n\n``` ruby\n  def test_multiparameter_assignment_of_aggregation_with_missing_values\n    customer = Customer.new\n    address = Address.new(\"The Street\", \"The City\", \"The Country\")\n    attributes = { \"address(2)\" => address.city, \"address(3)\" => address.country }\n    customer.attributes = attributes\n    assert_equal Address.new(nil, \"The City\", \"The Country\"), customer.address\n  end\n\n  def test_multiparameter_assignment_of_aggregation_with_missing_values\n    customer = Customer.new\n    address = Address.new(\"The Street\", \"The City\", \"The Country\")\n    attributes = { \"address(1)\" => \"\", \"address(2)\" => address.city, \"address(3)\" => address.country }\n    customer.attributes = attributes\n    assert_equal Address.new(nil, \"The City\", \"The Country\"), customer.address\n  end\n```\n\nI would say no, because in the latter the developer has explicitly told us \"I know there is a Date portion of the attribute, and I want to overwrite it\" whereas in the former we don't know for sure, it may be an oversight.\n\nThat's why my proposal is to instead raise if any part if missing, except at the end.\n\nThat said, since you've provided a patch I'm not going to object too strongly; I'll let someone else chime in.\n\nHowever, I do have a few comments:\n- defaulting to 2001 feels totally arbitrary, especially given that the current code for Date detaults to year 1;\n- you definitely need more tests; I will attach mine (which your diff passes), and we may still need more;\n- this method is already unreadable, it badly needs some refactoring; your code introduces a few new issues (please don't take this badly, nothing personal, I'm just known to be picky):\n  - there's no need to call to_a on a range before iterating, this is good enough:\n    <code>set_values = (1..values_with_empty_parameters.keys.max.to_i).collect do |position|</code>\n  - you seem to have missed a couple of conversions from <code>@values@</code> to <code>@set_values@</code>, in the <code>@rescue@</code> blocks:\n  - in fact, <code>@values@</code> looks unused now except for the initial if, I would rewrite it to be more efficient:\n    \n    ```\n    if values_with_empty_parameters.values.any? { |v| !v.nil? }\n      send(name + \"=\", nil)\n    else\n    ```\n  - adding a <code>@#to_i@</code> to <code>@find_parameter_position@</code> would let you remove the <code>@#to_i@ / @#to_s@</code> when you fill <code>@set_values@</code>\n\nI left this at the end because I couldn't think of a solution (in fact, it affected the patch I was working on, too), but with your patch it's quite trivial to perform a denial of service attack by making Ruby run out of memory:\n\n``` ruby\nattributes = { \"address(100000000)\" => \"\" } # add enough 0\n```\n\nThat's a non-trivial problem that we would be introducing, and I think it needs to be addressed--if nothing else, by capping the position to 100 or so.\n\nI'm attaching my additional tests (applied on top of your changes), see if they are any use and feel free to change them and integrate them in your final diff.\nI'll be glad to review it and upvote it once the last concerns are addressed.\n\n<em>Edited by [Rohit Arondekar](https://rails.lighthouseapp.com/users/89656) for formatting.</em>\n", "created_at": "2011-05-16 03:35:42", "user": 789801, "id": 1169911}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169912", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-15 17:01:27 UTC\n\nAlways humbled and glad that i'm doing more open source now. Your feedback is constructive, and i appreciate your attention to detail.\n\n``` ruby\n Time.local(1,1,1,1,1,1) => Mon Jan 01 01:01:01 0530 2001\n```\n\non my system. I think this depends on system architecture. I didn't look deep enough earlier and incorrectly defaulted to 2001.\n\nI think the tests too have to be written so we're correctly checking for raised asserts, otherwise we'll get false positives. \n\nNow this is how i've refactored it\n- If its a Date parameter, missing values are defaulted to 1\n- If its a Time parameter\n  - Error raised if NO date parameters were provided.\n  - If date parmeters were provided but were blank, they're defaulted to 1.\n  - If time parameters were not provided, they are defaulted to 0. (This is done because hour does not default to 0 if the year is 1, something quirky in how Time handles it and how DateTime.civil handles it).\n- For other klasses\n  - If there are any missing parameters, an error is raised\n  - If the parameter is provided but is blank, it is passed to the initializer of that klass.\n  - A maximum of 100 parameters can be passed to the initializer.\n\nHave another review of it Andrew. Thanks heaps.\n", "created_at": "2011-05-16 03:35:42", "user": 789801, "id": 1169912}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169913", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-16 19:13:37 UTC\n\n+1 to this version, thanks for cleaning it up :)\n\nYou should probably rebase the two commit together, just for clarity, but that's just me. Nice work regardless.\n", "created_at": "2011-05-16 03:35:43", "user": 789801, "id": 1169913}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169914", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-16 19:17:05 UTC\n\nI'm not sure how to change the milestone, it's still set to 2.3.10 which is obviously incorrect since the patch is for edge.\n", "created_at": "2011-05-16 03:35:43", "user": 789801, "id": 1169914}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169915", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-16 19:41:04 UTC\n\nRaising the priority from Low to Medium as it seems quite easy to manipulate dates and times using multiparameter attributes. Setting the milestone back to 3.x. But i think this patch can be applied to 2.3.x also, i believe as the code has not changed between 2.3.x and 3.x. \n\nI'm still trying to upgrade my git-fu, so i'll update with a merged patch shortly when i learn to squash commits.\n", "created_at": "2011-05-16 03:35:43", "user": 789801, "id": 1169915}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169916", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-16 19:46:44 UTC\n\nRe: git, you can easily do that with (assuming these two are the only commits on this branch):\n\n```\ngit rebase -i HEAD^^\n```\n\nand then changing the second commit from @keep@ to @f@.\n\nRe: milestone change, how did you do that? I thought adding a tag of @milestone:3.x@ would do the trick (there's always something to learn :D ).\n", "created_at": "2011-05-16 03:35:44", "user": 789801, "id": 1169916}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169917", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-16 19:56:18 UTC\n\nAdding rebased squashed patch. \n\n(PS. I can change the milestone because i recently became a member of the Rails LH team. As pseudo-admins, there are extra input elements and edit links).\n", "created_at": "2011-05-16 03:35:44", "user": 789801, "id": 1169917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169918", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-16 20:24:38 UTC\n\n+1 from me :)\n", "created_at": "2011-05-16 03:35:44", "user": 789801, "id": 1169918}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169919", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-20 08:27:55 UTC\n\nChanging to 3.0.2 as it's a bugfix.\n", "created_at": "2011-05-16 03:35:45", "user": 789801, "id": 1169919}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169920", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-23 14:42:32 UTC\n\n@fxn, what do you think? would appreciate your views when you get a chance.\n", "created_at": "2011-05-16 03:35:45", "user": 789801, "id": 1169920}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169921", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-10-29 06:58:33 UTC\n\nShameless bump for attention. :) I think this is important enough for someone from core to comment.\n", "created_at": "2011-05-16 03:35:45", "user": 789801, "id": 1169921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169922", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2010-10-29 07:34:49 UTC\n\nHey thanks for the ping.\n\nI've not replied yet, but it is in my plate no worries.\n", "created_at": "2011-05-16 03:35:46", "user": 789801, "id": 1169922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169923", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:01:18 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:35:46", "user": 789801, "id": 1169923}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169924", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-07 16:51:51 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:35:46", "user": 789801, "id": 1169924}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169925", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:28:08 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:35:47", "user": 789801, "id": 1169925}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169926", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:35:47", "user": 789801, "id": 1169926}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169927", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-11-17 11:59:54 UTC\n\nRebased against master (but secretly and gently bumping).\n\nForewarning: will bump again in 2 weeks if nothing happens in the meantime. :)\n", "created_at": "2011-05-16 03:35:47", "user": 789801, "id": 1169927}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169928", "text": "_Imported from Lighthouse._\nComment by **lakshmanan** - 2010-11-25 19:08:01 UTC\n\nIm using this time_select in my rails 3 project and I am facing the same problem. \n\nTill the patch is committed to mainline, How do i fix it ?\n", "created_at": "2011-05-16 03:35:48", "user": 789801, "id": 1169928}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169929", "text": "_Imported from Lighthouse._\nComment by **lakshmanan** - 2010-11-25 19:41:59 UTC\n\nHere is how I fixed it in my form for now. Hope this helps.\n\nhttps://gist.github.com/715819\n", "created_at": "2011-05-16 03:35:48", "user": 789801, "id": 1169929}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169930", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-11-26 09:21:15 UTC\n\n@lakshmanan your usage of :ignore_date => false seems just fine.\n", "created_at": "2011-05-16 03:35:48", "user": 789801, "id": 1169930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169931", "text": "_Imported from Lighthouse._\nComment by **Murray Steele** - 2010-12-07 12:06:23 UTC\n\nJust wondering about the rationale for saying that I _have_ to provide the date bits for time?  Why do I have to send the Year, Month and Date if all I care about is the Hour and Minute?\n\nIt just seems harsh to complain if date bits aren't given when I can use helpers to generate a form that won't have any date bits, (e.g. time_select(...., :include_date => false)).  Especially if I'm coupling this to a time field where I do not care about date portions, I only have to because there's no Duration class in the stdlib to let me represent time periods without artificially saddling them to a date.\n\nObviously, I don't think it's a huge problem, I'd rather this patch went in than didn't.  Just curious.\n", "created_at": "2011-05-16 03:35:49", "user": 789801, "id": 1169931}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169932", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-12-22 16:53:23 UTC\n\n@fxn, this time i'm bumping this after 1 month. Kindly have a look!\n", "created_at": "2011-05-16 03:35:49", "user": 789801, "id": 1169932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169933", "text": "_Imported from Lighthouse._\nComment by **fcarrettoni (at gmail)** - 2010-12-23 07:34:46 UTC\n\nHi all! I'm kind of new but found out that using a prompt or :include_blank => true to the time_select triggers the same multi-parameter error. I find this buggy cause if the time_select is optional in my form, it shouldn't default to 00:00 (which is a valid time). I have an events form that may or maynot have a start time, and I always get a valid start time of 00:00. Is this the correct way to use the time_select?\n\nIs this patch going to address this too? I would gladly help to test it.\n", "created_at": "2011-05-16 03:35:49", "user": 789801, "id": 1169933}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169934", "text": "_Imported from Lighthouse._\nComment by **fcarrettoni (at gmail)** - 2010-12-23 07:38:02 UTC\n\nI just wanted to clearify that sometimes it triggers the multipart error and sometimes it just saves 00:00 to the db. Can't find out the logic of it yet\n", "created_at": "2011-05-16 03:35:50", "user": 789801, "id": 1169934}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169935", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-12-23 09:51:41 UTC\n\n@fcarrettoni, I encourage you to take this patch, apply it in your rails app and give it a go. I think we've covered almost all the cases this time. You acceptance and testing will help. If there are still issues left, we'll be keen to know and fix them. If you think the problem is solved, your upvoting will be welcome. From your last message it's not clear to me in what repeatable use case do you see this problem.\n", "created_at": "2011-05-16 03:35:50", "user": 789801, "id": 1169935}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169936", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:35:50", "user": 789801, "id": 1169936}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169937", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:35:50", "user": 789801, "id": 1169937}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169938", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2011-04-05 20:36:29 UTC\n\nI stumbled on this bug today and it was a real pain to figure out. As I see it you can't use the `:prompt` option because it'll cause the `1i`, `2i`, and `3i` (year, month, day) hidden field values to go blank, thus resulting in an `invalid date` error from `Date.civil`.\n\nSeriously: This should be fixed in the next release. Someone even took the time to make a patch for it!\n\nAditya, maybe you should try submitting a pull request to the repo on GitHub. Perhaps your patch will get due attention there.\n", "created_at": "2011-05-16 03:35:51", "user": 789801, "id": 1169938}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169939", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2011-04-06 05:55:44 UTC\n\n@fxn i know it's been a while. I'll rebase and reapply the patch, but can i please kindly urge you to look at this ticket again?\n", "created_at": "2011-05-16 03:35:51", "user": 789801, "id": 1169939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169940", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-04-06 21:30:05 UTC\n\n@Aditya, yes please rebase. I have a few open tickets that I plan to work on when I finish the extraction of Prototype and RJS.\n", "created_at": "2011-05-16 03:35:51", "user": 789801, "id": 1169940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169941", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-05-04 12:31:04 UTC\n\n@Aditya did you finally rebase? The diff does not apply clean right now.\n", "created_at": "2011-05-16 03:35:52", "user": 789801, "id": 1169941}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169942", "text": "Attachments saved to Gist: http://gist.github.com/971663\n", "created_at": "2011-05-16 03:35:52", "user": 789801, "id": 1169942}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171511", "text": "This ticket can be closed. It's already in Rails Master now. https://github.com/rails/rails/pull/396\n", "created_at": "2011-05-16 05:16:35", "user": 762, "id": 1171511}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4347\nCreated by **matthuhiggins** - 2011-02-17 08:07:22 UTC\n\nThis patch adds the following methods to migrations:\n\n``` ruby\nadd_foreign_key(referencing_table, referenced_table, options = {})\nremove_foreign_key(referencing_table, options)\n\nchange_table ... do |t|\n  t.foreign_key(referenced_table, options)\n  t.remove_foreign_key(options)\nend\n```\n\nOptions are :name, :column, :primary_key, :dependent.\n\nIn addition, ActiveRecord::SchemaDumper reads foreign keys from the SQL structure and puts them into schema.rb.\n\n---\n\nSome thoughts and concerns I came across while implementing this:\n- Extending t.references to automatically add a foreign key seems like a natural progression, but I didn't want to jam too much in at once.\n- The :primary_key value defaults to 'id'. This is a sensible default, but there is other code in the adapter that attempts to extract the primary key from the table. I do not know the history behind this, and was trying to clone the :primary_key API for associations.\n- Many active_record tests run with \"use_transactional_fixtures = false\", which results in leftover data during the foreign key tests. This makes adding foreign keys difficult, when the existing data has invalid references.\n- drop_table blows up if the table being dropped has foreign keys pointing to it. One option is to ignore foreign key checks during this (e.g. in MySql use \"SET FOREIGN_KEY_CHECKS = 0; super; SET FOREIGN_KEY_CHECKS = 1;\"\n", "labels": [], "number": 668, "updated_at": "2011-05-21 15:11:59", "user": 789801, "closed_at": "2011-05-21 15:11:59", "id": 904324, "title": "Add foreign key support to migrations and schema.rb dump", "url": "https://api.github.com/repos/rails/rails/issues/668", "created_at": "2011-05-16 03:35:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169943", "text": "_Imported from Lighthouse._\nComment by **matthuhiggins** - 2010-04-08 18:27:37 UTC\n\nOops, this patch left out tests for the schema dumper.\n", "created_at": "2011-05-16 03:35:58", "user": 789801, "id": 1169943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169944", "text": "_Imported from Lighthouse._\nComment by **matthuhiggins** - 2010-04-08 20:52:03 UTC\n\nforeign_keys-2.diff tests that foreign keys are dumped to schema.rb after the tables\n", "created_at": "2011-05-16 03:35:59", "user": 789801, "id": 1169944}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169945", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2010-11-23 11:48:46 UTC\n\n+1. I haven't read the patch, but it is very good idea.\n", "created_at": "2011-05-16 03:35:59", "user": 789801, "id": 1169945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169946", "text": "_Imported from Lighthouse._\nComment by **wtn** - 2010-11-23 11:58:46 UTC\n\n-1\n\nI'm fine with using existing gems and leaving this out of the official AR.\n", "created_at": "2011-05-16 03:36:00", "user": 789801, "id": 1169946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169947", "text": "_Imported from Lighthouse._\nComment by **Daniel** - 2010-11-23 20:16:14 UTC\n\n+1 Migrations have always felt incomplete to me because they lack support for adding foreign key constraints. I greatly appreciate the Foreigner gem, but I would really like to see foreign keys supported in the framework.\n", "created_at": "2011-05-16 03:36:00", "user": 789801, "id": 1169947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169948", "text": "_Imported from Lighthouse._\nComment by **Micha≈Ç ≈Åomnicki** - 2011-01-12 11:39:07 UTC\n\n+1 for foreign keys\n\nIt is absolute must-have for ActiveRecord. Foreign keys are the only way to keep relations consistent as validations are prone to race conditions and one can't really rely on them.\n", "created_at": "2011-05-16 03:36:01", "user": 789801, "id": 1169948}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169949", "text": "_Imported from Lighthouse._\nComment by **Ryan** - 2011-01-14 02:24:19 UTC\n\n+1 This is absolutely necessary.  Foreign keys should definitely be supported out of the box for migrations.\n", "created_at": "2011-05-16 03:36:02", "user": 789801, "id": 1169949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169950", "text": "_Imported from Lighthouse._\nComment by **Franco Catena** - 2011-02-15 22:20:28 UTC\n\n+1 for me too. I agree, is the one thing that was always missed in migrations.\n", "created_at": "2011-05-16 03:36:02", "user": 789801, "id": 1169950}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169951", "text": "Attachments saved to Gist: http://gist.github.com/971664\n", "created_at": "2011-05-16 03:36:03", "user": 789801, "id": 1169951}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4361\nCreated by **Joe Hannon** - 2011-02-19 09:28:19 UTC\n\nUsing Rails 2.3.5\n\nI have a has_many :through association where there is only one table.  So the owner model, the through model, and the target model are all the same.  I've used STI (single table inheritance), but I don't think it's relevant as I'm pretty sure I could replicate the problem without STI as well.\n\nThe SQL query generated by a call to the through-association (Person.find(7).babydaddies) generates a SQL query which includes a self-join of the table to itself.  The generated query does not alias the tables, and so the self-join query fails.  Simply using table aliases in the SQL fixes the problem. \n\nErroneous SQL, expected SQL, Schema, and model pasted below.\n\nThis query is broken:\n\n``` sql\nSELECT DISTINCT `people`.* FROM `people`  INNER JOIN `people` ON `people`.id = `people`.father_id    WHERE ((`people`.mother_id = 7))\n```\n\nit should be something like:\n\n``` sql\nSELECT DISTINCT `dads`.* FROM `people` AS `kids`  INNER JOIN `people` AS `dads` ON `dads`.id = `kids`.father_id    WHERE ((`kids`.mother_id = 7))\n```\n\ndb/schema.rb:\n\n``` ruby\nActiveRecord::Schema.define(:version => 20100410040453) do\n\n  create_table \"people\", :force => true do |t|\n    t.string   \"name\"\n    t.string   \"sex\"\n    t.integer  \"father_id\"\n    t.integer  \"mother_id\"\n    t.datetime \"created_at\"\n    t.datetime \"updated_at\"\n  end\n\nend\n```\n\napp/models/person.rb:\n\n``` ruby\nclass Person < ActiveRecord::Base\n  self.inheritance_column = \"sex\"\n\n  belongs_to :father, :class_name => \"Person\"\n  belongs_to :mother, :class_name => \"Person\"\nend\n\nclass Male < Person\n  has_many :children, :class_name => \"Person\", :foreign_key => :father_id\n  has_many :babymommas, :through => :children, :source => :mother, :uniq => true\nend\n\nclass Female < Person\n  has_many :children, :class_name => \"Person\", :foreign_key => :mother_id\n  has_many :babydaddies, :through => :children, :source => :father, :uniq => true\nend\n```\n", "labels": [], "number": 669, "updated_at": "2011-05-21 15:12:00", "user": 789801, "closed_at": "2011-05-21 15:11:59", "id": 904325, "title": "has_many through self join does not include table alias, so fails", "url": "https://api.github.com/repos/rails/rails/issues/669", "created_at": "2011-05-16 03:36:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169953", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-04-10 07:34:02 UTC\n\nI think I found the offending line.  activerecord-2.3.5/lib/active_record/associations/has_many_through_association.rb, line 172, in HasManyThroughAssociation#construct_joins:\n\n```\n      \"INNER JOIN %s ON %s.%s = %s.%s %s #{@reflection.options[:joins]} #{custom_joins}\" % [\n```\n\nThis hardcoded bit of SQL doesn't contain any table alias abilities.  Any suggestions how to fix?  I'm going to hard code an alias for now, just to get my app working:\n\n```\n      \"INNER JOIN %s as temporary_table_alias ON %s.%s = %s.%s %s #{@reflection.options[:joins]} #{custom_joins}\" % [\n```\n", "created_at": "2011-05-16 03:36:09", "user": 789801, "id": 1169953}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169954", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-04-10 07:34:53 UTC\n\nMy naive hardcoded sql didn't work.  :-(\n", "created_at": "2011-05-16 03:36:10", "user": 789801, "id": 1169954}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169955", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-04-26 15:50:10 UTC\n\nHere's a simpler schema with no STI:\n\ndb/schema.rb:\n\nActiveRecord::Schema.define(:version => 20100426070714) do\n\n  create_table \"employees\", :force => true do |t|\n    t.string   \"name\"\n    t.integer  \"boss_id\"\n    t.datetime \"created_at\"\n    t.datetime \"updated_at\"\n  end\n\nend\n\ntest/fixtures/employees.yml:\n\nalice:\n  name: CEO alice\n\nbob:\n  name: CTO bob\n  boss_id: <%= Fixtures.identify(:alice) %>\n\ncharlie:\n  name: junior exec charlie\n  boss_id: <%= Fixtures.identify(:bob) %>\n\nsatellite.rb:\n\nclass Employee < ActiveRecord::Base\n  belongs_to :boss, :class_name => \"Employee\"\n  has_many :reports, :class_name => \"Employee\", :foreign_key => \"boss_id\"\n  has_many :reports_of_reports, :through => :reports, :source => :boss\nend\n\nand test/unit/employee_test.rb:\n\nrequire 'test_helper'\n\nclass EmployeeTest < ActiveSupport::TestCase\n  def test_reports\n    alice = Employee.find(:first,:conditions => \"name = 'CEO alice'\")\n    expecting = [\"CTO bob\"]\n    assert alice.reports.map {|e| e.name} == expecting, \n    \"alice's reports are #{alice.reports.map {|e| e.name}}, expected #{expecting}\"\n  end\n\n  def test_reports_of_reports\n    alice = Employee.find(:first,:conditions => \"name = 'CEO alice'\")\n    expecting = [\"junior exec charlie\"]\n    assert alice.reports_of_reports.map {|e| e.name} == [\"junior exec charlie\"],\n    \"alice's reports' reports are #{alice.reports_of_reports.map {|e| e.name}}, expected #{expecting}\"\n  end\nend\n\ntest_reports passes, but test_reports_of_reports errors with:\n\n  1) Error:\ntest_reports_of_reports(EmployeeTest):\nActiveRecord::StatementInvalid: Mysql::Error: Not unique table/alias: 'employees': SELECT `employees`.\\* FROM `employees`  INNER JOIN `employees` ON `employees`.id = `employees`.boss_id    WHERE ((`employees`.boss_id = 663665735))\n", "created_at": "2011-05-16 03:36:12", "user": 789801, "id": 1169955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169956", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-04-26 15:55:00 UTC\n\nLet's try that again with formatting\n\nHere's a simpler schema with no STI:\ndb/schema.rb:\n\n``` ruby\nActiveRecord::Schema.define(:version => 20100426070714) do\n\n  create_table \"employees\", :force => true do |t|\n    t.string   \"name\"\n    t.integer  \"boss_id\"\n    t.datetime \"created_at\"\n    t.datetime \"updated_at\"\n  end\n\nend\n```\n\ntest/fixtures/employees.yml:\n\n``` yaml\nalice:\n  name: CEO alice\n\nbob:\n  name: CTO bob\n  boss_id: <%= Fixtures.identify(:alice) %>\n\ncharlie:\n  name: junior exec charlie\n  boss_id: <%= Fixtures.identify(:bob) %>\n```\n\nsatellite.rb:\n\n``` ruby\nclass Employee < ActiveRecord::Base\n  belongs_to :boss, :class_name => \"Employee\"\n  has_many :reports, :class_name => \"Employee\", :foreign_key => \"boss_id\"\n  has_many :reports_of_reports, :through => :reports, :source => :boss\nend\n```\n\nand test/unit/employee_test.rb:\n\n``` ruby\nrequire 'test_helper'\n\nclass EmployeeTest < ActiveSupport::TestCase\n  def test_reports\n    alice = Employee.find(:first,:conditions => \"name = 'CEO alice'\")\n    expecting = [\"CTO bob\"]\n    assert alice.reports.map {|e| e.name} == expecting, \n    \"alice's reports are #{alice.reports.map {|e| e.name}}, expected #{expecting}\"\n  end\n\n  def test_reports_of_reports\n    alice = Employee.find(:first,:conditions => \"name = 'CEO alice'\")\n    expecting = [\"junior exec charlie\"]\n    assert alice.reports_of_reports.map {|e| e.name} == [\"junior exec charlie\"],\n    \"alice's reports' reports are #{alice.reports_of_reports.map {|e| e.name}}, expected #{expecting}\"\n  end\nend\n\n```\n\ntest_reports passes, but test_reports_of_reports errors with:\n 1) Error: test_reports_of_reports(EmployeeTest):\n ActiveRecord::StatementInvalid: Mysql::Error: Not unique table/alias: 'employees': SELECT employees.\\* FROM employees INNER JOIN employees ON employees.id = employees.boss_id WHERE ((employees.boss_id = 663665735))\n", "created_at": "2011-05-16 03:36:13", "user": 789801, "id": 1169956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169957", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-05-02 19:27:33 UTC\n\nI've attached a patch which adds a unit test to rails/activerecord/test/cases/associations/has_many_through_associations_test.rb:\n\n``` ruby\n  def test_has_many_association_through_a_has_many_association_to_self\n    sarah = Person.create!(:first_name => 'Sarah', :primary_contact_id => people(:susan).id, :gender => 'F', :number1_fan_id => 1)\n    john = Person.create!(:first_name => 'John', :primary_contact_id => sarah.id, :gender => 'M', :number1_fan_id => 1)\n    assert_equal sarah.agents, [people(:john)]\n    assert_equal people(:susan).agents_of_agents, [people(:john)]\n  end\n```\n\nand rails/activerecord/test/models/person.rb:\n\n``` ruby\n  has_many :agents_of_agents, :through => :agents, :source => :primary_contact\n```\n", "created_at": "2011-05-16 03:36:14", "user": 789801, "id": 1169957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169958", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-05-02 23:27:55 UTC\n\nhere's that patch for the unit test\n", "created_at": "2011-05-16 03:36:15", "user": 789801, "id": 1169958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169959", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-05-03 17:00:20 UTC\n\nThis but is present in rails 2.3.5 as well as edge (3.0.0beta3)\n", "created_at": "2011-05-16 03:36:16", "user": 789801, "id": 1169959}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169960", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-05-03 17:00:37 UTC\n\nRather, this _bug_ is present in rails 2.3.5 as well as edge (3.0.0beta3)\n", "created_at": "2011-05-16 03:36:42", "user": 789801, "id": 1169960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169961", "text": "_Imported from Lighthouse._\nComment by **Ernie Miller** - 2010-05-04 00:50:30 UTC\n\nGive this patch a shot -- let me know if it does the trick.\n", "created_at": "2011-05-16 03:36:43", "user": 789801, "id": 1169961}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169962", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-05-04 15:59:05 UTC\n\nErnie's patch fixes the issue.  Has many through self joins are now working in the unit test, as well as my example schemata above.  Ernie's patch also fixes a couple mistakes in my unit test, which now passes with Ernie's patch.\n\nI'm extremely grateful to Ernie for his patch; this bug was blocking me, and I wasn't making much headway trying to fix it myself.  Thanks, Ernie!\n", "created_at": "2011-05-16 03:36:44", "user": 789801, "id": 1169962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169963", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-05-04 16:05:40 UTC\n\n+1 is what I'm trying to say\n", "created_at": "2011-05-16 03:36:45", "user": 789801, "id": 1169963}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169965", "text": "_Imported from Lighthouse._\nComment by **felipekk** - 2010-06-23 21:22:47 UTC\n\n+1 for fixing this ASAP.\n", "created_at": "2011-05-16 03:36:46", "user": 789801, "id": 1169965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169966", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-12-11 23:49:52 UTC\n\nThis patch has been around for too long and needs accepting. Applies fine to master.\n", "created_at": "2011-05-16 03:36:47", "user": 789801, "id": 1169966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169967", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-12-15 00:33:50 UTC\n\nI've been making lots of changes to the associations in master so I ported this patch to master.\n\nThe patch doesn't apply cleanly to 3-0-stable, so I tried porting it, but the tests fail.  If someone makes sure this applies cleanly and the tests pass on 3-0-stable, I'll apply there.\n\nI'm marking this resolved for 3.1.  If someone ports the patch, please create a new ticket for 3.0.4 and assign to me.  Thanks!\n", "created_at": "2011-05-16 03:36:48", "user": 789801, "id": 1169967}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169968", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-12-15 00:34:32 UTC\n\n(from [00c893d3b86be3a141c21ed065e085adbb26062a]) add test which fails for has_many through self join [#4361 state:open]\nhttps://github.com/rails/rails/commit/00c893d3b86be3a141c21ed065e085adbb26062a\n", "created_at": "2011-05-16 03:36:49", "user": 789801, "id": 1169968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169969", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-12-15 00:58:45 UTC\n\nAaron, my original unit test had a mistake in it, so it will fail. Ernie's patch includes the table aliasing fix, but also includes a fix for my unit test. Did you also include ernie's patch?\n\nI found the patch to apply cleanly a few days ago to both 3.0.3 and HEAD. I guess I will look again to make sure.\n", "created_at": "2011-05-16 03:36:50", "user": 789801, "id": 1169969}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169970", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-12-15 01:01:18 UTC\n\n@Joe Yes I applied both patches.  Make sure it works against 3-0-stable please.  Thanks!\n", "created_at": "2011-05-16 03:36:51", "user": 789801, "id": 1169970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169971", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-12-15 06:16:18 UTC\n\n@Aaron Oh yes, I see your commit now, including Ernie's patch.\n\nAnyway, I'm not sure what you mean about it not applying cleanly. I've tried it on 3-0-stable and the patch applies cleanly, and the unit test passes for me. Am I looking at the wrong version? Commit 9254750223f1ff65a3dd70f3e0eefbf0f40f02c6?\n", "created_at": "2011-05-16 03:36:53", "user": 789801, "id": 1169971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169972", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-12-15 06:51:22 UTC\n\n@Joe Here is a video of what happens when I try to apply Ernie's patch:\n\n  http://www.youtube.com/watch?v=aVegs3Uc5U0\n\nI think I'm applying the right thing.\n", "created_at": "2011-05-16 03:36:54", "user": 789801, "id": 1169972}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169973", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-12-15 07:35:03 UTC\n\n@Aaron Yeah, it looks like you're applying the right patch. Am _I_ applying the patch to the right codebase?\n\nHere's what I'm doing (sorry, no music):\n\ngit clone https://github.com/rails/rails.git rails_30stable\ncd rails_30stable\ngit checkout origin/3-0-stable -b 3-0-stable  #Switched to a new branch '3-0-stable'\npatch -p1 < ../../../hmt_self_join_alias.diff\n\npatching file activerecord/test/cases/associations/has_many_through_associations_test.rb\nHunk #1 succeeded at 456 with fuzz 2 (offset 73 lines).\npatching file activerecord/test/models/person.rb\nHunk #1 succeeded at 12 (offset 2 lines).\npatching file activerecord/lib/active_record/associations/through_association_scope.rb\nHunk #1 succeeded at 16 (offset 1 line).\nHunk #2 succeeded at 62 (offset 1 line).\nHunk #3 succeeded at 77 (offset 1 line).\npatching file activerecord/test/cases/associations/has_many_through_associations_test.rb\nHunk #1 succeeded at 460 (offset 73 lines).\npatching file activerecord/test/models/person.rb\nHunk #1 succeeded at 12 (offset 2 lines).\n\nMaybe I'm not using git correctly to get the 3-0-stable branch?\n", "created_at": "2011-05-16 03:36:55", "user": 789801, "id": 1169973}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169974", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-12-15 07:41:45 UTC\n\nI'm not too sure of my git usage, so I tried directly downloading from github. Still works fine for me. See screengrab:\n\nhttp://twitpic.com/3g2uf2\n", "created_at": "2011-05-16 03:36:56", "user": 789801, "id": 1169974}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169975", "text": "_Imported from Lighthouse._\nComment by **Ernie Miller** - 2010-12-15 14:19:59 UTC\n\nO HAI LIGHTHOUSE!\n\nDo I need to update this patch, then? I honestly don't remember even creating it, and after reading the patch I put together have deduced that I did it in some sort of haze induced by reading Rails association code.\n\nAaron, your comment \"I've been making lots of changes to the associations in master so I ported this patch to master\" evokes a simultaneous sense of pity and awe. /salute, good sir.\n", "created_at": "2011-05-16 03:36:56", "user": 789801, "id": 1169975}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169976", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-12-15 16:45:25 UTC\n\n@Joe Yes, I can use `patch`, but then the commit history will have my name.  I'd prefer to keep the credit where credit is due.  I'd like to use `git am` to apply the patch so that everyone gets proper credit.  Can you make this patch work with `git am`?  You should be able to just use the patch command like you're doing, but also [follow the contributor guidelines](https://rails.lighthouseapp.com/projects/8994/sending-patches) once you've made sure everything works locally.\n\n@Ernie Together, we can clean this code up so that people don't feel like scooping their eyes out with a spoon while reading it!\n\nOn master, I'm trying to get the association code to generate SQL AST nodes rather than build strings.  This should give us speed increases as there will be fewer calls to the AR connection.  The other benefit is that we might be able to clean this code up more easily.\n", "created_at": "2011-05-16 03:36:58", "user": 789801, "id": 1169976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169977", "text": "_Imported from Lighthouse._\nComment by **Ernie Miller** - 2010-12-15 16:49:23 UTC\n\n@Aaron That'd be a huge win. The association code feels like one of the last bastions of String-y filth in ActiveRecord. It must be exterminated.\n", "created_at": "2011-05-16 03:36:59", "user": 789801, "id": 1169977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169978", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-12-18 01:48:30 UTC\n\nOk Aaron. I think I've fixed the patch to work on 3-0-stable. The merge conflict was trivial (the patch file was expecting the method above HasManyThroughAssociationsTest#test_has_many_association_through_a_has_many_association_to_self to be the last method in the class, which is no longer the case), but it took me some screwing around to figure out how to make git do what I wanted, so please sanity check the new commit file. But I've applied it cleanly to a new checkout using git-am, and I think it looks correct, preserves commit attributions, etc.\n\nSee attached.\n", "created_at": "2011-05-16 03:37:00", "user": 789801, "id": 1169978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169979", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-12-18 01:50:37 UTC\n\nAttachment hmt_self_join_alias_30stable_safe.diff\n", "created_at": "2011-05-16 03:37:01", "user": 789801, "id": 1169979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169980", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-12-18 02:00:18 UTC\n\nPS is it weird that patch can apply the diff cleanly, but git-am cannot?\n", "created_at": "2011-05-16 03:37:02", "user": 789801, "id": 1169980}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169981", "text": "_Imported from Lighthouse._\nComment by **Joe Hannon** - 2010-12-18 05:22:55 UTC\n\nI redid the new patch so that it puts the new method at the top of the conflict, instead of below it, so that it matches the commit you made to master. Probably git would be smart enough to merge it in even if the new method were in a different place, but just in case...\n\nSo disregard hmt_self_join_alias_30stable_safe.diff and use hmt_self_join_alias_30stable_safe2.diff instead.\n", "created_at": "2011-05-16 03:37:03", "user": 789801, "id": 1169981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169982", "text": "Attachments saved to Gist: http://gist.github.com/971665\n", "created_at": "2011-05-16 03:37:04", "user": 789801, "id": 1169982}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [180819]}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4386\nCreated by **Jens** - 2011-02-22 08:32:33 UTC\n\nProblem: Upon destroying an ActiveRecord::Base object, the \"before_destroy\" method - which should trigger a transaction rollback if returning false - is only exceuted AFTER all child objects have been destroyed via \":dependent => :destroy\".\n\nHowever, this prevents the before_destroy method from seeing those same child objects, in case it needs them to determine whether the destruction should be successful.\n\nExpected behaviour:\nbefore_destroy should be called _before_ any objects are destroyed, even child records. The before_destroy context should see the original state of the application as if \"destroy\" was never called. It should be executed within the \"destroy\" transaction, however, so that any changes it makes can be rolled back.\n\n``` ruby\nclass Foo < AR::Base\n has_many :children, :dependent => :destroy\n has_many :grandchildren, :through => :children\n\n before_destroy :check\n def check\n  # will always be true since all grandchildren have already been destroyed at this stage\n  return self.grandchildren.still_there.empty?\n end\nend\n\nclass Child < AR::Base\n has_many :grandchildren\n belongs_to :foo\nend\n\nclass Grandchild < AR::Base\n belongs_to :child\n named_scope :still_there, :conditions => ...\nend\n```\n", "labels": [], "number": 670, "updated_at": "2018-02-11 20:12:56", "user": 789801, "closed_at": "2011-05-21 15:12:00", "id": 904330, "title": "dependent => :destroy deletes children before \"before_destroy\" is executed", "url": "https://api.github.com/repos/rails/rails/issues/670", "created_at": "2011-05-16 03:37:10", "comments": [{"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169983", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-04-14 03:22:59 UTC\n\nCould you perhaps create another method that you can call BEFORE calling destroy on the Foo record?\n", "created_at": "2011-05-16 03:37:11", "user": 789801, "id": 1169983}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169984", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2010-04-14 07:46:03 UTC\n\nAnother option is to override the destroy method, e.g:\n\n``` ruby\nclass Order < ActiveRecord::Base\n  has_many :items\n\n  def destroy\n    ok_to_destroy? ? super : self\n  end\n\n  private\n    def ok_to_destroy?\n      errors.clear\n      errors.add(:items, \"Can't destroy order as items have been processed\") if items.processed_any?\n      errors.empty?\n    end\n  end\nend\n\nclass Item < ActiveRecord::Base\n  belongs_to :order\n  named_scope :processed, :conditions => { :processed => true }\nend\n```\n", "created_at": "2011-05-16 03:37:11", "user": 789801, "id": 1169984}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169985", "text": "_Imported from Lighthouse._\nComment by **Jens** - 2010-04-15 05:44:12 UTC\n\nThank you for the hints!\n\nCreating another method and manually calling this before destroying children is IMO exactly what :before_destroy should be for. Right? Also, I would have to insert this in a dozen places where complex dependencies exist, so this is not really a solution.\n\nOverriding \"destroy\" can be a solution if I do not accidentally touch Rails internals (as in overriding the \"initialize\" method, which can have numerous side effects).\n\nBut I still regard this as a bug: before_destroy should either be renamed, or be executed _before_ anything ist _destroyed_, including child objects.\n", "created_at": "2011-05-16 03:37:12", "user": 789801, "id": 1169985}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169986", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2010-04-15 09:17:42 UTC\n\nThe problem is that the child records are deleted using a before_destroy callback as well and the callbacks are executed in the order that they're added. This can't be changed to after_destroy because if foreign keys are being used in the database it will cause an error if they're not cascading deletes and the child records won't be found to have their destroy methods called if cascading deletes are enabled.\n", "created_at": "2011-05-16 03:37:12", "user": 789801, "id": 1169986}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169987", "text": "_Imported from Lighthouse._\nComment by **Jens** - 2010-04-16 05:23:20 UTC\n\nThen this issue is maybe more general than I thought. Perhaps we need a way to order the  callbacks? Something like\n\n``` ¬†ruby\nClass Foo < AR::Base\n   # adds :check to the beginning of the before_destroy chain\n   before_destroy :check, :order => :first\n   # default, adds :check to the end of the before_destroy chain\n   before_destroy :check, :order => :last\n   ...\nend\n```\n\nSame for all other callbacks.\n\nIMHO this is absolutely necessary if Rails also uses these callbacks internally, since  the callbacks give the impression that the user has complete control over them, which is not true.\n\nAlternatively (and maybe better), the child deletion procedure (and other internal routines which use before_ / after_ callbacks) need to be rewritten to be executed _after_ all _before_ callbacks, or _before_ all _after_ callbacks, respectively, since this is what the user expects according to the naming of these procedures and their documentation, which does not mention that pre-defined callbacks already exist internally.\n", "created_at": "2011-05-16 03:37:13", "user": 789801, "id": 1169987}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169988", "text": "_Imported from Lighthouse._\nComment by **Jens** - 2010-04-16 05:27:30 UTC\n\nArgh, formatting messed up. (Why? preview worked..)\n\nThen this issue is maybe more general than I thought. Perhaps we need a way to order the  callbacks? Something like\n\n``` ruby\nClass Foo < AR::Base\n   # adds :check to the beginning of the before_destroy chain\n   before_destroy :check, :order => :first\n   # default, adds :check to the end of the before_destroy chain\n   before_destroy :check, :order => :last\n   ...\nend\n```\n\nSame for all other callbacks.\n\nIMHO this is absolutely necessary if Rails also uses these callbacks internally, since  the callbacks give the impression that the user has complete control over them, which is not true.\n\nAlternatively, the child deletion procedure (and other internal routines which use before_ / after_ callbacks) need to be rewritten to be executed _after_ all _before_ callbacks, or _before_ all _after_ callbacks, respectively, since this is what the user expects (IMHO) according to the naming of these procedures and their documentation.\n", "created_at": "2011-05-16 03:37:14", "user": 789801, "id": 1169988}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169989", "text": "_Imported from Lighthouse._\nComment by **guilherme** - 2010-07-29 18:24:34 UTC\n\nI agree with you Jens.\nWhat you think about the callbacks implementation could be a stack(LIFO) ? so the :dependent => :destroy will be executed after all before_destroy callbacks, what i think is the expected behavior.\n", "created_at": "2011-05-16 03:37:14", "user": 789801, "id": 1169989}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169990", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-08-11 13:54:46 UTC\n\n@Jen\n\nCan you try with rails edge. I am not able to reproduce this problem.\n\n``` ruby\nclass Car < ActiveRecord::Base\n  has_many :brakes, :dependent => :destroy\n  before_destroy :check\n\n  def check\n    false\n  end\n\n  def self.lab\n    Car.delete_all\n    Brake.delete_all\n\n    car = Car.create(:name => 'honda')\n    car.brakes.create(:name => 'b1')\n    car.reload\n    car.destroy\n    puts Car.count #=> 1 if check returns false. 0 if check returns true\n    puts Brake.count #=> 1 if check returns false. 0 if check returns true\n  end\n\nend\n```\n", "created_at": "2011-05-16 03:37:15", "user": 789801, "id": 1169990}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169991", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2010-08-11 16:06:14 UTC\n\ni encountered this too in 3.0.0.rc\nto workaround this issue i didnt use the dependent option and instead created an before_destroy callback which destroys all associations for me. i put it after all other before_destroy callbacks.\n\nAs Andrew White pointed out, doing the destroy of the associations in a after_destroy callback collides with fk contraints.\n\nso the destroy of the associated objects should happen after the before_destroy callbacks but before the destroy.\n\n@Neeraj Singh\n\nyou dont cover the described behaviour.\nyour example just shows that the children are not destroyed if the callback chain is interrupted cause all changes are rolled back.\n\nthe problem is as Jens described that in the before callbacks the children are already all gone. this happens because the before_destroy callback registered by the has_many is called before the other callback.you could simply fix this by altering the order, and register the other callbacks first, but i like to declare the associations first.\n\n``` ruby\nclass Car < ActiveRecord::Base\n  has_many :brakes, :dependent => :destroy\n  before_destroy :check\n\n  def check\n    false unless brakes.empty?\n  end\n\n  def self.lab\n    Car.delete_all\n    Brake.delete_all\n\n    car = Car.create(:name => 'honda')\n    car.brakes.create(:name => 'b1')\n    car.reload\n    car.destroy\n    puts Car.count #=>  0 \n    puts Brake.count #=> 0\n  end\n\n```\n\nI know this example is kinda stupid but it shows the problem.\nIn check brakes is already empty.\n", "created_at": "2011-05-16 03:37:15", "user": 789801, "id": 1169991}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169992", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-08-11 16:32:28 UTC\n\nThe order of callbacks matter. Checkout #2765 in which extra record was getting created because of order of callbacks.\n", "created_at": "2011-05-16 03:37:16", "user": 789801, "id": 1169992}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169993", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2010-08-11 21:32:29 UTC\n\nyea i know as i said the problem can be avoided by altering the order.\nbut the issue here is that this is not so obvious for the user and whether the actual behaviour is the right one.\n", "created_at": "2011-05-16 03:37:17", "user": 789801, "id": 1169993}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169994", "text": "_Imported from Lighthouse._\nComment by **Ellis Berner** - 2010-11-09 15:57:46 UTC\n\nI agree. The before_destroy callback needs to be before the dependent destroy callback.\n", "created_at": "2011-05-16 03:37:17", "user": 789801, "id": 1169994}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169995", "text": "_Imported from Lighthouse._\nComment by **masciugo** - 2010-12-16 16:50:10 UTC\n\nI had same problem,\n\nthe solution was easy and scary at the same time. I just moved before_destroy definition before association definition\n\nI had never supposed such order was significant, and actually i'd prefer not but so it seems\n\nhere the same situation\nhttp://blog.ireneros.com/rails-model-callbacks-and-associations-order\n", "created_at": "2011-05-16 03:37:18", "user": 789801, "id": 1169995}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169996", "text": "_Imported from Lighthouse._\nComment by **Golly** - 2010-12-19 08:18:40 UTC\n\nProbably related to #6191\n", "created_at": "2011-05-16 03:37:19", "user": 789801, "id": 1169996}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169997", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-04 21:42:59 UTC\n\nCan someone check if this is still an issue after we pushed a fix for #6191 ?\n", "created_at": "2011-05-16 03:37:20", "user": 789801, "id": 1169997}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169998", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-09 03:31:18 UTC\n\nIt's still there - it can't be easily fixed since both callbacks in the same chain. As masciugo points out you can work around the problem by moving the before_destroy call before the association definition. Perhaps a more longterm solution is to add a destroy/delete validation callback. Obviously this would be a different validation process - no point in validating uniqueness on something you're about to destroy.\n", "created_at": "2011-05-16 03:37:20", "user": 789801, "id": 1169998}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1169999", "text": "_Imported from Lighthouse._\nComment by **Brian Buchalter** - 2011-04-24 13:54:03 UTC\n\nI've recently encountered this problem as well.  Still not fixed?  Seems like a core piece of functionality...\n", "created_at": "2011-05-16 03:37:21", "user": 789801, "id": 1169999}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3776873", "text": "This still is present (in 3.0.11 at least).\n\nMaybe at least make this behaviour clear in the documentation?\n", "created_at": "2012-02-02 12:12:08", "user": 118779, "id": 3776873}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4008369", "text": "Hi,\n\nI had the exact same problem today. Also had to move the before_destroy before the association definitions. (3.1.0)\n", "created_at": "2012-02-16 20:09:06", "user": 942021, "id": 4008369}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8489593", "text": "Exactly the same problem in 3.2.8: I also had to move the hook before the association.\n", "created_at": "2012-09-12 11:07:06", "user": 279106, "id": 8489593}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8729825", "text": "Same problem in 3.2.6. I had to move before_destroy before associations.\n", "created_at": "2012-09-20 14:18:02", "user": 90962, "id": 8729825}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8759877", "text": "It is even worse with Observers. How can I access to record associations (within an Observer) in a before_destroy callback?\n", "created_at": "2012-09-21 09:45:22", "user": 90962, "id": 8759877}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8759956", "text": "Associations just set a callback, callbacks run in order, maybe the docs could be more explicit about it?\n", "created_at": "2012-09-21 09:49:24", "user": 3387, "id": 8759956}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8759973", "text": "@fxn I am pretty sure that I fixed the docs for this. I can't remember the ticket though.\n", "created_at": "2012-09-21 09:50:00", "user": 27786, "id": 8759973}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8759994", "text": "@steveklabnik awesome\n", "created_at": "2012-09-21 09:51:11", "user": 3387, "id": 8759994}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8760058", "text": "Actually, I can't find it. I'll submit something to docrails now.\n", "created_at": "2012-09-21 09:55:29", "user": 27786, "id": 8760058}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8760126", "text": "Done in https://github.com/lifo/docrails/commit/79cbfc8\n", "created_at": "2012-09-21 09:58:40", "user": 27786, "id": 8760126}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8760148", "text": ":heart:\n", "created_at": "2012-09-21 09:59:37", "user": 3387, "id": 8760148}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15043698", "text": "Same problem in 3.2.12. :(\n", "created_at": "2013-03-18 08:34:52", "user": 331913, "id": 15043698}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15043964", "text": "@nextofsearch it is not exactly a problem, please read the last comments.\n", "created_at": "2013-03-18 08:44:10", "user": 3387, "id": 15043964}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15044301", "text": "@fxn I was misunderstood. Thanks!\n", "created_at": "2013-03-18 08:55:33", "user": 331913, "id": 15044301}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19380082", "text": "Could we please just give `before_destroy` callbacks a higher precedence than `:dependent => :destroy` associations?\n\nI feel like the `before` prefix should mean that it prepends the callback, so it runs before everything else. \n", "created_at": "2013-06-13 09:04:54", "user": 139536, "id": 19380082}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26124195", "text": "I thought a 'before_destroy_validation'  would be better.  \n", "created_at": "2013-10-11 09:15:10", "user": 3787192, "id": 26124195}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/30356316", "text": "@ndbroadbent That's my thought too, though I would not be surprised if there are cases where `before_destroy` ideally runs after `dependent: :destroy` has taken place. I'm interested in hearing about these cases if they exist. If they don't, then a change would be nice (perhaps in Rails 5).\n", "created_at": "2013-12-11 19:48:17", "user": 969572, "id": 30356316}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41675286", "text": "Please do something about this. This is years old and very very hard to debug!\n\nAssociated dependencies should **_never**_ get destroyed before all before_destroy callbacks got executed.\n", "created_at": "2014-04-29 13:28:02", "user": 144173, "id": 41675286}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41697208", "text": "@i42n please read comments above, there is nothing to fix. AR cannot assume a set of callbacks should run before another set of callbacks. The contract is they run in order, just declare callbacks and associations in order if order is important (as explained above).\n", "created_at": "2014-04-29 16:16:01", "user": 3387, "id": 41697208}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45250338", "text": "> AR cannot assume a set of callbacks should run before another set of callbacks.\n\nThat's not exactly true. It assumes `before_event` callbacks run before `event` and `after_event` callbacks run after `event`. Callback types are clearly grouped by type & event, run in the order of the events, and only then within their individual groupings do they run in the order they were defined in the model code.\n\nSo why can't `before_destroy` run before dependents are destroyed? It seems like those are two separate callback types which could be separately grouped just like any other callback.\n", "created_at": "2014-06-05 17:38:28", "user": 83998, "id": 45250338}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45254370", "text": "I think we can use `prepend: true` option in `before_destroy` callback as illustrated in the example....\n", "created_at": "2014-06-05 18:12:00", "user": 1930730, "id": 45254370}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45616216", "text": "@Smudge I mean, the point is that `:dependent` runs via a `before_destroy` callback. See https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/builder/association.rb#L129-L136.\n\nThe contract is easy: define callbacks in the order you want them to be executed. I think that is enough.\n", "created_at": "2014-06-10 13:56:23", "user": 3387, "id": 45616216}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45650628", "text": "@fxn Technically, yes, you are correct. My issue isn't with whether or not it is internally consistent. The behavior is predictable, once you understand what is happening. My issue is that it introduces a non-obvious (and potentially destructive) gotcha. So, at the very least, something about the developer experience could be improved.\n\nI mean, aside from a brief mention in the docs, nothing about `before_destroy` indicates that it won't run before any and all destructive operations. And nothing about `:dependent` indicates that it is built on `before_destroy`. Sure, you can simply re-order your code, which means putting callbacks before association declarations. However, this is a departure from most style guides. And even then, it's not obvious at a glance why the declarations are ordered that way.\n\nFor now, I'll probably just start putting `prepend: true` on any `before_destroy` and call it a day. But it's not ideal.\n", "created_at": "2014-06-10 18:12:36", "user": 83998, "id": 45650628}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45651613", "text": "But how can Rails know which is your desired order?\n\nIf we do it the other way around, then a different ticket is going to be created by someone expecting the current order. (That was an hypothetical experiment, obviously we cannot do that).\n\nThere's no a priori correct order, so the natural one is the one implemented.\n\nAlso, there is inheritance etc.\n\nI believe we just have to document this better if needed.\n", "created_at": "2014-06-10 18:21:00", "user": 3387, "id": 45651613}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45655119", "text": "I have trouble believing that the current order would be preferred _more often_ than the hypothetical order, but I do understand that removing the gotcha would require a breaking change.\n\nThe workaround, in the hypothetical experiment, would be to explicitly create a `before_destroy` which destroys dependents (or deletes/nullifies, etc), and make sure it gets ordered before the other `before_destroy` callbacks. From a grokability standpoint, this would make the behavior far more obvious than with implicit callbacks defined by the `:dependent` option.\n\nPersonally, I had no idea that `:dependent` used `before_destroy` internally (IMO this is just an implementation detail, not a feature), but in lieu of making a breaking change, it would make sense to me if this implementation detail were exposed in a more obvious manner. Maybe by making `before_destroy: { dependent: :destroy }` an alias for `dependent: :destroy`, so that at least it's more clear at a glance what is happening. That would also allow for the possibility of `after_destroy: { dependent: :destroy }`, which could be a desired ordering as well.\n", "created_at": "2014-06-10 18:48:01", "user": 83998, "id": 45655119}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/47577023", "text": "I have to agree that having before_destroy run _after_ the child objects are nullified/destroyed is unintuitive behavior. I was just bitten by this and it seems intuitive that before_destroy should run before any destructive actions occur to alter the state of the database within the transaction.\n", "created_at": "2014-06-30 19:42:50", "user": 764570, "id": 47577023}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/111233093", "text": "We got bit by this on our project as well. Expected before_destroy to happen before any kind of destruction on the active record and all its dependent destroy active records. That wasn't the case. One hour and a half of troubleshooting later, I found out the cause. I think we can save many Rails developers trouble in the future by having this _adhere to the principle of least surprise_ (aka, **before_destroy happens before any kind of destruction on the main active record or dependent ones**), or alternatively if that is too difficult given some API constraints, then **add a before_dependent_destroy**. \n\nThanks. I've been a happy camper with Rails and appreciate the Rails folks continually striving to meet developer needs.\n", "created_at": "2015-06-11 18:30:56", "user": 23052, "id": 111233093}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/111306103", "text": "@AndyObtiva Please feel free to open a new issue with a reproduction script. You're unlikely to get much response on a 4 year old closed issue.\n", "created_at": "2015-06-11 23:31:38", "user": 1529387, "id": 111306103}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/111309660", "text": "Thanks a lot for the response. I'll see if I can contribute a proposed Pull Request fix in the process of opening the new issue as well. Regards. -Andy\n", "created_at": "2015-06-12 00:01:54", "user": 23052, "id": 111309660}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/160069285", "text": "Just got bitten by this...\n", "created_at": "2015-11-27 08:37:01", "user": 124391, "id": 160069285}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/162424639", "text": "Just refreshed pull-request for Rails 5: https://github.com/rails/rails/pull/22520\n", "created_at": "2015-12-07 06:33:44", "user": 23052, "id": 162424639}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/364778642", "text": "Just got bit by this on Rails 3.2.22.5. Yikes. This is not what you would expect the behaviour to be. Is there a desire to fix this?", "created_at": "2018-02-11 19:12:39", "user": 180819, "id": 364778642}, {"reactions": {"+1": [180819]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/364783727", "text": "Just found two solutions: \r\n\r\n1) Order the `before_destroy` callback **before** the association with `dependent: :destroy`.\r\n\r\n2) Use `prepend: true` on the `before_destroy` callback so it gets put at the \"front\" of the callbacks.\r\n\r\nSee here for more details: \r\n\r\n- https://stackoverflow.com/questions/31343453/ruby-on-rails-association-gets-deleted-before-before-destroy\r\n- https://github.com/rails/rails/issues/3458", "created_at": "2018-02-11 20:12:56", "user": 180819, "id": 364783727}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4444\nCreated by **Luigi Montanez** - 2011-02-14 05:42:01 UTC\n\nIn Rails 2.3.x, one is able to stick this in ApplicationController to present the user with a custom 404 screen:\n\n```\nrescue_from(ActionController::RoutingError) { render :text => 'This is a custom 404.' }\n```\n\nNow in Rails 3, because routing is done as middleware (ActionDispatch), it seems that the ActionController::RoutingError that gets thrown by ActionDispatch no longer can be caught from ApplicationController -- the error is already thrown and ActionDispatch renders /templates/rescues/routing_error.erb before the controller can rescue_from the error.\n", "labels": ["actionpack"], "number": 671, "updated_at": "2014-12-18 11:11:38", "user": 789801, "closed_at": "2012-04-30 00:54:56", "id": 904332, "title": "Can no longer rescue_from ActionController::RoutingError", "url": "https://api.github.com/repos/rails/rails/issues/671", "created_at": "2011-05-16 03:37:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170000", "text": "_Imported from Lighthouse._\nComment by **Ben Marini** - 2010-04-27 02:38:02 UTC\n\nI verified this with a freshly generated rails app from the master branch. I haven't investigated too far, but at this point the best way I can see to do this in rails 3 is to subclass and swap out the `ActionDispatch::ShowExceptions` middleware. Or add a route that matches anything...is there a better way?\n", "created_at": "2011-05-16 03:37:26", "user": 789801, "id": 1170000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170001", "text": "_Imported from Lighthouse._\nComment by **Jean** - 2010-05-27 20:09:31 UTC\n\nI am also hitting this problem, but my understanding of the internals of rails3 is very limited atm ...\n\nCouldn't we define the rescue handling as an option to the route ? (thus in route.rb)\n", "created_at": "2011-05-16 03:37:27", "user": 789801, "id": 1170001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170002", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-05-28 03:35:17 UTC\n\nPut following code in an initializer in a rails3 app.\n\n``` ruby\nmodule ActionDispatch\n  class ShowExceptions\n    def render_exception(env, exception)\n      if exception.kind_of? ActionController::RoutingError\n        render(500, 'it was routing error')\n      else\n        render(500, \"some other error\")\n      end\n    end\n  end\nend      \n```\n\nThere might be a better way but it works in my quick test.\n", "created_at": "2011-05-16 03:37:27", "user": 789801, "id": 1170002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170003", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-07-13 19:58:09 UTC\n\nThe best way to handle a missing route in Rails 3 is by adding the following line at the end of your router:\n\n  match \"*\", :to => \"home#routing_error\"\n\nAnd add the routing_error action. We will be working on a better solution, but it is targeted for 3.1.\n", "created_at": "2011-05-16 03:37:28", "user": 789801, "id": 1170003}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170004", "text": "_Imported from Lighthouse._\nComment by **Hubert ≈Åƒôpicki** - 2010-07-25 16:47:51 UTC\n\nJos√©, are you sure that your solution actually works? I think it's not working as you can't simply say match \"*\" to match everything in Rails 3 so far?\n", "created_at": "2011-05-16 03:37:28", "user": 789801, "id": 1170004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170005", "text": "_Imported from Lighthouse._\nComment by **Hubert ≈Åƒôpicki** - 2010-07-25 16:52:04 UTC\n\nI mean, you have to do it like this:\n\nmatch '/:anything',  :to => \"home#routing_error\", :constraints => { :anything => /.*/ }\n", "created_at": "2011-05-16 03:37:28", "user": 789801, "id": 1170005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170006", "text": "_Imported from Lighthouse._\nComment by **Hubert ≈Åƒôpicki** - 2010-07-26 07:14:54 UTC\n\nI was giving it a bit more thought since yesterday. The solution with match \"/:anything\" is also not perfect for some people, as it'll override all routes from plugins/engines. I now think that best solution is to use custom rack middleware for handling 404 pages in Rails.\n", "created_at": "2011-05-16 03:37:29", "user": 789801, "id": 1170006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170007", "text": "_Imported from Lighthouse._\nComment by **Matthew Gibbons** - 2010-08-13 14:14:51 UTC\n\nThe approach that I have adopted to solve this (for now) is to make a call back into the application (from ActionDispatch::ShowExcpetions#render_exception), specifically to a controller that is there for the purpose of rendering an error page. This has all the benefits of using the layout and styling of the host application. However, if a second exception occurs whilst handling the exception in this way, the original method is called, and the default is rendered.\n\nIt is better explained here: http://accuser.cc/posts/1-rails-3-0-exception-handling\n\nFor those who would rather copy and paste than read the above... ;)\n1. http://gist.github.com/522944\n2. http://gist.github.com/522924\n", "created_at": "2011-05-16 03:37:29", "user": 789801, "id": 1170007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170008", "text": "_Imported from Lighthouse._\nComment by **Andre Pankratz** - 2010-08-17 17:11:44 UTC\n\nHere is a gem that may solve this issue: http://github.com/vidibus/vidibus-routing_error\n", "created_at": "2011-05-16 03:37:29", "user": 789801, "id": 1170008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170009", "text": "_Imported from Lighthouse._\nComment by **gucki** - 2010-09-22 13:34:45 UTC\n\nThe easiest way for me was to add this very last route:\n\n  match ''=> lambda { |env| raise ActionController::RoutingError, env[\"PATH_INFO\"] }\n", "created_at": "2011-05-16 03:37:30", "user": 789801, "id": 1170009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170010", "text": "_Imported from Lighthouse._\nComment by **gucki** - 2010-09-22 13:51:13 UTC\n\nPlease ignore my previous comment, it does not work that way. Seems rails had some routes cached, so it seemed to work initially.\n", "created_at": "2011-05-16 03:37:30", "user": 789801, "id": 1170010}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170011", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 21:00:28 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:37:30", "user": 789801, "id": 1170011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170012", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:22:55 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:37:31", "user": 789801, "id": 1170012}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170013", "text": "_Imported from Lighthouse._\nComment by **Tian Davis** - 2010-11-12 00:25:17 UTC\n\nPersonally, I'm waiting for an Official solution from the Rails Core Team. Until then I need a simple, no side effect solution for catching rogue routes. For now, my solution is an elaboration on Jos√© Valim's recommendation:\nhttp://techoctave.com/c7/posts/36-rails-3-0-rescue-from-routing-error-solution\n\nWith this approach, you'll be in unison with the Rails Core Team. Moreover, I incorporate Rails 3 Route Globbing, so you get the added benefit of knowing exactly which rogue route was entered. As a result, you're free to handle routing errors as creatively as you'd like.\n", "created_at": "2011-05-16 03:37:31", "user": 789801, "id": 1170013}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170015", "text": "_Imported from Lighthouse._\nComment by **avocade (at gmail)** - 2010-12-19 02:50:57 UTC\n\nIssue for more than just rescuing from routing errors, CanCan::AccessDenied too:\n\nhttp://www.tonyamoyal.com/2010/07/28/rails-authentication-with-devise-and-cancan-customizing-devise-controllers/\n", "created_at": "2011-05-16 03:37:31", "user": 789801, "id": 1170015}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170016", "text": "_Imported from Lighthouse._\nComment by **Kevin Watt** - 2011-03-18 15:40:52 UTC\n\nThis is a huge bug and I feel it's priority should be raised.\n\nIt's not acceptable for a broken link in a production app to result in a blank screen, this is why we make 404 handlers.  But once the request is dispatched to rails it seems to be rails job to render the 404 page, which it can't do because of this bug.\n", "created_at": "2011-05-16 03:37:32", "user": 789801, "id": 1170016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170017", "text": "_Imported from Lighthouse._\nComment by **Kevin Watt** - 2011-03-18 16:56:03 UTC\n\nJust to add, \nmatch '/:anything', :to => \"home#routing_error\", :constraints => { :anything => /._/ } or\nmatch \"_\", :to => \"home#routing_error\"\n\nDon't seem to work when the controller exists but the action doesn't.  Exception log still just shows \"AbstractController::ActionNotFound (The action 'rejsasdf' could not be found for HomeController):\" and a blank page is rendered.\n", "created_at": "2011-05-16 03:37:32", "user": 789801, "id": 1170017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170018", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-19 06:48:59 UTC\n\nAre you using :action as the dynamic segment name? If so Rails will try to find the action in the controller. The following path works for me:\n\n``` ruby\nmatch '*path', :to => 'errors#not_found'\n```\n\nThis won't catch a missing root path - but I'm guessing you're website is there.\n", "created_at": "2011-05-16 03:37:32", "user": 789801, "id": 1170018}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170019", "text": "_Imported from Lighthouse._\nComment by **Andre Pankratz** - 2011-03-19 08:36:52 UTC\n\nA catch-all route at the end of your routes my seem like a simple fix, but it has a major drawback:\nIf your application relies on engines that extend your app with their own routes, things will break because those routes will never get fired!\n\nI've published a gem that solves the routing error. It basically catches the exception on Rack-level and re-raises it on application-level: https://github.com/vidibus/vidibus-routing_error\n", "created_at": "2011-05-16 03:37:33", "user": 789801, "id": 1170019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170020", "text": "_Imported from Lighthouse._\nComment by **Andre Pankratz** - 2011-03-19 08:37:41 UTC\n\nOops, I removed Jos√©. Sorry.\n", "created_at": "2011-05-16 03:37:45", "user": 789801, "id": 1170020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170021", "text": "_Imported from Lighthouse._\nComment by **Kevin Watt** - 2011-03-19 14:36:35 UTC\n\nI am using non-restful routes, which is perhaps why the catch-all doesn't work for me\n\n```\nmatch ':controller(/:action(/:id))', :constraints => {:id => /.*/}\n```\n", "created_at": "2011-05-16 03:37:46", "user": 789801, "id": 1170021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170053", "text": "Yeah, you can no longer do that. You need to define a catch all route.\n", "created_at": "2011-05-16 03:40:19", "user": 9582, "id": 1170053}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276762", "text": "Why has this issue been closed? As far as I can tell, Rails 3.1 RC1 still hasn't added back support rescue_from, right?\n\nOr is it going to be in the next RC / official release?\n", "created_at": "2011-06-01 19:56:36", "user": 2300, "id": 1276762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276865", "text": "No Exceptron did not get in Rails 3.1. :( We are going to merge it into master soon.\n", "created_at": "2011-06-01 20:17:57", "user": 9582, "id": 1276865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1448948", "text": "Should this issue be re-opened until the actual fix is merged?\n", "created_at": "2011-06-27 17:28:19", "user": 69, "id": 1448948}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1543434", "text": "Any word on the status of this issue?\n", "created_at": "2011-07-10 22:19:01", "user": 98913, "id": 1543434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1685218", "text": "Can someone please provide some more info on the status of this issue? I'm still seeing it on edge.\nSteps to reproduce: https://gist.github.com/1114757\n", "created_at": "2011-07-29 21:20:02", "user": 24216, "id": 1685218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1685553", "text": "With how rails 3 was restructured to be a real rack app, it's not longer easy and clean to raise that error inside the context of a controller instance.\nThe best approach is a catch all route at the end of routes.rb: `get \"*\" => \"home#not_found\". You could also route it to an action that would raise the error and then you could handle it with a rescue_from.\n", "created_at": "2011-07-29 21:46:47", "user": 294954, "id": 1685553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1685782", "text": "Ok, I understand it's going to stay this way.\nThanks for clarifying.\n", "created_at": "2011-07-29 22:17:01", "user": 24216, "id": 1685782}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1703471", "text": "Keep an eye on [exceptron](http://github.com/spastorino/exceptron)\n", "created_at": "2011-08-01 19:54:54", "user": 52642, "id": 1703471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1710693", "text": "@spastorino There's no gem yet...? :-(\n", "created_at": "2011-08-02 16:51:05", "user": 175494, "id": 1710693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1711786", "text": "@gucki released now\n", "created_at": "2011-08-02 18:27:56", "user": 52642, "id": 1711786}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1712128", "text": "@spastorino great, thanks. :)\n\nBut too bad I cant seem to get it working: I added the gem but I still can't catch `ActionController::RoutingError` with a `rescue_from Exception` from withing my `ApplicationController`.\n", "created_at": "2011-08-02 19:07:37", "user": 175494, "id": 1712128}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1714488", "text": "@gucki exceptron has nothing to do with rescue_from, I will write a blog post soon explaining how to use it and merge it to Rails 3.2. Meanwhile you can take a look at the tests to see the way you should use it :)\n", "created_at": "2011-08-03 00:17:30", "user": 52642, "id": 1714488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1752456", "text": "@spastorino Ok, I think I got it _g_. I just send a pull request for an updated readme :)\n", "created_at": "2011-08-08 08:44:41", "user": 175494, "id": 1752456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1780159", "text": "For those that are using gems that have their own routes: you can also add the catch-all route after initialize to account for that. Just put something like this in application.rb:\n\n``` ruby\n    # 404 catch all route\n    config.after_initialize do |app|\n      app.routes.append{ match '*a', :to => 'application#render_404' } unless config.consider_all_requests_local\n    end\n```\n", "created_at": "2011-08-11 08:41:21", "user": 19221, "id": 1780159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3014257", "text": "In case anyone else was like me, saw this bug, and decided to use exceptron: don't - [it is abandoned](https://github.com/jorlhuda/exceptron/issues/1).\n", "created_at": "2011-12-05 09:43:01", "user": 30756, "id": 3014257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3985916", "text": "Just to let fellow googlers know: this issue still appears to exist in rails 3.1.1, although I have yet to update to rails 3.2 in case of possible breakage.\n", "created_at": "2012-02-15 18:27:16", "user": 244545, "id": 3985916}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4046671", "text": "I m in a big trouble and i think that this issue could be useful for me in some way, can somebody of you help me?\n\nI used:\n\nmatch '*a', :to => 'errors#e404' \n\n(i tried also\nconfig.after_initialize do |app|\n      app.routes.append{ match '*a', :to => 'application#render_404' } unless config.consider_all_requests_local\n    end\nin application.rb but with no success)\n\nand it works great but... I use omniauth and I have url like that\n\n/auth/facebook for example\n\nthat are no listed in my gemfile...\n\nI thought that @moiristo answer could help me but I have again an error because my \n\n/auth/:service redirect to 404...\n\nsorry for my english...-\n-can you help me in some way?\n", "created_at": "2012-02-20 00:20:42", "user": 46832, "id": 4046671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4046960", "text": "had the exact same problem a while back. It's because the omniauth middleware is only executed after your rails app tells rack it couldn't process the request. So, I had to add a route to do just that:\n\n``` ruby\nmatch '/auth/:provider' => 'sessions#omniauth' \n```\n\n``` ruby\n  # Render a 404 to trigger the omniauth middleware  \n  def omniauth\n    render :text => '404', :status => 404\n  end\n```\n\nyou could probably also create a custom responder to handle this..\n", "created_at": "2012-02-20 01:07:25", "user": 19221, "id": 4046960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4050167", "text": "@moiristo you are the best, thank you very much \nI added the match in application#omniauth\nand the method in applicationcontroller\nand it run perfectly\n\nsincerely I didnt' understand very well why we had to add  render :text => '404', :status => 404, but this is mine problem and I have to study it.\nthank you again\nNunzio \n", "created_at": "2012-02-20 08:49:16", "user": 46832, "id": 4050167}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4051481", "text": "It's because your rails app is a rack app as well. Rack calls every registered app until one handles it. This is what happens when you redirect. When you don't redirect and respond with 404, the next app in the chain is called. One of these apps is the omniauth middleware. \n", "created_at": "2012-02-20 10:40:04", "user": 19221, "id": 4051481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4051510", "text": "great explanation\nThank you very much\nNunzio Fiore\n\nOn Mon, Feb 20, 2012 at 11:40 AM, Reinier de Lange <\nreply@reply.github.com\n\n> wrote:\n> \n> It's because your rails app is a rack app as well. Rack calls every\n> registered app until one handles it. This is what happens when you\n> redirect. When you don't redirect and respond with 404, the next app in the\n> chain is called. One of these apps is the omniauth middleware.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/671#issuecomment-4051481\n", "created_at": "2012-02-20 10:42:03", "user": 46832, "id": 4051510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4114603", "text": "Hello,\n\nI want to handle not only routing errors. I have used the code from https://github.com/rails/rails/issues/671#issuecomment-1170002 and is working fine.\n\nWhat I would like to do is to render a page directly instead of displaying a message. Therefore I've replaced --> render(500, 'it was routing error') for this --> render :file => \"#{RAILS_ROOT}/public/500.html\", :status => 500\n\nBut I get an error: wrong number of arguments (1 for 2)\n\nThis is what im trying:\n\nmodule ActionDispatch\n  class ShowExceptions\n    def render_exception(env, exception)\n      if exception.kind_of? ActionController::RoutingError\n        #render(500, 'it was routing error')\n        render :file => \"#{RAILS_ROOT}/public/404.html\", :status => 404\n      else\n        #render(500, \"some other error\")\n        render :file => \"#{RAILS_ROOT}/public/500.html\", :status => 500\n      end\n    end\n  end\nend \n\nAny help will be very welcome! Thanks in advance!\n", "created_at": "2012-02-22 18:48:50", "user": 113805, "id": 4114603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4120757", "text": "why don't you just use rescue_from for anything other than routing errors?\n", "created_at": "2012-02-22 20:21:20", "user": 19221, "id": 4120757}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4133182", "text": "Hi, I thought rescue_from didnt work in Rails 3.0.X versions. Reading now better the post I assume that the only one that doesnt work is for the Routing errors. Sorry, my bad!\n", "created_at": "2012-02-23 09:28:58", "user": 113805, "id": 4133182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4745790", "text": "@canma5 Correct - rescue_from doesn't work with ActionController::RoutingError in 3.2.0, but does work for everything else.\n", "created_at": "2012-03-28 00:20:40", "user": 391291, "id": 4745790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4892079", "text": "What is the current status?\n\n11 months ago, jos√©:\n\n> And add the routing_error action. We will be working on a better solution, but it is targeted for 3.1.\n\n10 months ago, jos√©:\n\n> No Exceptron did not get in Rails 3.1. :( We are going to merge it into master soon.\n\nNow we're in several patch releases of rails 3.2.  Is there any new official way to deal with this? Or is the only way still a catch-all route? The problem with the catch-all route, as others have mentioned, is it messes up engine-supplied routes. To deal with that, you can do it in an after_initialize block or some other initializer you hook in after engine routes are loaded... but this starts getting kind of cumbersome and confusing for the beginner. At one point Jos√© suggested Rails core team planned to implement some other fix -- is there still such a plan/desire?\n", "created_at": "2012-04-03 00:34:56", "user": 149304, "id": 4892079}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4962237", "text": "+1 looking forward to a status update.\n", "created_at": "2012-04-04 20:26:38", "user": 181487, "id": 4962237}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5106331", "text": "Any update on how to handle this?\n", "created_at": "2012-04-13 00:43:05", "user": 719459, "id": 5106331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5299337", "text": "This issue shouldn't be closed.\n", "created_at": "2012-04-24 07:55:01", "user": 9347, "id": 5299337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5388917", "text": "I will review this later, but from the top of my head you can fix this changing ...\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L255\nhere is the impl\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/public_exceptions.rb\n", "created_at": "2012-04-27 19:45:55", "user": 52642, "id": 5388917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5410409", "text": "Closing, see @spastorino comment\n", "created_at": "2012-04-30 00:54:56", "user": 160941, "id": 5410409}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5410761", "text": "I do not understand how to apply @spastorino's comment. Is it possible to rescue from Routing exceptions in current Rails, and if so, how?\n", "created_at": "2012-04-30 01:47:50", "user": 149304, "id": 5410761}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5412697", "text": "For everyone waiting on a status update, I've written briefly about it here (point 3):\n\nhttp://blog.plataformatec.com.br/2012/01/my-five-favorite-hidden-features-in-rails-3-2/\n", "created_at": "2012-04-30 06:59:21", "user": 9582, "id": 5412697}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5416969", "text": "Thanks. Is rescue_from discouraged/deprecated behavior, and the new middleware-based `config.exceptions_app` should be used instead?  Or just for routing errors?  \n", "created_at": "2012-04-30 13:10:27", "user": 149304, "id": 5416969}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9621315", "text": "Regarding the blog post that josevalim posted, is that the real way to handle this?  I like that method and it works well for me except for integration tests that tests for a 404 server response since the ActiveRecord::RecordNotFound exception bubbles up to the tests.  I've been able to fix that by doing the 'rescue_from ActiveRecord::RecordNotFound' thing but that seems like duplication since I also have a 'match 404' in my routes.\n", "created_at": "2012-10-19 21:30:38", "user": 969670, "id": 9621315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/67472114", "text": "Here an example: https://gist.github.com/Sujimichi/2349565\n", "created_at": "2014-12-18 11:11:38", "user": 111506, "id": 67472114}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4454\nCreated by **Saimon Moore** - 2011-02-14 05:42:03 UTC\n\n``` ruby\n#works\nclass User < ActiveRecord::Base\n  scope :random, lambda { |lt| where(\"created_at < ?\", Time.now.utc).order('RAND()').limit(lt) }\nend\n\n#throws exception below\nmodule ActiveRecord\n  class Base\n    scope :random, lambda { |lt| where(\"created_at < ?\", Time.now.utc).order('RAND()').limit(lt) }\n  end\nend\n```\n\nruby-1.9.1-p378 > User.random(1).first\nNoMethodError: undefined method `abstract_class?' for Object:Class\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:1335:in`class_of_active_record_descendant'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:1000:in `base_class'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:759:in`reset_table_name'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:751:in `table_name'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:1032:in`arel_table'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:1027:in `unscoped'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/named_scope.rb:30:in`scoped'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:407:in `rescue in where'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/base.rb:405:in`where'\n    from /Users/saimon/Development/Projects/myapp_r3/config/initializers/active_record.rb:4:in `block in <class:Base>'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/named_scope.rb:95:in`call'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/named_scope.rb:95:in `block in scope'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/named_scope.rb:104:in`call'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/activerecord-3.0.0.beta3/lib/active_record/named_scope.rb:104:in `block (2 levels) in scope'\n    from (irb):1\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/railties-3.0.0.beta3/lib/rails/commands/console.rb:47:in`start'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/railties-3.0.0.beta3/lib/rails/commands/console.rb:8:in `start'\n    from /Users/saimon/.rvm/gems/ruby-1.9.1-p378@myapp/gems/railties-3.0.0.beta3/lib/rails/commands.rb:34:in`<top (required)>'\n    from script/rails:9:in `require'\n    from script/rails:9:in`<main>'ruby-1.9.1-p378 >\n", "labels": [], "number": 672, "updated_at": "2011-05-16 03:41:14", "user": 789801, "closed_at": "2011-05-16 03:41:14", "id": 904333, "title": "Adding a scope to ActiveRecord:Base throws undefined method exception", "url": "https://api.github.com/repos/rails/rails/issues/672", "created_at": "2011-05-16 03:37:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170023", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-17 10:57:32 UTC\n\nI don't know if we should support that kind of scopes declaration. The more appropriate in that case would be to just use class method, as you're reopening base class:\n\n```\ndef self.random(lt)\n  where(\"created_at < ?\", Time.now.utc).order('RAND()').limit(lt)\nend\n```\n", "created_at": "2011-05-16 03:37:52", "user": 789801, "id": 1170023}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170024", "text": "_Imported from Lighthouse._\nComment by **Duke** - 2011-02-19 03:44:18 UTC\n\nI'm running across this as well.  Every model here has a possible polymorphic relationship with Starlight.\n\nmodule ActiveRecord\n  class Base\n    has_many :starlights, :as => :entity, :dependent => :destroy\n    def starlight\n      Starlight.for(self)\n    end\n\n```\nscope :order_by_starlight, joins(:starlights).group('starlights.id').having('max(starlights.id)').order('starlights.value')\n```\n\n  end\nend\nI require order_by_starlight to be composable, so I can say, for instance, Entry.where(:user => current_user).order_by_starlight\n\nThis seems a good use case for adding scope to Activerecord::Base.\n", "created_at": "2011-05-16 03:37:52", "user": 789801, "id": 1170024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170025", "text": "_Imported from Lighthouse._\nComment by **Duke** - 2011-03-16 08:11:29 UTC\n\nYes, I see with Arel a class method is composable.\n", "created_at": "2011-05-16 03:37:53", "user": 789801, "id": 1170025}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4520\nCreated by **Brian Lopez** - 2010-05-01 18:38:11 UTC\n\nBy my understanding, the #as_json method should return an object that can be nearly mapped directly to JSON (given the data types mentioned in this issue's title). This makes it so other JSON encoding libraries don't have to know or do anything special to encode the object.\n\nIf this were the expected behavior, C extension JSON libraries would be able to take advantage of the #as_json method as an optimization over calling #to_json - which may be doing it's own encoding in Ruby land.\n\nSee: http://gist.github.com/386545\n\nA little backstory for the gist:\nEach ActiveRecord object is having it's #to_json method called, which is falling through ActiveSupport's JSON encoder in pure ruby.\nAn an example in using the Mysql2 gem directly, I'm able to get pure ruby hashes and encode them in C.\n\nThe comparison isn't totally fair, since using ActiveRecord will surely be a little slower than using the db driver directly - but my hope is that you can see the benefits in returning mappable ruby types to the encoder directly.\n", "labels": [], "number": 673, "updated_at": "2011-05-21 15:12:01", "user": 789801, "closed_at": "2011-05-21 15:12:01", "id": 904334, "title": "#as_json should only ever return a Hash, Array, Numeric, String, nil, true or false", "url": "https://api.github.com/repos/rails/rails/issues/673", "created_at": "2011-05-16 03:37:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170026", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:43:09 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:37:59", "user": 789801, "id": 1170026}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170027", "text": "_Imported from Lighthouse._\nComment by **John Firebaugh** - 2011-04-06 21:13:18 UTC\n\nI agree. It would be very useful to have the following invariant:\n\n‚àÄo, o.as_json == JSON.parse(o.to_json)\n\nThe principal violator is ActiveModel::Serializers::JSON#as_json, which does not call #as_json on the serializable_hash. This means that the hash values are whatever types came back or were typecasted from the database (the most common non-JSON-native types being Time, Date, and DateTime). This necessitates a further workaround in Hash#encode_json which should not be necessary.\n\nAttaching a patch that fixes this.\n\n[state:open]\n", "created_at": "2011-05-16 03:37:59", "user": 789801, "id": 1170027}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170028", "text": "_Imported from Lighthouse._\nComment by **John Firebaugh** - 2011-04-07 19:44:30 UTC\n\nAnother issue: TrueClass, FalseClass, and NilClass return an ActiveSupport::JSON::Variable from #as_json. Instead, they should return self and override encode_json.\n", "created_at": "2011-05-16 03:38:00", "user": 789801, "id": 1170028}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170029", "text": "_Imported from Lighthouse._\nComment by **rke** - 2011-04-25 07:54:28 UTC\n\nInstead of Numeric shouldn't this be Float? http://www.ietf.org/rfc/rfc4627.txt does not allow Rationals or Complex numbers and although it does not impose a limit on precision and exponent, http://www.json.org/ describes itself as a subset of ECMA-262 which just says:\n8.5 The Number Type\nThe Number type has exactly 18437736874454810627 (that is, 2**64‚àí2**53+3) values, representing the double- precision 64-bit format IEEE 754 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, ...\n", "created_at": "2011-05-16 03:38:00", "user": 789801, "id": 1170029}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170030", "text": "Attachments saved to Gist: http://gist.github.com/971666\n", "created_at": "2011-05-16 03:38:00", "user": 789801, "id": 1170030}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4521\nCreated by **Lawrence Pit** - 2011-01-13 01:18:34 UTC\n\nAttached patch for rails 3 allows to link and unlink records from a HABTM relation with autosave. Meaning the association updates will only be reflected in the database when the parent is saved.\n\nSummary of new possibilities:\n\n``` ruby\n   class Pirate < ActiveRecord::Base\n     has_and_belongs_to_many :parrots, :autosave => true\n   end\n\n   # Query existing situation\n   @pirate = Pirate.first\n   assert @pirate.parrots == [@parrot1, @parrot2]\n\n   # Add some and delete one\n   @pirate.parrots << [@parrot3, @parrot4]\n   @pirate.parrots.delete(@parrot1)\n   assert @pirate.parrots == [@parrot2, @parrot3, @parrot4]\n\n   # The parrots are not saved to the database yet:\n   assert Pirate.first.parrots == [@parrot1, @parrot2]\n\n   # check validity of @pirate and @pirate.parrots\n   # if not valid, no worries, nothing happened in the db yet\n\n   @pirate.save!\n\n   # And now they are saved:\n   assert Pirate.first.parrots == [@parrot2, @parrot3, @parrot4]\n```\n\nNote: I plan to submit a patch for has_many relations as well.\n", "labels": [], "number": 674, "updated_at": "2012-02-10 00:56:49", "user": 789801, "closed_at": "2011-05-21 15:12:01", "id": 904343, "title": "HABTM: ability to link and unlink records with :autosave => true", "url": "https://api.github.com/repos/rails/rails/issues/674", "created_at": "2011-05-16 03:39:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170036", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-05-02 10:48:27 UTC\n\nHey Lawrence, thanks for the patch! Just two questions:\n\n1) Can you please describe what is the _current_ behavior? Today it automatically saves at the moment we add or delete the record?\n\n2) Is there a need to create a new association class? Because we would likely need another one for has_many and possibly another one for has_many :through. Ideally, the autosave behavior should be just a module that we should include/extend in an autosave association.\n", "created_at": "2011-05-16 03:39:52", "user": 789801, "id": 1170036}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170037", "text": "_Imported from Lighthouse._\nComment by **Lawrence Pit** - 2010-05-02 22:27:02 UTC\n\n1) The current behavior, with or without :autosave => true, is that when you add or delete a record to a collection association, the link is immediately saved to the database, if the owner of the association already exists in the database. \n\nRelated is the method +accepts_nested_attributes_for+, which sets :autosave => true automatically on the collection association. Although I believe the implementation of this for habtm associations is wrong (I mean unwanted), I have not changed that behavior with this patch. The behaviour of +accepts_nested_attributes_for+ is that you are able to modify and destroy the record on the other end of the association, nothing happens to the links between those records and the owner of the association.\n\n2) I thought about that, but then I question why has_many :through is a separate association class, and not just a module? Furthermore, I think it's even correct that there would be a separate one for has_many and one for has_many :through. I imagine the behavior for each is distinctly different, which cannot be captured by one module.\n", "created_at": "2011-05-16 03:39:53", "user": 789801, "id": 1170037}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170038", "text": "_Imported from Lighthouse._\nComment by **Lawrence Pit** - 2010-05-02 23:53:04 UTC\n\nUpdated version with extra tests to show association target isn't loaded when not necessary.\n", "created_at": "2011-05-16 03:39:55", "user": 789801, "id": 1170038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170039", "text": "_Imported from Lighthouse._\nComment by **Lawrence Pit** - 2010-05-03 02:03:22 UTC\n\nAnd another updated version. Now without an extra association class (and without an extra module). This version also supports linking / unlinking of records to has_many relations!\n", "created_at": "2011-05-16 03:39:56", "user": 789801, "id": 1170039}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170040", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-05-03 07:46:51 UTC\n\nAssigning to Jeremy Kemper since he is definitely more familiar with AR code.\n", "created_at": "2011-05-16 03:39:58", "user": 789801, "id": 1170040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170041", "text": "_Imported from Lighthouse._\nComment by **Tyler Rick** - 2010-05-19 22:59:13 UTC\n\nI think it could be nice to see something like this added. I wrote a plugin that did something similar a long time ago (http://github.com/TylerRick/has_and_belongs_to_many_with_deferred_save ), but Lawrence's implementation is much better. I haven't actually tried out these patches yet, but at least from reading through them, they look fantastic.\n\n## Question about AutosaveAssociation\n\n> 1) The current behavior, with or without :autosave => true, is that when you add or delete a record to a collection association, the link is immediately saved to the database, if the owner of the association already exists in the database.\n\nThat sounds correct. But AutosaveAssociation also has [mark_for_destruction](http://github.com/rails/rails/blob/master/activerecord/lib/active_record/autosave_association.rb#L81):\n\n``` ruby\n  # Destroying one of the associated models members, as part of the parent's\n  # save action, is as simple as marking it for destruction:\n  #\n  #   post.comments.last.mark_for_destruction\n  #   post.comments.last.marked_for_destruction? # => true\n  #   post.comments.length # => 2\n  #\n  # Note that the model is _not_ yet removed from the database:\n  #   id = post.comments.last.id\n  #   Comment.find_by_id(id).nil? # => false\n  #\n  #   post.save\n  #   post.reload.comments.length # => 1\n  #\n  # Now it _is_ removed from the database:\n  #   Comment.find_by_id(id).nil? # => true\n```\n\nCouldn't we simply use that instead of keeping a separate `pending_link_deletions` array? What's the difference?\n\nWhen used with `accepts_nested_attributes_for`, doesn't the :autosave behavior already not do any inserts, deletes, or updates to nested/associated models until you call save on the parent? Can't we use that somehow?\n\n## Different semantics?\n\nIt looks like you're adding on some new behavior (to handle the case where we add a **new, not-already-associated object** to the association collection, or delete a member from that association) to the existing `:autosave => true` option (which I believe only handled the case of auto-saving (updating) changes made to **existing, already-associated associated objects** when you call save before).\n\nMy next question is, should the existing `:autosave` option be extended with this new behavior or should a new option with a different name be used instead?\n1. Is the purpose of this new addition related closely enough to the existing `:autosave` purpose/behavior to warrant them both using the same option?\n2. Would we ever want to enable one behavior but not the other?\n\nThis, IIRC, is the _current_ behavior (and the purpose/primary use case for) `:autosave`:\n\n<table>\n<tr>\n<td>\n</td>\n<th>\n`:autosave => false` (default)\n</th>\n<th>\n`:autosave => true`\n</th>\n</tr>\n<tr>\n<th>\nModifying **existing** associated objects when you call save)\n</th>\n<td>\n``` ruby\npost = Post.first\npost.comments[0].subject # => 'Old'\npost.comments[0].subject = 'New'\npost.save\npost.reload\npost.comments[0].subject # => 'Old'\n\\# Changes were not saved -- at all\n```\n</td>\n<td>\n``` ruby\npost = Post.first\npost.comments[0].subject # => 'Old'\npost.comments[0].subject = 'New'\npost.save\npost.reload\npost.comments[0].subject # => 'New'\n\\# Changes were saved\n```\n</td>\n</tr>\n<tr>\n<th>\nDestroy members marked for destruction, when saving the parent object\n</th>\n<td>\nNot applicable?\n</td>\n<td>\n``` ruby\npost.comments.last.mark_for_destruction\npost.comments.last.marked_for_destruction? # => true\npost.comments.length # => 2\n\\# The model is _not_ yet removed from the database\npost.save\n\\# Now it is removed\npost.reload.comments.length # => 1\n```\n</td>\n</tr>\n</table>\n\n\nAnd this I think is the proposed behavior to be added:\n\n<table>\n<tr>\n<td>\n</td>\n<th>\nDisabled (default)\n</th>\n<th>\nEnabled\n</th>\n</tr>\n<tr>\n<th>\nAdding a new, previously-not-associated object (existing or new_record doesn't matter) to an association collection\n</th>\n<td>\n``` ruby\npost = Post.first\npost.comments.count # => 1\npost.comments << [@new_comment1, @new_comment2]\n# The new comments are saved to the database IMMEDIATELY\npost.reload\npost.comments.count # => 3\n```\n</td>\n<td>\n``` ruby\npost = Post.first\npost.comments.count # => 1\npost.comments << [@new_comment1, @new_comment2]\n# The new comments are not saved to the database yet\npost.save\npost.reload\npost.comments.count # => 3\n```\n</td>\n</tr>\n\n<tr>\n<td>\n</td>\n<th>\nDisabled (default)\n</th>\n<th>\nEnabled\n</th>\n</tr>\n<tr>\n<th>\nDeleting a member from that association\n</th>\n<td>\n``` ruby\npost = Post.first\npost.comments.count # => 3\npost.comments.delete(post.comments[1])\n# The comment is deleted from the database IMMEDIATELY [? -- not tested]\npost.reload\npost.comments.count # => 2\n```\n</td>\n<td>\n``` ruby\npost = Post.first\npost.comments.count # => 3\npost.comments.delete(post.comments[1])\n# The comment is not deleted from the database yet\npost.reload\npost.comments.count # => 3\n```\n</td>\n</tr>\n</table>\n\n\nTo summarize, I find that `:autosave => false` and `:autosave => true` make sense to describe the existing difference in behavior...\n\n<table>\n<tr>\n<th>\nEnabled\n</th>\n<th>\nDisabled\n</th>\n</tr>\n<tr>\n<td>\nChanges are not saved -- at all -- even when you call save on the parent object\n</td>\n<td>\nChanges are saved -- but only when you call save on the parent object\n</td>\n</tr>\n</table>\n\n\n...but somewhat unintuitive to describe the proposed new meaning:\n\n<table>\n<tr>\n<th>\nDisabled\n</th>\n<th>\nEnabled\n</th>\n</tr>\n<tr>\n<td>\nThe new objects are saved to the database (linked/associated with parent_object) IMMEDIATELY when added to association collection\n</td>\n<td>\nThe new objects are only saved to the database (linked/associated with parent_object) when you call save on the parent\n</td>\n</tr>\n</table>\n\n\nIt seems to me like we're doing the exact _opposite_ of automatically saving in this case -- we're actually _deferring_ the automatic save (that would _normally_ happen) until later on.\n\nThe \"enabled\" column of both tables is similar enough, and I can sort of see why the name might make sense for that. \nBut in the \"_disabled_\" column of the one table, we're **not saving** at all and in the other, we're **saving immediately**.\n\nIt's not intuitive that `:autosave => false` would mean \"save immediately\".\n\nAnd the docs (at least the 2.3.5 docs -- couldn't find 3.0 docs) say:\n\n> Unless you set the :autosave option on a has_one, belongs_to, has_many, or has_and_belongs_to_many association [sentence incomplete]. Setting it to true will always save the members, whereas <u>setting it to false will never save the members</u>.\n\n## So, a different name?\n\nHere are some ideas...\n- `:deferred_save => true`\n- `:save => :when_parent_saved`\n- `:dont_link_records_until_parent_saved => true`\n\nOr...\n- Rename `:autosave => false` to `:save_existing => false`\n- Rename `:autosave => true` to `:save_existing => :when_parent_saved`\n- Add `:save_new_links => :immediately` (used for unlinks too) and `:save_new_links => :when_parent_saved`\n- (Yuck! I know...)\n\n## A tiny change to a test\n\n``` ruby\n  def test_should_have_pending_link_creations\n+   assert_equal 2, @pirate.send(@association_name).count\n    @pirate.send(@association_name) << [@new_child_1, @new_child_2]\n    assert_equal [@new_child_1, @new_child_2], @pirate.send(@association_name).pending_link_creations\n    @pirate.reload\n    assert_equal 2, @pirate.send(@association_name).count\n  end\n```\n\nI would suggest adding the first `assert_equal` so we can see what it is _before_ we start making changes (and see that it does not end up changing). (When I first read the test, I was assuming incorrectly that it started out at 0 and was _changed_ to 2 when [@new_child_1, @new_child_2] were added, but I was wrong since the setup method adds 2 records before we get here.)\n\n## Tiny question about accepts_nested_attributes_for\n\nCan you clarify what you mean by \"nothing happens to the links between those records and the owner of the association\" when you said:\n\n> The behaviour of `accepts_nested_attributes_for` is that you are able to modify and destroy the record on the other end of the association, nothing happens to the links between those records and the owner of the association.\n\nWhat _could_ or _should_ happen to those links? Your patch wouldn't even change anything about the way accepts_nested_attributes_for works, would it?  (Does accepts_nested_attributes_for even work with habtm? I don't recall.)\n", "created_at": "2011-05-16 03:40:01", "user": 789801, "id": 1170041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170042", "text": "_Imported from Lighthouse._\nComment by **Lawrence Pit** - 2010-05-20 04:51:44 UTC\n\nTyler, thanks for your input. Below some answers.\n\n### mark_for_destruction\n\n+mark_for_destruction+ sets an instance var on a model instance, so it would destroy the instance. We don't want to destroy the instance, we only want to break the link between two model instances.\n\nFor example, suppose a pirate has many books and has many favorite_books. Suppose Book X is in both collections. If you want to remove Book X from the favorite_books collection, but not from the books collection, then you cannot use +mark_for_destruction+ on the Book X object, because a) you don't want it to disappear from both collections and b) you don't want to actually destroy Book X.\n\nTechnically speaking you'd want to do +mark_for_destruction+ on the object that sits between two model instances, in case of a habtm. However, such an object does not really exist in the rails implementation of habtm. Hence the need for +pending_link_deletions+.\n\nNote the subtle difference in case of a has_many. Suppose a Pirate has_many :birds, :autosave => true, and one of the birds in that collection is Tweety. The current behaviour is that you can call +mark_for_destruction+ on the Tweety object, and the bird will be killed when you call pirate.save. However, if you only want to release the bird without killing it, and defer this action until you call pirate.save, then this is currently not possible. The patch I've attached does make this possible.\n\nNote that the +pending_link_deletions+ and +pending_link_creations+ are extremely useful for validation purposes and for re-rendering views in a correct state in case validation fails.\n\n### accepts_nested_attributes_for\n\n+accepts_nested_attributes_for+ only CRUDs model instances. It does not CRUD links between model instances, it happens as a side effect when required. Specifically in the case of habtm I believe its implementation is flawed: it will update the attributes on the other end of the habtm relation or even delete the model instance on the other end. I don't think anyone would ever want to do that. What you want to do is link or unlink to/from a model instance on the other end, not modify it's attributes or destroy it.\n\n### intention of :autosave\n\n> My next question is, should the existing :autosave option be extended with this new behavior \n> or should a new option with a different name be used instead?\n\nA very good question. I believe the intention is the same. :autosave is really about deferring a save until the parent object is saved. That's exactly what I want. However, not only do I want to defer saves of changes to attributes on the other end of a has_many for example, but also I want to defer saves of changes made to what is and what is not included in an association collection.\n\n### rename :autosave ?\n\n> It seems to me like we're doing the exact opposite of automatically saving in this case -- we're \n> actually deferring the automatic save (that would normally happen) until later on.\n> [...]\n> It's not intuitive that :autosave => false would mean \"save immediately\".\n\nI totally agree. I always found the term \"autosave\" confusing. It's about deferring the save until the parent is saved.\n\n> :deferred_save => true\n\nThat would be my preference. But I leave this renaming exercise to another ticket.\n\n### Clarify test\n\nGood suggestion to clarify the test. Will do.\n\n### changes to accepts_nested_attributes_for ?\n\n> What could or should happen to those links?\n\nWhat I mean to explain is that accepts_nested_attributes_for does not allow you to link to an existing object nor does it allow to unlink from an existing object without destroying it.\n\nThe issue is however not with accepts_nested_attributes_for. I view accepts_nested_attributes_for as a sort of macro on top of the :autosave => true feature. I don't really need accepts_nested_attributes_for if all I want is deferred saves. Especially because accepts_nested_attributes_for is geared towards being a helper method for HTML form submissions, but it's unsuitable for e.g. XML or JSON submissions imo.\n\n> Your patch wouldn't even change anything about the way accepts_nested_attributes_for works, would it? \n\nMy patch changes nothing about the way accepts_nested_attributes_for works. All tests for accepts_nested_attributes_for are untouched.\n\nNote that when this patch is accepted it would be logical to add something like accepts_nested_attributes_for that works for linking/unlinking objects. That too is for a different ticket.\n\n> (Does accepts_nested_attributes_for even work with habtm? I don't recall.)\n\nIt does, but as mentioned previously, it's unusable in its current state imo.\n", "created_at": "2011-05-16 03:40:04", "user": 789801, "id": 1170042}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170043", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:32 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:40:05", "user": 789801, "id": 1170043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170044", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 21:11:23 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:40:07", "user": 789801, "id": 1170044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170046", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 11:12:35 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:40:09", "user": 789801, "id": 1170046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170047", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:53 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:40:10", "user": 789801, "id": 1170047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170048", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-21 02:35:53 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:40:12", "user": 789801, "id": 1170048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170049", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:40:14", "user": 789801, "id": 1170049}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170050", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:40:15", "user": 789801, "id": 1170050}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170051", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:40:17", "user": 789801, "id": 1170051}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170052", "text": "Attachments saved to Gist: http://gist.github.com/971667\n", "created_at": "2011-05-16 03:40:19", "user": 789801, "id": 1170052}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3899222", "text": "Hi! I've just noticed (sorry for the delay) this issue has been closed. Does it mean it's fixed (in that case, could someone provide a link to the related commit?), that it won't be fixed, or that it was automatically closed after migrating from lighthouse?\n\nThanks!\n", "created_at": "2012-02-10 00:56:49", "user": 348557, "id": 3899222}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4554\nCreated by **Jeremy Kemper** - 2010-10-31 05:57:56 UTC\n\n`render :text => someproc` used to serve a streaming response. Now it calls `to_s` on the proc.\n\nShould deprecate in favor of setting `self.response_body = ...` directly.\n", "labels": [], "number": 675, "updated_at": "2011-05-16 03:41:46", "user": 789801, "closed_at": "2011-05-16 03:41:46", "id": 904344, "title": "render :text => proc { ... } regression", "url": "https://api.github.com/repos/rails/rails/issues/675", "created_at": "2011-05-16 03:40:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170054", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:32 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:40:25", "user": 789801, "id": 1170054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170055", "text": "_Imported from Lighthouse._\nComment by **Trotter Cashion** - 2010-09-14 00:08:24 UTC\n\nWe (Sean Grieve and myself) _think_ we fixed this in the way you want. We made the patch on the 3-0-stable branch. If that's incorrect, let us know and we'll make it work on master.\n", "created_at": "2011-05-16 03:40:26", "user": 789801, "id": 1170055}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170056", "text": "_Imported from Lighthouse._\nComment by **Lake** - 2010-09-17 03:10:18 UTC\n\nYour patch applies cleanly to master and the tests are passing.\n\n+1\n", "created_at": "2011-05-16 03:40:27", "user": 789801, "id": 1170056}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170057", "text": "_Imported from Lighthouse._\nComment by **jrochkind** - 2010-09-27 15:21:03 UTC\n\nI definitely need streaming response behavior in Rails3. If this is the patch neccessary to get it again, would be awesome if someone committed it.\n", "created_at": "2011-05-16 03:40:29", "user": 789801, "id": 1170057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170058", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:53 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:40:30", "user": 789801, "id": 1170058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170059", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:34:44 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:40:31", "user": 789801, "id": 1170059}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170060", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-10-21 18:28:02 UTC\n\n+1\n", "created_at": "2011-05-16 03:40:33", "user": 789801, "id": 1170060}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170061", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-10-21 18:35:12 UTC\n\nSorry, I need to be more specific. We need to remove the mention \"Tip: if you want to stream large amounts of on-the-fly generated data to the browser, then use render :text => proc { ... } instead. See ActionController::Base#render for more information.\"\n\nhttp://api.rubyonrails.org/classes/ActionController/Streaming.html\n\nAnd we need some alternative to data streaming. Unfortunately, just using \"self.response_body = proc {|response, output| 5.times{output.write 'Testing<br/>'; sleep 1} }\" won't flush, until the end, for instance.\n\nSo, the deprecation warning for the proposed patch is not correct enough yet...\n", "created_at": "2011-05-16 03:40:34", "user": 789801, "id": 1170061}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170062", "text": "_Imported from Lighthouse._\nComment by **Kevin Menard** - 2010-10-30 22:27:20 UTC\n\nRodrigo's point is very good.  I'd go so far as to say the deprecation message is just flat out wrong.  It's not deprecated if the expected behavior is already removed.  And currently there isn't a real way to stream large amounts of generated data.\n", "created_at": "2011-05-16 03:40:35", "user": 789801, "id": 1170062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170064", "text": "_Imported from Lighthouse._\nComment by **blaxter** - 2010-11-08 18:14:33 UTC\n\nRodrigo, adding `output.flush` or `output.write \"Testing\\n\"` you should get the response in the client without any wait.\n", "created_at": "2011-05-16 03:40:37", "user": 789801, "id": 1170064}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170065", "text": "_Imported from Lighthouse._\nComment by **Martin Gogov** - 2010-11-09 11:14:42 UTC\n\n@blaxter\n\nI tried adding `output.flush` but I got an error `undefined method 'flush' for #<ActionDispatch::Response ...>`\n\nActually _format_ and _response_ seem to be the **same** object. Isn't this wrong?\n\nI also tried `output.write \"Something\\n\"` but it also didn't flush and returned the response at the end.\n\nI used wireshark to sniff whether any packets are being sent meanwhile and there was no activity before the final response got sent back. I'm using Webrick but I read that I should try Mongrel to make this work so that's what I'm trying now.\n\nMartin\n", "created_at": "2011-05-16 03:40:38", "user": 789801, "id": 1170065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170066", "text": "_Imported from Lighthouse._\nComment by **Martin Gogov** - 2010-11-09 14:06:00 UTC\n\nSorry for the misformatted previous post.\n\nJust wasted some more hours on checking this:\n\nThe _self.response_body = proc { |resp, output| ... }_ approach with mongrel (webrick didn't work) worked almost fine for me (no need to _output.flush_, there's no such method in my case anyways).\nI'm using _ruby 1.9.2p35_ with _rails 3_.\n\nOne side problem I still haven't worked around though is that with this approach the code in the proc gets executed twice so I have to put an if which skips every other execution to avoid double execution.\n\nAnd still, the _resp_ and _output_ variables point to the **same** object. No idea why.\n\nMartin\n", "created_at": "2011-05-16 03:40:39", "user": 789801, "id": 1170066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170067", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:40:41", "user": 789801, "id": 1170067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170068", "text": "_Imported from Lighthouse._\nComment by **John Firebaugh** - 2010-11-30 21:41:44 UTC\n\nAs Martin alludes to, the proc assigned to `response_body` is mistakenly executed twice. This is because `ActionDispatch::Response` overrides `#body` (defined in `Rack::Response` with `attr_accessor`), and enumerates the body. Thus when `Rack::Response#close` calls `body.close`, a second execution is triggered.\n\nI think that `ActionDispatch::Response` should not override `body`. If it needs to force a string it should define `#body_text` or some other method with a name that makes it clear that it disables streaming.\n\nOn the subject of when or if response data is flushed, as far as I can tell it's entirely up to the Rack handler being used. I can confirm that Mongrel does flush automatically.\n", "created_at": "2011-05-16 03:40:42", "user": 789801, "id": 1170068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170069", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:40:43", "user": 789801, "id": 1170069}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170070", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:40:45", "user": 789801, "id": 1170070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170071", "text": "Attachments saved to Gist: http://gist.github.com/971668\n", "created_at": "2011-05-16 03:40:46", "user": 789801, "id": 1170071}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4594\nCreated by **Justin George** - 2010-05-13 22:37:30 UTC\n\nThe use case here is essentially for callback-esque use cases - we want to note when a sql transaction has begun, and when it has ended, as seperate events.\n\nA use case for this is to notice when sql queries are hanging, or for noticing which order queries are starting in without reference to their final length.\n\n```\nActiveSupport::Notifications.subscribe(/sql.active_record/) do |name, *args|\n  @events << name\nend\n\nActiveSupport::Notifications.instrument_with_start('sql.active_record', {:some => 'payload'}) do\n  # query logic\nend\n\n@events.inspect #=> ['sql.active_record.start', 'sql.active_record']\n```\n\nOpen to suggestions on what to call it, and how it should work.\n", "labels": [], "number": 676, "updated_at": "2011-05-16 03:41:41", "user": 789801, "closed_at": "2011-05-16 03:41:41", "id": 904345, "title": "Add methods for including start events with notified actions", "url": "https://api.github.com/repos/rails/rails/issues/676", "created_at": "2011-05-16 03:40:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170072", "text": "_Imported from Lighthouse._\nComment by **Justin George** - 2010-05-13 22:40:15 UTC\n\nPatch attached\n", "created_at": "2011-05-16 03:40:52", "user": 789801, "id": 1170072}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170073", "text": "_Imported from Lighthouse._\nComment by **Rizwan Reza** - 2010-05-17 19:08:11 UTC\n\n+1 Verified. This patch applies cleanly and all tests pass.\n", "created_at": "2011-05-16 03:40:53", "user": 789801, "id": 1170073}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170074", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-17 19:47:27 UTC\n\nJustin, we should always fire start events. Could you merge this with `instrument` rather than introduce a new API?\n", "created_at": "2011-05-16 03:40:54", "user": 789801, "id": 1170074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170075", "text": "_Imported from Lighthouse._\nComment by **Justin George** - 2010-05-17 20:40:39 UTC\n\nThere's a couple situations where you don't want it, !render_template.action_view being the main one where 1000s of calls may be mode.\n\nI will rename the old instrument method to be instrument_without_start, or something like that, yes? Or make it take an optional parameter? I'm not sure which is the proper way.\n\n```\ndef instrument(event, payload={})\n  ...\nend\n\ndef instrument_without_start(event, payload={})\n  ...\nend\n```\n\nversus\n\n```\ndef instrument(event, payload={}, start=true)\n  @notifier.publish(...) if start\n  ...\nend\n```\n\nThanks for the feedback, I was less sure about this change.\n", "created_at": "2011-05-16 03:40:56", "user": 789801, "id": 1170075}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170076", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-05-21 19:43:23 UTC\n\n(from [f3abc8ac36055afed9fcc902c33ee146e066d17a]) Use multibyte proxy class on 1.9, refactor Unicode.\n\nMakes String#mb_chars on Ruby 1.9 return an instance of ActiveSupport::Multibyte::Chars to work around 1.9's lack of Unicode case folding.\n\nRefactors class methods from ActiveSupport::Multibyte::Chars into new Unicode module, adding other related functionality for consistency.\n\n[#4594 state:resolved]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\nhttp://github.com/rails/rails/commit/f3abc8ac36055afed9fcc902c33ee146e066d17a\n", "created_at": "2011-05-16 03:40:57", "user": 789801, "id": 1170076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170077", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-05-25 21:19:38 UTC\n\nIncorrectly resolved.\n", "created_at": "2011-05-16 03:40:59", "user": 789801, "id": 1170077}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170078", "text": "_Imported from Lighthouse._\nComment by **Justin George** - 2010-05-26 00:19:05 UTC\n\nOkay, here we are, after a brief hiatus, a proper patch for this.\n\nI think that the case I was worrying about before (!render_template) is not that big a deal - if it's a problem we can fix it later.\n", "created_at": "2011-05-16 03:41:00", "user": 789801, "id": 1170078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170079", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-06-17 06:16:18 UTC\n\nJustin, this patch doesn't apply any more to Rails master. Can you fix it?\n", "created_at": "2011-05-16 03:41:01", "user": 789801, "id": 1170079}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170081", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:32 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:41:03", "user": 789801, "id": 1170081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170082", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:53 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:41:04", "user": 789801, "id": 1170082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170083", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:12 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:41:05", "user": 789801, "id": 1170083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170084", "text": "_Imported from Lighthouse._\nComment by **Roger Leite** - 2011-01-04 19:08:46 UTC\n\nHi, I made a fix to this patch.\nCan you please check if it's ok ?\n", "created_at": "2011-05-16 03:41:07", "user": 789801, "id": 1170084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170085", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-02-04 22:43:59 UTC\n\nRobert's patch currently applies cleanly to master (despite a trailing whitespace warning), with all tests passing\n", "created_at": "2011-05-16 03:41:08", "user": 789801, "id": 1170085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170086", "text": "Attachments saved to Gist: http://gist.github.com/971669\n", "created_at": "2011-05-16 03:41:12", "user": 789801, "id": 1170086}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4598\nCreated by **David Chelimsky** - 2010-11-08 23:12:00 UTC\n\nIn working on #4583, Brian and I discovered some inconsistent behavior. Here are a couple of tests that _should_ both behave the same way, but one passes and one fails:\n\nhttp://github.com/dchelimsky/rails/commit/6180043572ff30a2e01690b86ae385e792847143\n\n``` ruby\nrequire \"cases/helper\"\nrequire 'models/developer'\n\nclass ArelBugTest < ActiveRecord::TestCase\n  fixtures :developers\n\n  # We would expect both to pass or both to fail, but one passes and one fails.\n\n  # fails\n  def test_default_scope_called_twice_with_relations\n    klass = Class.new(Developer)\n    klass.class_eval do \n      default_scope where(:name => 'David')\n      default_scope where(:name => 'Jamis')\n    end\n    assert_equal [\"Jamis\"], klass.all.map(&:name).uniq.sort\n  end\n\n  # passes\n  def test_default_scope_called_twice_with_hashes\n    klass = Class.new(Developer)\n    klass.class_eval do \n      default_scope :conditions => { :name => 'David' }\n      default_scope :conditions => { :name => 'Jamis' }\n    end\n    assert_equal [\"Jamis\"], klass.all.map(&:name).uniq.sort\n  end\nend\n```\n", "labels": [], "number": 677, "updated_at": "2011-05-16 03:42:16", "user": 789801, "closed_at": "2011-05-16 03:42:15", "id": 904348, "title": "default_scope treats hashes and relations inconsistently when overwriting", "url": "https://api.github.com/repos/rails/rails/issues/677", "created_at": "2011-05-16 03:41:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170087", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-05-15 03:41:27 UTC\n\nIn the first test case where relation is being passed the sql query is being built something like this.\n\n<pre>\n> us = User.unscoped;\n>   us=us.merge(User.where(:name => 'David'));\n>   us=us.merge(User.where(:name => 'Jamis'));\n>   us.to_sql\n => \"SELECT     \\\"users\\\".* FROM       \\\"users\\\" WHERE     (\\\"users\\\".\\\"name\\\" = 'Jamis')\"\n</pre>\n\n\nIn the second case where hash is being passed the sql query is being built something like this.\n\n<pre>\n> us = User.unscoped;\n> us = us.where(:name => 'David');\n> us = us.where(:name => 'Jamis');\n> us.to_sql\n  => \"SELECT     \\\"users\\\".* FROM       \\\"users\\\" WHERE     (\\\"users\\\".\\\"name\\\" = 'David') AND (\\\"users\\\".\\\"name\\\" = 'Jamis')\" \n</pre>\n\n\nBefore I suggest a fix, I would like to know what direction to proceed. \n\nBased on ticket #4583 I should assume that the desired behavior should be the second sql so that one can pass more than one default_scope and all the conditions passed should be ANDed to build the final sql.\n", "created_at": "2011-05-16 03:41:19", "user": 789801, "id": 1170087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170088", "text": "_Imported from Lighthouse._\nComment by **David Chelimsky** - 2010-05-15 03:56:11 UTC\n\nI would expect the same column to get ORed (an IN clause) and different columns to get ANDed:\n\n``` ruby\nuser = User.unscoped\nuser = user.where(:name => 'David')\nuser = user.where(:name => 'Jamis')\nuser = user.where(:role => 'admin')\nuser.to_sql\n=> SELECT \\\"users\\\".* FROM \\\"users\\\" WHERE (\\\"users\\\".\\\"name\\\" in ('David','Jamis')) AND (\\\"users\\\".\\\"role\\\" = 'admin')\n```\n\nAgree?\n", "created_at": "2011-05-16 03:41:21", "user": 789801, "id": 1170088}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170089", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-05-15 15:36:56 UTC\n\n+1 Agree! i will try a fix\n", "created_at": "2011-05-16 03:41:23", "user": 789801, "id": 1170089}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170090", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-05-15 20:45:04 UTC\n\nTest added here, i don't know if we should test this kind of things or fix in Arel and rely on his behavior.\nAnyways i add the test case only for now.\nI'm going to patch it.\n", "created_at": "2011-05-16 03:41:24", "user": 789801, "id": 1170090}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170091", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-05-16 00:17:29 UTC\n\nAttached is a code patch.\n\n@Santiago thanks for the test.\n", "created_at": "2011-05-16 03:41:26", "user": 789801, "id": 1170091}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170092", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-08-04 10:47:35 UTC\n\nThe test still fails in 3-0-stable.\n\n```\n  1) Failure:\ntest_find_all_using_where_twice_should_or_the_relation(RelationTest) [test/cases/relations_test.rb:655]:\n<[#<Author id: 1, name: \"David\", author_address_id: 1, author_address_extra_id: 2>]> expected but was\n<[]>.\n```\n\nHowever the patch provided by Neeraj doesn't apply any more so I couldn't check if it solves the problem.\n", "created_at": "2011-05-16 03:41:28", "user": 789801, "id": 1170092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170093", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-08-04 12:55:58 UTC\n\nI applied Neeraj's patch manually and it made the test pass. Here is a combined patch for 3-0-stable with both the test and fix. Tests are passing.\n", "created_at": "2011-05-16 03:41:29", "user": 789801, "id": 1170093}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170094", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:41:31", "user": 789801, "id": 1170094}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170095", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:53 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:41:33", "user": 789801, "id": 1170095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170097", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-11-18 01:14:52 UTC\n\n(from [fdc591351e5a231c4da47a4b363e961ae89cc864]) collapsing same table / column WHERE clauses to be OR [#4598 state:resolved]\nhttps://github.com/rails/rails/commit/fdc591351e5a231c4da47a4b363e961ae89cc864\n", "created_at": "2011-05-16 03:41:35", "user": 789801, "id": 1170097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170098", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-11-18 01:14:55 UTC\n\n(from [00693209ecc222842949d7cab076f89890cbd507]) collapsing same table / column WHERE clauses to be OR [#4598 state:resolved]\nhttps://github.com/rails/rails/commit/00693209ecc222842949d7cab076f89890cbd507\n", "created_at": "2011-05-16 03:41:37", "user": 789801, "id": 1170098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170099", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2011-02-16 17:27:51 UTC\n\nhttp://groups.google.com/group/rubyonrails-core/browse_thread/thread/407f746fd1de6636\n\nThis inconsistency seems ok in context: second hash condition overwrites the first, whereas the second .where relation ANDs on to it.\n", "created_at": "2011-05-16 03:41:38", "user": 789801, "id": 1170099}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170100", "text": "_Imported from Lighthouse._\nComment by **David Chelimsky** - 2011-02-17 07:56:05 UTC\n\nFWIW, I think that having to know that the .where and conditions work differently is confusing and puts an unnecessary burden on users, even if everything is visible in the same context. In our case, we broke the behavior of a gem by adding conditions to the default scope in a model, so we didn't have all the context in one place. Having conditions and .where work differently made it all the more confusing, which is why I submitted this ticket in the first place.\n", "created_at": "2011-05-16 03:41:40", "user": 789801, "id": 1170100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170101", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2011-02-24 02:03:23 UTC\n\nI think what we need to do is change this to do an AND in both cases for Rails 3.1.  I don't like that we change it to an OR when combining _only certain columns_.  It's like we're tying to read the user's mind, and I am terrible at mind reading.\n", "created_at": "2011-05-16 03:41:42", "user": 789801, "id": 1170101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170102", "text": "Attachments saved to Gist: http://gist.github.com/971670\n", "created_at": "2011-05-16 03:41:44", "user": 789801, "id": 1170102}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170113", "text": "Fixed on master.\n", "created_at": "2011-05-16 03:42:15", "user": 9582, "id": 1170113}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4662\nCreated by **dalyons** - 2011-02-08 12:16:09 UTC\n\nThis is my first ticket, so be gentle :)\n\nSummary: when I use `:include` on a `has_and_belongs_to_many` association, it causes `collection_singular_ids` to fail with **ActiveRecord::MissingAttributeError**.\n\nRails v2.3.5\n### Code:\n\n_classes_\n\n``` ruby\nclass Product < ActiveRecord::Base\n  has_and_belongs_to_many :vendors, :include => :state\nend\n\nclass Vendor < ActiveRecord::Base\n  has_and_belongs_to_many :products\n  belongs_to :state\nend\n\nclass State < ActiveRecord::Base\n  has_many :vendors\nend\n```\n\n_Failing code:_\n\n``` ruby\nv = Vendor.create\np = Product.create\np.vendors << v\np.vendor_ids  #works as expected, returns [v.id]\n\nProduct.find(p.id).vendor_ids         #re-fetch the product and try again\n**ActiveRecord::MissingAttributeError: missing attribute: state_id**\n\np = Product.find(p.id)\np.vendors               #force an association load\np.vendor_ids            #works as expected, returns [v.id]\n\n```\n### backtrace\n\n```\n>>Product.find(p.id).vendor_ids\nActiveRecord::MissingAttributeError: missing attribute: state_id\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:309:in `send'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:309:in `preload_belongs_to_association'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:308:in `each'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:308:in `preload_belongs_to_association'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:120:in `send'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:120:in `preload_one_association'\n    from /usr/lib/ruby/gems/1.8/gems/activesupport-2.3.5/lib/active_support/ordered_hash.rb:97:in `each'\n    from /usr/lib/ruby/gems/1.8/gems/activesupport-2.3.5/lib/active_support/ordered_hash.rb:97:in `each'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:114:in `preload_one_association'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:91:in `preload_associations'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:90:in `preload_associations'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:90:in `each'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/association_preload.rb:90:in `preload_associations'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:1550:in `find_every'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:615:in `find'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:635:in `all'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/associations/association_collection.rb:380:in `send'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/associations/association_collection.rb:380:in `method_missing'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/base.rb:2143:in `with_scope'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/associations/association_proxy.rb:206:in `send'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/associations/association_proxy.rb:206:in `with_scope'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/associations/association_collection.rb:376:in `method_missing'\n    from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.5/lib/active_record/associations.rb:1313:in `vendor_ids'\n    from (irb):14>> \n```\n\nIt only occurs if you try and access the `vendor_ids` property before the `vendors` association collection has been loaded(eg by accessing that property)\n\nI just tested that code with a new, clean 2.3.5 app with just the classes above, and I get the errors as described.\nI can work around it by not using the :include option, but I thought id record it here as I couldn't find any info on this behaviour anywhere else on the net.\n\nIf i need to include any other info please let me know!\n", "labels": [], "number": 678, "updated_at": "2011-05-21 15:12:01", "user": 789801, "closed_at": "2011-05-21 15:12:01", "id": 904349, "title": "Habtm collection_singular_ids bug with :include", "url": "https://api.github.com/repos/rails/rails/issues/678", "created_at": "2011-05-16 03:41:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170103", "text": "_Imported from Lighthouse._\nComment by **Craig S Walker** - 2010-11-26 21:13:04 UTC\n\nI've hit this error too; same stack trace, same conditions, same version of Rails.\n", "created_at": "2011-05-16 03:41:50", "user": 789801, "id": 1170103}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170104", "text": "_Imported from Lighthouse._\nComment by **Brian Racer** - 2011-05-07 20:40:22 UTC\n\nThis issue does not apply to Rails 3.0.x/3.1.x\n", "created_at": "2011-05-16 03:41:52", "user": 789801, "id": 1170104}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4686\nCreated by **Luiz Aguiar** - 2011-02-19 09:28:19 UTC\n\n$ script/plugin install --verbose http://github.com/rails/rails_xss.git\nPlugin not found: [\"http://github.com/rails/rails_xss.git\"]\n\nMac\nRails 2.3.8\ngit version 1.7.0\n$ ruby -v\nruby 1.8.7 (2010-01-10 patchlevel 249) [i686-darwin10]\n", "labels": [], "number": 679, "updated_at": "2011-05-16 03:44:05", "user": 789801, "closed_at": "2011-05-16 03:44:05", "id": 904350, "title": "rails_xss plugin not found on install", "url": "https://api.github.com/repos/rails/rails/issues/679", "created_at": "2011-05-16 03:41:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170105", "text": "_Imported from Lighthouse._\nComment by **Anil Wadghule** - 2010-05-25 07:28:33 UTC\n\nThis is an issue with rails 2.3.5 too. Try without --verbose, it should work.\n", "created_at": "2011-05-16 03:41:59", "user": 789801, "id": 1170105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170106", "text": "_Imported from Lighthouse._\nComment by **Luiz Aguiar** - 2010-05-25 13:13:11 UTC\n\nWithout --verbose, the install stay \"running\" for minutes, and don't install the plugin.\nI tried to install others plugins and just work.\n", "created_at": "2011-05-16 03:42:01", "user": 789801, "id": 1170106}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170107", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-05-25 14:53:12 UTC\n\nscript/plugin install git://github.com/rails/rails_xss.git should work.\n--verbose is failing yes, seems like a bug.\n", "created_at": "2011-05-16 03:42:02", "user": 789801, "id": 1170107}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170108", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-05-26 08:35:53 UTC\n\nSame problem on master:\n\n```\n$ script/rails plugin install git://github.com/rails/rails_xss.git --verbose\nPlugin not found: []\n```\n\nIt doesn't seem to have to do anything with rails_xss, though. I get exactly the same when I try to install Paperclip as a plugin, so `--verbose` is the problem here.\n\nCan somebody change the ticket name? \"Plugin install with fails with --verbose option\" seems like a better fit. :)\n", "created_at": "2011-05-16 03:42:03", "user": 789801, "id": 1170108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170109", "text": "_Imported from Lighthouse._\nComment by **≈Åukasz Strza≈Çkowski** - 2010-07-09 19:07:36 UTC\n\nThe problem is with order of params, not with verbose options it self.\n\nIf you invoke:\n\n```\n\nstrzalek@imac-strzalek ~/projects/ruby/rails_sandbox ‚ûî script/rails plugin --verbose install git://github.com/rails/rails_xss.git\nPlugins will be installed using http\ngit init\nInitialized empty Git repository in /Users/strzalek/projects/ruby/rails_sandbox/vendor/plugins/rails_xss/.git/\ngit pull --depth 1 git://github.com/rails/rails_xss.git\nremote: Counting objects: 33, done.\nremote: Compressing objects: 100% (32/32), done.\nremote: Total 33 (delta 5), reused 3 (delta 0)\nUnpacking objects: 100% (33/33), done.\nFrom git://github.com/rails/rails_xss\n * branch            HEAD       -> FETCH_HEAD\nremoving: .git .gitignore\n```\n\nIt will work without problems. But when I execute command with --verbose at the end, then I'm also encountering errors:\n\n```\nstrzalek@imac-strzalek ~/projects/ruby/rails_sandbox ‚ûî script/rails plugin install git://github.com/rails/rails_xss.git --verbose\nPlugin not found: []\n```\n\nActually it's even not an error.\n", "created_at": "2011-05-16 03:42:05", "user": 789801, "id": 1170109}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170110", "text": "_Imported from Lighthouse._\nComment by **chaitanyav** - 2010-07-10 05:19:12 UTC\n\n@lukasz as you said , I tried this\n\n```\nneo@myhost ~/p/awesome> \nrails plugin --verbose install  git://github.com/rails/rails_xss.git\n\"install\"\nPlugins will be installed using http\ngit init\nInitialized empty Git repository in /home/neo/projects/awesome/vendor/plugins/rails_xss/.git/\ngit pull --depth 1 git://github.com/rails/rails_xss.git\nremote: Counting objects: 33, done.\nremote: Compressing objects: 100% (32/32), done.\nremote: Total 33 (delta 5), reused 3 (delta 0)\nUnpacking objects: 100% (33/33), done.\nFrom git://github.com/rails/rails_xss\n * branch            HEAD       -> FETCH_HEAD\nremoving: .git .gitignore\n```\n\nNow, I will remove the plugin\n\n```\nneo@myhost ~/p/awesome> \nrails plugin --verbose remove  git://github.com/rails/rails_xss.git\n\"remove\"\nRemoving 'vendor/plugins/rails_xss'\n```\n\n## I hacked the rails gem to find out what is actually happening in the code. I changed this file railties-3.0.0.beta4/lib/rails/commands/plugin.rb\n\n## BTW, I added \"p e.message\" after line 422.\n\nI will add the --verbose at the end\n\n```\nrails plugin  install git://github.com/rails/rails_xss.git --verbose\n\"invalid option: --verbose\"\nPlugin not found: []\n```\n\none more try\n\n```\nneo@myhost ~/p/awesome> \nrails plugin  install git://github.com/rails/rails_xss.git --quiet\n```\n\nAccording to the code --verbose at the end is a invalid option\n\nThe command can be used in the following ways\n\n<pre>\nneo@myhost ~/p/awesome> rails plugin\nUnknown command: \nUsage: plugin [OPTIONS] command\nRails plugin manager.\nGENERAL OPTIONS\n  -r, --root=DIR                   Set an explicit rails app directory. Default: /home/neo/projects/awesome\n  -s, --source=URL1,URL2           Use the specified plugin repositories instead of the defaults.\n  -v, --verbose                    Turn on verbose output.\n  -h, --help                       Show this help message.\nCOMMANDS\n  install    Install plugin(s) from known repositories or URLs.\n  remove     Uninstall plugins.\nEXAMPLES\n  Install a plugin:\n  rails plugin install continuous_builder\n  Install a plugin from a subversion URL:\n  rails plugin install http://dev.rubyonrails.com/svn/rails/plugins/continuous_builder\n  Install a plugin from a git URL:\n  rails plugin install git://github.com/SomeGuy/my_awesome_plugin.git\n  Install a plugin and add a svn:externals entry to vendor/plugins\n  rails plugin install -x continuous_builder\n</pre>\n\n\nOR\n\n<pre>\nneo@myhost ~/p/awesome> \nrails plugin  install git://github.com/rails/rails_xss.git --help\nUsage: rails install PLUGIN [PLUGIN [PLUGIN] ...]\nInstall one or more plugins.\nOptions:\n  -x, --externals                  Use svn:externals to grab the plugin.Enables plugin updates and plugin versioning.\n  -o, --checkout                   Use svn checkout to grab the plugin.Enables updating but does not add a svn:externals entry.\n  -e, --export                     Use svn export to grab the plugin.Exports the plugin, allowing you to check it into your local repository. Does not enable updates, or add an svn:externals entry.\n  -q, --quiet                      Suppresses the output from installation.Ignored if -v is passed (rails plugin -v install ...)\n  -r, --revision REVISION          Checks out the given revision from subversion or git.Ignored if subversion/git is not used.\n  -f, --force                      Reinstalls a plugin if it's already installed.\n\nYou can specify plugin names as given in 'plugin list' output or absolute URLs to \na plugin repository.\n</pre>\n\n\n### please verify this\n", "created_at": "2011-05-16 03:42:06", "user": 789801, "id": 1170110}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4699\nCreated by **hello (at convandesign)** - 2011-03-31 09:38:04 UTC\n\nIt seems that those two callbacks have been removed from the activerecords callbacks. Have they've been replaced some how? I've looked into the source code and couldn't figure it out.\n", "labels": [], "number": 680, "updated_at": "2011-10-15 12:58:12", "user": 789801, "closed_at": "2011-05-16 03:43:57", "id": 904351, "title": "before_validation_on_create and before_validation_on_update doesn't exist", "url": "https://api.github.com/repos/rails/rails/issues/680", "created_at": "2011-05-16 03:42:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170111", "text": "_Imported from Lighthouse._\nComment by **hello (at convandesign)** - 2010-05-26 04:40:04 UTC\n\nthis is from the beta 3.0 branch....\n", "created_at": "2011-05-16 03:42:13", "user": 789801, "id": 1170111}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170112", "text": "_Imported from Lighthouse._\nComment by **ddelco** - 2010-06-06 00:37:10 UTC\n\nAny answers on this? activerecord/lib/active_record/callbacks.rb still references `_on_create` and `_on_update` validations in the documentation, but they don't seem to be there anymore.\n", "created_at": "2011-05-16 03:42:14", "user": 789801, "id": 1170112}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170114", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-07 20:56:32 UTC\n\nbefore_validation_on_create and before_validation_on_update methods are available. The syntax has changed.\n\n``` ruby\n  before_validation(:on => :create){ do_something }\n  before_validation(:on => :update){ do_something }\n```\n\nYes the documentation needs to be updated.\n", "created_at": "2011-05-16 03:42:16", "user": 789801, "id": 1170114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170115", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-06-08 01:35:40 UTC\n\nDone http://github.com/lifo/docrails/commit/100f8b2dfc9d547b23804b648ad0dba748faa99b\n", "created_at": "2011-05-16 03:42:17", "user": 789801, "id": 1170115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170116", "text": "_Imported from Lighthouse._\nComment by **david.a.williams (at gmail)** - 2010-06-16 01:42:03 UTC\n\nIt's not completely resolved. The paragraph directly above the committed change also needs work. It currently says:\n\n\"That‚Äôs a total of ten callbacks, which gives you immense power to react and prepare for each state in the Active Record lifecycle. The sequence for calling Base#save for an existing record is similar, except that each _on_create callback is replaced by the corresponding _on_update callback.\"\n\nExcept that this is the first mention of _on_create and _on_update, and they don't actually exist anymore. More information would be useful. For instance, is it possible to use the \":on\" option and also pass a symbol, or is the block form the only one supported?\n", "created_at": "2011-05-16 03:42:18", "user": 789801, "id": 1170116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170117", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-16 04:03:45 UTC\n\nAnyone can make changes to http://github.com/lifo/docrails . So please go ahead and make the necessary changes to the documentation.\n", "created_at": "2011-05-16 03:42:19", "user": 789801, "id": 1170117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170118", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-16 05:11:52 UTC\n\nDid not mean to clear tag. Not sure why tag got cleared.\n", "created_at": "2011-05-16 03:42:21", "user": 789801, "id": 1170118}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170119", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:54 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:42:22", "user": 789801, "id": 1170119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170120", "text": "_Imported from Lighthouse._\nComment by **Matt Buck** - 2011-02-08 19:49:55 UTC\n\nLooks like David's comment above was resolved by https://github.com/lifo/docrails/commit/5a6f651a6a093f69f00fa713648213fb86748297\n\nI'm looking at clarifying this documentation a bit, but I'm confused by the new callback system. The documentation still refers to overriding methods like `before_destroy`, but the examples look like these methods are now meant to be invoked rather than overridden. If somebody can point me in the right direction, I'll commit a fix.\n", "created_at": "2011-05-16 03:42:23", "user": 789801, "id": 1170120}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170121", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-03-31 00:10:58 UTC\n\nI also could use some clarification on the documentation. Is this form allowed?\n\n``` ruby\nbefore_validation :do_something, :on => :create\n```\n\n[state:open]\n\nAs a side note, it would make upgrading from Rails 2 to Rails 3 easier if this were more clearly documented or simply backwards compatible with Rails 2 applications using `before_validation_on_create` etc.\n", "created_at": "2011-05-16 03:42:25", "user": 789801, "id": 1170121}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2415373", "text": "Just a heads-up to anyone stumbling onto this issue:\n\nYes, you can use\n\n``` Ruby\nbefore_validation :do_something, :on => :create\n```\n\nor\n\n``` Ruby\nbefore_validation :do_something, on: :update\n```\n", "created_at": "2011-10-15 12:58:11", "user": 383250, "id": 2415373}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4759\nCreated by **August Lilleaas** - 2011-02-14 07:28:36 UTC\n\nHere's the current flow.\n\n```\n** Invoke test:units (first_time)\n** Invoke test:prepare (first_time)\n** Invoke db:test:prepare (first_time)\n** Invoke db:abort_if_pending_migrations (first_time)\n** Invoke environment (first_time)\n** Execute environment\n==> [config/environments/development.rb loads here] <==\n** ultrasphinx: configuration file not found for \"development\" environment\n** ultrasphinx: please run 'rake ultrasphinx:configure'\n** ultrasphinx: spelling support not available (raspell configuration raised \"uninitialized constant Ultrasphinx::Spell::Aspell\")\n** Execute db:abort_if_pending_migrations\n** Execute db:test:prepare\n** Invoke db:test:load (first_time)\n** Invoke db:test:purge (first_time)\n** Invoke environment \n** Execute db:test:purge\n** Execute db:test:load\n** Invoke db:schema:load (first_time)\n** Invoke environment \n** Execute db:schema:load\n** Execute test:prepare\n** Execute test:units\n==> [config/environment.rb loads here] <==\n==> [config/environments/test.rb loads here] <==\nLoaded suite /home/augustl/.rvm/gems/ruby-1.8.7-p249@global/gems/rake-0.8.7/lib/rake/rake_test_loader\nStarted\n......................................\n```\n\nThe data for the bracketed annotations were found by adding `puts` statements to those files.\n\nThis becomes more of a problem the longer the environment takes to load. For example, [the rails3 branch of gitorious.org](http://gitorious.org/gitorious/mainline/commits/rails3) takes 20-25 seconds to load because of the high number of routes (which I will probably file a separate issue for - that's a long time!). [Here](http://ditrw.com/_dump/gitorious_rake_routes.txt) (and attached) is the output of `rake routes`. Having to wait about a minute for the tests to start running makes TDD rather tedious.\n", "labels": [], "number": 681, "updated_at": "2011-05-16 03:45:13", "user": 789801, "closed_at": "2011-05-16 03:45:13", "id": 904353, "title": "`rake test(:functionals|:units|....)` loads the environment twice", "url": "https://api.github.com/repos/rails/rails/issues/681", "created_at": "2011-05-16 03:42:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170122", "text": "_Imported from Lighthouse._\nComment by **Daniel Abrahamsson** - 2010-12-16 11:27:14 UTC\n\nI'm facing the same issue with running my tests, due to the double loading of the environment.What is the reason that the environment is loaded twice?\n", "created_at": "2011-05-16 03:42:32", "user": 789801, "id": 1170122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170123", "text": "_Imported from Lighthouse._\nComment by **Roger Leite** - 2011-02-16 10:36:12 UTC\n\nI tested with rails 3.0.4, created an empty application and scaffold of users.\nWith a \"puts\" in _config/environment.rb_, i did:\n\n`rake test -t`\n<code>\n(in /home/roger/dev/trivial/temp/raketest)\n*\\* Invoke test (first_time)\n*\\* Execute test\n*\\* Invoke test:units (first_time)\n*\\* Invoke test:prepare (first_time)\n*\\* Invoke db:test:prepare (first_time)\n*\\* Invoke db:abort_if_pending_migrations (first_time)\n*\\* Invoke environment (first_time)\n*\\* Execute environment\nENV LOADED !\n*\\* Execute db:abort_if_pending_migrations\n*\\* Execute db:test:prepare\n*\\* Invoke db:test:load (first_time)\n*\\* Invoke db:test:purge (first_time)\n*\\* Invoke environment \n*\\* Execute db:test:purge\n*\\* Execute db:test:load\n*\\* Invoke db:schema:load (first_time)\n*\\* Invoke environment \n*\\* Execute db:schema:load\n*\\* Execute test:prepare\n*\\* Execute test:units\nENV LOADED !\nLoaded suite /home/roger/.rvm/gems/ruby-1.8.7-p330@global/gems/rake-0.8.7/lib/rake/rake_test_loader\nStarted\n.\nFinished in 0.027144 seconds.\n\n1 tests, 1 assertions, 0 failures, 0 errors\n*\\* Invoke test:functionals (first_time)\n*\\* Invoke test:prepare \n*\\* Execute test:functionals\nENV LOADED !\nLoaded suite /home/roger/.rvm/gems/ruby-1.8.7-p330@global/gems/rake-0.8.7/lib/rake/rake_test_loader\nStarted\n.......\nFinished in 0.171518 seconds.\n\n7 tests, 10 assertions, 0 failures, 0 errors\n*\\* Invoke test:integration (first_time)\n*\\* Invoke test:prepare \n*\\* Execute test:integration\n</code>\n\nI tried to test with rails edge too (changing Gemfile to use `gem 'rails', :git => 'git://github.com/rails/rails.git'`), and i got an error:\n\n<code>\n(in /home/roger/dev/trivial/temp/raketest)\n*\\* Invoke test (first_time)\n*\\* Execute test\n*\\* Invoke test:units (first_time)\n*\\* Invoke test:prepare (first_time)\n*\\* Invoke db:test:prepare (first_time)\n*\\* Invoke db:abort_if_pending_migrations (first_time)\n*\\* Invoke environment (first_time)\n*\\* Execute environment\n*\\* Invoke test:functionals (first_time)\n*\\* Invoke test:prepare \n*\\* Execute test:functionals\n/home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/actionpack/lib/action_dispatch/middleware/session/abstract_store.rb:23: uninitialized constant Rack::Session::Abstract::SessionHash (NameError)\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/actionpack/lib/action_dispatch/middleware/session/cookie_store.rb:3\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/application/configuration.rb:116:in `const_get'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/application/configuration.rb:116:in`session_store'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/application.rb:166:in `default_middleware_stack'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/application.rb:146:in`tap'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/application.rb:146:in `default_middleware_stack'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/engine.rb:412:in`build_middleware_stack'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/application/finisher.rb:37\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/initializable.rb:25:in `instance_exec'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/initializable.rb:25:in`run'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/initializable.rb:50:in `run_initializers'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/initializable.rb:49:in`each'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/initializable.rb:49:in `run_initializers'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/application.rb:93:in`initialize!'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/railtie/configurable.rb:28:in `send'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@rails-edge/bundler/gems/rails-8276a240207a/railties/lib/rails/railtie/configurable.rb:28:in`method_missing'\n    from /home/roger/dev/trivial/temp/raketest/config/environment.rb:5\n    from ./test/test_helper.rb:2:in `require'\n    from ./test/test_helper.rb:2\n    from ./test/functional/users_controller_test.rb:1:in`require'\n    from ./test/functional/users_controller_test.rb:1\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@global/gems/rake-0.8.7/lib/rake/rake_test_loader.rb:5:in `load'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@global/gems/rake-0.8.7/lib/rake/rake_test_loader.rb:5\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@global/gems/rake-0.8.7/lib/rake/rake_test_loader.rb:5:in`each'\n    from /home/roger/.rvm/gems/ruby-1.8.7-p330@global/gems/rake-0.8.7/lib/rake/rake_test_loader.rb:5\n*\\* Invoke test:integration (first_time)\n*\\* Invoke test:prepare \n*\\* Execute test:integration\nErrors running test:units, test:functionals!\n</code>\n", "created_at": "2011-05-16 03:42:33", "user": 789801, "id": 1170123}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170124", "text": "_Imported from Lighthouse._\nComment by **Roger Leite** - 2011-02-16 10:43:07 UTC\n\n**Trying to clean the previous message**\n\nI tested with rails 3.0.4, created an empty application and scaffold of users.\nWith a \"puts\" in config/environment.rb, i did:\n\n`rake test -t`\n\nI tried to test with rails edge too (changing Gemfile to use gem 'rails', :git => 'git://github.com/rails/rails.git'), and i got an error.\n\nPut the output at gist: https://gist.github.com/829168\n", "created_at": "2011-05-16 03:42:34", "user": 789801, "id": 1170124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170125", "text": "_Imported from Lighthouse._\nComment by **Roger Leite** - 2011-02-16 10:56:15 UTC\n\nLooking at source, i realized two things:\n1. https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L91 Rails, raises exception if application is already initialized.\n2. Task test ( https://github.com/rails/rails/blob/master/railties/lib/rails/test_unit/testing.rake#L75 ) invokes \"test:units test:functionals test:integration\". I think they are running in different process.\n\nSomebody can help me ?\n", "created_at": "2011-05-16 03:42:36", "user": 789801, "id": 1170125}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170126", "text": "_Imported from Lighthouse._\nComment by **Christopher Meiklejohn** - 2011-03-03 04:37:05 UTC\n\nHi Roger,\n\nI'm not running into any problems running the test suite on the rails master branch -- can you try doing this again? \n\nThanks,\nChris\n", "created_at": "2011-05-16 03:42:37", "user": 789801, "id": 1170126}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170127", "text": "_Imported from Lighthouse._\nComment by **Christopher Meiklejohn** - 2011-03-03 05:18:54 UTC\n\nRoger, \n\nKeep in mind if you are running edge rails, you need to be running edge rack as well, which is probably why you are getting the SessionHash error.\n", "created_at": "2011-05-16 03:42:38", "user": 789801, "id": 1170127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170128", "text": "_Imported from Lighthouse._\nComment by **Roger Leite** - 2011-03-03 14:42:03 UTC\n\nI didn't know about edge rack ...\nSorry for the false positive.\n\nThanks for the tip Christopher! It worked.\n", "created_at": "2011-05-16 03:42:40", "user": 789801, "id": 1170128}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170129", "text": "Attachments saved to Gist: http://gist.github.com/971671\n", "created_at": "2011-05-16 03:42:41", "user": 789801, "id": 1170129}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170217", "text": "Yeah, afaik there is nothing we can do to fix here.\n", "created_at": "2011-05-16 03:45:12", "user": 9582, "id": 1170217}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4762\nCreated by **Jan Berkel** - 2011-01-13 06:52:10 UTC\n\nThe rdoc for url_for in actionpack/lib/action_view/helpers/url_helper.rb states:\n\n``` ruby\n   url_for(:action => 'checkout', :anchor => 'tax&ship', :escape => false) \n   => /testing/jump/#tax&ship\n```\n\nhttp://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#M002141\n\nhowever anchors always get url escaped, the :escape parameter is completely ignored. Is this intended behaviour? It would be nice to make the escaping optional.\n\nif it is intended behaviour the documentation should be updated.\n", "labels": [], "number": 682, "updated_at": "2011-05-21 15:12:02", "user": 789801, "closed_at": "2011-05-21 15:12:01", "id": 904354, "title": "url_for :escape parameter is ignored ", "url": "https://api.github.com/repos/rails/rails/issues/682", "created_at": "2011-05-16 03:42:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170130", "text": "_Imported from Lighthouse._\nComment by **Martin Gamsjaeger (snusnu)** - 2010-06-03 21:09:36 UTC\n\nWhile this maybe isn't the exact issue Jan encountered, I noticed something similar, where #content_tag_as_string completely ignores the escape param on the content. This leads to errors with the engineyard/rails_metrics plugin for example, and basically, for every call to #content_tag where the 2nd param is given as a String.\n\nPatch can be found at: http://github.com/snusnu/rails/commit/7f1b5bc6452cd1ca65dae3283c4af5297e4e00c2\n\nI'll keep on looking if there's already another ticket for that specific issue, or maybe it's even the same issue as this ticket describes anyway. If not, I'll probably open another ticket and link it back to this one too\n", "created_at": "2011-05-16 03:42:47", "user": 789801, "id": 1170130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170131", "text": "_Imported from Lighthouse._\nComment by **Jan Berkel** - 2010-06-03 21:33:42 UTC\n\nthat issue is unrelated. the problem is in actionpack/lib/action_dispatch/routing/route_set.rb:\n\n``` ruby\n\n# route_set.rb\ndef url_for(options)\n  ...\n  rewritten_url << \"##{Rack::Utils.escape(options[:anchor].to_param.to_s)}\" if options[:anchor]\nend\n\n# actionpack/lib/action_view/helpers/url_helper.rb\ndef url_for(option)\n  ...\n  escape  = options.key?(:escape) ? options.delete(:escape) : false\n  super\nend\n\n```\n\nSo what happens is that while url_for in url_helper.rb accepts an escape option, it doesn't get passed through route_set.rb (the key is deleted).\n\nI could fix this but wanted to check first if it the desired behaviour, to me it looks like a bug.\n", "created_at": "2011-05-16 03:42:49", "user": 789801, "id": 1170131}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170132", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-04 00:04:36 UTC\n\nThe culprit is following code\n\n``` ruby\nrewritten_url << \"##{Rack::Utils.escape(options[:anchor].to_param.to_s)}\" if options[:anchor]\n```\n\nAs you can see anchor tag is _always_ escaped. And it does not depend on options that is passed to this method.\n\nhttp://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/route_set.rb#L447\n\nI tried to look at HTTP RFC and could not find any reference that anchor tag should always be escaped. If no such reference is found then it should be considered a bug. The patch and test can be generated easily.\n", "created_at": "2011-05-16 03:42:50", "user": 789801, "id": 1170132}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170134", "text": "_Imported from Lighthouse._\nComment by **Jan Berkel** - 2010-06-04 00:41:00 UTC\n\n@neeraj: anchor tags are not even sent to the server, they are purely local. it still makes sense to escape the anchor tag to produce valid urls, but the content is more free form than for example the query string, so it should be possible to have that part not escaped automatically.\n\nmy concrete use case is google analytics tracking. there's an option to append tracking parameters to the anchor instead of having them as query parameters.\n\n```\nhttp://example.com?utm_campaign=bar\nhttp://example.com/#utm_campaign=bar\n```\n\nHowever if the content of the anchor gets escaped the tracking stops working.\n", "created_at": "2011-05-16 03:42:52", "user": 789801, "id": 1170134}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170135", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-25 20:42:48 UTC\n\nAssigning it to rails core team member to get a verdict on whether anchor value should be escaped or not?\n", "created_at": "2011-05-16 03:42:53", "user": 789801, "id": 1170135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170136", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-06-25 22:22:22 UTC\n\n:anchor (as everything else on url_for) should respect the :escape parameter. Patches please! :)\n", "created_at": "2011-05-16 03:42:55", "user": 789801, "id": 1170136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170137", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2010-06-26 01:02:42 UTC\n\nThe :escape option is only for HTML entity escaping and not URL escaping which is what's happening here. However there is a bug in that the :anchor is being over-escaped. The attached patch fixes this issue and you won't need to pass :escape => false to get your Google Analytics use case working.\n", "created_at": "2011-05-16 03:42:56", "user": 789801, "id": 1170137}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170139", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-06-26 01:06:11 UTC\n\n(from [bba19603c27e0439eb22a9bce7e3adf6924b224b]) URL fragments should not have safe characters escaped. Ref: Appendix A, http://tools.ietf.org/rfc/rfc3986.txt\n\n[#4762 state:resolved]\n\nSigned-off-by: Jeremy Kemper jeremy@bitsweat.net\nhttp://github.com/rails/rails/commit/bba19603c27e0439eb22a9bce7e3adf6924b224b\n", "created_at": "2011-05-16 03:42:58", "user": 789801, "id": 1170139}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170140", "text": "_Imported from Lighthouse._\nComment by **Jan Berkel** - 2010-06-29 10:07:57 UTC\n\nthanks! i backported the fix to 2-3-stable. any chance this can be applied? we're not ready for 3.x yet.\n", "created_at": "2011-05-16 03:43:00", "user": 789801, "id": 1170140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170141", "text": "_Imported from Lighthouse._\nComment by **Repository** - 2010-06-30 11:27:41 UTC\n\n(from [f8f4872fccbc6ba2b4970e4e9eab9ce7f0d19986]) Backported patch from [#4762]\n\nURL fragments should not have safe characters escaped. Ref: Appendix A,\n  http://tools.ietf.org/rfc/rfc3986.txt\n\nSigned-off-by: Jos√© Valim jose.valim@gmail.com\nhttp://github.com/rails/rails/commit/f8f4872fccbc6ba2b4970e4e9eab9ce7f0d19986\n", "created_at": "2011-05-16 03:43:01", "user": 789801, "id": 1170141}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170142", "text": "_Imported from Lighthouse._\nComment by **Shayan Guha** - 2010-11-04 21:55:41 UTC\n\nFrom http://tools.ietf.org/html/rfc3986#section-3.5, \"/\" and \"?\" should also be considered \"safe\" characters for the anchor. The patch doesn't look like it handles those characters. Also it looks like '%' should not be allowed.\n", "created_at": "2011-05-16 03:43:03", "user": 789801, "id": 1170142}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170143", "text": "_Imported from Lighthouse._\nComment by **Shayan Guha** - 2010-11-04 23:15:37 UTC\n\nThis fix also needs to be applied to the rewrite_url function on the 2.3 branch. The :anchor option is still being escaped using CGI.escape. https://github.com/rails/rails/blob/v2.3.10/actionpack/lib/action_controller/url_rewriter.rb#L200\n", "created_at": "2011-05-16 03:43:04", "user": 789801, "id": 1170143}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170144", "text": "_Imported from Lighthouse._\nComment by **iGEL** - 2011-02-16 16:17:02 UTC\n\nI agree with Shayan: / and ? shouldn't be escaped. I would like to use URLs like www.server.com/controller/action#tab=controller/action, but Rails 3.0.3 escapes the /. Any chance to reopen this ticket?\n", "created_at": "2011-05-16 03:43:06", "user": 789801, "id": 1170144}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170145", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-16 16:32:44 UTC\n\nis this an issue in 3-0-stable and/or master?\n", "created_at": "2011-05-16 03:43:08", "user": 789801, "id": 1170145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170146", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-16 16:43:37 UTC\n\nIt's an issue in 2-3-stable, 3-0-stable and master. 3-0-stable and master use Rack::Mount::Utils.escape_uri which doesn't have '/' and '?' in the list since those need escaping for routes. 2-3-stable uses URI.escape directly which Rack::Mount::Util.escape_uri does as well, so we might as well use URI.escape directly in 3-0-stable and master.\n", "created_at": "2011-05-16 03:43:09", "user": 789801, "id": 1170146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170147", "text": "_Imported from Lighthouse._\nComment by **iGEL** - 2011-02-16 17:36:31 UTC\n\nThank you. It's an issue on 3-0-stable and master. I've modified the tests, so it fails, if / or ? are escaped, but I don't dare to write a patch.\n", "created_at": "2011-05-16 03:43:11", "user": 789801, "id": 1170147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170148", "text": "_Imported from Lighthouse._\nComment by **iGEL** - 2011-02-16 18:41:53 UTC\n\nWell, I dared after all, and put Andrews suggestion into a patch. Hope, everything is alright the way I did it.\n", "created_at": "2011-05-16 03:43:12", "user": 789801, "id": 1170148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170149", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-16 21:32:17 UTC\n\nYou need to double check the unsafe char list you are escaping - the default for URI.escape is UNSAFE, which includes anything not in the UNRESERVED and RESERVED list. The spec says it should be PCHAR + '/?' - this means #,[ & ] should be escaped but the default URI.escape doesn't encode them.\n", "created_at": "2011-05-16 03:43:14", "user": 789801, "id": 1170149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170150", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-17 01:29:28 UTC\n\nHey Andrew, can I leave the ticket for you to push when you think the fix is ready?\n", "created_at": "2011-05-16 03:43:15", "user": 789801, "id": 1170150}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170151", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-17 05:35:05 UTC\n\nSure, I'll handle it.\n", "created_at": "2011-05-16 03:43:17", "user": 789801, "id": 1170151}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170152", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:43:18", "user": 789801, "id": 1170152}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170153", "text": "Attachments saved to Gist: http://gist.github.com/971672\n", "created_at": "2011-05-16 03:43:20", "user": 789801, "id": 1170153}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4767\nCreated by **arash** - 2011-01-26 09:48:46 UTC\n\nI expected that if I specify the :select option inside a find tag, it will always be respected; but apparently, if also specify conditions which rely on an 'included' model, it just does a select *:\n\n?> Comment.first(:select => 'comments.*', :conditions => \"users.first_name = 'Arash'\", :include => :user)\n  Comment Load Including Associations (0.9ms)   SELECT `comments`.`id` AS t0_r0, `comments`.`comment` AS t0_r1, `comments`.`owner_table` AS t0_r2, `comments`.`owner_id` AS t0_r3, `comments`.`user_id` AS t0_r4, `comments`.`status_id` AS t0_r5, `comments`.`deleted` AS t0_r6, `comments`.`created_at` AS t0_r7, `comments`.`updated_at` AS t0_r8, `users`.`id` AS t1_r0, `users`.`account_name` AS t1_r1, `users`.`first_name` AS t1_r2, `users`.`last_name` AS t1_r3, `users`.`email` AS t1_r4, `users`.`deleted` AS t1_r8, `users`.`created_at` AS t1_r9, `users`.`updated_at` AS t1_r10 FROM `comments` LEFT OUTER JOIN `users` ON `users`.id = `comments`.user_id AND `users`.`deleted` = 0 WHERE (( users.first_name = 'Arash' ) AND `comments`.`deleted` = 0) LIMIT 1\n\nThe occurs in rails 2.3.4\n", "labels": [], "number": 683, "updated_at": "2011-05-21 15:12:02", "user": 789801, "closed_at": "2011-05-21 15:12:02", "id": 904357, "title": "Find ignore select when conditions & include are specfied", "url": "https://api.github.com/repos/rails/rails/issues/683", "created_at": "2011-05-16 03:43:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4776\nCreated by **Serge Balyuk** - 2011-04-09 22:41:51 UTC\n\nThe current `attr_accessor_with_default` implementation of writer method changes object's singleton class. That does not work well with marshaling, and such objects can't be easily put in memcache:\n\n``` ruby\ncache = MemCache.new('localhost:11211')\n\nclass C\n  attr_accessor_with_default :foo, 'bar'\nend\n\nc = C.new\ncache.set('c', c) # ok\n\nc.foo = 'hello'\ncache.set('c', c) # /usr/lib/ruby/1.8/memcache.rb:300:in `dump': singleton can't be dumped (TypeError)\n```\n\nPlease find proposed patch that changes `attr_accessor_with_default` implementation so that it doesn't produce surprising changes in object singleton class.\n", "labels": [], "number": 684, "updated_at": "2011-05-21 15:12:02", "user": 789801, "closed_at": "2011-05-21 15:12:02", "id": 904359, "title": "[PATCH] Fix attr_accessor_with_default causing TypeError \"singleton can't be dumped\"", "url": "https://api.github.com/repos/rails/rails/issues/684", "created_at": "2011-05-16 03:43:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170154", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:37:59 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:43:31", "user": 789801, "id": 1170154}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170156", "text": "_Imported from Lighthouse._\nComment by **Serge Balyuk** - 2011-03-20 13:30:53 UTC\n\n[state:open]\n\nPer suggestion above, I've rebased against 3-0-stable and was able to successfully reproduce the issue in that branch.\n\nPlease find updated version of the patch attached.\n", "created_at": "2011-05-16 03:43:33", "user": 789801, "id": 1170156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170157", "text": "Attachments saved to Gist: http://gist.github.com/971673\n", "created_at": "2011-05-16 03:43:34", "user": 789801, "id": 1170157}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4781\nCreated by **Sam Ruby** - 2010-09-10 12:10:25 UTC\n\nfunction tests involving xhr requests to rjs templates on Ruby 1.8.7 produce\n\n`NoMethodError: undefined method 'size' for :js:Symbol`\n\nBroken by commit [http://github.com/rails/rails/commit/a6b39428431abeaa0251bbf4b6582e578f81783f](a6b39428431abeaa0251bbf4b6582e578f81783f).\n\n[testcase](http://intertwingly.net/stories/2010/06/06/rjs_functional_test.rb), [output](http://intertwingly.net/stories/2010/06/06/rjs_functional_test-187.html) (Ruby 1.8.7), [git bisect](http://intertwingly.net/stories/2010/06/06/bisect.log)\n\nThe same test passes on Ruby 1.9.2: [output](http://intertwingly.net/stories/2010/06/06/rjs_functional_test-192.html)\n", "labels": [], "number": 685, "updated_at": "2011-05-21 15:12:02", "user": 789801, "closed_at": "2011-05-21 15:12:02", "id": 904360, "title": "rjs function tests fail", "url": "https://api.github.com/repos/rails/rails/issues/685", "created_at": "2011-05-16 03:43:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170158", "text": "_Imported from Lighthouse._\nComment by **Sam Ruby** - 2010-06-06 22:51:16 UTC\n\nIt is not just function tests, actual use of RJS fails, and does so much more helpfully as there is a stack traceback:\n\n```\nNoMethodError (undefined method `size' for :js:Symbol):\n/home/rubys/git/rails/actionpack/lib/action_view/lookup_context.rb:149:in `formats='\n  /home/rubys/git/rails/actionpack/lib/action_view/lookup_context.rb:195:in `send'\n  /home/rubys/git/rails/actionpack/lib/action_view/lookup_context.rb:195:in `update_details'\n  /home/rubys/git/rails/actionpack/lib/action_view/lookup_context.rb:194:in `each'\n  /home/rubys/git/rails/actionpack/lib/action_view/lookup_context.rb:194:in `update_details'\n  /home/rubys/git/rails/actionpack/lib/action_view/base.rb:186:in `__send__'\n  /home/rubys/git/rails/actionpack/lib/action_view/base.rb:186:in `update_details'\n  /home/rubys/git/rails/actionpack/lib/action_view/render/layouts.rb:68:in `find_layout'\n  /home/rubys/git/rails/actionpack/lib/action_view/render/rendering.rb:53:in `_render_template'\n  /home/rubys/git/rails/actionpack/lib/action_view/render/rendering.rb:25:in `render'\n  /home/rubys/git/rails/actionpack/lib/abstract_controller/rendering.rb:114:in `_render_template'\n  /home/rubys/git/rails/actionpack/lib/abstract_controller/rendering.rb:108:in `render_to_body'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/renderers.rb:47:in `render_to_body'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/compatibility.rb:55:in `render_to_body'\n  /home/rubys/git/rails/actionpack/lib/abstract_controller/rendering.rb:101:in `render_to_string'\n  /home/rubys/git/rails/actionpack/lib/abstract_controller/rendering.rb:92:in `render'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/rendering.rb:17:in `render'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/instrumentation.rb:39:in `render'\n  /home/rubys/git/rails/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `ms'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/benchmark.rb:308:in `realtime'\n  /home/rubys/git/rails/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `ms'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/instrumentation.rb:39:in `render'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/instrumentation.rb:77:in `cleanup_view_runtime'\n  /home/rubys/git/rails/activerecord/lib/active_record/railties/controller_runtime.rb:15:in `cleanup_view_runtime'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/instrumentation.rb:38:in `render'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/implicit_render.rb:10:in `default_render'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/mime_responds.rb:258\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/mime_responds.rb:189:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/mime_responds.rb:189:in `respond_to'\n  /home/rubys/git/awdwr/work/depot/app/controllers/store_controller.rb:19:in `add_to_cart'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/implicit_render.rb:4:in `send_action'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/implicit_render.rb:4:in `send_action'\n  /home/rubys/git/rails/actionpack/lib/abstract_controller/base.rb:145:in `process_action'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/rendering.rb:11:in `process_action'\n  /home/rubys/git/rails/actionpack/lib/abstract_controller/callbacks.rb:18:in `process_action'\n  /home/rubys/git/rails/activesupport/lib/active_support/callbacks.rb:448:in `_run__1297800236__process_action__746879535__callbacks'\n  /home/rubys/git/rails/activesupport/lib/active_support/callbacks.rb:408:in `send'\n  /home/rubys/git/rails/activesupport/lib/active_support/callbacks.rb:408:in `_run_process_action_callbacks'\n  /home/rubys/git/rails/activesupport/lib/active_support/callbacks.rb:88:in `send'\n  /home/rubys/git/rails/activesupport/lib/active_support/callbacks.rb:88:in `run_callbacks'\n  /home/rubys/git/rails/actionpack/lib/abstract_controller/callbacks.rb:17:in `process_action'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/instrumentation.rb:29:in `process_action'\n  /home/rubys/git/rails/activesupport/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\n  /home/rubys/git/rails/activesupport/lib/active_support/notifications.rb:48:in `__send__'\n  /home/rubys/git/rails/activesupport/lib/active_support/notifications.rb:48:in `instrument'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/instrumentation.rb:28:in `process_action'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/rescue.rb:8:in `process_action'\n  /home/rubys/git/rails/actionpack/lib/abstract_controller/base.rb:114:in `process'\n  /home/rubys/git/rails/actionpack/lib/abstract_controller/rendering.rb:40:in `process'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal.rb:126:in `dispatch'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\n  /home/rubys/git/rails/actionpack/lib/action_controller/metal.rb:166\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/routing/route_set.rb:27:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/routing/route_set.rb:27:in `call'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-mount-0.6.3/lib/rack/mount/route_set.rb:148:in `call'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-mount-0.6.3/lib/rack/mount/code_generation.rb:89:in `recognize'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-mount-0.6.3/lib/rack/mount/code_generation.rb:66:in `optimized_each'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-mount-0.6.3/lib/rack/mount/code_generation.rb:88:in `recognize'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-mount-0.6.3/lib/rack/mount/route_set.rb:139:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/routing/route_set.rb:454:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/head.rb:14:in `call'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/methodoverride.rb:24:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/flash.rb:177:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/session/abstract_store.rb:106:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/cookies.rb:235:in `call'\n  /home/rubys/git/rails/activerecord/lib/active_record/query_cache.rb:31:in `call'\n  /home/rubys/git/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:28:in `cache'\n  /home/rubys/git/rails/activerecord/lib/active_record/query_cache.rb:11:in `cache'\n  /home/rubys/git/rails/activerecord/lib/active_record/query_cache.rb:30:in `call'\n  /home/rubys/git/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:365:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/callbacks.rb:46:in `call'\n  /home/rubys/git/rails/activesupport/lib/active_support/callbacks.rb:414:in `_run_call_callbacks'\n  /home/rubys/git/rails/activesupport/lib/active_support/callbacks.rb:88:in `send'\n  /home/rubys/git/rails/activesupport/lib/active_support/callbacks.rb:88:in `run_callbacks'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/callbacks.rb:44:in `call'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/sendfile.rb:105:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:48:in `call'\n  /home/rubys/git/rails/railties/lib/rails/rack/logger.rb:14:in `call'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/runtime.rb:17:in `call'\n  /home/rubys/git/rails/activesupport/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/lock.rb:11:in `call'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/lock.rb:11:in `synchronize'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/lock.rb:11:in `call'\n  /home/rubys/git/rails/actionpack/lib/action_dispatch/middleware/static.rb:30:in `call'\n  /home/rubys/git/rails/railties/lib/rails/application.rb:145:in `call'\n  /home/rubys/git/rails/railties/lib/rails/application.rb:81:in `send'\n  /home/rubys/git/rails/railties/lib/rails/application.rb:81:in `method_missing'\n  /home/rubys/git/rails/railties/lib/rails/rack/log_tailer.rb:15:in `call'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/content_length.rb:13:in `call'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/handler/webrick.rb:48:in `service'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/httpserver.rb:104:in `service'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/server.rb:173:in `start_thread'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/server.rb:162:in `start'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/server.rb:162:in `start_thread'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/server.rb:95:in `start'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/server.rb:92:in `each'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/server.rb:92:in `start'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/server.rb:23:in `start'\n  /home/rubys/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/1.8/webrick/server.rb:82:in `start'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/handler/webrick.rb:14:in `run'\n  /home/rubys/.rvm/gems/ruby-1.8.7-p249/gems/rack-1.1.0/lib/rack/server.rb:155:in `start'\n  /home/rubys/git/rails/railties/lib/rails/commands/server.rb:62:in `start'\n  /home/rubys/git/rails/railties/lib/rails/commands.rb:30\n  /home/rubys/git/rails/railties/lib/rails/commands.rb:27:in `tap'\n  /home/rubys/git/rails/railties/lib/rails/commands.rb:27\n  script/rails:6:in `require'\n  script/rails:6\n```\n", "created_at": "2011-05-16 03:43:40", "user": 789801, "id": 1170158}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170159", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-06-07 00:58:13 UTC\n\nFixed by 83729e2fe36a0a629c2a5a52a7e2970287d57036, but needs a regression test.\n", "created_at": "2011-05-16 03:43:42", "user": 789801, "id": 1170159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170160", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:43:43", "user": 789801, "id": 1170160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170161", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:55 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:43:44", "user": 789801, "id": 1170161}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170162", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:22:15 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:43:46", "user": 789801, "id": 1170162}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170163", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:43:47", "user": 789801, "id": 1170163}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170164", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:43:48", "user": 789801, "id": 1170164}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170165", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:43:50", "user": 789801, "id": 1170165}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4808\nCreated by **Steve Purcell** - 2011-02-14 07:28:42 UTC\n\nCertain textarea inputs are improperly truncated before being placed in 'params', so that apps do not see the full text submitted.\n\nHow to reproduce:\n- Unzip attached sample rails app (generated with \"rails\" script from 2.3.8)\n- script/server\n- Go to http://localhost:3000/things/new\n- Open the attached \"Dizzy.rtf\" file in TextEdit (I haven't been able to test this on non-Macs), select all, copy, and then paste into the textarea on the above page\n- Click save\n\nNote the value of 'text' in the deliberately-thrown error: it contains just the final paragraph of the text, where it should contain the full text.\n\nIn Rails 2.3.5, all the text is placed in 'params', even with the same Rack version.\n", "labels": [], "number": 686, "updated_at": "2011-05-21 15:12:02", "user": 789801, "closed_at": "2011-05-21 15:12:02", "id": 904362, "title": "Textarea input silently truncated in 2.3.8!", "url": "https://api.github.com/repos/rails/rails/issues/686", "created_at": "2011-05-16 03:43:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170167", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-06-22 15:12:04 UTC\n\nSteve, can you reproduce it in Rails test suite? It makes much easier for us to investigate.\n", "created_at": "2011-05-16 03:43:56", "user": 789801, "id": 1170167}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170168", "text": "_Imported from Lighthouse._\nComment by **Steve Purcell** - 2010-06-22 20:54:45 UTC\n\nOkay, a patch providing a test case is attached, together with a dump of the original raw request (which came from Chrome on Mac, though the same problem is evident with Safari).\n", "created_at": "2011-05-16 03:43:58", "user": 789801, "id": 1170168}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170169", "text": "_Imported from Lighthouse._\nComment by **Steve Purcell** - 2010-06-22 20:56:25 UTC\n\nThe problem, incidentally, seems related to the url-encoded quote marks in the string.\n", "created_at": "2011-05-16 03:43:59", "user": 789801, "id": 1170169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170170", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-22 21:20:04 UTC\n\nprevious version of rack used to remove quotes if there is no line break. \n\nIt was recently changed after much debate on rack mailing list. http://github.com/rack/rack/commit/dae12e088592ee69545b5f2f81b87f4959859164\n", "created_at": "2011-05-16 03:44:00", "user": 789801, "id": 1170170}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170171", "text": "_Imported from Lighthouse._\nComment by **Steve Purcell** - 2010-06-22 21:30:59 UTC\n\nRe: the Rack changes -- wow, I'm amazed there was any debate; it seems like removing parts of the submitted text would obviously be a bad idea.\n\nBut is this a Rack issue? Does the code covered by this patched test ask the Rack stack to parse the URL-encoded params? Or is this parsing Rails-specific? It would be odd to test Rack in a Rails test.\n\nAnd if so, I have a question: submitting the sample text to the same test app running under Rails 2.3.5 on the same machine did not cause the problem. Does this mean the two Rails versions were picking up different Rack gems (I have 1.2.1, 1.1.0 and 1.0.1 installed)? And if the problem was an _old_ Rack gem, why would the newer Rails version (2.3.8) show this problem?\n", "created_at": "2011-05-16 03:44:02", "user": 789801, "id": 1170171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170172", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-06-22 22:33:52 UTC\n\nI did not notice that it was 2.3.x issue. I am not sure if rails 2.3.8 uses rack for parsing params.\n\nThere was another ticket regarding rails edge in which text area having \"hello world\"  will have quotes removed. However \"hello \\n world\" would have quotes preserved. That issue got fixed by that rack commit.\n", "created_at": "2011-05-16 03:44:03", "user": 789801, "id": 1170172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170173", "text": "_Imported from Lighthouse._\nComment by **Steve Purcell** - 2010-06-23 07:18:04 UTC\n\nRails 2.3.8 indeed appears to require the broken Rack version 1.1.0, whereas 2.3.5 required Rack 1.0.1, so I guess we can assume that this regression is due to the new dependency on a broken Rack.\n\nThat's a pity.\n", "created_at": "2011-05-16 03:44:04", "user": 789801, "id": 1170173}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170174", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-07-16 19:38:32 UTC\n\nI am not sure if rails 2.3.9 will use the upgraded version of Rack. If it does then this problem will be solved.\n", "created_at": "2011-05-16 03:44:06", "user": 789801, "id": 1170174}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170175", "text": "_Imported from Lighthouse._\nComment by **Steve Purcell** - 2010-07-16 19:54:28 UTC\n\nYeah, I hope so -- as it stands, I've already decided that 2.3.8 isn't safe for production use, since certain user input will get silently truncated, and there's no workaround. Shame that Rails should be compromised by this silly Rack issue.\n", "created_at": "2011-05-16 03:44:07", "user": 789801, "id": 1170175}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170176", "text": "_Imported from Lighthouse._\nComment by **andreas** - 2010-07-27 19:42:26 UTC\n\nCan we please get Rails 2.3.9 to use the fixed Rack version?\n", "created_at": "2011-05-16 03:44:08", "user": 789801, "id": 1170176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170177", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 04:35:59 UTC\n\nPending patch and test.\n", "created_at": "2011-05-16 03:44:10", "user": 789801, "id": 1170177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170178", "text": "_Imported from Lighthouse._\nComment by **tvdeyen** - 2010-09-01 11:40:36 UTC\n\n+1 from me. Have to go back to 2.3.5 for my App now. Then quotes are submitted correctly.\n", "created_at": "2011-05-16 03:44:11", "user": 789801, "id": 1170178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170179", "text": "_Imported from Lighthouse._\nComment by **Steve Purcell** - 2010-09-07 10:14:08 UTC\n\nConfirmed still present in 2.3.9.\n\nI had a go at bumping the Rack version to 1.2.1, but a whole bunch of tests break then.\n", "created_at": "2011-05-16 03:44:12", "user": 789801, "id": 1170179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170180", "text": "_Imported from Lighthouse._\nComment by **Phil Ross** - 2010-09-07 21:46:14 UTC\n\nI've been using the attached initializer to fix this issue with Rails 2.3.8 and 2.3.9. It replaces the parse_query and normalize_params methods in Rack::Utils with fixed versions (the code is from Rack 1.1.0 with the patch from http://github.com/rack/rack/commit/dae12e088592ee69545b5f2f81b87f4959859164 applied).\n", "created_at": "2011-05-16 03:44:14", "user": 789801, "id": 1170180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170181", "text": "_Imported from Lighthouse._\nComment by **Steve Purcell** - 2010-09-08 08:54:16 UTC\n\nTerrific - thanks Phil.\n", "created_at": "2011-05-16 03:44:15", "user": 789801, "id": 1170181}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170182", "text": "_Imported from Lighthouse._\nComment by **caseyf** - 2010-11-18 02:59:24 UTC\n\nOuch.\n\nPhil's initializer helped me. Thanks Phil.\n", "created_at": "2011-05-16 03:44:16", "user": 789801, "id": 1170182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170183", "text": "_Imported from Lighthouse._\nComment by **Roel van der Hoorn** - 2010-12-13 21:41:51 UTC\n\n+1\n\nNasty bug. Patch works well for me (Rails 2.3.10).\n", "created_at": "2011-05-16 03:44:18", "user": 789801, "id": 1170183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170184", "text": "_Imported from Lighthouse._\nComment by **Roel van der Hoorn** - 2010-12-22 12:40:32 UTC\n\nFor those who also ran into this bug: http://groups.google.com/group/rack-devel/browse_thread/thread/5876f28aac65f67c you may want to use the attached updated patch, which applies the following two commits:\n\nhttp://github.com/rack/rack/commit/c028a23b36debbce1005347d4234fe6e32373223\nhttp://github.com/rack/rack/commit/55cbbc91ae0a03445dd9e0ba1830f70fbd2f4d52\n", "created_at": "2011-05-16 03:44:19", "user": 789801, "id": 1170184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170185", "text": "Attachments saved to Gist: http://gist.github.com/971674\n", "created_at": "2011-05-16 03:44:20", "user": 789801, "id": 1170185}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4858\nCreated by **Rodrigo Rosenfeld Rosas** - 2010-11-08 23:12:12 UTC\n\nA view views/mailer/message.text.erb with this content:\n\nhttp://ab.cd/e?f=1&g=2 (read an ampersand only, cause LightHouse will mess with it)\n\nis sent as a plain text message with this link:\n\nhttp://ab.cd/e?f=1&amp;g=2\n", "labels": ["actionmailer"], "number": 687, "updated_at": "2012-11-16 14:32:22", "user": 789801, "closed_at": "2012-11-16 14:32:22", "id": 904363, "title": "ActionMailer is html escaping ampersand (&) in Urls in plain text messages", "url": "https://api.github.com/repos/rails/rails/issues/687", "created_at": "2011-05-16 03:44:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170186", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2010-06-14 20:17:12 UTC\n\nThis is probably as a result of unifying the AM and AC use of AV,  it's a regression and should be fixed before 3.0\n", "created_at": "2011-05-16 03:44:26", "user": 789801, "id": 1170186}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170187", "text": "_Imported from Lighthouse._\nComment by **Amos King** - 2010-06-15 02:41:25 UTC\n\nI can't reproduce this issue with the latest. Can I get an example so I can tackle this.\n", "created_at": "2011-05-16 03:44:27", "user": 789801, "id": 1170187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170188", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-06-15 02:57:26 UTC\n\nI've just found the root cause. url_for is not marking the url as html_safe and the ERB template used by the plain text templating is sanitizing the text by default as the other ERB templates.\n\nThis mean that now the plain text ERB template should be something like:\n\nPlease, visit <%= raw @confirmation_url %>\n\nI think plain text templates should not be sanitized in favor of the least surprise principle...\n\nWhat do you think?\n", "created_at": "2011-05-16 03:44:29", "user": 789801, "id": 1170188}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170189", "text": "_Imported from Lighthouse._\nComment by **Akira Matsuda** - 2010-08-23 07:00:17 UTC\n\nI also got stuck on this problem.\n\n> I think plain text templates should not be sanitized in favor of the least surprise principle...\n> What do you think?\n\n+1. Plain text template should better not be html_escaped.\n", "created_at": "2011-05-16 03:44:30", "user": 789801, "id": 1170189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170190", "text": "_Imported from Lighthouse._\nComment by **Akira Matsuda** - 2010-08-23 07:01:13 UTC\n\nSorry, I meant, +1\n", "created_at": "2011-05-16 03:44:31", "user": 789801, "id": 1170190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170191", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:44:33", "user": 789801, "id": 1170191}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170192", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-09-01 22:11:52 UTC\n\nThis is not related to the mail gem, but the ActionView bit. Assigning it back to Mr. Katz.\n", "created_at": "2011-05-16 03:44:34", "user": 789801, "id": 1170192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170193", "text": "_Imported from Lighthouse._\nComment by **Wincent Colaiuta** - 2010-09-04 13:07:37 UTC\n\nI've had to use `raw` in a few places in my non-HTML templates for this reason.\n\nIt's not limited to templates with the `.text.erb` extension. I've also had to do it in `.js.erb` templates. I imagine that if I had other non-HTML ERB templates it would behave the same way too.\n\nNo idea if this is limited to ERB, seeing as the only other template format I use is Haml, which is obviously always producing HTML output only.\n", "created_at": "2011-05-16 03:44:35", "user": 789801, "id": 1170193}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170194", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:56 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:44:37", "user": 789801, "id": 1170194}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170195", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:34:58 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:44:38", "user": 789801, "id": 1170195}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170196", "text": "_Imported from Lighthouse._\nComment by **Fjan** - 2010-11-03 19:08:39 UTC\n\nI just wanted to point out that the it's not just URLs and not just ampersands: any text gets HTML escaped. This is going to trip people up who accidentally use < and > characters in an e-mail address for example. My plain text e-mail templates are now littered with .html_safe everywhere to prevent this.\n\nAs far as I can tell from the code this is going to be pretty hard to fix without ruining the nice unification of the mailer views with the regular views we just had. My suggestion is to define a new erb character sequence such as <%== to mean a \"raw concat\". That will beatify the code a little and make sure that we can upgrade old templates with a simple search/replace, mailer or regular view.\n", "created_at": "2011-05-16 03:44:39", "user": 789801, "id": 1170196}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170197", "text": "_Imported from Lighthouse._\nComment by **Fjan** - 2010-11-03 20:51:04 UTC\n\nJust a quick follow up to myself, I looked at the code and all that is needed to make \"<%== ...\" behave as \"<%= raw ...\"  is this snippet in an initializer:\n\n```\nmodule ActionView\n  class Template\n    module Handlers\n      class Erubis < ::Erubis::Eruby\n        def add_expr_escaped(src, code)\n          src << \"@output_buffer.safe_concat(\" << escape_text(code.html_safe) << \");\"\n        end\n      end\n    end\n  end\nend\n```\n\nIt can be made more efficient by adding to the string directly.\n", "created_at": "2011-05-16 03:44:41", "user": 789801, "id": 1170197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170198", "text": "_Imported from Lighthouse._\nComment by **Wincent Colaiuta** - 2010-11-03 20:57:14 UTC\n\nI think adding new syntax is a non-solution to this problem which just wall-papers over the underlying issue.\n\nThe fact is that it doesn't make sense to HTML-escape content which is not HTML.\n\nMerely adding a short-cut syntax for avoiding the undesired escaping is just giving us a more concise means of doing something that we shouldn't have to do in the first place, and IMO it would be worse than just ignoring the problem.\n", "created_at": "2011-05-16 03:44:42", "user": 789801, "id": 1170198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170199", "text": "_Imported from Lighthouse._\nComment by **Fjan** - 2010-11-03 21:07:29 UTC\n\nI agree a proper fix where plain text templates do net get escaped would be better.\n\nHowever, I still like that new syntax for the regular views. I just did a quick count for \"html_safe\" and I came up with 390 in my views and helpers. So it would sure save a lot of typing and it can also make the templates more efficient by not converting to an output_buffer and back to a string (as I did above).\n\nI simply like to use some like without all the html_safe stuff:\n    <%= \"<b>Alert</b>\".html_safe if level<0 %>\n", "created_at": "2011-05-16 03:44:43", "user": 789801, "id": 1170199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170200", "text": "_Imported from Lighthouse._\nComment by **Fjan** - 2010-11-03 23:16:42 UTC\n\nOops, that method in my first posts should have read:\n\n```\ndef add_expr_escaped(src, code)\n  src << \"@output_buffer.safe_concat((\" << code << \").to_s);\"\nend\n```\n\nAlso apologies for the lack of proofreading in the second post. I'm actually tempted to override the XSS escaping when upgrading from Rails 2 projects by doing a global search/replace of <%= with <%== now. The on-by-default escaping idea is sound in theory but it's just introducing more problems than it solves when upgrading an old and stable code base.\n", "created_at": "2011-05-16 03:44:44", "user": 789801, "id": 1170200}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170201", "text": "_Imported from Lighthouse._\nComment by **Wincent Colaiuta** - 2010-11-03 23:21:41 UTC\n\n> I agree a proper fix where plain text templates do net get escaped would be better.\n> \n> However, I still like that new syntax for the regular views.\n\nFjan, your proposed shortcut syntax probably belongs in a separate ticket.\n", "created_at": "2011-05-16 03:44:46", "user": 789801, "id": 1170201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170202", "text": "_Imported from Lighthouse._\nComment by **Fjan** - 2010-11-03 23:24:47 UTC\n\nYou are right. Sorry for the spam here, not thinking to clearly after typing 390 html_safes. I'll put in a new ticket tomorrow.\n", "created_at": "2011-05-16 03:44:47", "user": 789801, "id": 1170202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170203", "text": "_Imported from Lighthouse._\nComment by **Bertg** - 2010-11-05 19:53:12 UTC\n\nWe have been investigating this issue, and it goes beyond ActionMailer. \n\nWe have detected this happening when rendering csv files, ical compatible files etc.. Basically html escaping is happening all the time in ActionView regardless of format.\n\nTemplates and Handlers always choose a ActionView::SafeBuffer or a subclass of it. This is desired behaviour in case of html (or alike, e.g.: xml) but not in any other context like plain text emails or csv.\n\nThe template should be smart enough to choose the correct buffer based on the format passed to it. E.g.: when the extension of a template is .text.haml it should not be doing any escaping, i.e. not be using the safe buffer.\n\nWe do think the priority of this bug should be high, as it's influencing all formats besides html, and thus breaking these.\n\nThe impact is probably going to be beyond rails, but in any rails3 compatible handler, like haml.\n", "created_at": "2011-05-16 03:44:48", "user": 789801, "id": 1170203}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170204", "text": "_Imported from Lighthouse._\nComment by **Fjan** - 2010-11-11 15:25:22 UTC\n\nNow that my [patch to add a non-escaping option to Erubis](https://rails.lighthouseapp.com/projects/8994/tickets/5918-fix-erubis-non-escaping-sequence-patch) has been committed to 3.0 stable this problem can be fixed by simply letting the handler check if the template identifier contains \"html\" and disabling escape otherwise. Attached is a monkey patch that adds one line to the template setup:\n\n``` ruby\n   :escape => template.identifier !~ /\\.html/   # Note: :escape => true disables escaping\n```\n\nNote that this patch will only work if the patch mentioned above is also applied.\n", "created_at": "2011-05-16 03:44:50", "user": 789801, "id": 1170204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170205", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-11-11 15:52:31 UTC\n\nWorth noting that this monkey patch will only work on ERB templates but won't work for HAML for instance...\n", "created_at": "2011-05-16 03:44:51", "user": 789801, "id": 1170205}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170206", "text": "_Imported from Lighthouse._\nComment by **Fjan** - 2010-11-11 16:40:19 UTC\n\nHere is the one-line patch that can be applied to edge. Sorry, I have no idea how to add a test for this, I'm kind of new to all this.\n", "created_at": "2011-05-16 03:44:53", "user": 789801, "id": 1170206}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170207", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:44:54", "user": 789801, "id": 1170207}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170208", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:44:56", "user": 789801, "id": 1170208}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170209", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:44:57", "user": 789801, "id": 1170209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170210", "text": "_Imported from Lighthouse._\nComment by **Matthew Stopa** - 2011-04-28 19:38:49 UTC\n\nDoes anyone know if this issue has been fixed yet? It looks like things have changed a lot in Rails3 since the patch was submitted. We're experiencing the problem currently where our users are getting their emails with escaped characters. Anyone know a workaround?\n", "created_at": "2011-05-16 03:44:58", "user": 789801, "id": 1170210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170211", "text": "_Imported from Lighthouse._\nComment by **Bertg** - 2011-04-28 20:19:25 UTC\n\nI have no idea what the status on this ticket is, but the work around we used is to indicate EACH string as html safe manually. That works great :)\n", "created_at": "2011-05-16 03:45:00", "user": 789801, "id": 1170211}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170212", "text": "_Imported from Lighthouse._\nComment by **Matthew Stopa** - 2011-04-28 21:08:42 UTC\n\nThat hasn't worked for me at all. Even with a basic ActionMailer where I specify the body as body => \"blah <a> blah\".html_safe I am still seeing escaped characters in the emails it sends.\n", "created_at": "2011-05-16 03:45:01", "user": 789801, "id": 1170212}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170213", "text": "_Imported from Lighthouse._\nComment by **Fjan** - 2011-04-29 07:15:57 UTC\n\n@Matthew: I've been using the monkey patch I provided in the November 11th post in production for quite some time now and it works great. Just drop it in the config/initializers directory.\n", "created_at": "2011-05-16 03:45:02", "user": 789801, "id": 1170213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170214", "text": "Attachments saved to Gist: http://gist.github.com/971675\n", "created_at": "2011-05-16 03:45:04", "user": 789801, "id": 1170214}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246123", "text": "Not sure why this is closed... this still doesn't look like it's made it into 3.1.  Did this get rejected?\n", "created_at": "2011-05-26 23:08:39", "user": 76790, "id": 1246123}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251809", "text": "Same question here. Should we continue to monkey patch Rails for this? What is the recommended way?\n", "created_at": "2011-05-27 21:15:46", "user": 102483, "id": 1251809}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2109434", "text": "+1, any progress on this?\n", "created_at": "2011-09-15 21:27:44", "user": 147237, "id": 2109434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2286251", "text": "+1, it doesn't look like the problem has been solved\n", "created_at": "2011-10-04 13:37:57", "user": 2173, "id": 2286251}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2588287", "text": "This problem is not fixed. I'm still seeing `&amp;` in my text emails.\n\n+1\n", "created_at": "2011-11-01 09:27:04", "user": 15245, "id": 2588287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3959086", "text": "Please, either re-open this ticked or explain why it has been rejected!\n", "created_at": "2012-02-14 11:37:28", "user": 360803, "id": 3959086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4191469", "text": "This is still not fixed in 3.2.1. I've written an updated initializer: https://gist.github.com/1923080 that patches `ActionView`\n", "created_at": "2012-02-27 11:01:17", "user": 2173, "id": 4191469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4425723", "text": "I still see HTML entities in plain text emails in v3.2.2. Is there interest in accepting a pull request to resolve this? I'd be willing to look into the core fix.\n", "created_at": "2012-03-09 22:10:28", "user": 740, "id": 4425723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4716629", "text": "Seeing this in Rails v3.0.12.\n", "created_at": "2012-03-27 13:51:05", "user": 485884, "id": 4716629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5372965", "text": "Still broken in 3.2.3\n", "created_at": "2012-04-27 03:47:43", "user": 13930, "id": 5372965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5431764", "text": "Using <%== foo %> seems to work for me.  It feels a little hacky, but if you're going to use a separate .html.erb for HTML mails anyway, remembering to use the double-\"=\" syntax for plaintext isn't as horrible as it otherwise could be.\n\n+1 for a \"proper\" fix, but this workaround does it for me with no patching required (YMMV).\n\nCurrently using rails 3.2.2.\n", "created_at": "2012-05-01 01:11:47", "user": 1443861, "id": 5431764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6608705", "text": "Would it be possible for someone to provide a failing test case?\n", "created_at": "2012-06-27 16:48:41", "user": 3124, "id": 6608705}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6618036", "text": "Dipping my toes into this, let's see how it goes. I did a little work with template rendering a few weeks ago.\n\nis @langalex's patch a good idea? Are there any cases in which a non-HTML template should get escaped?\n", "created_at": "2012-06-27 23:10:14", "user": 27786, "id": 6618036}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6618648", "text": "Based on the patch, I tried to write some tests:\n\nhttps://github.com/steveklabnik/rails/commit/ffd4892b8d42e087a827f68b9e56c834bf188a45\n\nHowever, the `test_basic_html_template_does_html_escape` doesn't escape the `&` either way; I can pass true or false in and I still get a &.\n\nHmmmmm.\n", "created_at": "2012-06-27 23:49:17", "user": 27786, "id": 6618648}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6922061", "text": "Sick issue now present in Redmine.\n", "created_at": "2012-07-11 22:41:04", "user": 12543, "id": 6922061}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9390147", "text": "+1. It would be great to have this fixed in Rails soon.\n", "created_at": "2012-10-12 21:00:36", "user": 3262, "id": 9390147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9845886", "text": "There is a pending PR to fix this issue #7976\n", "created_at": "2012-10-28 13:45:34", "user": 5402, "id": 9845886}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10448582", "text": "Closed by #8235\n", "created_at": "2012-11-16 14:32:22", "user": 47848, "id": 10448582}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4896\nCreated by **Igor** - 2010-12-28 03:36:21 UTC\n\nRails (2.3.5 and it seems the same is with edge) with Ruby 1.9 correctly creates and stores utf-8 based routes. But when it comes to route recognition, it fails to match the route name:\n\n``` ruby\nmap.home '–Ω–∞—á–∞–ª–æ', controller: :home, action: :index\n```\n\nthen\nhttp://localhost/%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE\ngives\n\n```\nNo route matches \"/%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE\" with {:method=>:get}\n```\n\nThe reason is that recognize_path does html unescape only after routes are mapped, and because of this it fails to map raw utf8 stored name against its %XX%XX equivalent.\n\nIn 2.3.5 the next patch fixes the issue:\n\n``` ruby\nrequire 'action_pack'\nrequire 'cgi'\nmodule ActionController::Routing\n  class RouteSet\n    alias_method :recognize_path_ugly, :recognize_path\n\n    def recognize_path(path, environment)\n      path = CGI::unescape(path).force_encoding('utf-8').encode(invalid: :replace)\n      recognize_path_ugly(path, environment)\n    end\n  end\nend \n```\n\nThe problem was introduced with http://dev.rubyonrails.org/changeset/6185 which basically tried to fix another issue. Actually fixing it with the above patch will break the current behaviour of parameters unescaping, so it should be carefully considered.\n\nThe similar issue was raised which also may interfere with this problem:\nhttps://rails.lighthouseapp.com/projects/8994/tickets/2574-routing-double-escape-url-segments\n", "labels": [], "number": 688, "updated_at": "2011-06-29 01:54:27", "user": 789801, "closed_at": "2011-05-21 15:12:02", "id": 904365, "title": "i18n routes can't be recognized", "url": "https://api.github.com/repos/rails/rails/issues/688", "created_at": "2011-05-16 03:45:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170215", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2010-06-27 17:10:01 UTC\n\nWith the increasing support for IDN in browsers this is probably something we want to address.\n", "created_at": "2011-05-16 03:45:10", "user": 789801, "id": 1170215}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170216", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:45:12", "user": 789801, "id": 1170216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170218", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:56 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:45:13", "user": 789801, "id": 1170218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170220", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-16 01:42:12 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:45:15", "user": 789801, "id": 1170220}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170221", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:12 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:45:17", "user": 789801, "id": 1170221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170222", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:45:19", "user": 789801, "id": 1170222}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170223", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:45:20", "user": 789801, "id": 1170223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1460432", "text": "It looks like the import from lighthouse scrapped many of the comments here.  Is there an update on this issue?  I would like to have my rails app contain utf8 routes and have them properly recognized, so any back-information on this issue would be helpful.\n", "created_at": "2011-06-29 01:54:27", "user": 5484, "id": 1460432}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4914\nCreated by **Hongli Lai** - 2011-03-30 04:35:48 UTC\n\nSuppose that a Car has_many Drivers, and that the association methods on both ends have :inverse_of specified. Code here: http://gist.github.com/445969\nOne would expect that if one references a driver through a car, and then follows the association back to car, no new SQL query would be performed if :inverse_of is set. But a query _is_ performed.\n\nExpected behavior:\n\n```\ncar = Car.find(1)\n# Car Load (0.3ms)   SELECT * FROM \"cars\" WHERE (\"cars\".\"id\" = 1) \n\ndriver = car.drivers.first\n# Driver Load (0.2ms)   SELECT * FROM \"drivers\" WHERE (\"drivers\".car_id = 1) LIMIT 1\n\ndriver.car\n# No SQL query here.\n```\n\nActual behavior:\n\n```\ncar = Car.find(1)\n# Car Load (0.3ms)   SELECT * FROM \"cars\" WHERE (\"cars\".\"id\" = 1) \n\ndriver = car.drivers.first\n# Driver Load (0.2ms)   SELECT * FROM \"drivers\" WHERE (\"drivers\".car_id = 1) LIMIT 1\n\ndriver.car\n# Car Load (0.2ms)   SELECT * FROM \"cars\" WHERE (\"cars\".\"id\" = 1)\n```\n\nThis happens on both Rails 2.3.8 and Rails 3 git master.\n", "labels": [], "number": 689, "updated_at": "2012-06-06 09:26:46", "user": 789801, "closed_at": "2011-05-21 15:09:47", "id": 904366, "title": "ActiveRecord :inverse_of doesn't have any effect", "url": "https://api.github.com/repos/rails/rails/issues/689", "created_at": "2011-05-16 03:45:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170224", "text": "_Imported from Lighthouse._\nComment by **Tor Erik** - 2010-07-02 15:05:57 UTC\n\nNote that it works as expected \n\n```\ncar.drivers.first\n```\n\nis changed to\n\n```\ncar.drivers.to_a.first\n```\n", "created_at": "2011-05-16 03:45:28", "user": 789801, "id": 1170224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170225", "text": "_Imported from Lighthouse._\nComment by **Tor Erik** - 2010-07-02 15:07:21 UTC\n\n(... it works as expected IF)\n", "created_at": "2011-05-16 03:45:29", "user": 789801, "id": 1170225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170226", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 01:28:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27613)]\n", "created_at": "2011-05-16 03:45:30", "user": 789801, "id": 1170226}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170227", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:49:40 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:45:31", "user": 789801, "id": 1170227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170228", "text": "_Imported from Lighthouse._\nComment by **holli** - 2011-02-06 00:59:42 UTC\n\nStill open. Noticed it in my code using rails 3.0.3. I did also try it with using the code from above ( http://gist.github.com/445969 ).\n\nSeems like fetching all with .to_a without any other options is the only way to get expected results.\n\n```\nCar.find(1).drivers.first.car\n# Car Load (0.2ms)  SELECT \"cars\".* FROM \"cars\" WHERE (\"cars\".\"id\" = 1) LIMIT 1\n# Driver Load (0.2ms)  SELECT \"drivers\".* FROM \"drivers\" WHERE (\"drivers\".car_id = 1) LIMIT 1\n# Car Load (0.1ms)  SELECT \"cars\".* FROM \"cars\" WHERE (\"cars\".\"id\" = 1) LIMIT 1\n\n# This works as excepted, no new query =>\nCar.find(1).drivers.to_a.first.car\n# Car Load (0.4ms)  SELECT \"cars\".* FROM \"cars\" WHERE (\"cars\".\"id\" = 1) LIMIT 1\n# Driver Load (0.3ms)  SELECT \"drivers\".* FROM \"drivers\" WHERE (\"drivers\".car_id = 1)\n\nCar.find(1).drivers.order('id').to_a.first.car\n# Car Load (0.1ms)  SELECT \"cars\".* FROM \"cars\" WHERE (\"cars\".\"id\" = 1) LIMIT 1\n# Driver Load (0.2ms)  SELECT \"drivers\".* FROM \"drivers\" WHERE (\"drivers\".car_id = 1) ORDER BY id\n# Car Load (0.2ms)\n```\n\n[state:open]\n", "created_at": "2011-05-16 03:45:33", "user": 789801, "id": 1170228}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6146066", "text": "This is still the case for me, just tested it with 3.2.5\n", "created_at": "2012-06-06 09:08:28", "user": 124391, "id": 6146066}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4961\nCreated by **Wade Stebbings** - 2011-02-17 06:48:08 UTC\n\nAlthough we have a unique situation with a single app connecting to two databases which also needs to perform joins across the two (mysql only), when setting this up we break migrations such that we see the following error:\n\n  Mysql::Error: Table 'schema_migrations' already exists: CREATE TABLE `istads_dev`.`schema_migrations` (`version` varchar(255) NOT NULL) ENGINE=InnoDB\n\nThis problem was first discovered on 2.3.5 and still exists on 2.3.8.  From what I can tell from code inspection, the problem is fixed on 3.0.\n\nI found the problematic line in:\n  lib/active_record/connection_adapters/abstract/schema_statements.rb\nin the initialize_schema_migrations_table method, which first tries to detect if schema_migrations exists or not.  This check fails because it is comparing the items returned from the tables method (strings of table names, not prefixed/suffixed) with the return value from ActiveRecord::Migrator.schema_migrations_table_name (which, in our case, includes the database prefix).  The check always fails, even when schema_migrations exists, thus the code to recreate it is where the exception occurs.\n\nI've created a one-line patch which I have attached to this ticket.\n\nI have run the following rake tests with all tests passing:\n  test_mysql test_sqlite3 test_postgresql\n", "labels": [], "number": 690, "updated_at": "2011-05-21 15:12:02", "user": 789801, "closed_at": "2011-05-21 15:12:02", "id": 904367, "title": "schema_migrations already exists error on db:migrate with two-database app", "url": "https://api.github.com/repos/rails/rails/issues/690", "created_at": "2011-05-16 03:45:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170229", "text": "_Imported from Lighthouse._\nComment by **Wade Stebbings** - 2010-06-24 21:10:11 UTC\n\nI have not yet created a unique unit-test for this issue, but I've started looking into it.\n\nTo recreate the problem, a part of the description which skimmed-over in the description above, I have these things going on in my rails app:\n- The app connects to two databases, one as the natural rails database, and one read-only metadata database which is quite huge.  Models for the metadata database inherit from an abstract class called Metadata:\n\nclass Metadata < ActiveRecord::Base\n\n  self.abstract_class = true\n\n  def self.database_name\n\n```\nmetadata = \"#{RAILS_ENV}_metadata\"\nconfigurations[metadata]['database']\n```\n\n  end\n\n  def self.connect_to_metadata_database\n    metadata = \"#{RAILS_ENV}_metadata\"\n    @schema_prefix = Metadata.database_name + '.'\n    self.establish_connection metadata\n        puts \"Connected to #{metadata.inspect}\"\n  end\n\n  connect_to_metadata_database\n\n  def self.table_name_prefix\n    @schema_prefix\n  end\n\nend\n- Also, in order to deal with another problem with allowing joins to occur across the two databases, I created an initializer file, which looks like this:\n\nclass ActiveRecord::Base\n  def self.set_schema_prefix\n    @@schema_prefix = configurations[RAILS_ENV]['database'] + '.'\n  end\n  set_schema_prefix\n  def self.table_name_prefix\n    @@schema_prefix\n  end\nend\n\nclass ActiveRecord::ConnectionAdapters::MysqlAdapter\n  def prefix_tables\n    self.tables.map{|t| @@schema_prefix + t}\n  end\n  def self.set_schema_prefix\n    @@schema_prefix = ActiveRecord::Base.configurations[RAILS_ENV]['database'] + '.'\n  end\n  set_schema_prefix\nend\n", "created_at": "2011-05-16 03:45:40", "user": 789801, "id": 1170229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170230", "text": "_Imported from Lighthouse._\nComment by **Wade Stebbings** - 2010-06-24 21:13:46 UTC\n\ncode-formatting got messed up above, here's another try..\n\n``` ruby\nclass Metadata < ActiveRecord::Base\n  self.abstract_class = true\n  def self.database_name\n    metadata = \"#{RAILS_ENV}_metadata\"\n    configurations[metadata]['database']\n  end\n  def self.connect_to_metadata_database\n    metadata = \"#{RAILS_ENV}_metadata\"\n    @schema_prefix = Metadata.database_name + '.'\n    self.establish_connection metadata\n        puts \"Connected to #{metadata.inspect}\"\n  end\n  connect_to_metadata_database\n  def self.table_name_prefix\n    @schema_prefix\n  end\nend\n```\n\n``` ruby\nclass ActiveRecord::Base\n  def self.set_schema_prefix\n    @@schema_prefix = configurations[RAILS_ENV]['database'] + '.'\n  end\n  set_schema_prefix\n  def self.table_name_prefix\n    @@schema_prefix\n  end\nend\n\nclass ActiveRecord::ConnectionAdapters::MysqlAdapter\n  def prefix_tables\n    self.tables.map{|t| @@schema_prefix + t}\n  end\n  def self.set_schema_prefix\n    @@schema_prefix = ActiveRecord::Base.configurations[RAILS_ENV]['database'] + '.'\n  end\n  set_schema_prefix\nend\n```\n", "created_at": "2011-05-16 03:45:41", "user": 789801, "id": 1170230}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170231", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 17:01:44 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:45:43", "user": 789801, "id": 1170231}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170232", "text": "_Imported from Lighthouse._\nComment by **Wade Stebbings** - 2011-02-02 19:11:37 UTC\n\nI don't believe this problem exists in rails 3.0 from looking at the code itself, as stated in my original posting.  This is a rails 2 issue only.  If no work on rails 2 is going to occur, even the latest of the 2.x branches, then this issue can be closed.\n", "created_at": "2011-05-16 03:45:44", "user": 789801, "id": 1170232}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170233", "text": "Attachments saved to Gist: http://gist.github.com/971676\n", "created_at": "2011-05-16 03:45:45", "user": 789801, "id": 1170233}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/4969\nCreated by **fkocherga** - 2011-02-19 09:28:17 UTC\n\nThe problem happens if one decide to comment out in application.rb:\n    #config.action_dispatch.x_sendfile_header = 'X-Sendfile'\nrelying on the web server providing correct header values, for example for Nginx:\n    proxy_set_header   X-Sendfile-Type     X-Accel-Redirect;\nand on Rack::Sendfile middleware handling these headers correctly.\nServer's 'X-Sendfile-Type' value gets simply ignored by Rack::Sendfile if latter is initialized with empty string:\n\n```\n#rack/sendfile.rb\ndef variation(env)\n  @variation ||\n    env['sendfile.type'] ||\n    env['HTTP_X_SENDFILE_TYPE']\nend\n```\n\nThe Rack::Sendfile also has to be fixed, however before it does the Rails app is able to work correctly just by providing nil as default.\n", "labels": [], "number": 691, "updated_at": "2011-05-21 15:12:02", "user": 789801, "closed_at": "2011-05-21 15:12:02", "id": 904368, "title": "Fixing config.action_dispatch.x_sendfile_header default", "url": "https://api.github.com/repos/rails/rails/issues/691", "created_at": "2011-05-16 03:45:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170235", "text": "_Imported from Lighthouse._\nComment by **fkocherga** - 2010-06-25 14:13:40 UTC\n\nCannot attach file, some lighthouseapp problems, the patch is very simple:\n\n---\n\n actionpack/lib/action_dispatch/railtie.rb |    4 ++--\n 1 files changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/actionpack/lib/action_dispatch/railtie.rb b/actionpack/lib/action_dispatch/railtie.rb\nindex ed93211..5aa217b 100644\n--- a/actionpack/lib/action_dispatch/railtie.rb\n+++ b/actionpack/lib/action_dispatch/railtie.rb\n@@ -4,7 +4,7 @@ require \"rails\"\n module ActionDispatch\n   class Railtie < Rails::Railtie\n     config.action_dispatch = ActiveSupport::OrderedOptions.new\n-    config.action_dispatch.x_sendfile_header = \"\"\n-    config.action_dispatch.x_sendfile_header = nil\n   config.action_dispatch.ip_spoofing_check = true\n   config.action_dispatch.show_exceptions = true\n\n@@ -13,4 +13,3 @@ module ActionDispatch\n       ActionDispatch::Callbacks.to_prepare { app.routes_reloader.execute_if_updated }\n     end\n\n##    end\n\n1.7.0.4\n", "created_at": "2011-05-16 03:45:51", "user": 789801, "id": 1170235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170237", "text": "_Imported from Lighthouse._\nComment by **fkocherga** - 2010-06-25 14:15:44 UTC\n\nFormatted properly:\n\n```\n---\n actionpack/lib/action_dispatch/railtie.rb |    4 ++--\n 1 files changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/actionpack/lib/action_dispatch/railtie.rb b/actionpack/lib/action_dispatch/railtie.rb\nindex ed93211..5aa217b 100644\n--- a/actionpack/lib/action_dispatch/railtie.rb\n+++ b/actionpack/lib/action_dispatch/railtie.rb\n@@ -4,7 +4,7 @@ require \"rails\"\n module ActionDispatch\n   class Railtie < Rails::Railtie\n     config.action_dispatch = ActiveSupport::OrderedOptions.new\n-    config.action_dispatch.x_sendfile_header = \"\"\n+    config.action_dispatch.x_sendfile_header = nil\n     config.action_dispatch.ip_spoofing_check = true\n     config.action_dispatch.show_exceptions = true\n\n@@ -13,4 +13,3 @@ module ActionDispatch\n       ActionDispatch::Callbacks.to_prepare { app.routes_reloader.execute_if_updated }\n     end\n   end\n-- \n1.7.0.4\n```\n", "created_at": "2011-05-16 03:45:52", "user": 789801, "id": 1170237}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170238", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-16 22:24:35 UTC\n\n-1, the current behavior is intended and documented (barely, in the generated application.rb):\n\n```\n  # If you have no front-end server that supports something like X-Sendfile,\n  # just comment this out and Rails will serve the files\n```\n\nIt seems to me you can configure autodetection based on X-Sendfile-Type by setting @config.action_dispatch.x_sendfile_header=nil@ in your environment?\nIf that's the case, it should probably be documented.\nIf you can confirm that's the case, I can take care of updating the documentation.\n", "created_at": "2011-05-16 03:45:54", "user": 789801, "id": 1170238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170239", "text": "_Imported from Lighthouse._\nComment by **Bertg** - 2010-10-18 15:13:59 UTC\n\nI think the default behaviour is confusing. and the patch should be applied, and have the documentation reflect this behaviour.\n\nI can't think of any reason why Rails should, by default, disable the auto detection of these settings.\n", "created_at": "2011-05-16 03:45:55", "user": 789801, "id": 1170239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170240", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-19 21:22:27 UTC\n\n@Bertg: feel free to provide a patch that changes both the code and the documentation.\nNote that Rails is not disabling auto-detection; the developer is, if she comments out the line as directed by the documentation.\n", "created_at": "2011-05-16 03:45:56", "user": 789801, "id": 1170240}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170241", "text": "Attachments saved to Gist: http://gist.github.com/971677\n", "created_at": "2011-05-16 03:45:58", "user": 789801, "id": 1170241}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5006\nCreated by **Hery** - 2010-11-17 01:58:29 UTC\n\nHi guys,\nI am running ruby-1.9@HEAD and rails@master\n\nTo reproduce it :\n\n``` ruby\n  log = ActiveSupport::BufferedLogger.new('/tmp/toto.log')\n  str = \"h√©h√©\"\n  str.force_encoding 'us-ascii'\n  log.add 0, str\n```\n\n``` ruby\n  Encoding::InvalidByteSequenceError: \"\\xC3\" on US-ASCII\n    from /home/ruby/Software/rails/activesupport/lib/active_support/buffered_logger.rb:104:in `write'\n    from /home/ruby/Software/rails/activesupport/lib/active_support/buffered_logger.rb:104:in `block in flush'\n    from <internal:prelude>:10:in `synchronize'\n    from /home/ruby/Software/rails/activesupport/lib/active_support/buffered_logger.rb:101:in `flush'\n    from /home/ruby/Software/rails/activesupport/lib/active_support/buffered_logger.rb:121:in `auto_flush'\n    from /home/ruby/Software/rails/activesupport/lib/active_support/buffered_logger.rb:66:in `add'\n    from (irb):7\n    from /home/ruby/Software/rails/railties/lib/rails/commands/console.rb:47:in `start'\n    from /home/ruby/Software/rails/railties/lib/rails/commands/console.rb:8:in `start'\n    from /home/ruby/Software/rails/railties/lib/rails/commands.rb:23:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n```\n\nI ran into this issue when I wanted to migrate my old project under rails 3.x :\n- I created a new project (rails new mediatec)\n- My database encoding is latin1 (database.yml => encoding:latin1)\n- Ran my tests and see errors\n- typed in console `u = User.new :name => \"St√©phane XXXX\"; u.valid?` and see the us-ascii / utf-8 conflict\n- There is a validation rule in my User class : validates :name, :presence => true, :uniqueness => true\n", "labels": [], "number": 692, "updated_at": "2014-05-02 17:16:37", "user": 789801, "closed_at": "2011-05-16 03:47:02", "id": 904369, "title": "ActiveSupport::BufferedLogger and us-ascii message on ruby 1.9.x", "url": "https://api.github.com/repos/rails/rails/issues/692", "created_at": "2011-05-16 03:46:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170242", "text": "_Imported from Lighthouse._\nComment by **Bruno Michel** - 2010-06-29 20:44:20 UTC\n\nYehuda katz has worked on encoding problem today. See http://github.com/rails/rails/commit/25215d7285db10e2c04d903f251b791342e4dd6a for example. Can you check if you have the problem before and/or after this commit?\n", "created_at": "2011-05-16 03:46:04", "user": 789801, "id": 1170242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170243", "text": "_Imported from Lighthouse._\nComment by **Hery** - 2010-06-29 21:28:55 UTC\n\nI have the last HEAD of master and it does not work either.\n\nI ran into this issue since I have a database in latin1\n\n``` yaml\n#config/database.yml\n\ndevelopment:\n  encoding: latin1\n  # blabla ...\n\n```\n\n``` bash\nruby $PATH_TO_RAILS3 c\n```\n\n``` ruby\nu = User.new :name => 'St√©phane XXXX'\n\nu.valid?\n```\n\nAnd then it raises this error\n\n``` ruby\n\nEncoding::UndefinedConversionError: \"\\xC3\" from ASCII-8BIT to UTF-8\n    from /home/hery/Software/rails/activesupport/lib/active_support/buffered_logger.rb:104:in `write'\n    from /home/hery/Software/rails/activesupport/lib/active_support/buffered_logger.rb:104:in `block in flush'\n    from <internal:prelude>:10:in `synchronize'\n    from /home/hery/Software/rails/activesupport/lib/active_support/buffered_logger.rb:101:in `flush'\n    from /home/hery/Software/rails/activesupport/lib/active_support/buffered_logger.rb:121:in `auto_flush'\n    from /home/hery/Software/rails/activesupport/lib/active_support/buffered_logger.rb:66:in `add'\n    from /home/hery/Software/rails/activesupport/lib/active_support/buffered_logger.rb:77:in `debug'\n    from /home/hery/Software/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:210:in `rescue in log'\n    from /home/hery/Software/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:201:in `log'\n    from /home/hery/Software/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:286:in `execute'\n    from /home/hery/Software/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:616:in `select'\n    from /home/hery/Software/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'\n    from /home/hery/Software/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'\n    from /home/hery/Software/rails/activerecord/lib/active_record/base.rb:427:in `find_by_sql'\n    from /home/hery/Software/rails/activerecord/lib/active_record/relation.rb:63:in `to_a'\n    from /home/hery/Software/rails/activerecord/lib/active_record/relation/finder_methods.rb:324:in `find_first'\n... 4 levels...\n    from /home/hery/Software/rails/activemodel/lib/active_model/validator.rb:151:in `each'\n    from /home/hery/Software/rails/activemodel/lib/active_model/validator.rb:151:in `validate'\n    from /home/hery/Software/rails/activesupport/lib/active_support/callbacks.rb:309:in `_callback_before_15'\n    from /home/hery/Software/rails/activesupport/lib/active_support/callbacks.rb:419:in `_run_validate_callbacks'\n    from /home/hery/Software/rails/activemodel/lib/active_model/validations.rb:201:in `run_validations!'\n    from /home/hery/Software/rails/activemodel/lib/active_model/validations/callbacks.rb:53:in `block in run_validations!'\n    from /home/hery/Software/rails/activesupport/lib/active_support/callbacks.rb:408:in `_run_validation_callbacks'\n    from /home/hery/Software/rails/activemodel/lib/active_model/validations/callbacks.rb:53:in `run_validations!'\n    from /home/hery/Software/rails/activemodel/lib/active_model/validations.rb:168:in `valid?'\n    from /home/hery/Software/rails/activerecord/lib/active_record/validations.rb:55:in `valid?'\n    from (irb):3\n    from /home/hery/Software/rails/railties/lib/rails/commands/console.rb:47:in `start'\n    from /home/hery/Software/rails/railties/lib/rails/commands/console.rb:8:in `start'\n    from /home/hery/Software/rails/railties/lib/rails/commands.rb:23:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n\n```\n\nI have attach a patch but does not know if it is (add some tests....)\n", "created_at": "2011-05-16 03:46:06", "user": 789801, "id": 1170243}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170244", "text": "_Imported from Lighthouse._\nComment by **Serge Balyuk** - 2010-07-04 18:00:06 UTC\n\n@Hery: can you please give your output in console for this:\n\n```\n\nirb(main):001:0> __ENCODING__\n=> #<Encoding:UTF-8>\nirb(main):002:0> 'whatever'.encoding\n=> #<Encoding:UTF-8>\nirb(main):003:0> ENV['LC_CTYPE']\n=> \"UTF-8\"\n\n```\n\nirb encoding seems to be determined by shell locale settings (`$LC_CTYPE`, etc)\n\nAnd for `\"h√©h√©\".force_encoding 'us-ascii'`: Exception may be the correct behavior here. The string tagged with ascii contains non-ascii characters, doesn't it?\n", "created_at": "2011-05-16 03:46:08", "user": 789801, "id": 1170244}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170245", "text": "_Imported from Lighthouse._\nComment by **Hery** - 2010-07-04 18:23:27 UTC\n\n@serge\n\nMy encoding environment variables are right  : I only use UTF-8\nIt's a problem with a database encoded in latin1 and logger (in ascii) \n\nI use UTF-8 in my application project and have a database in latin1\n\nThe code above is just to show you how to reproduce this bug.... \n\nApplication in UTF-8 and database in latin1 ...\n\n``` ruby\n>> __ENCODING__\n=> #<Encoding:UTF-8>\n>> 'whaterver'.encoding\n=> #<Encoding:UTF-8>\n>> ENV['LC_TYPE']\n=> nil\n8>\n\n```\n", "created_at": "2011-05-16 03:46:11", "user": 789801, "id": 1170245}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170246", "text": "_Imported from Lighthouse._\nComment by **Serge Balyuk** - 2010-07-04 21:13:56 UTC\n\nThanks for the update, Hery! I tried to reproduce the bug with postgres DB with no luck. (I did create a database in latin1 and set up database.yml accordingly)\n\nBut your mysql backtrace is interesting, it looks like exception is raised in recuse block for another one. I wonder how interpolated message on line 209 of abstract_adapter.rb gets incorrect encoding tag. Will try to get mysql setup to find that out. What mysql connector gem and version are you using?\n\nI think your logger should already be in UTF-8, one way to check is:\n\n```\n\nirb(main):011:0* ActiveRecord::Base.logger.instance_variable_get('@log').external_encoding\n=> #<Encoding:UTF-8>\nirb(main):012:0> ActiveRecord::Base.logger.instance_variable_get('@log').internal_encoding\n=> nil\n\n```\n", "created_at": "2011-05-16 03:46:16", "user": 789801, "id": 1170246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170247", "text": "_Imported from Lighthouse._\nComment by **Hery** - 2010-07-04 22:08:29 UTC\n\nI have the same results\n\nDo you have a validation field ?\n\nI use database/tables in latin1 with mysql 5.1\n\nYou must create a model with a validates_uniqueness_of  and test the validation with accentuated characters\n", "created_at": "2011-05-16 03:46:18", "user": 789801, "id": 1170247}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170248", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-07-04 22:23:54 UTC\n\nI just tried this with a latin1 mysql db with a uniqueness validation; no issue.\n\nFrom my logs:\n\n```\n  Category Load (0.4ms)  SELECT `categories`.`id` FROM `categories`\nWHERE (`categories`.`name` = BINARY 'St√©phane XXXX') AND\n(`categories`.`project_id` = 1) AND (`categories`.`type` IS NULL)\nLIMIT 1\n```\n\nI'm not sure how to reproduce.\n", "created_at": "2011-05-16 03:46:19", "user": 789801, "id": 1170248}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170249", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-07-04 22:37:11 UTC\n\nDoh! I was on Ruby 1.8. Reproduced on 1.9.2 :)\n", "created_at": "2011-05-16 03:46:21", "user": 789801, "id": 1170249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170250", "text": "_Imported from Lighthouse._\nComment by **Hery** - 2010-07-04 22:41:11 UTC\n\nyep ruby 1.9.x :) I Just wrote that on my first thread  ;)\n", "created_at": "2011-05-16 03:46:23", "user": 789801, "id": 1170250}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170251", "text": "_Imported from Lighthouse._\nComment by **Serge Balyuk** - 2010-07-05 14:51:12 UTC\n\nSuccessfully reproduced this with mysql. To make the long story short, here's the distilled difference in behaviors of mysql and pg connection adapters:\n\nmysql:\n\n```\n\n> User.connection.quote('St√©phane').encoding\n=> #<Encoding:ASCII-8BIT>\n\n```\n\npg:\n\n```\n\n> User.connection.quote('St√©phane').encoding\n=> #<Encoding:ISO-8859-1>\n\n```\n\nI believe the root cause is in adapters' `quote_string` methods. Postgres adapter calls pg gem `escape` method which takes care of encodings:\n\n```\n\npg.c around line 1375:\n\n * Encoding of escaped string will be equal to client encoding of connection.\n\n```\n\nand mysql obviously doesn't do that (or at least mysql 2.8.1 gem doesn't do that for me).\n\nThe workaround may be to make `MysqlAdapter#quote_string` look more like this:\n\n```\n\n      def quote_string(string)\n        encoding = Encoding.find(@config[:encoding]) rescue nil\n        encoded_string = encoding ? string.encode(encoding) : string\n        quoted_string = @connection.quote(encoded_string)\n        encoding ? quoted_string.force_encoding(encoding) : quoted_string\n      end\n\n```\n\nWith some extra care for making `latin1` encoding alias or changing it to `iso-8859-1` in `database.yml`.\n\nBut I wonder if the issue should really be addressed in mysql gem code.\n", "created_at": "2011-05-16 03:46:24", "user": 789801, "id": 1170251}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170252", "text": "_Imported from Lighthouse._\nComment by **Serge Balyuk** - 2010-07-06 16:03:14 UTC\n\nPlease find proposed patch based on the above. The `database.yml` should include another setting `ruby_encoding: iso-8859-1` for the `encoding: latin1` case. That's because I couldn't find any way to convince mysql to understand `iso-8859-1` name, and at the same time I didn't find a way to dynamically add encoding aliases in ruby (1.9.1).\n\nI understand that it's not the prettiest workaround, so I'm very open to suggestions. However the main question remains the same: is this encoding handling a responsibility of `MysqlAdapter` or mysql gem?\n", "created_at": "2011-05-16 03:46:26", "user": 789801, "id": 1170252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170253", "text": "_Imported from Lighthouse._\nComment by **Sebastian A. Espindola** - 2010-07-27 22:18:32 UTC\n\nI really don't think this kind of mangling belongs in MysqlAdapter.\nThe [mysql2 gem](http://github.com/brianmario/mysql2) fixes the issue:\n\n<code>ruby-1.9.2-preview3 > User.connection.quote('Sebasti√°n').encoding\n => #Encoding:ISO-8859-1</code>\n\nI haven't tested with mysqlplus, though.\n", "created_at": "2011-05-16 03:46:27", "user": 789801, "id": 1170253}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170254", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:46:29", "user": 789801, "id": 1170254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170255", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:57 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:46:30", "user": 789801, "id": 1170255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170256", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:35:05 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:46:32", "user": 789801, "id": 1170256}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170257", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:12 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:46:33", "user": 789801, "id": 1170257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170258", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:46:35", "user": 789801, "id": 1170258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170259", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:46:37", "user": 789801, "id": 1170259}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170260", "text": "Attachments saved to Gist: http://gist.github.com/971688\n", "created_at": "2011-05-16 03:46:38", "user": 789801, "id": 1170260}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170269", "text": "Fixed on master.\n", "created_at": "2011-05-16 03:47:02", "user": 9582, "id": 1170269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4235825", "text": "this is still present in Rails **2.3.14** using `ruby-1.9.2-p290`. The patch above works, but might be worth adding it to the tree.\n", "created_at": "2012-02-29 11:22:47", "user": 52377, "id": 4235825}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5015\nCreated by **Akira Matsuda** - 2011-04-09 22:41:51 UTC\n\nFor example, while Blog has_many :posts and Post has_many :comments, both of the following two Arelish query fails:\n\n``` ruby\nBlog.joins(:posts) & Post.joins(:comments)\n```\n\n``` ruby\nComment.joins(:post) & Post.joins(:blog)\n```\n\nI really hope this nested :joins to work as expected, since it might be almost equivalent to:\n\n``` ruby\nComment.first :joins => {:post => :blog}\n```\n\nwhich has been working since Rails 1.1 or so.\n", "labels": [], "number": 693, "updated_at": "2011-05-21 15:12:03", "user": 789801, "closed_at": "2011-05-21 15:12:02", "id": 904371, "title": "nested :joins scope can't be merged correctly", "url": "https://api.github.com/repos/rails/rails/issues/693", "created_at": "2011-05-16 03:46:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170261", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-06-30 11:11:55 UTC\n\nHey Akira! I'm not sure if we support & in relations. Have you tried the following instead?\n\n```\nComment.joins(:post => :blog)\n```\n\nIf not, could you please add a test case to Rails suite showing what do you want to achieve? Thanks a lot!\n", "created_at": "2011-05-16 03:46:45", "user": 789801, "id": 1170261}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5027\nCreated by **Garrett Bjerkhoel** - 2010-10-19 16:52:54 UTC\n\nIn Rails master whenever an exception is raised, it takes a rough 30 seconds for the page to render completely with a number of `SHOW TABLES` MySQL queries.\n\n```\nStarted GET \"/\" for 127.0.0.1 at Thu Jul 01 09:26:36 -0400 2010\n  SQL (1.6ms)  describe `approvals_users`\n  SQL (14.1ms)  describe `clients_users`\n  SQL (1.4ms)  describe `agencies_users`\n  SQL (1.3ms)  describe `clients_users`\n  SQL (1.2ms)  describe `approvals_users`\n  SQL (1.4ms)  describe `permissions_users`\n  Processing by DashboardController#show as HTML\n  SQL (1.4ms)  describe `agencies_users`\n  Agency Load (0.4ms)  SELECT `agencies`.* FROM `agencies` WHERE (`agencies`.`subdomain` = 'test') LIMIT 1\n  Plan Load (0.4ms)  SELECT `plans`.`id`, `plans`.`name`, `plans`.`price`, `plans`.`client_limit`, `plans`.`allow_hosted_domain`, `plans`.`created_at`, `plans`.`updated_at`, `plans`.`email_access`, `plans`.`max_file_size`, `plans`.`is_secure`, `plans`.`create_templates`, `plans`.`token`, `plans`.`file_types` FROM `plans` WHERE (`plans`.`id` = 3) LIMIT 1\n  User Load (0.4ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 1) LIMIT 1\n  SQL (1.4ms)  describe `permissions_users`\n  Permission Load (0.5ms)  SELECT permissions.* FROM permissions INNER JOIN permissions_users ON permissions.id = permissions_users.permission_id WHERE permissions_users.user_id = 1 AND permissions_users.agency_id = 1 LIMIT 1\n  Client Load (0.5ms)  SELECT clients.* FROM clients INNER JOIN clients_users ON clients.id = clients_users.client_id WHERE clients_users.agency_id = 1 AND clients_users.user_id = 1 ORDER BY clients.name ASC\n  Project Load (0.5ms)  SELECT `projects`.`id`, `projects`.`client_id`, `projects`.`name`, `projects`.`slug`, `projects`.`description`, `projects`.`due_at`, `projects`.`position`, `projects`.`created_at`, `projects`.`updated_at`, `projects`.`is_public`, `projects`.`public_key`, `projects`.`pages_count` FROM `projects` WHERE (`projects`.client_id = 93) ORDER BY position ASC, created_at ASC\n  Page Load (0.7ms)  SELECT `pages`.* FROM `pages` WHERE (`pages`.project_id = 28) ORDER BY pages.position ASC, pages.created_at ASC, id DESC LIMIT 1\n  Revision Load (0.5ms)  SELECT `revisions`.`id`, `revisions`.`user_id`, `revisions`.`page_id`, `revisions`.`version`, `revisions`.`asset_file_name`, `revisions`.`asset_file_size`, `revisions`.`asset_file_type`, `revisions`.`asset_updated_at`, `revisions`.`created_at`, `revisions`.`updated_at`, `revisions`.`comments_count`, `revisions`.`agency_id`, `revisions`.`asset_stored`, `revisions`.`panda_id`, `revisions`.`type` FROM `revisions` WHERE (`revisions`.page_id = 1) ORDER BY revisions.version DESC LIMIT 1\nRendered dashboard/partials/_project.html.haml (61.6ms)\nRendered dashboard/partials/_client.html.haml (74.9ms)\n  SQL (0.9ms)  SHOW TABLES\n  SQL (0.7ms)  SHOW TABLES\n  SQL (1.0ms)  SHOW TABLES\n  SQL (0.9ms)  SHOW TABLES\n  SQL (1.0ms)  SHOW TABLES\n  SQL (0.8ms)  SHOW TABLES\n  SQL (1.0ms)  SHOW TABLES\n  SQL (0.8ms)  SHOW TABLES\n  SQL (1.0ms)  SHOW TABLES\n  SQL (0.8ms)  SHOW TABLES\n  SQL (1.0ms)  SHOW TABLES\n  SQL (0.8ms)  SHOW TABLES\n  SQL (1.0ms)  SHOW TABLES\n  SQL (0.9ms)  SHOW TABLES\nRendered dashboard/show.html.haml within layouts/application (21656.9ms)\nCompleted   in 21781ms\n\nActionView::Template::Error (undefined local variable or method `throw_error' for #<#<Class:0x106635770>:0x1066334e8>):\n    12:   .title_bar\n    13:     %h4 Recent Activity\n    14:   .stream\n    15:     = throw_error\n    16:     - cache [current_agency, current_user, 'feeds'] do\n    17:       - feed_list = Feed.list\n    18:       - feed_list[:items].each do |item, feed|\n  app/views/dashboard/show.html.haml:15:in `_app_views_dashboard_show_html_haml__665120934_2201062920_0'\n  app/controllers/dashboard_controller.rb:6:in `show'\n\nRendered /Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-21957b72ea394c679d9b17e75b570cc99596322d/actionpack/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.4ms)\n  SQL (1.1ms)  SHOW TABLES\n  SQL (0.8ms)  SHOW TABLES\n  SQL (0.7ms)  SHOW TABLES\n  SQL (0.9ms)  SHOW TABLES\n  SQL (0.7ms)  SHOW TABLES\n  SQL (0.9ms)  SHOW TABLES\n  SQL (0.7ms)  SHOW TABLES\n  SQL (0.9ms)  SHOW TABLES\n  SQL (0.7ms)  SHOW TABLES\n  SQL (1.0ms)  SHOW TABLES\n  SQL (0.8ms)  SHOW TABLES\n  SQL (0.7ms)  SHOW TABLES\n  SQL (0.7ms)  SHOW TABLES\n  SQL (0.9ms)  SHOW TABLES\n  SQL (0.8ms)  SHOW TABLES\nRendered /Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-21957b72ea394c679d9b17e75b570cc99596322d/actionpack/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (17415.2ms)\nRendered /Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-21957b72ea394c679d9b17e75b570cc99596322d/actionpack/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (17738.5ms)\n```\n\nThis has happened for the following exceptions and more:\n- NoMethodError\n- ActiveRecord::RecordNotFound\n- ActionView::Template::Error\n\nAlthough there are a few exceptions that fail and render immediately, like `ActionController::UnknownAction`. Attached is the stack trace.\n", "labels": [], "number": 694, "updated_at": "2011-05-21 15:12:03", "user": 789801, "closed_at": "2011-05-21 15:12:03", "id": 904372, "title": "_request_and_response.erb and diagnostics.erb take an increasingly long time to render in development with multiple SHOW TABLES calls", "url": "https://api.github.com/repos/rails/rails/issues/694", "created_at": "2011-05-16 03:46:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170263", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-07-01 17:27:15 UTC\n\nI created a brand new rails app and added a single line at the top of index page.\n\n``` ruby\n<% raise 'boom' %>\n```\n\nI see my exception instantly. Here is my log\n\n``` ruby\nStarted GET \"/users\" for 127.0.0.1 at Thu Jul 01 13:23:24 -0400 2010\n  Processing by UsersController#index as HTML\n  SQL (0.8ms)   SELECT name\n FROM sqlite_master\n WHERE type = 'table' AND NOT name = 'sqlite_sequence'\n\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\"\nRendered users/index.html.erb within layouts/application (4.0ms)\nCompleted   in 38ms\n\nActionView::Template::Error (boom):\n    1: <% raise 'boom' %>\n    2: \n    3: <h1>Listing users</h1>\n    4: \n  app/views/users/index.html.erb:1:in `_app_views_users_index_html_erb___518242468_2158308900_0'\n  app/controllers/users_controller.rb:7:in `index'\n\nRendered /Users/nsingh/dev/working/rails_tickets/rails/actionpack/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)\nRendered /Users/nsingh/dev/working/rails_tickets/rails/actionpack/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (3.9ms)\nRendered /Users/nsingh/dev/working/rails_tickets/rails/actionpack/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (9.6ms)\n```\n\nYou are using haml. Can you try without haml although I don't expect haml to be an issue?\n\nCould it be possible that some other plugin/gem is interfering. Could you please list all gems/plugins you are using in your app?\n\nthanks\n", "created_at": "2011-05-16 03:46:53", "user": 789801, "id": 1170263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170264", "text": "_Imported from Lighthouse._\nComment by **Garrett Bjerkhoel** - 2010-07-01 17:45:04 UTC\n\nThese errors are happening even before I hit the views sometimes; Builder/xml, within controllers, etc.\n\nI thought maybe the Hoptoad Gem might have something to do with this because that's its job to report errors, so I took that out and it still takes increasingly long to render any sort of exception.\n\n``` ruby\nStarted POST \"/api/v1/agencies.xml\" for 127.0.0.1 at Thu Jul 01 13:34:38 -0400 2010\n  SQL (1.6ms)  describe `approvals_users`\n  SQL (1.8ms)  describe `clients_users`\n  SQL (1.5ms)  describe `agencies_users`\n  SQL (1.3ms)  describe `clients_users`\n  SQL (1.2ms)  describe `approvals_users`\n  SQL (2.3ms)  describe `permissions_users`\n  Processing by Api::V1::AgenciesController#create as XML\n  Parameters: {\"api_key\"=>\"123132\"}\n  SQL (1.5ms)  describe `agencies_users`\n  Agency Load (1.9ms)  SELECT `agencies`.* FROM `agencies` WHERE (`agencies`.`api_key` = '123132') LIMIT 1\nCompleted   in 37ms\n\nActiveRecord::RecordNotFound (Couldn't find Agency with api_key = 123132):\n  app/models/agency.rb:58:in `find_by_domain'\n  app/controllers/api_controller.rb:32:in `current_agency'\n  app/controllers/api_controller.rb:94:in `run_api_validations'\n\nRendered /Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.5ms)\nRendered /Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (18154.3ms)\nRendered /Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (18542.1ms)\n```\n\nStacktrace:\n\n``` ruby\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activerecord/lib/active_record/relation/finder_methods.rb:230:in `find_by_attributes'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activerecord/lib/active_record/base.rb:1036:in `send'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activerecord/lib/active_record/base.rb:1036:in `method_missing'\napp/models/agency.rb:58:in `find_by_domain'\napp/controllers/api_controller.rb:32:in `current_agency'\napp/controllers/api_controller.rb:94:in `run_api_validations'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activesupport/lib/active_support/callbacks.rb:430:in `_run__353673824__process_action__1623385099__callbacks'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activesupport/lib/active_support/callbacks.rb:404:in `send'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activesupport/lib/active_support/callbacks.rb:404:in `_run_process_action_callbacks'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activesupport/lib/active_support/callbacks.rb:93:in `send'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activesupport/lib/active_support/callbacks.rb:93:in `run_callbacks'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/abstract_controller/callbacks.rb:17:in `process_action'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_controller/metal/instrumentation.rb:29:in `process_action'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activesupport/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activesupport/lib/active_support/notifications.rb:47:in `__send__'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activesupport/lib/active_support/notifications.rb:47:in `instrument'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_controller/metal/instrumentation.rb:28:in `process_action'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_controller/metal/rescue.rb:8:in `process_action'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/abstract_controller/base.rb:105:in `process'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/abstract_controller/rendering.rb:40:in `process'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_controller/metal.rb:133:in `dispatch'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_controller/metal.rb:173:in `action'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/routing/route_set.rb:29:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/routing/route_set.rb:29:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/vendor/rack-mount-0.6.6.pre/rack/mount/route_set.rb:148:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/vendor/rack-mount-0.6.6.pre/rack/mount/code_generation.rb:89:in `recognize'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/vendor/rack-mount-0.6.6.pre/rack/mount/code_generation.rb:66:in `optimized_each'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/vendor/rack-mount-0.6.6.pre/rack/mount/code_generation.rb:88:in `recognize'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/vendor/rack-mount-0.6.6.pre/rack/mount/route_set.rb:139:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/routing/route_set.rb:486:in `call'\nvendor/plugins/rack_openid/lib/rack/openid.rb:98:in `call'\nhoptoad_notifier (2.3.0) lib/hoptoad_notifier/rack.rb:27:in `call'\nhaml (3.0.13) lib/sass/plugin/rack.rb:41:in `call'\nwarden (0.10.7) lib/warden/manager.rb:35:in `call'\nwarden (0.10.7) lib/warden/manager.rb:34:in `catch'\nwarden (0.10.7) lib/warden/manager.rb:34:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/head.rb:14:in `call'\nrack (1.2.1) lib/rack/methodoverride.rb:24:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/flash.rb:177:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/session/abstract_store.rb:144:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/cookies.rb:268:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activerecord/lib/active_record/query_cache.rb:32:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:28:in `cache'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activerecord/lib/active_record/query_cache.rb:12:in `cache'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activerecord/lib/active_record/query_cache.rb:31:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:367:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/callbacks.rb:46:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/activesupport/lib/active_support/callbacks.rb:410:in `_run_call_callbacks'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/callbacks.rb:44:in `call'\nrack (1.2.1) lib/rack/sendfile.rb:107:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:48:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/railties/lib/rails/rack/logger.rb:13:in `call'\nrack (1.2.1) lib/rack/runtime.rb:17:in `call'\nrack (1.2.1) lib/rack/lock.rb:11:in `call'\nrack (1.2.1) lib/rack/lock.rb:11:in `synchronize'\nrack (1.2.1) lib/rack/lock.rb:11:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/actionpack/lib/action_dispatch/middleware/static.rb:30:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/railties/lib/rails/application.rb:162:in `call'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/railties/lib/rails/application.rb:77:in `send'\n/Users/garrett/.bundle/ruby/1.8/bundler/gems/rails-07b08721a226ff01f983e61d99ab4da96e296c97-53b34e84762b7f2d6b641f99dadbb1eab42907ab/railties/lib/rails/application.rb:77:in `method_missing'\npassenger (2.2.11) lib/phusion_passenger/rack/request_handler.rb:92:in `process_request'\npassenger (2.2.11) lib/phusion_passenger/abstract_request_handler.rb:207:in `main_loop'\npassenger (2.2.11) lib/phusion_passenger/rack/application_spawner.rb:118:in `run'\npassenger (2.2.11) lib/phusion_passenger/rack/application_spawner.rb:65:in `spawn_application'\npassenger (2.2.11) lib/phusion_passenger/utils.rb:184:in `safe_fork'\npassenger (2.2.11) lib/phusion_passenger/rack/application_spawner.rb:58:in `spawn_application'\npassenger (2.2.11) lib/phusion_passenger/rack/application_spawner.rb:41:in `spawn_application'\npassenger (2.2.11) lib/phusion_passenger/spawn_manager.rb:159:in `spawn_application'\npassenger (2.2.11) lib/phusion_passenger/spawn_manager.rb:287:in `handle_spawn_application'\npassenger (2.2.11) lib/phusion_passenger/abstract_server.rb:352:in `__send__'\npassenger (2.2.11) lib/phusion_passenger/abstract_server.rb:352:in `main_loop'\npassenger (2.2.11) lib/phusion_passenger/abstract_server.rb:196:in `start_synchronously'\npassenger (2.2.11) bin/passenger-spawn-server:61\n```\n\nHere is my Gemfile:\n\n``` ruby\nsource 'http://gemcutter.org'\n\n# Core\n# gem 'rails', '3.0.0.beta4'\ngem 'rails', :git => 'http://github.com/rails/rails.git'\ngem 'sinatra'\ngem 'mysql'\ngem 'bundler'\ngem 'memcache-client'\ngem 'system_timer'\ngem 'mime-types', :require => 'mime/types'\ngem 'json'\ngem 'haml', '~> 3.0.12'\ngem 'bcrypt-ruby', :require => 'bcrypt'\n\n# Users\ngem 'warden'\ngem 'ruby-openid', :require => 'openid'\ngem 'canable'\ngem 'devise', '1.1.rc2'\n\n# Paperclip\ngem 'aws-s3', :require => 'aws/s3'\ngem 'paperclip', :git => 'git://github.com/dewski/paperclip.git', :branch => 'rails3'\ngem 'delayed_job', :git => 'git://github.com/dewski/delayed_job.git'\n\ngroup :development do\n  gem 'termios'\n  gem 'faker'\nend\n\ngroup :test do\n  gem 'webrat'\n  gem 'hpricot'\n  gem 'mocha', :require => false\nend\n```\n", "created_at": "2011-05-16 03:46:56", "user": 789801, "id": 1170264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170265", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:46:57", "user": 789801, "id": 1170265}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170266", "text": "_Imported from Lighthouse._\nComment by **gnufied** - 2010-09-22 15:02:03 UTC\n\nCan you attach a minimum reproducible case, which we can run and reproduce the problem? For freshly minted Rails3 application, I can't reproduce your problem.\n", "created_at": "2011-05-16 03:46:58", "user": 789801, "id": 1170266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170267", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-09-23 07:44:24 UTC\n\nWe need a way of re-producing this from a fresh Rails 3 app.\n", "created_at": "2011-05-16 03:47:00", "user": 789801, "id": 1170267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170268", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:57 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:47:01", "user": 789801, "id": 1170268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170270", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-16 01:42:33 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:47:02", "user": 789801, "id": 1170270}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170271", "text": "_Imported from Lighthouse._\nComment by **Evgeniy Dolzhenko** - 2010-11-08 15:16:50 UTC\n\nThe problem is actually pretty subtle and manifests whenever you have some object with huge `inspect` output in your `request.env`.\n\nFor example I have an app with a lot of routes and Devise installed. Devise adds Warden middleware which is always present in `request.env` and which holds references to `ActionDispatch::Routing::RouteSet`. The inspect output of `ActionDispatch::Routing::RouteSet` is huge when you have many routes (I get about ~3Mb diagnostics.erb output on that project).\n\nOne solution would be just to truncate output for every key in the `debug_hash` method of `_request_and_response.erb` partial.\n", "created_at": "2011-05-16 03:47:04", "user": 789801, "id": 1170271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170272", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:47:05", "user": 789801, "id": 1170272}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170273", "text": "_Imported from Lighthouse._\nComment by **Nicolas Blanco** - 2011-01-03 14:48:18 UTC\n\nI confirm this problem and Evgeniy Dolzhenko explanation.\n\nOn my application, the template (_request_and_response.erb) takes 10 seconds to render. By disabling the debug_hash method, the rendering time goes down to less than 1 sec!\n\nI confirm that request.env is very big and I agree with truncating its values.\n\nIt's not possible to inject megabytes of data in a single page as it even freezes the browser sometimes.\n\nDo you see another clean solution than truncating?\n", "created_at": "2011-05-16 03:47:06", "user": 789801, "id": 1170273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170274", "text": "_Imported from Lighthouse._\nComment by **Nicolas Blanco** - 2011-01-03 15:52:12 UTC\n\nSome more investigation on my request.env object, here are the biggest keys :\n\nwarden: 2009703 bytes\naction_controller.instance: 5985405 bytes\naction_dispatch.remote_ip: 1999023 bytes\n\nIf this normal?\n", "created_at": "2011-05-16 03:47:08", "user": 789801, "id": 1170274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170275", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:22 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:47:09", "user": 789801, "id": 1170275}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170276", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:47:10", "user": 789801, "id": 1170276}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170277", "text": "_Imported from Lighthouse._\nComment by **jay** - 2011-03-07 23:07:43 UTC\n\nAttached is a patch that adds configurable options for both session and environment dumping on ActionDispatch error pages. These options have been added to the ActionDispatch Railtie and are called dump_session_on_error and dump_environment_on_error respectively. By default I've set the options to dump sessions but not the environment on error, since the session dump generally seems to be small while the environment dump can become huge as you add things like routes and plugins and extensions that like to add instance variables to the controller and such.\n\nI rarely ever find myself looking at the environment dump, so I'm not really going to miss it if it's gone by default, but it's nice being able to turn it back on again for the once-in-a-blue-moon that I would ever need to use it.\n\nThis might not be as pretty of a solution as truncating the values in the environment hash and such, but it's a quick fix for something that I doubt too many people really pay attention to anyways. I haven't included any tests in the patch as I'm not sure how to go about testing configuration options and templates like this, but I can add them if necessary and if anyone has any hints.\n", "created_at": "2011-05-16 03:47:12", "user": 789801, "id": 1170277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170278", "text": "_Imported from Lighthouse._\nComment by **jay** - 2011-03-08 20:06:00 UTC\n\nI just realized that the patch above was against 3-0-stable, so here's a patch against master, too.\n", "created_at": "2011-05-16 03:47:13", "user": 789801, "id": 1170278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170279", "text": "_Imported from Lighthouse._\nComment by **Andy** - 2011-03-12 07:14:21 UTC\n\nI'm seeing what I think is the same problem as the original poster. I find that some exceptions end up making a bunch of slow SHOW TABLES queries when they are being stringified. I have an almost vanilla rail 3.0.5 app that can reproduce the problem here: https://github.com/ajh/show_tables\n\nSee the README for how to repro it.\n\nI've also found people talking about what seems to be the same issue here: http://stackoverflow.com/questions/3114993/exception-pages-in-development-mode-take-upwards-of-15-30-seconds-to-render-why\n", "created_at": "2011-05-16 03:47:14", "user": 789801, "id": 1170279}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170281", "text": "_Imported from Lighthouse._\nComment by **Andy** - 2011-03-12 17:24:59 UTC\n\nThe key part of the backtraces that I'm seeing is this (see https://github.com/ajh/show_tables/blob/master/README for a full backtrace):\n\n```\n/home/ajh/.rvm/gems/ruby-1.8.7-p302@rails3/gems/mysql2-0.2.6/lib/active_record/connection_adapters/mysql2_adapter.rb:432:in `tables'\n/home/ajh/.rvm/gems/ruby-1.8.7-p302@rails3/gems/activerecord-3.0.5/lib/active_record/connection_adapters/abstract/schema_statements.rb:21:in `table_exists?'\n/home/ajh/.rvm/gems/ruby-1.8.7-p302@rails3/gems/activerecord-3.0.5/lib/active_record/base.rb:673:in `table_exists?'\n/home/ajh/.rvm/gems/ruby-1.8.7-p302@rails3/gems/activerecord-3.0.5/lib/active_record/base.rb:795:in `inspect' \n/home/ajh/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/test/unit/error.rb:36:in `to_str'\n/home/ajh/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/test/unit/error.rb:36:in `to_s'                     \n/home/ajh/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/test/unit/error.rb:36:in `inspect'\n/home/ajh/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/test/unit/error.rb:36:in `to_str'                   \n/home/ajh/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/test/unit/error.rb:36:in `to_s'\n/home/ajh/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/test/unit/error.rb:36:in `message'\n```\n\nA raised exception's #message method is called, and as that's being evaluated somehow an ActiveRecord::Base class's inspect method gets fired.\n\nI've followed this code path in a debugger and I don't see the call to the ActiveRecord::Base.inspect method, the debugger just ends up inside that method. After setting a break point at the bottom line in the above backtrace, I can examine the exception like so:\n\n```\nBreakpoint 2 at /home/ajh/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/test/unit/error.rb:36\n/home/ajh/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/test/unit/error.rb:36\n\"#{@exception.class.name}: #{@exception.message}\"\n(rdb:1) irb\nruby-1.8.7-p302 :001 > @exception.class\n   => NoMethodError\nruby-1.8.7-p302 :005 >   @exception.class.included_modules\n   => [ActiveSupport::Dependencies::Blamable, Base64::Deprecated, Base64, ActiveSupport::Dependencies::Loadable, PP::ObjectMixin, Kernel]\n```\n\nI've skimmed through the included modules and haven't seen anything that might call ActiveRecord::Base.inspect.\n", "created_at": "2011-05-16 03:47:16", "user": 789801, "id": 1170281}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170282", "text": "_Imported from Lighthouse._\nComment by **Andy** - 2011-03-12 17:34:34 UTC\n\nBy the way, about the patches above and Evgeniy Dolzhenko's explanation. I don't doubt that fixes a real issue, but I don't think it explains Garrett's original problem where he is seeing a bunch of 'SHOW TABLES' queries being run.\n", "created_at": "2011-05-16 03:47:17", "user": 789801, "id": 1170282}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170283", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2011-03-14 16:00:46 UTC\n\nFWIW, we had a similar problem on Rails 2.2.x and fixed it by monkey patching ActiveRecord::Base.inspect:\n\n``` ruby\nmodule ActiveRecord\n  class Base\n    def self.inspect\n      if self == Base\n        super\n      elsif abstract_class?\n        \"#{super}(abstract)\" \n      else\n        begin\n          attr_list = columns.map { |c| \"#{c.name}: #{c.type}\" } * ', '\n          \"#{super}(#{attr_list})\" \n        rescue Exception => e\n          # Any exception is likely to be caused by the table not existing!\n          \"#{super}(Table doesn't exist)\"\n        end\n      end\n    end\n  end\nend\n```\n\nThe original code relied on `table_exists?` which causes a `SHOW TABLES` query without any caching.  I decided that if you call `table_exists?` then you probably wanted to explicitly check if the table exists, but for `inspect` it would be OK to just rely on `columns` failing.\n\nI don't know if this is helpful on Rails 3 or not - we're not there yet.\n\nCheers,\n    Jonathan.\n", "created_at": "2011-05-16 03:47:19", "user": 789801, "id": 1170283}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170284", "text": "_Imported from Lighthouse._\nComment by **Jamie Wilkinson** - 2011-04-07 00:37:43 UTC\n\nBump, this is still a huge & pervasive issue -- you can balloon error pages to 2.5MB just by adding omniauth to a vanilla Rails app. There's a healthy discussion here, including some .inspect monkeypatches:\n\nhttp://stackoverflow.com/questions/3114993/exception-pages-in-development-mode-take-upwards-of-15-30-seconds-to-render-why\n", "created_at": "2011-05-16 03:47:20", "user": 789801, "id": 1170284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170285", "text": "_Imported from Lighthouse._\nComment by **Raphael Sofaer** - 2011-04-07 17:36:31 UTC\n\nAny one of the @_response, @_request, and @_env instance variables in a controller object have inspects that are so enormous that they are useless.  The problem is really that inspecting the env hash inspects the controller, which has the env hash as an instance variable, and has other instance variables which have the env hash as an instance variable.\n", "created_at": "2011-05-16 03:47:21", "user": 789801, "id": 1170285}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170286", "text": "_Imported from Lighthouse._\nComment by **Adam Bair** - 2011-04-28 03:28:29 UTC\n\nBump +1 - ran into this today using Rails v3.0.6 and pow. Ended up using the \"SmallInspect\" mixin from the stackoverflow post above after spending waay to much time on it. This reduces the time from 45 seconds on exception to around 5 though it does NOT solve the tons of SHOW_TABLE messages flying by in the logfile.\n", "created_at": "2011-05-16 03:47:23", "user": 789801, "id": 1170286}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170287", "text": "_Imported from Lighthouse._\nComment by **Adam Bair** - 2011-04-28 14:37:46 UTC\n\nFor the SHOW_TABLES issue one thing you might want to check is to see if you have any route constraints. We noticed that we, Ping - a coworker and myself, could stop the tables from showing up by overriding the inspect method on the model on the constraint. In our case it was the Account model. We did something like this:\n\n  def self.inspect\n    ['id','name', 'domain', 'subdomain'].each { |c| \"#{c.name}: #{c.type}\" } \\* ', '\n  end  \n\nI know that this place is defunct but I wanted to add this here just in case it could help someone.\n", "created_at": "2011-05-16 03:47:24", "user": 789801, "id": 1170287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170288", "text": "_Imported from Lighthouse._\nComment by **Adam Bair** - 2011-04-28 14:38:18 UTC\n\ndef self.inspect\n      ['id','name', 'domain', 'subdomain'].each { |c| \"#{c.name}: #{c.type}\" } \\* ', '\n    end\n\nIs what I meant to say.\n", "created_at": "2011-05-16 03:47:25", "user": 789801, "id": 1170288}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170289", "text": "Attachments saved to Gist: http://gist.github.com/971689\n", "created_at": "2011-05-16 03:47:27", "user": 789801, "id": 1170289}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5032\nCreated by **scrozier** - 2010-07-02 00:21:27 UTC\n\nThis is a bit preliminary, but since it is related to a recently resolved ticket (2415), I thought it worth reporting.\n\nAfter installing 2-3-stable today, my one-level-deep nested attributes are now updating correctly, but I am still seeing a problem when there is more than one level of nesting. In that case, it is looking like the \"grandchildren\" records are only updated if at least one attribute changes in the related \"child\" record. Otherwise, no update is done on the grandchildren.\n\nIt's quite possible that this is my problem...anyone else?\n\nWorking on a test case....\n", "labels": [], "number": 695, "updated_at": "2011-05-16 03:48:13", "user": 789801, "closed_at": "2011-05-16 03:47:59", "id": 904374, "title": "accepts_nested_attributes_for not working more than one level deep?", "url": "https://api.github.com/repos/rails/rails/issues/695", "created_at": "2011-05-16 03:47:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170290", "text": "_Imported from Lighthouse._\nComment by **scrozier** - 2010-07-02 05:10:30 UTC\n\nA little more info:\n\nI can consistently reproduce this in my application.\n\nI can \"fix\" this by making the changed? method in module Dirty return _true_ if self.class == Child. Making the condition self.class == Grandchild does _not_ work.\n\nI am trying to backtrace this to a higher level call....\n", "created_at": "2011-05-16 03:47:32", "user": 789801, "id": 1170290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170291", "text": "_Imported from Lighthouse._\nComment by **scrozier** - 2010-07-02 22:12:21 UTC\n\nForcing a change to Child also make grandchildren update correctly, as expected.\n", "created_at": "2011-05-16 03:47:34", "user": 789801, "id": 1170291}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170292", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:27:19 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:47:35", "user": 789801, "id": 1170292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170293", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-09 00:31:58 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:47:36", "user": 789801, "id": 1170293}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170294", "text": "_Imported from Lighthouse._\nComment by **Ingo Wichmann** - 2011-03-18 14:53:34 UTC\n\nUsing rails 2.3.11 I can confirm this bug\n", "created_at": "2011-05-16 03:47:38", "user": 789801, "id": 1170294}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170295", "text": "_Imported from Lighthouse._\nComment by **Daniel** - 2011-03-18 18:51:39 UTC\n\n[state:open]\nI also still see this problem in 2.3.11.\n", "created_at": "2011-05-16 03:47:39", "user": 789801, "id": 1170295}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170309", "text": "Works fine on 3.0.x.\n", "created_at": "2011-05-16 03:48:13", "user": 9582, "id": 1170309}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5040\nCreated by **carld** - 2010-07-03 09:56:45 UTC\n\nHi,\n\nI noticed a probable bug in activerecord 2.3.8, in the sqlite_adapter. I have ruby 1.8.7 (2009-06-12 patchlevel 174) [universal-darwin10.0]\n\nThere's some binary data that contains the '%' character. This data isn't retrieved correctly due to the string_to_binary, binary_to_string methods which perform substitution for the '%' and '\\0' characters.\n\nFrom the SQLite info, http://www.sqlite.org/lang_expr.html, binary data can be represented as a string of hex prefixed with a X. e.g. X'a0b1c2'\n\nThe MySQL adapter uses a quote method for binary data that does for example X'a0b1c2' and with SQLite something similar is possible.\n\nI've attached a patch on 2-3-stable that solved my data corruption, also you can find it here: http://github.com/carld/rails/commit/a315e6b68aecec2af7276db2a82fef9e758f987f\n\nThanks,\nCarl\n", "labels": [], "number": 696, "updated_at": "2011-05-21 15:12:03", "user": 789801, "closed_at": "2011-05-21 15:12:03", "id": 904375, "title": "ActiveRecords SQLite3 binary data corruption around '%'", "url": "https://api.github.com/repos/rails/rails/issues/696", "created_at": "2011-05-16 03:47:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170296", "text": "_Imported from Lighthouse._\nComment by **Chris Feist** - 2010-10-12 04:31:14 UTC\n\nI've noticed this same issue with .bmp files, they appear to have lots of %00's in them for some reason.\n", "created_at": "2011-05-16 03:47:46", "user": 789801, "id": 1170296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170297", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:26:53 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:47:47", "user": 789801, "id": 1170297}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170298", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:48:11 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:47:48", "user": 789801, "id": 1170298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170299", "text": "_Imported from Lighthouse._\nComment by **Chris Feist** - 2011-02-17 23:27:00 UTC\n\nI've been able to easily replicate this with the latest 3-0 stable.  And I think this is a very serious issue since any binary file which contains %00 will not be stored properly in sqlite.\n\nI've attached a patch to active record which makes it extremely simple to replicate.\n\nJust apply the patch to 3-0-stable and run 'rake test_sqlite3' and it will fail.\n\n[state:open]\n", "created_at": "2011-05-16 03:47:50", "user": 789801, "id": 1170299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170300", "text": "_Imported from Lighthouse._\nComment by **Chris Feist** - 2011-02-17 23:28:15 UTC\n\nAlso, I've updated carld's patch so it cleanly applies against 3-0-stable\n", "created_at": "2011-05-16 03:47:51", "user": 789801, "id": 1170300}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170301", "text": "Attachments saved to Gist: http://gist.github.com/971690\n", "created_at": "2011-05-16 03:47:52", "user": 789801, "id": 1170301}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5054\nCreated by **Mark Donnelly** - 2010-11-25 12:13:49 UTC\n\nI'm trying to retrieve information from a bugzilla database on a separate DB server.  I'm trying to join across two models that both exist in the bugzilla schema, Bug and Flag:\n\nclass Bug < ActiveRecord::Base\n  establish_connection :bugzilla\n  set_primary_key :bug_id\n  has_many :flags\nend\nclass Flag\n  establish_connection :bugzilla\n  belongs_to :bug\nend\n\nMost calls I get produce an error:\nree-1.8.7-2010.01 > Bug.joins(:flags).count\nNoMethodError: undefined method `quote_table_name' for #<Arel::Memory::Engine:0x91275c4>\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/arel-0.4.0/lib/arel/engines/sql/formatters.rb:7:in`**send**'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/arel-0.4.0/lib/arel/engines/sql/formatters.rb:7:in `quote_table_name'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/arel-0.4.0/lib/arel/engines/sql/formatters.rb:103:in`table'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/arel-0.4.0/lib/arel/engines/sql/relations/utilities/recursion.rb:9:in `table_sql'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/arel-0.4.0/lib/arel/engines/sql/relations/operations/join.rb:11:in`joins'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/arel-0.4.0/lib/arel/algebra/relations/utilities/compound.rb:6:in `__send__'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/arel-0.4.0/lib/arel/algebra/relations/utilities/compound.rb:6:in`joins'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/arel-0.4.0/lib/arel/algebra/relations/utilities/compound.rb:6:in `__send__'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/arel-0.4.0/lib/arel/algebra/relations/utilities/compound.rb:6:in`joins'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/activerecord-3.0.0.beta4/lib/active_record/relation/calculations.rb:143:in `perform_calculation'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/activerecord-3.0.0.beta4/lib/active_record/relation/calculations.rb:128:in`calculate'\n    from ~/.rvm/gems/ree-1.8.7-2010.01@app/gems/activerecord-3.0.0.beta4/lib/active_record/relation/calculations.rb:45:in `count'\n    from (irb):10\n\nHowever, this call:\n  Bug.where(:assigned_to => 2468).includes(:flags).all.size\n   => 547\nworks.\n\nFinally, if I change the default database connection to point to the bugzilla database, remove the establish_connection calls, and try this again, it works as expected.\n\nAs you can see above, this uses rails3-beta4.  I'm using mysql, if that matters.\n\nI understand that joining from one database connection to another is probably unrealistic, but I expect that joins should work for two models that both lie within the same database.\n", "labels": [], "number": 697, "updated_at": "2011-05-21 15:12:03", "user": 789801, "closed_at": "2011-05-21 15:12:03", "id": 904376, "title": "problem joining two models that establish_connection to the same db", "url": "https://api.github.com/repos/rails/rails/issues/697", "created_at": "2011-05-16 03:47:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170302", "text": "_Imported from Lighthouse._\nComment by **Miles Egan** - 2010-07-10 16:30:27 UTC\n\nIt looks to me like the issue aries in Arel at this point:\n\nlib/arel/algebra/relations/operations/join.rb, line 44:\n\ndef engine\n  relation1.engine != relation2.engine ? Memory::Engine.new : relation1.engine\nend\n\nEven though the two engines are pointing to the same underlying data source, they don't compare as equal because they're different objects.\n", "created_at": "2011-05-16 03:47:58", "user": 789801, "id": 1170302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170303", "text": "_Imported from Lighthouse._\nComment by **Miles Egan** - 2010-07-10 16:52:52 UTC\n\nDigging a little deeper, it looks like rails maintains a distinct connection pool for each class that establishes a connection. In most cases there's only one since it's established in ActiveRecord::Base but since you're establishing connections in two separate classes two separate connection pools are created and Arel doesn't recognize them as speaking to the same DB.\n\nIf you read the comments in /activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb around the ConnectionHandler class it explains the relationship between connection pools and classes in more detail.\n\nIt looks to me like fixing this would require a fairly significant change in the connection pooling code.\n", "created_at": "2011-05-16 03:47:59", "user": 789801, "id": 1170303}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170304", "text": "_Imported from Lighthouse._\nComment by **Albert Llop Yacobi** - 2010-07-30 09:44:15 UTC\n\nThis bug hit me today aswell. Managed it changing all of the queries to find_by_sql, but it's a shame losing all the ActiveRecord goodness. Any progress on the matter?\n", "created_at": "2011-05-16 03:48:01", "user": 789801, "id": 1170304}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170305", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2010-08-01 13:26:34 UTC\n\nIf you want a tempory fix till this issue is addressed in the rails core you could make a superclass for this models in which you connect to the database.\n\n``` ruby\nclass Bugzilla < ActiveRecord::Base\n  self.abstract_class = true  \n   establish_connection :bugzilla\nend\n\nclass Bug < Bugzilla \n set_primary_key :bug_id has_many :flags \nend\n\nclass Flag < Bugzilla \n  belongs_to :bug\nend\n```\n", "created_at": "2011-05-16 03:48:02", "user": 789801, "id": 1170305}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170306", "text": "_Imported from Lighthouse._\nComment by **ronin-68998 (at lighthouseapp)** - 2010-09-16 16:48:00 UTC\n\n> By Kane:\n> If you want a tempory fix till this issue is addressed in the rails core you could make a superclass for this models in which you connect to the database.\n\nThis man is genius, flawless hack. Thanks.\n\nI'm using ActiveScaffold w/ Rails 3, and a remote database, ran into this bug when I started to join models together.\n\nHit: undefined method 'connection' in Arel::Memory, bleh bleh bleh.\n\nThanks again.\n", "created_at": "2011-05-16 03:48:04", "user": 789801, "id": 1170306}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170307", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-26 00:00:09 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:48:05", "user": 789801, "id": 1170307}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170308", "text": "_Imported from Lighthouse._\nComment by **ravionrails** - 2011-03-04 14:59:14 UTC\n\nAddress model\nestablish_connection :connection_name (mention in database.yml)\n\nIf I do\n\nUser.joins(:addresses)\n\nit doesn't connect to the addresses table of other db mention in :connection_name\nbut try to find the addresses table in the application's database \n\nit ignores the establish_connection\n\nbut joins work on tables which are in the application's (default)  database\n\nI think there is problem in joins for establish_connection models/tables\n\n[state:open]\n", "created_at": "2011-05-16 03:48:06", "user": 789801, "id": 1170308}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5105\nCreated by **Georg Ledermann** - 2010-07-13 09:18:17 UTC\n\nhas_many has a deleting/nullify bug if used with STI. Please see this example:\n\n``` ruby\nclass Contact < ActiveRecord::Base\n  has_many :addresses, :as => :object, :dependent => :delete_all\nend\n\nclass Person < Contact\nend\n```\n\n``` ruby\nperson = Person.find(42)\nperson.destroy\n\n=> ... deleting contact works fine .... but:\n=> DELETE FROM `addresses` WHERE ((object_id = 42) AND (from_type = 'Person'))\n```\n\nThis is wrong. It should be:\n\n``` ruby\n=> DELETE FROM `addresses` WHERE ((object_id = 42) AND (from_type = 'Contact'))\n```\n\nThis bug can be found in Rails 2.3.8. So far is I see it's in Rails 3, too.\n\nAttached is a patch (sorry, no tests so far)\n", "labels": [], "number": 698, "updated_at": "2011-05-21 15:12:03", "user": 789801, "closed_at": "2011-05-21 15:12:03", "id": 904377, "title": "has_many: Dependent deleting does not work with STI", "url": "https://api.github.com/repos/rails/rails/issues/698", "created_at": "2011-05-16 03:48:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170310", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-07-13 10:43:02 UTC\n\nIf this is an issue in rails3 then can you attach a patch for rails3 too?\n", "created_at": "2011-05-16 03:48:14", "user": 789801, "id": 1170310}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170311", "text": "_Imported from Lighthouse._\nComment by **Georg Ledermann** - 2010-07-13 11:12:39 UTC\n\nThe patch for Rails3 is just the same. I've attached it.\n", "created_at": "2011-05-16 03:48:16", "user": 789801, "id": 1170311}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170312", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-07-13 15:46:53 UTC\n\nWhen I apply the patch (patch-rails3.txt) I get following message\n\n``` ruby\nPatch does not have a valid e-mail address.\n```\n", "created_at": "2011-05-16 03:48:18", "user": 789801, "id": 1170312}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170315", "text": "_Imported from Lighthouse._\nComment by **Georg Ledermann** - 2010-07-14 06:44:26 UTC\n\nSorry, here comes a valid patch file for Rails 3. But there are still no tests for this very simple change. The patch just added a missing \"base_class\" usage.\n", "created_at": "2011-05-16 03:48:20", "user": 789801, "id": 1170315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170316", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:36:11 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:48:22", "user": 789801, "id": 1170316}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170317", "text": "_Imported from Lighthouse._\nComment by **Mandaryn** - 2011-03-07 21:43:25 UTC\n\n[state:open]\n\nJust got stung by this on a rails 3.0.4.\n\nThe use case and error are exactly the same as in the original ticket.\n\nI will try adding some testing to the patch\n", "created_at": "2011-05-16 03:48:24", "user": 789801, "id": 1170317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170318", "text": "_Imported from Lighthouse._\nComment by **Mandaryn** - 2011-03-07 22:31:43 UTC\n\nok my fault here, my problem is slightly (or even more than slightly) different.\n\nthe patch no longer applies to rails master\n", "created_at": "2011-05-16 03:48:26", "user": 789801, "id": 1170318}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170319", "text": "_Imported from Lighthouse._\nComment by **Mandaryn** - 2011-03-08 10:41:01 UTC\n\nafter a bit of investigation I am convinced that this issue is fixed in current master [a0d7247d1509762283c61182ad82c2eed8d54757]\n\nthis case is also covered by this test: \n\n_test_clearing_an_exclusively_dependent_association_collection_\n\nin activerecord/test/cases/associations/has_many_associations_test.rb\n", "created_at": "2011-05-16 03:48:27", "user": 789801, "id": 1170319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170320", "text": "Attachments saved to Gist: http://gist.github.com/971691\n", "created_at": "2011-05-16 03:48:29", "user": 789801, "id": 1170320}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5111\nCreated by **David Chelimsky** - 2011-01-04 16:24:47 UTC\n\nGiven this in a Railtie:\n\n``` ruby\nconfig.generators.test_framework   :rspec\n```\n\nWhen I run `script/rails generate`\nThen I get the following output\n\n```\n...\nPlease choose a generator below.\n\nRails:\n  ...\n\nRspec:\n  rspec:install\n\nTestUnit:\n  test_unit:controller\n  test_unit:helper\n  test_unit:integration\n  test_unit:mailer\n  test_unit:model\n  test_unit:observer\n  test_unit:performance\n  test_unit:plugin\n  test_unit:scaffold\n```\n\nIt would be nice if the test_unit:xxx generators were not visible here.\n\nNeed to make sure test_unit:integration DOES show up, however, if there is no integration_tool specified in a Railtie.\n", "labels": [], "number": 699, "updated_at": "2011-05-16 03:49:02", "user": 789801, "closed_at": "2011-05-16 03:49:02", "id": 904378, "title": "Hide test_unit generators when other frameworks are assigned as test_framework", "url": "https://api.github.com/repos/rails/rails/issues/699", "created_at": "2011-05-16 03:48:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170321", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-09-07 17:23:23 UTC\n\nI added following line to application.rb . However I am not seeing respec:install as one of the options. Did something change between this ticket and rails edge.\n\n``` ruby\nmodule Demo\n  class Application < Rails::Application\n    config.generators.test_framework   = :rspec\n  end\nend\n\n$ rails g\nUsage: rails generate GENERATOR [args] [options]\n\nGeneral options:\n  -h, [--help]     # Print generator's options and usage\n  -p, [--pretend]  # Run but do not make any changes\n  -f, [--force]    # Overwrite files that already exist\n  -s, [--skip]     # Skip files that already exist\n  -q, [--quiet]    # Suppress status output\n\nPlease choose a generator below.\n\nRails:\n  controller\n  generator\n  helper\n  integration_test\n  mailer\n  migration\n  model\n  observer\n  performance_test\n  plugin\n  resource\n  scaffold\n  scaffold_controller\n  session_migration\n  stylesheets\n\nTestUnit:\n  test_unit:controller\n  test_unit:helper\n  test_unit:integration\n  test_unit:mailer\n  test_unit:model\n  test_unit:observer\n  test_unit:performance\n  test_unit:plugin\n  test_unit:scaffold\n\n\n\n$ gem list rspec\n\n*** LOCAL GEMS ***\n\nrspec (1.3.0)\nrspec-rails (1.3.2)\n\n```\n", "created_at": "2011-05-16 03:48:36", "user": 789801, "id": 1170321}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170322", "text": "_Imported from Lighthouse._\nComment by **David Chelimsky** - 2010-09-07 18:12:31 UTC\n\nGotta have rspec-2, which is still in beta. Add this to your Gemfile:\n\n```\ngem \"rspec-rails\", \">= 2.0.0.beta.20\"\n```\n", "created_at": "2011-05-16 03:48:37", "user": 789801, "id": 1170322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170323", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-09-12 10:30:22 UTC\n\nWhat if the other test framework doesn't have some generators, then it would be nice to have the fall backs listed. Anybody agree?\n", "created_at": "2011-05-16 03:48:39", "user": 789801, "id": 1170323}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170324", "text": "_Imported from Lighthouse._\nComment by **David Chelimsky** - 2010-09-12 15:47:51 UTC\n\nDo you mean show the test_unit versions for only those that are missing?\n", "created_at": "2011-05-16 03:48:40", "user": 789801, "id": 1170324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170325", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-09-13 00:47:35 UTC\n\nThat would be ideal. But is that possible with the current setup? If not maybe keep the test_unit generators listed for completeness? Just my opinion though, need more +1/-1 in here.\n", "created_at": "2011-05-16 03:48:42", "user": 789801, "id": 1170325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170326", "text": "_Imported from Lighthouse._\nComment by **sarah (at ultrasaurus)** - 2010-10-21 15:25:06 UTC\n\nwhy isn't testunit a gem like rspec?  then it could be listed in my Gemfile and I could omit it if I don't want its generators to show up\n", "created_at": "2011-05-16 03:48:43", "user": 789801, "id": 1170326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170327", "text": "_Imported from Lighthouse._\nComment by **phatmann** - 2011-03-30 08:28:59 UTC\n\nStill very annoying to see the test_unit generators. Rails3 is supposed to be more modular and agnostic. Test::Unit should play on the same footing as RSpec.\n", "created_at": "2011-05-16 03:48:45", "user": 789801, "id": 1170327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170328", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2011-03-30 08:35:41 UTC\n\nSarah got the issue. The problem is that the test unit compatibility is not a gem (and I don't think it will be). The only way to effectively remove test_unit is by replacing rails/all by specific requires, as in:\n\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/all.rb\n\nThis is what the --skip-activerecord option in app generator does and maybe --skip-testunit could do the same. Anyone willing to provide a patch?\n\nThis is a minor annoyance but not lets get crazy over here and say Rails 3 is neither modular nor agnostic because of this, shall we?\n", "created_at": "2011-05-16 03:48:46", "user": 789801, "id": 1170328}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "living on edge rdoc updated\n", "labels": [], "number": 700, "updated_at": "2014-07-03 04:13:37", "user": 111473, "closed_at": "2011-07-11 09:56:09", "id": 904379, "title": "living on edge rdoc updated", "url": "https://api.github.com/repos/rails/rails/issues/700", "created_at": "2011-05-16 03:48:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545369", "text": "rdoc version 3.4 still supporting. closing\n", "created_at": "2011-07-11 09:56:09", "user": 111473, "id": 1545369}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5113\nCreated by **VirtualFunction** - 2010-12-15 09:57:54 UTC\n\nI've been having a very odd error under Rails 3.0 which has taken me some time to isolate.\n\nI recently moved a client's site to Rails 3.0 over the last couple of months, and my exception notifier had been giving me the occasional HTTP 5xx email regarding missing templates which were not missing at all. Each time I tried to access the offending URL/resource I had no issues. \n\nAfter careful inspection in the HTTP headers I noticed the Accept header was occasionally different on the machines reporting errors, it was named as \"hc/url;_/_\" instead of a proper list of accepted MIME types. After a quick stab at trying to forge these headers I little luck at replicating it (I think I was using curl).\n\nAfter more investigation I managed to replicate this using the following:\n\n``` ruby\n  rails new test\n  cd test\n  # Create blank pages controller & route here\n  mkdir app/views/pages\n  echo 'Hello World' > app/views/pages/index.html.erb\n  rails server -e production\n```\n\nThen under \"telnet localhost 3000\"\n\nGET / HTTP/1.1\nAccept: hc/url;_/_\n\nThe above won't work, however below works:\n\nGET / HTTP/1.1\nAccept: application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,_/_;q=0.5\n\nI have found under some situations manipulating the \"Accept\" header under curl and browsers don't seem to replicate this perfectly, probably because other headers seem to have some influence in the way the request works possibly.\n\nI hope this is replicate-able for you.\n\nCheers\nJ.\n", "labels": [], "number": 701, "updated_at": "2014-04-30 18:05:11", "user": 789801, "closed_at": "2011-05-16 03:50:42", "id": 904380, "title": "MissingTemplate issues in Rails 3.0 due to badly set MIME types...", "url": "https://api.github.com/repos/rails/rails/issues/701", "created_at": "2011-05-16 03:48:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170330", "text": "_Imported from Lighthouse._\nComment by **mpd** - 2010-12-14 19:38:13 UTC\n\nWe're seeing this as well since updating to 3.0 - on 3.0.3 and it still happens.\n\nIn addition to `hc/url`, a small number of the errors instead mention `text/*`, and yet a few others have `ws/ws` as the requested format.\n", "created_at": "2011-05-16 03:48:53", "user": 789801, "id": 1170330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170331", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-12-14 21:01:22 UTC\n\nIn the given case there is hardly anything rails can do. One way to handle such cases would be to have a before filter and for bad HTTP_ACCEPT_HEADER you can set params[:format] = 'html' and then html will be the response content-type.\n\nMore on this topic at http://neeraj.name/2010/11/23/mime-type-resolution-in-rails.html\n", "created_at": "2011-05-16 03:48:55", "user": 789801, "id": 1170331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170332", "text": "_Imported from Lighthouse._\nComment by **mpd** - 2010-12-14 23:29:36 UTC\n\nIn my case the HTTP_ACCEPT header is coming in from the browser as \"`hc/url;*/*`\" which doesn't parse I guess. It shows up as `:formats=>[:\"hc/url;*/*\"]` in the exception output. I've captured this in a failing test in my app. Changing the semicolon to a comma 'solves' it, but I don't know enough about HTTP_ACCEPT parsing to know where the problem is.\n\nThe ws/ws header is \"`*/*, ws/ws`\", with the space, which parses to `:formats=>[:\"ws/ws\", :\"*/*\"]`, and the last is \"`text/*`\" by itself (`:formats=>[:\"text/*\"])`.\n\nThe action itself just sets a single instance var.\n\nForcing the format to html in a before filter as suggested isn't working for me. Am I just doing it wrong?\n", "created_at": "2011-05-16 03:48:57", "user": 789801, "id": 1170332}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170333", "text": "_Imported from Lighthouse._\nComment by **mpd** - 2010-12-14 23:49:21 UTC\n\nCan't edit my previous, but the juice that worked for me is `self.formats = [:html]`\n", "created_at": "2011-05-16 03:48:58", "user": 789801, "id": 1170333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170334", "text": "_Imported from Lighthouse._\nComment by **VirtualFunction** - 2010-12-15 00:52:18 UTC\n\nYes, the way I've been getting round this for the last 5 or so months I've been on Rails 3 I've used this:\n\nrequest.format = :html if request.format.to_s.include? 'hc/url'\n\nas part of a before filter. \n\nI also have issues with text/\\* occasionally too.\n\nWhat I've not figured out is why the browser sends these odd content types... It seems somewhat random when it does happen (or from what I can see). I can't remember what browsers these happens on , I seem to recall Firefox on Windows being the main offender.\n", "created_at": "2011-05-16 03:49:00", "user": 789801, "id": 1170334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170335", "text": "_Imported from Lighthouse._\nComment by **Roel van der Hoorn** - 2011-02-21 10:37:29 UTC\n\nSame problems here on Rails (at least versions 3.0.0 to 3.0.4). Especially crawlers are known to use different HTTP ACCEPT headers than most web browsers. The following appear quite often:\n- \"text/*\"\n- \"image/jpeg\", \"image/pjpeg\", \"image/png\", \"image/gif\"\n\nFor \"text/*\" Rails does not have any support, i.e. it does not recognize it. This is a bug as it is a valid HTTP ACCEPT header to request only text MIME types, see e.g. http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html. I created a separate ticket for this, see: #6458.\n\nIn the second case Rails should return a 406 (Not Acceptable) if the respond_to block does not respond to any of the requested MIME types. Rails throws a missing template instead, so this is a different bug than the first case describes.\n", "created_at": "2011-05-16 03:49:01", "user": 789801, "id": 1170335}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170336", "text": "_Imported from Lighthouse._\nComment by **Nathaniel Bibler** - 2011-03-24 13:59:21 UTC\n\nI'm seeing the same issue, as well, in multiple Rails 3 applications.  Some are Rails 3.0.3, some are 3.0.5.  In all cases, making a simple GET request using the following curl statement causes 500 errors:\n\n```\ncurl -v -H \"Accept: */*;q=0.1\" http://example.com/\ncurl -v -H \"Accept: */*; q=0.5, application/xml\" http://example.com/\ncurl -v -H \"Accept: text/*\" http://example.com/\n```\n\nIt'd be nice if Rails would recognize an invalid or unhandled Accept-type and failover to the default response type (generally, HTML when listed by priority in respond_to blocks).\n", "created_at": "2011-05-16 03:49:03", "user": 789801, "id": 1170336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170337", "text": "_Imported from Lighthouse._\nComment by **Duff OMelia** - 2011-03-24 22:01:30 UTC\n\nI'm seeing the same thing Nathaniel Bibler's seeing.\n\n``` bash\ncurl -H \"Accept: text/*\" http://example.com\ncurl -H \"Accept: */*, application/youtube-client\" http://example.com\n```\n\nBoth raising ActionView::MissingTemplate exceptions.  Using rails 3.0.4.\n", "created_at": "2011-05-16 03:49:05", "user": 789801, "id": 1170337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170338", "text": "_Imported from Lighthouse._\nComment by **Duff OMelia** - 2011-03-25 13:18:58 UTC\n\nWould there be a downside for Rails to return a 406 (Not Acceptable) if we're unable handle the Accept header?  (Like Roel suggested)\n", "created_at": "2011-05-16 03:49:06", "user": 789801, "id": 1170338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170390", "text": "text/\\* support has been added to Rails. Also notice you can turn on ignore_accept_header on Rails 3.1 and just rely on params[:format].\n", "created_at": "2011-05-16 03:50:42", "user": 9582, "id": 1170390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1627780", "text": "@josevalim What commit fixes this?  Is it in 3-0-stable?\n", "created_at": "2011-07-21 23:00:40", "user": 1179, "id": 1627780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1962551", "text": "What the prescribed way to handle `*/*`   ?\n", "created_at": "2011-08-31 21:59:27", "user": 426690, "id": 1962551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1998718", "text": "Having this in 3.0.4 ...\n", "created_at": "2011-09-05 12:08:36", "user": 153407, "id": 1998718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2051913", "text": "It seems like these weird \"hc/url;_/_\" Accept headers come from an application called hotComm: http://www.hotcomm.com/faq/FAQ_hot.asp#firefoxyahoo\n", "created_at": "2011-09-09 14:50:56", "user": 28392, "id": 2051913}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2169299", "text": "@josevalim I think this is still a problem?  What commit fixed this?\n", "created_at": "2011-09-22 16:39:30", "user": 1179, "id": 2169299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2281816", "text": "The same issue happened in Rails 3.1.0 as well. \n", "created_at": "2011-10-04 02:17:26", "user": 510923, "id": 2281816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2347374", "text": "This happened in one of our apps (Rails 3.0.10) right now. Apparently Firefox 7 with HotComm installed. Accept-Header reads \"hc/url;*/*\"\n\nIs there any recommended work around for Rails 3.0?\n", "created_at": "2011-10-10 13:33:08", "user": 244158, "id": 2347374}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2521593", "text": "Definitely still a pretty big issue on our end.\n", "created_at": "2011-10-25 19:12:20", "user": 59553, "id": 2521593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3103840", "text": "It happened to me too. it raises error when the format is \"text/*\".\n\n Mime::LOOKUP[\"text/*\"].html? # => false\n\nso is the logic correct that:\n\ntext/\\* should be converted to [text/html, text/json, text/xml, ...] and sort in a most use order. then to find template one by one. if can't find them raise error then.\n", "created_at": "2011-12-12 09:38:03", "user": 39321, "id": 3103840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3246033", "text": "Its still a issue, can we re open it ? \n", "created_at": "2011-12-22 06:36:29", "user": 45494, "id": 3246033}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3246036", "text": "@josevalim I think this is still a problem? What commit fixed this?\n", "created_at": "2011-12-22 06:37:22", "user": 1179, "id": 3246036}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3256911", "text": "Still an issue\n", "created_at": "2011-12-23 00:49:55", "user": 426690, "id": 3256911}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3258556", "text": "I have reopened it here. https://github.com/rails/rails/issues/4127  \n", "created_at": "2011-12-23 06:58:16", "user": 45494, "id": 3258556}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5120\nCreated by **Akira Matsuda** - 2011-02-19 09:28:29 UTC\n\nHTML 5 has a new attribute named [_required attribute_](http://www.whatwg.org/specs/web-apps/current-work/multipage/common-input-element-attributes.html#the-required-attribute) and ActiveModel::Validators lets us easily know what kind of validations are defined on our models.\n\nSo, I came up with another new feature combining these two technologies.\n\nNow, when creating a form with a model which has validates_presence_of field,\n\n``` ruby\nclass User < ActiveRecord::Base\n  validates_presence_of :name\nend\n```\n\n``` ruby\n<%= form_for User.new do |f| %>\n  <%= f.text_field :name %>\n  <%= f.submit %>\n<% end %>\n```\n\nthe required=\"required\" attribute are automagically injected into the generated input field.\n\n``` html\n<input id=\"user_name\" name=\"user[name]\" required=\"required\" size=\"30\" type=\"text\" />\n```\n\nThis enables seamless client-side validation without any extra JavaScript coding.\n", "labels": [], "number": 702, "updated_at": "2017-02-26 16:02:46", "user": 789801, "closed_at": "2011-05-21 15:12:03", "id": 904382, "title": "automatic client side validation with HTML 5 \"required\" attribute", "url": "https://api.github.com/repos/rails/rails/issues/702", "created_at": "2011-05-16 03:49:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170339", "text": "_Imported from Lighthouse._\nComment by **ifesdjeen** - 2010-07-15 12:27:25 UTC\n\n+1 for that. i like the idea, and would use that, definately.\n", "created_at": "2011-05-16 03:49:13", "user": 789801, "id": 1170339}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170340", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-07-16 12:40:02 UTC\n\n+1\nAwesome idea!\n\nBut what about other validations that imply that the field is required? Will this also work for those?\n", "created_at": "2011-05-16 03:49:14", "user": 789801, "id": 1170340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170341", "text": "_Imported from Lighthouse._\nComment by **Akira Matsuda** - 2010-08-28 23:51:31 UTC\n\nUpdated the patch so that it applies to the current edge.\n", "created_at": "2011-05-16 03:49:16", "user": 789801, "id": 1170341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170342", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-29 00:05:51 UTC\n\nNice!\n\n``` ruby\nobject.class.respond_to?(:validators) && object.class.validators.any? do |v|\n  v.is_a?(ActiveModel::Validations::PresenceValidator) && (v.attributes.include? method_name.to_sym) && v.options.keys.none? {|k| [:if, :unless].include? k}\nend\n```\n\nThis is a bit of a hack though :) Perhaps this check could be extracted to Active Model.\n", "created_at": "2011-05-16 03:49:17", "user": 789801, "id": 1170342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170343", "text": "_Imported from Lighthouse._\nComment by **Alexander S.** - 2010-10-29 15:27:37 UTC\n\nJust a short note, on something you are probably already aware of. \n\nThere are a few more attributes in HTML5 that are similar to required and would map nicely onto Rails model validators. Among them are min/max for input type number and range. There is also a pattern attribute which is simply a regular expression.\n\nhttp://miketaylr.com/code/input-type-attr.html\n", "created_at": "2011-05-16 03:49:18", "user": 789801, "id": 1170343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170344", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:03:40 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:49:20", "user": 789801, "id": 1170344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170345", "text": "_Imported from Lighthouse._\nComment by **Christian Peters** - 2010-12-10 10:39:01 UTC\n\nI think this would be an important feature of the form helpers as it follows the DRY principle.\n\nThough - as mentioned in the patch - it won't be possible to have full consistency between models and forms when using `:if` / `:unless` option. In the model, the condition is evaluated in the context of what has happened after submitting the form and running the controller action until `object.valid?` is called. I would add a warning in the `validates_presence_of?` doc. \n\nAccording to Alexander's link, the required option should also be provided for text areas, check boxes and radio buttons. (The patch regards input fields only.)\n", "created_at": "2011-05-16 03:49:21", "user": 789801, "id": 1170345}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170346", "text": "_Imported from Lighthouse._\nComment by **Akira Matsuda** - 2010-12-26 22:48:07 UTC\n\nThank you guys for your comments!\n\n@Jeremy:\nEm... sorry for posting ugly code :< I know it was ugly, but I just wanted to know whether my idea was good or bad... I should be ashamed for that...\nI just rewrote my patch taking your advice, so could you please take a look again?\n\n@Alexander S.:\nThank you for you helpful comment! I implemented min/max attributes this time, but as for RegExp one, I guess it won't always work the same on server side and client side, so we need to consider a bit more deeper.\nHow about adding a new key for FormatValidator like:\n\n``` ruby\n :client_side => false\n```\n\nwhich adds the \"pattern\" attribute on the HTML tag if true?\n\n@Christian:\nYes, added the attribute for text_area and radio_button. Thanks! But check_box didn't work as expected unlike radio_button on my Opera 11 (it requires all check_boxes to be checked), so didn't touch it.\n\n@all:\nAttached a new patch for required/min/max/maxlength attributes with cleaner code.\nHope you to play with it on modern browsers, and give me your feedbacks.\n", "created_at": "2011-05-16 03:49:22", "user": 789801, "id": 1170346}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170347", "text": "_Imported from Lighthouse._\nComment by **Akira Matsuda** - 2010-12-26 22:55:32 UTC\n\nReworded the typos on commit comments.\n", "created_at": "2011-05-16 03:49:24", "user": 789801, "id": 1170347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170348", "text": "_Imported from Lighthouse._\nComment by **Christian Peters** - 2010-12-27 14:20:20 UTC\n\n@Akira: What do you mean by \"it requires all check_boxes to be checked\"? I was thinking about a use case like `validates_presence_of :terms_and_conditions_acceptance` resulting in the respective checkbox to have a required=\"required\" attribute. The rest is not our business...?\n", "created_at": "2011-05-16 03:49:25", "user": 789801, "id": 1170348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170349", "text": "Attachments saved to Gist: http://gist.github.com/971692\n", "created_at": "2011-05-16 03:49:26", "user": 789801, "id": 1170349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/72560438", "text": "what happened to this?\n", "created_at": "2015-02-02 23:22:02", "user": 2164326, "id": 72560438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/72571978", "text": "Given my experience with Simple Form, it is not a good idea to include it by default at Rails. If you want this feature use Simple Form or any similar project.\n", "created_at": "2015-02-03 01:00:06", "user": 47848, "id": 72571978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/282565643", "text": "@amatsuda Is there a way to suppress this behavior?\r\nThere appears to be one problem with this related to using checkboxes.\r\nConsider this:\r\n```\r\nclass MyObject < ActiveRecord\r\n  validates_presence_of :foo # Where foo is a string\r\nend\r\n// In HTML\r\n<% form_for @myObj do |builder|\r\n<%= builder.check_box :foo, {}, \"true\", \"false\" %>\r\n<% end %>\r\n```\r\nNow based on how form builder generates the HTML for the tag, `foo` will always have the value `true` or `false`.\r\nHowever, because the checkbox input has the required attribute now, there is no way to submit the form with the checkbox unchecked. I have tried to explicitly pass `required: false` to options but that seems to have no impact.\r\n\r\nI've seen suggestions to use `validates_inclusion_of` but in my use case at least, validates_inclusion_of won't work, since sometimes the value `foo` doesn't always represent a boolean (ie in some cases it is a string, in others it's a number etc.)\r\n\r\nTurning off validates_presence_of seems to be the only solution that works.\r\n", "created_at": "2017-02-26 15:59:11", "user": 1701150, "id": 282565643}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5145\nCreated by **Nicolas Blanco** - 2011-02-17 06:48:14 UTC\n\nHow to reproduce :\n\nCreate a new Rails 3 beta 4 app, set the default_locale to :fr (or whatever) in application.rb (and put the correct yml file).\nRun a rails console. Check that I18n.locale is the right default_locale you've just set.\n\nNow create a fake plugin : create a folder \"foo\" in vendor/plugins, create the file vendor/plugins/foo/init.rb with a call to I18n.translate in it, like :\n\n``` ruby\n  I18n.t(\"bar\")\n```\n\nRun the Rails console in development mode and in production mode. In my case the locale is reset to :en.\n\nThis is a problem because many gems and plugins use I18n.t for example translating error messages in models...\n\nNote : this problem does not occur in Rails 2.3.x.\n", "labels": [], "number": 703, "updated_at": "2011-05-21 15:12:03", "user": 789801, "closed_at": "2011-05-21 15:12:03", "id": 904383, "title": "I18n locale may be reset to :en if called from a plugin/gem", "url": "https://api.github.com/repos/rails/rails/issues/703", "created_at": "2011-05-16 03:49:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170350", "text": "_Imported from Lighthouse._\nComment by **Falk Pauser** - 2010-08-18 15:47:55 UTC\n\nI am using rails3-rc1 and have a similar issue. In config/application.rb I set config.i18n.default_locale = :de after putting a de.yml into \"config/locales\". In development-mode everything is just fine, I18n.locale and I18n.default_locale return :de in rails-console. At the production-server I18n.default_locale is :de too, but I18n.locale gives :en without any obvious reason...\n", "created_at": "2011-05-16 03:49:32", "user": 789801, "id": 1170350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170351", "text": "_Imported from Lighthouse._\nComment by **Falk Pauser** - 2010-08-19 08:49:41 UTC\n\nJust tried the current \"3-0-stable\" branch - same effect.\n", "created_at": "2011-05-16 03:49:34", "user": 789801, "id": 1170351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170352", "text": "_Imported from Lighthouse._\nComment by **Nicolas Blanco** - 2010-08-21 18:47:04 UTC\n\nThe only workaround I've found in to set the locale again in an initializer... bad...\n", "created_at": "2011-05-16 03:49:36", "user": 789801, "id": 1170352}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170353", "text": "_Imported from Lighthouse._\nComment by **cabgfx** - 2010-09-11 16:14:29 UTC\n\nHi,\nI've experienced the same problem, with Rails 3.0.0.\nMy app also bundles authlogic 2.1.6, which seems to cause the effect.\n\nI've fixed it for now, by brute-forcing _config.i18n.locale = :da_, in _/config/environments/production.rb._\nI'd assume this shouldn't be necessary, since I already have _config.i18n.default_locale_ set in _/config/application.rb_ ?\n\nThis issue has also been discussed on the [Google Group](http://groups.google.com/group/rubyonrails-core/browse_thread/thread/1fe3e88f9fe73177,)\n", "created_at": "2011-05-16 03:49:37", "user": 789801, "id": 1170353}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170354", "text": "_Imported from Lighthouse._\nComment by **Robert Pankowecki** - 2010-09-11 18:52:40 UTC\n\n```\n#vendor/plugins/foo/init.rb \nputs I18n.available_locales.inspect\nputs I18n.locale\n```\n\nWhen 'rails c' is run you can see:\n\n```\n[:en]\nen\n```\n\nThat is because you try to translate sth in plugin init.rb file and the translation is done until I18n configuration is fully loaded.\n\nFurthermore; using rails c shows that:\n\n```\nputs I18n.available_locales.inspect\n[:en]\nputs I18n.backend.available_locales\nen\nde\n```\n\nthe `locale' and`available_locales' are cached in the I18n library the first time they are used as you can see.\n\nIn other words: Gem or plugin should not try to translate anything until all initializers are run. I would say it is gem/plugin or I18n fault, not rails.\n", "created_at": "2011-05-16 03:49:39", "user": 789801, "id": 1170354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170355", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-09-11 21:10:35 UTC\n\nI definitely agree with Robert. It's not Rails' fault and this can almost certainly be closed.\n", "created_at": "2011-05-16 03:49:40", "user": 789801, "id": 1170355}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170356", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-12 13:45:33 UTC\n\nThis is a sad attitude. This remembers me the way Grails developers treat their issues. They provide GORM for ORM but rely on Hibernate and when there is some issue with GORM the mark the issue as \"won't fix\" because this is Hibernate fault, not Grails' as if the user had the chance to use another framework with GORM.\n\nI18n is the only supported way of adding internationalization support to Rails. It just happens that it is a separate gem that Rails is taking advantage of, but if i18n is broken in Rails it doesn't mean it is not Rails fault and that issues should be marked as invalid. If the i18n gem is not good enough for Rails (which is not the case), then should think in another way of getting i18n in Rails. Not simply telling it doesn't care about i18n and it won't try to fix any related issues even if the source isn't exactly in rails repository.\n\nBesides that, it is not clear to me that this is a i18n issue instead of a Rails one. I still think the problem is in Rails, not on i18n itself. Rails should assure the order in which the calls are done to ensure the plugins will have i18n loaded before their initialization code gets executed...\n", "created_at": "2011-05-16 03:49:41", "user": 789801, "id": 1170356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170357", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-09-12 14:00:21 UTC\n\nRodrigo, firstly I'm not a core member so the issue is not closed forever! :)\n\nSecondly, I apologize, I did rush through the ticket. Also I usually leave a friendly \"closing now, if you still think this is an issue then leave a comment and I'll reopen it\" comment while closing an issue.\n\nAssigning ticket to an author of the i18n gem for confirmation as to whether this is a i18n issue, gem/plugin issue or an issue with Rails.\n\nIn the mean time if it's at all possible can you try writing a failing test for rails? That's usually the best way to demonstrate that it's a Rails issue.\n", "created_at": "2011-05-16 03:49:43", "user": 789801, "id": 1170357}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170359", "text": "_Imported from Lighthouse._\nComment by **Rodrigo Rosenfeld Rosas** - 2010-09-12 14:13:39 UTC\n\nHi Rohit, thank you for reopening the ticket.\n\nI've actually isolated the problem in June 14 (one day after my birthday :) ), in the Google Group discussion commented by cabgfx. We don't even need any plugin for reproducing the issue.\n\nI'm just not sure how to write some test of this kind. If someone could suggest me any approach (what subproject, and how to simulate Rails loading, preferencially in a fast way that won't impact too much on test run speed) I could try to write one...\n", "created_at": "2011-05-16 03:49:44", "user": 789801, "id": 1170359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170360", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 20:55:19 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:49:46", "user": 789801, "id": 1170360}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170361", "text": "_Imported from Lighthouse._\nComment by **Roger Campos** - 2011-02-25 22:49:13 UTC\n\nThis [commit](https://github.com/saimonmoore/rails/commit/90a089c6ded98a7dde59ccd54ece9e17a81e3e3b) from Saimon Moore maybe should fix this ticket.\n", "created_at": "2011-05-16 03:49:47", "user": 789801, "id": 1170361}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5182\nCreated by **Alex** - 2011-02-17 08:07:20 UTC\n\nThe :group option is broken for multiple fields when performing an AR calculation. See the example below:\n\n``` ruby\nAccount.count(:all, :group => 'firm_id, credit_limit') # returns <OrderedHash {60=>1, 55=>1, 50=>1, 53=>1}>\n```\n\nThe example above demonstrates that the returned hash incorrectly excludes data rows and columns. See below for the expected return value:\n\n``` ruby\nAccount.count(:all, :group => 'firm_id, credit_limit') # should return <OrderedHash {[2, 60]=>1, [nil, 50]=>1, [9, 53]=>1, [6, 55]=>1, [1, 50]=>1, [6, 50]=>1}>\n```\n\nI have a attached a patch (test included) for supporting grouping by multiple fields. The behavior for grouping by a single field or an association is unchanged. Also, the :group option still takes in a string as always.\n", "labels": [], "number": 704, "updated_at": "2013-10-16 18:08:43", "user": 789801, "closed_at": "2011-05-21 15:12:03", "id": 904384, "title": "ActiveRecord::Calculations returns incorrect data when grouping by multiple fields", "url": "https://api.github.com/repos/rails/rails/issues/704", "created_at": "2011-05-16 03:49:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170363", "text": "_Imported from Lighthouse._\nComment by **Sebastian** - 2010-09-11 02:27:33 UTC\n\nI just ported your patch to 3-0-stable: #497\n", "created_at": "2011-05-16 03:49:55", "user": 789801, "id": 1170363}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170364", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:53:01 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:49:56", "user": 789801, "id": 1170364}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170365", "text": "_Imported from Lighthouse._\nComment by **Alex** - 2010-11-18 18:39:14 UTC\n\nThis has been resolved, see #497 https://rails.lighthouseapp.com/projects/8994/tickets/497-activerecord-calculate-broken-for-multiple-fields-in-group-option\n", "created_at": "2011-05-16 03:49:58", "user": 789801, "id": 1170365}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170366", "text": "Attachments saved to Gist: http://gist.github.com/971693\n", "created_at": "2011-05-16 03:49:59", "user": 789801, "id": 1170366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26442607", "text": "I am using activerecord 3.2.14 and just experienced this issue when I included two fields in the same group statement:\n`group('id, another_table.field')`\n\nPlacing these in two separate group statements then produced the correct count.\n", "created_at": "2013-10-16 18:08:43", "user": 214311, "id": 26442607}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5224\nCreated by **Vincent** - 2011-01-04 16:24:43 UTC\n\nI've encountered a really strange problem with the latest Rails master. Anything that involves RMagick gem will run OK on the first request and generate 'uninitialized constant' error on all subsequent requests, until you restart WEBrick. Try running the attached app and just refresh the page. I didn't have this problem 2 days ago. I'm using Ruby 1.9.2dev on Ubuntu Linux 10.04.\n\nError:\n\n```\nActionController::RoutingError (uninitialized constant RmagicController::Magick):\n  app/controllers/rmagic_controller.rb:4:in `<class:RmagicController>'\n  app/controllers/rmagic_controller.rb:1:in `<top (required)>'\n```\n\nrmagic_controller.rb:\n\n```\nclass RmagicController < ApplicationController\n\n  require 'RMagick'\n  include Magick\n\n  def index\n    img = Magick::Image.read(File.join(Rails.public_path, 'images/test.jpg')).first\n    send_data(img.to_blob, { :type => 'image/jpeg', :disposition => \"inline\" })\n  end\nend\n```\n", "labels": [], "number": 705, "updated_at": "2011-05-21 15:12:04", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904385, "title": "Rmagick doesn't work", "url": "https://api.github.com/repos/rails/rails/issues/705", "created_at": "2011-05-16 03:50:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170368", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-09 07:07:02 UTC\n\nVincent, this sounds very much like an issue with class reloading in development mode - the classic sign is the working on first request and not subsequent requests. It'll probably work fine in production mode or if you set config.cache_classes = true in config/environments/development.rb.\n\nIf you remove the require and include from the controller it should also work as the Gemfile should be loading RMagick anyway. I'm guessing that your running on a case sensitive filesystem so your gem line in the Gemfile should be:\n\n``` ruby\ngem 'rmagick', :require => 'RMagick'\n```\n", "created_at": "2011-05-16 03:50:06", "user": 789801, "id": 1170368}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5247\nCreated by **Mike Gehard** - 2010-10-19 16:52:54 UTC\n\nI am wondering why testing that a specific layout was used to render a template is dependent on you first testing that a partial is being rendered.  From the code:\n\n```\n  when Hash\n    if expected_partial = options[:partial]\n      if expected_locals = options[:locals]\n        actual_locals = @locals[expected_partial.to_s.sub(/^_/,'')]\n        expected_locals.each_pair do |k,v|\n          assert_equal(v, actual_locals[k])\n        end\n      elsif expected_count = options[:count]\n        actual_count = @partials[expected_partial]\n        msg = build_message(message,\n                \"expecting ? to be rendered ? time(s) but rendered ? time(s)\",\n                 expected_partial, expected_count, actual_count)\n        assert(actual_count == expected_count.to_i, msg)\n      elsif options.key?(:layout)\n        msg = build_message(message,\n                \"expecting layout <?> but action rendered <?>\",\n                expected_layout, @layouts.keys)\n\n        case layout = options[:layout]\n        when String\n          assert(@layouts.include?(expected_layout), msg)\n        when Regexp\n          assert(@layouts.any? {|l| l =~ layout }, msg)\n        when nil\n          assert(@layouts.empty?, msg)\n        end\n      else\n        msg = build_message(message,\n                \"expecting partial <?> but action rendered <?>\",\n                options[:partial], @partials.keys)\n        assert(@partials.include?(expected_partial), msg)\n      end\n    else\n      assert @partials.empty?,\n        \"Expected no partials to be rendered\"\n    end\n  end\n```\n\nNotice that the test for the \"layout\" param (elsif options.key?(:layout)) is nested within the check to see if you are testing for partials (if expected_partial = options[:partial]).\n\nIf I assume that this is correct behavior, which I don't think it should be, even if I pass in :partial => \"something\" then I get an error that says \"undefined local variable expected_layout\" because no where in assert_template does that variable get assigned.\n\nI have looked through master and have found some tests that seem to be testing this but I am not sure that they are working properly because if you don't pass in the :partial option then it ignores the three assertions that test the @layouts collection.\n\nPatches upcoming...\n", "labels": [], "number": 706, "updated_at": "2011-05-21 15:12:04", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904386, "title": "assert_template wrong behavior for testing layout used to render template?", "url": "https://api.github.com/repos/rails/rails/issues/706", "created_at": "2011-05-16 03:50:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170369", "text": "_Imported from Lighthouse._\nComment by **Mike Gehard** - 2010-07-30 14:40:14 UTC\n\nI have confirmed that assert_template does not work as you would expect and as the tests show in /actionpack/test/controller/layout_test.rb.\n\nExample:\nclass HasOwnLayoutController < LayoutTest\n\n# layout 'item'\n\n  layout 'item123'\nend\n\ndef test_layout_set_when_set_in_controller\n    @controller = HasOwnLayoutController.new\n    get :hello\n    assert_template :layout => \"layouts/item\"\n  end\n\nThis test still passes with the changed layout.\n", "created_at": "2011-05-16 03:50:13", "user": 789801, "id": 1170369}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170370", "text": "_Imported from Lighthouse._\nComment by **Mike Gehard** - 2010-08-02 15:01:23 UTC\n\nHere is the patch that makes checking for layouts independent of checking for partials.\n", "created_at": "2011-05-16 03:50:14", "user": 789801, "id": 1170370}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170371", "text": "_Imported from Lighthouse._\nComment by **Jean** - 2010-08-15 19:31:51 UTC\n\nI confirm that I have this problem too. \n\nIntroduced here : http://github.com/rails/rails/commit/947f86c699b33bd44703b3554db58e4cfca37c86\n", "created_at": "2011-05-16 03:50:15", "user": 789801, "id": 1170371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170372", "text": "_Imported from Lighthouse._\nComment by **Jean** - 2010-08-18 12:09:00 UTC\n\nIs there a problem with the patch ? \n\nIt seems to work for me and in the meantime using the old way (@controller.response.layout) raises a deprecation warning which tells us to use template.layout instead. This would be fine except for 2 things : \n- @controller.response.template or @controller.template both return nil  (even though @controller.response.layout isn't)\n- The template method itself is in the deprecated helper and I suppose will be deprecated soon enough\n", "created_at": "2011-05-16 03:50:17", "user": 789801, "id": 1170372}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170373", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-08-24 11:25:43 UTC\n\nThis patch does not apply cleanly anymore. Would you mind to do it again, thank you.\n", "created_at": "2011-05-16 03:50:18", "user": 789801, "id": 1170373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170374", "text": "_Imported from Lighthouse._\nComment by **Jean** - 2010-08-24 12:34:12 UTC\n\nI checked out the latest rails 3-0-stable and recreated the patch.\n", "created_at": "2011-05-16 03:50:19", "user": 789801, "id": 1170374}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170375", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:33 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:50:21", "user": 789801, "id": 1170375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170376", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:01:59 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:50:22", "user": 789801, "id": 1170376}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170377", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-16 01:42:40 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:50:23", "user": 789801, "id": 1170377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170378", "text": "_Imported from Lighthouse._\nComment by **Dave Myron** - 2010-10-21 10:39:13 UTC\n\nIt seems like the patch will no longer catch `:layout => false` since it does an `if expected_layout = options[:layout]` - which will never pass if :layout is false. It should use the original method of checking if the :layout key is present.\n", "created_at": "2011-05-16 03:50:25", "user": 789801, "id": 1170378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170379", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:50:26", "user": 789801, "id": 1170379}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170380", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:22 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:50:27", "user": 789801, "id": 1170380}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170381", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:50:28", "user": 789801, "id": 1170381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170383", "text": "_Imported from Lighthouse._\nComment by **Geoffrey Hichborn** - 2011-04-06 23:15:50 UTC\n\nThis bug appears to be a symptom of this: http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/303aa9608bef3ebd\n\nThe bug isn't really assert_template, but the fact that using :partial and :layout together force the layout to be a partial.\n", "created_at": "2011-05-16 03:50:30", "user": 789801, "id": 1170383}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170384", "text": "Attachments saved to Gist: http://gist.github.com/971695\n", "created_at": "2011-05-16 03:50:31", "user": 789801, "id": 1170384}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197585", "text": "I can confirm that this is a problem in rails 3.0.7, and that the documentation doesn't seem to include anything about the `:layout` option. Anyway, I'm getting an exception thrown when I use either of the following in my tests:\n\n``` ruby\nassert_template :partial => '_customer', :layout => false\nassert_template :partial => '_customer', :layout => nil\n```\n", "created_at": "2011-05-18 15:15:15", "user": 8374, "id": 1197585}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5252\nCreated by **gucki** - 2011-02-19 09:28:15 UTC\n\nWhen trying to use the ActiveModel Validations together with sequel like\n\n<pre>\nclass Message < Sequel::Model\n  include ActiveModel::Validations\n  validates :text, :presence => true, :length => { :within => 1..10000 }\nend\n</pre>\n\n\nI get the following error: ArgumentError (interning empty string). \n\n<pre>\nactivemodel (3.0.0.rc) lib/active_model/naming.rb:27:in to_sym' \nactivemodel (3.0.0.rc) lib/active_model/naming.rb:27:inhuman'\nactivemodel (3.0.0.rc) lib/active_model/naming.rb:26:in map' \nactivemodel (3.0.0.rc) lib/active_model/naming.rb:26:inhuman'\nactivemodel (3.0.0.rc) lib/active_model/errors.rb:313:in generate_message' \nactivemodel (3.0.0.rc) lib/active_model/errors.rb:188:inadd'\nactivemodel (3.0.0.rc) lib/active_model/errors.rb:223:in add_on_blank' \nactivemodel (3.0.0.rc) lib/active_model/errors.rb:221:ineach'\nactivemodel (3.0.0.rc) lib/active_model/errors.rb:221:in add_on_blank' \nactivemodel (3.0.0.rc) lib/active_model/validations/presence.rb:9:invalidate'\nactivesupport (3.0.0.rc) lib/active_support/callbacks.rb:309:in send' \nactivesupport (3.0.0.rc) lib/active_support/callbacks.rb:309:in_callback_before_47'\nactivesupport (3.0.0.rc) lib/active_support/callbacks.rb:409:in _run_validate_callbacks' \nactivemodel (3.0.0.rc) lib/active_model/validations.rb:201:inrun_validations!'\nactivemodel (3.0.0.rc) lib/active_model/validations.rb:168:in valid?' /home/gucki/.rvm/gems/ree-1.8.7-2010.01@rails3/bundler/gems/sequel-a54e149/lib/sequel/model/base.rb:957:insave' ...\n</pre>\n\n\nJeremy (Sequel maintainer says): This looks like an ActiveModel bug, as they shouldn't be attempting to call to_sym on an empty string. Basically, they should be checking for anonymous classes and they aren't.\n\nA quick fix is to modify ActiveModel::Naming from\n\n```\n  defaults = @klass.lookup_ancestors.map do |klass|\n    klass.model_name.underscore.to_sym\n  end\n```\n\nto\n\n```\n  defaults = @klass.lookup_ancestors.map do |klass|\n    next if klass.name==\"\"\n    klass.model_name.underscore.to_sym\n  end.compact\n```\n\nIf this fix is okay, I can create a patch for it.\n", "labels": [], "number": 707, "updated_at": "2011-05-21 15:12:04", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904388, "title": "ActiveModel Naming should take care of anonymous classes", "url": "https://api.github.com/repos/rails/rails/issues/707", "created_at": "2011-05-16 03:50:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170386", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2010-08-09 12:32:53 UTC\n\nDon't know about the solution as such, just wanted to comment that AS defines #anonymous? and if the patch is fine it would be preferred over the comparison by hand.\n", "created_at": "2011-05-16 03:50:37", "user": 789801, "id": 1170386}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170387", "text": "_Imported from Lighthouse._\nComment by **gucki** - 2010-08-09 12:45:55 UTC\n\nThanks for the hint with #anonymous?, that's indeed nicer. \n\nThe patch against latest master is now available here:\nhttp://github.com/gucki/rails/commit/e0f7490a607f3444223c0769bd528268f3f2bf2a.diff\n", "created_at": "2011-05-16 03:50:39", "user": 789801, "id": 1170387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170388", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2010-08-09 13:19:26 UTC\n\nCool! Yeah in addition to being encapsulated, #name returns either an empty string or nil for anonymous classes/modules, depending on the interpreter.\n\nRails no longer assumes all Active Support is loaded, you also need to cherry-pick this file active_support/core_ext/module/anonymous.rb:\n\n```\nrequire 'active_support/core_ext/module/anonymous'\n```\n\nto ensure #anonymous is available (it is irrelevant if it is due to previously required code, you know).\n", "created_at": "2011-05-16 03:50:40", "user": 789801, "id": 1170388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170389", "text": "_Imported from Lighthouse._\nComment by **gucki** - 2010-08-09 13:30:18 UTC\n\nOk, here we go again :-)\nhttp://github.com/gucki/rails/commit/5f58dbb4807cd895a3faa91c484bfbe49e253848.diff\n", "created_at": "2011-05-16 03:50:41", "user": 789801, "id": 1170389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170391", "text": "_Imported from Lighthouse._\nComment by **John Firebaugh** - 2010-08-09 15:45:35 UTC\n\nWhy is lookup_ancestors returning an anonymous class in this case? My guess is the right solution lies in changing that, rather than in explicitly checking anonymous? in #human.\n", "created_at": "2011-05-16 03:50:43", "user": 789801, "id": 1170391}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170392", "text": "_Imported from Lighthouse._\nComment by **gucki** - 2010-08-09 16:15:05 UTC\n\nYou mean lookup_ancestors should always remove anonymous classes from its result? I guess also anonymous ancestors might be used somewhere and so should be included in the result, but this is to _internal_ to me...sorry.\n", "created_at": "2011-05-16 03:50:44", "user": 789801, "id": 1170392}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170393", "text": "_Imported from Lighthouse._\nComment by **John Firebaugh** - 2010-08-09 17:44:40 UTC\n\nIf you look at the other places lookup_ancestors is used, none of them expect it to return anonymous classes. I think the !anonymous? check should be in lookup_ancestors, or in a Sequel-specific override of lookup_ancestors.\n\nBTW, this example works for me:\n\n```\nclass Message < Sequel::Model\n  include ActiveModel::Validations\n\n  def text\n  end\n\n  validates :text, :presence => true, :length => { :within => 1..10000 }\nend\n\nMessage.new.valid?\n```\n\nI think you must be using something more like:\n\n```\nclass Message < Sequel::Model(:message)\n```\n\nWhich, if you are plugging Sequel's active_model plugin into Sequel::Model, will indeed cause Message.lookup_ancestors to return the anonymous class created by Sequel::Model(:message).\n", "created_at": "2011-05-16 03:50:45", "user": 789801, "id": 1170393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170394", "text": "_Imported from Lighthouse._\nComment by **gucki** - 2010-08-10 07:31:24 UTC\n\nWell, I guess the core team has to decide. So please, could any of the core team members let us know where to patch? I'll then provide the tested patch asap :)\n\nBTW: You might be right, I might have missed the arguments to Sequel::Model in the example above. Sorry :(\n", "created_at": "2011-05-16 03:50:47", "user": 789801, "id": 1170394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170395", "text": "_Imported from Lighthouse._\nComment by **gucki** - 2010-08-25 13:48:18 UTC\n\nSo here's the patch to make ActiveModel::Translation#lookup_ancestors ignore anonymous classes. Would be nice if it'd be included in 3.0 final. :)\nhttp://github.com/gucki/rails/commit/5aa7e64eefe388425575204ac7e8299c29d6bd47.diff\n", "created_at": "2011-05-16 03:50:48", "user": 789801, "id": 1170395}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170396", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-08-26 03:22:23 UTC\n\nNeed more eyes on this ticket and patch. Assigning to Santiago for review.\n", "created_at": "2011-05-16 03:50:49", "user": 789801, "id": 1170396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170397", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-09 20:46:10 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:50:51", "user": 789801, "id": 1170397}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170398", "text": "_Imported from Lighthouse._\nComment by **gucki** - 2010-10-28 07:27:39 UTC\n\nIn the hope it'll soon get fixed upstream :)\n\n```\ndef lookup_ancestors\n  self.ancestors.select { |x| x.respond_to?(:model_name) && !x.anonymous? }\nend\n```\n", "created_at": "2011-05-16 03:50:52", "user": 789801, "id": 1170398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170399", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:05:26 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:50:53", "user": 789801, "id": 1170399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170400", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:53:44 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:50:55", "user": 789801, "id": 1170400}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170401", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 20:09:43 UTC\n\nIs this still an issue? gucki can you provide a patch again? Thanks.\n", "created_at": "2011-05-16 03:50:56", "user": 789801, "id": 1170401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170402", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:22 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:50:57", "user": 789801, "id": 1170402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170403", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:50:58", "user": 789801, "id": 1170403}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5258\nCreated by **Greg Hazel** - 2010-07-30 21:28:28 UTC\n\nThe readonly feature bites me a lot. It seems that in the common case of a simple join, the models are marked as \"readonly?\" when in fact they are perfectly suitable for writing. Yes, I know how to force the object to be readable, but in this common case it seems pointless to force me to do that.\n\nWhy is this?\n\n``` irb\n>> User.last(:joins => :profile, :conditions => {:profiles => {:gender => \"male\"}}).readonly?\n  User Load (0.5ms)   SELECT `users`.* FROM `users` INNER JOIN `profiles` ON profiles.user_id = users.id WHERE (`profiles`.`gender` = 'male') ORDER BY users.id DESC LIMIT 1\n=> true\n```\n\nThat select statement seems to return a full, saveable user object. Why is it readonly?\n", "labels": [], "number": 708, "updated_at": "2011-05-21 15:12:04", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904390, "title": "readonly option", "url": "https://api.github.com/repos/rails/rails/issues/708", "created_at": "2011-05-16 03:51:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170404", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 01:20:52 UTC\n\nIf you would like this fixed please submit a patch.\n", "created_at": "2011-05-16 03:51:05", "user": 789801, "id": 1170404}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170405", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 01:56:47 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:51:07", "user": 789801, "id": 1170405}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170406", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:24:40 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:51:09", "user": 789801, "id": 1170406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170407", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:48:37 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:51:10", "user": 789801, "id": 1170407}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170408", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-02-02 19:24:34 UTC\n\n[state:open]\n", "created_at": "2011-05-16 03:51:12", "user": 789801, "id": 1170408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170409", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-05-03 00:00:13 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:51:13", "user": 789801, "id": 1170409}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170410", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-05-03 00:08:15 UTC\n\nOh no, not this again.\n[state:open]\n", "created_at": "2011-05-16 03:51:14", "user": 789801, "id": 1170410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170413", "text": "_Imported from Lighthouse._\nComment by **Brian Racer** - 2011-05-07 21:38:08 UTC\n\nThis is the intended and documented functionality of :join. If you know you will be modifying the associated model you should use :include instead. I don't think non-readonly functionality logic should be added to :join since there is overhead in instantiating each of the associated models.\n", "created_at": "2011-05-16 03:51:16", "user": 789801, "id": 1170413}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170415", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-05-08 00:48:21 UTC\n\nI'm not talking about the associated models, I'm talking about the primary models.\n", "created_at": "2011-05-16 03:51:17", "user": 789801, "id": 1170415}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5264\nCreated by **Nick Ragaz** - 2010-07-31 17:53:41 UTC\n\nRunning the `rake test:profile` task doesn't seem to work on 3.0.0.rc (or master) with 1.9.2 rc2.\n\nRunning it without ruby-prof in the Gemfile gives the message \"Add ruby-prof to your Gemfile\".\n\nAdding ruby-prof leads to this exception:\n\n```\nuninitialized constant BrowsingTest::STARTED\n```\n\nThis may be a ruby-prof problem -- I think it doesn't like using minitest (default for 1.9.2) instead of test/unit. But it's not very friendly default behaviour, and I have no idea how to fix it.\n", "labels": [], "number": 709, "updated_at": "2011-05-21 15:12:04", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904391, "title": "\"test:profile\" fails on 3.0.0.rc with Ruby 1.9.2", "url": "https://api.github.com/repos/rails/rails/issues/709", "created_at": "2011-05-16 03:51:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170417", "text": "_Imported from Lighthouse._\nComment by **der_flo** - 2010-09-09 13:58:58 UTC\n\nI get the same error with rails 3.0.0 final.\n", "created_at": "2011-05-16 03:51:24", "user": 789801, "id": 1170417}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170418", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:32:10 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:51:26", "user": 789801, "id": 1170418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170419", "text": "_Imported from Lighthouse._\nComment by **Marc Love** - 2011-04-22 07:16:31 UTC\n\n[state:open]\n\nThis is still happening on master. I have nothing to add to Nick's original ticket description. This is a problem with Ruby 1.9.2 using MiniTest by default, which apparently doesn't have something that Test::Unit did have and which the Rails performance tests depend upon.\n", "created_at": "2011-05-16 03:51:27", "user": 789801, "id": 1170419}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5277\nCreated by **Erik Hetzner** - 2010-08-02 22:14:05 UTC\n\nIf an HTTP client fails to supply an Accept header, this should, I think, be considered equivalent to a \"`*/*`\" Accept header. From RFC 2616, section 14.1:\n\n> If no Accept header field is present, then it is assumed that the\n> client accepts all media types.\n\nAttached is a patch that adds a (failing) test for this behavior.\n", "labels": [], "number": 710, "updated_at": "2011-05-21 15:12:04", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904392, "title": "Rails 3.0.0.RC responds strangely to empty Accept header", "url": "https://api.github.com/repos/rails/rails/issues/710", "created_at": "2011-05-16 03:51:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170420", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 01:09:27 UTC\n\nPlease confirm that this is still an issue on 3.0.\n", "created_at": "2011-05-16 03:51:34", "user": 789801, "id": 1170420}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170421", "text": "_Imported from Lighthouse._\nComment by **Erik Hetzner** - 2010-10-11 02:19:34 UTC\n\nMy test still fails with the latest from git.\n\nAttaching a patch according to instructions at https://rails.lighthouseapp.com/projects/8994/sending-patches\n", "created_at": "2011-05-16 03:51:35", "user": 789801, "id": 1170421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170422", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 02:22:43 UTC\n\nThank you, I'll mark this as open.\n", "created_at": "2011-05-16 03:51:36", "user": 789801, "id": 1170422}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170423", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:24:59 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:51:38", "user": 789801, "id": 1170423}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170424", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:48:32 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:51:39", "user": 789801, "id": 1170424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170425", "text": "_Imported from Lighthouse._\nComment by **Erik Hetzner** - 2011-02-02 20:19:32 UTC\n\nYes, my submitted test still fails with the latest 3-0-stable branch. No new information.\n\n[state:open]\n", "created_at": "2011-05-16 03:51:40", "user": 789801, "id": 1170425}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170426", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-05-03 00:00:10 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:51:42", "user": 789801, "id": 1170426}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170427", "text": "_Imported from Lighthouse._\nComment by **Erik Hetzner** - 2011-05-03 16:50:42 UTC\n\nStill an issue. Attaching a new failing test against master.\n", "created_at": "2011-05-16 03:51:43", "user": 789801, "id": 1170427}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170428", "text": "_Imported from Lighthouse._\nComment by **Erik Hetzner** - 2011-05-03 16:51:04 UTC\n\n[state:open]\n", "created_at": "2011-05-16 03:51:44", "user": 789801, "id": 1170428}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170429", "text": "Attachments saved to Gist: http://gist.github.com/971696\n", "created_at": "2011-05-16 03:51:46", "user": 789801, "id": 1170429}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5313\nCreated by **Russell Quinn** - 2010-10-02 09:56:38 UTC\n\ndb:drop drops the database for the current RAILS_ENV or _development_ if not defined.\n\ndb:create creates the database for the current RAILS_ENV, but if this is set to _development_ then it also creates the _test_ database if this is configured.\n\nThis behaviour is hidden (the Rake task description doesn't mention it) and it makes doing a rake db:drop followed by a rake db:create complain about the _test_ database already existing.\n\nFor example, the following happens if RAILS_ENV=development or there is no RAILS_ENV defined (hence defaulting to _development_):\n\n```\n$ rake db:drop\n$ rake db:create\ndatabase_test already exists\n```\n\nMaybe rake db:drop should also drop the test database? But this also leads to sneaky functionality. My vote is that the two tasks simply do exactly what they state. rake db:create:all and rake db:drop:all can typically be used to create and drop _development_ and _test_ databases as the commands only operate on local databases and _production_ is usually remote.\n\nPatch attached to update the rake task and only mention of this behaviour (in a guide.)\n\nRussell.\n", "labels": [], "number": 711, "updated_at": "2011-05-21 15:12:04", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904394, "title": "Rake tasks db:create and db:drop are not consistent in behaviour", "url": "https://api.github.com/repos/rails/rails/issues/711", "created_at": "2011-05-16 03:51:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170430", "text": "_Imported from Lighthouse._\nComment by **Russell Quinn** - 2010-08-06 07:59:35 UTC\n\nPatch attached.\n", "created_at": "2011-05-16 03:51:52", "user": 789801, "id": 1170430}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170431", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2010-09-04 15:40:39 UTC\n\ni encountered this too, see #5382\n", "created_at": "2011-05-16 03:51:53", "user": 789801, "id": 1170431}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170432", "text": "_Imported from Lighthouse._\nComment by **Marjan Krekoten'** - 2010-09-20 12:48:33 UTC\n\nI think it's nice to have test db created along with development. So I attached another patch which drops also test db while dropping development.\n", "created_at": "2011-05-16 03:51:54", "user": 789801, "id": 1170432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170433", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2010-09-20 18:35:49 UTC\n\ni cant see the point why it should create test db.\n", "created_at": "2011-05-16 03:51:56", "user": 789801, "id": 1170433}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170434", "text": "_Imported from Lighthouse._\nComment by **Russell Quinn** - 2010-09-27 08:55:30 UTC\n\nWhy not just stick to the currently defined RAILS_ENV like everything else? I really don't think it makes sense to create test just because it's kind of convenient.\n\nBut, anyway, whichever way, create and drop need to do the same thing.\n", "created_at": "2011-05-16 03:51:57", "user": 789801, "id": 1170434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170435", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-06 16:10:41 UTC\n\nI agree @db:create@ and @db:drop@ should do the same thing and I like Russell's patch better. As you said, also dropping the test database seems sneaky.\n\nIt could use some tests, though. :)\n", "created_at": "2011-05-16 03:51:58", "user": 789801, "id": 1170435}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170436", "text": "_Imported from Lighthouse._\nComment by **viktor tron (strawberry)** - 2011-01-12 14:55:38 UTC\n\nis there any update on if and when this change is pushed?\n\nbtw this ticket supercedes \nhttps://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/4128\n", "created_at": "2011-05-16 03:52:00", "user": 789801, "id": 1170436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170437", "text": "_Imported from Lighthouse._\nComment by **ronen barzel** - 2011-03-24 17:44:00 UTC\n\none additional motivation for consistent `db:drop` and `db:create` behavior:  the task `db:migrate:reset` calls both so currently yields a warning with every use after the first time.  (i was looking for/going to create a ticket on `db:migrate:reset` but found this one.)\n\n```\n$ rake db:migrate:reset > /dev/null\n$ rake db:migrate:reset > /dev/null\ndb/test.sqlite3 already exists\n$ rake db:migrate:reset > /dev/null\ndb/test.sqlite3 already exists\n```\n", "created_at": "2011-05-16 03:52:01", "user": 789801, "id": 1170437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170438", "text": "Attachments saved to Gist: http://gist.github.com/971697\n", "created_at": "2011-05-16 03:52:02", "user": 789801, "id": 1170438}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5371\nCreated by **PreciousBodilyFluids** - 2011-02-17 06:48:08 UTC\n\nIn a controller, after declaring a layout for some particular actions, the remaining actions are processed without any layouts at all. \n\nI wasn't sure how to reproduce this on a smaller scale, so I generated a new Rails app to demonstrate it:\n\nhttp://github.com/chanks/layout_bug\n\nSo, if you do:\n\n```\nclass PostsController < ApplicationController\n  layout 'other_layout', :only => :new\n```\n\nThen the index, show and edit actions are all rendered without a layout. I've tried to force the correct behavior by doing:\n\n```\nclass PostsController < ApplicationController\n  layout 'other_layout', :only => :new\n  layout 'application', :only => [:index, :show, :edit]\n```\n\nBut this just makes the new action render without a layout. \n\nI've reproduced it in the demo app with both RC1 and master.\n", "labels": [], "number": 712, "updated_at": "2012-01-22 20:26:38", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904396, "title": "layout with :only/:except options makes other actions render without layouts", "url": "https://api.github.com/repos/rails/rails/issues/712", "created_at": "2011-05-16 03:52:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170439", "text": "_Imported from Lighthouse._\nComment by **PreciousBodilyFluids** - 2010-08-24 03:38:08 UTC\n\nThis bug is still present in RC2. Can anyone else reproduce this, to make sure it's not just me? This seems like a major problem with the layout system to me, and I'm not sure how it's gone unnoticed for so long.\n", "created_at": "2011-05-16 03:52:08", "user": 789801, "id": 1170439}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170440", "text": "_Imported from Lighthouse._\nComment by **Roberto Thais** - 2010-08-24 04:59:58 UTC\n\nI'm not sure if this is a bug. Why don't you simply do\n    render :layout => 'other_layout'\ninside your 'new' action? This will render the application layout for all the remaining ones.\n", "created_at": "2011-05-16 03:52:09", "user": 789801, "id": 1170440}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170442", "text": "_Imported from Lighthouse._\nComment by **PreciousBodilyFluids** - 2010-08-24 05:45:13 UTC\n\nIt's pretty unexpected, don't you agree? Why would naming a layout for some specific actions imply that you want the others to go layoutless? And, of course, it goes against the Rails convention (of using the application layout as the default).\n\nI actually have hacked around it by using render :layout in that one action, but with the release of Rails 3 I'm trying to standardize my apps on respond_with, and you can't use both an explicit render and respond_with in an action (double render error).\n", "created_at": "2011-05-16 03:52:11", "user": 789801, "id": 1170442}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170443", "text": "_Imported from Lighthouse._\nComment by **Cyrille** - 2010-08-24 07:23:04 UTC\n\n```\nrender :layout => 'other_layout'\n```\n\nis definitely working however I personally think layout is better in controller class declaration\n\n```\nlayout 'other_layout', :only => :new\n```\n\nis not working for me as well\n", "created_at": "2011-05-16 03:52:12", "user": 789801, "id": 1170443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170444", "text": "_Imported from Lighthouse._\nComment by **Cyrille** - 2010-08-24 07:26:37 UTC\n\nSee also #3619 that seems to be related\n", "created_at": "2011-05-16 03:52:14", "user": 789801, "id": 1170444}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170445", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-08-24 10:55:35 UTC\n\nIt is not being ignored. Any fix is going to have some performance penalty unless the whole conditions track is compiled into a single method call the way it is done for before_filter callbacks.\n", "created_at": "2011-05-16 03:52:15", "user": 789801, "id": 1170445}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170446", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:33:53 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:52:16", "user": 789801, "id": 1170446}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170447", "text": "_Imported from Lighthouse._\nComment by **PreciousBodilyFluids** - 2011-02-02 17:26:06 UTC\n\n[state:open]\n\nI've reproduced this on the current 3-0-stable branch (and updated my reproduction: http://github.com/chanks/layout_bug). I tried it on master, but the app wouldn't even boot up, which is probably an unrelated issue with master.\n", "created_at": "2011-05-16 03:52:18", "user": 789801, "id": 1170447}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3605782", "text": "I've been seeing this issue on Rails 3.1.3. I did find a good way to work around this, but I believe it should work with the `:except` argument added. Right now, I've removed the `:except` argument and added `render :layout => 'application'` to the bottom of the `show` action, which is the one I don't want to use my `admin` layout.\n\nI've got a nested, **admin.html.ham:**\n\n``` ruby\n- content_for :content do\n    %nav\n        # menu stuff here\n    = content_for?(:news_content) ? yield(:news_content) : yield\n= render :template => 'layouts/application'\n```\n\nwhich nests inside **application.html.erb:**\n\n``` ruby\n# more up here\n    <div id=\"container\">\n        <%= content_for?(:content) ? yield(:content) : yield %>\n    </div> <!--! end of #container -->\n# more down here\n```\n\nMaybe the problem is the use of two different template languages, but it shouldn't matter. There are no errors in my log. Just no layout rendered.\n", "created_at": "2012-01-22 20:25:56", "user": 247177, "id": 3605782}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5397\nCreated by **Sunny** - 2011-02-19 09:28:20 UTC\n\nRunning the task `test:uncommited` raises an undefined method 'map' for String, using git.\n\n```\n$ rake --trace test:uncommitted\n[...]\nrake aborted!\nundefined method `map' for #<String:0x8f3c728>\n~/.gems/railties-3.0.0.beta4/lib/rails/test_unit/testing.rake:77:in `file_list'\n[...]\n```\n\nMy environment:\n\n```\n$ ruby -v\nruby 1.9.2dev (2010-07-30 revision 28788) [i686-linux]\n$ rails -v\nRails 3.0.0.beta4\n```\n", "labels": [], "number": 713, "updated_at": "2011-07-19 03:27:24", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904397, "title": "rake test:uncommitted raises undefined method map on String", "url": "https://api.github.com/repos/rails/rails/issues/713", "created_at": "2011-05-16 03:52:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170448", "text": "_Imported from Lighthouse._\nComment by **Sunny** - 2010-08-17 22:44:34 UTC\n\nPatch that fixes this: http://github.com/sunny/rails/commit/22a13782b \\o/\n", "created_at": "2011-05-16 03:52:24", "user": 789801, "id": 1170448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170449", "text": "_Imported from Lighthouse._\nComment by **Sunny** - 2010-08-17 23:05:16 UTC\n\nAttaching diff rather than github fork.\n", "created_at": "2011-05-16 03:52:26", "user": 789801, "id": 1170449}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170450", "text": "_Imported from Lighthouse._\nComment by **Sunny** - 2010-08-17 23:15:56 UTC\n\nAdded [#5397 state:resolved] to commit message.\n", "created_at": "2011-05-16 03:52:27", "user": 789801, "id": 1170450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170451", "text": "_Imported from Lighthouse._\nComment by **Sunny** - 2011-01-17 22:00:48 UTC\n\nThis is a Ruby 1.9 issue. Strings don't come with .map() anymore so this task always fails.\n", "created_at": "2011-05-16 03:52:29", "user": 789801, "id": 1170451}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170453", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-13 13:09:53 UTC\n\nHi Sunny,\n\nI have spoken to Jos√© about this issue, and although your patch does fix it, the bigger issue at hand is that this code (rake task) isn't tested at all.\n\nIdeally the code within `def files` should be extracted into its own class which is tested and then used in this rake task.\n\nIf you are still interested in working on this patch please let me know.\n\nThanks\n\nJosh\n", "created_at": "2011-05-16 03:52:30", "user": 789801, "id": 1170453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170454", "text": "_Imported from Lighthouse._\nComment by **Sunny** - 2011-02-16 13:19:29 UTC\n\nI'm interested in working on this patch but I'm not very familiar with the Rails codebase. It might take long.\n\nAs for testing it, the tests would depend on svn and git. Is that ok for Rails?\n", "created_at": "2011-05-16 03:52:31", "user": 789801, "id": 1170454}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170455", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-16 14:01:54 UTC\n\nHi Sunny,\n\nThis is a good patch to start off with.\n\nAnd the tests won't need to depend on svn or git as we can stub out those parts.\n\nFork rails, create a new branch for what you are doing, and start making changes, if you have any questions do not hesitate to ask, you can also find me on irc in #rails-contrib.\n\nI will leave the ticket assigned to me so I can monitor its progress.\n\nThanks\n\nJosh\n", "created_at": "2011-05-16 03:52:33", "user": 789801, "id": 1170455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170456", "text": "_Imported from Lighthouse._\nComment by **Sunny** - 2011-03-07 13:29:48 UTC\n\nThanks Josh! Started making a few changes in a <a href=\"https://github.com/sunny/rails/tree/testuncommitted\">testuncommited</a> branch. Not sure I'm placing things where they should be and feeling somewhat stuck. Guess I need to crawl through the whole Rails test suite to find similar tests.\n", "created_at": "2011-05-16 03:52:34", "user": 789801, "id": 1170456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1604334", "text": "This still exists in rc4 with git.\n\n```\n$ rake test:uncommitted --trace\n** Invoke test:uncommitted (first_time)\n** Invoke test:prepare (first_time)\n** Invoke db:test:prepare (first_time)\n** Invoke db:abort_if_pending_migrations (first_time)\n** Invoke environment (first_time)\n** Execute environment\n** Execute db:abort_if_pending_migrations\n** Execute db:test:prepare\n** Invoke db:test:load (first_time)\n** Invoke db:test:purge (first_time)\n** Invoke environment \n** Execute db:test:purge\n** Execute db:test:load\n** Invoke db:schema:load (first_time)\n** Invoke environment \n** Execute db:schema:load\n** Execute test:prepare\n** Execute test:uncommitted\nrake aborted!\nundefined method `map' for #<String:0x000001034ef2b0>\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@chicagoiands/gems/railties-3.1.0.rc4/lib/rails/test_unit/testing.rake:109:in `file_list'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/testtask.rb:126:in `file_list_string'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/testtask.rb:99:in `block (2 levels) in define'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_utils_ext.rb:57:in `verbose'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/testtask.rb:98:in `block in define'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/task.rb:205:in `call'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/task.rb:205:in `block in execute'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/task.rb:200:in `each'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/task.rb:200:in `execute'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/task.rb:158:in `block in invoke_with_call_chain'\n/Users/docwhat/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/monitor.rb:201:in `mon_synchronize'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/task.rb:151:in `invoke_with_call_chain'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/task.rb:144:in `invoke'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:112:in `invoke_task'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:90:in `block (2 levels) in top_level'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:90:in `each'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:90:in `block in top_level'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:84:in `top_level'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:62:in `block in run'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:59:in `run'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/bin/rake:32:in `<top (required)>'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/bin/rake:19:in `load'\n/Users/docwhat/.rvm/gems/ruby-1.9.2-p290@global/bin/rake:19:in `<main>'\nTasks: TOP => test:uncommitted\n```\n\nThis is with:\n\n```\n$ ruby --version\nruby 1.9.2p290 (2011-07-09 revision 32553) [x86_64-darwin10.8.0]\n$ rake --version\nrake, version 0.9.2\n$ rails --version\nRails 3.1.0.rc4\n```\n", "created_at": "2011-07-19 03:27:24", "user": 40799, "id": 1604334}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5400\nCreated by **Rasmus R√∏nn Nielsen** - 2010-08-18 09:31:26 UTC\n\nUser (cols: id, name, age) has_many Group (cols: id, name)\n\nThe following results is made via console on rails3 edge/ruby1.9.2-rc2.\n\n```\nUser.first.serializable_hash :only => :name\n=> {\"name\"=>\"rasmus\"}\n\nUser.first.serializable_hash :include => :group\n=> {\"id\":1, \"name\"=>\"rasmus\", :group=>{\"id\"=>1, \"name\"=>\"Testgroup\"}}\n\nUser.first.serializable_hash :only => :name, :include => :group\n=> {\"name\"=>\"rasmus\", :group=>{}}\n```\n\nI would expect the last call to return {\"name\"=>\"rasmus\", :group=>{\"id\"=>1, \"name\"=>\"Testgroup\"}} (because I set up no :only/:except for group). But all attributes of the :group hash is removed because of the \"base\" :only => :name options is used for associated models also.\n\nFor now, I know I can do this, but I really think it should not be necessary.\n\n```\nUser.first.serializable_hash :only => :name, :include => { :group => { :only => [:id, :name] } }\n=> {\"name\"=>\"rasmus\", :group=>{\"id\"=>1, \"name\"=>\"Testgroup\"}}\n```\n\nI think the \"base :only/:expect\" should only apply to the \"base object\" (in this case user).\n\nIf other people feel this needs to be fixed, I'll make a patch. Please share your opinions on this, thanks.\n", "labels": [], "number": 714, "updated_at": "2012-01-25 17:35:08", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904398, "title": "ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models", "url": "https://api.github.com/repos/rails/rails/issues/714", "created_at": "2011-05-16 03:52:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170457", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-08-18 10:58:30 UTC\n\n+1\n", "created_at": "2011-05-16 03:52:41", "user": 789801, "id": 1170457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170458", "text": "_Imported from Lighthouse._\nComment by **michael groble** - 2011-01-24 01:06:51 UTC\n\nI saw this same issue today and decided to try to track it down.  Attached is a fix.  Note the tests verify to_xml, to_json, and serializable_hash all have the same behavior of not passing on :only and :except to includes.\n\nThis is the first time I've tried to contribute anything so comments/feedback welcome.\n", "created_at": "2011-05-16 03:52:42", "user": 789801, "id": 1170458}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170459", "text": "_Imported from Lighthouse._\nComment by **John Firebaugh** - 2011-02-22 07:20:20 UTC\n\n+1\n\nExisting behavior is quite surprising.\n", "created_at": "2011-05-16 03:52:43", "user": 789801, "id": 1170459}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170460", "text": "_Imported from Lighthouse._\nComment by **Paul Rosania** - 2011-03-02 22:56:09 UTC\n\n+1\n\nWe ran into this today and it blocks us from leveraging any of the built-in JSON serialization mechanisms with nested objects.\n\nThe patch no longer applies cleanly. Can we get this into core if the patch is updated?\n", "created_at": "2011-05-16 03:52:45", "user": 789801, "id": 1170460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170461", "text": "_Imported from Lighthouse._\nComment by **Pablo** - 2011-03-29 19:15:45 UTC\n\nHello, we are adding an smaller patch for the JSON Serialization. \nAn additional ticket may be opened for correcting it in XML.\nRegards,\n", "created_at": "2011-05-16 03:52:46", "user": 789801, "id": 1170461}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170462", "text": "_Imported from Lighthouse._\nComment by **Federico Brubacher** - 2011-04-22 12:28:09 UTC\n\nSantiago, Jeremy have you guys been able to review this patch ?\n", "created_at": "2011-05-16 03:52:47", "user": 789801, "id": 1170462}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170463", "text": "Attachments saved to Gist: http://gist.github.com/971698\n", "created_at": "2011-05-16 03:52:49", "user": 789801, "id": 1170463}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3653943", "text": "Could someone please reopen this ticket.  I am experiencing the same issue on Rails 3.1.3.\n\nSeems like the default behavior is broken.  :only, :except, and :method options defined for the base model should not be passed to included associations.\n", "created_at": "2012-01-25 16:41:51", "user": 44361, "id": 3653943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3654971", "text": "In Rails 3.2.0 I do NOT see the problem (I could reproduce the problem in Rails 3.1.3)\n\nThere where significant changes in this commits:\nhttps://github.com/rails/rails/commit/5b2eb64c\nhttps://github.com/rails/rails/commit/2a663dcf\n\n```\n1.9.3-p0 :012 > p.to_xml(:only => :name, :include => :child)\n => \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<parent>\\n  <name>dad</name>\\n  <child>\\n    <created-at type=\\\"datetime\\\">2012-01-24T10:05:43Z</created-at>\\n    <id type=\\\"integer\\\">1</id>\\n    <name>Sarah</name>\\n    <parent-id type=\\\"integer\\\">1</parent-id>\\n    <updated-at type=\\\"datetime\\\">2012-01-24T10:05:43Z</updated-at>\\n  </child>\\n</parent>\\n\" \n```\n\nThe child has _all_ the attributes, and not limited to the :only of the parent. In Rails 3.1.3 the :only in the parent would also limit the attributes list for the child.\n", "created_at": "2012-01-25 17:35:08", "user": 55656, "id": 3654971}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5412\nCreated by **Nick Gauthier** - 2011-02-18 10:10:47 UTC\n\nWhen ActiveRecord::Base.schema_format is set to :sql it should mimic the behavior of :ruby (db/schema.rb).\n\nI've created a patch that maintains all the existing rake targets (like db:reset, db:migrate, db:setup, etc.) and toggles between the tasks appropriately.\n\nI also added a db:structure:load task so that it could be toggled with db:schema:load.\n\nI've attached the patch. I tried to keep with the conventions found in the existing file.\n\nNote that there are a few other tickets similar to this one. However, the only ticket of those with a patch creates extra and differently named rails tasks, which does not accomplish the goal I attained here. The other tickets are merely feature requests.\n\n-Nick Gauthier\n", "labels": [], "number": 715, "updated_at": "2011-10-01 22:21:43", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904399, "title": "Rails schema_format :sql should behave like schema_format :ruby", "url": "https://api.github.com/repos/rails/rails/issues/715", "created_at": "2011-05-16 03:52:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170464", "text": "_Imported from Lighthouse._\nComment by **Dave Hoover** - 2010-09-15 19:58:07 UTC\n\nThis seems like exactly what I need (since we switched to schema_format = :sql) but I'm wondering why you switched to structure.sql from {env}_structure.sql.\n", "created_at": "2011-05-16 03:52:54", "user": 789801, "id": 1170464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170465", "text": "_Imported from Lighthouse._\nComment by **Nick Gauthier** - 2010-09-15 20:02:30 UTC\n\nBecause if I migrate the dev db, then run the tests, if I left it with env_structure if would do this:\n\n1) Run db/migrate\n => updated dev_structure.sql\n2) Run tests\n => load from test_structure.sql (FILE MISSING)\n\nBut if you just use structure.sql (like schema.rb), then they can use the same structure file.\n\nThe main reason can be summarize to: I want to mimic schema dumping and loading as closely as possible.\n\n-Nick Gauthier\n", "created_at": "2011-05-16 03:52:56", "user": 789801, "id": 1170465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170466", "text": "_Imported from Lighthouse._\nComment by **Dave Hoover** - 2010-09-15 20:15:12 UTC\n\nThanks Nick. \n\nAnd BTW, great job on your talk at Windy City Rails. I couldn't be there, but I heard it was one of the better talks of the day. :)\n", "created_at": "2011-05-16 03:52:57", "user": 789801, "id": 1170466}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170467", "text": "_Imported from Lighthouse._\nComment by **Gaius Centus Novus** - 2010-10-29 18:13:47 UTC\n\nSee also #5889, which backports these changes to Rails 2.3\n", "created_at": "2011-05-16 03:52:59", "user": 789801, "id": 1170467}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170468", "text": "_Imported from Lighthouse._\nComment by **Xavier Shay** - 2010-11-01 00:50:27 UTC\n\nGood. I support this patch.\n", "created_at": "2011-05-16 03:53:00", "user": 789801, "id": 1170468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170469", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:52:11 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:53:01", "user": 789801, "id": 1170469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170470", "text": "_Imported from Lighthouse._\nComment by **Gabriel Sobrinho** - 2011-01-24 20:02:54 UTC\n\nWaiting for this patch too.\n\nThis patch apply for rails 3?\n", "created_at": "2011-05-16 03:53:03", "user": 789801, "id": 1170470}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170471", "text": "_Imported from Lighthouse._\nComment by **Gravis** - 2011-02-14 18:51:12 UTC\n\n+1 for this patch/feature\nthanks\n", "created_at": "2011-05-16 03:53:04", "user": 789801, "id": 1170471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170472", "text": "_Imported from Lighthouse._\nComment by **Brad Langhorst** - 2011-02-16 17:59:42 UTC\n\n+1\n", "created_at": "2011-05-16 03:53:05", "user": 789801, "id": 1170472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170473", "text": "_Imported from Lighthouse._\nComment by **William Denniss** - 2011-02-18 05:41:24 UTC\n\n+1 I would really like to see the sql option become a first class citizen, especially since it is presented that way in the docs ( http://guides.rubyonrails.org/migrations.html#types-of-schema-dumps )\n", "created_at": "2011-05-16 03:53:06", "user": 789801, "id": 1170473}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170474", "text": "_Imported from Lighthouse._\nComment by **Tyler Hunt** - 2011-02-21 17:38:03 UTC\n\n+1\n", "created_at": "2011-05-16 03:53:08", "user": 789801, "id": 1170474}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170475", "text": "_Imported from Lighthouse._\nComment by **Ed Schmalzle** - 2011-02-25 17:25:07 UTC\n\n+1\n", "created_at": "2011-05-16 03:53:09", "user": 789801, "id": 1170475}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170476", "text": "_Imported from Lighthouse._\nComment by **Chris Cahoon** - 2011-02-25 17:28:45 UTC\n\n+1\n", "created_at": "2011-05-16 03:53:10", "user": 789801, "id": 1170476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170477", "text": "_Imported from Lighthouse._\nComment by **George Anderson** - 2011-02-25 18:28:25 UTC\n\n+1\n", "created_at": "2011-05-16 03:53:12", "user": 789801, "id": 1170477}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170478", "text": "_Imported from Lighthouse._\nComment by **Flip Sasser** - 2011-02-28 14:48:08 UTC\n\n+1\n", "created_at": "2011-05-16 03:53:13", "user": 789801, "id": 1170478}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170479", "text": "_Imported from Lighthouse._\nComment by **Andreas Korth** - 2011-03-09 22:32:20 UTC\n\n+1 fwiw\n", "created_at": "2011-05-16 03:53:14", "user": 789801, "id": 1170479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170480", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-03-30 22:26:50 UTC\n\n+1 woo hoo\n", "created_at": "2011-05-16 03:53:16", "user": 789801, "id": 1170480}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170481", "text": "_Imported from Lighthouse._\nComment by **Brad Langhorst** - 2011-04-06 15:33:26 UTC\n\nupdated the patch so that it uses the logic in test:clone_structure for db:structure:load instead of executing the lines in the structure file. test:clone_structure now uses db:structure:load just like test:clone does to db:schema:load\n\nfixed things so that setup loads the environment before trying to use it where necessary (db:reset and db:setup)\n\nadded respect for the PGUSER environment variable, eliminating the -U from dump and load statements (needed for trust and ident authentication)\n\npatch is diffed against rails 2.3.11.\n", "created_at": "2011-05-16 03:53:17", "user": 789801, "id": 1170481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170482", "text": "_Imported from Lighthouse._\nComment by **Paul O'Keeffe** - 2011-04-14 06:54:08 UTC\n\n+1\n", "created_at": "2011-05-16 03:53:18", "user": 789801, "id": 1170482}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170483", "text": "_Imported from Lighthouse._\nComment by **oleg dashevskii** - 2011-04-14 10:43:10 UTC\n\n+1\n", "created_at": "2011-05-16 03:53:20", "user": 789801, "id": 1170483}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170484", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-04-26 10:15:04 UTC\n\n+1\n", "created_at": "2011-05-16 03:53:21", "user": 789801, "id": 1170484}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170485", "text": "Attachments saved to Gist: http://gist.github.com/971699\n", "created_at": "2011-05-16 03:53:22", "user": 789801, "id": 1170485}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223330", "text": "I believe this is still an open issue. Please re-open!\n", "created_at": "2011-05-23 18:28:56", "user": 13654, "id": 1223330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223379", "text": "+1\n", "created_at": "2011-05-23 18:36:46", "user": 15297, "id": 1223379}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223457", "text": "+1 to re-opening it. \n", "created_at": "2011-05-23 18:47:43", "user": 240, "id": 1223457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223687", "text": "+1\n", "created_at": "2011-05-23 19:26:04", "user": 10112, "id": 1223687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226771", "text": "+1\n", "created_at": "2011-05-24 08:16:20", "user": 249637, "id": 1226771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1335502", "text": "+1\n", "created_at": "2011-06-09 16:47:14", "user": 102009, "id": 1335502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1848802", "text": "+1\n", "created_at": "2011-08-19 07:12:03", "user": 254842, "id": 1848802}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2040902", "text": "+1\n", "created_at": "2011-09-08 15:31:53", "user": 920, "id": 2040902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2044314", "text": "I submitted a pull request with the above diff's here:\n\n#2948\n", "created_at": "2011-09-08 20:31:54", "user": 102009, "id": 2044314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2044329", "text": "Awesome thanks. I'd been meaning to do that. Figured it would have a better chance.\n", "created_at": "2011-09-08 20:33:24", "user": 13654, "id": 2044329}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2259161", "text": "+‚àû\n", "created_at": "2011-10-01 22:21:43", "user": 145600, "id": 2259161}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5417\nCreated by **Javier Fernandez-Ivern** - 2010-08-19 22:30:45 UTC\n\nWhen editing multiple records in one form via fields_for, if these records belong to a model with a uniqueness constraint and you happen to delete a record and create a new one with the same value in the unique field, the validation will fail because it's ignoring the fact that one of them is marked for destruction.\n\nI've put together the following test for it.  Given the following class definition:\n\n``` ruby\nclass UniqueParrot < Parrot\n  validates_uniqueness_of :name\nend\n```\n\nI believe the last assertion in this test should succeed:\n\n``` ruby\n  def test_should_skip_uniqueness_validation_if_existing_record_is_marked_for_destruction\n    copycat = UniqueParrot.new(:name => 'Roger')\n\n    @pirate.parrots << UniqueParrot.new(:name => 'Roger')\n    assert_raise(ActiveRecord::RecordInvalid) { assert !(@pirate.parrots << copycat) }\n\n    @pirate.parrots.first.mark_for_destruction\n    assert @pirate.parrots << copycat\n  end\n```\n\nInstead, the validation triggers:\n\n```\n  1) Error:\ntest_should_skip_uniqueness_validation_if_existing_record_is_marked_for_destruction(TestDestroyAsPartOfAutosaveAssociation):\nActiveRecord::RecordInvalid: Validation failed: Name has already been taken\n    /Users/javier/Projects/rails/activerecord/lib/active_record/validations.rb:49:in `save!'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:30:in `save!'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/transactions.rb:242:in `save!'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/transactions.rb:289:in `with_transaction_returning_status'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/transactions.rb:204:in `transaction'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/transactions.rb:287:in `with_transaction_returning_status'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/transactions.rb:242:in `save!'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/associations/has_and_belongs_to_many_association.rb:39:in `insert_record'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/associations/association_collection.rb:136:in `<<'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/associations/association_collection.rb:479:in `add_record_to_target_with_callbacks'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/associations/association_collection.rb:135:in `<<'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/associations/association_collection.rb:133:in `each'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/associations/association_collection.rb:133:in `<<'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/associations/association_collection.rb:158:in `transaction'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/transactions.rb:204:in `transaction'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/associations/association_collection.rb:157:in `transaction'\n    /Users/javier/Projects/rails/activerecord/lib/active_record/associations/association_collection.rb:132:in `<<'\n    ./test/cases/autosave_association_test.rb:642:in `test_should_skip_uniqueness_validation_if_existing_record_is_marked_for_destruction'\n    /Users/javier/Projects/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n    /Users/javier/Projects/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n    /Users/javier/Projects/rails/activesupport/lib/active_support/callbacks.rb:413:in `_run_setup_callbacks'\n    /Users/javier/Projects/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n```\n\nI've been able to work around this in my application by forcing a delete of all destroyed records (and removing them from the params hash) before calling update_attributes on the model, so I'm ok for now.  However, this probably needs fixing.\n", "labels": [], "number": 716, "updated_at": "2011-05-21 15:12:05", "user": 789801, "closed_at": "2011-05-21 15:12:04", "id": 904400, "title": "validates_uniqueness_of should not trigger against a record marked for destruction", "url": "https://api.github.com/repos/rails/rails/issues/716", "created_at": "2011-05-16 03:53:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170487", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-08-19 23:24:56 UTC\n\nJavier can you do a test case following this http://rails.lighthouseapp.com/projects/8994/sending-patches Thanks very much.\n", "created_at": "2011-05-16 03:53:28", "user": 789801, "id": 1170487}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170488", "text": "_Imported from Lighthouse._\nComment by **Javier Fernandez-Ivern** - 2010-08-19 23:56:23 UTC\n\nDone.  Sorry, I thought that process was only for people sending solutions not just tests.\n", "created_at": "2011-05-16 03:53:30", "user": 789801, "id": 1170488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170489", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-08-20 04:50:57 UTC\n\nJavier, it's ok a test case help others to make a patch, so when someone post the solution your test and the solution are applied, giving some credit to you too ;). \nNow ... do you want to try a patch? ;).\nThanks.\n", "created_at": "2011-05-16 03:53:32", "user": 789801, "id": 1170489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170490", "text": "_Imported from Lighthouse._\nComment by **Javier Fernandez-Ivern** - 2010-08-20 05:07:31 UTC\n\nYes, but would you mind discussing the problem a little bit first?  I no longer like my test case, because there's no guarantee that the record that is marked_for_deletion is actually going to be saved.  So in the general case of the target record being marked for deletion, I'm not sure this is a change that needs to be made.\n\nThe case that's more clear-cut is when an association is being saved and it contains items that are marked for deletion _and_ items that conflict with them in uniqueness.  In this case, we know both changes are going to happen (barring a transaction blowup or another validation failure).  I'd therefore focus on addressing this problem at the association save level, by ordering the child saves so that elements to be destroyed go first.\n\nDoes this seem like the right approach?  If so I'll rewrite the test case and take a shot at a patch.\n", "created_at": "2011-05-16 03:53:34", "user": 789801, "id": 1170490}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170491", "text": "_Imported from Lighthouse._\nComment by **Javier Fernandez-Ivern** - 2010-08-20 14:02:39 UTC\n\nWell, I'm looking into resolving this, it's somewhat tricky (to me, at least) since I need to make it work when validating the association, not just when saving.  Else it'd be pretty strange.\n\nUntil then, I'm attaching a better test:\n\n``` ruby\n  def test_should_skip_uniqueness_validation_if_existing_record_is_marked_for_destruction\n    roger = UniqueParrot.create(:name => \"Roger\")\n    wilco = UniqueParrot.create(:name => \"Wilco\")\n\n    @pirate.parrots << roger << wilco\n    assert @pirate.valid?\n    assert @pirate.save\n\n    wilco.name = roger.name\n    assert !@pirate.valid?\n    assert !@pirate.save\n\n    roger.mark_for_destruction\n    assert @pirate.valid?\n    assert @pirate.save\n  end\n```\n", "created_at": "2011-05-16 03:53:36", "user": 789801, "id": 1170491}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170492", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:28:51 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:53:37", "user": 789801, "id": 1170492}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170493", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-09 00:31:56 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:53:39", "user": 789801, "id": 1170493}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170494", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-02-09 03:00:54 UTC\n\n[state:open]\n\nThe problem with this ticket and Javier Fernandez-Ivern's test is not in mark_for_destruction itself. In edge validations do not run for associations which are marked for destruction but the problem in the whole illustrated situation:\n\nHe marks for deletion the _roger_ object. So validation for it doesn't run. But then it validates the _wilco_ object which is not marked for destruction and has the same name with the _rojer_ object which is marked for destruction but still exists in database, so when we try to validate for _wilco_ for uniqueness it fails.\n", "created_at": "2011-05-16 03:53:41", "user": 789801, "id": 1170494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170495", "text": "Attachments saved to Gist: http://gist.github.com/971700\n", "created_at": "2011-05-16 03:53:43", "user": 789801, "id": 1170495}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5444\nCreated by **John Firebaugh** - 2011-02-17 08:07:22 UTC\n\nSince the middleware stack is not present in controller tests, the ShowExceptions middleware cannot translate exceptions such as ActiveRecord::RecordNotFound into 404s, and rescue_action_in_public! basically does nothing. You can't use assert_response to check the result, you have to use assert_raise sometimes and assert_response others.\n\nTo quote Jeremy Kemper: \"assert_raise in some cases and assert_response in others - yuk.\" [http://dev.rubyonrails.org/ticket/2922#comment:4]\n\nThis issue was raised on rails-core here: http://groups.google.com/group/rubyonrails-core/browse_thread/thread/e7379309d2308f28\n\nAnd with rspec 2 here: http://github.com/rspec/rspec-rails/issues/#issue/181\nAnd here: http://groups.google.com/group/rspec/browse_thread/thread/8c2cdf5eff47a5d1\n", "labels": [], "number": 717, "updated_at": "2011-05-21 15:12:05", "user": 789801, "closed_at": "2011-05-21 15:12:05", "id": 904401, "title": "rescue_action_in_public! no longer works", "url": "https://api.github.com/repos/rails/rails/issues/717", "created_at": "2011-05-16 03:53:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170496", "text": "_Imported from Lighthouse._\nComment by **Ryan McGeary** - 2010-10-17 23:00:43 UTC\n\nIs `rescue_action_in_public!` intended to be deprecated?\n\nI'm willing to spend some time looking into a fix for this, but I'd like to know the direction that Rails 3 is hoping to achieve.  I'm not sure I understand why the ShowExceptions middleware is not used in the test environment.  This seems like it would cause more long-term harm than good.\n\nIt's a real bummer that we can't test custom rescue responses anymore.\n", "created_at": "2011-05-16 03:53:49", "user": 789801, "id": 1170496}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170497", "text": "_Imported from Lighthouse._\nComment by **Jason Morrison** - 2010-12-02 00:39:51 UTC\n\nAgreed, I'd like to know the direction here.  We use this in function tests in an app we're upgrading to Rails3 and wonder what the intended direction here is.\n\nThanks!\n", "created_at": "2011-05-16 03:53:50", "user": 789801, "id": 1170497}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5472\nCreated by **James Conroy-Finn** - 2010-11-17 01:58:29 UTC\n\nIt appears that calling `Model#run_callbacks` is broken in the Rails 3 release candidates (rc and rc2), however callbacks do work when Rails runs them internally.\n\n```\nPage.before_save lambda { puts \"Preventing save!\"; return false }\npage = Page.new\npage.save\n# Preventing save!\n# => false\npage.new_record?\n# => true\n```\n\nNow if we try to do the same thing but this time we trigger the callback directly with‚Ä¶\n\n```\npage.run_callbacks(:before_save)\n```\n\nWe get an undefined method error as follows.\n\n```\nNoMethodError: undefined method `_run_before_save_callbacks' for #<Page:0x00000102e24548>\nfrom /Users/jcf/.rvm/gems/ruby-1.9.2-p0@pages/bundler/gems/rails-0953c04/activemodel/lib/active_model/attribute_methods.rb:364:in `method_missing'\nfrom /Users/jcf/.rvm/gems/ruby-1.9.2-p0@pages/bundler/gems/rails-0953c04/activerecord/lib/active_record/attribute_methods.rb:46:in `method_missing'\nfrom /Users/jcf/.rvm/gems/ruby-1.9.2-p0@pages/bundler/gems/rails-0953c04/activesupport/lib/active_support/callbacks.rb:93:in `run_callbacks'\nfrom (irb):6\nfrom /Users/jcf/.rvm/gems/ruby-1.9.2-p0@pages/bundler/gems/rails-0953c04/railties/lib/rails/commands/console.rb:44:in `start'\nfrom /Users/jcf/.rvm/gems/ruby-1.9.2-p0@pages/bundler/gems/rails-0953c04/railties/lib/rails/commands/console.rb:8:in `start'\nfrom /Users/jcf/.rvm/gems/ruby-1.9.2-p0@pages/bundler/gems/rails-0953c04/railties/lib/rails/commands.rb:23:in `<top (required)>'\nfrom script/rails:6:in `require'\nfrom script/rails:6:in `<main>'\n```\n\nI'm going to do some digging around and try to work out why callbacks work internally but fail when calling #run_callbacks directly.\n", "labels": [], "number": 718, "updated_at": "2011-05-21 15:12:05", "user": 789801, "closed_at": "2011-05-21 15:12:05", "id": 904403, "title": "Unable to manually run ActiveRecord object callbacks", "url": "https://api.github.com/repos/rails/rails/issues/718", "created_at": "2011-05-16 03:53:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170498", "text": "_Imported from Lighthouse._\nComment by **James Conroy-Finn** - 2010-08-27 11:30:14 UTC\n\nI've written a quick test in `activerecord/test/cases/callbacks_test.rb` that demonstrates the exact failure I'm experiencing and have included a patch file with the test in case that's any use. I'll see if I can fix it myself and upload another patch if and when I get it done.\n\nBTW I'm not a test-unit kinda guy so it may be there's a better way to implement the test. Apologies for any cardinal test-unit sin I may have committed.\n", "created_at": "2011-05-16 03:53:57", "user": 789801, "id": 1170498}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170499", "text": "_Imported from Lighthouse._\nComment by **James Conroy-Finn** - 2010-08-27 23:11:57 UTC\n\nOK‚Ä¶ We've worked this one out. The API has changed but the documentation doesn't reflect the changes too clearly. Hopefully Yehuda can clarify this but essentially callbacks work as follows‚Ä¶\n\nThis will run only the before save callback‚Ä¶\n\n```\np = Post.new\np.run_callbacks(:save) { false }\n```\n\n‚Ä¶and this will run both the before and after callbacks‚Ä¶\n\n```\np = Post.new\np.run_callbacks(:save) { true }\n```\n\nEssentially you can't specify the before or after anymore (using #run_callbacks(:before_save) etc.) because callbacks work like this.\n\nYou call a group of callbacks, for example save, create, validation. There will potentially be a before and/or after callback to any of these groups. All will be executed but only if the block supplied evaluates to true. Examples will explain this better so here we go‚Ä¶\n\n```\n# Before and after callbacks\n# This will run both the before_save and after_save callbacks‚Ä¶\nPost.new.run_callbacks(:save)\n\n# ‚Ä¶as will this\nPost.new.run_callbacks(:save) { true }\n\n# This will only run the before_save and ignore any after_save callback\nPost.new.run_callbacks(:save) { false }\n```\n\nThis is darned handy if you have a condition that determines whether or not to execute the next callback as you do in ActiveRecord when saving (e.g. errors.empty?).\n\nI might be mistaken but after some debugging, source tasting and with some mad class/instance method magic I'm pretty sure this is how things work in Rails 3.\n\nAgain, if Mr. Katz or one of his learned friends could confirm this it would be appreciated.\n\nThanks.new.run_callbacks(:finished) { true }\n\nputs \"James ;)\"\n", "created_at": "2011-05-16 03:53:58", "user": 789801, "id": 1170499}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170500", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-08-28 03:25:10 UTC\n\nI recently fixed #5419 http://github.com/rails/rails/commit/2ffa50f5a9fac08e08869687006031b70322497a where after_validation was not getting called if valid? returns false.\n\nI will have to check with rails 2.3.x to see if what is the existing behavior. Any change in behavior should be documented.\n", "created_at": "2011-05-16 03:54:00", "user": 789801, "id": 1170500}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170502", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-08-28 04:33:47 UTC\n\n@James you are spot on.\n\nHere is definition of method _define_after_model_callback\n\n``` ruby\n    def _define_after_model_callback(klass, callback) #:nodoc:\n      klass.class_eval <<-CALLBACK, __FILE__, __LINE__ + 1\n        def self.after_#{callback}(*args, &block)\n          options = args.extract_options!\n          options[:prepend] = true\n          options[:if] = Array.wrap(options[:if]) << \"!halted && value != false\"\n          set_callback(:#{callback}, :after, *(args << options), &block)\n        end\n      CALLBACK\n    end\n  end\n```\n\nNotice the part where it says <tt>value != false </tt>. That code is saying that proceed with callback only if the returned value is NOT false. Otherwise halt the chain.\n\nif you change line from \n\n``` ruby\noptions[:if] = Array.wrap(options[:if]) << \"!halted && value != false\"\n```\n\nto \n\n``` ruby\noptions[:if] = Array.wrap(options[:if]) << \"!halted\"\n```\n\nthen after_save callback will be called irrespective of the returned value from the save operation.\n\nHope that helps you understand why the code is behaving the way it is behaving.\n", "created_at": "2011-05-16 03:54:02", "user": 789801, "id": 1170502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170503", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-08-30 03:10:34 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/27625)]\n", "created_at": "2011-05-16 03:54:03", "user": 789801, "id": 1170503}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170504", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:02:02 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:54:05", "user": 789801, "id": 1170504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170505", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:35:25 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:54:06", "user": 789801, "id": 1170505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170506", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:12 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:54:07", "user": 789801, "id": 1170506}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170507", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:22 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:54:09", "user": 789801, "id": 1170507}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170508", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:54:10", "user": 789801, "id": 1170508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170509", "text": "Attachments saved to Gist: http://gist.github.com/971701\n", "created_at": "2011-05-16 03:54:11", "user": 789801, "id": 1170509}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5524\nCreated by **Stephen Heuer** - 2010-09-01 21:07:48 UTC\n\nSomething that worked in rails 2.3.8 and below that does not work in 2.3.9.\n\n```\nLoading development environment (Rails 2.3.8)\nree-1.8.7-2010.02 > Top.first.bottoms_in_version.in_location(Building.last)\n => [#<Bottom id: 1, middle_id: 1, version: 1, location_type: \"Building\", location_id: \"2\", created_at: \"2010-09-01 20:45:08\", updated_at: \"2010-09-01 20:45:08\">, #<Bottom id: 2, middle_id: 1, version: 1, location_type: \"Room\", location_id: \"4\", created_at: \"2010-09-01 20:45:08\", updated_at: \"2010-09-01 20:45:08\">] \n```\n\n```\nLoading development environment (Rails 2.3.9)\nree-1.8.7-2010.02 > Top.first.bottoms_in_version.in_location(Building.last)\nActiveRecord::StatementInvalid: SQLite3::SQLException: ambiguous column name: middles.id: SELECT \"bottoms\".\"id\" AS t0_r0, \"bottoms\".\"middle_id\" AS t0_r1, \"bottoms\".\"version\" AS t0_r2, \"bottoms\".\"location_type\" AS t0_r3, \"bottoms\".\"location_id\" AS t0_r4, \"bottoms\".\"created_at\" AS t0_r5, \"bottoms\".\"updated_at\" AS t0_r6, \"middles\".\"id\" AS t1_r0, \"middles\".\"top_id\" AS t1_r1, \"middles\".\"version\" AS t1_r2, \"middles\".\"created_at\" AS t1_r3, \"middles\".\"updated_at\" AS t1_r4, \"tops\".\"id\" AS t2_r0, \"tops\".\"name\" AS t2_r1, \"tops\".\"version\" AS t2_r2, \"tops\".\"created_at\" AS t2_r3, \"tops\".\"updated_at\" AS t2_r4 FROM \"bottoms\"  LEFT OUTER JOIN \"middles\" ON \"middles\".id = \"bottoms\".middle_id  LEFT OUTER JOIN \"tops\" ON \"tops\".id = \"middles\".top_id  INNER JOIN \"middles\" ON \"bottoms\".middle_id = \"middles\".id    WHERE (((((`location_type` = 'Room' AND `location_id` IN (4,5,6)) OR (`location_type` = 'Building' AND `location_id` IN (2))) AND `tops`.version == `bottoms`.version) AND (`bottoms`.`version` = 1)) AND ((\"middles\".top_id = 1))) \n```\n\nThrows errors in sqlite3 and mysql:\nMysql::Error: Not unique table/alias\nSQLite3::SQLException: ambiguous column name\n\nI have attached a rails app that demonstrates the problem.\n\n```\nrake db:migrate\nrake db:seed\nscript/console\n> Top.first.bottoms_in_version.in_location(Building.last)\n```\n", "labels": [], "number": 719, "updated_at": "2011-05-21 15:12:05", "user": 789801, "closed_at": "2011-05-21 15:12:05", "id": 904404, "title": "Not unique table/alias/ambiguous column name with chained named_scopes ", "url": "https://api.github.com/repos/rails/rails/issues/719", "created_at": "2011-05-16 03:54:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170510", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:49:13 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:54:17", "user": 789801, "id": 1170510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170511", "text": "_Imported from Lighthouse._\nComment by **Dan** - 2011-02-20 08:52:26 UTC\n\n[state:open] \n\nStill an issue in Rails 3.0.4  As above run\nrake db:migrate\nrake db:seed\nrails c\n\nLoading development environment (Rails 3.0.4)\n\n> > Category.good.joins(:items)\n> > ActiveRecord::StatementInvalid: SQLite3::SQLException: ambiguous column name: name: SELECT \"categories\".\\* FROM \"categories\" INNER JOIN \"items\" ON \"items\".\"category_id\" = \"categories\".\"id\" WHERE (name = 'Good Stuff')\n\nAs a workaround, if you recreate the scope as follows:\n scope :good, :conditions => [\"categories.name = 'Good Stuff'\"]\n\nthen it works fine. I'm not sure what implications this would have on intersection between scopes, but in this demo\n\nCategory.good.important.joins(:items)\n\ndoes work.\n", "created_at": "2011-05-16 03:54:18", "user": 789801, "id": 1170511}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5528\nCreated by **Nick Ragaz** - 2010-09-17 15:36:37 UTC\n\nUntil [this commit](http://github.com/rails/rails/commit/c2a87b45b8dab6e0b928333beca627f607690625) I believe on 3.0.1.pre using `reorder` in a scope would override an `order` clause in the `default_scope`. Now the `reorder` is appended instead, meaning that it's impossible to do something like\n\n```\ndefault_scope order('name')\nscope :reversed, reorder('name DESC')\n```\n\nI don't believe this is correct behaviour and have attached a patch against the 3-0-stable branch that includes a failing test - this case does not appear to have any tests associated with it to verify the expected behaviour.\n", "labels": [], "number": 720, "updated_at": "2011-05-21 15:12:05", "user": 789801, "closed_at": "2011-05-21 15:12:05", "id": 904405, "title": "scopes using `reorder` don't override `default_scope` order", "url": "https://api.github.com/repos/rails/rails/issues/720", "created_at": "2011-05-16 03:54:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170512", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-09-02 05:05:40 UTC\n\nThanks for reporting the bug. There is a discussion going on about how to handle default_scope in ticket #5519. Until that ticket is resolved I am putting this on on hold.\n", "created_at": "2011-05-16 03:54:26", "user": 789801, "id": 1170512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170513", "text": "_Imported from Lighthouse._\nComment by **Nick Ragaz** - 2010-09-02 05:08:31 UTC\n\nThanks for the quick review. I guess my view would be that the \"shipped\" API in v3.0 should be honoured, and I'm pretty sure that this behaviour was introduced accidentally...\n", "created_at": "2011-05-16 03:54:27", "user": 789801, "id": 1170513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170515", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-09-05 08:03:24 UTC\n\nActually, reorder should always override the default scope. The current state is definitely a bug.\n", "created_at": "2011-05-16 03:54:28", "user": 789801, "id": 1170515}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170516", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-09-05 13:33:22 UTC\n\nhttp://github.com/rails/rails/compare/91fec0d...708ee9c\n", "created_at": "2011-05-16 03:54:30", "user": 789801, "id": 1170516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170517", "text": "_Imported from Lighthouse._\nComment by **Nick Ragaz** - 2010-09-17 03:36:41 UTC\n\nSadly, there is still an issue - at least, I think there is - if you have multiple scopes chained, like so:\n\n```\nclass Foo < ActiveRecord::Base\n    default_scope order('id')\n    scope :name_is_nil, where(:name => nil)\n    scope :name_order, reorder('name')\n    scope :age_order, reorder('age')\nend\n\nFoo.name_order.age_order\n```\n\nYou will get SQL like:\n\n```\nSELECT * FROM foos ORDER BY name, age\n```\n\nWhere I would expect:\n\n```\nSELECT * FROM foos ORDER BY age\n```\n\ni.e. that the last `reorder` scope in the chain would take precedence.\n\nAlso, the current behaviour will produce:\n\n```\nFoo.name_order.name_is_nil.age_order.to_sql # => \"SELECT * FROM foos ORDER BY name, id, age\"\n```\n", "created_at": "2011-05-16 03:54:31", "user": 789801, "id": 1170517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170518", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:02:02 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:54:32", "user": 789801, "id": 1170518}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170519", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-03-28 14:27:05 UTC\n\nThis is actually a bug in¬†3.1 and the solution of 3.0.x is the ugliest I've ever seen. I can say that without worrying about hurting anybody's feelings since I've made it .\n", "created_at": "2011-05-16 03:54:33", "user": 789801, "id": 1170519}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170520", "text": "Attachments saved to Gist: http://gist.github.com/971703\n", "created_at": "2011-05-16 03:54:35", "user": 789801, "id": 1170520}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5578\nCreated by **Michael Schuerig** - 2010-09-08 06:14:15 UTC\n\nCommit 2af8fd2829ec573ef7da8a44d31e5f25ef4a8408 introduces a new method, #asset_path, into AbstractController. Unfortunately, this method overrides a method of the same name generated for an Asset resource.\n\nAsset presumably is a very widespread model name and comes with corresponding routes (resources :assets). This change is bound to break a lot of applications in a way that is not initially obvious.\n\nIf #asset_path(some_asset) is used in a controller, say for redirection, it causes an ArgumentError (wrong number of arguments (1 for 0)). The routes-generated method expected by the programmer would have taken one argument, but the newly introduced AbstractController#asset_path indeed doesn't take any.\n\nAs long as this issue isn't fixed, a workaround is to use #asset_url instead of #asset_path.\n", "labels": [], "number": 721, "updated_at": "2011-05-21 15:12:05", "user": 789801, "closed_at": "2011-05-21 15:12:05", "id": 904406, "title": "AbstractController#asset_path overrides routes helper", "url": "https://api.github.com/repos/rails/rails/issues/721", "created_at": "2011-05-16 03:54:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170521", "text": "_Imported from Lighthouse._\nComment by **rdavila** - 2010-09-10 22:05:21 UTC\n\nI can't reproduce this bug, I'm using the following:\n- Rails Edge\n- ruby 1.8.7 (2010-08-16 patchlevel 302) [i686-linux]\n\nI had created an Asset scaffold and insert one record, next I had modified the index action to:\n\nredirect_to asset_path(Asset.last)\n\nAnd all it's ok, the action redirect to AssetsController#show.\n", "created_at": "2011-05-16 03:54:41", "user": 789801, "id": 1170521}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170522", "text": "_Imported from Lighthouse._\nComment by **Michael Schuerig** - 2010-09-10 22:54:16 UTC\n\nI've tried this again in a fresh app on 3.0.0 and it still breaks. I can't test on Rails Edge, as apparently bundler can't resolve dependencies right now (something about activesupport ~> 3.0.0 and 3.1.0.beta).\n\nAnyway, the relevant code hasn't changed in the meantime. Please have a look at abstract_controller/asset_paths.rb. There config_accessor defines a method #asset_path taking no arguments. AssetPaths is included in ActionController::Base which makes #asset_path (no-args variant) available in controllers.\n\nI don't know why you don't get an exception where I do. Let's establish two things:\n- The method #asset_path defined in AbstractController::AssetPaths is supposed to be available in controllers.\n- If `resources :assets` is defined in routes.rb, #asset_path(asset) is supposed to be available in controllers (among other places).\n- These two methods are in conflict with each other.\n\nDo you agree?\n", "created_at": "2011-05-16 03:54:42", "user": 789801, "id": 1170522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170523", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-09-20 18:39:14 UTC\n\nMichael,\n\nYes, `asset_path` is supposed to be accessible in both Action Mailer and Action Controller.\n\nI can see two ways around it. You could obviously rename it. Or: You could change the syntax of accessing `asset_host` and `asset_path` to be `assets.host` and `assets.path`.\n\nI might look into making a patch for solution #2 - though I suspect it could get a bit complicated.\n", "created_at": "2011-05-16 03:54:43", "user": 789801, "id": 1170523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170524", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-08 12:59:38 UTC\n\nI can confirm this issue on 3.0.0 with both Ruby 1.8.7 and 1.9.2; I could not reproduce it on Rails Edge.\n\nHowever, the opposite is true: #asset_path would now be unaccessible in AssetsController and its views.\n", "created_at": "2011-05-16 03:54:45", "user": 789801, "id": 1170524}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170525", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-08 13:11:29 UTC\n\n... and replying to myself: there's no point in calling AssetPaths#asset_path since it may well be a Proc.\n", "created_at": "2011-05-16 03:54:46", "user": 789801, "id": 1170525}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170526", "text": "_Imported from Lighthouse._\nComment by **Andrea Campi** - 2010-10-08 15:02:20 UTC\n\nI'm attaching two patches, on master and 3.0 respectively.\nWith this patch applied I cannot reproduce the issue on 3.0; on master the behavior is unchanged.\n\nThat said, I don't like asset_base_path any better than the previous name (it used to be asset_path_template).\nIf you have a better idea, I can easily reroll the patches.\n\n(also, I've made sure tests pass with success)\n", "created_at": "2011-05-16 03:54:47", "user": 789801, "id": 1170526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170527", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:02:02 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:54:49", "user": 789801, "id": 1170527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170528", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-16 01:32:29 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:54:50", "user": 789801, "id": 1170528}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170529", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:12 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:54:51", "user": 789801, "id": 1170529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170530", "text": "_Imported from Lighthouse._\nComment by **Samuel Kadolph** - 2010-12-15 16:22:35 UTC\n\nQuick fix to get 3-0-stable working correctly. Not sure about best solution for master. Probably best to separate out asset configuration from AC and AV and put it with the Application.\n", "created_at": "2011-05-16 03:54:53", "user": 789801, "id": 1170530}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170532", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:22 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:54:54", "user": 789801, "id": 1170532}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170533", "text": "_Imported from Lighthouse._\nComment by **thoefer** - 2011-02-27 00:37:37 UTC\n\nFix for 3.0.5.RC1 attached. It¬¥s basically Samuel Kadolph¬¥s patch, but without the RoutingError in 3.0.5.RC1. This error seems pretty easy to solve. But maybe I don¬¥t see the big picture?! In this case: Any hints? Any comments?\n", "created_at": "2011-05-16 03:54:55", "user": 789801, "id": 1170533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170534", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:54:57", "user": 789801, "id": 1170534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170535", "text": "Attachments saved to Gist: http://gist.github.com/971704\n", "created_at": "2011-05-16 03:54:58", "user": 789801, "id": 1170535}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5588\nCreated by **Mike Perham** - 2010-12-28 03:36:05 UTC\n\nI've officially deprecated memcache-client in favor of my new gem, Dalli, for accessing memcached.  Dalli is different from memcache-client in that it uses the new binary protocol in memcached 1.4 and supports managed environments like Heroku.  Its API is mostly compatible with memcache-client with some minor exceptions and it uses the exact same algorithm to select a server so gem migrations should not invalidate 100% of existing cache.\n\nI would like to discuss the changes necessary to remove/deprecate :mem_cache_store in favor of :dalli_store.  DalliStore is shipped with the dalli gem itself.  You can read more details here:\n\nhttp://github.com/mperham/dalli\n", "labels": [], "number": 722, "updated_at": "2011-05-21 15:12:05", "user": 789801, "closed_at": "2011-05-21 15:12:05", "id": 904407, "title": "Integrate support for Dalli", "url": "https://api.github.com/repos/rails/rails/issues/722", "created_at": "2011-05-16 03:55:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170537", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-09-12 04:16:57 UTC\n\nI think this is better suited for the core mailing list: http://groups.google.com/group/rubyonrails-core\n", "created_at": "2011-05-16 03:55:04", "user": 789801, "id": 1170537}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170538", "text": "_Imported from Lighthouse._\nComment by **Mike Perham** - 2010-09-14 15:08:07 UTC\n\nI'm working on a patch to do the work.  One issue I have found is that the increment/decrement operations are not backwards compatible.  This is not a Dalli limitation but due to a change in the memcached binary protocol.  Counters can no longer be initialized with set() and read with get().  They are 64-bit integers which can only be accessed with the incr/decr operations.\n\nI will hopefully have a first pass at the patch later this week.\n", "created_at": "2011-05-16 03:55:05", "user": 789801, "id": 1170538}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170539", "text": "_Imported from Lighthouse._\nComment by **Mike Perham** - 2010-09-16 04:50:30 UTC\n\nMy comments about increment/decrement were wrong.  Further investigation found a bug in my code.  So it goes.\n\nHere's a patch which deprecates :mem_cache_store when used with memcache-client.  Since :mem_cache_store also supports fauna's memcached gem I didn't deprecate the entire class, just that codepath.\n\nThe dalli_store test is identical to the mem_cache_store test and passes 100%.\n\nMy goal is to make Dalli the new recommended production cache store in Rails 3.1.  Please let me know if I can help with any bug, documentation or other changes to that end.\n", "created_at": "2011-05-16 03:55:07", "user": 789801, "id": 1170539}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170540", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-11 09:55:59 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:55:08", "user": 789801, "id": 1170540}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170541", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:02:02 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:55:09", "user": 789801, "id": 1170541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170542", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-16 01:38:48 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:55:11", "user": 789801, "id": 1170542}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170543", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2010-10-29 22:55:21 UTC\n\nAny plans to replace http://github.com/rails/rails/blob/v3.0.1/actionpack/lib/action_dispatch/middleware/session/mem_cache_store.rb as well?\n", "created_at": "2011-05-16 03:55:12", "user": 789801, "id": 1170543}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170544", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2010-10-29 22:58:19 UTC\n\nAlso, Mike, does Dalli open and keep open sockets to the memcache server during Rails initialization like the old memcache store? I'm just trying to wrangle a few tickets here... it would be great if Dalli as a session store didn't have the same issues as the old session/mem_cache_store: https://rails.lighthouseapp.com/projects/8994/tickets/2644-memcache-session-store-litespeed-and-i-think-passenger\n", "created_at": "2011-05-16 03:55:13", "user": 789801, "id": 1170544}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170545", "text": "_Imported from Lighthouse._\nComment by **Mike Perham** - 2010-10-29 23:04:35 UTC\n\nDalli packages a dalli_store adapter for ActiveSupport.  I'd guess that the Rails core is trying to move away from shipping adapters for specific gems - I'm ok with dalli_store remaining in the dalli gem itself but you can pull it into active_support if you'd like.\n\nAnd Dalli connects lazily to memcached.  It will not open a socket until the code performs an actual operation.  I also include a Dalli::Client#reset method that can be used in the Passenger fork event if necessary but it should only be needed in special cases.\n", "created_at": "2011-05-16 03:55:15", "user": 789801, "id": 1170545}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170546", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2010-10-29 23:04:43 UTC\n\nCould a new Dalli-based session store also address the session fixation issue: https://rails.lighthouseapp.com/projects/8994/tickets/3134-memcachestore-allows-for-arbitrary-client-generated-session_ids\n\n(Sorry for all the messages! Should have thought this all through before submitting.)\n", "created_at": "2011-05-16 03:55:16", "user": 789801, "id": 1170546}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170547", "text": "_Imported from Lighthouse._\nComment by **Mike Perham** - 2010-10-29 23:14:13 UTC\n\nThat session ID bug looks like something that might be endemic to all session store providers and should be fixed generically.  My general policy is to stay as compatible as possible with the mem_cache_store version - even if that means reproducing bugs.  If Rails fixes mem_cache_store, I'll update dalli_store with the same fix.\n", "created_at": "2011-05-16 03:55:17", "user": 789801, "id": 1170547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170548", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2010-10-29 23:15:18 UTC\n\nYeah makes sense. I just think that Rails should deprecate and then gut the existing mem_cache_store (for activesupport and actionpack's sessions). Rails should ship with CookieStore and ActiveRecordStore... If someone wants memcache support, she can use dalli_store; and if she wants redis support, she can use redis-store -- it is as easy as putting the gems in her Gemfile.\n", "created_at": "2011-05-16 03:55:19", "user": 789801, "id": 1170548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170549", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:02:43 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:55:20", "user": 789801, "id": 1170549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170550", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:04:51 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34349)]\n", "created_at": "2011-05-16 03:55:21", "user": 789801, "id": 1170550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170551", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-01-09 22:45:39 UTC\n\nMike we were talking with Jeremy and Aaron and we come up with this ...\n\n\"I just think that Rails should deprecate and then gut the existing mem_cache_store (for activesupport and actionpack's sessions). Rails should ship with CookieStore and ActiveRecordStore... If someone wants memcache support, she can use dalli_store; and if she wants redis support, she can use redis-store -- it is as easy as putting the gems in her Gemfile.\"\n\nWhat do you think?\n", "created_at": "2011-05-16 03:55:23", "user": 789801, "id": 1170551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170552", "text": "_Imported from Lighthouse._\nComment by **Mike Perham** - 2011-01-09 23:20:17 UTC\n\nSounds fine to me.  You are welcome to point people to Dalli and :dalli_store in the deprecation warning.\n", "created_at": "2011-05-16 03:55:24", "user": 789801, "id": 1170552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170553", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-04-10 00:00:06 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:55:25", "user": 789801, "id": 1170553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170554", "text": "Attachments saved to Gist: http://gist.github.com/971705\n", "created_at": "2011-05-16 03:55:27", "user": 789801, "id": 1170554}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5616\nCreated by **Adam Meehan** - 2011-01-04 16:24:39 UTC\n\nActiveResource has not been updated to support the current ActiveModel errors serialization format. This patch supports both the new and old formats. \n\nIt also supports what I hope will be the final format from this patch\nhttps://rails.lighthouseapp.com/projects/8994/tickets/5615-support-multiple-errors-per-attribute-in-activemodel-errors-json-serialization\n", "labels": [], "number": 723, "updated_at": "2011-05-21 15:12:05", "user": 789801, "closed_at": "2011-05-21 15:12:05", "id": 904408, "title": "ActiveResource error parsing support for new JSON errors serialization format", "url": "https://api.github.com/repos/rails/rails/issues/723", "created_at": "2011-05-16 03:55:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170555", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-04-05 00:00:19 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:55:32", "user": 789801, "id": 1170555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170556", "text": "_Imported from Lighthouse._\nComment by **Murray Steele** - 2011-04-12 14:10:32 UTC\n\nstate:open\n\nYup.  This is still a bug on rails 3.0.6.\n\nI've tried this patch and it applies on both master and 3-0-stable and, happily, fixes the problem in an app.\n", "created_at": "2011-05-16 03:55:34", "user": 789801, "id": 1170556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170557", "text": "_Imported from Lighthouse._\nComment by **Murray Steele** - 2011-04-12 14:33:16 UTC\n\n[state:open]\n\nOh! I cannot read.  Re-opening.\n", "created_at": "2011-05-16 03:55:35", "user": 789801, "id": 1170557}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170558", "text": "Attachments saved to Gist: http://gist.github.com/971706\n", "created_at": "2011-05-16 03:55:36", "user": 789801, "id": 1170558}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5617\nCreated by **viatropos** - 2011-04-22 05:48:01 UTC\n\nWhen you create something like below, the join model does not pay attention to the STI in the models it `belongs_to`.  Check this out:\n\n``` ruby\n# join model\nclass Relationship < ActiveRecord::Base\n  belongs_to :parent, :polymorphic => true\n  belongs_to :child, :polymorphic => true\nend\n\n# child model\nclass Image < ActiveRecord::Base\n  has_many :relationships, :as => :child\n  has_many :parents, :through => :relationships, :source => :parent, :source_type => \"Post\"\nend\n\n# parent model\nclass Post < ActiveRecord::Base\n  has_many :relationships, :as => :parent\n  has_many :children, :through => :relationships, :source => :child, :source_type => \"Image\"\nend\n\n# subclass\nclass BlogPost < Post\n\nend\n\nblog_post = BlogPost.create!\nimage     = Image.create!\n\nblog_post.children << image\n\nputs Relationship.all.inspect\n  #=> [#<Relationship id: 1, parent_id: 1, parent_type: \"Post\", child_id: 1, child_type: \"Image\">]\n```\n\nThe result we want is this:\n\n``` ruby\nputs Relationship.all.inspect\n  #=> [#<Relationship id: 1, parent_id: 1, parent_type: \"BlogPost\", child_id: 1, child_type: \"Image\">]\n```\n\nAll it takes is a simple patch to these two classes:\n\n``` ruby\nActiveRecord::Associations::HasManyAssocation#construct_sql\nActiveRecord::Associations::HasManyThroughAssocation#construct_conditions\n```\n1. Find/replace `@owner.class.base_class` with `@owner.class`.\n2. Make it so the constructed SQL in those two methods are changed into the following...\n\nfrom this:\n\n``` ruby\n(\"relationships\".parent_type = 'Post')\n```\n\nto this:\n\n``` ruby\n(\"relationships\".parent_type = 'BlogPost' OR \"relationships\".parent_type = 'Post')\n```\n## All ActiveRecord Tests Pass with the following change:\n\n``` ruby\ndef construct_conditions\n  table_name = @reflection.through_reflection.quoted_table_name\n  conditions = construct_quoted_owner_attributes(@reflection.through_reflection).map do |attr, value|\n    if attr =~ /_type$/\n      condition = []\n      ancestors = @owner.class.ancestors.reverse\n      while ancestor = ancestors.pop\n        break if ancestor == @owner.class.base_class.superclass\n        condition << \"#{table_name}.#{attr} = '#{ancestor.name}'\"\n      end\n      condition.join(\" OR \")\n    else\n      \"#{table_name}.#{attr} = #{value}\"\n    end\n  end\n  conditions << sql_conditions if sql_conditions\n\n  \"(\" + conditions.join(') AND (') + \")\"\nend\n```\n\nand\n\n``` ruby\ndef construct_sql\n  # ...\n  when @reflection.options[:as]\n    @finder_sql = \n      \"(#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_id = #{owner_quoted_id}) AND \"\n    condition = []\n    ancestors = @owner.class.ancestors.reverse\n    while ancestor = ancestors.pop\n      break if ancestor == @owner.class.base_class.superclass\n      condition << \"#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_type = #{@owner.class.quote_value(ancestor.name)}\"\n    end\n    @finder_sql << \"(#{condition.join(\" OR \")})\"\n    @finder_sql << \" AND (#{conditions})\" if conditions\n  else\n    @finder_sql = \"#{@reflection.quoted_table_name}.#{@reflection.primary_key_name} = #{owner_quoted_id}\"\n    @finder_sql << \" AND (#{conditions})\" if conditions\n  end\n  # ...\nend\n```\n\nDoes this seem like it could be applied as a patch (of course, refactoring that while loop)?\n", "labels": [], "number": 724, "updated_at": "2014-01-15 11:40:57", "user": 789801, "closed_at": "2011-05-21 15:12:05", "id": 904409, "title": "Patch: STI + Join Model + Polymorphic Associations works now", "url": "https://api.github.com/repos/rails/rails/issues/724", "created_at": "2011-05-16 03:55:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170559", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-09-11 23:47:46 UTC\n\nDid you load all the subclasses. In development mode subclasses are not loaded until called and it affects STI. T\n\nOr try replicating the issue in production mode.\n", "created_at": "2011-05-16 03:55:44", "user": 789801, "id": 1170559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170561", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2010-09-12 00:26:25 UTC\n\nDid you take the following into account?\n\nIn STI it is possible to change the class of the object.\nThis is the reason why the the type-column of the polymorhpic belongs_to stores the base_class, so if a object changes its sti_class, the associated objects doesnt have to be updated.\n", "created_at": "2011-05-16 03:55:47", "user": 789801, "id": 1170561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170562", "text": "_Imported from Lighthouse._\nComment by **viatropos** - 2010-09-12 14:17:27 UTC\n\n@Neeraj\n\nI ran this in 2 ways: as a single file, and as a gem, so this isn't a Rails specific problem.\n\n@Kane\n\nSo you're saying that polymorphic belongs_to stores the base_class instead of the subclass, in case the user sometime later decides to change the subclass and would otherwise have to worry about updating the associated model because of the class name?  I think that's a convenience that's preventing this case from being possible.  Without being able to store the specific subclass in the database, it's impossible to do what I have outlined above.  I have run into this problem dozens of times, and several other people have as well (polymorphic sti problem in rails on google).\n\nRight now, if I were to do something like this, <code>Relationship.first.parent</code>, it would return a <code>#<Post title=...></code>, but it's supposed to be BlogPost.  There's a lot of other problems that arise from this.\n\nWhat was most surprising is by removing `base_class` from the HasManyThroughAssociation and HasManyAssociation classes, and adding that <code>OR</code> to the SQL, none of the activerecord tests broke.  So, for the following reasons, I think this should be integrated:\n1. Polymorphic Join Model in ActiveRecord currently does not support STI\n2. Which means your object will be improperly typed when retrieved from the database\n3. And the fix is an easy fix\n\nAre there any reasons this should not be changed?\n", "created_at": "2011-05-16 03:55:50", "user": 789801, "id": 1170562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170563", "text": "_Imported from Lighthouse._\nComment by **viatropos** - 2010-09-12 15:06:24 UTC\n\nThis works: http://gist.github.com/576172\n", "created_at": "2011-05-16 03:55:53", "user": 789801, "id": 1170563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170564", "text": "_Imported from Lighthouse._\nComment by **viatropos** - 2010-09-12 19:08:42 UTC\n\nhttp://github.com/viatropos/acts-as-joinable/blob/master/lib/acts_as_joinable/active_record_patch.rb\n", "created_at": "2011-05-16 03:55:56", "user": 789801, "id": 1170564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170565", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-09-28 17:17:10 UTC\n\n@viatropos Your arguments make sense to me.  Would you mind turning this in to a patch so I can mess around with it?  Also, do you think it would be possible to formulate tests for this situation?\n", "created_at": "2011-05-16 03:55:59", "user": 789801, "id": 1170565}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170566", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2010-09-29 12:07:11 UTC\n\nFWIW, I work on a Rails application where we needed to change the STI behaviour to store the sti_class rather than the base_class.  A major impact that I don't think is considered so far is that we had to change every place that SQL conditions are generated for the _type column (e.g. associations.rb) instead of\n_type = base_class.name\nwe changed it to\n_type IN (self_and_sub_classes)\nwhere self_and_subclasses is a helper that returns self and its descendent classes.\n\nThis approach does have a major advantage though: we are aiming soon to being able to specify the subset of classes that a polymorphic association can refer to.  This will in turn allow us to\n1) include across a polymorphic association as long as all of the possible referenced classes resolve to the same table\n2) include across a polymorphic association when all of the possible referenced classes do not resolve to the same table, because at least we'll now know what tables it needs to be joined to.\n\nBoth of these can lead to a major performance increase by avoiding n+1 queries.\n", "created_at": "2011-05-16 03:56:02", "user": 789801, "id": 1170566}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170567", "text": "_Imported from Lighthouse._\nComment by **Jon Leighton** - 2010-12-21 18:21:15 UTC\n\nI have been playing with this today. Here's a half-written patch: https://github.com/jonleighton/rails/tree/5617_polymorphism_with_sti\n\nThe problem with this is it changes the way that the `polymorphic_type` field is used. This will break compatibility with existing databases.\n\nAlso, I have tried out something similar to the example where `Relationship.first.parent` returns a `Post` rather than a `BlogPost`. In my experimentation, the correct class was used. It is possible to get the correct class from the 'type' column of the 'posts' table.\n\nIf anyone can provide other concrete examples of why using the base class in the `polymorphic_type` field causes problems (other than being wrong from a theoretical perspective) then please say so and we can consider it, but for now the cost of breaking compatibility is too high I think.\n", "created_at": "2011-05-16 03:56:05", "user": 789801, "id": 1170567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170568", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2010-12-28 00:39:45 UTC\n\nYes, this is a breaking change for existing schemas that use polymorphism and STI together, but then I expect so was the change that provided the `store_full_sti_class` configuration.  This functionality could be wrapped similarly in a configuration option.\n\nI have tripped over this problem in so many guises that I gave up and changed our entire schema over to always store the precise STI class in all cases, both for the inheritance column and for polymorphic associations.\n\nAs for the argument that storing the base class allows the record to change class - I think that is a very esoteric application.  Assuming you treat database records as objects (you are using an ORM!) then in an OO world an object doesn't just change class!  I suspect that ActiveRecord was written that way originally because it was easiest, however in the long run it has caused me more pain.\n\nI guess that not many people worry about it because it doesn't cause much pain until you start building complex schemas with many polymorphic joins and plenty of STI.\n\nI'm afraid all of my concrete examples are just too complicated, or so simplistic that they would not help.\n\nIf anyone is interested, I will gladly spend some time to show the changes I made.\n", "created_at": "2011-05-16 03:56:08", "user": 789801, "id": 1170568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170569", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2010-12-28 00:52:16 UTC\n\nActually, I can think of an example, but it's a pretty obvious one.  Given the schema proposed above by @viatropos, you cannot query the database to find all `Relationships` that belong to a particular class.  You can query for all `Relationships` where the `child` is an `Image`, but you cannot find `Relationships` whose `parent` is a `BlogPost`.  To do that you'd have to load each and every `Post` that is referred to as a `parent` and then check that it becomes a `BlogPost` in memory.\n\nThat's not very orthogonal, and terribly inefficient, especially if all you wanted to do was count the `Relationships`!\n\nSure you could do it more efficiently in SQL, but then why use an ORM?\n", "created_at": "2011-05-16 03:56:12", "user": 789801, "id": 1170569}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170570", "text": "_Imported from Lighthouse._\nComment by **Jon Leighton** - 2011-01-01 17:33:05 UTC\n\nHi,\n\nThat's a good point, maybe I was too quick to wontfix this. It would be theoretically possible to JOIN the relevant table conditional on its `type` column, but you're right that this is a nasty solution and it's made less straightforward by the polymorphism (how to decide what to JOIN?)\n\nI'm up for fixing this and I have some thoughts about how to make it a smooth transition, so I'm going to open it back up for now. When I have an opportunity (probably not for a while as I'm working on other stuff atm) I'll send some thoughts around the rails-core list.\n\nJon\n", "created_at": "2011-05-16 03:56:15", "user": 789801, "id": 1170570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170571", "text": "_Imported from Lighthouse._\nComment by **Paul K** - 2011-02-13 18:00:06 UTC\n\nI'm also one looking for this functionality to be in Rails as my projects depend on it. It looks like I'll need to roll up my sleeves and make it happen.\n\nI've started with Jon's [patch](https://github.com/jonleighton/rails/tree/5617_polymorphism_with_sti) and just played around with it for a while to see what's going on down there. I have all the tests passing now. \n\nI'm gonna package it up as a patch for master and 3.0.x. I'll introduce a configuration flag, say, store_sti_base_class which default to true to handle backwards compatibility.\n\nStay tuned.\n", "created_at": "2011-05-16 03:56:18", "user": 789801, "id": 1170571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170572", "text": "_Imported from Lighthouse._\nComment by **Paul K** - 2011-02-15 01:47:39 UTC\n\nAlright, I got something for Rails 3.0.4 on [github](https://github.com/pkmiec/rails/commit/6f4da9151e39283c14aaceec98ff605a746309d1). Rails 3.1 requires similar but different changes (as much of its internals are now Arel). I'm planning on doing those later in the week.\n\nI've added ActiveRecord::Base.store_base_sti_class (defaults to true) for backwards compatibility. I've added join_model_store_actual_sti_class_test.rb to test all the relevant cases I could find when store_base_sti_class is false.\n\nI've ran all the activerecord tests using native mysql.\n\nGonna test this out with my apps tomorrow as my wife would not be happy if I did it tonight ;).\n\nTake a look and let me know what you think.\n", "created_at": "2011-05-16 03:56:21", "user": 789801, "id": 1170572}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170573", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2011-02-15 09:12:54 UTC\n\nHi PaulK,\n\nGreat job!  I've had a look at the diffs and they are what I would expect.  I'm still on Rails 2.2.2 (with patches), so I am unable to try it, but I've made very similar changes to our installation and they have been in production for 9 months plus with no ill effects.\n\nFurther to my post in September, we have indeed rolled out another enhancement which validates polymorphic associations are only assigned objects that are in a subset of types.  Which application really needs a polymorphic association to be able to refer to _every_ table?  :-)\n\nThanks for your efforts Paul - you may well have saved me a massive task when we finally get around to moving up to Rails 3.\n\nCheers,\n   Jonathan.\n", "created_at": "2011-05-16 03:56:25", "user": 789801, "id": 1170573}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170574", "text": "_Imported from Lighthouse._\nComment by **Paul K** - 2011-02-16 06:16:51 UTC\n\nI've extracted the patch into a [gem](https://github.com/pkmiec/store_base_sti_class_for_3_0), so that I can include it into my applications which include Rails via Gemfile. So now the functionality can be added to any project by adding store_base_sti_class_for_3_0 to Gemfile.\n\nLet me know if you have any problems. Hopefully, this feature can be sucked into Rails itself.\n", "created_at": "2011-05-16 03:56:28", "user": 789801, "id": 1170574}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2995121", "text": "I'm running into the same problem.  Storing the base class's type in this field makes it impossible to use associations or methods defined in the subclass when the object is instantiated, because the parent class is the one instantiated.\n\nCan someone comment on why this wasn't implemented?  Seems like it would be easy enough to change [BelongsToPolymorphicAssociation](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/belongs_to_polymorphic_association.rb#L14):\n\n```\n-          owner[reflection.foreign_type] = record && record.class.base_class.name\n+          owner[reflection.foreign_type] = record && record.class.sti_name \n```\n\nDoing this causes two of the activerecord tests to fail, so I'm not sure what this would do to compatibility.  Anyone care to comment?\n", "created_at": "2011-12-02 20:11:35", "user": 169285, "id": 2995121}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3624904", "text": "I hacked this into my app but I would like to know why it isn't implemented this way as well.\n", "created_at": "2012-01-24 00:14:12", "user": 6336, "id": 3624904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3657662", "text": "I just migrated to rails 3.1 mainly to make use of nested has_many :through association but I am stuck with this polymorphic STI issue. I make use of polymorphic STI heavily and all of it is broken now. Gem store_base_sti_class_for_3_0 that fixes this issue in Rails 3.0 is not ported to Rails 3.1 yet. Is anyone working on porting it to Rails 3.1? If someone knows a fix suggested above (owner[reflection.foreign_type] = record && record.class.sti_name) for 3.1, I would appreciate any help so that I can move on until a formal fix is available. Thanks.\n", "created_at": "2012-01-25 19:51:44", "user": 790198, "id": 3657662}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3657747", "text": "Just add this to an initializer if you want this behavior\n\n```\nmodule ActiveRecord\n\n  # = Active Record Belongs To Polymorphic Association\n  module Associations\n    class BelongsToPolymorphicAssociation < BelongsToAssociation #:nodoc:\n      private\n\n        def replace_keys(record)\n          super\n          owner[reflection.foreign_type] = record && record.class.sti_name\n        end\n    end\n  end\n\nend\n```\n", "created_at": "2012-01-25 19:55:16", "user": 6336, "id": 3657747}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3680958", "text": "The latest response from aaronchi is a partial fix. It allows you to add an entry to join table/model ('Relationship') with right class name for both parent_type and child_type. But that doesn't solve the problem in SQL query constructs where it still uses the base class name 'Post' instead of 'BlogPost'. Any help to resolve or find a workaround for SQL query issue. I am fairly new to rails and any help would be appreciated greatly. I am using Rails 3.1.3 on windows7.  Thanks.\n", "created_at": "2012-01-27 02:25:52", "user": 790198, "id": 3680958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3746966", "text": "Could someone look at the following use case and help me with some pointers to get over this issue? \n\nHere is the use case:\nclass Collaboration < ActiveRecord::Base\nbelongs_to :owner, :polymorphic => true\nbelongs_to :member, :polymorphic => true\nend\nclass Student < User\nhas_many :collaborations, :as => :owner\nhas_many :advisors, :through => :collaborations, :source => :member, :source_type => \"Advisor\"\nend\nclass Advisor < User\nhas_many :collaborations, :as => :member\nhas_many :students, :through => :collaborations, :source => :owner, :source_type => \"Student\"\nend\n\nI created an entry in 'collaborations' table. Here is the output of Collaboration.all.inspect: \nCollaboration id: 1, owner_id: 69, owner_type: \"Student\", member_id: 68, member_type: \"Advisor\", created_at: \"2012-01-26 22:54:26\", updated_at: \"2012-01-26 22:54:26\"\n\nHere is the issue:\na1 = Advisor.find(68)\na1.collaborations.to_sql produces the following:\n=> \"SELECT collaborations.\\* FROM collaborations WHERE collaborations.member_id = 68 AND collaborations.member_type = 'User'\"\n\nInstead of\n\n => \"SELECT `collaborations`.\\* FROM `collaborations`  WHERE `collaborations`.`member_id` = 68 AND `collaborations`.`member_type` = 'Advisor'\"\n\nIs this a bug in Rails 3.1? The right behavior should be to use child class type (Advisor) instead of base class type (User) in the SQL construct. Is there a fix or workaround for this issue? I am stuck with this and a prompt response would be greatly appreciated. Thanks.\n", "created_at": "2012-01-31 20:11:48", "user": 790198, "id": 3746966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4123022", "text": " @aaronchi your fix does not work in Rails 3.2.1\n\nis there an update to this fix for Rails 3.2?\n", "created_at": "2012-02-22 20:51:25", "user": 22553, "id": 4123022}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14047989", "text": "this is still the behaviour of rails (3.2) but the [store_base_sti_class gem](https://github.com/appfolio/store_base_sti_class) works for all rails 3.x\n", "created_at": "2013-02-25 15:21:39", "user": 769725, "id": 14047989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18943457", "text": "Just ran into this in 3.2.13. The [store_base_sti_class](https://github.com/appfolio/store_base_sti_class) gem still works, but it's very smelly because of the code duplication. Has this been fixed in Rails 4?\n", "created_at": "2013-06-04 22:20:42", "user": 1715010, "id": 18943457}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5621\nCreated by **Kane** - 2010-09-12 19:13:56 UTC\n\nThe rake tasks from active record do not work with the jdbc adapter for postgresql.\n\nThis is cause the tasks match the adapter name for postgresql with a string not a regex.\nFor mysql the match is /mysql/ therefore the jdbc adapter for mysql works.\n\nI appended a patch with updates all comparisons to use regex.\n", "labels": [], "number": 725, "updated_at": "2011-05-21 15:12:07", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904412, "title": "db tasks do not work with jdbcpostgresql", "url": "https://api.github.com/repos/rails/rails/issues/725", "created_at": "2011-05-16 03:56:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170575", "text": "_Imported from Lighthouse._\nComment by **x0f** - 2010-10-09 13:53:23 UTC\n\nyep, needed to monkey-patch this for my last to projects\n", "created_at": "2011-05-16 03:56:37", "user": 789801, "id": 1170575}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170576", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-10-09 14:24:18 UTC\n\nSeems to me there should be a way for adapters to tell which database they interact with. I mean, regular expressions are fine, but they don't seem to make for a very stable or agnostic solution in this case.\n", "created_at": "2011-05-16 03:56:38", "user": 789801, "id": 1170576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170577", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2010-10-09 16:26:53 UTC\n\nokey so now its a low priority to use rails with jruby if you are not using mysql\n", "created_at": "2011-05-16 03:56:39", "user": 789801, "id": 1170577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170578", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2010-10-09 16:40:18 UTC\n\ni also would like a clean adapter interface, no messy switch cases in rake db and the possibility to specify the gem you want to use for a connection.\n\ni think there is plenty of room for improvement.\nexample: the adapters extend ar base with things like \"postgresql_connection\"\nand on and on..\n\ni just thought the apprach to fix the tasks to handle every thing with regex, like it is done for mysql would be a quick win.\n", "created_at": "2011-05-16 03:56:41", "user": 789801, "id": 1170578}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170579", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-10-09 18:16:58 UTC\n\nKane,\n\nDon't worry about the priority. The default value is Low, and tickets really only will get special attention if it's High. I'll make it Medium, though, just because it's you. ;)\n", "created_at": "2011-05-16 03:56:42", "user": 789801, "id": 1170579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170580", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2010-10-09 18:38:52 UTC\n\nokey thanks ;)\n\nnow the question is what do i need to do to get this issue resolved.\nShould i try the approach you suggested and supply a patch which extends the abstract adapter with the suggested method, 'dbms_name' or something like that, which can be used in the rake tasks?\nIf we go that way all adapters need to be patched.\n", "created_at": "2011-05-16 03:56:43", "user": 789801, "id": 1170580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170581", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-10-09 19:14:07 UTC\n\nI think going with the regular expressions for now is fine, but in the future it might be worth working out a more permanent solution. For that further discussion with the core team etc. is needed, though.\n", "created_at": "2011-05-16 03:56:45", "user": 789801, "id": 1170581}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170582", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:30:28 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:56:46", "user": 789801, "id": 1170582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170584", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2011-04-06 00:29:04 UTC\n\n[state:open]\n\nthis is still an issue.\nFor example i cant drop the database, it silently fails under jruby.\n\nI would love to do something about it, but since i already but some effort into this last year only to see that nothing happens, this time i would like some hints on how to approch this to get it applied.\n", "created_at": "2011-05-16 03:56:47", "user": 789801, "id": 1170584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170585", "text": "Attachments saved to Gist: http://gist.github.com/971707\n", "created_at": "2011-05-16 03:56:49", "user": 789801, "id": 1170585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170740", "text": "I think this is done. https://github.com/rails/rails/commit/c8102817ca0d355ece8b60007d230ab9292e7031 \n", "created_at": "2011-05-16 04:02:07", "user": 3948, "id": 1170740}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5623\nCreated by **eirc** - 2011-02-17 06:48:11 UTC\n\nEager loading a nested has_many association with conditions or order on the nested table loads only the first record.\n\n```\nclass AuthorAddress < ActiveRecord::Base\n  has_one :author\nend\n\nclass Author < ActiveRecord::Base\n  has_many :posts\n  belongs_to :author_address\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :author\nend\n```\n\n```\nauthor_address = AuthorAddress.find(1, :include => {:author => :posts}, :order => \"authors.id\")\n```\n\nUsing an order or conditions clause on a different table than the base one uses legacy SQL (LEFT OUTER JOIN) to load, but it incorrectly (eagerly) loads posts. Only one, of the many posts, is eagerly loaded and unfortunately the association thinks it is fully loaded.\n\nTherefore doing something like this:\n\n```\nauthor_address.author.posts.length\n```\n\nreturns a different answer than this:\n\n```\nauthor_address.author.posts.count\n```\n\n(which of course hits the database again to get the correct answer)\n\nAny ideas on where we can look to solve this?\n\nThe above code works correctly in Rails 1.2.6!\n\nAttached you'll find failing tests.\n\nThanks in advance for any help.\n", "labels": [], "number": 726, "updated_at": "2011-07-04 07:24:22", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904414, "title": "Eager loading a nested association with conditions or order eager loads the wrong associated records", "url": "https://api.github.com/repos/rails/rails/issues/726", "created_at": "2011-05-16 03:56:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170586", "text": "_Imported from Lighthouse._\nComment by **eirc** - 2010-09-13 15:25:06 UTC\n\nDiving in the code of ActiveRecord we traced the problem to ...\nActiveRecord::Associations::JoinDependency#construct_association and the following line:\n\n```\nreturn if record.instance_variable_defined?(\"@#{join.reflection.name}\")\n```\n\nIt appears that this line blocks loading nested has_many associations after the first record of the association has been loaded since the outer has_one association has already been loaded and the instance variable is set. So it loads only one record from the nested association, even tho there are more.\n\n(It's not easy to explain the problem but that's why we attached simple failing tests. Unfortunately that's the best we can do, without help, since the logic is a bit complicated)\n\nThis line was committed in: http://github.com/rails/rails/commit/a445cdd8840 for ticket #904. (http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/904)\n\nJeremy since you signed-off that commit (if that commit is responsible for the bug) can you shed some light please?\n", "created_at": "2011-05-16 03:56:54", "user": 789801, "id": 1170586}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170587", "text": "_Imported from Lighthouse._\nComment by **eirc** - 2010-10-20 14:30:44 UTC\n\nReverted tag changes from spam comment above.\n", "created_at": "2011-05-16 03:56:56", "user": 789801, "id": 1170587}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170588", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:07:18 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:56:57", "user": 789801, "id": 1170588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170589", "text": "_Imported from Lighthouse._\nComment by **nicolas** - 2011-01-20 16:57:32 UTC\n\nReturning the already loaded outer has_one object will allow for its has_many associations to be added to the object.\nI've add some success with\n\n``` ruby\nreturn record.instance_variable_get(\"@#{join.reflection.name}\") if record.instance_variable_defined?(\"@#{join.reflection.name}\")\n```\n", "created_at": "2011-05-16 03:56:59", "user": 789801, "id": 1170589}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170590", "text": "_Imported from Lighthouse._\nComment by **Preston Marshall** - 2011-01-21 19:08:12 UTC\n\nI can confirm this issue, pretty big deal to be marked as low priority.\n", "created_at": "2011-05-16 03:57:00", "user": 789801, "id": 1170590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170591", "text": "_Imported from Lighthouse._\nComment by **Fotos Georgiadis** - 2011-01-21 22:29:48 UTC\n\nAttached is a current patch against 2-3-stable activerecord which includes the failing tests introduced by eric and the solution proposed by nicolas. I have tested the patch using only sqlite3 (but the relevant code is database agnostic anyway).\n\nYes it is kinda strange that no-one else has seen this bug except us.\n\n+1 to have this applied to 2-3-stable.\n", "created_at": "2011-05-16 03:57:01", "user": 789801, "id": 1170591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170592", "text": "_Imported from Lighthouse._\nComment by **Preston Marshall** - 2011-01-21 23:35:21 UTC\n\nSo you are only experiencing it with has_one?  It is doing the same behavior in rails 3 with a has_many.\n", "created_at": "2011-05-16 03:57:02", "user": 789801, "id": 1170592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170593", "text": "_Imported from Lighthouse._\nComment by **Fotos Georgiadis** - 2011-01-21 23:59:37 UTC\n\nA has_one nested with a has_many association triggered the bug for us. We've seen weird counts for eager loaded associations and we started investigating things with eric.\n\nOther association combination might still trigger the bug..\n\nWe haven't tested it with rails 3 or edge, tho. The fix seems safe enough to be applied to 2-3-stable.\n", "created_at": "2011-05-16 03:57:04", "user": 789801, "id": 1170593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170594", "text": "_Imported from Lighthouse._\nComment by **nicolas** - 2011-01-24 14:35:44 UTC\n\na has_one nested with an has_many and an order or a condition triggers the bug for me.\nI'm seeing that bug in rails 3.0.3 as well.\n\nthe way I understand it is that construct_association must return the association for the nested associations to be loaded.\nIn the case of has_many, the association is always returned so the nested associations can be loaded.\nthe nested are properly associated to their parent since JoinBase.instantiate(row) caches the records it has already seen from the previous rows.\n\nHope this help.\n", "created_at": "2011-05-16 03:57:05", "user": 789801, "id": 1170594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170595", "text": "_Imported from Lighthouse._\nComment by **Guy Boertje** - 2011-02-04 15:24:37 UTC\n\nI am experiencing this bug as well in 2.2.2 and 2.3.5\n\nPerson has_one Wallet has_many Receipts\n\nReceipt belongs_to Wallet belongs_to Person\n\nPerson.find :all, :include=>{:wallet=>receipts}, :conditions => \"receipts.status IN ('unpaid','unconverted') AND receipts.ccy = 'EUR'\"\n\nOnly returns the first record but it should return many\n\nPlease up the priority.\n", "created_at": "2011-05-16 03:57:06", "user": 789801, "id": 1170595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170596", "text": "_Imported from Lighthouse._\nComment by **rob g** - 2011-04-14 18:17:35 UTC\n\nI just ran into this defect with active_record 3.0.5 as well.  The change proposed by Nicolas and Fotos fixes the issue for me as well.\n", "created_at": "2011-05-16 03:57:08", "user": 789801, "id": 1170596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170597", "text": "_Imported from Lighthouse._\nComment by **rob g** - 2011-04-14 21:03:07 UTC\n\nI created a patch against master with failing tests.  I intended to also port the fix proposed by Nicolas and Fotos  to master, but that code has changed so much on master that I'm not sure how to fix it yet.\n", "created_at": "2011-05-16 03:57:09", "user": 789801, "id": 1170597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170598", "text": "_Imported from Lighthouse._\nComment by **nicolas** - 2011-04-15 13:19:18 UTC\n\nHello rob g,\n\nI took a quick look at the master, and here is what I believe could fix the issue.\n\ndiff --git a/activerecord/lib/active_record/associations/join_dependency.rb b/activerecord/lib/active_record/associations/join_dependency.rb\nindex 504f252..26911c3 100644\n--- a/activerecord/lib/active_record/associations/join_dependency.rb\n+++ b/activerecord/lib/active_record/associations/join_dependency.rb\n@@ -184,7 +184,7 @@ module ActiveRecord\n\n```\n     macro = join_part.reflection.macro\n     if macro == :has_one\n```\n-          return if record.association_cache.key?(join_part.reflection.name)\n-          return record.association(join_part.reflection.name).target if record.association_cache.key?(join_part.reflection.name)\n         association = join_part.instantiate(row) unless row[join_part.aliased_primary_key].nil?\n         set_target_and_inverse(join_part, association, record)\n       else\n\nthe idea is for construct association to return already created 'has_one' association target, so that the children of that target can be loaded and associated with it.\n\nNicolas\n", "created_at": "2011-05-16 03:57:10", "user": 789801, "id": 1170598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170599", "text": "_Imported from Lighthouse._\nComment by **nicolas** - 2011-04-15 13:25:23 UTC\n\nThis is the properly formatted diff\n\n``` diff\ndiff --git a/activerecord/lib/active_record/associations/join_dependency.rb b/activerecord/lib/active_record/associations/join_dependency.rb\nindex 504f252..26911c3 100644\n--- a/activerecord/lib/active_record/associations/join_dependency.rb\n+++ b/activerecord/lib/active_record/associations/join_dependency.rb\n@@ -184,7 +184,7 @@ module ActiveRecord\n\n         macro = join_part.reflection.macro\n         if macro == :has_one\n-          return if record.association_cache.key?(join_part.reflection.name)\n+          return record.association(join_part.reflection.name).target if record.association_cache.key?(join_part.reflection.name)\n           association = join_part.instantiate(row) unless row[join_part.aliased_primary_key].nil?\n           set_target_and_inverse(join_part, association, record)\n         else\n```\n", "created_at": "2011-05-16 03:57:12", "user": 789801, "id": 1170599}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170600", "text": "Attachments saved to Gist: http://gist.github.com/971708\n", "created_at": "2011-05-16 03:57:13", "user": 789801, "id": 1170600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1496088", "text": "I am experiencing this issue on Rails 3.0.7 and the above patch does not appear to have been applied to edge.  Why is this issue closed?\n", "created_at": "2011-07-04 07:24:22", "user": 56388, "id": 1496088}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5646\nCreated by **Jamie** - 2011-02-19 09:28:29 UTC\n\nSteps to reproduce:\n- Create a value object using composed_of like in the Rails documentation.  Use the :converter option to recreate the value object from the params hash when attributes= is called on the parent.\n- Add validations to the value object.\n- Run those validations by using validates_associated in the entity where you have composed_of.\n\nWhat happens:\n- A 'can't modify frozen object' error is thrown.\n\nWhy it happens:\n- Not really sure, but I tracked it as far as the valid? method in ActiveRecord::Validations.  It appears to break in the \"ensure\" part of the that method.  This was added in commit 82485068f8b64a49cbb6.  When I overrode valid? in my value object, using the logic as it was before that commit, validates_associated started working as expected.\n", "labels": [], "number": 727, "updated_at": "2012-02-28 17:27:36", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904418, "title": "validates_associated throws 'can't modify frozen object' error", "url": "https://api.github.com/repos/rails/rails/issues/727", "created_at": "2011-05-16 03:57:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170601", "text": "_Imported from Lighthouse._\nComment by **Bob Lail** - 2010-12-30 16:11:13 UTC\n\nI dug into this a little more and wrote a blog post about the problem: [Using validates_associated with composed_of and ActiveModel::Validations](http://boblail.tumblr.com/post/2528265548/using-validates-associated-with-composed-of-and,).\n\nIn a nutshell:\n- ActiveRecord::Aggregations (deliberately) freezes objects assigned to a composed attribute\n- But ActiveModel::Validations tries to create two ivars: `@errors` and `@validation_context` on the frozen object\n", "created_at": "2011-05-16 03:57:19", "user": 789801, "id": 1170601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4220758", "text": "Why was this issue closed? This remains a problem.\n", "created_at": "2012-02-28 17:27:12", "user": 613, "id": 4220758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4220768", "text": "See also: #1513.\n", "created_at": "2012-02-28 17:27:36", "user": 613, "id": 4220768}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5663\nCreated by **BicycleRepairMan** - 2010-11-17 01:58:29 UTC\n\nThere seems to be a problem when we use the :defaults and :via options simultaneously to match a route. The attached unit test should not fail! Also if the routes.rb file looks like\n\n``` ruby\nRouteBug::Application.routes.draw do\n  match '/error' => \"bug#index\", :defaults => {:format => \"jpg\"}, :via => :get\nend\n```\n\nthen\n\n``` ruby\nRAILS_ENV=env rails runner 'RouteBug::Application.routes.generate :controller => :bug'\n```\n\nraises an error in test and production mode, but not in development mode.\n\nI tested this with ruby 1.9.2p0 (2010-08-18 revision 29036) [i686-linux] compiled from source and the ubuntu lucid ruby 1.8.7 (2010-01-10 patchlevel 249) [i486-linux].\n", "labels": [], "number": 728, "updated_at": "2011-05-21 15:12:07", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904419, "title": "Route generation error with :defaults and :via options", "url": "https://api.github.com/repos/rails/rails/issues/728", "created_at": "2011-05-16 03:57:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170602", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2010-09-19 21:39:26 UTC\n\nThis is another subtle Rack::Mount bug to do with key analysis. The reason it doesn't work in test or production is that the built-in info route isn't included and this is enough to trigger the bug. If you add some additional routes inside the test it passes.\n\nIt looks as though :format is getting added to the generation_keys array because the :request_method condition is including it in required_defaults. Once you have other routes the :format key drops out of generation_keys due to the increased frequency of the :controller and :action keys.\n", "created_at": "2011-05-16 03:57:26", "user": 789801, "id": 1170602}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170603", "text": "_Imported from Lighthouse._\nComment by **Jeremy Kemper** - 2010-10-15 22:02:03 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/31647)]\n", "created_at": "2011-05-16 03:57:28", "user": 789801, "id": 1170603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170604", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-16 01:22:19 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:57:29", "user": 789801, "id": 1170604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170605", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-19 07:35:31 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:57:31", "user": 789801, "id": 1170605}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170606", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2010-11-15 21:15:12 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/34353)]\n", "created_at": "2011-05-16 03:57:32", "user": 789801, "id": 1170606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170607", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:22 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 03:57:34", "user": 789801, "id": 1170607}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170608", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 03:57:35", "user": 789801, "id": 1170608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170609", "text": "Attachments saved to Gist: http://gist.github.com/971709\n", "created_at": "2011-05-16 03:57:37", "user": 789801, "id": 1170609}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5713\nCreated by **andreas** - 2010-10-02 09:56:28 UTC\n\nWhen Ruby 1.9 is started in unicode mode (-Ku), mem_cache_store.rb fails to parse:\n\n```\n/usr/local/ruby19/bin/ruby -Ku /usr/local/ruby-1.9.2-p0/lib/ruby/gems/1.9.1/gems/activesupport-3.0.0/lib/active_support/cache/mem_cache_store.rb\n/usr/local/ruby-1.9.2-p0/lib/ruby/gems/1.9.1/gems/activesupport-3.0.0/lib/active_support/cache/mem_cache_store.rb:32: invalid multibyte escape: /[\\x00-\\x20%\\x7F-\\xFF]/\n```\n", "labels": [], "number": 729, "updated_at": "2011-05-21 15:12:07", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904420, "title": "Ruby 1.9 -Ku incompatible with mem_cache_store", "url": "https://api.github.com/repos/rails/rails/issues/729", "created_at": "2011-05-16 03:57:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170610", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:59:08 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:57:42", "user": 789801, "id": 1170610}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170611", "text": "_Imported from Lighthouse._\nComment by **Nick Wilson** - 2011-02-07 08:16:19 UTC\n\n[state:open]\n\nThis is still a known issue with ruby 1.9.2 and Rails/ActiveSupport 3.0.3\n\nRuby 1.9 in unicode mode will attempt to interpret the regular expression as unicode. To avoid this you need to pass the regular expression option \"n\" for \"no encoding\":\n\nESCAPE_KEY_CHARS = /[\\x00-\\x20%\\x7F-\\xFF]/\n\nBecomes:\nESCAPE_KEY_CHARS = /[\\x00-\\x20%\\x7F-\\xFF]/n\n\nNow we have our raw 8-bit encoding (the only thing Ruby 1.8 speaks) as intended:\nruby-1.9.2-p136 :001 > ESCAPE_KEY_CHARS = /[\\x00-\\x20%\\x7F-\\xFF]/n.encoding\n=> # Encoding:ASCII-8BIT\n", "created_at": "2011-05-16 03:57:44", "user": 789801, "id": 1170611}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5738\nCreated by **Emmanuel Gomez** - 2011-02-19 09:28:12 UTC\n\nOn a project I'm working on, we've been using a monkey-patch that raises on mass assignment security errors (used to be in AR::Base#log_protected_attribute_removal). This helps us prevent silent failure. \n\nI'm in the process of porting our app to Rails 3, and spent some time today reimplementing this monkey-patch on WhiteList and BlackList. \n\nUpon doing so, I discovered an unexpected failure when accessing an association after building instances on the association. It turns out that AssociationCollection#load_target performs mass-assignment calls (#attributes=) to update non-dirty, non-id fields on the in-memory instances.\n\nI'm pretty sure that this call to #attributes= should bypass mass-assignment protection, since it's assigning values from the database to in-memory instances. I'm proposing to change:\n\n``` ruby\n@target.delete_at(i).tap do |t|\n  keys = [\"id\"] + t.changes.keys + (f.attribute_names - t.attribute_names)\n  t.attributes = f.attributes.except(*keys)\nend\n```\n\nto:\n\n``` ruby\n@target.delete_at(i).tap do |t|\n  keys = [\"id\"] + t.changes.keys + (f.attribute_names - t.attribute_names)\n  t.send(:attributes=, f.attributes.except(*keys), false)\nend\n```\n\nI'm pretty sure this should be an uncontroversial change, and I'd love to see it patched in ActiveRecord. Should I submit a patch for this change?\n", "labels": [], "number": 730, "updated_at": "2011-09-26 09:09:26", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904421, "title": "AssociationCollection#load_target triggers MassAssignmentSecurity warning", "url": "https://api.github.com/repos/rails/rails/issues/730", "created_at": "2011-05-16 03:57:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170613", "text": "_Imported from Lighthouse._\nComment by **Emmanuel Gomez** - 2010-09-30 22:52:43 UTC\n\nI've been meaning to learn how to properly produce a patch for Rails, so I went ahead and did it. \n\nThe attached patch doesn't include tests, because I'm not sure how to test this without changing the behavior of MassAssignmentSecurity::Sanitizer. I'll come up with something and add some test coverage shortly.\n", "created_at": "2011-05-16 03:57:51", "user": 789801, "id": 1170613}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170614", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-07 04:19:38 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/30788)]\n", "created_at": "2011-05-16 03:57:53", "user": 789801, "id": 1170614}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170615", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-10-07 04:21:21 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/30789)]\n", "created_at": "2011-05-16 03:57:54", "user": 789801, "id": 1170615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170616", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:58:41 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:57:56", "user": 789801, "id": 1170616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170617", "text": "_Imported from Lighthouse._\nComment by **Steve F** - 2011-03-15 23:15:17 UTC\n\nI have verified this is still an issue with tests in patch below.  There is a concurrency issue that is exposed by the same problem.  I have explained it in the patch as well [state:open]\n", "created_at": "2011-05-16 03:57:58", "user": 789801, "id": 1170617}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170618", "text": "Attachments saved to Gist: http://gist.github.com/971710\n", "created_at": "2011-05-16 03:57:59", "user": 789801, "id": 1170618}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2196267", "text": "I've just verified that this is still an issue in Rails 3.0.9 (and it doesn't look to be fixed in Rails 3.0.10). Could this issue be re-opened?\n", "created_at": "2011-09-26 09:09:26", "user": 11150, "id": 2196267}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5742\nCreated by **Bogdan Gusiev** - 2010-10-02 09:46:25 UTC\n\nLet's say we have batch of migrations in new production deployment.\nOne migration fails by some reason and deployment didn't occur.\n\nIn this case it would be great to rollback all already applied migrations in this deployment but not only the last one because the code will fall back to previous working version but database does not. \n\nAs I know Postgres support rollback of structural changes but mysql does not (not sure about others). But implementing this at least for postgres heal us from a lot of pain.\n", "labels": [], "number": 731, "updated_at": "2011-05-21 15:12:07", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904422, "title": "Migrations rollback in production environment", "url": "https://api.github.com/repos/rails/rails/issues/731", "created_at": "2011-05-16 03:58:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170621", "text": "_Imported from Lighthouse._\nComment by **David Trasbo** - 2010-10-09 15:20:21 UTC\n\nPlease provide a patch (https://rails.lighthouseapp.com/projects/8994/sending-patches) with a fix and/or a failing test.\n", "created_at": "2011-05-16 03:58:05", "user": 789801, "id": 1170621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170622", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:31:02 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:58:07", "user": 789801, "id": 1170622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170623", "text": "_Imported from Lighthouse._\nComment by **Bogdan Gusiev** - 2011-02-08 08:54:31 UTC\n\n[state:open]\n\nYes, I think this is important feature for rails.\n\nIt is connected with production releases and complex migrations when the data should be changed significantly.\nAll this process use to fail sometimes.\n\nIn this case if we could rollback the database to the state before migration - we would never have problems with failed deployments.\n\nWill provide the failing test.\n", "created_at": "2011-05-16 03:58:08", "user": 789801, "id": 1170623}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170624", "text": "_Imported from Lighthouse._\nComment by **Bogdan Gusiev** - 2011-02-08 09:43:36 UTC\n\nTest and patch.\n", "created_at": "2011-05-16 03:58:09", "user": 789801, "id": 1170624}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170625", "text": "Attachments saved to Gist: http://gist.github.com/971711\n", "created_at": "2011-05-16 03:58:11", "user": 789801, "id": 1170625}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5799\nCreated by **Joel Chippindale** - 2010-10-13 10:02:02 UTC\n\nMemoizable#prime_cache ignores private and protected methods.\n\nThis means that memoization of private and protected methods does not work on objects that are frozen.\n", "labels": [], "number": 732, "updated_at": "2011-05-21 15:12:07", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904423, "title": "Memoizable#prime_cache is broken for private and protected methods", "url": "https://api.github.com/repos/rails/rails/issues/732", "created_at": "2011-05-16 03:58:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170626", "text": "_Imported from Lighthouse._\nComment by **Joel Chippindale** - 2010-10-13 10:23:41 UTC\n\nPatch to fix the bug (with additional tests) attached\n", "created_at": "2011-05-16 03:58:16", "user": 789801, "id": 1170626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170627", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:30:23 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:58:18", "user": 789801, "id": 1170627}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170628", "text": "_Imported from Lighthouse._\nComment by **Joel Chippindale** - 2011-02-07 12:26:49 UTC\n\n[state:open] This patch still applies cleanly, and without it the version of Memoizable on rails/master still fails to memoize private and protected methods correctly.\n", "created_at": "2011-05-16 03:58:19", "user": 789801, "id": 1170628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170629", "text": "Attachments saved to Gist: http://gist.github.com/971712\n", "created_at": "2011-05-16 03:58:20", "user": 789801, "id": 1170629}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5806\nCreated by **tassmann (at jovoto)** - 2011-04-09 22:41:49 UTC\n\nadd option for distance_of_time_in_words to add an custom I18n scope.\n\n  For example in german the wording depends on the context:\n  3 days = 3 Tage\n  3 days ago = vor 3 Tagen (with an n)\n\nthis patch gives more flexibility for different contexts\n\npatch attached or http://github.com/jovoto/rails/commit/768f3f8211fb7a839ea84f446fcad8e6db76e04c\n", "labels": [], "number": 733, "updated_at": "2012-10-19 09:04:06", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904425, "title": "add I18n scope option to distance_of_time_in_words", "url": "https://api.github.com/repos/rails/rails/issues/733", "created_at": "2011-05-16 03:58:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170630", "text": "_Imported from Lighthouse._\nComment by **Yaroslav Markin** - 2010-10-16 03:17:28 UTC\n\nIs it possible to do the same with lambda-translations feature of I18n? In that case, we'll need to pass the datetime object to Proc which does the translation, instead of patching like that.\n\nCould you look into it?\n", "created_at": "2011-05-16 03:58:26", "user": 789801, "id": 1170630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170631", "text": "_Imported from Lighthouse._\nComment by **Thomas Fritzsche** - 2010-12-22 07:45:37 UTC\n\nI just come across this ticket while searching for a solution for exactly this issue in German translation? As I'm new to i18n, may I ask you: This lambda-translation you suggested. Is this something I can use in my project or this is just a ways you guys try to fix the i18n support of distance_of_time_in_words?\n\nAs \"time_ago_in_words\" and \"distance_of_time_in_words\" should yield in different texts in German grammar. I could maybe adjust the translation to meaning \"time_ago_in_words\" (\"vor 3 Tage\" --> \"vor 3 Tagen\") and just use this version? Or I create a local copy of that method in my project that is using different translations for \"time_ago_in words\"?\n\nThanks so much for your great work!\n", "created_at": "2011-05-16 03:58:27", "user": 789801, "id": 1170631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170633", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-23 00:00:12 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:58:29", "user": 789801, "id": 1170633}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170634", "text": "_Imported from Lighthouse._\nComment by **tassmann (at jovoto)** - 2011-03-23 09:01:46 UTC\n\nthe problem still exists in rails3, nothing changed..\n", "created_at": "2011-05-16 03:58:30", "user": 789801, "id": 1170634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170635", "text": "_Imported from Lighthouse._\nComment by **tassmann (at jovoto)** - 2011-03-23 09:02:49 UTC\n\nforgot the reopen part .. [state:open]\n", "created_at": "2011-05-16 03:58:31", "user": 789801, "id": 1170635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170636", "text": "Attachments saved to Gist: http://gist.github.com/971713\n", "created_at": "2011-05-16 03:58:33", "user": 789801, "id": 1170636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8156591", "text": "problem still exists!\n", "created_at": "2012-08-30 11:37:29", "user": 7011, "id": 8156591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8162402", "text": "@aka47 could you look if the patch attached on this issue fix your problem?\n", "created_at": "2012-08-30 15:07:03", "user": 47848, "id": 8162402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8172260", "text": "eh, yes, since i did it probably 2 years ago ;) \nMaybe there is a better option, but i believe that for all the language their are far too many different cases, different grammar options that this is a simple option to get around any edge case. \n", "created_at": "2012-08-30 19:57:45", "user": 7011, "id": 8172260}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8172591", "text": "Right, but if you can confirm that the patch works for you, we can actually apply it to Rails.\n", "created_at": "2012-08-30 20:07:42", "user": 27786, "id": 8172591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9594034", "text": "I just overrode the helper with the patch in my application and it works like a breeze! \n", "created_at": "2012-10-19 09:04:06", "user": 141632, "id": 9594034}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I created two barebones Rails projects. One with Rails 3.0.7 and the other with 3.1.0.beta1. Both are using Ruby 1.9.2p180 and SQLite for the db. Running this very basic script with Rails runner, Rails 3.1 takes **twice as long** to load in 3.1 versus 3.0.\n\n```\n# the test\necho puts Time.now > test_script\ntime rails runner test_script\n\n# Rails 3.0.7\ntime rails runner test_script\n\nreal    0m2.125s\nuser    0m1.668s\nsys     0m0.443s\n\n# Rails 3.1.0.beta.1\ntime rails runner test_script\n\nreal    0m4.601s\nuser    0m3.800s\nsys     0m0.781s\n```\n", "labels": [], "number": 734, "updated_at": "2011-08-16 18:25:24", "user": 6896, "closed_at": "2011-08-16 18:25:24", "id": 904426, "title": "Performance Regression in Rails 3.1 boot time", "url": "https://api.github.com/repos/rails/rails/issues/734", "created_at": "2011-05-16 03:58:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172755", "text": "@robolson we really appreciate that you benchmark Rails! Could you please try to identify exactly what got slower? Maybe it is because Rails now has more dependencies? If you can pinpoint the problem, it will be much easier for us to solve it.\n", "created_at": "2011-05-16 11:12:18", "user": 9582, "id": 1172755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1555438", "text": "Could this be related to the require issue in Ruby 1.9.2?.\n@robolson can you give us more details?\n", "created_at": "2011-07-12 16:10:41", "user": 52642, "id": 1555438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1556340", "text": "@spastorino It could not be related to the require issue in Ruby 1.9.2 because **both** benchmarks were run under 1.9.2 so they were equally affected. Something actually changed in Rails to make it take longer, possibly more dependencies like Jose hypothesized.\n\n@josevalim sorry for never responding. I'm afraid I do not have the ruby-prof chops to narrow this down. However, I wanted to make the core team aware of the significant regression.\n", "created_at": "2011-07-12 18:04:10", "user": 6896, "id": 1556340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1637570", "text": "Okay trying this out with \n\nRails 3.1.0-rc4:\n\n```\nrails_bugmash/issue_734> time rails runner test_script\nrails runner test_script  1.29s user 0.22s system 99% cpu 1.519 total\n```\n\nWith Rails 3.0.9:\n\n```\nrails_bugmash/another> time rails runner test_script                                                                                                   \nrails runner test_script  1.26s user 0.23s system 99% cpu 1.491 total\n```\n\nI can look into profiling this, provided a consistent test-case, but I am not seeing such a big difference here. I am using Ruby-1.9.2-p290 and rails with sqlite3.\n", "created_at": "2011-07-23 14:24:57", "user": 278, "id": 1637570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638110", "text": "I'm getting this\n\n<pre><code>‚ûú  myapp307  time bundle exec rails runner ../test_script\nbundle exec rails runner ../test_script  1.81s user 0.39s system 77% cpu 2.836 total\n‚ûú  myapp309  time bundle exec rails runner ../test_script\nbundle exec rails runner ../test_script  1.89s user 0.39s system 99% cpu 2.277 total\n‚ûú  myapp310  time bundle exec rails runner ../test_script\nbundle exec rails runner ../test_script  4.01s user 0.74s system 65% cpu 7.249 total</code></pre>\n\n\n@gnufied are you testing with 3-1-stable latest code?\n", "created_at": "2011-07-23 17:42:32", "user": 52642, "id": 1638110}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638141", "text": "@gnufied: Wow you must have a very fast computer.\n\nA tried the experiment again. This time with 1.9.2-p290 and Rails 3.1.0-rc4. The issue only seems to have gotten worse.\n\n```\n# Rails 3.1.0.rc4\ntime rails runner test_script\n\nreal    0m5.125s\nuser    0m4.330s\nsys     0m0.803s\n```\n", "created_at": "2011-07-23 17:51:09", "user": 6896, "id": 1638141}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638208", "text": "@robolson, https://gist.github.com/1101699\n\n@spastorino , no still with 3.1.0-rc4, but will it make that big difference? \n\nAnyways, please run it couple of times to arrive on a conclusion. \n", "created_at": "2011-07-23 18:13:07", "user": 278, "id": 1638208}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638227", "text": "@gnufied I've just pasted the output as if I had run it once but actually I did it a couple of times and got exactly the same thing.\n", "created_at": "2011-07-23 18:18:35", "user": 52642, "id": 1638227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1643333", "text": "Hey guys I threw up a project to help debug this, making use of the profile tool included in the rails repo.\nhttps://github.com/bmarini/profile-rails-startup\n\nI got the following results, profiling a require of `config/environment.rb` ([full result here](https://github.com/bmarini/profile-rails-startup/tree/master/profiles))\n\n```\n3-0:   27413.36 KB 120600 obj  667.1 ms 19732 KB RSS 115.9 ms GC time 4 GC runs\n3-1:   63571.32 KB 262752 obj 1919.5 ms 26568 KB RSS 436.2 ms GC time 5 GC runs\n```\n\nIt looks as though 3-1 loads a little more than double the number of objects into memory and triggers an extra GC run on my machine.\n", "created_at": "2011-07-25 03:45:40", "user": 13173, "id": 1643333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1650762", "text": "Is this perhaps to do with the extra dependencies like `coffee-script` and not Rails itself? Just a thought.\n", "created_at": "2011-07-26 01:02:43", "user": 2687, "id": 1650762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1653641", "text": "Related: this problem seems to be exponential, on our larger apps, we are seeing 20+ second boot times. \n\nThe problem seems to be affected by a slow 1.9.2 require, with a large load path, 88 gems ( including nested dependencies), as well as extra object allocations in 3.1.\n\nOver the weekend I wanted to see exactly how much time (in a real world app) the whole massive load path was costing us.\n\nDetails\n- ruby 1.9.2p290 (2011-07-09 revision 32553) [x86_64-darwin11.0.0]\n- rails 3.1 rc4 + 88 Gems\n- 2.8ghz Core 2 duo + SSD + 6gb of ram( OSX Lion)\n\nSo I:\n- compact the load path, by taking all gems, putting them in the same master directory.\n- Patched the app not to allow bundler to play with the load path\n- use bundler to provide the correct require order\n- required all gems directly from the new master gem directory\n\nIssues:\n- compatibility\n- some gems needed to be patched (only 5 or so, our of 88)\n- some rails engines (and im assuming other gems) actually look into the load path to do stuff (and dont work without patching)\n- feels dirty\n\nOutcome\n- 8s app boot time, instead of 20 seconds ( 250% speed up)\n\nNow 8s is a huge improvement over 20, but I would like to see this hopefully be the baseline sometime soon, open for more optimizations.\n\nConclusion\nI'm sure the extra object allocations aren't helping, but we can drastically improve rails boot time, by working specifically on ruby's require and load_path issues.\n\nHopefully I will be able to squeeze out some time to continue working on this.\n", "created_at": "2011-07-26 12:20:47", "user": 1377, "id": 1653641}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1696811", "text": "Can someone test this on 1.9.3? Supposedly the slow require issue is much improved there.\n", "created_at": "2011-07-31 22:19:11", "user": 2741, "id": 1696811}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1696982", "text": "With 1.9.3\n\n<pre><code>‚ûú  myapp  time bundle exec rails runner test_script\nbundle exec rails runner test_script  2.37s user 0.38s system 99% cpu 2.773 total\n‚ûú  myapp_test  time bundle exec rails runner test_script\nbundle exec rails runner test_script  2.38s user 0.36s system 99% cpu 2.765 total\n‚ûú  myapp_test  time bundle exec rails runner test_script\nbundle exec rails runner test_script  2.40s user 0.37s system 99% cpu 2.785 total</code></pre>\n\n\nI'm still thinking this could be related to the require issue, since 3.1 has much more deps now we can't compare to 3.0 directly.\n", "created_at": "2011-07-31 23:16:58", "user": 52642, "id": 1696982}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1696987", "text": "With 1.9.3 and the same Gemfile 3.0 has\n\n<pre><code>‚ûú  myapp  time bundle exec rails runner test_script\nbundle exec rails runner test_script  1.95s user 0.21s system 99% cpu 2.165 total</code></pre>\n\n\nThis is practically the same time I was getting in 3.0.9\n", "created_at": "2011-07-31 23:18:36", "user": 52642, "id": 1696987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1811479", "text": "I have made a bit of an improvement in development mode by making sass-rails less eager about requiring stuff: https://github.com/rails/sass-rails/commit/c2f9d662d448c7d90632642ff29637500a3e5e7b\n", "created_at": "2011-08-15 21:52:32", "user": 1979, "id": 1811479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1818922", "text": "I am closing this because startup time is roughly halved by recent changes. It's still a bit slower than 3.0, and there are still some optimisations that could be made, but that stuff won't be done for the 3.1.0 release.\n", "created_at": "2011-08-16 18:25:24", "user": 1979, "id": 1818922}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5831\nCreated by **Peer Allan** - 2011-02-21 14:04:59 UTC\n\nIn our app we used the rails_upgrade plugin to find what we needed to fix.  We found that the rails:upgrade:check rake task was missing many of our named_scopes. It turns out that the grep command is being scrubbed by gsub and that if the first line in the results was a comment, then all subsequent lines were lost.  For example,\n\nGrep results:\n\n/path/to/app/models/article.rb: # named_scope :active\n/path/to/app/models/article.rb: named_scope :inactive\n/path/to/app/models/post.rb: named_scope :by_author\n\nYou would expect the upgrade to skip the first line and report the second and third line, but at present it returns no results.  The attached patch fixes this.\n", "labels": [], "number": 735, "updated_at": "2011-05-17 12:34:33", "user": 789801, "closed_at": "2011-05-17 12:34:33", "id": 904427, "title": "Rails Upgrade plugin loses found results after a comment", "url": "https://api.github.com/repos/rails/rails/issues/735", "created_at": "2011-05-16 03:58:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170637", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-10-21 02:38:40 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:58:39", "user": 789801, "id": 1170637}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170638", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-10-24 12:09:13 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:58:40", "user": 789801, "id": 1170638}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170639", "text": "_Imported from Lighthouse._\nComment by **Vijay Dev** - 2011-02-20 16:51:03 UTC\n\nThis is not a Rails issue. You can submit pull requests in [rails_upgrade](https://github.com/rails/rails_upgrade) on GitHub.\n\nCan be closed.\n", "created_at": "2011-05-16 03:58:41", "user": 789801, "id": 1170639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170640", "text": "Attachments saved to Gist: http://gist.github.com/971714\n", "created_at": "2011-05-16 03:58:42", "user": 789801, "id": 1170640}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1190058", "text": "@josevalim Invalid issue and can be closed.\n", "created_at": "2011-05-17 12:16:50", "user": 146214, "id": 1190058}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5833\nCreated by **Joel Chippindale** - 2010-10-18 10:54:21 UTC\n\nMime::Type#parse doesn't split out the accept params from the media range when there is a single media range.\n\nI.e. it incorrectly parses the valid HTTP_ACCEPTS header \"_/_;0.9\" to be \"_/_;0.9\" rather than \"_/_\"\n", "labels": [], "number": 736, "updated_at": "2013-11-01 11:42:19", "user": 789801, "closed_at": "2011-05-21 15:12:07", "id": 904428, "title": "Bug in Mime::Type#parse for single media range with accept params", "url": "https://api.github.com/repos/rails/rails/issues/736", "created_at": "2011-05-16 03:58:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170642", "text": "_Imported from Lighthouse._\nComment by **Joel Chippindale** - 2010-10-18 11:07:36 UTC\n\nAttached patch for master\n", "created_at": "2011-05-16 03:58:48", "user": 789801, "id": 1170642}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170643", "text": "_Imported from Lighthouse._\nComment by **Joel Chippindale** - 2010-10-18 11:08:00 UTC\n\nAnd patch for 2-3-stable\n", "created_at": "2011-05-16 03:58:50", "user": 789801, "id": 1170643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170644", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-17 12:31:48 UTC\n\nJoel: why patch for master uses /;/ and patch for 2.3 uses ';' ?\n", "created_at": "2011-05-16 03:58:51", "user": 789801, "id": 1170644}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170645", "text": "_Imported from Lighthouse._\nComment by **Joel Chippindale** - 2011-02-07 12:38:20 UTC\n\nPiotr,\n\nThe patch for master does not use /;/, rather they both use ';'\n\nIf you look in the patch for master and for 2.3 the line is\n\n```\n[Mime::Type.lookup(accept_header.split(';').first)]\n```\n\nOr perhaps I have misunderstood your question\n\nJ.\n", "created_at": "2011-05-16 03:58:56", "user": 789801, "id": 1170645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170646", "text": "_Imported from Lighthouse._\nComment by **Joel Chippindale** - 2011-02-07 12:57:04 UTC\n\nThis is still an issue with master, here is a new version of the patch which applies cleanly to current master.\n", "created_at": "2011-05-16 03:58:58", "user": 789801, "id": 1170646}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170647", "text": "Attachments saved to Gist: http://gist.github.com/971715\n", "created_at": "2011-05-16 03:58:59", "user": 789801, "id": 1170647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1553321", "text": "I would quite like to see this patch applied to master.  Useless or not it is still valid HTTP, and is not just caused by bots.  At least one of the PSP's browsers sends `*/*;q=0.01` as an accept header.\n", "created_at": "2011-07-12 10:44:12", "user": 109225, "id": 1553321}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1823424", "text": "+1 for applying this patch. I agree with @elliotcm that properly parsing valid HTTP is the right thing to do. For now, I am using this ugly monkey-patch, which is not as nice as the posted patch, but is easy and unintrusive:\n\n``` ruby\nmodule Mime\n  class Type\n    def self.lookup(string)\n      LOOKUP[string.split(';').first]\n    end\n  end\nend\n```\n", "created_at": "2011-08-17 05:36:41", "user": 91148, "id": 1823424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1839888", "text": "+1 for seeing this fixed.  There's already a gist attached to this issue that looks like it does the trick: http://gist.github.com/971715\n", "created_at": "2011-08-18 15:23:31", "user": 169093, "id": 1839888}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1966994", "text": "+1 indeed, we have this problem with a lot of our applications as well, these are a few of the headers:\n\n```\ntext/html;q=0.7\n*/*, application/youtube-client\n```\n", "created_at": "2011-09-01 11:06:04", "user": 39115, "id": 1966994}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2177143", "text": "+1\n", "created_at": "2011-09-23 10:08:37", "user": 43391, "id": 2177143}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2823457", "text": "Is someone in Rails core able to reopen this issue?\n", "created_at": "2011-11-22 00:00:23", "user": 169093, "id": 2823457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3627305", "text": "+1. Please reopen this issue; this is still relevant.\n", "created_at": "2012-01-24 04:40:08", "user": 133028, "id": 3627305}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3837029", "text": "I can see from inspecting the code, that this is still not fixed in master. The problem is that `Mime::Type.parse` treats the single content-type case differently from the multiple content-type case, and all the fixes go into the multiple content-type case. I think a quick refactoring of that code to share the logic for both cases would solve this. I am going to work up a pull request.\n\nIn the meantime, I have posted a gist similar to the monkey-patch I described above. This time it includes a test case and some version checking so you can detect when an upgrade to a later version of Rails pulls in a fix. (This gist also fixes a related issue #860).\n\nhttps://gist.github.com/1754727\n", "created_at": "2012-02-06 21:12:48", "user": 91148, "id": 3837029}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5851\nCreated by **JackC** - 2011-04-14 10:17:34 UTC\n\nDestroying a record with a has_and_belongs_to_many association fails if the join table has foreign key constraints. On Rails 2.3.X the association is cleared prior to deleting the record. On Rails 3.0, the association is cleared after the record is deleted.\n", "labels": [], "number": 737, "updated_at": "2011-05-23 12:44:03", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904430, "title": "has_and_belong_to_many destroy with foreign key constraints broken", "url": "https://api.github.com/repos/rails/rails/issues/737", "created_at": "2011-05-16 03:59:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170648", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:28:32 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:59:04", "user": 789801, "id": 1170648}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170649", "text": "_Imported from Lighthouse._\nComment by **Jeremy McNevin** - 2011-03-18 15:56:15 UTC\n\nThis problem seems to still exist as of 3.0.5.  Currently, I need to define my own before_destroy callback to clear out HABTM associations, or a destroy operation will fail when the join table has foreign key constraints.\n\n[state:open]\n", "created_at": "2011-05-16 03:59:06", "user": 789801, "id": 1170649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170650", "text": "_Imported from Lighthouse._\nComment by **JackC** - 2011-04-09 14:17:44 UTC\n\nA workaround for PostgreSQL users is to define the foreign keys as initially deferred. That will let Rails delete it in the wrong order without error.\n", "created_at": "2011-05-16 03:59:07", "user": 789801, "id": 1170650}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170651", "text": "_Imported from Lighthouse._\nComment by **JackC** - 2011-04-13 20:48:11 UTC\n\nCorrection, deferred foreign keys don't work either. Rails is actually deleting the HABTM association after is commits the destroy transaction. This also could leave the database in an inconsistent state.\n", "created_at": "2011-05-16 03:59:08", "user": 789801, "id": 1170651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221393", "text": "Still exists in 3.0.7, could you please reopen this ticket ? \n", "created_at": "2011-05-23 12:42:23", "user": 115818, "id": 1221393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221402", "text": "Do you have a test case ? Have you tested it against master ?\n", "created_at": "2011-05-23 12:44:03", "user": 9347, "id": 1221402}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5867\nCreated by **stonefield** - 2011-03-01 15:14:22 UTC\n\nIt seems that ActiveResource is encapsulating the received object, adding a parent. This makes the received object having no known attributes.\nI assume the problem is in the client and not the server. Simple examples from the console (as a client):\n\nself.format = :xml\n\n```\nruby-1.9.2-p0 > Link.first\n=> #<Link:0x00000101c3d4d8 @attributes={\"created_at\"=>2010-10-25 14:49:16 UTC, \"id\"=>1, \"name\"=>\"The link\", \"number\"=>1, \"updated_at\"=>2010-10-25 14:49:16 UTC}, @prefix_options={}> \n```\n\nself.format = :json\n\n```\nruby-1.9.2-p0 > Link.first\n=> #<Link:0x00000100c67680 @attributes={\"link\"=>#<Link:0x00000100c66cf8 @attributes={\"created_at\"=>\"2010-10-25T14:49:16Z\", \"id\"=>1, \"name\"=>\"The link\", \"number\"=>1, \"updated_at\"=>\"2010-10-25T14:49:16Z\"}, @prefix_options={}>}, @prefix_options={}> \n```\n\nSimple examples from the browser (from the server):\nhttp://localhost:3000/links/1.xml\n\n```\n<link>\n  <created-at type=\"datetime\">2010-10-25T14:49:16Z</created-at>\n  <id type=\"integer\">1</id>\n  <name>The link</name>\n  <number type=\"integer\">1</number>\n  <updated-at type=\"datetime\">2010-10-25T14:49:16Z</updated-at>\n</link>\n```\n\nhttp://localhost:3000/links/1.json\n\n```\n{\"link\":{\"created_at\":\"2010-10-25T14:49:16Z\",\"id\":1,\"name\":\"The link\",\"number\":1,\"updated_at\":\"2010-10-25T14:49:16Z\"}}\n```\n", "labels": [], "number": 738, "updated_at": "2011-05-21 15:12:08", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904431, "title": "ActiveResource is not parsing JSON correct", "url": "https://api.github.com/repos/rails/rails/issues/738", "created_at": "2011-05-16 03:59:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170652", "text": "_Imported from Lighthouse._\nComment by **Denis Odorcic** - 2010-10-28 03:09:49 UTC\n\nVerified that ActiveResource JSON is not working at all. Resource.include_root_in_json was defaulted to true in #3770 but wasn't handled when decoding in ActiveResource. I've attached is a patch which does so. \n\nI also had to fix the tests in format_test.rb as they were incorrectly encoding objects for JSON, and relying on a specific way that XML decodes its objects to get the tests to pass. Feedback on what I did with the tests would be good.\n", "created_at": "2011-05-16 03:59:16", "user": 789801, "id": 1170652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170653", "text": "_Imported from Lighthouse._\nComment by **stonefield** - 2010-10-28 10:04:51 UTC\n\nThanks Denis,\n\nI applied the patch, and it seems to work correctly.\nI also reviewed the tests and I think they look good, but I might not be the right person to verify those.\n", "created_at": "2011-05-16 03:59:17", "user": 789801, "id": 1170653}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170654", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:05:33 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:59:18", "user": 789801, "id": 1170654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170655", "text": "_Imported from Lighthouse._\nComment by **Denis Odorcic** - 2010-11-24 21:51:53 UTC\n\nNo love for ActiveResource and JSON eh? :( Ran into this again today at work which reminded me about the ticket.\n", "created_at": "2011-05-16 03:59:20", "user": 789801, "id": 1170655}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170657", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-26 00:00:18 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:59:21", "user": 789801, "id": 1170657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170658", "text": "_Imported from Lighthouse._\nComment by **stonefield** - 2011-02-27 04:47:01 UTC\n\nAdd the patch, please.\nTests viewed and seems good.\nVerified that the patch is working. \nHave system in production with this code.\n", "created_at": "2011-05-16 03:59:22", "user": 789801, "id": 1170658}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170659", "text": "_Imported from Lighthouse._\nComment by **Denis Odorcic** - 2011-02-28 19:01:07 UTC\n\nI guess this should still be in [state:open] then since there hasn't been any change to ActiveResource JSON decoding.\n", "created_at": "2011-05-16 03:59:24", "user": 789801, "id": 1170659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170660", "text": "Attachments saved to Gist: http://gist.github.com/971716\n", "created_at": "2011-05-16 03:59:25", "user": 789801, "id": 1170660}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5873\nCreated by **Rob Anderton** - 2011-01-18 08:52:34 UTC\n\nSince [this change in May](http://github.com/rails/rails/commit/74206aeff2b6a960612a820ec47e91ef9b778262) that was part of the 2.3.6 release, Rails has been dependent on the Rack 1.1 gem.\n\nUnfortunately this version of Rack does bad things to query strings containing quotes which at best leads to them being stripped out of the params hash values and at worst leads to values being silently truncated.\n\nI first had a [look at this problem](http://thewebfellas.com/blog/2010/7/15/rails-2-3-8-rack-1-1-and-the-curious-case-of-the-missing-quotes) a few months back and as it's not been fixed in the meantime have now had chance to work on a patch which I think uses the best approach to fixing it: monkey-patching the broken code in Rack.\n\nI appreciate we'd normally want to steer clear of monkey-patching in favour of using the fixed version of the gem, but this isn't really an option as Rack is broken in more ways than one:\n- Rack 1.2 fixes the query string parser but [breaks multipart uploads](http://rack.lighthouseapp.com/projects/22435-rack/tickets/79)\n- Rack 1.2.1 still has broken multipart uploads but also [breaks](http://github.com/rack/rack/commit/bf4593a5cf61aa9cb0715e6e9794a01a514ea199) [compatibility](http://github.com/rack/rack/commit/d3893c2709a9831f665245cf5da44e0019bead4f) with Ruby 1.8.6\n\nRolling back to Rack 1.0.1 also proves problematic as other parts of Rails 2.3 have been changed to work with the 1.1 release.\n\nSo to summarise the attached patch:\n- it adds a monkey-patch for the broken parsing methods in Rack::Utils using a similar pattern to the Rack::Lint patch that had been added previously\n- it removes the Rack::Lint patch as it no longer applies to Rack 1.1.0\n- and on a completely unrelated issue it tweaks a template to prevent annoying parentheses warnings when running the tests\n", "labels": [], "number": 739, "updated_at": "2011-05-21 15:12:08", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904432, "title": "Fix broken Rack params parser in Rails >= 2.3.6", "url": "https://api.github.com/repos/rails/rails/issues/739", "created_at": "2011-05-16 03:59:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170661", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:04:55 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:59:31", "user": 789801, "id": 1170661}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170662", "text": "_Imported from Lighthouse._\nComment by **Stephen Blackstone** - 2010-11-03 19:51:51 UTC\n\n+1 This is impacting my production application...\n", "created_at": "2011-05-16 03:59:32", "user": 789801, "id": 1170662}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170663", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2010-11-09 22:38:01 UTC\n\nFor this one, could we perhaps simply update 2.3.11 to depend on 1.2?  Would anything else misbehave?\n\nThe rack team have shown no interest in doing point releases for the 1.1. release\n", "created_at": "2011-05-16 03:59:33", "user": 789801, "id": 1170663}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170664", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-10 03:49:19 UTC\n\nI bumped up rack to 1.2 in actionpack and all the tests are passing. Not sure if that means all is good since I don't really know how many tests go through the full stack and how many bypasses rack.\n", "created_at": "2011-05-16 03:59:35", "user": 789801, "id": 1170664}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170665", "text": "_Imported from Lighthouse._\nComment by **Rob Anderton** - 2010-11-10 09:45:39 UTC\n\nAs I said in the original ticket I looked at bumping to 1.2 but as these were also broken decided to stick with 1.1 and just patch this specific problem.\n\nRunning with Rack 1.2.0 gives 2 failures for me (this is using Ruby 1.8.6 p383):\n- CookieTest#test_multiple_cookies fails with an incorrect cookie string as it doesn't expect a trailing newline\n- MultipartParamsParsingTest#test_parses_mixed_files fails 500 error because Rack tries to call #rewind on a string\n\nRack 1.2.1 breaks immediately (the tests don't get to run at all) because Rack::Utils makes a call to the union method of Regexp which is ok with newer Ruby versions but not with 1.8.6.\n\nSo whichever version you choose it's gonna involve monkeys :)\n", "created_at": "2011-05-16 03:59:36", "user": 789801, "id": 1170665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170666", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-10 09:51:33 UTC\n\nMy bad.\n\nI ran the tests again with rack 1.2 and I am getting the same error as reported by Rob.\n\nI am using.\n\nruby 1.8.7 (2010-04-19 patchlevel 253) [i686-darwin10.4.0], MBARI 0x6770, Ruby Enterprise Edition 2010.02.\n", "created_at": "2011-05-16 03:59:38", "user": 789801, "id": 1170666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170668", "text": "_Imported from Lighthouse._\nComment by **Roel van der Hoorn** - 2010-12-16 09:04:56 UTC\n\n+1 for the attached patch; nasty bug.\n\nIf Rack 1.2 introduces other problems, it is clearly no way to go for a patch-release. Also, Rack's lack of willing to do a point release for 1.1 is really crappy.\n", "created_at": "2011-05-16 03:59:39", "user": 789801, "id": 1170668}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170670", "text": "_Imported from Lighthouse._\nComment by **Rob Anderton** - 2010-12-16 09:32:51 UTC\n\nI'm a little concerned that something that could cause major headaches for people has been assigned a low priority - it's nearly 7 months since the bug was introduced and 2 months since I submitted a patch.\n\nI can only assume it hasn't created more of a furore because it's a silent killer most likely to be blamed on user error :)\n\nWhat needs to be done to ensure this gets fixed?\n", "created_at": "2011-05-16 03:59:40", "user": 789801, "id": 1170670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170671", "text": "_Imported from Lighthouse._\nComment by **Jonathan Wallace** - 2011-01-14 14:24:59 UTC\n\n+1\n", "created_at": "2011-05-16 03:59:41", "user": 789801, "id": 1170671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170673", "text": "_Imported from Lighthouse._\nComment by **Trung L√™** - 2011-02-15 18:48:35 UTC\n\nwhere's the love? +1\n", "created_at": "2011-05-16 03:59:43", "user": 789801, "id": 1170673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170674", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-15 20:30:52 UTC\n\nDoesn't the rack 1.1.1.pre release fix this - specifically:\nhttps://github.com/rack/rack/commit/6fa19e3a268c05e24907ffe1b344b2323f1361ed\n", "created_at": "2011-05-16 03:59:44", "user": 789801, "id": 1170674}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170675", "text": "_Imported from Lighthouse._\nComment by **Rob Anderton** - 2011-02-16 11:01:06 UTC\n\nafaik 1.1.1 never made it to a 'proper' release. 1.2.x also includes the fix but as discussed above this introduces new problems - patching 1.1 seems like a sensible approach to fixing this problem until Rack sorts itself out.\n\nStill surprised more people haven't complained about this.\n", "created_at": "2011-05-16 03:59:45", "user": 789801, "id": 1170675}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170676", "text": "_Imported from Lighthouse._\nComment by **Rob Anderton** - 2011-02-16 11:07:44 UTC\n\nAh maybe Rack is finally going to sort itself out :)\nhttp://groups.google.com/group/rack-devel/browse_thread/thread/b1c3bb2adda31e3c\n", "created_at": "2011-05-16 03:59:47", "user": 789801, "id": 1170676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170677", "text": "_Imported from Lighthouse._\nComment by **jrochkind** - 2011-02-16 14:37:17 UTC\n\nThis is NOT fixed in 2.3.11, right? Alas. Still keeping me from updating to a later Rails 2.x than 2.3.6.  It surprises me that this hasn't received more attention and is still marked priority=low, I guess few apps need to have quotes in http query strings?\n", "created_at": "2011-05-16 03:59:48", "user": 789801, "id": 1170677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170678", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-16 14:48:11 UTC\n\nIf you use the Rack 1.1.1.pre gem with 2.3.11 it should be fixed.\n", "created_at": "2011-05-16 03:59:49", "user": 789801, "id": 1170678}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170679", "text": "_Imported from Lighthouse._\nComment by **Rob Anderton** - 2011-02-16 16:01:56 UTC\n\nI've just run through the tests with 1.1.1 installed and the good news is it now works.\n\nI've attached an updated patch: same as last time although obviously no longer any need to monkey-patch rack. I have bumped the version to 1.1.1 so that people don't inadvertently run with 1.1.0 and kept the query string tests in case Rack ever goes off the rails again.\n", "created_at": "2011-05-16 03:59:51", "user": 789801, "id": 1170679}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170680", "text": "Attachments saved to Gist: http://gist.github.com/971717\n", "created_at": "2011-05-16 03:59:52", "user": 789801, "id": 1170680}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5880\nCreated by **Justin George** - 2010-10-31 06:02:34 UTC\n\nPrior versions of rails used to format the log akin to:\n\nVersions Create (0.3ms)  INSERT INTO \"versions\" (...) VALUES (...)\n\nCurrent version only passes an operation type for 'Load', other operations appear as\n\nSQL (0.3ms)  INSERT INTO \"versions\" (...) VALUES (...)\n\nThe attached patch demonstrates a test for this problem, I think, and perhaps a deeper problem with the logging since it does not seem to be logging create / update / delete at all.\n\nWhere would be the proper place to fix up these issues? I've been looking through the codebase to try to find some moderately single point where these could be solved.\n\nThanks,\n\nJustin\n", "labels": [], "number": 740, "updated_at": "2011-05-21 15:12:08", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904433, "title": "Database operations no longer provide an operation description", "url": "https://api.github.com/repos/rails/rails/issues/740", "created_at": "2011-05-16 03:59:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170681", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:03:47 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 03:59:58", "user": 789801, "id": 1170681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170682", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:20:51 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 03:59:59", "user": 789801, "id": 1170682}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170683", "text": "_Imported from Lighthouse._\nComment by **Justin George** - 2011-02-16 21:47:09 UTC\n\nThis still causes the newrelic_rpm tests to fail, thanks. [state:open]\n", "created_at": "2011-05-16 04:00:00", "user": 789801, "id": 1170683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170685", "text": "Attachments saved to Gist: http://gist.github.com/971718\n", "created_at": "2011-05-16 04:00:02", "user": 789801, "id": 1170685}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5886\nCreated by **Andreas Mayer** - 2010-12-28 03:36:19 UTC\n\nRails 3.0.0: strip_tags marks its result as html_safe but forgets that there may be quotes that must be converted to entities before the string is really HTML safe.\n\n```\nirb(main):007:0> h(\"Strip <i>these</i> \\\"tags\\\"!\")\n=> \"Strip &lt;i&gt;these&lt;/i&gt; &quot;tags&quot;!\"\nirb(main):008:0> strip_tags(\"Strip <i>these</i> \\\"tags\\\"!\")\n=> \"Strip these \\\"tags\\\"!\"\nirb(main):009:0> h(strip_tags(\"Strip <i>these</i> \\\"tags\\\"!\"))\n=> \"Strip these \\\"tags\\\"!\"\n```\n\nExpected results:\n\n```\nh(strip_tags(\"Strip <i>these</i> \\\"tags\\\"!\"))\n-> \"Strip these &quot;tags&quot;!\"\n```\n\nSo either strip_tags should convert the quotes or it shouldn't mark as html_safe.\n", "labels": [], "number": 741, "updated_at": "2012-06-15 01:34:23", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904434, "title": "strip_tags marks as html_safe incorrectly", "url": "https://api.github.com/repos/rails/rails/issues/741", "created_at": "2011-05-16 04:00:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170686", "text": "_Imported from Lighthouse._\nComment by **Andreas Mayer** - 2010-10-29 13:28:18 UTC\n\nWorkaround:\n\n```\nh(String.new(strip_tags(\"Strip <i>these</i> \\\"tags\\\"!\")))\n```\n", "created_at": "2011-05-16 04:00:08", "user": 789801, "id": 1170686}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170687", "text": "_Imported from Lighthouse._\nComment by **Andreas Mayer** - 2010-10-29 14:12:56 UTC\n\nplease review\n", "created_at": "2011-05-16 04:00:09", "user": 789801, "id": 1170687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170688", "text": "_Imported from Lighthouse._\nComment by **Christopher Meiklejohn** - 2011-03-03 05:19:52 UTC\n\nJust verified this patch applies cleanly to master and has the desired effect.\n\n```\n\nree-1.8.7-head :003 > strip_tags(\"<I>HI \\\"YOU\\\" </I>\").html_safe?\n => false \n\n```\n\nCan we get this pulled in?\n", "created_at": "2011-05-16 04:00:11", "user": 789801, "id": 1170688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170689", "text": "_Imported from Lighthouse._\nComment by **Christopher Meiklejohn** - 2011-03-03 05:28:54 UTC\n\nActually, disregard.  \n\nActionView::Helpers::SanitizeHelper specifically states that once the string is html_safe it may still contain unescaped characters.  \n\nTaken from #sanitize:\n\n```\nPlease note that sanitizing user-provided text does not guarantee that the resulting markup is valid (conforming to a document type) or even well-formed. The output may still contain e.g. unescaped ‚Äò<‚Äô, ‚Äò>‚Äô, ‚Äò&‚Äô characters and confuse browsers.\n```\n\nSeems like this isn't an issue, and should be marked invalid.\n", "created_at": "2011-05-16 04:00:12", "user": 789801, "id": 1170689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170690", "text": "_Imported from Lighthouse._\nComment by **Andreas Mayer** - 2011-03-03 22:30:08 UTC\n\n@Christopher: I think it's absolutely OK for strip_tags to return text that is not valid in any form (it only strips tags, and uses a very simple parse for this so no guarantee for anything). However, why has this resulting string to be marked as html_safe? I can't read this in the docs you quoted and it's that what I wrote the patch for.\n\nThis report is the result of a problem that really occured and I think it makes no sense that a non-HTML-safe string is marked as html_safe - it means that you\n1) can the Rails XSS protection using strip_tags, AND\n2) that you always have to write\nh(String.new(strip_tags(original_string)))\nin your views.\n", "created_at": "2011-05-16 04:00:13", "user": 789801, "id": 1170690}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170691", "text": "_Imported from Lighthouse._\nComment by **Andreas Mayer** - 2011-03-03 22:31:17 UTC\n\nTypo above, should be:\n\n...\n1) can BYPASS the Rails ...\n", "created_at": "2011-05-16 04:00:15", "user": 789801, "id": 1170691}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170692", "text": "Attachments saved to Gist: http://gist.github.com/971719\n", "created_at": "2011-05-16 04:00:16", "user": 789801, "id": 1170692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3099970", "text": "Can you reopen this issue, please? It's still relevant for me and I think this wrong behaviour is still present in Rails 3.0.3.\n", "created_at": "2011-12-11 21:55:26", "user": 156167, "id": 3099970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6347798", "text": "I just came across this issue too. It is still present in 3.2.3.\n", "created_at": "2012-06-15 01:34:23", "user": 1156716, "id": 6347798}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5887\nCreated by **Ken Collins** - 2011-02-19 09:28:21 UTC\n\nThe tests for ActiveRecord will not run due to some loading issue under 1.9.2 because it complains about a NameError when loading ActiveSupport. I think this is a general load error and nothing specific with the OrderedHash namespace. If someone could give me some guidance on what might be causing this, I would be happy to investigate and provide a patch. Note, I have confirmed this on all my computers. Initially I thought it was \"just me\". Here is the stack trace I see.\n\n```\n/Users/kencollins/Repositories/rails/activesupport/lib/active_support/ordered_hash.rb:9:in `<module:ActiveSupport>': uninitialized constant ActiveSupport::OrderedHash (NameError)\nfrom /Users/kencollins/Repositories/rails/activesupport/lib/active_support/ordered_hash.rb:8:in `<top (required)>'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom /Users/kencollins/Repositories/rails/activesupport/lib/active_support/core_ext/enumerable.rb:1:in `<top (required)>'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom /Users/kencollins/Repositories/rails/activesupport/lib/active_support/core_ext.rb:8:in `block in <top (required)>'\nfrom /Users/kencollins/Repositories/rails/activesupport/lib/active_support/core_ext.rb:8:in `each'\nfrom /Users/kencollins/Repositories/rails/activesupport/lib/active_support/core_ext.rb:8:in `<top (required)>'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom /Users/kencollins/Repositories/rails/activesupport/lib/active_support.rb:56:in `<top (required)>'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom /Users/kencollins/Repositories/rails/activerecord/lib/active_record.rb:25:in `<top (required)>'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom /Users/kencollins/Repositories/rails/activerecord/test/cases/helper.rb:10:in `<top (required)>'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom <internal:lib/rubygems/custom_require>:29:in `require'\nfrom test/cases/aaa_create_tables_test.rb:2:in `<top (required)>'\nfrom /Users/kencollins/.rvm/gems/ruby-1.9.2-p0@decisiv/gems/rake-0.8.7/lib/rake/rake_test_loader.rb:5:in `load'\nfrom /Users/kencollins/.rvm/gems/ruby-1.9.2-p0@decisiv/gems/rake-0.8.7/lib/rake/rake_test_loader.rb:5:in `block in <main>'\nfrom /Users/kencollins/.rvm/gems/ruby-1.9.2-p0@decisiv/gems/rake-0.8.7/lib/rake/rake_test_loader.rb:5:in `each'\n    from /Users/kencollins/.rvm/gems/ruby-1.9.2-p0@decisiv/gems/rake-0.8.7/lib/rake/rake_test_loader.rb:5:in `<main>'\nrake aborted!\n```\n", "labels": [], "number": 742, "updated_at": "2011-05-21 15:12:08", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904435, "title": "Can not run ActiveRecord tests under 1.9.2", "url": "https://api.github.com/repos/rails/rails/issues/742", "created_at": "2011-05-16 04:00:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170693", "text": "_Imported from Lighthouse._\nComment by **Ken Collins** - 2010-10-29 13:39:28 UTC\n\nI neglected to mention this is 2-3-stable only.\n", "created_at": "2011-05-16 04:00:22", "user": 789801, "id": 1170693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170694", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:02:57 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 04:00:23", "user": 789801, "id": 1170694}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5889\nCreated by **Gaius Centus Novus** - 2010-10-31 06:02:32 UTC\n\nThis backports the patch in #5412 to 2-3-stable.\n", "labels": [], "number": 743, "updated_at": "2011-05-21 15:12:08", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904436, "title": "[Patch] Rails 2.3 schema_format :sql should behave like schema_format :ruby", "url": "https://api.github.com/repos/rails/rails/issues/743", "created_at": "2011-05-16 04:00:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170695", "text": "_Imported from Lighthouse._\nComment by **Gaius Centus Novus** - 2010-10-29 18:13:09 UTC\n\nHmm, can't seem to upload a file here. It's posted as a Gist: http://gist.github.com/654031\n", "created_at": "2011-05-16 04:00:30", "user": 789801, "id": 1170695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170696", "text": "_Imported from Lighthouse._\nComment by **Mick Staugaard** - 2010-10-29 18:55:05 UTC\n\n+1\n", "created_at": "2011-05-16 04:00:32", "user": 789801, "id": 1170696}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170697", "text": "_Imported from Lighthouse._\nComment by **Mick Staugaard** - 2010-10-29 19:04:44 UTC\n\nUploading the patch, which looks good.\n", "created_at": "2011-05-16 04:00:34", "user": 789801, "id": 1170697}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170698", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:02:51 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 04:00:35", "user": 789801, "id": 1170698}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170699", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 16:20:57 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:00:37", "user": 789801, "id": 1170699}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170700", "text": "_Imported from Lighthouse._\nComment by **Brad Langhorst** - 2011-02-16 17:58:29 UTC\n\nI think this should be applied...\n", "created_at": "2011-05-16 04:00:38", "user": 789801, "id": 1170700}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170701", "text": "_Imported from Lighthouse._\nComment by **Brad Langhorst** - 2011-02-16 19:24:15 UTC\n\ni'm attaching a fresh patch that applies to 2.3.9 (use -R)\nthe current one fails to apply because of the ^mysql vs \"mysql\"\n", "created_at": "2011-05-16 04:00:40", "user": 789801, "id": 1170701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170702", "text": "_Imported from Lighthouse._\nComment by **Brad Langhorst** - 2011-04-06 15:36:33 UTC\n\nupdated the patch so that it uses the logic in test:clone_structure for db:structure:load instead of executing the lines in the structure file. test:clone_structure now uses db:structure:load just like test:clone does to db:schema:load\n\nfixed things so that setup loads the environment before trying to use it where necessary (db:reset and db:setup)\n\nadded respect for the PGUSER environment variable, eliminating the -U from dump and load statements (needed for trust and ident authentication)\n\nthis applies to 2.3.11\n", "created_at": "2011-05-16 04:00:42", "user": 789801, "id": 1170702}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170703", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-04-26 10:14:30 UTC\n\n[state:open]\n", "created_at": "2011-05-16 04:00:43", "user": 789801, "id": 1170703}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170704", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-04-26 10:14:59 UTC\n\n+1\n", "created_at": "2011-05-16 04:00:45", "user": 789801, "id": 1170704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170706", "text": "Attachments saved to Gist: http://gist.github.com/971720\n", "created_at": "2011-05-16 04:00:47", "user": 789801, "id": 1170706}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5891\nCreated by **Jarl Friis** - 2011-02-17 07:38:06 UTC\n\nWhen render_to_string :template => ... is called in a controller action and a normal template render later occurs\n\nTests that uses assert_template will fail claiming that the template is ''\n\nSee also ticket #1383 for an earlier similar problem.\n\nJarl\n", "labels": [], "number": 744, "updated_at": "2011-05-21 15:12:08", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904439, "title": "render_to_string :template before normal render causes assert_template failures", "url": "https://api.github.com/repos/rails/rails/issues/744", "created_at": "2011-05-16 04:00:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170707", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2010-10-29 23:00:12 UTC\n\nThe same problem occurs when using `render_to_string :file => ...`\n", "created_at": "2011-05-16 04:00:53", "user": 789801, "id": 1170707}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170708", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-01 17:02:18 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 04:00:54", "user": 789801, "id": 1170708}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170709", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:49:42 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 04:00:56", "user": 789801, "id": 1170709}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170710", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2010-11-09 11:18:18 UTC\n\nAdded tags again after spam.\n", "created_at": "2011-05-16 04:00:57", "user": 789801, "id": 1170710}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170711", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-09 15:57:39 UTC\n\nI am not able to reproduce it. Look at the attached test case.\n\nEven if this ticket is rendered as invalid the attached patch could be merged because it is strengthening the existing test case. I checked and did not find any test covering the scenario mentioned in the patch.\n\n@Jal can you create a small app on github so that I could reproduce the error. Thanks.\n", "created_at": "2011-05-16 04:00:59", "user": 789801, "id": 1170711}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170712", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-09 15:58:39 UTC\n\nnot open to open the attachment. not sure why. uploading again.\n", "created_at": "2011-05-16 04:01:01", "user": 789801, "id": 1170712}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170713", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2010-11-10 13:04:10 UTC\n\nNeeraj, done as you requested:\nhttps://github.com/jarl-dk/bug5891\n\nThis is a simple project created with\n    rails bug5891\n    cd bug5891\n    ./script/generate scaffold notes\n\nNow commit ffa0afcc94f5e9d357ee8d5c5ef94d9a0dd09d7a introduces a reasonable test that assert that the show action uses correct template. This test passes until commit a1ba70ae15a5e114419b2662ecb743f6b4d9a74d) that introduces a render_to_string in the controller that renders some other template (into a string).\n\n@Neeraj, could you please from that create a failing test in rails 2.3-stable. I think the reason that you test (in your patch) does not fail is because both \n    render_to_string :template => \"test/hello_world\"\nand\n    render :template => \"test/hello_world\"\nrenders the same template, try to change `render_to_string` to render some other template\n", "created_at": "2011-05-16 04:01:03", "user": 789801, "id": 1170713}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170714", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-10 14:25:08 UTC\n\n@Jal thank you.\n\nNow I am able to reproduce it.\n\n``` ruby\n  def render_to_string_template_with_template_render\n    #render_to_string :template => \"test/hello_world\"\n    render_to_string :template => \"shared\"\n    render :template => \"test/hello_world\"\n  end\n```\n\nI will look into it.\n", "created_at": "2011-05-16 04:01:04", "user": 789801, "id": 1170714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170715", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-10 15:02:12 UTC\n\nAttached is a patch with test cases. Big thanks to Jal for all the help.\n", "created_at": "2011-05-16 04:01:06", "user": 789801, "id": 1170715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170716", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-10 20:02:51 UTC\n\nAssigning it to Mr. Valim as Josh was last seen in action at LH was in June.\n", "created_at": "2011-05-16 04:01:08", "user": 789801, "id": 1170716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170717", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2010-11-11 09:17:16 UTC\n\n@Neeraj: As I mention in comment 2. The problem also occurs if I use `render_to_string :file =>`\n\nCould you make a test that covers that situation as well.\n", "created_at": "2011-05-16 04:01:11", "user": 789801, "id": 1170717}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170718", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-11 16:13:21 UTC\n\nVerified that this is not an issue with Rails 3.\n\n@Jarl I lost my setup for this ticket. Will add to patch once I hear from Jos√© Valim to see if I am heading in the right direction.\n\nThanks.\n", "created_at": "2011-05-16 04:01:13", "user": 789801, "id": 1170718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170719", "text": "Attachments saved to Gist: http://gist.github.com/971721\n", "created_at": "2011-05-16 04:01:14", "user": 789801, "id": 1170719}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5917\nCreated by **James MacAulay** - 2010-11-04 16:15:12 UTC\n\nThe problem comes from ticket [#3164](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164), which ended up as commit [6361d42](https://github.com/rails/rails/commit/6361d4234ca7f7c2dcb98e6ed34187d2933b56d7).\n\nIts concern was with `AR::B#clone`, but it had the side effect of giving `dup` almost exactly the same behaviour as `clone`, since both methods call `initialize_copy` as a hook in ruby.\n\nAs a result, these are the main changes to duped records in Rails 3.0:\n- `new_record` is set to true\n- dirty tracking is set so that all attributes with non-default values are considered changed\n\nBecause `dup` itself also has a custom implementation which duplicates the attributes hash _after_ `initialize_copy` is called, the behaviour of `clone` to remove the primary key was _not_ carried over to `dup`. This combination of things means that, for example, you can't save a dup of a persisted record:\n\n``` ruby\n    >> Shop.first.dup.save\n    ActiveRecord::RecordNotUnique: Mysql::Error: Duplicate entry '2' for key 1: INSERT INTO `shops` ...\n```\n\nThe error is raised because Active Record looks at `new_record`, sees that it's true, decides to use an INSERT instead of an UPDATE, and the INSERT tries to save a primary key which already exists.\n\nIn Rails 2.x, `clone` was used to create copies intended to be saved as new records, while `dup` was a simpler operation which made a more direct (but still shallow) copy of the object. Both methods would remove the frozen state of the original.\n\nNotes on the patch:\n\nThe provided patch brings `dup` back in line with its old behaviour, while maintaining the improvements made to `clone` which still seem to make sense. One minor improvement to `clone` was made as well, to set its `previous_changes` to an empty hash (since it doesn't make any sense for it to keep the hash from the original). Tests have been added both to establish new behaviour and clarify existing behaviour. Many of the dup tests were just copied from the clone tests with minor changes.\n\nThe weirdest aspect of the patch is that it checks `RUBY_VERSION` in a few places. This is ugly, I know. Basically I wanted people to still be able to override initialize_copy in the same way that the [original ticket](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164) intended, while also providing different behaviour for `clone` and `dup`. I thought an `initialize_dup` method would be a good thing to have, and then found that ruby 1.9 already has it. (Ruby 1.9 will first look for `initialize_clone` or `initialize_dup` as appropriate, and only fall back to `initialize_copy` if the more specific hook is not implemented.) So the checks on `RUBY_VERSION` are there so that `initialize_copy` is run exactly once, followed by `initialize_clone`/`initialize_dup` exactly once, regardless of ruby version. If the checks weren't there, then one method or another would be called twice, dependent on ruby version.\n\nI can think of a few alternate ways to handle this, by sacrificing a little bit of backwards compatibility and/or ruby version compatibility for the sake of cleaner code.\n", "labels": [], "number": 745, "updated_at": "2011-05-21 15:12:08", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904441, "title": "[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour ", "url": "https://api.github.com/repos/rails/rails/issues/745", "created_at": "2011-05-16 04:01:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170720", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2010-11-08 08:27:42 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 04:01:21", "user": 789801, "id": 1170720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170721", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-11-23 01:14:33 UTC\n\n@James, would you mind rebasing this patch from 3-0-stable, and I'll apply it?\n", "created_at": "2011-05-16 04:01:22", "user": 789801, "id": 1170721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170722", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:22 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 04:01:24", "user": 789801, "id": 1170722}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170723", "text": "Attachments saved to Gist: http://gist.github.com/971722\n", "created_at": "2011-05-16 04:01:25", "user": 789801, "id": 1170723}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5920\nCreated by **Steve F** - 2010-11-04 20:17:54 UTC\n\nIn rails238 the associated classes were not loaded until an association method was called.  I'm sure this was a performance improvement in production, but with a class like User that is associated with about 50 other models which have their own nested associations, this significantly slows down requests, since User is reloaded on every request.  I'm wondering if we could create development environment only behavior to lazy load scopes and associations.  My User model takes about 7seconds to load.\n\nHere's how I repro'd the issue in both environments:\n\nI created the following two models:\n\n```\n#user.rb\nclass User < ActiveRecord::Base\n  has_many :documents\nend\n\n#document.rb\nraise \"I'm loading\"\nclass Document < ActiveRecord::Base\nend\n```\n\nI opened up a console:\n\n```\n> User\nRuntimeError: I'm loading ###in rails3 but not rails238\n\n> User.new.documents\nRuntimeError: I'm loading ###in rails 238\n\n```\n", "labels": [], "number": 746, "updated_at": "2011-05-21 15:12:09", "user": 789801, "closed_at": "2011-05-21 15:12:08", "id": 904442, "title": "Rails 3 associations eager load of associated classes significantly slows down development environment", "url": "https://api.github.com/repos/rails/rails/issues/746", "created_at": "2011-05-16 04:01:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170724", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2010-11-08 20:03:26 UTC\n\nWould be nice to look at this for 3.0.2\n", "created_at": "2011-05-16 04:01:31", "user": 789801, "id": 1170724}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170725", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-10 13:35:43 UTC\n\nI am not able to reproduce this error with Rails edge. Is it a Rails 3-0-stable issue?\n", "created_at": "2011-05-16 04:01:33", "user": 789801, "id": 1170725}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170726", "text": "_Imported from Lighthouse._\nComment by **Steve F** - 2010-12-08 20:00:18 UTC\n\nFixed.  Thanks.\n", "created_at": "2011-05-16 04:01:34", "user": 789801, "id": 1170726}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170727", "text": "_Imported from Lighthouse._\nComment by **Cesario** - 2011-02-12 11:51:36 UTC\n\nI think we could mark this bug as invalid as it's not reproducible anymore.\n", "created_at": "2011-05-16 04:01:35", "user": 789801, "id": 1170727}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5922\nCreated by **Andrea Campi** - 2011-04-09 22:41:49 UTC\n\nI may be overlooking something, but:\n\nI have a functional test that uses its own mock controller, which prepares some data and ends up calling a helper.\nAmong other things, I want to test that this helper generates the correct URLs, so I need my routes from config/routes.rb.\nTo be able to invoke actions on my mock controller, I have:\n\n<pre>\n  setup do\n    Rails.application.routes.draw do\n      match '/foo' => \"tags_tree_test/tags_tree_test#index\"\n    end\n  end\n\n  teardown do\n    Rails.application.reload_routes!\n  end\n</pre>\n\n\nThe problem is that #draw first clears existing routes.\nOf course this would just work if I used an existing controller for which I already have a route in config/routes.rb--but I want to run this test in a clean environment.\n\nAm I correct that there's no way to do this?\nDo we want to support this use case?\n", "labels": [], "number": 747, "updated_at": "2011-05-21 15:12:09", "user": 789801, "closed_at": "2011-05-21 15:12:09", "id": 904443, "title": "Functional tests cannot add a route", "url": "https://api.github.com/repos/rails/rails/issues/747", "created_at": "2011-05-16 04:01:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170728", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-05 20:56:36 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:01:42", "user": 789801, "id": 1170728}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170729", "text": "_Imported from Lighthouse._\nComment by **Murray Steele** - 2011-02-17 18:19:29 UTC\n\n[state:open]\n\nIt's certainly still a problem as routes are cleared if we redraw them in our tests and sometimes we want the new route and our application routes.  Not sure what the solution is, but I got around it as follows:\n\n``` ruby\n  def setup\n    routes = Rails.application.routes\n    routes.disable_clear_and_finalize = true\n    routes.clear!\n    Rails.application.routes_reloader.paths.each { |path| load(path) }\n    routes.draw do\n      match \"/test-action\" => \"my_controller_test/test#index\"\n    end\n    routes.disable_clear_and_finalize = false\n    routes.finalize!\n  end\n\n  def teardown\n    Rails.application.reload_routes!\n  end\n```\n\nBut this is clearly upsetting.  Perhaps the with_routing helper from ActionDispatch::Assertions::RoutingAssertions could be updated to work in 2 ways.  The default is to work as it does now, where the routes defined in the block are the only available ones.  The 2nd mode (or new helper) would provide routing that keeps the existing app routes around and adds those in the block to them.  Both modes should reset back to the default app routes at the end of the block.\n", "created_at": "2011-05-16 04:01:43", "user": 789801, "id": 1170729}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5924\nCreated by **Lawrence Pit** - 2011-02-17 06:48:05 UTC\n\nThe create_database method of databases.rake creates a mysql database with default charset utf8 and default collation of utf8_unicode_ci. These values can be overridden by providing a :charset resp. :collation key/values in database.yml.\n\nWhen connecting to the database though by default it will use these values:\n\n``` ruby\n {\"Variable_name\"=>\"character_set_client\", \"Value\"=>\"latin1\"},\n {\"Variable_name\"=>\"character_set_connection\", \"Value\"=>\"latin1\"},\n {\"Variable_name\"=>\"character_set_database\", \"Value\"=>\"utf8\"},\n {\"Variable_name\"=>\"character_set_results\", \"Value\"=>\"latin1\"},\n {\"Variable_name\"=>\"character_set_server\", \"Value\"=>\"utf8\"},\n {\"Variable_name\"=>\"character_set_system\", \"Value\"=>\"utf8\"},\n {\"Variable_name\"=>\"collation_connection\", \"Value\"=>\"latin1_swedish_ci\"}\n {\"Variable_name\"=>\"collation_database\", \"Value\"=>\"utf8_unicode_ci\"},\n {\"Variable_name\"=>\"collation_server\", \"Value\"=>\"utf8_unicode_ci\"}\n```\n\nThe only way to get some control over this by explicitly defining encoding:utf8 in database.yml. You'd then get:\n\n``` ruby\n {\"Variable_name\"=>\"character_set_client\", \"Value\"=>\"utf8\"},\n {\"Variable_name\"=>\"character_set_connection\", \"Value\"=>\"utf8\"},\n {\"Variable_name\"=>\"character_set_database\", \"Value\"=>\"utf8\"},\n {\"Variable_name\"=>\"character_set_results\", \"Value\"=>\"utf8\"},\n {\"Variable_name\"=>\"character_set_server\", \"Value\"=>\"utf8\"},\n {\"Variable_name\"=>\"character_set_system\", \"Value\"=>\"utf8\"},\n {\"Variable_name\"=>\"collation_connection\", \"Value\"=>\"utf8_general_ci\"}\n {\"Variable_name\"=>\"collation_database\", \"Value\"=>\"utf8_unicode_ci\"}, \n {\"Variable_name\"=>\"collation_server\", \"Value\"=>\"utf8_unicode_ci\"}\n```\n\nI.e., the collation_connection value is still using a wrong value in this case (it's value is always the default collation for the character set of the connection, in this case of the utf8 character set).\n\nThe only solution I see is by patching the +configure_connection+ method of the mysql adapter.\n\nThere are two options:\n1. Instead of doing SET NAMES 'utf8' it should be possible to do SET NAMES 'utf8' COLLATE 'utf8_unicode_ci'. For this I propose the +configure_connection+ method should (re)use the :charset and :collation values from database.yml (in favor of :encoding), just like the databases rake tasks do.\n2. Instead of doing SET NAMES 'utf8' it should do SET CHARACTER SET 'utf8'. In that case the collation_connection value will be set to the value of collation_database.\n\nWhich option is preferable?\n", "labels": [], "number": 748, "updated_at": "2014-09-25 21:35:36", "user": 789801, "closed_at": "2011-05-21 15:12:09", "id": 904444, "title": "mysql collation_connection gets wrong value", "url": "https://api.github.com/repos/rails/rails/issues/748", "created_at": "2011-05-16 04:01:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170730", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-06 21:01:38 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:01:51", "user": 789801, "id": 1170730}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170731", "text": "_Imported from Lighthouse._\nComment by **Lawrence Pit** - 2011-02-06 22:46:23 UTC\n\n[state:open] must be fixed.\n", "created_at": "2011-05-16 04:01:52", "user": 789801, "id": 1170731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56887783", "text": "Looks like this was fixed by d5ad2037455a03261d680d143257ba253d8a7112. The connection collation may be specified by `:collation`.\n", "created_at": "2014-09-25 21:35:35", "user": 199, "id": 56887783}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5930\nCreated by **Andrei Kulakov** - 2011-03-09 22:23:14 UTC\n\n``` sh\nrails dbconsole --help\n```\n\nyields\n\n``` sh\nUsage: dbconsole [options] [environment]\n-p, --include-password           Automatically provide the password from database.yml\n--mode [MODE]                Automatically put the sqlite3 database in the specified mode (html, list, line, column).\n-h, --header\n```\n\nbut neather\n\n``` sh\nrails dbconsole -p production\n```\n\nor\n\n``` sh\nrails dbconsole -p test\n```\n\nsets correct rails environment.\n\n``` sh\nrails dbconsole production -p\n```\n\nand\n\n``` sh\nrails dbconsole production -p\n```\n\nset correct environment.\n\n---\n\nI supply patch and hope this is correct way to solve the issue.\n", "labels": [], "number": 749, "updated_at": "2011-05-16 14:57:43", "user": 789801, "closed_at": "2011-05-16 14:57:43", "id": 904445, "title": "dbconsole arguments order mismatch", "url": "https://api.github.com/repos/rails/rails/issues/749", "created_at": "2011-05-16 04:01:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170734", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:51:51 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 04:02:00", "user": 789801, "id": 1170734}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170735", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-11-08 01:51:57 UTC\n\nAutomatic cleanup of spam.\n", "created_at": "2011-05-16 04:02:01", "user": 789801, "id": 1170735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170736", "text": "_Imported from Lighthouse._\nComment by **Vijay Dev** - 2011-02-05 16:51:14 UTC\n\nWon't it be easier to just change the Usage to specify environment first and then the options? :)\n\n@Andrei: Applying the patch fails. Please check it against master.\n", "created_at": "2011-05-16 04:02:02", "user": 789801, "id": 1170736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170737", "text": "_Imported from Lighthouse._\nComment by **Vijay Dev** - 2011-02-05 16:58:37 UTC\n\nIf someone decides, we can change the usage message, attaching the simple patch.\n", "created_at": "2011-05-16 04:02:04", "user": 789801, "id": 1170737}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170738", "text": "_Imported from Lighthouse._\nComment by **Andrei Kulakov** - 2011-02-05 17:33:02 UTC\n\nRenewed patch.\n", "created_at": "2011-05-16 04:02:05", "user": 789801, "id": 1170738}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170739", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-03-09 19:55:12 UTC\n\nI think it is more common to have options first, arguments later, generally speaking. I'd vote for revising the implementation.\n", "created_at": "2011-05-16 04:02:07", "user": 789801, "id": 1170739}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170741", "text": "_Imported from Lighthouse._\nComment by **Andrei Kulakov** - 2011-03-09 20:02:59 UTC\n\nRenewed patch. Maybe there is a better implementation.\n", "created_at": "2011-05-16 04:02:08", "user": 789801, "id": 1170741}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170742", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-03-09 20:17:43 UTC\n\nI have not debugged the issue, but this should easily work correctly with optparse. I mean, no manual option handling if possible, better to use a standard library that solves that.\n\nCould you give it a whirl please?\n", "created_at": "2011-05-16 04:02:10", "user": 789801, "id": 1170742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170743", "text": "_Imported from Lighthouse._\nComment by **Andrei Kulakov** - 2011-03-09 20:56:04 UTC\n\nI couldn't make it load correct database, when I set `ENV['RAILS_ENV']` within block of `opt.on`.\n    opt.on(\"-e\", \"--environment=name\", String,\n            \"Specifies the environment to load database for (test/development/production).\",\n            \"Default: development\") do |env|\n      ENV['RAILS_ENV'] = %w(production development test).detect { |e| e =~ /^#{env}/} || env\n    end\n\nI think manual option handling has something to do with warning in this comment:\n    # Has to set the RAILS_ENV before config/application is required\n    if ARGV.first && !ARGV.first.index(\"-\") && env = ARGV.first\n      ENV['RAILS_ENV'] = %w(production development test).find { |e| e.index(env) } || env\n    end\n\n> Could you give it a whirl please?\n\nApologies for my knowledge of English, could you rephrase that please.\n", "created_at": "2011-05-16 04:02:11", "user": 789801, "id": 1170743}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170744", "text": "_Imported from Lighthouse._\nComment by **Andrei Kulakov** - 2011-03-09 21:52:36 UTC\n\nRegular `rails console` has usage message:\n    Usage: console [environment] [options]\nand similar option handling implementation to `dbconsole`.\n\nBut `rails server` specifies environment through option:\n    -e, --environment=name           Specifies the environment to run this server under (test/development/production).\n                                     Default: development\n", "created_at": "2011-05-16 04:02:13", "user": 789801, "id": 1170744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170745", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-03-09 22:23:14 UTC\n\nYes there are counterexamples, for example find(1) needs the directory first, and then options. But I think the most common interface is options, then arguments.\n\nA pity Rails commands are not consistent there. Maybe something worth taking into account for the next major revision.\n", "created_at": "2011-05-16 04:02:14", "user": 789801, "id": 1170745}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170746", "text": "Attachments saved to Gist: http://gist.github.com/971723\n", "created_at": "2011-05-16 04:02:16", "user": 789801, "id": 1170746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1173816", "text": "Fixed here: 4e873ffcdab0c445e2211db1d27ddd5b349f7913\n\n@josevalim: Can be closed.\n", "created_at": "2011-05-16 14:56:59", "user": 146214, "id": 1173816}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5947\nCreated by **Paul Hieromnimon** - 2010-11-10 22:37:59 UTC\n\nThe case statements in create_database and drop_database in databases.rake do not have an \"else\" block.  Thus when you call a rake task that uses one of these methods and you're using an adapter that's not listed in the proceeding cases, the task will fail silently.  \n\nI've added else statements that throw exceptions in these situations and included a patch.\n", "labels": [], "number": 750, "updated_at": "2011-05-21 15:12:09", "user": 789801, "closed_at": "2011-05-21 15:12:09", "id": 904448, "title": "Rake tasks failing silently when using unsupported adapters", "url": "https://api.github.com/repos/rails/rails/issues/750", "created_at": "2011-05-16 04:02:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170747", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2010-11-11 02:31:12 UTC\n\nShould't it be \"<code>db:create</code>/<code>db:drop</code> not supported\" instead of \"db_create/db_drop not supported\"?\n", "created_at": "2011-05-16 04:02:22", "user": 789801, "id": 1170747}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170748", "text": "_Imported from Lighthouse._\nComment by **Paul Hieromnimon** - 2010-11-17 05:26:00 UTC\n\nRohit,\n\nGood point!  I made the changes you suggested and am attaching an updated patch.  Sorry for the delay - I had to go out of town for the last few days.\n", "created_at": "2011-05-16 04:02:23", "user": 789801, "id": 1170748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170749", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-18 00:00:04 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:02:24", "user": 789801, "id": 1170749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170750", "text": "_Imported from Lighthouse._\nComment by **Paul Hieromnimon** - 2011-02-21 05:56:58 UTC\n\nThis is still a problem on master.  I think that it is very important for Rails (or any software) to be able to provide error messages to the user rather than silently failing.  [state:open]\n", "created_at": "2011-05-16 04:02:26", "user": 789801, "id": 1170750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170751", "text": "Attachments saved to Gist: http://gist.github.com/971724\n", "created_at": "2011-05-16 04:02:27", "user": 789801, "id": 1170751}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5949\nCreated by **Paul Hieromnimon** - 2010-11-10 23:45:40 UTC\n\nTrying to install a plugin from a Git URL will fail silently on systems where Git is not installed.  I added a method to determine whether Git is installed on the system and exit with a warning if it is not.\n\nI want to write a test for this, what's the best place to put it?\n", "labels": [], "number": 751, "updated_at": "2011-05-21 15:12:09", "user": 789801, "closed_at": "2011-05-21 15:12:09", "id": 904449, "title": "script/rails plugin install fails silently ", "url": "https://api.github.com/repos/rails/rails/issues/751", "created_at": "2011-05-16 04:02:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170752", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-11 19:18:06 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:02:33", "user": 789801, "id": 1170752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170753", "text": "_Imported from Lighthouse._\nComment by **Paul Hieromnimon** - 2011-02-21 06:05:16 UTC\n\nStill a problem in master, please commit this patch or otherwise fix this problem as this was a major cause of frustration to developers in our organization.  Thanks in advance. [state:open]\n", "created_at": "2011-05-16 04:02:34", "user": 789801, "id": 1170753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170754", "text": "Attachments saved to Gist: http://gist.github.com/971725\n", "created_at": "2011-05-16 04:02:35", "user": 789801, "id": 1170754}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5960\nCreated by **toby cabot** - 2010-11-12 13:54:27 UTC\n\nIf you do this (which is an easy mistake for a newbie like me to make):\n\nmodule RailsAdmin\n  class History < ActiveRecord::Base\n    scope :most_recent, lambda {|table| where(\"tbl = ?\", table).order(\"updated_at\").last }\n...\n\nyou get this crash:\n\nruby-1.8.7-p302 > RailsAdmin::History.most_recent(\"Team\")\nNoMethodError: undefined method `includes_values' for #<RailsAdmin::History:0xb6a82d78>\n    from {snip}/activemodel-3.0.1/lib/active_model/attribute_methods.rb:364:in`method_missing'\n    from {snip}/activerecord-3.0.1/lib/active_record/attribute_methods.rb:46:in `method_missing'\n    from {snip}/activerecord-3.0.1/lib/active_record/attribute_methods.rb:44:in`send'\n    from {snip}/activerecord-3.0.1/lib/active_record/attribute_methods.rb:44:in `method_missing'\n    from {snip}/activerecord-3.0.1/lib/active_record/relation/spawn_methods.rb:10:in`send'\n    from {snip}/activerecord-3.0.1/lib/active_record/relation/spawn_methods.rb:10:in `merge'\n    from {snip}/activerecord-3.0.1/lib/active_record/relation/spawn_methods.rb:9:in`each'\n    from {snip}/activerecord-3.0.1/lib/active_record/relation/spawn_methods.rb:9:in `merge'\n    from {snip}/activerecord-3.0.1/lib/active_record/named_scope.rb:112:in`most_recent'\n    from (irb):3\n\nThis happens because spawn_methods.merge() is trying to merge a Relation with an ActiveRecord model object (the result of the last() method at the end of the scope).\n", "labels": [], "number": 752, "updated_at": "2011-05-21 15:12:09", "user": 789801, "closed_at": "2011-05-21 15:12:09", "id": 904450, "title": "small enhancement to query scopes", "url": "https://api.github.com/repos/rails/rails/issues/752", "created_at": "2011-05-16 04:02:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170755", "text": "_Imported from Lighthouse._\nComment by **toby cabot** - 2010-11-12 13:58:59 UTC\n\nHere's a small patch that allows this behavior.  It adds a special case to the scope processing (there were already 3 cases so this isn't a big change) that avoids the merge when the result of the scope is a single AR model object.\n", "created_at": "2011-05-16 04:02:41", "user": 789801, "id": 1170755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170756", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-16 00:00:09 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:02:42", "user": 789801, "id": 1170756}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170757", "text": "_Imported from Lighthouse._\nComment by **Jeff Gardner** - 2011-03-08 13:09:01 UTC\n\nI'm still having this issue with rails 3.0.5. There is a patch above, can that be pulled into the main codebase?\n", "created_at": "2011-05-16 04:02:44", "user": 789801, "id": 1170757}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170758", "text": "_Imported from Lighthouse._\nComment by **toby cabot** - 2011-03-15 21:37:06 UTC\n\n[state:open]\n\nThis is a small but, I think, worthwhile change to make Rails scopes a little more forgiving to new users.\n\nI've rebased the patch (5960-2.diff) so it applies cleanly to 7bd70dc.\n", "created_at": "2011-05-16 04:02:45", "user": 789801, "id": 1170758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170759", "text": "_Imported from Lighthouse._\nComment by **greg.silcox (at cumulosity)** - 2011-03-18 15:35:25 UTC\n\nI'm also having this problem in rails 3.0.5. My scope looks a lot like the example given above:\n\nclass StudentSession < ActiveRecord::Base\n  scope :last_updated, lambda { |user_id, group_id| \n    where( :student_id => user_id, :group_id => group_id ).\n    StudentSession.order( :updated_at ).first }\nend\n\nIt seems to only happen when I have a single record that matches.\n", "created_at": "2011-05-16 04:02:46", "user": 789801, "id": 1170759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170760", "text": "Attachments saved to Gist: http://gist.github.com/971726\n", "created_at": "2011-05-16 04:02:48", "user": 789801, "id": 1170760}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5976\nCreated by **Robert Pankowecki** - 2010-12-04 04:17:54 UTC\n\n```\n# app/views/service/search/results.html.erb\n<%= t(\".translate.me\") %>\n```\n\nCase 1:\n\n```\n<%= render :partial => '/service/search/results' %>\n```\n\nleads to calling\n\n```\nI18n.t(\".service/search/results.translate.me\")\n```\n\nwhich I think is wrong\n\nCase 2:\n\n```\n<%= render :partial => 'service/search/results' %>\n```\n\nleads to calling\n\n```\nI18n.t(\"service/search/results.translate.me\")\n```\n\nwhich is ok.\n", "labels": [], "number": 753, "updated_at": "2011-05-21 15:12:09", "user": 789801, "closed_at": "2011-05-21 15:12:09", "id": 904451, "title": "ActionView::Helpers::TranslationHelper#translate call I18n with different arguments depending on render method parameter", "url": "https://api.github.com/repos/rails/rails/issues/753", "created_at": "2011-05-16 04:02:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170761", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-11-16 16:30:12 UTC\n\nI can see the problem. Robert please confirm but i think you meant\n\n.service.search.results.translate.me\n\nnot\n\n.service/search/results.translate.me\n\nWhat would work is t(\"service.search.results.translate.me\")\n\nAdding test and patch.\n", "created_at": "2011-05-16 04:02:54", "user": 789801, "id": 1170761}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170762", "text": "_Imported from Lighthouse._\nComment by **Robert Pankowecki** - 2010-11-16 16:56:03 UTC\n\nYes, that's what I meant. My mistake.\nThanks for the fix.\nThe patch and test look fine for me.\n", "created_at": "2011-05-16 04:02:55", "user": 789801, "id": 1170762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170763", "text": "_Imported from Lighthouse._\nComment by **Jos√© Valim** - 2010-11-17 07:27:30 UTC\n\nHey, thanks for the patch! However, it is only half of the solution! If you are rendering the same files and they are having different @virtual_path, this means we have a another bigger problem to solve.\n\nI will take a look at this later, apply your patch and fix the counter-part.\n", "created_at": "2011-05-16 04:02:56", "user": 789801, "id": 1170763}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170764", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:22 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 04:02:58", "user": 789801, "id": 1170764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170765", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 04:02:59", "user": 789801, "id": 1170765}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170766", "text": "Attachments saved to Gist: http://gist.github.com/971727\n", "created_at": "2011-05-16 04:03:00", "user": 789801, "id": 1170766}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/5983\nCreated by **Szymon Nowak** - 2011-02-19 09:28:21 UTC\n\nThere's some strange problem with find_or_create_by on has_many associations and protected attributes:\nuser.posts.find_or_create_by_some_protected_attribute doesn't assign \"some_protected_attribute\", but user.posts.find_or_initialize_by_some_protected_attribute does.\n\nI'm attaching a failing test case.\n", "labels": [], "number": 754, "updated_at": "2011-05-21 15:12:09", "user": 789801, "closed_at": "2011-05-21 15:12:09", "id": 904452, "title": "find_or_create_by doesn't work with protected attributes", "url": "https://api.github.com/repos/rails/rails/issues/754", "created_at": "2011-05-16 04:03:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170767", "text": "_Imported from Lighthouse._\nComment by **caseyf** - 2010-11-16 18:27:17 UTC\n\nI'm having this problem as well. No luck tracking it down so far - ActiveRecords's association internals are a mystery to me.\n", "created_at": "2011-05-16 04:03:06", "user": 789801, "id": 1170767}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170768", "text": "_Imported from Lighthouse._\nComment by **caseyf** - 2010-11-16 19:05:00 UTC\n\nIt looks like find_or_create through an association calls create_by with a Hash:\nhttps://github.com/rails/rails/commit/f967b352d2abdb88b704266cdb06b53f7d8ab401#diff-1\n\n...and attributes are protected when creating from Hashes:\nhttps://github.com/rails/rails/commit/f967b352d2abdb88b704266cdb06b53f7d8ab401#diff-1\n", "created_at": "2011-05-16 04:03:08", "user": 789801, "id": 1170768}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170769", "text": "_Imported from Lighthouse._\nComment by **caseyf** - 2010-11-16 19:12:38 UTC\n\nack. Ignore me, I'm looking in the wrong place.\n", "created_at": "2011-05-16 04:03:09", "user": 789801, "id": 1170769}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170770", "text": "_Imported from Lighthouse._\nComment by **Szymon Nowak** - 2010-11-16 20:10:02 UTC\n\nI'll take a look at it over the weekend, but the workaround that I'm using for now is find_or_initialize_by + save.\n", "created_at": "2011-05-16 04:03:10", "user": 789801, "id": 1170770}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170771", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2010-11-19 13:27:38 UTC\n\nI don't think that it is a bug (for 2.3.10 and 3.x). Here: https://github.com/rails/rails/blob/v2.3.10/activerecord/lib/active_record/base.rb#L293 says that  protected attributes won't be set unless they are given in a block.\n\nAlso the same says about find_or_initialize_ so if it works for such methods it is a bug.\n", "created_at": "2011-05-16 04:03:12", "user": 789801, "id": 1170771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170772", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2010-11-19 13:50:02 UTC\n\nAlso I wrote a test for 2.3.10 and 3.0.3 for find_or_initialize_ and it also fails as it should be. So I don't think that there is any bug.\n", "created_at": "2011-05-16 04:03:13", "user": 789801, "id": 1170772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170773", "text": "_Imported from Lighthouse._\nComment by **caseyf** - 2010-11-19 13:56:51 UTC\n\nThanks 2kan. \n\n(This is a change in behavior from 2.2.x)\n", "created_at": "2011-05-16 04:03:14", "user": 789801, "id": 1170773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170774", "text": "_Imported from Lighthouse._\nComment by **Szymon Nowak** - 2010-11-20 15:15:08 UTC\n\nFirst of all it's not a change in behavior from 2.2.x, but from 2.3.5 - I migrated my app from 2.3.5 directly to 2.3.10 and it stopped working.\n\nSecond thing is that find_or_initialize_by_id works fine. Here's code from my app:\n\n``` ruby\nr = current_user.relationships.find_or_initialize_by_contact_id(1)\n=> #<Relationship id: nil, user_id: 15, contact_id: 1, blocked: false, created_at: nil, updated_at: nil, inverse_id: nil, state: \"unapproved\", requested_at: nil, approved_at: nil>\nr.save\n=> true\n\nr = current_user.relationships.find_or_create_by_contact_id(1)\nWARNING: Can't mass-assign these protected attributes: contact_id\n=> #<Relationship id: nil, user_id: 15, contact_id: nil, blocked: false, created_at: nil, updated_at: nil, inverse_id: nil, state: \"unapproved\", requested_at: nil, approved_at: nil>\n```\n\nso the behavior is inconsistent.\n", "created_at": "2011-05-16 04:03:16", "user": 789801, "id": 1170774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170775", "text": "_Imported from Lighthouse._\nComment by **Szymon Nowak** - 2010-11-20 15:58:24 UTC\n\n@2kan: thanks for the link! It turns out that the bug is actually that find_or_initialize_by works with protected attributes in 2.3.10, although it shouldn't :)\n", "created_at": "2011-05-16 04:03:17", "user": 789801, "id": 1170775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170776", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2010-11-20 16:07:53 UTC\n\n@Szymon Nowak I will check again how find_or_initialize_by works in 2.3.10 to be sure that there is a bug and gonna try to patch it so.\n", "created_at": "2011-05-16 04:03:18", "user": 789801, "id": 1170776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170777", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2010-11-20 20:52:24 UTC\n\nHm! Look here: https://github.com/rails/rails/blob/v2.3.10/activerecord/test/cases/finder_test.rb#L849 Funny, isn't it? I think that it is a bug, I think that find_or_initialize_by should work as find_or_create_by and as it says in docs, shouldn't it?\n\nBut look here: https://github.com/rails/rails/blob/v2.3.10/activerecord/test/cases/finder_test.rb#L889 \n\nIsn't it messy? I was really surprised reading the code and tests. I can write any patch doing something with it but i have no idea how _must_ it work. Maybe we just should not touch this.\n", "created_at": "2011-05-16 04:03:20", "user": 789801, "id": 1170777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170778", "text": "_Imported from Lighthouse._\nComment by **Szymon Nowak** - 2010-11-21 21:39:49 UTC\n\nOk, so to sum it all up:\n\nThe docs for both methods (https://github.com/rails/rails/blob/v2.3.10/activerecord/lib/active_record/base.rb#L294 and https://github.com/rails/rails/blob/v2.3.10/activerecord/lib/active_record/base.rb#L305) state that:\n    Protected attributes won't be set unless they are given in a block.\n\nHowever, in the tests ((https://github.com/rails/rails/blob/v2.3.10/activerecord/test/cases/finder_test.rb#L849) the behavior is different:\n    test_find_or_initialize_from_one_attribute_should_set_attribute_even_when_protected\n    test_find_or_create_from_one_attribute_should_set_attribute_even_when_protected\n\nThe other thing is how both methods work with has_many associations:\n\n``` ruby\nr = current_user.relationships.find_or_initialize_by_contact_id(1)\n=> #<Relationship id: nil, user_id: 15, contact_id: 1>\nr.save\n=> true\n\nr = current_user.relationships.find_or_create_by_contact_id(1)\nWARNING: Can't mass-assign these protected attributes: contact_id\n=> #<Relationship id: nil, user_id: 15, contact_id: nil>\n```\n\nWhile all the links above point to files in 2.3.10 release, it seems that the same mess is in 3.0.2 release. I hope that someone from the Rails core team can decide how it should actually work :)\n", "created_at": "2011-05-16 04:03:21", "user": 789801, "id": 1170778}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170779", "text": "Attachments saved to Gist: http://gist.github.com/971728\n", "created_at": "2011-05-16 04:03:23", "user": 789801, "id": 1170779}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6011\nCreated by **Vitalii Khustochka** - 2010-11-19 03:30:24 UTC\n\nMethod reorder that existed before was removed in master and deprecated in 3.0.3 (https://github.com/rails/rails/commit/e0b76d6151821527f16b3f163abde3ebea1b2a50). Instead must be used except(:order).order(...)\n\nWhile this works in regular relations it is not working in scopes (does not override the default scope).\n\nE.g. if class _DeveloperOrderedBySalary_ has _default_scope :order => 'salary DESC'_ and named scope\n\n``` ruby\nscope :reordered_by_name, except(:order).order('name DESC')\n```\n\nI expect _DeveloperOrderedBySalary.reordered_by_name.all_ to return developers reordered by name while it does not. The test I once created for this was removed. Instead there is a test named _test_named_scope_appends_default_ but I think this name is incorrect as soon as it really tests that ordering defined in named scope is appended to default scope's ordering (i.e. :order => 'salary DESC, name DESC' is expected).\n\nUnfortunately I have no idea how to fix this but I'm attaching a patch with test which I consider appropriate (now failing).\n", "labels": [], "number": 755, "updated_at": "2011-05-21 15:12:09", "user": 789801, "closed_at": "2011-05-21 15:12:09", "id": 904454, "title": "except(:order).order(...) is not working in scopes", "url": "https://api.github.com/repos/rails/rails/issues/755", "created_at": "2011-05-16 04:03:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170780", "text": "_Imported from Lighthouse._\nComment by **Vitalii Khustochka** - 2010-11-19 03:33:59 UTC\n\nTypo in the description: \"Instead there is a test named _test_named_scope_overwrites_default_ but I think this name is incorrect ...\"\n\n_test_named_scope_appends_default_ is the new name I gave it in the patch\n", "created_at": "2011-05-16 04:03:28", "user": 789801, "id": 1170780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170781", "text": "_Imported from Lighthouse._\nComment by **Vitalii Khustochka** - 2010-11-19 05:11:14 UTC\n\nLooks like this happens because _reorder_flag_ was removed. Named scope defined with except(:order).order(xxx) now has no difference with the one defined with order(xxx). So when merging order_value they are merged like they were defined by regular _order_ i.e. are being appended to default_scope's order instead of overwriting them.\n\nWhen a chain of methods is run on the relation except works correctly because it effectively removes the current order_value of this very relation, but in the scope it does not.\n", "created_at": "2011-05-16 04:03:30", "user": 789801, "id": 1170781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170782", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2010-12-23 01:43:26 UTC\n\nIt's not because _reorder_flag_ was removed but yes it is because of how _except_ and _merge_ are working now. I gonna attach a patch (against edge) tomorrow, I want to find the best way to fix it.\n", "created_at": "2011-05-16 04:03:31", "user": 789801, "id": 1170782}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170783", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-24 00:00:12 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:03:33", "user": 789801, "id": 1170783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170784", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-03-24 11:16:46 UTC\n\n[state:open]\n", "created_at": "2011-05-16 04:03:34", "user": 789801, "id": 1170784}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170785", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-03-24 15:03:35 UTC\n\n2kan have you tried it with the latest master code?. Is still an issue?\n", "created_at": "2011-05-16 04:03:36", "user": 789801, "id": 1170785}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170786", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-03-24 18:43:48 UTC\n\nSantiago, yes it is. (Just checked). Somehow (not sure) it is because of: https://rails.lighthouseapp.com/projects/8994/tickets/6290-patch-except-doesnt-work-in-different-scopes#ticket-6290-12\n\nAnd because of how the default_scope applies (I think I've figured out why I doesn't work).\n", "created_at": "2011-05-16 04:03:37", "user": 789801, "id": 1170786}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170787", "text": "Attachments saved to Gist: http://gist.github.com/971729\n", "created_at": "2011-05-16 04:03:39", "user": 789801, "id": 1170787}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6012\nCreated by **Nic Benders** - 2011-03-03 09:20:20 UTC\n\nIn Rails 3.0.1 (ARel 1.0.1) calling \"Account.first\" generates this SQL:\n\n  SELECT account.\\* FROM account FETCH FIRST 1 ROWS ONLY\n\nAfter upgrading to Rails 3.0.3 (ARel 2.0.4) it generates this:\n\n  SELECT account.\\* FROM account LIMIT\n\nWhich is illegal for DB2, and throws an error:\n\n  ActiveRecord::StatementInvalid: RuntimeError: Failed to execute statement: [IBM][CLI Driver][DB2/LINUXX8664] SQL0104N  An unexpected token \"LIMIT\" was found following \"\".  Expected tokens may include:  \"FETCH FIRST <n> ROWS ONLY\".  SQLSTATE=42601 SQLCODE=-104: SELECT account.\\* FROM account LIMIT 1\n\nIn both cases the ibm_db gem version 2.5.5 was used.  I can provide detailed database.yml, model files, and the Gemfile if it would be helpful.\n", "labels": [], "number": 756, "updated_at": "2011-05-21 15:12:10", "user": 789801, "closed_at": "2011-05-21 15:12:10", "id": 904455, "title": "Incorrect SQL generation for DB2 in Rails 3.0.3", "url": "https://api.github.com/repos/rails/rails/issues/756", "created_at": "2011-05-16 04:03:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170788", "text": "_Imported from Lighthouse._\nComment by **Bruno Cardoso** - 2010-11-22 16:29:45 UTC\n\nI have the same problem with Oracle. It generates a query with \"LIMIT X\" when I try to use a belongs_to association.\n\nThis is definitely a problem with rails 3.0.3. ActiveRecord is assuming we are using a BD with \"LIMIT\" command.\n", "created_at": "2011-05-16 04:03:45", "user": 789801, "id": 1170788}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170789", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-23 00:00:16 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:03:46", "user": 789801, "id": 1170789}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170791", "text": "_Imported from Lighthouse._\nComment by **Anton Gerbracht** - 2011-02-25 15:54:42 UTC\n\nIssue still exists in Rails 3.0.4\n\n[state:open]\n", "created_at": "2011-05-16 04:03:47", "user": 789801, "id": 1170791}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170792", "text": "_Imported from Lighthouse._\nComment by **Taylor Brockman** - 2011-02-28 17:36:40 UTC\n\nConfirmed that activerecord 3.0.2 - 3.0.4 break with the same problem above.\n\nWorked around the issue by downgrading activerecord to 3.0.1.\n\nsudo gem install activerecord --version=3.0.1\n\ngem 'activerecord', '= 3.0.1'\n\n## 2011-Feb-28 ibm_db limit workaround, broken w/ ibm_db = 2.5.6 and active_record >= 3.0.2\n", "created_at": "2011-05-16 04:03:49", "user": 789801, "id": 1170792}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6013\nCreated by **Sven Fuchs** - 2011-01-18 08:52:33 UTC\n\nIn I18n we've shipped a String#% patch for a number of versions which backports 1.9's string interpolation syntax to 1.8. At some point Rails started relying on this behavior so it seems appropriate to move it to ActiveSupport (where people most likely will look for such extensions). \n\nIn I18n itself we're going to not rely on this patch anymore but implement our own version of I18n.interpolate, mostly in order to get rid of warnings (and in debug mode exceptions) that are raised when optional interpolation variables are passed. (Optional interpolation variables are something we absolutely need in I18n but seems to be seen as a wrong usage of sprintf by Ruby core.)\n\nHere's a patch that moves this functionality to ActiveSupport:\n\nhttps://github.com/svenfuchs/rails/commit/85a05662fe7e0b06e9c7cd93cae9c3721058d879\n\nI'm not really sure about how to properly attribute Masao's work in a case like this. What exactly should be there? (I've just linked the original work for now.)\n", "labels": [], "number": 757, "updated_at": "2011-05-21 15:12:10", "user": 789801, "closed_at": "2011-05-21 15:12:10", "id": 904456, "title": "Move 1.9 string interpolation syntax backport from I18n to ActiveSupport", "url": "https://api.github.com/repos/rails/rails/issues/757", "created_at": "2011-05-16 04:03:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170793", "text": "_Imported from Lighthouse._\nComment by **Andr√©s Mej√≠a** - 2010-11-22 17:49:52 UTC\n\n+1 for this. I get those I18n warnings all around when running Rails tests. Would love to see them gone.\n", "created_at": "2011-05-16 04:03:56", "user": 789801, "id": 1170793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170794", "text": "_Imported from Lighthouse._\nComment by **Jesse Storimer** - 2011-01-13 12:55:17 UTC\n\n+1. I get the same warnings.\n", "created_at": "2011-05-16 04:03:57", "user": 789801, "id": 1170794}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170795", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:23 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 04:03:58", "user": 789801, "id": 1170795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170796", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 04:03:59", "user": 789801, "id": 1170796}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6026\nCreated by **Doug Mayer** - 2010-11-21 09:38:57 UTC\n\nWhen you set the response_body to a proc, it will be called twice: first during the normal execution, and a second time by `Rack::Response#close`. Martin Gogov noted this in #4554 and I believe this is related (but not the same issue).\n\nThe relevant `Rack::Response` code is (http://github.com/rack/rack/blob/master/lib/rack/response.rb#L102-104):\n    def close\n      body.close if body.respond_to?(:close)\n    end\n\nThis patch just adds a `close` method to `ActionDispatch::Response` which will delegate it to `@body` instead of `#body`, avoiding the double call of the proc.\n\nPutting a breakpoint inside my proc shows the following stacktraces... **The first time:**\n\n(rdb:4) w\n--> #0 ActionDispatch::Response.each \n       at line /Users/doug/.rvm/gems/ruby-1.9.2-p0/gems/actionpack-3.0.3/lib/action_dispatch/http/response.rb:35\n    #1 ActionDispatch::Response.each \n       at line /Users/doug/.rvm/gems/ruby-1.9.2-p0/gems/actionpack-3.0.3/lib/action_dispatch/http/response.rb:152\n    #2 Rack::Handler::WEBrick.service(req#WEBrick::HTTPRequest, res#WEBrick::HTTPResponse,...) \n       at line /Users/doug/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/handler/webrick.rb:64\n    #3 WEBrick::HTTPServer.service(req#WEBrick::HTTPRequest, res#WEBrick::HTTPResponse,...) \n       at line /Users/doug/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/webrick/httpserver.rb:111\n    #4 WEBrick::HTTPServer.run(sock#TCPSocket) \n       at line /Users/doug/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/webrick/httpserver.rb:70\n    #5 at line /Users/doug/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/webrick/server.rb:183\n\n**And the second time:**\n\n(rdb:4) w\n--> #0 ActionDispatch::Response.each \n       at line /Users/doug/.rvm/gems/ruby-1.9.2-p0/gems/actionpack-3.0.3/lib/action_dispatch/http/response.rb:35\n    #1 ActionDispatch::Response.each \n       at line /Users/doug/.rvm/gems/ruby-1.9.2-p0/gems/actionpack-3.0.3/lib/action_dispatch/http/response.rb:152\n    #2 ActionDispatch::Response.body \n       at line /Users/doug/.rvm/gems/ruby-1.9.2-p0/gems/actionpack-3.0.3/lib/action_dispatch/http/response.rb:101\n    #3 Rack::Response.close \n       at line /Users/doug/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/response.rb:102\n    #4 Rack::Handler::WEBrick.service(req#WEBrick::HTTPRequest, res#WEBrick::HTTPResponse,...) \n       at line /Users/doug/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/handler/webrick.rb:68\n    #5 WEBrick::HTTPServer.service(req#WEBrick::HTTPRequest, res#WEBrick::HTTPResponse,...) \n       at line /Users/doug/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/webrick/httpserver.rb:111\n    #6 WEBrick::HTTPServer.run(sock#TCPSocket) \n       at line /Users/doug/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/webrick/httpserver.rb:70\n    #7 at line /Users/doug/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/webrick/server.rb:183\n", "labels": [], "number": 758, "updated_at": "2011-05-21 15:12:10", "user": 789801, "closed_at": "2011-05-21 15:12:10", "id": 904457, "title": "[PATCH] response_body proc is called twice", "url": "https://api.github.com/repos/rails/rails/issues/758", "created_at": "2011-05-16 04:04:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170797", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-22 00:00:18 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:04:07", "user": 789801, "id": 1170797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170798", "text": "_Imported from Lighthouse._\nComment by **Doug Mayer** - 2011-02-22 01:37:41 UTC\n\nPlease don't close this! It is still a relevant issue.\n", "created_at": "2011-05-16 04:04:08", "user": 789801, "id": 1170798}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170799", "text": "_Imported from Lighthouse._\nComment by **naruse** - 2011-03-30 02:35:19 UTC\n\nI also hit this problem; this is still happen.\n", "created_at": "2011-05-16 04:04:10", "user": 789801, "id": 1170799}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170800", "text": "_Imported from Lighthouse._\nComment by **Doug Mayer** - 2011-04-01 15:11:34 UTC\n\n@naruse: Are you able to try out my patch at all? I'm not sure how to get more traction on having it applied. :-/\n", "created_at": "2011-05-16 04:04:12", "user": 789801, "id": 1170800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170801", "text": "_Imported from Lighthouse._\nComment by **naruse** - 2011-04-05 01:01:29 UTC\n\n@mayer: I confirmed your patch fixes this problem, thanks.\n\nSo I want Rails 3.0.6 merge this patch.\n", "created_at": "2011-05-16 04:04:13", "user": 789801, "id": 1170801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170802", "text": "_Imported from Lighthouse._\nComment by **Doug Mayer** - 2011-04-20 03:21:02 UTC\n\nIt looks like this may be your domain, Santiago. Any chance we could get it in Rails proper soon?\n", "created_at": "2011-05-16 04:04:15", "user": 789801, "id": 1170802}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170803", "text": "_Imported from Lighthouse._\nComment by **Mark Borcherding** - 2011-04-20 03:24:41 UTC\n\nThe patch worked for me as well.\n", "created_at": "2011-05-16 04:04:17", "user": 789801, "id": 1170803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170804", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-05-04 18:45:33 UTC\n\nHey guys can you provide a test with the fix. I will merge it. Thanks\n", "created_at": "2011-05-16 04:04:19", "user": 789801, "id": 1170804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170805", "text": "Attachments saved to Gist: http://gist.github.com/971730\n", "created_at": "2011-05-16 04:04:20", "user": 789801, "id": 1170805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210203", "text": "why is my name here? :O the \"naruse\" one :P\n", "created_at": "2011-05-20 14:12:25", "user": 3997, "id": 1210203}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6029\nCreated by **Xac** - 2011-02-19 09:28:23 UTC\n\nThere seem to be issues with Date.yesterday and Date.today:\n\nruby-1.8.7-p302 > Rails.version #=> \"3.0.3\" \nruby-1.8.7-p302 > Date.today #=> Sun, 21 Nov 2010 \nruby-1.8.7-p302 > Date.yesterday #=> Sun, 21 Nov 2010 \nruby-1.8.7-p302 > Date.today == Date.yesterday #=> true \nruby-1.8.7-p302 > Date.today.today? #=> false\nruby-1.8.7-p302 > Date.tomorrow #=> Tue, 23 Nov 2010\nruby-1.8.7-p302 > Time.now #=> Sun Nov 21 22:00:13 -0500 2010 \nruby-1.8.7-p302 > Time.now.utc #=> Mon Nov 22 03:00:20 UTC 2010\n", "labels": [], "number": 759, "updated_at": "2013-12-17 03:00:55", "user": 789801, "closed_at": "2011-05-21 15:12:10", "id": 904459, "title": "ActiveSupport Date class methods seem to be buggy", "url": "https://api.github.com/repos/rails/rails/issues/759", "created_at": "2011-05-16 04:04:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170806", "text": "_Imported from Lighthouse._\nComment by **Utkarsh Kukreti** - 2010-11-22 18:50:21 UTC\n\nI'm getting\n\n```\n> Date.today == Date.tomorrow\n=> true\n> Time.now\n=> 2010-11-23 00:19:52 +0530\n> Time.now.utc\n=> 2010-11-22 18:49:54 UTC\n```\n\nDate.tomorrow and Date.yesterday are not taking the local timezone into consideration, and are using the UTC offsets.\n", "created_at": "2011-05-16 04:04:26", "user": 789801, "id": 1170806}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170807", "text": "_Imported from Lighthouse._\nComment by **agmcleod** - 2010-11-30 04:13:39 UTC\n\nI'm having issues where Date.today isn't even resolving...\n\n``` ruby\naaronmcleod@MacBook-Pro $ irb\nruby-1.9.2-p0 > require 'active_support'\n => true \nruby-1.9.2-p0 > Date.today\nNoMethodError: undefined method `today' for Date:Class\n    from (irb):2\n    from /Users/aaronmcleod/.rvm/rubies/ruby-1.9.2-p0/bin/irb:17:in `<main>'\nruby-1.9.2-p0 > exit\naaronmcleod@MacBook-Pro $ ruby -v\nruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-darwin10.4.0]\naaronmcleod@MacBook-Pro $ rails -v\nRails 3.0.3\n```\n", "created_at": "2011-05-16 04:04:28", "user": 789801, "id": 1170807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170808", "text": "_Imported from Lighthouse._\nComment by **Xac** - 2010-11-30 05:35:15 UTC\n\nActiveSupport is broken down into pieces that need to be individually required now.\n\nTry \"require 'active_support/core_ext/date'\" for date helpers, or \"require 'activesupport/all'\" for the old functionality.\n", "created_at": "2011-05-16 04:04:29", "user": 789801, "id": 1170808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170809", "text": "_Imported from Lighthouse._\nComment by **agmcleod** - 2010-12-01 00:30:30 UTC\n\nAh alright, I have it working now. I seem to be getting the correct date & times. Note that I am in eastern standard time.\n", "created_at": "2011-05-16 04:04:31", "user": 789801, "id": 1170809}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170810", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-01-02 01:06:31 UTC\n\nXac, Utkarsh: is this an issue of bad documentation of Date.yesterday and Date.tomorrow or bugs in the methods themselves?\n", "created_at": "2011-05-16 04:04:32", "user": 789801, "id": 1170810}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1423011", "text": "Why was this closed?  It's still present in 3.1 rc3.\n\ne: and rc4  \n", "created_at": "2011-06-23 04:40:59", "user": 151337, "id": 1423011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1423239", "text": "Working fine for me in 3.1 rc4, in Ruby 1.9.2\n\n```\nruby-1.9.2-p180 > Rails.version # => \"3.1.0.rc4\" \nruby-1.9.2-p180 > Date.today # => Thu, 23 Jun 2011 \nruby-1.9.2-p180 > Date.yesterday # => Wed, 22 Jun 2011 \nruby-1.9.2-p180 > Date.today == Date.yesterday # => false \nruby-1.9.2-p180 > Date.today.today? # => true \nruby-1.9.2-p180 > Date.tomorrow # => Fri, 24 Jun 2011 \nruby-1.9.2-p180 > Time.now # => 2011-06-23 15:45:33 +1000 \nruby-1.9.2-p180 > Time.now.utc # => 2011-06-23 05:45:36 UTC\n```\n", "created_at": "2011-06-23 05:49:00", "user": 64073, "id": 1423239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1423495", "text": "The reason for this behaviour is that Date.today and Date.tomorrow rely on Date.current, rather than Date.today\n\n```\ndef current\n  ::Time.zone ? ::Time.zone.today : ::Date.today\nend\n```\n\nThose experiencing this issue will find their Time.zone being set to a different time zone than their server (probably UTC). This issue will then manifest when the date in UTC is different than the date in the server's time zone.\n\nA workaround would be to use Date.current instead.\n", "created_at": "2011-06-23 07:01:14", "user": 131752, "id": 1423495}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1540966", "text": "+1\n`$ ruby -v\nruby 1.9.2p180 (2011-02-18 revision 30909) [i686-linux]\n$ rails -v\nRails 3.0.9\n$ date\nSun Jul 10 01:17:36 EEST 2011\n$ rails c\nLoading development environment (Rails 3.0.9)\n\n> > Date.today == Date.tomorrow\n> > true\n> > Date.today.today?\n> > false\n> > \n> > Date.today\n> > Sun, 10 Jul 2011\n> > Date.tomorrow\n> > Sun, 10 Jul 2011\n> > Time.now\n> > 2011-07-10 01:21:03 +0300\n> > Time.now.utc\n> > 2011-07-09 22:21:10 UTC\n> > `\n", "created_at": "2011-07-10 06:54:13", "user": 321145, "id": 1540966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639100", "text": "There are two issues here:\n\n#1) ActiveSupport::Date  current method has a misleading conditional.  Time.zone is always returned because config.time_zone is set by default on a project.\n\n#2) ActiveSupport::Date does not override the Date.today method.  This means that the core ruby library's .today method is called which may be based off of a different time zone than what's set in config.time_zone.\n\nSubmitting a pull request.\n", "created_at": "2011-07-23 23:07:52", "user": 863132, "id": 1639100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639146", "text": "https://github.com/rails/rails/pull/2225\n", "created_at": "2011-07-23 23:22:38", "user": 863132, "id": 1639146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1731202", "text": "Sorry, the issue was closed automatically by GitHub after closing a related pull request.\n\nA Rails application is expected to use Date.current and friends. As the AS guide throughly documents, in general date methods are based on Date.current (also Time.current, etc.).\n", "created_at": "2011-08-04 21:51:26", "user": 3387, "id": 1731202}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6034\nCreated by **Robert Pankowecki** - 2011-02-22 08:32:34 UTC\n\nCalling\n\n```\nMss::Units::Absence::Search.human_attribute_name(:x)\n```\n\nseeks for translation key:\n\n```\nactivemodel.attributes.mss/units/absence/search.x\n```\n\non Rails 3.0.1\n\nbut for\n\n```\nactivemodel.attributes.mss.units.absence.search.x\n```\n\non Rails 3.0.2 and 3.0.3\n\nThis is due to changes in :\nGEM_HOME/gems/activemodel-3.0.2/lib/active_model/translation.rb\n\nThe changelog states that:\n\n```\n*Rails 3.0.2 (November 15, 2010)*\n\n* No changes\n```\n\nso i believe that it was not intentional.\n", "labels": [], "number": 760, "updated_at": "2011-05-21 15:12:10", "user": 789801, "closed_at": "2011-05-21 15:12:10", "id": 904460, "title": "human_attribute_name scopes translations differently for nested classes since rails 3.0.2", "url": "https://api.github.com/repos/rails/rails/issues/760", "created_at": "2011-05-16 04:04:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170811", "text": "_Imported from Lighthouse._\nComment by **Dalibor Filus** - 2010-12-01 12:05:44 UTC\n\nI was just searching for this bug too and you gave me the answer.\nI'm running Rails 3.0.3.\n\nProblem is.. what happens now if i corrent my locales to this new design, then it will be considered a bug and \"fixed\"?\n:(\n", "created_at": "2011-05-16 04:04:39", "user": 789801, "id": 1170811}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170812", "text": "_Imported from Lighthouse._\nComment by **Bogu≈õ Tarnowski** - 2010-12-01 13:44:31 UTC\n\nto fix this bug try redesign locale files to \nstructure for namespaced models\n\n### Example\n\nclass **Hotels::Period**\nconfig/locales/pl/models/hotels/period.yml\n\n``` yml\npl:\n  activerecord:\n    models:\n      hotels:\n        period: 'okres'\n    attributes:\n      hotels:\n        period:\n          name:                  'nazwa'\n          start_date:            'poczƒÖtek'\n          end_date:              'koniec'\n          days:                  'dni'\n          discount:              'zni≈ºka'\n```\n", "created_at": "2011-05-16 04:04:40", "user": 789801, "id": 1170812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170813", "text": "_Imported from Lighthouse._\nComment by **Robert Pankowecki** - 2010-12-01 14:03:25 UTC\n\nMy temporary workaround is :\n\n```\nActiveModel::Name.class_eval do\n def i18n_key\n  @fixed_i18n_key ||= ActiveSupport::Inflector.underscore(self).to_sym\n end\nend\n```\n", "created_at": "2011-05-16 04:04:42", "user": 789801, "id": 1170813}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170814", "text": "_Imported from Lighthouse._\nComment by **Bogu≈õ Tarnowski** - 2010-12-01 14:17:28 UTC\n\nnice work ;)\ni`ve another interesting problem with i18n on forms helpers\n\n``` haml\n  = form_for(@period, :url => period_path(@period), :html => { :multipart => true, :method => :put }) do |f|\n    = f.label :name, :class => 'form-label size-60 fl-space2'\n```\n\nautotranslate :name doesn't work with namespaced models :(\n", "created_at": "2011-05-16 04:04:43", "user": 789801, "id": 1170814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170815", "text": "_Imported from Lighthouse._\nComment by **Robert Pankowecki** - 2010-12-01 23:08:05 UTC\n\nautotranslate :name ??\n", "created_at": "2011-05-16 04:04:44", "user": 789801, "id": 1170815}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170816", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-12-02 08:42:18 UTC\n\n@robert, as i understand, the fix is correct, only the CHANGELOG is not. Right? dot notation should be the correct way.\n", "created_at": "2011-05-16 04:04:46", "user": 789801, "id": 1170816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170817", "text": "_Imported from Lighthouse._\nComment by **Bogu≈õ Tarnowski** - 2010-12-02 09:35:05 UTC\n\n@robert \n\ni had tried to do labels with I18n from http://blog.plataformatec.com.br/2010/02/rails-3-i18n-changes/\nbut this way doesn`t work\n\ni found answer.\n'action_view/helpers/form_helper.rb' lines 890\n\n``` ruby\n            p \"#{object_name}.#{method_name}\" # me puts here\n            I18n.t(\"helpers.label.#{object_name}.#{method_name}\", :default => \"\").presence\n\n\nreturn \"hotels_period.name\"\n\n```\n\nso in locales yml, keys must be like : \n\npl:\n  helpers:\n    label:\n      hotels_period:\n        name:                  'nazwa'\n\nnot \n\n```\n  hotels:\n    period:\n      name:                  'nazwa'\n```\n\nits just another inconsistence ?\n", "created_at": "2011-05-16 04:04:47", "user": 789801, "id": 1170817}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6038\nCreated by **y_feldblum (at yahoo)** - 2011-02-19 09:28:13 UTC\n\nThe following code is in the ActiveRecord readme file:\n\n```\nclass CommentObserver < ActiveRecord::Observer\n  def after_create(comment) # is called just after Comment#save\n    Notifications.deliver_new_comment(\"david@loudthinking.com\", comment)\n  end\nend\n```\n\nThe middle line appears to use the old ActionMailer API, and should be updated to use the new ActionMailer API.\n", "labels": [], "number": 761, "updated_at": "2011-05-21 15:12:10", "user": 789801, "closed_at": "2011-05-21 15:12:10", "id": 904461, "title": "ActiveRecord Readme correction", "url": "https://api.github.com/repos/rails/rails/issues/761", "created_at": "2011-05-16 04:04:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6047\nCreated by **Ken Mayer** - 2011-02-17 07:38:09 UTC\n\nWhen using the `json_pure` gem, this fails in v3.0.2, but succeeds in v3.0.0. It does not fail with json 1.4.6 with native extensions.\n\nHere's the commit the created the bug (determined by `git bisect start v3.0.2 v3.0.0`):\n\nhttps://github.com/rails/rails/commit/33b954005cd71f1bfba1beca296804ce6c66b0a8\n## How to reproduce\n\nYou'll need the following `Gemfile` in a test rails application:\n\n```\nsource 'http://rubygems.org'\ngem 'rails', :path => '../rails/'\ngem 'json_pure'\n```\n\nThen run this on the command line:\n\n<code>bundle exec rails runner 'JSON.generate([0])'</code>\n\nHere's a stack trace:\n\n``` ruby\n/Users/kmayer/Documents/rails/railties/lib/rails/commands/runner.rb:50: undefined method `merge' for #<JSON::Pure::Generator::State:0x102181890> (NoMethodError)\n    from /Users/kmayer/Documents/rails/activesupport/lib/active_support/json/encoding.rb:46:in `encode'\n    from /Users/kmayer/Documents/rails/activesupport/lib/active_support/json/encoding.rb:77:in `check_for_circular_references'\n    from /Users/kmayer/Documents/rails/activesupport/lib/active_support/json/encoding.rb:45:in `encode'\n    from /Users/kmayer/Documents/rails/activesupport/lib/active_support/json/encoding.rb:30:in `encode'\n    from /Users/kmayer/Documents/rails/activesupport/lib/active_support/core_ext/object/to_json.rb:15:in `to_json'\n    from /Users/kmayer/.rvm/gems/ruby-1.8.7-head@jsonbug/gems/json_pure-1.4.6/lib/json/pure/generator.rb:228:in `generate'\n    from /Users/kmayer/.rvm/gems/ruby-1.8.7-head@jsonbug/gems/json_pure-1.4.6/lib/json/common.rb:210:in `generate'\n    from (eval):1\n    from /Users/kmayer/Documents/rails/railties/lib/rails/commands.rb:39:in `eval'\n    from /Users/kmayer/Documents/rails/railties/lib/rails/commands/runner.rb:50\n    from /Users/kmayer/Documents/rails/railties/lib/rails/commands.rb:39:in `require'\n    from /Users/kmayer/Documents/rails/railties/lib/rails/commands.rb:39\n    from script/rails:6:in `require'\n    from script/rails:6\n```\n", "labels": [], "number": 762, "updated_at": "2011-09-14 18:39:47", "user": 789801, "closed_at": "2011-05-21 15:12:10", "id": 904462, "title": "JSON.generate raises exception in v3.0.2 + json_pure  => '~>1.4.3'", "url": "https://api.github.com/repos/rails/rails/issues/762", "created_at": "2011-05-16 04:04:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170818", "text": "_Imported from Lighthouse._\nComment by **Ken Mayer** - 2010-12-02 20:14:43 UTC\n\nPatch file with test & fix...\n", "created_at": "2011-05-16 04:05:00", "user": 789801, "id": 1170818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170819", "text": "_Imported from Lighthouse._\nComment by **Ken Mayer** - 2010-12-02 20:40:20 UTC\n\n``` patch\n\nFrom f52f3295196d48015c1bd5f337a5978e14c3acd6 Mon Sep 17 00:00:00 2001\nFrom: Kenneth Mayer <kmayer@bitwrangler.com>\nDate: Thu, 2 Dec 2010 09:11:08 -0800\nSubject: [PATCH] bug: JSON::Pure reuses a State object for options\n\nFixes [#6047 state:resolved]\n\nAn earlier commit (33b95) tries to merging encoding\noptions (active_support/json/encoding.rb:#options_for)\nwould raise a method_missing error -- but only\nif you were using json_pure.\n\nThis converts State objects back to an options hash\nvia :to_h\n---\n activesupport/lib/active_support/json/encoding.rb |    4 ++--\n activesupport/test/json/encoding_test.rb          |    5 +++++\n 2 files changed, 7 insertions(+), 2 deletions(-)\n\ndiff --git a/activesupport/lib/active_support/json/encoding.rb b/activesupport/lib/active_support/json/encoding.rb\nindex c8cac52..e8d14b3 100644\n--- a/activesupport/lib/active_support/json/encoding.rb\n+++ b/activesupport/lib/active_support/json/encoding.rb\n@@ -36,8 +36,8 @@ module ActiveSupport\n       class Encoder\n         attr_reader :options\n\n-        def initialize(options = nil)\n-          @options = options\n+        def initialize(options_or_state = nil)\n+          @options = options_or_state.respond_to?(:to_h) ? options_or_state.to_h : options_or_state\n           @seen = []\n         end\n\ndiff --git a/activesupport/test/json/encoding_test.rb b/activesupport/test/json/encoding_test.rb\nindex e0494de..622eca2 100644\n--- a/activesupport/test/json/encoding_test.rb\n+++ b/activesupport/test/json/encoding_test.rb\n@@ -125,6 +125,11 @@ class TestJSONEncoding < Test::Unit::TestCase\n     a[:sub] << a\n     assert_raise(ActiveSupport::JSON::Encoding::CircularReferenceError) { ActiveSupport::JSON.encode(a) }\n   end\n+  \n+  def test_no_exception_raised_with_json_pure\n+    require 'json/pure/generator'\n+    assert_equal \"[]\", JSON::Pure::Generator::State.new.generate([])\n+  end\n\n   def test_hash_key_identifiers_are_always_quoted\n     values = {0 => 0, 1 => 1, :_ => :_, \"$\" => \"$\", \"a\" => \"a\", :A => :A, :A0 => :A0, \"A0B\" => \"A0B\"}\n-- \n1.7.2.2\n```\n", "created_at": "2011-05-16 04:05:02", "user": 789801, "id": 1170819}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170820", "text": "_Imported from Lighthouse._\nComment by **dvdplm** - 2010-12-28 18:05:01 UTC\n\nConfirmed in rails 3.0.3\n", "created_at": "2011-05-16 04:05:04", "user": 789801, "id": 1170820}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170821", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-11 13:49:12 UTC\n\nHi Ken,\n\nI have tried replicating this issue but don't see any errors like you mention.\n\nI am pretty sure that this is more of a json_pure issue than a rails issue.\n\nFor example \n\n```\nbundle exec rails runner 'JSON.generate([0])'\n```\n\nis not testing how active support helps generate json, it is only running the generate json_pure method within a rails environment.\n\nAlso, your test is not testing rails at all but only json_pure.\n\nHave you tried updating your json_pure version?\n\nThanks,\n\nJosh\n", "created_at": "2011-05-16 04:05:06", "user": 789801, "id": 1170821}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170822", "text": "Attachments saved to Gist: http://gist.github.com/971731\n", "created_at": "2011-05-16 04:05:07", "user": 789801, "id": 1170822}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2096505", "text": "I'm experiencing this issue with version 3.0.10.  The proposed patch works for me.\n", "created_at": "2011-09-14 18:38:59", "user": 601193, "id": 2096505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2096517", "text": "I don't have permissions to re-open this ticket, but I think it should be.\n", "created_at": "2011-09-14 18:39:47", "user": 601193, "id": 2096517}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6048\nCreated by **Jeffrey Chupp** - 2010-11-23 18:57:37 UTC\n\nPostgres chokes on importing schema for Rails apps with spaces in the folder path, thinking that the path is actually multiple arguments.  Quoting the file is sufficient to solve this.\n\nThis affects Rails 2.3 and Rails 3 versions.  I'll attach a patch for both.\n", "labels": [], "number": 763, "updated_at": "2011-05-21 15:12:10", "user": 789801, "closed_at": "2011-05-21 15:12:10", "id": 904463, "title": "db:test:clone_structure fails for postgres when your rails app has a space in the directory name", "url": "https://api.github.com/repos/rails/rails/issues/763", "created_at": "2011-05-16 04:05:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170823", "text": "_Imported from Lighthouse._\nComment by **Jeffrey Chupp** - 2010-11-23 19:05:09 UTC\n\n2.3 patch\n", "created_at": "2011-05-16 04:05:13", "user": 789801, "id": 1170823}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170824", "text": "_Imported from Lighthouse._\nComment by **Jeffrey Chupp** - 2010-11-23 19:05:48 UTC\n\ncurrent master (Rails 3) patch\n", "created_at": "2011-05-16 04:05:15", "user": 789801, "id": 1170824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170825", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-24 00:00:11 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:05:16", "user": 789801, "id": 1170825}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170826", "text": "_Imported from Lighthouse._\nComment by **Vijay Dev** - 2011-02-24 15:54:22 UTC\n\nThe issue still exists in master. Tested for SQLite as well and that too fails when the path has a space in it. Here's a latest patch (Rails 3) that fixes both SQLite and PostgreSQL. \n\n@Santiago: Please open this issue again. Thanks!\n", "created_at": "2011-05-16 04:05:17", "user": 789801, "id": 1170826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170827", "text": "Attachments saved to Gist: http://gist.github.com/971732\n", "created_at": "2011-05-16 04:05:18", "user": 789801, "id": 1170827}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6049\nCreated by **Chris Conley** - 2010-11-23 20:25:09 UTC\n\nThe #column_exists? method only checks for equality across all options which is incorrect in mysql since the limit depends on the column type (tinyint, smallint, mediumint, bigint, etc).\n\nFor example, the following column definition:\n\n```\nt.column :foo, :integer, :limit => 11\n```\n\nshould return true when asking if the column exists but doesn't since MysqlColumn#extract_limit determines the limit based on the column type.\n\n```\ncolumn_exists?(:test_table, :foo, :integer, :limit => 11) # false\n```\n", "labels": [], "number": 764, "updated_at": "2011-05-21 15:12:11", "user": 789801, "closed_at": "2011-05-21 15:12:11", "id": 904464, "title": "MysqlAdapter#column_exists? returns incorrect result when passing in :limit option", "url": "https://api.github.com/repos/rails/rails/issues/764", "created_at": "2011-05-16 04:05:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170829", "text": "_Imported from Lighthouse._\nComment by **Chris Conley** - 2010-11-23 21:22:38 UTC\n\nMoved #limit_exists? to Column and made sure we are only doing anything special for type \"integer\". Updated patch attached.\n", "created_at": "2011-05-16 04:05:25", "user": 789801, "id": 1170829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170830", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-24 00:00:10 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:05:26", "user": 789801, "id": 1170830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170831", "text": "_Imported from Lighthouse._\nComment by **Anuj Dutta** - 2011-03-02 02:50:40 UTC\n\nThis exists in the current master branch. Attempted to improve the attached patch. Improved version attached.\n\n[state:open]\n", "created_at": "2011-05-16 04:05:27", "user": 789801, "id": 1170831}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170832", "text": "Attachments saved to Gist: http://gist.github.com/971733\n", "created_at": "2011-05-16 04:05:29", "user": 789801, "id": 1170832}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6058\nCreated by **Valentine Bichkovsky** - 2010-11-24 18:03:39 UTC\n\nRails version: 3.0.2 and 3.0.3 (no such bug in Rails 3.0.1)\nRuby 1.8.7\nAdapter: postgres\n\nIn code:\n\n``` ruby\nReservation.update_all(\"status = 'ready'\", \n  [\"date = ? and crossing_point_id = ? and position > ?\", \n   Time.zone.today, crossing_point.id, last_crossed],\n  :order => :position, :limit => params[:count])\n```\n\nIn log file:\n\n``` log\nAREL (15.0ms) UPDATE \"reservations\" SET status = 'ready' WHERE \"reservations\".\"id\" IN (SELECT \"reservations\".\"id\" FROM \"reservations\" ORDER BY position LIMIT 4)\n```\n\nh3. After removing :order and :limit options\n\nIn code:\n\n``` ruby\nReservation.update_all(\"status = 'ready'\", \n  [\"date = ? and crossing_point_id = ? and position > ?\", \n   Time.zone.today, crossing_point.id, last_crossed])\n```\n\nIn log file:\n\n``` log\nAREL (29.7ms)  UPDATE \"reservations\" SET status = 'ready' WHERE (date = '2010-11-24' and crossing_point_id = 2 and position > 182)\n```\n", "labels": [], "number": 765, "updated_at": "2011-05-21 15:12:11", "user": 789801, "closed_at": "2011-05-21 15:12:11", "id": 904465, "title": "update_all ignores conditions, when :orders and :limit options are supplied", "url": "https://api.github.com/repos/rails/rails/issues/765", "created_at": "2011-05-16 04:05:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170833", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-24 18:56:36 UTC\n\nlooking into it.\n", "created_at": "2011-05-16 04:05:36", "user": 789801, "id": 1170833}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170834", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-11-24 19:24:39 UTC\n\nAttached is a failing test. \n\nRelation is being built right. Look like issue is with Arel. Studying the code. Patch might take a while :-)\n", "created_at": "2011-05-16 04:05:37", "user": 789801, "id": 1170834}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170835", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-25 00:00:06 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:05:39", "user": 789801, "id": 1170835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170836", "text": "_Imported from Lighthouse._\nComment by **Howard Yeh** - 2011-03-03 10:26:11 UTC\n\n[state:open]\n\nthis problem persists for 3.0.5. \n\nRuby 1.9.2\nAdapter: postgres\n", "created_at": "2011-05-16 04:05:41", "user": 789801, "id": 1170836}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170837", "text": "_Imported from Lighthouse._\nComment by **Hugo Peixoto** - 2011-03-05 23:12:54 UTC\n\nLooks like the bug is in ARel indeed. When a subquery is generated, all other WHERE clauses are dropped.\n\nI attached a patch that fixes this bug and adds a test case.\n", "created_at": "2011-05-16 04:05:43", "user": 789801, "id": 1170837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170838", "text": "_Imported from Lighthouse._\nComment by **Hugo Peixoto** - 2011-03-06 10:53:38 UTC\n\nThe previous patch kept the where conditions on the UPDATE statement. That is not the correct behavior, as the order/limit clauses wouldn't be applied with the WHERE clauses in mind.\n\nThis one passes the WHERE clauses to the generated subquery.\n", "created_at": "2011-05-16 04:05:44", "user": 789801, "id": 1170838}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170839", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2011-03-21 21:56:22 UTC\n\n@Hugo I've applied this patch to ARel master which is the unreleased 2.1.0 version.\n\nWould you mind backporting this to 2.0.x?\n", "created_at": "2011-05-16 04:05:46", "user": 789801, "id": 1170839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170840", "text": "_Imported from Lighthouse._\nComment by **Hugo Peixoto** - 2011-03-24 06:41:27 UTC\n\n2.0.x backported patch attached.\n", "created_at": "2011-05-16 04:05:48", "user": 789801, "id": 1170840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170841", "text": "Attachments saved to Gist: http://gist.github.com/971734\n", "created_at": "2011-05-16 04:05:50", "user": 789801, "id": 1170841}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6062\nCreated by **Jeremy Evans** - 2010-11-25 07:22:05 UTC\n\nActiveSupport assumes that DateTime inherits certain methods from Date, such as -.  This is true in the standard library (where dates are stored as datetimes), but not true in home_run.  I think ActiveSupport should be changed so that any methods that are overridden in Date should not be assumed to be automatically overridden in DateTime, so that you are sure that DateTime objects have the same behavior.  I believe that ActiveSupport overrides the following methods in Date and assumes they will be overridden in DateTime: +, -, >>.\n\nRemoving the methods from DateTime or defining them to call super will not work, because the behavior for DateTime could be different from Date (and is in home_run).  However, just adding the following to the DateTime core extension should work:\n\n```\nclass DateTime\n  alias_method :plus_without_duration, :+\n  alias_method :+, :plus_with_duration\n  alias_method :minus_without_duration, :-\n  alias_method :-, :minus_with_duration\nend\n```\n\nFor >>, you should probably do something similar, like defining a new method and aliasing instead of undefing, even if you don't call the previous method.  That's less of an issue, though, as you aren't changing behavior.  You aren't going to effect home_run's DateTime class, but as it doesn't suffer from the bug you are trying to fix, it doesn't matter much.\n\nSee https://gist.github.com/714891 for a gist of the problem. See https://github.com/jeremyevans/home_run/issues/issue/20 for the issue reported on home_run's bugtracker.\n", "labels": [], "number": 766, "updated_at": "2011-05-21 15:12:11", "user": 789801, "closed_at": "2011-05-21 15:12:11", "id": 904466, "title": "ActiveSupport assumes too much about how Date/DateTime are implemented, breaking some usage with home_run", "url": "https://api.github.com/repos/rails/rails/issues/766", "created_at": "2011-05-16 04:05:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170842", "text": "_Imported from Lighthouse._\nComment by **Jeremy Evans** - 2010-11-25 17:43:15 UTC\n\nI'm attaching a tested patch that fixes DateTime#+ and DateTime#- to work both with and without home_run, including some new tests for it.\n", "created_at": "2011-05-16 04:05:56", "user": 789801, "id": 1170842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170843", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-02-26 00:00:07 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:05:57", "user": 789801, "id": 1170843}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170844", "text": "_Imported from Lighthouse._\nComment by **Jeremy Evans** - 2011-02-26 02:48:27 UTC\n\n[state:open] This still hasn't been fixed, and the patch probably still applies.  While it currently only affects people that use home_run, as soon as tadf (ruby core member) merges his switch_hitter patch (replacing the standard date/datetime library with a C extension, see http://redmine.ruby-lang.org/issues/show/4257), this is going to start breaking on ruby-head, so you are going to have to fix it sooner or later.\n", "created_at": "2011-05-16 04:05:59", "user": 789801, "id": 1170844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170845", "text": "_Imported from Lighthouse._\nComment by **Jeremy Evans** - 2011-03-29 18:45:51 UTC\n\nThis currently affects ruby-head even without home_run, since tadf merged his switch_hitter patch:\n\n```\n$ gem list | grep active\nactivesupport (3.0.5)\n$ ruby -v -r date -ractive_support/all -e 'p(DateTime::parse(\"January 1 1943\") + 1.year)'\nruby 1.9.3dev (2011-02-28 trunk 30975) [x86_64-openbsd4.9]\n/home/jeremy/.rvm/rubies/ruby-head/lib/ruby/1.9.1/date.rb:1358:in `plus_r': expected numeric (TypeError)\n        from -e:1:in `+'\n        from -e:1:in `<main>'\n```\n", "created_at": "2011-05-16 04:06:00", "user": 789801, "id": 1170845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170846", "text": "_Imported from Lighthouse._\nComment by **Jeremy Evans** - 2011-03-29 18:52:33 UTC\n\nLooks like tenderlove fixed this earlier this month (https://github.com/rails/rails/commit/33f222b9e1b20aa6264084ec2c8c3206e1c2d598), but didn't merge it into the stable branch.  Could this be merged to 3-0-stable so it makes 3.0.6?\n", "created_at": "2011-05-16 04:06:01", "user": 789801, "id": 1170846}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170847", "text": "Attachments saved to Gist: http://gist.github.com/971735\n", "created_at": "2011-05-16 04:06:03", "user": 789801, "id": 1170847}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6074\nCreated by **Hexagon** - 2010-11-27 11:01:45 UTC\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/date_helper.rb#L98\n\nremainder = ((distance_in_minutes - minute_offset_for_leap_year) % 525600)\n\nminute_offset_for_leap_year should be added to distance_in_minutes, not subtracted. This causes distance_of_time_in_words to return a full year too much in certain conditions.\n\nOrigin:\nhttp://bugs.joindiaspora.com/issues/599\n", "labels": [], "number": 767, "updated_at": "2011-05-16 15:00:50", "user": 789801, "closed_at": "2011-05-16 15:00:50", "id": 904467, "title": "distance_of_time_in_words calculates wrong no of years", "url": "https://api.github.com/repos/rails/rails/issues/767", "created_at": "2011-05-16 04:06:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170848", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-11-27 18:47:49 UTC\n\nworking on failing test and once done will patch.\n", "created_at": "2011-05-16 04:06:10", "user": 789801, "id": 1170848}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170849", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-11-29 15:17:04 UTC\n\nActually the subtraction makes sense here. The problems is that distance_in_year does not take care of the leap years properly when finding the distance in years.\n\nAdding patch + test\n", "created_at": "2011-05-16 04:06:11", "user": 789801, "id": 1170849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170850", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-12-22 16:55:05 UTC\n\nbump! any thoughts on this?\n", "created_at": "2011-05-16 04:06:13", "user": 789801, "id": 1170850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170851", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-12 21:58:23 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/42275)]\n", "created_at": "2011-05-16 04:06:14", "user": 789801, "id": 1170851}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170852", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 04:06:15", "user": 789801, "id": 1170852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170853", "text": "Attachments saved to Gist: http://gist.github.com/971736\n", "created_at": "2011-05-16 04:06:17", "user": 789801, "id": 1170853}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171538", "text": "This ticket can be closed. It has been fixed in Rails 3.1 here https://github.com/rails/rails/pull/410\n", "created_at": "2011-05-16 05:26:45", "user": 762, "id": 1171538}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6080\nCreated by **Paul Schreiber** - 2010-11-28 22:47:03 UTC\n\nCurrently, Rails' I18n system automatically looks up localized text for `<label>` tags. It would be nice if it did something similar for the HTML5 placeholder attribute.\n\nYour `en.yml` file would like this:\n\n```\nhelpers:\n placeholder:\n  person:\n   first_name: \"John\"\n   last_name: \"Doe\"\n```\n\nYour ERB would look the same:\n`<%= f.text_field :first_name %>`\n\nYour HTML would look like this:\n`<input id=\"person_first_name\" name=\"person[first_name]\" placeholder=\"John\" type=\"text\" />`\n\nCurrently, you have to clutter up your markup like so:\n`<%= f.text_field :first_name, :placeholder => t('helpers.placeholder.person.first_name') %>`\n", "labels": [], "number": 768, "updated_at": "2014-08-09 04:47:38", "user": 789801, "closed_at": "2011-05-21 15:12:11", "id": 904468, "title": "I18n support for HTML5 placeholder attribute", "url": "https://api.github.com/repos/rails/rails/issues/768", "created_at": "2011-05-16 04:06:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170854", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-11-29 10:45:30 UTC\n\nPlease feel free to submit a patch as per the http://rails.lighthouseapp.com/projects/8994/sending-patches .\n\nI however suggest you first start a discussion about this feature on the Rails mailing list since you are proposing for rails to always add a placeholder if an entry in the locale exists for an attribute. \n\nI think it's better for user to explicitly state if they want a placeholder for a particular field. Perhaps :placeholder => true would be a better way to trigger an i18n lookup if a string is not provided with the attribute.\n", "created_at": "2011-05-16 04:06:22", "user": 789801, "id": 1170854}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170855", "text": "_Imported from Lighthouse._\nComment by **Paul Schreiber** - 2010-12-07 06:45:57 UTC\n\nI posted this to the Rails mailing list:\nhttp://groups.google.com/group/rubyonrails-talk/browse_thread/thread/e3ac214c8b19e984\n\nThe attached patch modifies to_input_field_tag to perform an I18n lookup if no :placeholder option is supplied.\n", "created_at": "2011-05-16 04:06:24", "user": 789801, "id": 1170855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170857", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-08 00:00:12 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:06:25", "user": 789801, "id": 1170857}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170858", "text": "_Imported from Lighthouse._\nComment by **Paul Schreiber** - 2011-03-08 00:07:37 UTC\n\nThis is still an issue in 3.0.5. I've already provided a patch. Can someone please review this? [state:open]\n", "created_at": "2011-05-16 04:06:27", "user": 789801, "id": 1170858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170859", "text": "Attachments saved to Gist: http://gist.github.com/971737\n", "created_at": "2011-05-16 04:06:28", "user": 789801, "id": 1170859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1501348", "text": "Please reopen.\n", "created_at": "2011-07-05 03:44:17", "user": 86784, "id": 1501348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2785541", "text": "I really like this idea. I went ahead and reapplied the spirit of the original patch in pull #3674. I had to rework it a tiny bit and I also added test cases. Seeing as how this issue is still marked as closed, please check out the pull request and voice support there if you'd like to see this feature.\n", "created_at": "2011-11-18 04:00:19", "user": 152152, "id": 2785541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14157211", "text": "I did a monkey path to to_input_field_tag (not beauty, but better then nothing), tried to keep like the label one...\nsince I'm new to rails this maybe have undesirable behaviors, but it's almost like the first code...\nhttps://gist.github.com/felipedeboni/5045193\n", "created_at": "2013-02-27 04:59:35", "user": 735836, "id": 14157211}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6084\nCreated by **C. Bedard** - 2011-02-19 09:28:28 UTC\n\nGiven the following associated models:\n\n```\nclass Client < ActiveRecord::Base\n  has_many :orders\nend\n\nclass Order < ActiveRecord::Base\n  belongs_to :client\nend\n```\n\nAnd let's say I have an orders controller in which a Client creates their orders:\n\n```\nclass OrdersController < ApplicationController\n  def create\n    @client.orders.create(params[:order])\n  end\nend\n```\n\nThis mass-assignment, in Rails 2.X.X, would always ensure that the Order Object belonged to the association owner, by forcing the foreign key (`client_id`) to that of `@client`.\n\nWith Rails 3.0.3, the behavior has changed, making it possible to inject a foreign key simply by setting it. So, in this example, if `params[:order]` happens to have a `:client_id` key, that value will override the associations's owner id. In other words, the AR scope that is specified by `@client.orders` doesn't enforce itself when creating associated objects.\n\nThis may also represent a \"security\" vulnerability, as anyone can easily infer the foreign key column name (Rails makes it pretty easy) and inject a value submitted in a form, that can create objects belonging to other objects that should not be acessible in this way.\n\nAlso, calling `@client.orders.build(params[:order])` does enforce the correct scope attributes (as would be expected).\n\nI am not familiar with the internals of the new AR querying interface, but having investigated a bit, it all seems to originate in `ActiveRecord::Base#with_scope`, where improper merging of attributes occurs with construct_scope attributes.\n", "labels": [], "number": 769, "updated_at": "2011-05-21 15:12:12", "user": 789801, "closed_at": "2011-05-21 15:12:11", "id": 904469, "title": "ActiveRecord Association Proxy/Collection create method incorrectly merges attributes", "url": "https://api.github.com/repos/rails/rails/issues/769", "created_at": "2011-05-16 04:06:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170860", "text": "_Imported from Lighthouse._\nComment by **C. Bedard** - 2010-11-30 19:59:28 UTC\n\nMore on this issue:\n\nI initially thought the problem was in `ActiveRecord::Base#with_scope` but now after more digging, I found out the problem originates in `ActiveRecord::Base#initialize`, where 2 lines should be reversed in order for scope attributes to be assigned _after_ the attributes Hash that is received as a parameter. Currently the method goes like this:\n\n```\ndef initialize(attributes = nil)\n  ....\n  ....      \n  ensure_proper_type\n\n  # THE FOLLOWING 2 LINES SHOULD BE REVERSED!\n  populate_with_current_scope_attributes\n  self.attributes = attributes unless attributes.nil?\n\n  result = yield self if block_given?\n  _run_initialize_callbacks\n  result\nend\n```\n\nThe reason is simple: as it is right now, the scope attributes are first assigned, but then attributes are **overwritten with the attributes Hash passed as a parameter**. Reversing those to lines solves the problem. \n\nAttached is the patch acting on `ActiveRecord::Base#initialize`, which simply assigns scope attributes after the attributes parameter, therby enforcing the scope attributes over the parameter attributes.\n\nThis is, by the way, the way it was done in Rails 2. Maybe there is a reason for this in Rails 3, but it is not readily apparent.\n", "created_at": "2011-05-16 04:06:34", "user": 789801, "id": 1170860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170861", "text": "_Imported from Lighthouse._\nComment by **Mike Ragalie** - 2010-12-04 19:28:36 UTC\n\nI confirm that this bug exists in edge. And it is potentially a problem, since I can see someone doing something like this:\n\n``` ruby\npost = Post.where(:title => \"My Favorite Things\")\npost_dup = Post.where(:title => \"My Favorite Thingz\")\n\ncomment = post_dup.comments.first\npost.comments.create(comment.attributes)\n```\n\nHowever, the above patch breaks other AR functionality (some of the tests fail) so I created tests for the problem and I've attached a new fix that passes all tests. In short, the build methods on has_one/has_many call #set_belongs_to_association_for but the create methods do not. I refactored the has_one create methods to operate similarly to the has_many create methods and added in a call to #set_belongs_to_association_for for both association types.\n", "created_at": "2011-05-16 04:06:35", "user": 789801, "id": 1170861}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170862", "text": "_Imported from Lighthouse._\nComment by **Jesse Storimer** - 2011-01-29 04:01:33 UTC\n\n+1 for Mike's patch. I definitely agree that this is unexpected behaviour and might raise a security eyebrow.\n", "created_at": "2011-05-16 04:06:37", "user": 789801, "id": 1170862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170863", "text": "Attachments saved to Gist: http://gist.github.com/971738\n", "created_at": "2011-05-16 04:06:38", "user": 789801, "id": 1170863}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6091\nCreated by **JackC** - 2011-02-16 07:20:12 UTC\n\nCannot query a table by an enumerated field.\n\nFor example, when gender is a PostgreSQL enum:\n\n``` ruby\nirb(main):004:0> Person.where(:gender => \"male\").first\nNoMethodError: undefined method `visit_Arel_Attributes_Undefined' for #<Arel::Visitors::PostgreSQL:0x7f0c52d6b310>\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:235:in `visit_Arel_Nodes_Equality'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:109:in `visit_Arel_Nodes_Grouping'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `map'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `map'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/postgresql.rb:24:in `visit_Arel_Nodes_SelectStatement'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:5:in `accept'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:19:in `accept'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/connection_pool.rb:110:in `with_connection'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:17:in `accept'\n    from /usr/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/tree_manager.rb:19:in `to_sql'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'\n    from (irb):4\n```\n\nQuerying via array substitution works:\n\n``` ruby\nPerson.where([\"gender=?\", \"male\"]).first\n```\n\nThis used to work in Rails 3.0.1.\n", "labels": [], "number": 770, "updated_at": "2011-05-21 15:12:12", "user": 789801, "closed_at": "2011-05-21 15:12:12", "id": 904470, "title": "Hash conditions fail with PostgreSQL ENUMs", "url": "https://api.github.com/repos/rails/rails/issues/770", "created_at": "2011-05-16 04:06:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170864", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2010-12-01 05:14:06 UTC\n\nIn edge rails both of these work.\n\n``` ruby\nree-1.8.7-2010.02 > Car.where(:name => 'honda').first\n  Car Load (0.2ms)  SELECT \"cars\".* FROM \"cars\" WHERE \"cars\".\"name\" = 'honda' LIMIT 1\n => #<Car id: 1, name: \"honda\", color: nil> \nree-1.8.7-2010.02 > Car.where([\"name = ?\",'honda']).first\n  Car Load (0.2ms)  SELECT \"cars\".* FROM \"cars\" WHERE (name = 'honda') LIMIT 1\n => #<Car id: 1, name: \"honda\", color: nil> \nree-1.8.7-2010.02 > \n```\n", "created_at": "2011-05-16 04:06:44", "user": 789801, "id": 1170864}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170865", "text": "_Imported from Lighthouse._\nComment by **Tom Hughes** - 2011-02-09 22:57:45 UTC\n\nWell rails 3.0.4 is out now, but this still seems to be failing?\n", "created_at": "2011-05-16 04:06:46", "user": 789801, "id": 1170865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170866", "text": "_Imported from Lighthouse._\nComment by **Tom Hughes** - 2011-02-10 00:39:15 UTC\n\nIt seems the answer is to update arel - rails 3.0.4 was still only requiring arel 2.0.2 or later and I had 2.0.3 which was sufficient for that. Updating arel to 2.0.8 seems to fix the problem.\n", "created_at": "2011-05-16 04:06:48", "user": 789801, "id": 1170866}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6094\nCreated by **JackC** - 2011-03-29 01:29:21 UTC\n\n``` ruby\nclass Person < ActiveRecord::Base\n  has_many :manager_roles, :class_name => \"Organization::Department\"\n  has_many :departments, :through => :manager_roles\nend\n\nmodule Organization\n  class Department < ActiveRecord::Base\n    has_many :manager_roles\n  end\n\n  class ManagerRole < ActiveRecord::Base\n    belongs_to :department\n    belongs_to :person\n  end\nend\n```\n\nhas_many :departments, :through => :manager_roles will crash:\n\n```\nNameError: uninitialized constant Person::Department\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:1199:in `compute_type'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/reflection.rb:162:in `send'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/reflection.rb:162:in `klass'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations/through_association_scope.rb:56:in `construct_joins'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations/through_association_scope.rb:11:in `construct_scope'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations/has_many_through_association.rb:84:in `find_target'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations/association_collection.rb:409:in `load_target'\n    from /usr/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/associations/association_proxy.rb:145:in `inspect'\n```\n\nWe can work around it by changing ManagerRole to specifically declare the class name:\n\n``` ruby\n  class ManagerRole < ActiveRecord::Base\n    belongs_to :department, :class_name => \"Organization::Department\"\n    belongs_to :person\n  end\n```\n\nIt appears that compute_type would need to also search the module of the join model.\n", "labels": [], "number": 771, "updated_at": "2011-05-21 15:12:12", "user": 789801, "closed_at": "2011-05-21 15:12:12", "id": 904471, "title": "has_many :through across namespace fails", "url": "https://api.github.com/repos/rails/rails/issues/771", "created_at": "2011-05-16 04:06:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170867", "text": "_Imported from Lighthouse._\nComment by **JackC** - 2010-11-30 22:17:41 UTC\n\nOn further investigation, setting :class_name on the has_many :through relationship actually works.\n\nThe problem is actually in the documentation. The docs say that :class_name is ignored with has_many :through, but it actually works.\n", "created_at": "2011-05-16 04:06:55", "user": 789801, "id": 1170867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170868", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-03-12 16:24:38 UTC\n\nJackC, perhaps you could supply a test and a documentation patch that verifies and clarifies this behavior?\n", "created_at": "2011-05-16 04:06:57", "user": 789801, "id": 1170868}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6098\nCreated by **Brian Underwood** - 2011-01-18 08:52:34 UTC\n\nThis is more of a question for the moment.\n\nI'm working on a large Rails app which, unfortunately, has a Fixture model.  I'm running into issues where the Fixture class (used for test fixtures) is extending our Fixture model class and causing issue with testing our Fixture model (we've long neglected testing and are just now building up our suite).\n\nI took a look at the ActiveRecord source and the Fixture class seems to be relatively limited in it's usage.  It would be much less work to namespace the Fixture class in ActiveRecord than to change all of the various references to the Fixture model in our app (and it would allow other Rails users to have 'Fixture' models).  I'd be happy to work on a patch to do this, but I wanted to get advice first and make sure that it would be a good way to go.  Should I namespace it in the ActiveRecord module?  Should I namespace all of the classes in the fixtures.rb file?\n", "labels": [], "number": 772, "updated_at": "2011-05-21 15:12:12", "user": 789801, "closed_at": "2011-05-21 15:12:12", "id": 904472, "title": "ActiveRecord Fixture class", "url": "https://api.github.com/repos/rails/rails/issues/772", "created_at": "2011-05-16 04:07:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170869", "text": "_Imported from Lighthouse._\nComment by **Prem Sichanugrist (sikachu)** - 2010-12-09 14:32:13 UTC\n\nYes, I'm agree on having `Fixture` model namespaced under `ActiveRecord` module. Would you please provide a patch for it?\n\nThank you\n", "created_at": "2011-05-16 04:07:04", "user": 789801, "id": 1170869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170870", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-12-09 20:49:37 UTC\n\nThanks!  Here's my patch.  Since no functionality change I didn't write any tests, but I ran the sqlite3 tests and they all continued to pass?  Should I run any others?  I also took the changes to the two non-test related files (fixtures.rb and databases.rake) and put them into my install RVM copy of ActiveRecord 3.0.3 and my tests are running now, so that's exciting ;).  Let me know if there's anything else that I need to do.\n", "created_at": "2011-05-16 04:07:05", "user": 789801, "id": 1170870}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170871", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-10 08:20:54 UTC\n\nIt's morning here, so maybe my senses are not so sharp, but how Fixture model could possibly conflict with Fixtures (notice the plural form ;)\n", "created_at": "2011-05-16 04:07:06", "user": 789801, "id": 1170871}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170872", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-12-10 13:56:22 UTC\n\nThe issue isn't that the Fixture class conflicts with the Fixtures class (note 'class', not 'model').  The issue is that I have a Rails application (and other people may as well) with a Fixture model which is conflicting with the Fixture class and which is preventing me from running tests on that Fixture model.  The Fixtures class was namespaced because it didn't seem right to namespace one and not the other ;)\n", "created_at": "2011-05-16 04:07:07", "user": 789801, "id": 1170872}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170873", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-10 14:07:06 UTC\n\nBrian: that means that I should check lighthouse in the evening rather than in the morning. I thought that there is only Fixtures class in rails (I've started testing after factories revolution, so I've never had to do much with it ;).\n\nSo +1 on that from me, looks fine.\n", "created_at": "2011-05-16 04:07:09", "user": 789801, "id": 1170873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170874", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-12-13 15:51:12 UTC\n\nJust wanted to check to see what's next to move the ticket forward. ;)\n", "created_at": "2011-05-16 04:07:10", "user": 789801, "id": 1170874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170875", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-12-13 18:59:35 UTC\n\nI actually just noticed that there were some references to the Fixtures class in other parts of Rails than ActiveRecord, so I've made a new patch.  I also ran the tests for all of Rails (that took a while :) and all of the tests seem to pass except for two which also seem to be failing in master.\n", "created_at": "2011-05-16 04:07:12", "user": 789801, "id": 1170875}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170876", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-12-15 20:15:45 UTC\n\nHey, just checking in again.  Could somebody let me know what's next for this ticket?  Thanks!\n", "created_at": "2011-05-16 04:07:13", "user": 789801, "id": 1170876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170877", "text": "_Imported from Lighthouse._\nComment by **Prem Sichanugrist (sikachu)** - 2010-12-16 16:21:59 UTC\n\nYour patch looks great! I'll assign to Aaron to get your patch in.\n\nAaron, could you please handle this for me? I don't know that it would break any gem/plugin or not if we're pushing it to 3.0.4. I'll leave it to your consideration if we need to put it in CHANGELOG or something.\n\nThank you.\n", "created_at": "2011-05-16 04:07:14", "user": 789801, "id": 1170877}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170878", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-16 17:51:12 UTC\n\nI would not push it to 3.0.4, it's not a bug, just name collision, it should not be included in patch release, especially because it can break any gem/plugin that uses Fixture class.\n", "created_at": "2011-05-16 04:07:16", "user": 789801, "id": 1170878}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170879", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2010-12-17 00:59:39 UTC\n\nThat's sad, but I can understand that we don't want to break plugins in a patch release.  Does that mean it would go into 3.1?  We're probably a ways away from a 3.1 upgrade if the Arel syntax is the required ActiveRecord API.  We can patch our Rails 3.0.x gems in our dev/test environments, which is a pain, but way less of a pain than refactoring the Fixture model out of our app ;)\n", "created_at": "2011-05-16 04:07:17", "user": 789801, "id": 1170879}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170880", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2011-01-14 18:48:18 UTC\n\nCan you rebase this patch off master and I'll apply it for 3.1\n", "created_at": "2011-05-16 04:07:18", "user": 789801, "id": 1170880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170881", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2011-01-14 19:13:34 UTC\n\nSure, rebased my branch and created a new patch with a couple of fixes\n", "created_at": "2011-05-16 04:07:20", "user": 789801, "id": 1170881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170882", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2011-01-14 19:16:04 UTC\n\nFile didn't attach\n", "created_at": "2011-05-16 04:07:21", "user": 789801, "id": 1170882}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170883", "text": "_Imported from Lighthouse._\nComment by **Brian Underwood** - 2011-04-07 15:10:38 UTC\n\nPoking this ticket since it's been open for a while and it will probably be harder to apply the patch later.  Aaron, could you take a look at this?  If you can't apply the patch, I can make it again off of the latest 3.1\n", "created_at": "2011-05-16 04:07:22", "user": 789801, "id": 1170883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170884", "text": "_Imported from Lighthouse._\nComment by **Jason Roth** - 2011-05-07 20:37:00 UTC\n\nAdded this issue to github issues:\nhttps://github.com/rails/rails/issues/439\n\n-j\n", "created_at": "2011-05-16 04:07:24", "user": 789801, "id": 1170884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170885", "text": "_Imported from Lighthouse._\nComment by **Jason Noble** - 2011-05-07 21:14:36 UTC\n\nI submitted a github pull request:  https://github.com/rails/rails/pull/442\n", "created_at": "2011-05-16 04:07:25", "user": 789801, "id": 1170885}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170886", "text": "Attachments saved to Gist: http://gist.github.com/971739\n", "created_at": "2011-05-16 04:07:26", "user": 789801, "id": 1170886}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6099\nCreated by **bhu** - 2010-12-04 04:17:53 UTC\n\n```\nattr_accessor_with_default :something_processed, false\nalias_method :something_processed?, :something_processed\n```\n\nseems to be a problem because the reader looks like it is redefined on line 26 in \"attr_accessor_with_default.rb\"\n\n```\nclass << self; attr_reader :#{sym} end  #   class << self; attr_reader :age end\n```\n\n```\nx = Blubb.new\nx.something_processed        # => false\nx.something_processed?       # => false\nx.something_processed = true # => true\nx.something_processed        # => true\nx.something_processed?       # => false\n```\n\nimho the last line should also return true\n\ni'm sorry if that behavior is how it's intended\n", "labels": [], "number": 773, "updated_at": "2011-05-21 15:12:12", "user": 789801, "closed_at": "2011-05-21 15:12:12", "id": 904474, "title": "attr_accesor_with_default alias reader method", "url": "https://api.github.com/repos/rails/rails/issues/773", "created_at": "2011-05-16 04:07:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170888", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-12-02 08:31:01 UTC\n\n@bhu, it is indeed odd and I can reproduce this behavior.\n\nI don't think it was not how it was intended but unfortunately this is how the functionality got implemented.\nThe writer redefines the reader to clear out the default.\n\nI wish it was written a bit more cleanly such that reader and writers were only defined once.\n\nsomething like (pseudocode)\n\n``` ruby\n  def sym=(value)\n    @sym_marked = true\n    @sym = value\n  end\n  def sym\n    @sym_marked ? @sym : default_value # default_value would return the default value or invoke the block\n  end\n```\n\nFeel free to implement and patch.\n", "created_at": "2011-05-16 04:07:32", "user": 789801, "id": 1170888}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170889", "text": "_Imported from Lighthouse._\nComment by **bhu** - 2010-12-12 14:27:55 UTC\n\nHmm i can't upload the diff file. Am i doing something wrong?\n", "created_at": "2011-05-16 04:07:34", "user": 789801, "id": 1170889}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170890", "text": "_Imported from Lighthouse._\nComment by **bhu** - 2010-12-12 17:07:51 UTC\n\ntried patch tags, state:resolved, patch prefix, patch/diff file extensions.\n\nI used the sending_patches guide.\n\nThere is no error message. Every time I try to attach a file, nothing happens after submitting.\nSorry for making it unnecessary complicated.\n", "created_at": "2011-05-16 04:07:35", "user": 789801, "id": 1170890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170891", "text": "_Imported from Lighthouse._\nComment by **Aditya Sanghi** - 2010-12-20 19:14:54 UTC\n\nTry putting it in a gist. I'll try to upload the patch here. Sorry for the delay.\n", "created_at": "2011-05-16 04:07:36", "user": 789801, "id": 1170891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170892", "text": "_Imported from Lighthouse._\nComment by **bhu** - 2010-12-20 19:43:55 UTC\n\nHere my latest version in case of tagging.\nhttps://gist.github.com/748873\nHopefully you can tell me what i did wrong.\n\nI hope you like the solution with the additional method.\n\nIf there are any problems please inform me. First ticket so i don't really know if i did everything right.\n\nThe \"(@sym_marked ||= false)\" is just to get rid of uninitialized variable warning.\n", "created_at": "2011-05-16 04:07:38", "user": 789801, "id": 1170892}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170893", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-21 00:00:14 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:07:39", "user": 789801, "id": 1170893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170894", "text": "_Imported from Lighthouse._\nComment by **bhu** - 2011-03-21 09:23:08 UTC\n\nThe in my eyes error still exists in 3.0.5. The diff is also included with the tests. The ticket just needs to be reviewed, or did i miss something? I  think this could be an cleaner an better useable solution than the old version. [state:open]\n", "created_at": "2011-05-16 04:07:40", "user": 789801, "id": 1170894}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170895", "text": "Attachments saved to Gist: http://gist.github.com/971741\n", "created_at": "2011-05-16 04:07:42", "user": 789801, "id": 1170895}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6121\nCreated by **Neeraj Singh** - 2010-12-06 21:26:28 UTC\n\nSimilar to #5972 . This time for last method.\n\nhttps://github.com/neerajdotname/rails/commit/870680d5949a2b7ccb9d3a85b3860b6b6fc2070c\n\na bit of cleanup of another test\nhttps://github.com/neerajdotname/rails/commit/7d0c90aaffc8bf1303729c40b829af01ea715249\n", "labels": [], "number": 774, "updated_at": "2011-05-21 15:12:13", "user": 789801, "closed_at": "2011-05-21 15:12:12", "id": 904475, "title": "Do not perform another sql if association is already loaded for empty hash", "url": "https://api.github.com/repos/rails/rails/issues/774", "created_at": "2011-05-16 04:07:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170897", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2011-02-21 18:34:32 UTC\n\nBoth of these are 404'ing for me. Have they been applied?\n", "created_at": "2011-05-16 04:07:48", "user": 789801, "id": 1170897}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6128\nCreated by **Brian Durand** - 2010-12-07 23:47:49 UTC\n\nThis patch provides a NoStore implementation of ActiveSupport::Cache::Store suitable for use in development and test environments where the code need to use the cache interface, but actually caching data is not desired. It would be used then in the development.rb, for example, as:\n\n  config.cache_store = :no_store\n", "labels": [], "number": 775, "updated_at": "2011-05-21 15:12:13", "user": 789801, "closed_at": "2011-05-21 15:12:13", "id": 904476, "title": "Provide NoStore implementation of ActiveSupport::Cache::Store", "url": "https://api.github.com/repos/rails/rails/issues/775", "created_at": "2011-05-16 04:07:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170899", "text": "_Imported from Lighthouse._\nComment by **Chris Hapgood** - 2010-12-08 13:31:15 UTC\n\nThis is a nice way to ensure that arguments to cache-related functions are reasonable.  LH is acting up -I can't see the patch and confirm this: does the patch log generously?\n\n+1, conceptually.\n", "created_at": "2011-05-16 04:07:55", "user": 789801, "id": 1170899}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170900", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2010-12-08 15:26:04 UTC\n\nI didn't put in any logging. It just implements the required functions as no-ops so it always behaves like a cache miss.\n", "created_at": "2011-05-16 04:07:56", "user": 789801, "id": 1170900}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170901", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-10 14:38:32 UTC\n\n+1 from me, I often use NoStore myself (but I call it NilStore ;).\n", "created_at": "2011-05-16 04:07:57", "user": 789801, "id": 1170901}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170902", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-02-10 21:36:50 UTC\n\nThe idea sounds good.\n\nWe've discussed this a bit in Campfire and would like to suggest a couple of changes:\n- Instead of NoStore, NullStore is preferred, since it is a store, only it's a no-op.\n- It would be nice that config.cache_store = nil configures the NullStore.\n\nAnd since we are revising the patch... you know a patch has to be self-contained. It has to come complete with the implementation, test coverage, and documentation coverage. I know you have provided docs in a different ticket. Would you merge the corresponding documentation into the revised patched so that we get everything in the same commit?\n", "created_at": "2011-05-16 04:07:59", "user": 789801, "id": 1170902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170903", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2011-02-16 17:27:20 UTC\n\nNew patch file attached which renames the class to NullStore and lets it be set as config.cache_store = nil.\n\nThe documentation ticket (https://rails.lighthouseapp.com/projects/8994/tickets/6309) is to update the Rails guides with changes to caching that were in the 3.0.0 release. I added reference to the changes added by this ticket so the documentation would be complete, but other than that they are independent of each other.\n", "created_at": "2011-05-16 04:08:00", "user": 789801, "id": 1170903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170904", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-02-17 08:16:21 UTC\n\nHi Brian, thanks for the update.\n\nDocumentation is still missing though. The other patch has other stuff, but also explains the NullStore.\n\nThis is the patch that implements the NullStore. And thus is the patch where the documentation of NullStore has to be provided. As I commented before, the patch has to be self-contained. Code, tests, and docs. I'll amend with a line in the CHANGELOG (that's written by the committer), and up. Documentation does not have a separated workflow.\n\nWhen two months later someone does a git show of the commit, he will find everything there.\n", "created_at": "2011-05-16 04:08:01", "user": 789801, "id": 1170904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170905", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-02-17 09:18:03 UTC\n\nAh, just in case... My suggestion is that the docs in the other patch that cover NullStore be moved to this one. The rest of the docs you're contributing may have then their own patch, or you could push them directly via docrails if you prefer.\n\nThe point is that when a new feature is added, the ideal is a single self-contained patch.\n", "created_at": "2011-05-16 04:08:03", "user": 789801, "id": 1170905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170906", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2011-02-17 16:33:59 UTC\n\nI've submitted the documentation patch (less the NullStore reference) directly to docrails. I'll need to wait for that commit to be promoted to master before I can add the NullStore documentation since it needs to go in the middle of a completely rewritten section of text.\n", "created_at": "2011-05-16 04:08:04", "user": 789801, "id": 1170906}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170907", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-02-17 16:36:34 UTC\n\nExcellent, thanks very much. I'll do it myself as soon as possible, will post a followup here when done.\n", "created_at": "2011-05-16 04:08:05", "user": 789801, "id": 1170907}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170908", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-02-18 22:26:21 UTC\n\nHi Brian, just cross-merged rails and docrails.\n", "created_at": "2011-05-16 04:08:07", "user": 789801, "id": 1170908}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170909", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2011-02-21 18:10:28 UTC\n\nHere the patch with the Rails guide update.\n", "created_at": "2011-05-16 04:08:08", "user": 789801, "id": 1170909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170910", "text": "Attachments saved to Gist: http://gist.github.com/971742\n", "created_at": "2011-05-16 04:08:09", "user": 789801, "id": 1170910}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6129\nCreated by **Brian Durand** - 2011-04-14 10:17:34 UTC\n\nThis patch reduces memory bloat in ActiveRecord transactions. With the introduction after_commit and after_rollback callbacks references are kept to all records updated in a transaction until the transaction completes. This can lead to memory bloat with large transactions.\n\nThe code change replaces the references to weak references unless the objects implement these callbacks. This allows the garbage collector to reclaim objects that won't be executing a callback.\n", "labels": ["activerecord"], "number": 776, "updated_at": "2014-09-18 15:04:43", "user": 789801, "closed_at": "2013-02-22 18:46:07", "id": 904508, "title": "Reduce memory bloat in ActiveRecord transactions", "url": "https://api.github.com/repos/rails/rails/issues/776", "created_at": "2011-05-16 04:21:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170939", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-11 10:47:18 UTC\n\nI can't remember correctly what was wrong with WeakRef, but during development of IdentitiyMap, something new was implemented (ActiveSupport::WeakHash) and Weakling was used for JRuby: https://github.com/miloops/rails/commit/ada014929b01af5ce8ca5e6fdd13401bc3c392f5\n\nAlso you might want to talk to Emilio Tagua, he probably has some more details on that.\n", "created_at": "2011-05-16 04:21:41", "user": 789801, "id": 1170939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170940", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-11 10:53:02 UTC\n\nJust to be clear about IM stuff - it hasn't been merged into master yet, here is the pull request for that: https://github.com/rails/rails/pull/76\n", "created_at": "2011-05-16 04:21:42", "user": 789801, "id": 1170940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170941", "text": "_Imported from Lighthouse._\nComment by **Jacek Becela** - 2010-12-11 11:30:12 UTC\n\nI like the WeakRef solution very much - works for me(tm) but I don't use anything other than MRI. +1.\n", "created_at": "2011-05-16 04:21:44", "user": 789801, "id": 1170941}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170942", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2010-12-13 16:48:13 UTC\n\nIt looks to me like the identity map stuff is implementing a weak HashMap and in the jruby case utilizing the existing Java weak reference libraries. I don't see anything in the ActiveSupport::WeakHashMap or the Weakling code that would indicate there was a problem with how WeakRef itself is implemented. They both seem to be doing the same thing internally the WeakRef is doing.\n\nThis patch doesn't need a weak hash map or a reference queue so I think it should be fine with WeakRef. The weak reference exist only to support the callbacks that reset the state of new or deleted objects if the transaction fails. If the objects have been garbage collected because there are no hard references to them, then there is no need to invoke these callbacks.\n", "created_at": "2011-05-16 04:21:45", "user": 789801, "id": 1170942}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170943", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-12-13 18:43:27 UTC\n\nThe problem is that WeakRef uses `_id2ref` to look up an object.  `_id2ref` takes an object id, and returns the object corresponding with that id.  The problem is that object ids are not unique in MRI, the get reused.  That means that you could get back an object that isn't the object you were actually looking for.\n\nWe can easily demonstrate id reuse like so:\n\n```\nclass Foo; end\nclass Bar; end\n\nid_to_class = {}\n\nloop do\n  obj = [Foo, Bar].sort_by { rand }.first.new\n\n  if id_to_class.key? obj.object_id\n    puts \"obj id: #{obj.object_id} was reused\"\n\n    if id_to_class[obj.object_id] != obj.class\n      puts \"omg! they aren't even the same class!\"\n    end\n  end\n\n  id_to_class[obj.object_id] = obj.class\nend\n```\n\nNow imagine that two AR objects had object_ids that collided.\n\nI hesitate to apply this patch because of this problem.  Maybe we can find a different way?\n", "created_at": "2011-05-16 04:21:46", "user": 789801, "id": 1170943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170944", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2010-12-16 03:16:22 UTC\n\nI've thoroughly looked into the WeakRef implementation and how it works across the various Ruby runtimes and this is what I've found: it sucks.\n1. Object ids are not reused in Jruby, Rubinius, or IronRuby so WeakRefs do work properly (makes sense since these all run on a VM).\n2. Object ids are reused in MRI 1.8.7 and REE 1.8.7 do reuse object ids, but the WeakRef implementation handles that case properly because of the single system thread the process is running on.\n3. Object ids are reused in MRI 1.9.2 but the WeakRef implementation does not handle this properly since the garbage collector can run concurrently with threads allocating new objects. This messes up cleanup logic since finalizers attached to an object id can be run after that object id has been assigned to a new object.\n4. The WeakRef implementation does not scale on most runtimes. Performance on MRI 1.8.7, REE 1.8.7, and IronRuby is especially bad (performance on Rubinius is actually good, though). For some reason it extends Delegator which redefines all of the wrapped object's methods on initialization. This is both expensive on the CPU and can take up a lot of memory. On MRI 1.8.7 creating an array of 50,000 WeakRefs that wrap Object.new will balloon the heap to well over 1GB and creating each WeakRef takes 15-100 times longer to do. I have no idea why you would want to use a Delegator on a WeakRef unless you want your code to randomly break when the garbage collector kicks in, but it just doesn't seem worth it.\n5. The weakling gem provides a better WeakRef implementation for Jruby that uses the native Java weak references.\n\nSince WeakRef is either broken or performs horribly on 5 of the 6 Ruby runtimes I tested, and it is a really useful feature to have, I think it makes sense to add it to ActiveSupport so we can have a consistent working interface for weak references. Unfortunately, easier said than done. I started out simply reimplementing WeakRef to make it not extend Delegator and fix the bugs with 1.9. However, Jruby has it's own better implementation and since Rubinius has a very efficient implementation of WeakRef, but doesn't perform at all well with finalizers. Thus, I ended up with three different implementations of WeakReference and the runtime picks the best choice:\n1. Jruby uses one backed by Weakling if it is available otherwise it uses one backed by WeakRef\n2. Rubinius uses the implementation backed by WeakRef\n3. All other runtimes use my reimplementation of WeakRef\n\nThe interface is very simple:\n\n```\nobj = Object.new\nref = ActiveSupport::WeakReference.new(obj)\nref.object                # obj or nil if the reference has been reclaimed\nref.referenced_object_id  # obj.object_id\n```\n\nFurther, I used this implementation to create a WeakHash class where the values are weak references. This could be used to replace the WeakHash shown in the commit linked to above for the identity map stuff.\n\nAttached is a new patch with the original ActiveRecord changes along with the WeakReference implementations. Also attached is my test script in case anyone wants to verify the bizarre weak reference hell I've stumbled into. To run the test script, simply run it with your favorite flavor of ruby and pass one of object, weakref, or weakreference as the argument:\n\n```\nruby weakref_test.rb object         # baseline object creation without weak references\nruby weakref_test.rb weakref        # uses WeakRef\nruby weakref_test.rb weakreference  # uses new ActiveSupport::WeakReference\n```\n\nEach test will report on how long it takes to create 1000 instances of the specified class and then will run 100,000 iterations trying to find reused object id's. Be careful if you run the weakref tests under MRI, REE, or IronRuby because your process heap will grow to 2+GB and your computer may become severely unresponsive.\n", "created_at": "2011-05-16 04:21:48", "user": 789801, "id": 1170944}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170945", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-12-16 03:43:52 UTC\n\n@Brian Excellent work! The implementation looks great.  Is there a reason this should be in ActiveSupport?  IMO, a weakref / weakhash library would be useful outside rails.\n\nAlso, if you create a gem outside rails, you can create JRuby specific versions that depend on weakling, which guarantees that weakling is available.\n\nFinally, shouldn't we be filing bug reports / patches against MRI?\n\nWhat do you think?\n", "created_at": "2011-05-16 04:21:49", "user": 789801, "id": 1170945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170946", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2010-12-16 15:47:26 UTC\n\n@Aaron Totally agree that WeakRef needs to be fixed in Ruby 1.9 branch and  I will submit a patch for MRI. As for usefulness outside of Rails I also totally concur.\n\nMy original thought on adding it to ActiveSupport is that it fits in as some generally useful functionality that is either missing from core Ruby or not universally available like Base64, Gzip, OrderedHash, TimeWithZone, etc. I do, however, agree that the best method for sharing code like this in this day in age that has nothing to do with Rails (other than I need it to fix the ActiveRecord transaction issue) is as a separate gem. I can work on turning the patch code gem into a gem.\n\nBefore I do that, though, what are the thoughts on adding another gem dependency to Rails for this purpose? Is that the preferred direction for adding new generic functionality vs. updating ActiveSupport with new features?\n", "created_at": "2011-05-16 04:21:50", "user": 789801, "id": 1170946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170947", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2010-12-16 19:34:11 UTC\n\n@Brian Excellent. Ping me when you submit the patch to MRI and I will help convince the other ruby-core members.\n\nI prefer that this library would be in a gem, and I think I can convince the rails-core people that it is necessary.  Releasing the weakref code as a gem would be beneficial because we can release the gem out of band with rails.  Also, we can change dependencies depending on the target platform (like make this gem depend on weakling if the gem is installing on jruby).\n\nHave you thought about folding this code in to weakling?\n\nIf you need any help, let me know.  I think weakrefs are the correct way to fix this issue, so I'm happy to help.\n", "created_at": "2011-05-16 04:21:52", "user": 789801, "id": 1170947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170948", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2010-12-17 16:59:27 UTC\n\n@Aaron I've submitted a patch for Ruby 1.9\n\nhttp://redmine.ruby-lang.org/issues/show/4168\n", "created_at": "2011-05-16 04:21:53", "user": 789801, "id": 1170948}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170949", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2011-01-11 16:41:20 UTC\n\nI have released a new \"ref\" gem (http://rubygems.org/gems/ref) that provides working weak references for all the major ruby implementations. I have tested it on MRI, REE, YARV, Rubinius, Jruby, and IronRuby.\n\nI improved and expanded on my previous code to provide support for soft references, reference queues, and four different kinds of reference maps. Since someone previously mentioned that work going on to implement an identity map looked at weak references, they might find this code useful.\n\nAttached is an updated ActiveRecord patch that uses the new gem.\n", "created_at": "2011-05-16 04:21:54", "user": 789801, "id": 1170949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170950", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-04-12 00:00:08 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:21:56", "user": 789801, "id": 1170950}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170951", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2011-04-13 16:32:33 UTC\n\nStill an issue. This can be a serious issue where many records are updated or deleted within a transaction since the ActiveRecord objects tend to have large memory footprints and can quickly bloat the memory beyond what is available.\n\n[state:open]\n", "created_at": "2011-05-16 04:21:57", "user": 789801, "id": 1170951}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170952", "text": "Attachments saved to Gist: http://gist.github.com/971743\n", "created_at": "2011-05-16 04:21:58", "user": 789801, "id": 1170952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1532319", "text": "Hang on a minute - when an activerecord class doesn't implement after_commit or after_rollback, we should ask why do we need to make even a _weak_ reference to it?\n\nI believe the answer is that when we do a rollback from 3.0 on there is code that rolls back the state of all objects saved within the transaction (not just those that were in the save call stack at the time the exception that causes the rollback occurs, as 2.3 did).\n\nTo do that it needs to hold a reference, and holding only a weak reference would just mean that this functionality sometimes breaks.\n\nThat's a feature, and while I personally don't need that feature at all - and definitely need the framework to not hold on to all objects in the transaction, which is a huge bloating problem for my app - I'm sure there's people who rely on this feature by now.  2.3 not doing that was considered a longstanding bug by a couple of people.\n\nSo problems with the weak reference implementation don't seem the real issue to me.  The issue is that there is a direct conflict between the current feature set and what we need to do in order not to bloat.\n\nHere's a two-line patch you can use to try this out:\n\n``` ruby\ndiff --git a/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb b/activerecord/lib/active_record/connection_adapters/abstract/database_statements.r\nindex 2750ca0..b3f6713 100644\n--- a/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb\n+++ b/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb\n@@ -188,7 +188,8 @@ module ActiveRecord\n       # can be called.\n       def add_transaction_record(record)\n         last_batch = @_current_transaction_records.last\n-        last_batch << record if last_batch\n+        last_batch << record if last_batch && !(record._commit_callbacks.empty? && record._rollback_callbacks.empty?)\n+        last_batch\n       end\n```\n\nWhich produces the following test failures:\n\n```\n  1) Failure:\ntest_callback_rollback_in_create(TransactionTest)\n    [/Users/will/rails/activerecord/test/cases/transactions_test.rb:198:in `test_callback_rollback_in_create'\n     /Users/will/rails/activerecord/test/cases/transactions_test.rb:190:in `times'\n     /Users/will/rails/activerecord/test/cases/transactions_test.rb:190:in `test_callback_rollback_in_create'\n     /Users/will/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n     /Users/will/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n     /Users/will/rails/activesupport/lib/active_support/callbacks.rb:419:in `_run_setup_callbacks'\n     /Users/will/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run']:\nThe topic should have its old new_record value.\n<true> expected but was\n<false>.\n\n  2) Failure:\ntest_restore_active_record_state_for_all_records_in_a_transaction(TransactionTest)\n    [/Users/will/rails/activerecord/test/cases/transactions_test.rb:362:in `test_restore_active_record_state_for_all_records_in_a_transaction'\n     /Users/will/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n     /Users/will/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n     /Users/will/rails/activesupport/lib/active_support/callbacks.rb:419:in `_run_setup_callbacks'\n     /Users/will/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run']:\n<true> expected but was\n<false>.\n```\n\nIt's easy to make the first test pass using code like we had in 2.3 - rollback your state if you were in a #save call and it raises - without relying on the current add_to_transaction list, but the second test there is testing out this behavior of rolling back the state of any other objects that completed their own save earlier in the transaction.\n\nUnless I've missed something fundamental (in which case apologies), the only reason the weak ref patch didn't show up these failures was because GC didn't happen to run in between the weak reference being made and the rollback occurring.  But the point of weak refs is that it can, and a nondeterministic solution is off the cards.\n\nSo I think we¬†would need to have a way of declaring somewhere that for this transaction or this record save we don't care about rolling back object states if the transaction is rolled back later.  This is a very ugly solution, and not doing this by default is bound to catch people out regularly, but at least we can use it when required to stop our apps bloating.\n", "created_at": "2011-07-08 13:18:29", "user": 12062, "id": 1532319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1532525", "text": "Scratch that - I think I see now.  We don't care about rolling back the AR state if no-one holds a strong reference, because no-one should care about the side effects of rolling back state on an object they no longer reference?\n", "created_at": "2011-07-08 13:54:17", "user": 12062, "id": 1532525}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5431783", "text": "Is this still an issue?\n", "created_at": "2012-05-01 01:13:38", "user": 651597, "id": 5431783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5433045", "text": "Believe so - it was the last time I tested.\n", "created_at": "2012-05-01 03:30:34", "user": 12062, "id": 5433045}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5433060", "text": "BTW - see my pull request #3300 (https://github.com/rails/rails/pull/3300), which has a patch I use to work around this on a large rails site.  Works nicely, and doesn't change the default behavior.\n", "created_at": "2012-05-01 03:32:30", "user": 12062, "id": 5433060}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13963029", "text": "Closing it since #9068 was merged.\n", "created_at": "2013-02-22 18:46:07", "user": 47848, "id": 13963029}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6131\nCreated by **Michael Reinsch** - 2010-12-08 05:52:40 UTC\n\nWith Rails 3.0.3:  default_url_options set from within a controller (default_url_options[:something] = \"value\") won't be cleared after each request in a production environment.  Once set, the option will be used until overwritten or explicitly removed.  In development mode though, the option is dropped after each request.\n\nFor instance, we are using code like this:\n\n``` ruby\n  class ApplicationController\n    before_filter :set_session_id_parameter\n    def set_session_id_parameter\n      if device_needs_session_param_in_url?\n         session[:_dummy_param_to_force_session_init] = nil  # to make sure we have a session id\n         key = Rails.application.config.session_options[:key]\n         default_url_options[key] = request.session_options[:id]\n      end\n    end\n  end\n```\n\nIn development mode this works fine. But within a production environment (class caching enabled) the session ID parameter once set will stay for all subsequent requests until overwritten again.  This was unexpected behavior for us.  I also can't find any documentation indicating that this would be the case.\n", "labels": [], "number": 777, "updated_at": "2011-05-21 15:12:13", "user": 789801, "closed_at": "2011-05-21 15:12:13", "id": 904509, "title": "default_url_options set within a controller are not cleared after every request on production", "url": "https://api.github.com/repos/rails/rails/issues/777", "created_at": "2011-05-16 04:22:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170953", "text": "_Imported from Lighthouse._\nComment by **Manfred Stienstra** - 2011-02-25 10:43:22 UTC\n\nCorrect, this is exactly what they're supposed to do.\n", "created_at": "2011-05-16 04:22:04", "user": 789801, "id": 1170953}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6133\nCreated by **Mat Schaffer** - 2011-02-19 09:28:28 UTC\n\nThis works fine:\n\n```\nComment.where(\"id NOT IN (?)\", [1,2,3])\n```\n\nBut passed an empty array like so:\n\n```\nComment.where(\"id NOT IN (?)\", [])\n```\n\nGenerates this query which doesn't have the intended effect of including all records:\n\n```\nSELECT \"comments\".* FROM \"comments\" WHERE (id NOT IN (NULL))\n```\n\nSeems like empty arrays should interpolate as an empty string rather than NULL.\n", "labels": ["activerecord"], "number": 778, "updated_at": "2015-10-22 14:34:10", "user": 789801, "closed_at": "2013-04-12 21:19:54", "id": 904510, "title": "Empty array interpolates as NULL in where condition", "url": "https://api.github.com/repos/rails/rails/issues/778", "created_at": "2011-05-16 04:22:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170954", "text": "_Imported from Lighthouse._\nComment by **Mat Schaffer** - 2010-12-08 16:17:23 UTC\n\nUpdate: Used [''] as a workaround on sqlite. This doesn't seem to work on PostgreSQL.\n", "created_at": "2011-05-16 04:22:11", "user": 789801, "id": 1170954}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170955", "text": "_Imported from Lighthouse._\nComment by **Mat Schaffer** - 2010-12-08 16:35:29 UTC\n\nLooks like both sqlite and PostgreSQL adapters (tested via heroku's console) both generate the NULL. PostgreSQL seems unhappy with the empty array though since it considers (id NOT IN ()) to be invalid.\n", "created_at": "2011-05-16 04:22:12", "user": 789801, "id": 1170955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170956", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2010-12-19 11:23:15 UTC\n\n@Mat Why do you think that \n\n```\nid NOT IN (NULL)\n```\n\nis incorrect?\n\nFor me everything works correct.\n", "created_at": "2011-05-16 04:22:14", "user": 789801, "id": 1170956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170957", "text": "_Imported from Lighthouse._\nComment by **Mat Schaffer** - 2010-12-19 20:38:06 UTC\n\nOriginally I was expecting NOT IN () which at least under sqlite had the intended effect of giving me all records. But I'm pretty sure postgres didn't like that either. Right now I have an \"if ids.empty?\" in my model. But that seemed less than awesome.\n\nIs there maybe a better way to do this using an arel condition that I missed?\n", "created_at": "2011-05-16 04:22:15", "user": 789801, "id": 1170957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170958", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2010-12-19 22:55:14 UTC\n\n@Mat, Oh, I think maybe you are right, and it is a bug, because in Postgres this query will return empty set of records, so in Ruby you will get an empty array. And I think we expect all records.\n", "created_at": "2011-05-16 04:22:16", "user": 789801, "id": 1170958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170959", "text": "_Imported from Lighthouse._\nComment by **gmile** - 2011-02-12 12:59:08 UTC\n\n@2kan, going further, does \n\n``` sql\nIN (NULL)\n```\n\never works for you? For me, it seems that MySQL doesn't want to retrieve any records, while trying to do something like (codes from head):\n\n``` ruby\nPost.all(\n  :joins      => \"LEFT JOIN view_logs ON posts.id = view_logs.post_id\",\n  :conditions => { :view_logs => { :user_id => [1, 2, nil] }\n}\n```\n\nThe need to retrieve using `nil` may appear when using, for example `LEFT JOIN`, where associated records with nulls may appear. I believe, the _true_ retrieve of records with nulls in terms of SQL should look like\n\n``` sql\nview_logs.user_id IS NULL\n```\n\nThus, I believe, the above `Post.all(...)` retrieval should generate the following SQL piece:\n\n``` sql\n... WHERE (view_logs.user_id IN (1, 2) OR view_logs.user_id IS NULL)\n```\n\nI've made an Arel patch to fix the issue, as well as a patch with a couple of Rails test to check the behavior. Could you plese take a look on them and say what you think?\n", "created_at": "2011-05-16 04:22:18", "user": 789801, "id": 1170959}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170960", "text": "Attachments saved to Gist: http://gist.github.com/971744\n", "created_at": "2011-05-16 04:22:19", "user": 789801, "id": 1170960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4710859", "text": "Any one fixed this issue? I still found this behaviour in 3.2.2. \n\nIt is quite confusion as I expect that ActiveRecord should return all `Post` if I go `Post.where('status NOT IN (?)', [])`\n", "created_at": "2012-03-27 06:40:57", "user": 198821, "id": 4710859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8596818", "text": "Still seeing this in 3.2.8 on Postgres.\n", "created_at": "2012-09-16 17:31:51", "user": 46964, "id": 8596818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8596849", "text": "Just to be 100% clear, I'm seeing this:\n\n```\n1.9.3p194 :007 > Foo.where('id NOT IN (?)', [])\n  Foo Load (0.6ms)  SELECT \"foos\".* FROM \"foos\" WHERE (id NOT IN (NULL))\n```\n\nwhere I should be seeing:\n\n```\n1.9.3p194 :007 > Foo.where('id NOT IN (?)', [])\n  Foo Load (0.6ms)  SELECT \"foos\".* FROM \"foos\" WHERE (id NOT IN (SELECT 1 WHERE false))\n```\n", "created_at": "2012-09-16 17:34:17", "user": 46964, "id": 8596849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8598124", "text": "Re-opening since you're seeing this on 3.2.x\n", "created_at": "2012-09-16 19:38:40", "user": 27786, "id": 8598124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11948146", "text": "I confirm that this issue is still relevant for 3.2.10.\n", "created_at": "2013-01-07 11:13:35", "user": 17348, "id": 11948146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13381868", "text": "+1 also having this issue.\n", "created_at": "2013-02-11 14:22:51", "user": 126989, "id": 13381868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13389643", "text": "This will be fixed with the next release of ARel 3.0.x\n", "created_at": "2013-02-11 16:52:40", "user": 160941, "id": 13389643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13389764", "text": "Excellent! Thanks for all your hard work @guilleiguaran et al!\n", "created_at": "2013-02-11 16:54:44", "user": 46964, "id": 13389764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13389874", "text": "kudos to @ernie that worked the last weekend backporting the fix to ARel 3.0.x!!!\n\nhttps://github.com/rails/arel/commit/d3a8fa952792c284eb63a91e36a593683ad76b93\n", "created_at": "2013-02-11 16:56:43", "user": 160941, "id": 13389874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13397880", "text": "@guilleiguaran heh thanks for the kudos, but to be fair, it was only a 5 minute cherry-pick of my commit to master from a while back. :)\n", "created_at": "2013-02-11 19:30:48", "user": 14947, "id": 13397880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13398010", "text": "I should also add that if you're using string SQL, you're still not going to see what you'd like. But as long as you're using ARel predicates (if you use `:column => []` syntax, you are, via PredicateBuilder) then you should be good.\n", "created_at": "2013-02-11 19:32:59", "user": 14947, "id": 13398010}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16318229", "text": "Since Arel 3.0.2 is now out, I'm giving this a close.\n", "created_at": "2013-04-12 21:19:54", "user": 27786, "id": 16318229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17274097", "text": "This issue still exists in rails 3.2.11. While using empty array it returns nil result.\n\n```\nComment.where(\"id NOT IN (?)\", [])\n```\n\nreturns empty array.\n\nIt will work fine if array elements are joined as a string i.e:\n\n```\n@ids = []           #some array\nComment.where(\"id NOT IN (?)\", @ids.join(','))\n```\n", "created_at": "2013-05-01 09:14:32", "user": 1139891, "id": 17274097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17839522", "text": "I'm running Arel 3.0.2 and still seeing the exact same but I reported earlier.\n\n```\nirb(main):030:0> User.where('id NOT IN (?)', [])\n  User Load (1.1ms)  SELECT \"users\".* FROM \"users\" WHERE (id NOT IN (NULL))\n=> []\n```\n\nAm I missing something? Is there some circumstance under which this is correct behavior?\n", "created_at": "2013-05-13 20:46:28", "user": 46964, "id": 17839522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19079685", "text": "I have the same problem using Rails 4.0.0.rc1 and arel 4.0.0 with Postgresql.\n", "created_at": "2013-06-06 22:56:46", "user": 38416, "id": 19079685}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19083673", "text": "I figured out the solution: `User.where.not(id: [])` works as expected in Rails 4.0.0.rc1 and is also more elegant!\n\nBut I still think that `User.where('id NOT IN (?)', [])` should be equivalent to `User.where.not(id: [])`\n", "created_at": "2013-06-07 01:01:40", "user": 38416, "id": 19083673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19084507", "text": "@guigs Glad to hear you got something working on Rails 4! Too bad those of us on 3 though are still stuck having to write some nasty code to work around this :(\n", "created_at": "2013-06-07 01:36:19", "user": 46964, "id": 19084507}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/30706187", "text": "+1 would like to see this fixed in Rails 3\n", "created_at": "2013-12-16 22:09:31", "user": 1778835, "id": 30706187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31062433", "text": "@zephyr-dev : This won't be fixed in Rails 3 since we are not supporting this version anymore (only 3.2.x can receive eventual security fixes).\n", "created_at": "2013-12-21 12:32:07", "user": 354185, "id": 31062433}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/61442842", "text": "I think @guigs makes a good point that `User.where('id NOT IN (?)', [])` should be equivalent to `User.where.not(id: [])`.  Is the reasoning behind that simply that NOT IN is old syntax?\n", "created_at": "2014-11-03 05:56:10", "user": 1051674, "id": 61442842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62522177", "text": "not fixed in Rails 3, sorta a bummer\n", "created_at": "2014-11-11 09:29:13", "user": 452219, "id": 62522177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62522847", "text": "A slightly unsafe way in Rails 3 to fix this is to just create a fake array with an id that will likely not exist. For example, in Heroku, record ids go in increments of 10, so you'd never have a record id of 2. So you could do something like this:\n\n// check if the array count is 0\nif arr.count < 1\n//dump a fake value into the array\narr = [2]\nend\n\n//should never be null now\nTag.where('id not in (?)',arr)\n\n(damn I forget how to show hash symbols in markdown)\n", "created_at": "2014-11-11 09:36:00", "user": 452219, "id": 62522847}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62527144", "text": "@masterkrang use `Markdown supported` button on above of the editor (textarea) to find out how to format code.\n", "created_at": "2014-11-11 10:15:08", "user": 5091, "id": 62527144}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/104732804", "text": "I see this issue has been closed, but I am still seeing this behavior in Rails 4.1 with postgres.\n\n```\nUser.where('report_ids NOT IN (?)', [])\n=>   User Load (7.0ms)  SELECT \"users\".* FROM \"users\"  WHERE (report_ids NOT IN (NULL))\n```\n\nSince I am using postgres arrays the following worked for me for querying all none empty arrays.\n\n```\nUser.where(\"report_ids != ?\", \"{}\")\n```\n", "created_at": "2015-05-22 18:07:52", "user": 45213, "id": 104732804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/148769836", "text": "@iDiogenes +1, reproduced for me too in rails 4.2\n", "created_at": "2015-10-16 16:56:40", "user": 833064, "id": 148769836}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/150168202", "text": "@jerefrer please feel free to open a pull request if you can see a way of solving this. Scrolling through nearly 5 years of comments, I see complaints that the currently-generated SQL is wrong, but no suggestion of what it should look like instead (other than `IN ()`, which is not well-formed SQL, and works only in SQLite).\n\nEven absent a PR, I'd be glad to see a new issue, that specifically describes what we're doing wrong, _and what \"right\" looks like_.\n\nI'm actually unclear as to why this behaviour is causing you any problem; AIUI, it should only be (unavoidably) problematic for `NOT IN` conditions.\n\n---\n\nFWIW, with Rails 5, I would spell that something like:\n\n``` ruby\n@messages = messages.where(\"subject LIKE ?\", params[:search]).or(\n              messages.where(sender_ids: user_ids))\n```\n", "created_at": "2015-10-22 10:06:36", "user": 1034, "id": 150168202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/150242954", "text": "@matthewd As you may have seen I have removed my comments. I was getting an error because of a mistake I made: I did `where('sender_id IN :user_ids', user_ids)` instead of `where('sender_id IN (:user_ids)', user_ids)`. Adding the `()` provided the expected resultats so my complain was not really relevant to this debate.\n", "created_at": "2015-10-22 14:33:41", "user": 140954, "id": 150242954}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6136\nCreated by **Paul Schreiber** - 2010-12-08 22:42:14 UTC\n\nSuppose you have a validation rule such as this:\n `validates_inclusion_of :foo, :in => [1,2,3]`\n\nCurrently, you can only pass a constant value to `:in`.\n\nSuppose that the list of valid values changes. In that case, you have to resort to workarounds like this:\n\n``` ruby\nvalidate :validate_foo\n\ndef validate_foo\n  unless my_foo_list.include?(foo)\n    self.errors.add(:foo, I18n.t(\"activerecord.errors.models.bar.attributes.foo.inclusion\"))\n  end\nend\n```\n\nAnd you have to write this for every attribute in every model. I suppose you could do some trickery to refactor this, but it's still a lot of extra code that's not very DRY.\n\nIt would be nice if you could pass a symbol to `:in`, and have that symbol evaluated.\n\n``` ruby\nvalidates_inclusion_of :foo, :in => :valid_foo_values_list\n\ndef valid_foo_values_list\n if things?\n   [1,2,3]\n else\n   [4,5,6]\n end\nend\n```\n\nIn lib/active_record/validations.rb, in validates_inclusion_of, we have this call\n`enum = configuration[:in] || configuration[:within]`\n\nA simple would be to add this line:\n`enum = self.send(enum) if enum.is_a?(Symbol)`\n\nHowever, I suspect there are other implications.\n", "labels": [], "number": 779, "updated_at": "2011-07-05 03:43:30", "user": 789801, "closed_at": "2011-05-21 15:12:13", "id": 904511, "title": "Allow dynamic lists with validates_inclusion_of :in", "url": "https://api.github.com/repos/rails/rails/issues/779", "created_at": "2011-05-16 04:22:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170961", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-09 00:00:12 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:22:25", "user": 789801, "id": 1170961}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170962", "text": "_Imported from Lighthouse._\nComment by **Paul Schreiber** - 2011-03-09 00:06:33 UTC\n\n[state:open].\n", "created_at": "2011-05-16 04:22:27", "user": 789801, "id": 1170962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1501345", "text": "Please reopen.\n", "created_at": "2011-07-05 03:43:30", "user": 86784, "id": 1501345}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6147\nCreated by **Brandon Dimcheff** - 2011-02-17 08:07:24 UTC\n\nI tried to add this to 1108, since it is related, but it failed without a flash message.\n\nfind_or_create is still messed up in 2-3-stable.  Check out this failing test case, and you'll see that the proper values aren't being set when find_or_create is called on an association with a hash.  It looks like it's sticking a yamlized version of the hash into the body field and not setting the type at all.\n\nThis effectively prevents you from doing anything along the lines of\n\n``` ruby\nobject.association.find_or_create_by_name(:name => 'foo', :title => 'bar')\n```\n\nsince it seems to mess up name and just ignore title.\n", "labels": [], "number": 780, "updated_at": "2011-05-21 15:12:13", "user": 789801, "closed_at": "2011-05-21 15:12:13", "id": 904512, "title": "find_or_create via has_many fails for hash parameters", "url": "https://api.github.com/repos/rails/rails/issues/780", "created_at": "2011-05-16 04:22:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170964", "text": "_Imported from Lighthouse._\nComment by **Brandon Dimcheff** - 2010-12-11 06:57:29 UTC\n\nI guess lighthouse won't let me upload a patch, so [here it is](https://gist.github.com/737211)\n", "created_at": "2011-05-16 04:22:34", "user": 789801, "id": 1170964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170965", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-12-11 23:53:02 UTC\n\nThis is not supported by Rails at the moment. Please try my gem find_by_hash: http://github.com/radar/find_by_hash to get this functionality.\n", "created_at": "2011-05-16 04:22:36", "user": 789801, "id": 1170965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170966", "text": "_Imported from Lighthouse._\nComment by **Brandon Dimcheff** - 2010-12-12 03:34:35 UTC\n\n@ryan - This as worked for me in rails 2 for a while.  In the [docs](http://railsapi.com/doc/rails-v2.3.8/classes/ActiveRecord/Base.html) it shows that you can do this with an ActiveRecord class directly:\n\n``` ruby\nTag.find_or_create_by_name(:name => \"rails\", :creator => current_user)\n```\n\nNow I realize that I'm doing this with an association instead of directly on the class, but why should the API be any different?\n", "created_at": "2011-05-16 04:22:37", "user": 789801, "id": 1170966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170967", "text": "_Imported from Lighthouse._\nComment by **Brandon Dimcheff** - 2010-12-12 03:36:39 UTC\n\nI just edited the ticket to fix an error - find_or_create works properly on a model class, as far as I can tell.  It does not work properly when called on an association.\n", "created_at": "2011-05-16 04:22:39", "user": 789801, "id": 1170967}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170968", "text": "_Imported from Lighthouse._\nComment by **James Badger** - 2010-12-15 22:25:45 UTC\n\nI have also experienced this bug, and I am working on a patch.\n\nI tried to use your test Brandon, but I was unable to properly set the 'type' attribute for the Comment model, it would always evaluate to `nil`. This error is also present in `test_find_or_create_by_with_additional_parameters` (from #1108), which does not check to see if the 'type' was actually set (so no error or failure is raised). As 'type' is reserved for STI in this context, and 'test' is not a valid subclass for Comment.\n\nFor that reason, I rewrote them with the Author-Post association instead, which may fit the 'additional attributes setting' part of the test.\n", "created_at": "2011-05-16 04:22:41", "user": 789801, "id": 1170968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170969", "text": "_Imported from Lighthouse._\nComment by **Brandon Dimcheff** - 2010-12-15 23:07:15 UTC\n\nah, ok yeah that makes sense. Since I never got that test passing, I didn't run into that problem. I just used the model objects that were already being used in the other activerecord tests. I think those test the type field, but maybe they do so without reloading the object, so the type is deceptively set correctly...\n", "created_at": "2011-05-16 04:22:42", "user": 789801, "id": 1170969}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170970", "text": "_Imported from Lighthouse._\nComment by **James Badger** - 2010-12-16 02:02:02 UTC\n\nhttps://gist.github.com/742909\n\nHere is my patch, which (as the test case shows) attempts to fix a few scenarios:\n- Finding an existing model using `find_or_create_by_title(\"A fine post\")`\n- Creating a new model using `find_or_create_by_title(:title => \"A wood post\", :body => \"It is made of wood.\")`\n- Creating a new model using `find_or_create_by_title(\"An iron post\", :body => \"A heavy post made of iron.\")`\n- Creating a new model using `find_or_create_by_title_and_body(\"A witness post\", \"The other post was near here.\")`\n\nThe one in which I am not sure what type of behaviour would be preferred is the last one, where\n<code>\nfind_or_create_by_title_and_body(\"The last post\", \"If only they were this easy to find.\", {:title => \"Maybe not the last post\", :body => \"Another post.\"})\n</code>\nwill use the hash-defined values over the string values. This could be reversed to prefer the string values by using a custom `merge!` block in the patch.\n", "created_at": "2011-05-16 04:22:44", "user": 789801, "id": 1170970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170971", "text": "_Imported from Lighthouse._\nComment by **Pat George** - 2011-02-09 17:57:12 UTC\n\n+1.  I just updated an old Rails 2.3.4 project to 2.3.11 (for the security update) only to discover all our \"object.association.find_or_create_by_attr1_and_attr2(hash)\" calls no longer work.\n\nI went back to 2.3.5 and tested it each Rails version.  It stopped working all together in 2.3.9 throwing an \"ArgumentError: Unknown key(s)\" error (which I believe is what issue 1108 was about).  In 2.3.11 it no longer throws the error but instead assigns the entire hash to the first attribute:\n\n> > account = Account.first; params = { :url => \"google2311.com\", :token => \"foo2311\", :user_id => account.users.first.id }\n> > account.links.find_or_create_by_url_and_token params\n> > _.url\n> > => {:token=>\"foo2311\", :user_id=>1, :url=>\"google2311.com\"}\n\nIf this isn't supported anymore, fine.  But know that it's a regression.\n", "created_at": "2011-05-16 04:22:45", "user": 789801, "id": 1170971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170972", "text": "_Imported from Lighthouse._\nComment by **Pat George** - 2011-02-09 17:59:05 UTC\n\nSorry for the bad  code block.\n\n```\n>> account = Account.first; params = { :url => \"google2311.com\", :token => \"foo2311\", :user_id => account.users.first.id }\n>> account.links.find_or_create_by_url_and_token params\n>> _.url\n=> {:token=>\"foo2311\", :user_id=>1, :url=>\"google2311.com\"}\n```\n", "created_at": "2011-05-16 04:22:47", "user": 789801, "id": 1170972}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170974", "text": "_Imported from Lighthouse._\nComment by **Brandon Dimcheff** - 2011-02-10 16:38:50 UTC\n\n@pat, yes that was my experience as well.  I stuck a git checkout of rails in vendor/rails and git bisected until I found the commit that caused the problem, which wasn't released until 2.3.9, I think.  I haven't tried James' patch yet, but if it works, maybe we can get it accepted...\n\nThis is definitely a regression, and it _logically_ should work, considering it works when it's not using an association proxy.\n", "created_at": "2011-05-16 04:22:48", "user": 789801, "id": 1170974}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170975", "text": "_Imported from Lighthouse._\nComment by **Brian Finney** - 2011-03-08 02:58:39 UTC\n\nBump, also running into this issue.  This is also blocking for us to update to the latest rails-2.3 from 2.3.8\n\n@James, That patch is close but misses a few edge cases that are handled by ActiveRecord::Base#find_or_create_by_*.\n\nAttaching a patch that incorporates James' tests, plus a few more edge cases, and fixes this bug.\n\nAlso as pull request at https://github.com/rails/rails/pull/207\n\nThanks\nBrian\n", "created_at": "2011-05-16 04:22:50", "user": 789801, "id": 1170975}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170976", "text": "_Imported from Lighthouse._\nComment by **Brian Finney** - 2011-03-11 21:34:30 UTC\n\nUpdated patch from pull request\n", "created_at": "2011-05-16 04:22:51", "user": 789801, "id": 1170976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170977", "text": "_Imported from Lighthouse._\nComment by **jeff (at snowmoonsoftware)** - 2011-05-04 17:16:12 UTC\n\nBump. Brian, I applied your patch to rails 2.3.11, and still see a problem with find_or_create_by with multiple parameters:\n\n```\np.niod_metrics.find_or_create_by_metric_type_id_and_month(666, Date.parse('2011-06-01'))\n\nNiodMetric Load (0.5ms)   SELECT * FROM 'niod_metrics' WHERE ('niod_metrics'.'month' IS NULL AND \n'niod_metrics'.'metric_type_id' IN( 666,'2011-06-01' )) AND ('niod_metrics'.niodmetrics_id = 1750 AND \n'niod_metrics'.niodmetrics_type = 'Profile') LIMIT 1\n\n\nNiodMetric Create (0.2ms)   INSERT INTO 'niod_metrics' ('created_at', 'month', 'updated_at', 'last_activity_at', \n'niodmetrics_type', 'value', 'metric_type_id', 'niodmetrics_id') VALUES('2011-05-04 17:10:44', '2011-06-01', \n'2011-05-04 17:10:44', NULL, 'Profile', NULL, 666, 1750)\n```\n\nThe insert is correct, but the find isn't. This is blocking a move from rails 2.3.4 to 2.3.11.\n", "created_at": "2011-05-16 04:22:53", "user": 789801, "id": 1170977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170978", "text": "Attachments saved to Gist: http://gist.github.com/971745\n", "created_at": "2011-05-16 04:22:54", "user": 789801, "id": 1170978}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6150\nCreated by **Wojciech Wnƒôtrzak** - 2010-12-11 14:47:21 UTC\n\nThe best way to show the problem will be by code:\n\n``` ruby\nclass User < ActiveRecord::Base\n  has_one :address, :dependent => :nullify\n  before_destroy :address_do_something\n  delegate :do_something, :to => :address, :prefix => true\nend\n```\n\n``` ruby\nclass Address < ActiveRecord::Base\n  belongs_to :user\n  def do_something\n    # do something with user which shouldn't be nil\n    user.inspect\n  end\nend\n```\n\nProblem is when method do_something is called by User `before_destroy` callback. When option `dependent` is specified to `nullify`, associated user is nil (this is happening before destroy).\nShouldn't this associated object be set to nil after destroy?\n\nYou can see and check that bug in sample app:\nhttps://github.com/morgoth/nullify-bug\n", "labels": [], "number": 781, "updated_at": "2011-05-21 15:12:13", "user": 789801, "closed_at": "2011-05-21 15:12:13", "id": 904513, "title": "Has one association nullifies object to early", "url": "https://api.github.com/repos/rails/rails/issues/781", "created_at": "2011-05-16 04:23:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170979", "text": "_Imported from Lighthouse._\nComment by **Wojciech Wnƒôtrzak** - 2010-12-12 11:41:47 UTC\n\nAfter digging a while I found that everything works fine when `has_one` is placed below `before_destroy` method.\nThis is caused by defining callback method `:has_one_dependent_nullify_for_address` by method `has_one`.\nSee code here:\n[Defining method executed by before_destroy](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations.rb#L1729)\n\nOrder of methods passed to `before_destroy` is important.\nMaybe methods generated by rails should be somehow placed at the end of this chain?\n\nAnd another question:\nIs there a proper order of using methods like: `has_one`, `validates`, `before_destroy`, etc. in ruby file, that will avoid problems like this one?\n", "created_at": "2011-05-16 04:23:00", "user": 789801, "id": 1170979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170980", "text": "_Imported from Lighthouse._\nComment by **Wojciech Wnƒôtrzak** - 2010-12-16 09:41:35 UTC\n\nI added failing test.\nYou can check, that test will pass if line:\n\n```\n`before_destroy { |company| company.account && company.account.set_dependent_firm_name }`\n```\n\nwill be moved to top of file.\nReason of this is as described in previous comment.\n", "created_at": "2011-05-16 04:23:02", "user": 789801, "id": 1170980}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170981", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-17 00:00:11 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:23:03", "user": 789801, "id": 1170981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170982", "text": "_Imported from Lighthouse._\nComment by **Wojciech Wnƒôtrzak** - 2011-03-18 16:35:25 UTC\n\nThis problem still appears on rails master.\nI updated sample failing app to rails master: https://github.com/morgoth/nullify-bug\n\nI'm also submitting rebased patch with failing test.\n\n[state:open]\n", "created_at": "2011-05-16 04:23:05", "user": 789801, "id": 1170982}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170983", "text": "Attachments saved to Gist: http://gist.github.com/971746\n", "created_at": "2011-05-16 04:23:06", "user": 789801, "id": 1170983}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6151\nCreated by **Ches Martin** - 2010-12-11 20:04:57 UTC\n\nTo complement the existing helpers we have for HTML5 input types like email, url, telephone, number, range and search, this patch adds simple helpers with tests for all of the date/time input types:\n\ndate, month, week, time, datetime and datetime-local\n\nBy virtue of the usual helper support for passing HTML options, you may of course specify the new attributes that these inputs support:\n\n```\n<%= date_field :todo, :due_date, :min => Date.today.rfc3339 %>\n```\n\nPatch is also available on \"a branch on GitHub\":https://github.com/ches/rails/compare/master...html5-date-form-helpers for the pull/merge convenience you dig the most :-)\n\nReferences:\n\nhttp://diveintohtml5.org/forms.html#type-date\nhttp://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state\n", "labels": [], "number": 782, "updated_at": "2011-05-21 15:12:13", "user": 789801, "closed_at": "2011-05-21 15:12:13", "id": 904514, "title": "add form helpers for date and time HTML5 input types", "url": "https://api.github.com/repos/rails/rails/issues/782", "created_at": "2011-05-16 04:23:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170984", "text": "_Imported from Lighthouse._\nComment by **Thomas van der Pol** - 2011-02-17 13:10:23 UTC\n\nPatch does what it says on the tin, tests are correct and exhaustive.\n\nI'd suggest a patch to http://guides.rubyonrails.org/form_helpers.html once this goes through describing the new functionality.\n", "created_at": "2011-05-16 04:23:12", "user": 789801, "id": 1170984}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170985", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-17 13:51:22 UTC\n\nI will look into this tomorrow and test if it applies cleanly, if it does I will follow up with core.\n", "created_at": "2011-05-16 04:23:13", "user": 789801, "id": 1170985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170986", "text": "_Imported from Lighthouse._\nComment by **Ches Martin** - 2011-02-17 15:18:30 UTC\n\nCool, I can rebase on current master and verify tests if it helps. Also happy to take a look into a doc patch for the Form Helpers guide as Thomas suggested.\n", "created_at": "2011-05-16 04:23:15", "user": 789801, "id": 1170986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170988", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-17 15:26:32 UTC\n\nChes, please do, after you have tested it out I will test it. If all goes well, I will push it up the chain.\n\nThanks\n", "created_at": "2011-05-16 04:23:16", "user": 789801, "id": 1170988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170989", "text": "_Imported from Lighthouse._\nComment by **Ches Martin** - 2011-02-17 17:39:11 UTC\n\nMy GitHub branch linked above is now rebased on current master and the relevant tests pass. Updated patch is attached.\n", "created_at": "2011-05-16 04:23:17", "user": 789801, "id": 1170989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170990", "text": "Attachments saved to Gist: http://gist.github.com/971747\n", "created_at": "2011-05-16 04:23:19", "user": 789801, "id": 1170990}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6157\nCreated by **Peer Allan** - 2011-01-18 08:52:34 UTC\n\nActiveRecord 3 based Rubygem\nAt our company we had to integrate with a legacy database system. To manage it we created a nice little gem to handle it. Basically the gem was just a collection of ActiveRecord models, nicely namespaced, so that we could include it in any application that made have needed access to that db.  In code outside of Rails, where we commonly used the gem we would just do this,\n\n``` ruby\n  require 'legacy_database'\n  LegacyDatabase::Base.establish_connection(...)\n```\n\nUsing ActiveRecord 3 this no longer works when used outside of Rails. \n\n``` ruby\n  require 'legacy_database' # <= raises ActiveRecord::ConnectionNotEstablished\n  LegacyDatabase::Base.establish_connection(...)\n```\n\nThe backtrace showed us that when the gem was being loaded when it hits the first scope call Arel attempts to connect to the database. Its a classic chicken/egg situation. You can't initialize the connection until you load the gem and you can't load the gem without initializing the connection.\n\nIn our situation we aren't using the gem in concert with any other ActiveRecord connections so we are able to use ActiveRecord::Base to establish the connection.\n\n``` ruby\n  require 'activerecord'\n  ActiveRecord::Base.establish_connection(...)\n  require 'legacy_database'\n  LegacyDatabase::Foo.find(1)  # It work's\n```\n\nThis naturally is not an ideal situation.\n", "labels": [], "number": 783, "updated_at": "2011-05-21 15:12:14", "user": 789801, "closed_at": "2011-05-21 15:12:13", "id": 904516, "title": "ActiveRecord scope class method requires a database connection", "url": "https://api.github.com/repos/rails/rails/issues/783", "created_at": "2011-05-16 04:23:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170991", "text": "_Imported from Lighthouse._\nComment by **Nick** - 2011-01-14 10:56:56 UTC\n\nI've just come across this issue in another project where we manually require AR + all the models, then establish the connection some time afterwards.\n\nMy workaround is a class method encapsulating an anonymous scope, e.g.\n\nclass Foo\n  def self.online\n    self.scoped.joins(:bar).where(:bars => {:disconnected_at => nil})\n  end\nend\n\nSince AR/Arel can't validate such anonymous scopes at require-time, it gets around the problem. It does raise the question of exactly how useful that validation is, though. Obviously, they could just defer it until require_connection is called if there's no connection at require time - but maybe it's not useful and should just be quietly dropped in favour of an error at runtime when you try to use a named scope referencing an invisible table?\n", "created_at": "2011-05-16 04:23:25", "user": 789801, "id": 1170991}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170992", "text": "_Imported from Lighthouse._\nComment by **Peer Allan** - 2011-03-08 14:30:02 UTC\n\nMy original post described a workaround for when you are encountering this problem outside a Rails app.  Since then I have tried to work around this in a couple more ways in a Rails 3 application and am not having much luck.  Our legacy gem is formatted very much like ActiveRecord\n\n``` ruby\nmodule LegacyDatabase\n  class Base < ActiveRecord::Base\n    establish_connection :legacy_database # <= important line\n  end\nend\n```\n\nIf we leave the establish_connection in the gem then we get a configuration not found error. (legacy_database database is not configured (ActiveRecord::AdapterNotSpecified))\n\nIf we remove that line then the app starts to load the models that are contained in the gem.  However, once it hits an association, for example:\n\n``` ruby\nmodule LegacyDatabase\n  class Foo < Base\n    has_and_belongs_to_many :bars\n  end\nend\n```\n\nWe get a ActiveRecord::ConnectionNotEstablished error.  Here is the important part of the backtrace:\n\n```\nfrom /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/connection_adapters/abstract/connection_specification.rb:97:in `retrieve_connection'\nfrom /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/connection_adapters/abstract/connection_specification.rb:89:in `connection'\nfrom /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/associations.rb:1804:in `create_has_and_belongs_to_many_reflection'\nfrom /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/associations.rb:1411:in `has_and_belongs_to_many'\nfrom /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/autosave_association.rb:137:in `has_and_belongs_to_many'\n```\n\nAt this point, we have exhausted all avenues that we can think of, to get around this. It is very unfortunate as this completely blocks our Rails 3 upgrade. Thanks.\n", "created_at": "2011-05-16 04:23:27", "user": 789801, "id": 1170992}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170993", "text": "_Imported from Lighthouse._\nComment by **Aaron Patterson** - 2011-03-08 16:21:55 UTC\n\n@Peer, can you provide the source for \"legacy_database\".  I cannot debug the problem without knowing why requiring that file will produce an `ActiveRecord::ConnectionNotEstablished` exception.\n", "created_at": "2011-05-16 04:23:29", "user": 789801, "id": 1170993}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170994", "text": "_Imported from Lighthouse._\nComment by **Peer Allan** - 2011-03-08 17:40:28 UTC\n\nAttached is a simple gem that demonstrates the problem.  Attempt to load it into a Rails 3 application and you will see the errors.  Detailed instructions are shown below and included in the legacy_database.rb file.  There are 3 scenarios listed in terms of importance.\n\nThree things can be tested by including this gem in your app\n1. scope calls will attempt to connect to the database before a \n   connection has been established\n2. has_and_belong_to_many associations in the models will attempt to\n   connect to the database before a connection has been established\n3. an establish_connection in the Base class as shown below will\n   not work regardless of database.yml settings. Although, setting\n   a gem up this way is probably not useful anyway ;)\n\nInstructions:\n1. Include this gem in your rails 3 app's Gemfile\n   gem 'legacy_database', :path => '/path/to/legacy_database'\n2. bundle install the gem\n\nScenario 1\n1) comment out the habtm lines in foo.rb and bar.rb\n2) ensure the scope line in baz.rb is not commented out\n3) attempt to load the console\n\nScenario 2\n1) comment out scope in baz.rb\n2) Ensure the habtm lines in bar.rb and foo.rb are not commented out\n3) attempt to load the console\n\nScenario 3\n1) uncomment the 'establish_connection' line in this file and attempt\nto load a console\n2) add a legacdy_database config to your database.yml and load the console\n\nI also tested it with a \"has_many\" and a \"has_many :through\" relationships which did not cause the same problem. Therefore the workaround if a habtm is required is that you have to use a \"has_many :through\".  That said, the association issues and establish_connection are only related side effects. Its the problem that primarily affects us (so now we have a workaround, yay!). The scope issues is the big fish in this ticket.\n", "created_at": "2011-05-16 04:23:31", "user": 789801, "id": 1170994}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170995", "text": "_Imported from Lighthouse._\nComment by **Jon Leighton** - 2011-03-08 18:22:58 UTC\n\nIt's caused by this line:\n\nhttps://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1804\n\nThat test and the preceding one ought to be in AssociationReflection#check_validity! I think. I added a TODO comment for this in master, but I haven't got round TODOing it yet ;)\n", "created_at": "2011-05-16 04:23:33", "user": 789801, "id": 1170995}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6158\nCreated by **qertoip** - 2010-12-13 15:44:24 UTC\n\nSalary.count( :amount )  # => BigDecimal instead of Fixnum\n", "labels": [], "number": 784, "updated_at": "2011-05-21 15:12:14", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904518, "title": "#count on decimal column returns BigDecimal", "url": "https://api.github.com/repos/rails/rails/issues/784", "created_at": "2011-05-16 04:23:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170996", "text": "_Imported from Lighthouse._\nComment by **Jarrett Meyer** - 2010-12-13 20:21:10 UTC\n\nVerified on Ubuntu + sqlite3\nruby-1.9.2-p0 > c = Person.count(:salary)\n => #<BigDecimal:1a30a38,'0.1E1',9(18)>\n", "created_at": "2011-05-16 04:23:41", "user": 789801, "id": 1170996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170997", "text": "_Imported from Lighthouse._\nComment by **Jarrett Meyer** - 2010-12-13 20:57:46 UTC\n\nAdded patch. Contains broken unit test and code to fix it.\n", "created_at": "2011-05-16 04:23:43", "user": 789801, "id": 1170997}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170998", "text": "_Imported from Lighthouse._\nComment by **Thomas van der Pol** - 2011-02-15 09:30:34 UTC\n\nI could not replicate this problem with Rails 3.0.4 on Mac OS 10.6 with ruby 1.9.2p136\n\nSteps:\n\n1) Create new rails app (with sqlite3 as the db adapter - default)\n2) generate model with decimal column\n3) in rails console, create a few entries\n4) TestModel.count(:decimal_column) returned an integer count, not a BigDecimal\n\nAs such, I did not try the patch. If this only happens on specific versions of rails, let me know and I'll test on them, as well.\n", "created_at": "2011-05-16 04:23:44", "user": 789801, "id": 1170998}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1170999", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-15 16:42:40 UTC\n\nHey qertoip,\n\nIs this a DB specific issue? or were the sqlite tests also failing with your test case?\n\nJosh\n", "created_at": "2011-05-16 04:23:45", "user": 789801, "id": 1170999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171000", "text": "_Imported from Lighthouse._\nComment by **Thomas van der Pol** - 2011-02-17 12:03:11 UTC\n\nAs per Josh K's request, I checked the same setup as above in Postgres. (Postgres 9.0.3 on aforementioned platform: Rails 3.0.4 on Mac OS 10.6 with ruby 1.9.2p136)\n\nThe outcome is the same:\n\nSalary.count(:amount).class => Fixnum \n\nWhere Salary.amount is a decimal column in the migration, a 'numeric' type in the database itself (default behaviour).\n\nCheers,\nThomas\n", "created_at": "2011-05-16 04:23:47", "user": 789801, "id": 1171000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171001", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-17 12:07:28 UTC\n\nHey qertoip and Jarrett,\n\nI am marking this issue as need-more-info until more information is supplied on how to replicate the issue.\n\nThanks,\n\nJosh\n", "created_at": "2011-05-16 04:23:48", "user": 789801, "id": 1171001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171002", "text": "_Imported from Lighthouse._\nComment by **Jarrett Meyer** - 2011-02-17 13:43:40 UTC\n\nIt looks like a different patch was applied to fix a similar problem that also fixed this problem - see [ticket 6103](https://rails.lighthouseapp.com/projects/8994/tickets/6103-average-returns-integer-values-instead-of-decimals). \n\nIf I'm reading the git history correctly, this was fixed on Jan 10, 2011. The unit test in my patch file now passes. (Although there is no such unit test currently in 3.0.4.)\n", "created_at": "2011-05-16 04:23:49", "user": 789801, "id": 1171002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171004", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-17 13:49:39 UTC\n\nHi Jarrett,\n\nThanks for looking into this, can you please create a new patch which only includes a test to make sure this does not break in the future. I will then get Jos√© or Santiago to look into it further.\n\nThanks\n\nJosh\n", "created_at": "2011-05-16 04:23:51", "user": 789801, "id": 1171004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171005", "text": "_Imported from Lighthouse._\nComment by **Jarrett Meyer** - 2011-02-18 15:05:14 UTC\n\nAdded patch file with just the unit test.\n", "created_at": "2011-05-16 04:23:52", "user": 789801, "id": 1171005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171006", "text": "_Imported from Lighthouse._\nComment by **karle durante** - 2011-03-01 18:59:57 UTC\n\nWe use Rails w/ Oracle and have also started seeing that Model.count returns BigDecimal, as opposed to Integer.\n\nSeems this was introduced with Rails 2.3.8 and persists in 2.3.11.\n", "created_at": "2011-05-16 04:23:56", "user": 789801, "id": 1171006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171007", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-03-02 15:37:34 UTC\n\n@Karle: As this is not a security issue it will not be applied to 2.3.x branch.\n\n@Jarrett: I just wanted to check, have you confirmed if this is an issue on 3-0-stable and master, or just 3.0.4?\n\nThanks\n\nJosh\n", "created_at": "2011-05-16 04:23:57", "user": 789801, "id": 1171007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171008", "text": "Attachments saved to Gist: http://gist.github.com/971749\n", "created_at": "2011-05-16 04:23:59", "user": 789801, "id": 1171008}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6164\nCreated by **Joseph Palermo** - 2010-12-14 18:54:09 UTC\n\nclass Thing < ActiveRecord::Base\n  has_many :posts\nend\nclass Post < ActiveRecord::Base\n  default_scope select(column_names - ['body'])\nend\n\nThing.includes(:posts).all does the following for the posts query:\n\nSELECT id, fk_column_id, column1, etc, posts.\\* FROM posts WHERE (pages.fk_column>in IN(1,2,3))\n\nIt takes the default select scope, but also appends posts.\\* to the end of it.\n\nThis is caused by the :select find_option in the find_associated_records inside of association_preload.rb.  This is what it is now:\n\n:select => preload_options[:select] || options[:select] || Arel::SqlLiteral.new(\"#{table_name}.*\")\n\nThe third || case is not needed, since that is the default for any select and it causes the above behavior.\n\nUnless of course this is used to for some edge case behavior?  I'm guessing not, since that parameter (or something like it) was in the first commit of association_preload.rb\n\nI can do the test and patch.  I wanted to check that this wasn't the desired behavior first though.\n", "labels": [], "number": 785, "updated_at": "2016-01-04 20:14:51", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904520, "title": "Eager load of a model with a default_scope of \"select\" also appends \"table\".* to the query", "url": "https://api.github.com/repos/rails/rails/issues/785", "created_at": "2011-05-16 04:24:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171009", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-15 00:00:06 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:24:05", "user": 789801, "id": 1171009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171010", "text": "_Imported from Lighthouse._\nComment by **Joseph Palermo** - 2011-03-16 05:02:16 UTC\n\nI just verified this behavior still exists in Rails 3.  I'll create a test case and a fix in the next couple of days.\n", "created_at": "2011-05-16 04:24:06", "user": 789801, "id": 1171010}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171011", "text": "_Imported from Lighthouse._\nComment by **Joseph Palermo** - 2011-03-16 15:36:04 UTC\n\nHere is a patch with tests and the fix.  Simply removing \"|| table[Arel.star]\" broke HABTM.  So now it is only applied to HABTM eager loads.\n", "created_at": "2011-05-16 04:24:07", "user": 789801, "id": 1171011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171012", "text": "_Imported from Lighthouse._\nComment by **Joseph Palermo** - 2011-03-22 04:15:22 UTC\n\nMissed the re-open step.\n[state:open]\n", "created_at": "2011-05-16 04:24:09", "user": 789801, "id": 1171012}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171013", "text": "Attachments saved to Gist: http://gist.github.com/971750\n", "created_at": "2011-05-16 04:24:10", "user": 789801, "id": 1171013}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3154626", "text": "This issue is still present in Rails 3.1.1; did anybody ever accept this patch?\n", "created_at": "2011-12-15 00:18:01", "user": 51869, "id": 3154626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/168792345", "text": "Fixed in Rails 5.0 (https://github.com/rails/rails/pull/21033)\n", "created_at": "2016-01-04 20:14:51", "user": 2079110, "id": 168792345}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6167\nCreated by **petRUShka** - 2010-12-15 08:42:49 UTC\n\nI have such lines in routes.rb:\n\n```\nresource :order\nmatch '/' => 'orders#new', :constraints => { :subdomain => /.+/ }\n```\n\nAnd in controller I have:\n\n```\nredirect_to new_order_path(:subdomain => current_subdomain)\n```\n\nAnd I write such test: \n\n```\n@request.host = \"subdomain.\" + @request.host\nget :test\nassert_redirected_to(:action => :new)\n```\n\nSo I get an error:\n\n```\nExpected response to be a redirect to <http://subdomain.test.host/> but was a redirect to <http://subdomain.test.host/order/new>\n```\n\nIf I delete `match '/'` from routes it is ok. \n\nI think that new_order_path can recognize that it is / but redirect_to can't.\n\nRails 3, Ruby 1.9.\n\nsubdomain realisation from railscast: http://railscasts.com/episodes/221-subdomains-in-rails-3\n", "labels": [], "number": 786, "updated_at": "2011-05-21 15:12:14", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904521, "title": "Strange behaviour of assert_redirected_to", "url": "https://api.github.com/repos/rails/rails/issues/786", "created_at": "2011-05-16 04:24:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171014", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-14 12:26:46 UTC\n\nNot quite sure what you're trying to achieve here - the examples you've posted are quite different to the railscast. The named url helper new_order_path will always generate the full path '/order/new' and won't match the assert_redirected_to.\n\nAre you trying to redirect a request from a default url to a subdomain url or the other way around\n", "created_at": "2011-05-16 04:24:16", "user": 789801, "id": 1171014}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6171\nCreated by **Thilo Utke** - 2010-12-15 14:41:42 UTC\n\nWhen I initialize a resource that uses prefixes I expect that also the attribute that is used as prefix shows up when i serialize the resource. \n\nFailing Test:\n\nclass Foo < ActiveResource::Base\n self.site = \"http://example.com/bar/:bar_id/foos\"\nend\n\nassert_equal Foo.new(:bar_id => 1).as_json, {'foo' => {'bar_id' => 1}} #right now you will get {'foo' => {}}\nassert_equal Foo.new(:bar_id => 1).bar_id, 1 # now method error.\n\nThe root of the problem is located at ActiveResoure::Base split_options Line:922 (ActiveResource 3.0.3). Maybe it is just a bad convention, and prefixes should be passed more explicitly to avoid such surprises.\n", "labels": [], "number": 787, "updated_at": "2011-05-21 15:12:14", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904522, "title": "ActiveResource: prefix attributes that are mass assigned are not readable and serializable.", "url": "https://api.github.com/repos/rails/rails/issues/787", "created_at": "2011-05-16 04:24:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171015", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-16 00:00:08 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:24:22", "user": 789801, "id": 1171015}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171016", "text": "_Imported from Lighthouse._\nComment by **Pierre Lancien** - 2011-03-18 17:09:22 UTC\n\nI made a patch for this issue two months ago but I forgot to submit it...\nI checked, the issue is still here in the latest Rails version. So here is my patch.\n\nWarning  - one of the tests I added triggers the bug I previously mentioned and fixed here :\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6195\n\n(I still don't know how to apply the \"patch\" tag here in lighthouse, so if someone reads this, please create the tag or tell me how to do it)\n", "created_at": "2011-05-16 04:24:24", "user": 789801, "id": 1171016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171017", "text": "_Imported from Lighthouse._\nComment by **Evgeniy Dolzhenko** - 2011-03-19 07:57:30 UTC\n\nI'm +1 on this getting merged, currently in our ActiveResource models we have to do things like \n\nclass Foo < ActiveResource::Base\n  def bar_id\n    @prefix_options[:bar_id\n  end\nend\n\nthis patch would solve that (+ include the attributes in serialized version of resource)\n", "created_at": "2011-05-16 04:24:25", "user": 789801, "id": 1171017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171018", "text": "Attachments saved to Gist: http://gist.github.com/971751\n", "created_at": "2011-05-16 04:24:26", "user": 789801, "id": 1171018}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6177\nCreated by **Greg Hazel** - 2011-02-19 09:28:12 UTC\n\nRunning with config.threadsafe! and mysql2 on Rails 2.3.10 I got this:\n\n```\nThe single-table inheritance mechanism failed to locate the subclass: 'MySubClass'. This error is raised because the\ncolumn 'type' is reserved for storing the class in case of inheritance. Please rename this column if you didn't intend\nit to be used for storing the inheritance class or overwrite MyParentClass.inheritance_column to use another column for\nthat information.\n```\n\nHowever the type column is being used properly, both classes exist in the correct files, and this action works 99.99% of the time. Once though, I saw this failure (I've been running with config.threadsafe! for about a day and mysql2 a few hours, otherwise the app has been running for a Long Time).\n\nIs ActiveRecord::Base#compute_type (and/or the rest of the inheritance system) really threadsafe?\n", "labels": [], "number": 788, "updated_at": "2011-11-17 17:42:46", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904523, "title": "The single-table inheritance mechanism failed to locate the subclass", "url": "https://api.github.com/repos/rails/rails/issues/788", "created_at": "2011-05-16 04:24:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2776889", "text": "I appear to be seeing this on 3.1.1 as well.\n", "created_at": "2011-11-17 15:00:56", "user": 113625, "id": 2776889}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2779161", "text": "Those who come here while trying to set up their Rails app to do evented I/O may find this link of some use:  http://www.williambharding.com/blog/technology/rails-3-autoload-modules-and-classes-in-production/\n", "created_at": "2011-11-17 17:42:46", "user": 113625, "id": 2779161}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6179\nCreated by **fearless_fool** - 2011-02-17 06:48:11 UTC\n\nI have isolated a case where calling ActiveRecord::Relation#all (or evidently anything operation that forces evaluation) changes its state to that it subsequently produces incorrect results.  A self-contained test example is attached.  Observed in Ruby 1.9.2 / Rails 3.0.0\n\nThe general synopsis:\n\nA RefThing table has two fks: obj1_id and obj2_id.  The following method correctly create a RefThing and returns 1:\n\n```\ndef works(obj1, obj2)\n  relation1 = RefThing.where(:obj1_id => obj1.id)\n  relation1.where(:obj2_id => obj2.id).create\n  relation1.size\nend\n```\n\nThe following method returns zero instead, even though it correctly creates a RefThing.  Note the ONLY difference is the call to relation1.all before the create:\n\n```\ndef broke(obj1, obj2)\n  relation1 = RefThing.where(:obj1_id => obj1.id)\n  relation1.all    # forces evaluation of relation1\n  relation1.where(:obj2_id => obj2.id).create\n  relation1.size\nend\n```\n\n[As an aside: it's not just that relation1.size is returning 0 -- it's simply empty, and attempts to use it for accessing fields from RefThing are futile.  And yes, it took me a long time to isolate this from a much larger code body!  :)]\n", "labels": [], "number": 789, "updated_at": "2011-05-21 15:12:14", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904524, "title": "Heisenberg principal in ActiveRecord::Relation: observing relation changes it", "url": "https://api.github.com/repos/rails/rails/issues/789", "created_at": "2011-05-16 04:24:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171019", "text": "_Imported from Lighthouse._\nComment by **fearless_fool** - 2010-12-17 19:53:50 UTC\n\nAssigning this to Aaron, since he appears to be the relationship maven.  If I'm violating lighthouse etiquette by assigning the ticket, please excuse me - I'm not sure of the process.\n", "created_at": "2011-05-16 04:24:38", "user": 789801, "id": 1171019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171020", "text": "_Imported from Lighthouse._\nComment by **Samuel Kadolph** - 2010-12-17 20:15:57 UTC\n\nFor future reference, misusing a physics term isn't helpful.\n\nThis is simply because the results of the relation are being cached and currently models created with `create` are not added into the relation's cache.\n\n```\nruby-1.9.2-p0 > r = Widget.scoped\n => [#<Widget id: 1>]\nruby-1.9.2-p0 > r\n => [#<Widget id: 1>]\nruby-1.9.2-p0 > r.create\n => #<Widget id: 2>\nruby-1.9.2-p0 > r\n => [#<Widget id: 1>]\n```\n\nCalling `reload` on the relation proves this.\n\n```\nruby-1.9.2-p0 > r.reload\n => [#<Widget id: 1,>, #<Widget id: 2>]\n```\n", "created_at": "2011-05-16 04:24:39", "user": 789801, "id": 1171020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171021", "text": "_Imported from Lighthouse._\nComment by **fearless_fool** - 2010-12-17 22:38:36 UTC\n\n@SK:\n\nThe Heisenberg reference was intended to enliven your day, even if not totally accurate.  But -- absent any documentation about how relations are cached -- one would agree that having a relation change its state merely by observing it is kind of astonishing.\n\nSo, to make sure I understand, what was happening in the OP was that in the working example, relation1 was NOT being cached because nothing had forced its evaluation.  In the broken example, relation1 was getting cached in its empty state and not getting reloaded after the create, so it appeared to be empty.  \n\nI can live with that if it's documented somewhere.  If not, please (please) point me to the appropriate section on relations and I'd be happy to contribute to improving them.\n- ff\n", "created_at": "2011-05-16 04:24:40", "user": 789801, "id": 1171021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171022", "text": "Attachments saved to Gist: http://gist.github.com/971752\n", "created_at": "2011-05-16 04:24:42", "user": 789801, "id": 1171022}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6185\nCreated by **Andrew Dvorak** - 2010-12-17 10:11:41 UTC\n\nI have the following file: public/javascripts/jq+ui.min.js\n\nWhen I attempt to view the file in my browser, rails generates an \"Action Controller: Exception Caught; Routing Error; No route matches \"/javascripts/jq+ui.min.js\".\n\nWhen I rename the file to: public/javascripts/jq-ui.min.js, the error is resolved and the file is served.\n\nIt rails apparently dislikes a \"+\" in the filename serving from public/\n\nI am using Rails 3.0.3 (\"development\" environment), WEBrick 1.3.1, and Ruby 1.9.2 using RVM 1.1.3 on Ubuntu 10.10.\n\nI've not tried it, but tests by others suggest that a setup using Apache is immune to this bug.\n", "labels": [], "number": 790, "updated_at": "2011-05-21 15:12:14", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904526, "title": "WEBrick serving files from /public produces routing error for files which have a \"+\" in their name", "url": "https://api.github.com/repos/rails/rails/issues/790", "created_at": "2011-05-16 04:24:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171023", "text": "_Imported from Lighthouse._\nComment by **pnina** - 2011-01-03 12:07:56 UTC\n\nhi\ni encountered the same problem\ni just reinstall my computer and  installed rails 3.0.3 and ruby 1.9.2 on windows 7 and WEBrick\nwhen I open my application in the browser rails cannot find my JavaScript files and i am getting ActionController::routingError \nI worked previously with rails 3.0 and all was fine\n", "created_at": "2011-05-16 04:24:47", "user": 789801, "id": 1171023}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171025", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-09 06:37:30 UTC\n\nThis is because the '+' is getting decoded as a space by Rack::Utils.unescape in ActionDispatch::Static and Rack::File. In production mode static file serving is handled by Apache so it works fine. Rack::Utils.unescape is very basic implementation in that it doesn't take into account the context of the + symbol which is allowed unescaped in paths but is treated as a space in query parameters.\n\nThis needs fixing in both places for it to work - URI.unescape (or URI::Parser.unescape in 1.9.2) would seem to provide the necessary method.\n", "created_at": "2011-05-16 04:24:49", "user": 789801, "id": 1171025}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6188\nCreated by **Ben Mills** - 2011-02-19 09:28:17 UTC\n\nWhen a model name is more than one word, ex: Ticket Type, when using f.submit, the text of the submit button does not capitalize each word of the model. The text appears as Create Ticket type.\n\nAttached is a patch to titleize the model name so that the text appears as Create Ticket Type.\n", "labels": [], "number": 791, "updated_at": "2016-03-07 12:45:14", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904528, "title": "Model name for default submit button value should be titleized", "url": "https://api.github.com/repos/rails/rails/issues/791", "created_at": "2011-05-16 04:24:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171026", "text": "_Imported from Lighthouse._\nComment by **Johnneylee Jack Rollins** - 2010-12-18 02:35:11 UTC\n\n+1\nMakes a good bunch of sense to me.\n", "created_at": "2011-05-16 04:24:56", "user": 789801, "id": 1171026}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171027", "text": "_Imported from Lighthouse._\nComment by **Ben Mills** - 2010-12-18 02:39:27 UTC\n\nUpdated the patch to just titleize model regardless of what the conditions returns\n", "created_at": "2011-05-16 04:24:57", "user": 789801, "id": 1171027}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171028", "text": "_Imported from Lighthouse._\nComment by **Ryan Bigg** - 2010-12-18 03:06:07 UTC\n\nplease attach tests to this patch\n", "created_at": "2011-05-16 04:24:58", "user": 789801, "id": 1171028}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171029", "text": "_Imported from Lighthouse._\nComment by **Ben Mills** - 2010-12-18 05:26:19 UTC\n\nUpdated patch to provide a test\n", "created_at": "2011-05-16 04:24:59", "user": 789801, "id": 1171029}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171030", "text": "_Imported from Lighthouse._\nComment by **Ben Mills** - 2010-12-19 06:47:26 UTC\n\nCleaned up unnecessary code in patch test\n", "created_at": "2011-05-16 04:25:01", "user": 789801, "id": 1171030}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171031", "text": "_Imported from Lighthouse._\nComment by **Samuel Kadolph** - 2010-12-19 07:04:48 UTC\n\nPatch seems logical. However it is currently possible to fix this with localization.\n\n```\nen:\n  activerecord:\n    models:\n      ticket_type: Ticket Type\n```\n", "created_at": "2011-05-16 04:25:02", "user": 789801, "id": 1171031}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171032", "text": "_Imported from Lighthouse._\nComment by **Piotr Sarnacki** - 2010-12-19 09:38:13 UTC\n\nSamuel: Yes, but this patch is about sensible default.\n\nI would rather say that it should be \"Create ticket type\" instead of \"Create Ticket Type\" or \"Create Ticket type\". Is \"titleize\" the convention in other places in forms?\n", "created_at": "2011-05-16 04:25:03", "user": 789801, "id": 1171032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171033", "text": "_Imported from Lighthouse._\nComment by **esparkman** - 2010-12-31 00:10:46 UTC\n\n+1 this makes sense to me as well.\n", "created_at": "2011-05-16 04:25:05", "user": 789801, "id": 1171033}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171034", "text": "_Imported from Lighthouse._\nComment by **salbito** - 2011-01-01 21:18:43 UTC\n\n+1 aswell Makes sense as a default avoids having to do this in localization files for every instance of this situation.\n", "created_at": "2011-05-16 04:25:06", "user": 789801, "id": 1171034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171035", "text": "_Imported from Lighthouse._\nComment by **Ben Mills** - 2011-02-08 22:40:37 UTC\n\nCan we get this merged in, please?\n", "created_at": "2011-05-16 04:25:07", "user": 789801, "id": 1171035}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171036", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-02-09 01:34:25 UTC\n\n+1 this is a much better default.\n\none of the patch's tests fails on master due to dropping the id on submit inputs in form_for\n\nI've patched the regression and Ben's original authorship should be maintained.\n", "created_at": "2011-05-16 04:25:09", "user": 789801, "id": 1171036}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171037", "text": "Attachments saved to Gist: http://gist.github.com/971753\n", "created_at": "2011-05-16 04:25:10", "user": 789801, "id": 1171037}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1575192", "text": "Did this get merged?\n", "created_at": "2011-07-14 21:27:13", "user": 40956, "id": 1575192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2377260", "text": "Apparently not. Rails 3.1.1 default is still to say Ticket type, instead to Ticket Type.\n\nI also think that the latter would be a more sensible default.\n", "created_at": "2011-10-12 09:16:20", "user": 76045, "id": 2377260}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6187998", "text": "@remear I agree with @drogus here. I think that should be \"Create ticket type\".\n\nI you want to discuss this more please open a pull request pointing master and linking to this issue.\n\nThanks\n", "created_at": "2012-06-07 21:07:17", "user": 47848, "id": 6187998}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15142098", "text": "Why did this get closed and not merged?\n", "created_at": "2013-03-19 20:47:47", "user": 237288, "id": 15142098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15142349", "text": "It is closed because it was imported from lighthouse. As I said in the above comment feel free to open a pull request\n", "created_at": "2013-03-19 20:52:07", "user": 47848, "id": 15142349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/166733981", "text": "I just implemented that diff and opened a pull request, because this has been sitting here for a long time.\n", "created_at": "2015-12-22 21:26:51", "user": 1630091, "id": 166733981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/192724640", "text": "So, I digged a little deeper and I believe that pull request #22764 (trying to solve this old issue two months ago) should be reverted. I'd like to explain why here in this issue so as to provide some more background information before another attempt is made.\n\nIn many languages the button `\"Create user\"` is phrased with the model in the beginning, such as `\"User begone\"`. So the model name should be capitalized. Examples of that in the `rails-i18n` gem are [hu](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/hu.yml#L136), [az](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/az.yml#L135), [ar](https://github.com/svenfuchs/rails-i18n/blob/ad7388e3b4c066b158d8a4f295556b2303a92e60/rails/locale/ar.yml#L212), [de](https://github.com/svenfuchs/rails-i18n/blob/64dca088832a6c7f1f98b654c61ffe3759eed294/rails/locale/de.yml#L147), [ur](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/ur.yml#L147), [ug](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/ug.yml#L146), [tt](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/tt.yml#L146), [tr](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/tr.yml#L146), [ta](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/ta.yml#L146), [pa](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/pa.yml#L147), [or](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/or.yml#L135), [hi](https://github.com/svenfuchs/rails-i18n/blob/de5b5c1f417e3008a860ceb06572bc8a33fe4ab4/rails/locale/hi.yml#L135).\n\nSay, a German Rails app would simply add this in the `de.yml` to achieve a `\"Benutzer erstellen\"` button:\n\n``` yml\nde:\n  activerecord:\n    models:\n      user: Benutzer\n```\n\nEven if the model would _not_ be in the beginning of the phrase, the word \"Benutzer\" would _still_ have to be capitalized just as every other German noun.\n\nIn other words: as a developer I would like to choose the model capitalization mechanism myself. But now that there is a `.downcase` on the model name **after** the i18n lookup, it's prohibitively hard to override.\n\nThe only way I can think of to override that default value now is in the view:\n\n``` erb\n  <%= f.submit t('helpers.actions.create', model: f.object.model_name.human) %>\n```\n\nIf only that would work it would be bad enough, but the key `helpers.actions.create` needs to be chosen dynamically depending on the form action.\n\nI might definitely be missing something (and that would be a good thing! :) But as it stands, every developer upgrading to Rails 5 will have their i18n definition overridden by these changes. All feature specs trying to click on a button will fail and a lot of un-DRY code would have to be added to every form view. (That's what happened to me, at least, so I'm monkey patching in production to revert this PR).\n\nI'm not exactly sure what the correct solution would be. I guess it would be something like changing the model string only if it was not defined in the i18n file.\n", "created_at": "2016-03-05 20:15:03", "user": 11441, "id": 192724640}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/192729205", "text": "Reverted\n", "created_at": "2016-03-05 20:26:27", "user": 47848, "id": 192729205}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/192754531", "text": "@halo awesome catch!\nWhat about just using `capitalize` on returning result of the `I18n.t` method? By this way in German we will have `\"Benutzer erstellen\"`, in English `\"Create user\"`, or in Turkish `\"Kullanƒ±cƒ± olu≈ütur\"`. I think this will solve the first problem.\n\nOn the other hand;\n\n> All feature specs trying to click on a button will fail and a lot of un-DRY code would have to be added to every form view.\n\nIMO, using content of a button instead of IDs for selecting a DOM element is not a good practice and if we are going to change this behaviour there is no way to make this kind of test suites happy (without introducing a new configuration option to make it backward compatible).\n", "created_at": "2016-03-05 22:47:19", "user": 1840945, "id": 192754531}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/193017615", "text": "@meinac @stevenspiel maybe you guys want to provide an alternative implementation like the one suggested by @meinac, please provide a PR and I will merge.\n", "created_at": "2016-03-06 23:45:24", "user": 52642, "id": 193017615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/193234362", "text": "> What about just using capitalize on returning result of the I18n.t method?\n\nWhatever is in the i18n file should not be modified. Capitalization is part of the translation. Otherwise, how would you achieve a `\"Create User\"`? There are just too many combinations.\n\n> IMO, using content of a button instead of IDs for selecting a DOM element is not a good practice\n\nI have no problem changing my tests, but a \"default\" should not override my specified text ;) In fact, I'm glad the tests picked up the problem haha.\n\nAs I mentioned earlier, **if nothing is specified** in i18n, it's fine to do whatever with the string to have a good default. But I have a feeling that the implementation for that might bee too expensive or cumbersome. \n\nOn the other hand, who is proud of a `\"Create Ticket type\"` button as it is right now? ;)\n", "created_at": "2016-03-07 12:44:26", "user": 11441, "id": 193234362}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6189\nCreated by **William Jones** - 2010-12-18 21:43:32 UTC\n\nI'm running into a really strange phenomena after upgrading from Rails 2.3/Ruby 1.8 to Rails 3/Ruby 1.9. I'm using Postgres, through the pg gem 0.10.0.\n\nWhen I make a call to a model's string or text fields that contain Unicode, it works correctly, and they are returned with an encoding of UTF-8.\n\nHowever, I also make use of serialized Hashes in a number of models, and whenever I make a call to read their contents (which worked perfectly prior to the upgrade), I get the following puzzling behavior:\n\nIf the contents contains ASCII-only data, it returns as UTF-8 (correctly), and is properly displayed.\nIf the contents contains Unicode data, it returns as ASCII, and is displayed as escaped characters.\n\nMixing these two of course throws an encoding error.\n", "labels": [], "number": 792, "updated_at": "2011-11-01 22:19:18", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904529, "title": "Serialized Unicode data returning as ASCII", "url": "https://api.github.com/repos/rails/rails/issues/792", "created_at": "2011-05-16 04:25:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171038", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-19 00:00:11 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:25:16", "user": 789801, "id": 1171038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171039", "text": "_Imported from Lighthouse._\nComment by **William Jones** - 2011-04-21 03:01:09 UTC\n\n[state:open]\n\nThis problem is reproducible still on Ruby 1.9.2, Rails 3.0.7, pg 0.10.1. It should be very easy to confirm this problem's existence, simply create a serialized hash that contains Unicode.\n", "created_at": "2011-05-16 04:25:17", "user": 789801, "id": 1171039}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1901449", "text": "I believe I'm also running into this error for Rails 3.1rc6 with the pg gem (0.11.0) with a serialized UTF8 hash - Rails just comes back with escaped characters on serialized columns with utf8 values.  Was there ever a solution / investigation into this issue?  If not, I can write up an example.\n", "created_at": "2011-08-25 16:30:40", "user": 49288, "id": 1901449}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2596943", "text": "I'm having the same issue on a project with Rails 3.0.10 and MySQL. Been trying to find a solution for days but can't figure it out.\n", "created_at": "2011-11-01 22:19:18", "user": 10137, "id": 2596943}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6195\nCreated by **Pierre Lancien** - 2011-03-29 01:29:20 UTC\n\nIn ActiveResource::Base, the clone method raises an error whenever an attribute of the cloned resource is not cloneable.\n\n``` ruby\n  class Person < ActiveResource::Base\n    self.site = \"http://37s.sunrise.i:3000\"\n  end\n\n  matz = Person.new(:name => 'Matz', :age => 31)\n  matz.clone\n```\n\nwill raise :\n\n``` ruby\n   TypeError: can't clone Fixnum\n```\n\nIt's the same with boolean attributes.\n", "labels": [], "number": 793, "updated_at": "2011-10-26 09:46:36", "user": 789801, "closed_at": "2011-05-21 15:12:14", "id": 904530, "title": "ActiveResource : clone fails when the resource has Fixnum or boolean attributes", "url": "https://api.github.com/repos/rails/rails/issues/793", "created_at": "2011-05-16 04:25:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171040", "text": "_Imported from Lighthouse._\nComment by **Pierre Lancien** - 2010-12-19 17:46:29 UTC\n\nHere is the patch with the test.\nSince it's my first submission, I'm not sure of doing things properly... but I'm here to learn!\n", "created_at": "2011-05-16 04:25:24", "user": 789801, "id": 1171040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171041", "text": "_Imported from Lighthouse._\nComment by **Pierre Lancien** - 2010-12-19 18:25:16 UTC\n\ntagged:patch\n", "created_at": "2011-05-16 04:25:26", "user": 789801, "id": 1171041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171042", "text": "_Imported from Lighthouse._\nComment by **Stephen Heuer** - 2011-02-24 17:26:34 UTC\n\nThis fixes a problem I had when I tried upgrading from 2.3.10 to 2.3.11 with my app. Too bad this wasn't merged before 2.3.11 was released. I've attached an updated patch file.\n\n  can't clone Fixnum\n    /Users/sheuer/.rvm/gems/ruby-1.9.2-p136@arora/gems/activesupport-2.3.11/lib/active_support/duration.rb:97:in `clone'\n    /Users/sheuer/.rvm/gems/ruby-1.9.2-p136@arora/gems/activesupport-2.3.11/lib/active_support/duration.rb:97:in`method_missing'\n    /Users/sheuer/.rvm/gems/ruby-1.9.2-p136@arora/gems/rack-1.1.0/lib/rack/utils.rb:183:in `set_cookie_header!'\n    /Users/sheuer/.rvm/gems/ruby-1.9.2-p136@arora/gems/actionpack-2.3.11/lib/action_controller/session/abstract_store.rb:199:in`call'\n    /Users/sheuer/.rvm/gems/ruby-1.9.2-p136@arora/gems/activesupport-2.3.11/lib/active_support/cache/strategy/local_cache.rb:25:in `call'\n    /Users/sheuer/.rvm/gems/ruby-1.9.2-p136@arora/gems/actionpack-2.3.11/lib/action_controller/failsafe.rb:26:in`call'\n", "created_at": "2011-05-16 04:25:28", "user": 789801, "id": 1171042}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171043", "text": "_Imported from Lighthouse._\nComment by **Stephen Heuer** - 2011-02-24 17:35:28 UTC\n\nWait... I thought it fixed my problem... but it doesn't ... still the patch file works for 2.3.11\n", "created_at": "2011-05-16 04:25:29", "user": 789801, "id": 1171043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171044", "text": "Attachments saved to Gist: http://gist.github.com/971754\n", "created_at": "2011-05-16 04:25:31", "user": 789801, "id": 1171044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2528493", "text": "Is it ever going to be accepted?\n", "created_at": "2011-10-26 09:46:36", "user": 205906, "id": 2528493}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6198\nCreated by **Marc Sch√ºtz** - 2010-12-20 11:22:33 UTC\n\nThe fields_for method ignores the :as option which is available in form_for. The attached simple patch fixes that.\n", "labels": ["actionview"], "number": 794, "updated_at": "2012-07-12 17:54:24", "user": 789801, "closed_at": "2012-07-12 17:54:24", "id": 904532, "title": "fields_for ignores :as", "url": "https://api.github.com/repos/rails/rails/issues/794", "created_at": "2011-05-16 04:25:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171045", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-21 00:00:17 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:25:37", "user": 789801, "id": 1171045}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171046", "text": "_Imported from Lighthouse._\nComment by **Marc Sch√ºtz** - 2011-03-22 17:33:09 UTC\n\nStill present in Rails 3.0.5\n", "created_at": "2011-05-16 04:25:39", "user": 789801, "id": 1171046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171047", "text": "_Imported from Lighthouse._\nComment by **Marc Sch√ºtz** - 2011-03-22 17:33:57 UTC\n\n[state:open]\n", "created_at": "2011-05-16 04:25:40", "user": 789801, "id": 1171047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171048", "text": "Attachments saved to Gist: http://gist.github.com/971755\n", "created_at": "2011-05-16 04:25:41", "user": 789801, "id": 1171048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6942472", "text": "https://github.com/plataformatec/simple_form/issues/618#issuecomment-6942462\n", "created_at": "2012-07-12 17:51:51", "user": 21710, "id": 6942472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6942553", "text": "You can pass the record_name as the first argument of the `fields_for` helper as pointed by @razenha in the SimpleForm issue comment.\n", "created_at": "2012-07-12 17:54:24", "user": 47848, "id": 6942553}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6211\nCreated by **Orion Delwaterman** - 2010-12-22 22:01:58 UTC\n# Summary\n\nWhen an association with conditions is chained together with additional conditions using Relations, ActiveRecord and Arel shifts the association's conditions from the `WHERE` clause to the `ON` clause. But in doing so it drops the foreign key relationship and improperly quotes conditions. Quick example:\n\n``` ruby\n   Post.includes(:special_tags).where(:user_id => 10).all\n```\n\nwill result in the following SQL (using sqlite3):\n\n``` sql\n  SELECT \"posts\".\"id\" as t0_r0, \"posts\".\"title\" AS t0_r0, \"user_id\" AS t0_r1, \"tags\".\"id\" AS t1_r0, \"tags\".\"post_id\" AS t1_r1, \"tags\".\"name\" AS t1_r2, \"tags\".\"context_type\" AS t1_r3\n  FROM \"posts\" \n  LEFT OUTER JOIN \"taggings\" ON \"posts\".\"id\" = \"taggings\".\"post_id\" \n  LEFT OUTER JOIN \"tags\" ON \"tags\".\"name\" = ''special''\n  WHERE \"posts\".\"id\" = 10\n```\n\nThere are two issues with the second `LEFT OUTER JOIN` statement. First its missing the foreign key relationship condition `\"taggings\".\"tag_id\" = \"tags\".\"id\"`. Second it's improperly double quoting (two single quotes on each side) the word \"special\" with `\"tags\".\"name\" = ''special''`\n# Recreating the issue\n\nThis is a modified version of our code at work where we originally discovered the issue.\n\nSchema:\n\n```\ncreate_table \"recipes\", :force => true do |t|\n  t.string   \"name\"    \nend\ncreate_table \"taggings\", :force => true do |t|\n  t.integer  \"taggable_id\"\n  t.string   \"taggable_type\"\n  t.integer  \"position\"\n  t.integer  \"tag_id\"\n  t.datetime \"created_at\"\n  t.datetime \"updated_at\"\nend\ncreate_table \"tags\", :force => true do |t|\n  t.string   \"name\"\n  t.string   \"context_type\"\n  t.datetime \"created_at\"\n  t.datetime \"updated_at\"\nend\n```\n\nmodels:\n\n```\nclass Recipe < ActiveRecord::Base\n  has_many :taggings, :as => :taggable, :dependent => :destroy\n  has_many :courses, :through => :taggings, :source => :tag, :conditions => {:tags => {:context_type =>  'course'}}\n  scope :ordered_by_course, includes(:courses).where(:taggings => {:position => 0}).order(\"UPPER(tags.name) ASC\").order(\"UPPER(recipes.name) ASC\")\nend\n\nclass Tagging < ActiveRecord::Base\n  belongs_to :taggable, :polymorphic => true\n  belongs_to :tag\n\n  before_create do\n    self.position = self.taggable.send(self.tag.context_type.to_s.pluralize).count + 1\n  end\nend\n\nclass Tag < ActiveRecord::Base\n  has_many :taggings, :dependent => :destroy\n\n  class << self\n    [\"course\", \"main_ingredient\", \"cuisine\", \"occasion\", \"convenience\", \"cooking_method\"].each do |context|\n      define_method context.pluralize do\n        where(\"tags.context_type = '#{context}'\")\n      end\n    end\n  end\n\nend\n```\n\nCreate some dummy data with IRB:\n\n```\nrecipe = Recipe.create!(:name => \"foo\")\ntag = Tag.create!(:name => \"Main Dish\", :context_type => \"course\")\nrecipe.courses << tag\n```\n\nNow using IRB and do a normal load of the association:\n\n```\nrecipe = Recipe.first\nrecipe.courses # => [#<Tag id: 1, name: \"Main Dish\", context_type: \"course\", created_at: \"2010-11-19 17:04:14\", updated_at: \"2010-11-19 17:04:14\">]\n```\n\nSQL in the log:\n     SELECT \"tags\".\\* FROM \"tags\" INNER JOIN \"taggings\" ON \"tags\".id = \"taggings\".tag_id WHERE ((\"taggings\".taggable_id = 1) AND (\"taggings\".taggable_type = 'Recipe') AND ((\"tags\".\"context_type\" = 'course')))\n\nBack to IRB now lets try the scope:\n    recipes = Recipe.ordered_by_course\n    recipes.first.courses # => []\n\nThat's wrong check the SQL in the log:\n    SELECT \"recipes\".\"id\" AS t0_r0, \"recipes\".\"name\" AS t0_r1,\"tags\".\"id\" AS t1_r0, \"tags\".\"name\" AS t1_r1, \"tags\".\"context_type\" AS t1_r2, \"tags\".\"created_at\" AS t1_r3, \"tags\".\"updated_at\" AS t1_r4 \n    FROM \"recipes\" \n    LEFT OUTER JOIN \"taggings\" ON \"recipes\".\"id\" = \"taggings\".\"taggable_id\" AND \"taggings\".\"taggable_type\" = 'Recipe' \n    LEFT OUTER JOIN \"tags\" ON '\"tags\".\"context_type\" = ''course'' \n    WHERE (recipes.deleted_at IS NULL) AND (\"taggings\".\"position\" = 1) \n    ORDER BY UPPER(tags.name) ASC, UPPER(recipes.name) ASC\n\nWow this is a bit of an issue.\n# The Two Nasty Issues\n## Dirty Nasty Issue 1 - Where did the foreign keys go?\n\nThe first problem is within ActiveRecord::QueryMethods#build_joins and ActiveRecord::Associations::ClassMethods::JoinDependency::JoinAssociation#association_join. ActiveRecord::QueryMethods#build_joins is responsible for building the joins for the query (lib/active_record/relation/query_methods.rb:215). Check out this snippet here at line 235-243\n\n```\nto_join = []\njoin_dependency.join_associations.each do |association|\n  if (association_relation = association.relation).is_a?(Array)\n    to_join << [association_relation.first, association.join_type, association.association_join.first]\n    to_join << [association_relation.last, association.join_type, association.association_join.last]\n  else\n    to_join << [association_relation, association.join_type, association.association_join]\n  end\nend\n```\n\nEssentially if the association relation is an array (array of ARel Nodes) we are dealing some type of `has_many :through` relationship. And this snippet assumes that there are only two items in the array (the first should be all the joins for the recipes to taggings and the secound should be for the taggings to tags). \n\nBut now take a look at ActiveRecord::Associations::ClassMethods::JoinDependency::JoinAssociation#association_join (in the rails 3-0-stable branch that would be activerecord/lib/active_record/associations.rb:2135). The first part of the function (lines 2136-2207) will set @join to be an array of two length:\n    def association_join\n        return @join if @join\n\n```\n    aliased_table = Arel::Table.new(table_name, :as      => @aliased_table_name,\n                                                :engine  => arel_engine,\n                                                :columns => klass.columns)\n\n    parent_table = Arel::Table.new(parent.table_name, :as      => parent.aliased_table_name,\n                                                      :engine  => arel_engine,\n                                                      :columns => parent.active_record.columns)\n\n    @join = case reflection.macro\n    when :has_and_belongs_to_many\n      join_table = Arel::Table.new(options[:join_table], :as => aliased_join_table_name, :engine => arel_engine)\n      fk = options[:foreign_key] || reflection.active_record.to_s.foreign_key\n      klass_fk = options[:association_foreign_key] || klass.to_s.foreign_key\n\n      [\n        join_table[fk].eq(parent_table[reflection.active_record.primary_key]),\n        aliased_table[klass.primary_key].eq(join_table[klass_fk])\n      ]\n    when :has_many, :has_one\n      if reflection.options[:through]\n        join_table = Arel::Table.new(through_reflection.klass.table_name, :as => aliased_join_table_name, :engine => arel_engine)\n        jt_foreign_key = jt_as_extra = jt_source_extra = jt_sti_extra = nil\n        first_key = second_key = as_extra = nil\n\n        if through_reflection.options[:as] # has_many :through against a polymorphic join\n          jt_foreign_key = through_reflection.options[:as].to_s + '_id'\n          jt_as_extra = join_table[through_reflection.options[:as].to_s + '_type'].eq(parent.active_record.base_class.name)\n        else\n          jt_foreign_key = through_reflection.primary_key_name\n        end\n\n        case source_reflection.macro\n        when :has_many\n          if source_reflection.options[:as]\n            first_key   = \"#{source_reflection.options[:as]}_id\"\n            second_key  = options[:foreign_key] || primary_key\n            as_extra    = aliased_table[\"#{source_reflection.options[:as]}_type\"].eq(source_reflection.active_record.base_class.name)\n          else\n            first_key   = through_reflection.klass.base_class.to_s.foreign_key\n            second_key  = options[:foreign_key] || primary_key\n          end\n\n          unless through_reflection.klass.descends_from_active_record?\n            jt_sti_extra = join_table[through_reflection.active_record.inheritance_column].eq(through_reflection.klass.sti_name)\n          end\n        when :belongs_to\n          first_key = primary_key\n          if reflection.options[:source_type]\n            second_key = source_reflection.association_foreign_key\n            jt_source_extra = join_table[reflection.source_reflection.options[:foreign_type]].eq(reflection.options[:source_type])\n          else\n            second_key = source_reflection.primary_key_name\n          end\n        end\n\n        [\n          [parent_table[parent.primary_key].eq(join_table[jt_foreign_key]), jt_as_extra, jt_source_extra, jt_sti_extra].reject{|x| x.blank? },\n          aliased_table[first_key].eq(join_table[second_key])\n        ]\n      elsif reflection.options[:as]\n        id_rel = aliased_table[\"#{reflection.options[:as]}_id\"].eq(parent_table[parent.primary_key])\n        type_rel = aliased_table[\"#{reflection.options[:as]}_type\"].eq(parent.active_record.base_class.name)\n        [id_rel, type_rel]\n      else\n        foreign_key = options[:foreign_key] || reflection.active_record.name.foreign_key\n        [aliased_table[foreign_key].eq(parent_table[reflection.options[:primary_key] || parent.primary_key])]\n      end\n    when :belongs_to\n      [aliased_table[options[:primary_key] || reflection.klass.primary_key].eq(parent_table[options[:foreign_key] || reflection.primary_key_name])]\n    end\n```\n\nAwesome. But the rest of the function now breaks the assumption that its only going to return that it will return an array of length 2 (lines 2209-2225):\n\n```\n  unless klass.descends_from_active_record?\n    sti_column = aliased_table[klass.inheritance_column]\n    sti_condition = sti_column.eq(klass.sti_name)\n    klass.descendants.each {|subclass| sti_condition = sti_condition.or(sti_column.eq(subclass.sti_name)) }\n\n    @join << sti_condition\n  end\n\n\n  [through_reflection, reflection].each do |ref|\n    if ref && ref.options[:conditions]\n      @join << interpolate_sql(sanitize_sql(ref.options[:conditions], aliased_table_name))\n    end\n  end\n\n  @join\nend\n```\n\nIf the reflection has conditions or if the underlying klass is an STI you now have 3 or more items in your array. In the example I am using we would have three: \n1. the Arel AST nodes for the recipes to taggings table\n2. the Arel AST nodes for the foreign key of taggings to tags\n3. the condition clauses checking the context type of the tag.  \n\nNow look back at  ActiveRecord::QueryMethods#build_joins (lib/active_record/relation/query_methods.rb:235-243).\n\n```\nto_join = []\njoin_dependency.join_associations.each do |association|\n  if (association_relation = association.relation).is_a?(Array)\n    to_join << [association_relation.first, association.join_type, association.association_join.first]\n    to_join << [association_relation.last, association.join_type, association.association_join.last]\n  else\n    to_join << [association_relation, association.join_type, association.association_join]\n  end\nend\n```\n\nYup its totally going to drop the middle condition. So we need to patch ActiveRecord::Associations::ClassMethods::JoinDependency::JoinAssociation#association_join to only return an array of length two (since its grouping the joins for each relationship in an array).  I'm just not sure what else this is going to break.\n## Dirty Nasty Issue 2 - What's with the double single quotes?\n\nRecall that the generated SQL had this little snippet `LEFT OUTER JOIN \"tags\" ON '\"tags\".\"context_type\" = ''course''`. Why is it doing this? Well the problem turns out to be ActiveRecord::Associations::ClassMethods::JoinDependency::JoinAssociation#association_join again. Re-examine this snippet (activerecord/lib/active_record/associations.rb:218-223)\n\n```\n[through_reflection, reflection].each do |ref|\n  if ref && ref.options[:conditions]\n     @join << interpolate_sql(sanitize_sql(ref.options[:conditions], aliased_table_name))\n  end\nend\n```\n\nThe #sanitize_sql (which is delegated to the active_record) returns a sql string. That is its not passing ARel AST nodes but actual SQL. That might not seem like much of an issue until you realize that ARel will treat this a string value, NOT a sql expression.  We have to look at the ARel code to see what happens (I am using the 2.0.6 gem as reference). Let's look at how ARel's ToSql visitor handles the ON node (lib/arel/visitors/to_sql.rb:190-192):\n\n```\ndef visit_Arel_Nodes_On o\n  \"ON #{visit o.expr}\"\nend\n```\n\nNow remember that ActiveRecord::Associations::ClassMethods::JoinDependency::JoinAssociation#association_join set one the condition here to be a string. That means `o.expr # => \"\\\"tags\\\".\\\"content_type\\\" = 'course'\". Well look what happens next (lib/arel/visitors/to_sql.rb:278):\n\n```\ndef visit_String o; quote(o, @last_column) end\n```\n\nIt's going to quote the string as if its a String value to be passed into the database, not the actual sql to be run (lib/arel/visitors/to_sql.rb:294-296)\n\n```\ndef quote value, column = nil\n  @connection.quote value, column\nend\n```\n\nAnd sure enough when we trace this down in activerecord we find (lib/active_record/connection_adapters/abstract/quoting.rb:40-42)\n\n```\ndef quote_string(s)\n  s.gsub(/\\\\/, '\\&\\&').gsub(/'/, \"''\") # ' (for ruby-mode)\nend\n```\n\nWow. At least we know where the issue is. The solution seems to be to patch ActiveRecord::Associations::ClassMethods::JoinDependency::JoinAssociation#association_join so that it does not just give a string, but actual ARel ast nodes. But its going to require some work.\n# Patches\n\nI am currently working on the patches for this issue, but it may take me a while to test. Not to mention that I currently do not have MySQL or PostgreSQL installed on my mac and I've already spent way too much time tracking this down. But I will give it my best shot and hopefully whoever can check as needed. I'll post patches as soon as I have them. I am working off the Rails 3-0-stable branch.\n# Side Note\n\nI checked out 'master' of activerecord, and its gone through a major rewrite. I am not sure if the rewrite addressed this issue, but once I complete my patches for the 3.0 line I can port the tests over to double check\n", "labels": [], "number": 795, "updated_at": "2017-07-25 04:43:55", "user": 789801, "closed_at": "2011-05-21 15:12:15", "id": 904533, "title": "Rails 3.0.3 Eager Loading associations with additional conditions causes the ON statement to be improperly constructed", "url": "https://api.github.com/repos/rails/rails/issues/795", "created_at": "2011-05-16 04:25:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171050", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-23 00:00:09 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:25:48", "user": 789801, "id": 1171050}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171051", "text": "_Imported from Lighthouse._\nComment by **Jarrett Irons** - 2011-03-23 06:28:28 UTC\n\nI am having the same issue where i have a model that has a has_many association.  When using 'includes' and 'where' when looking for a column through another table it seems as though the foreign_key is nil. \n\n``` ruby\nruby-1.9.2-p136 :001 > User.includes('products').where(\"products.name LIKE ?\", \"%futura-profileidentity%\" ).all\nNoMethodError: undefined method `eq' for nil:NilClass\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activesupport-3.0.5/lib/active_support/whiny_nil.rb:48:in `method_missing'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/associations.rb:2208:in `association_join'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:260:in `block in build_joins'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:255:in `each'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:255:in `build_joins'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:177:in `build_arel'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:150:in `arel'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/relation.rb:64:in `to_a'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/relation/finder_methods.rb:189:in `find_with_associations'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/relation.rb:64:in `to_a'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.5/lib/active_record/relation/finder_methods.rb:143:in `all'\n    from (irb):1\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.5/lib/rails/commands/console.rb:44:in `start'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.5/lib/rails/commands/console.rb:8:in `start'\n    from /Users/cyberpunk/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.5/lib/rails/commands.rb:23:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'ruby-1.9.2-p136 :002 > \n```\n\nThis is happening in ruby 1.8.7, 1.9.2 and rails 3.0.3, 3.0.5 in all combinations.\n\nThanks,\nJarrett\n\n[state:open]\n", "created_at": "2011-05-16 04:25:50", "user": 789801, "id": 1171051}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/317626552", "text": "Hi ,\r\nIs there any solution for \"Dirty Nasty Issue 1 - Where did the foreign keys go?\"\r\nThanks,", "created_at": "2017-07-25 04:35:02", "user": 2403001, "id": 317626552}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6217\nCreated by **Greg Hazel** - 2010-12-23 11:10:27 UTC\n\nWhen saving a model with a has_many :through association using .create, a validation exception can be raised when none is expected.\n\n``` ruby\nclass Address < ActiveRecord::Base\n  belongs_to :user\n\n  def validate\n    errors.add :user, \"This is a test.\"\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_many :addresses, :validate => true\n  has_many :admins, :through => :addresses, :source => :user\nend\n\n# (BUG) this raises a ActiveRecord::RecordInvalid (and I did not expect it to since I used .create)\nUser.create(:admins => [User.find(1)])\n\n# (OK) this raises a ActiveRecord::RecordInvalid (and I expect it to since I used .create!)\nUser.create!(:addresses => [Address.find(1)])\n\n# (OK) this does not raise anything (and I did not expect it to since I used .create)\nUser.create(:addresses => [Address.find(1)])\n```\n\nI'm using Rails 2.3.10, but I believe the same applies to Rails 3.\n", "labels": [], "number": 796, "updated_at": "2011-05-24 18:32:09", "user": 789801, "closed_at": "2011-05-24 18:32:08", "id": 904534, "title": "has_many :through associations are created with .create! even if the parent is created with .create", "url": "https://api.github.com/repos/rails/rails/issues/796", "created_at": "2011-05-16 04:25:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171052", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-03-24 00:00:10 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:25:58", "user": 789801, "id": 1171052}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171053", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-03-24 00:01:53 UTC\n\nThis bug still exists. [state:open]\n", "created_at": "2011-05-16 04:25:59", "user": 789801, "id": 1171053}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171054", "text": "_Imported from Lighthouse._\nComment by **Alex** - 2011-03-29 01:20:48 UTC\n\n+1 this problem also exists when using the << method.\n", "created_at": "2011-05-16 04:26:01", "user": 789801, "id": 1171054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171055", "text": "_Imported from Lighthouse._\nComment by **Erik Michaels-Ober** - 2011-03-29 03:52:33 UTC\n\n+1\n\nThis is causing [an issue](https://github.com/sferik/rails_admin/issues/281) in RailsAdmin.\n", "created_at": "2011-05-16 04:26:02", "user": 789801, "id": 1171055}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1190604", "text": "definitely still a problem.\n", "created_at": "2011-05-17 14:11:38", "user": 39884, "id": 1190604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1198805", "text": "Here is a failing test case.\n\n```\nFrom 6f1b989ff254156528f381fa21c25d641631f5a1 Mon Sep 17 00:00:00 2001\nFrom: Joey Butler <joey.butler.1987@gmail.com>\nDate: Wed, 18 May 2011 14:32:18 -0400\nSubject: [PATCH] Add failing test case for issue 796\n\n---\n .../has_many_through_associations_test.rb          |    9 +++++++++\n 1 files changed, 9 insertions(+), 0 deletions(-)\n\ndiff --git a/activerecord/test/cases/associations/has_many_through_associations_test.rb b/activerecord/test/cases/associations/has_many_through_associations_test.rb\nindex 8911759..29f5744 100644\n--- a/activerecord/test/cases/associations/has_many_through_associations_test.rb\n+++ b/activerecord/test/cases/associations/has_many_through_associations_test.rb\n@@ -766,4 +766,13 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase\n     assert_equal [category.name], post.named_category_ids # checks when target loaded\n     assert_equal [category.name], post.reload.named_category_ids # checks when target no loaded\n   end\n+\n+  def test_create_should_not_raise_exception_when_join_record_has_errors\n+    repair_validations(Categorization) do\n+      Categorization.validate { |r| r.errors[:base] << 'Invalid Categorization' }\n+      assert_nothing_raised do\n+        Category.create(:name => 'Fishing', :authors => [Author.first])\n+      end\n+    end\n+  end\n end\n-- \n1.6.4.2\n```\n", "created_at": "2011-05-18 18:35:08", "user": 463572, "id": 1198805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199031", "text": "For some reason my comment wasn't imported from Lighthouse(LH#6217) so copying it here.\n\n+1 \nThe issue exists in edge rails and all previous versions.\nHere is the failing test https://gist.github.com/979254\n\nI need some directions here to fix this issue.\nI see that in activerecord/lib/active_record/associations/has_many_through_association.rb, line 36\n\n```\n  def insert_record(record, validate = true)\n    ensure_not_nested\n    return if record.new_record? && !record.save(:validate => validate)\n\n    through_record(record).save!\n    update_counter(1)\n    record\n  end\n```\n\nthrough_record(join record) is explicitly being saved with save! which will always result in an exception if record not saved. Shouldn't there be a way we can track if we need to use a bang operator here or not and based on that either add error to the parent record or raise exception.\n", "created_at": "2011-05-18 19:09:00", "user": 13324, "id": 1199031}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216762", "text": "Hi Tenderlove,\n\nCould you please confirm if the behavior is expected or do we need a fix for this? \nPlease see my comment above and give some pointers on how to fix this issue. I would love to fix it.\n\nThanks\n", "created_at": "2011-05-22 09:30:49", "user": 13324, "id": 1216762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221114", "text": "Oh man, that sucker is a tough one. since you found the save! that is causing the problem, ( kudos, I never did!) you might be able to ask your call stack if it has a bang in it anywhere attached to a save or a create, but I can't comment on the robustness or performance characteristics of such a fix.\n", "created_at": "2011-05-23 11:24:31", "user": 39884, "id": 1221114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221122", "text": "try something like this: \n\n send(:caller).grep /!/\n", "created_at": "2011-05-23 11:27:27", "user": 39884, "id": 1221122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221155", "text": "That does not seem to be a good solution at all.\n", "created_at": "2011-05-23 11:34:48", "user": 9347, "id": 1221155}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221213", "text": "As of now, all insert record for association methods use `save` and don't manage the bang (it might be managed on a higher level though, if there are some errors returned ?).\n\nSee, for example, [hbtm](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/has_and_belongs_to_many_association.rb#L13) and [has many](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/has_many_association.rb#L12).\n\nTherefore, my suggestion would be to keep it the same way in the has many through.\n\n```\nFrom 24d49331a9f08b665efe00d1060783162affeb09 Mon Sep 17 00:00:00 2001\nFrom: dmathieu <42@dmathieu.com>\nDate: Mon, 23 May 2011 13:47:13 +0200\nSubject: [PATCH] don't use save! in the has many through. Closes #796\n\n---\n .../associations/has_many_through_association.rb   |    2 +-\n 1 files changed, 1 insertions(+), 1 deletions(-)\n\ndiff --git a/activerecord/lib/active_record/associations/has_many_through_association.rb b/activerecord/lib/active_record/associations/has_many_through_association.rb\nindex 7708228..21f8a14 100644\n--- a/activerecord/lib/active_record/associations/has_many_through_association.rb\n+++ b/activerecord/lib/active_record/associations/has_many_through_association.rb\n@@ -37,7 +37,7 @@ module ActiveRecord\n         ensure_not_nested\n         return if record.new_record? && !record.save(:validate => validate)\n\n-        through_record(record).save!\n+        through_record(record).save\n         update_counter(1)\n         record\n       end\n-- \n1.7.0.5\n```\n", "created_at": "2011-05-23 11:49:09", "user": 9347, "id": 1221213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221237", "text": "I tired that earlier but in that case even if you issue \n\n```\nUser.create!(:addresses => [Address.find(1)])\n```\n\nIt won't return any exception, its not managed at higher level.\n", "created_at": "2011-05-23 11:55:39", "user": 13324, "id": 1221237}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1222164", "text": "dmathieu: never said it was a good solution, just _a solution_  . other solutions look like they'd be pretty messy, as they'd require you to pass an option down the stack into the bowels of active record saying whether i was called by a save or a save! or a create or a create!. it seems no uglier to just examine the stack itself, not, obviously, just for the bang, but for a save! or a create! . if the question at hand is \"by what method was I called?\" then a reasonable answer should be \"look at my call stack and tell me\"\n", "created_at": "2011-05-23 15:14:01", "user": 39884, "id": 1222164}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6225\nCreated by **zoopzoop** - 2010-12-26 23:35:07 UTC\n\nI get the following exception\n\n```\nEncoding::CompatibilityError: incompatible encoding regexp match (ASCII-8BIT regexp with UTF-8 string)\n```\n\nBacktrace: https://gist.github.com/755724\n\nSetup:\n\n```\n# routes.rb\nMyApp::Application.routes.draw do\n  get ':id' => 'events#show'\nend\n\n# events_controller.rb\nclass EventsController < ApplicationController\n  caches_action :show\n\n  def show\n    @event = Event.find(params[:id])\n  end\nend\n```\n\nStart Memcached and the Rails server and go to localhost:3000/√° (or √® or √º...)\nUsing Memcached v1.4.5\n", "labels": [], "number": 797, "updated_at": "2011-05-21 15:12:16", "user": 789801, "closed_at": "2011-05-21 15:12:16", "id": 904535, "title": "MemCacheStore can't deal with Umlauts and special characters", "url": "https://api.github.com/repos/rails/rails/issues/797", "created_at": "2011-05-16 04:26:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171056", "text": "_Imported from Lighthouse._\nComment by **Pan Thomakos** - 2011-03-05 19:37:23 UTC\n\nI ran into this same bug with UTF-8 special characters.\n\nThe issue is in the ActiveSupport::Cache::MemCacheStore#escape_key function where the key is checked against an ASCII-8BIT regular expression for special characters. I've created a patch to solve this issue by forcing the encoding to comply with the regular expression's encoding in Ruby 1.9. The tests I added also check that any strings formatted any in any other encoding also work. I checked that tests pass for Ruby 1.8.7 and Ruby 1.9.2.\n\nPlease try the patch and let me know if everything works.\n", "created_at": "2011-05-16 04:26:09", "user": 789801, "id": 1171056}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171057", "text": "_Imported from Lighthouse._\nComment by **Pan Thomakos** - 2011-03-05 22:25:28 UTC\n\nI've update the patch.\n\nAfter making the original change, I realized that the escape_key function forces the initial string into a new encoding. This means that the escape_key function changes the original encoding of the argument, which can cause problems further down the line in an application.\n\nTo fix this I have added another test that checks if the encoding of the original string changes.\n\nPlease use this updated patch that dups the argument to avoid this encoding change issue.\n", "created_at": "2011-05-16 04:26:13", "user": 789801, "id": 1171057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171058", "text": "_Imported from Lighthouse._\nComment by **Pan Thomakos** - 2011-03-13 01:35:16 UTC\n\nI created a pull request for this bug as well.\n\nhttps://github.com/rails/rails/pull/219\n", "created_at": "2011-05-16 04:26:18", "user": 789801, "id": 1171058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171059", "text": "_Imported from Lighthouse._\nComment by **Mike Perham** - 2011-03-25 16:42:35 UTC\n\nI had the same issue in Dalli and fixed it in a similar manner:\n\nhttps://github.com/mperham/dalli/issues/78\n", "created_at": "2011-05-16 04:26:19", "user": 789801, "id": 1171059}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171060", "text": "_Imported from Lighthouse._\nComment by **Pan Thomakos** - 2011-03-25 16:55:48 UTC\n\nThat's very similar to what I do, but I use the encoding of the ESCAPE_KEY_CHARS, in case it ever changes. If you get a chance, please take a look at the patch or pull request and leave your comments if it works.\n", "created_at": "2011-05-16 04:26:21", "user": 789801, "id": 1171060}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171061", "text": "Attachments saved to Gist: http://gist.github.com/971756\n", "created_at": "2011-05-16 04:26:22", "user": 789801, "id": 1171061}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6226\nCreated by **Alexey Ilyichev** - 2011-02-19 14:02:23 UTC\n\nHi!\n\nConsider this code:\n\n``` ruby\nclass UsersController < ApplicationController\n  before_filter :log_filter_call, :only => :index\n  before_filter :log_filter_call, :only => :show\n  # ...\n  # standard scaffold methods\nprivate\n  def log_filter_call\n   logger.debug 'Before filter called during ' + params[:controller] + '#' + params[:action]\n  end\nend\n```\n\nIn rails 2.3.10 log_filter_call not called for #index action, and called twice for #show action\nIn rails 3.0.3 log_filter_call not called for #index action, and called once for #show action\n\nI expected it being called once for both #index and #show.\n", "labels": [], "number": 798, "updated_at": "2011-05-21 15:12:16", "user": 789801, "closed_at": "2011-05-21 15:12:16", "id": 904537, "title": "before_filters overwriting each other", "url": "https://api.github.com/repos/rails/rails/issues/798", "created_at": "2011-05-16 04:26:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171062", "text": "_Imported from Lighthouse._\nComment by **Alexey Ilyichev** - 2010-12-27 15:02:17 UTC\n\nIt seems to me that this code from active_support/callbacks.rb (set_callback method) is what causes that behaviour. I wonder why it was made this way.\n\n``` ruby\nfilters.each do |filter|\n  chain.delete_if {|c| c.matches?(type, filter) }\nend\n```\n", "created_at": "2011-05-16 04:26:28", "user": 789801, "id": 1171062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171063", "text": "_Imported from Lighthouse._\nComment by **Oriol Gual** - 2010-12-27 15:32:48 UTC\n\nWhy don't you just use this:\n\n``` ruby\nclass UsersController < ApplicationController\n  before_filter :log_filter_call, :only => [:index, :show]\n  # ...\nend\n```\n", "created_at": "2011-05-16 04:26:30", "user": 789801, "id": 1171063}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171064", "text": "_Imported from Lighthouse._\nComment by **Alexey Ilyichev** - 2010-12-27 15:36:04 UTC\n\nOriginally we wanted to split some of our controllers into mixins, containing sets of actions, because in our app we have many namespaces that share alot of common actions, but not totally same. And some actions that should belong to different mixins might have the same before_filters, so it would be nice if we could declare the same filter in these mixins and not get a conflict like this.\n", "created_at": "2011-05-16 04:26:31", "user": 789801, "id": 1171064}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171065", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2010-12-28 10:45:42 UTC\n\n+1\nI expected it being called once for both #index and #show too.\n", "created_at": "2011-05-16 04:26:32", "user": 789801, "id": 1171065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171067", "text": "_Imported from Lighthouse._\nComment by **tikh** - 2010-12-29 09:52:20 UTC\n\n+1\n", "created_at": "2011-05-16 04:26:34", "user": 789801, "id": 1171067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171068", "text": "_Imported from Lighthouse._\nComment by **Alexey Ilyichev** - 2010-12-30 09:43:44 UTC\n\nSeems it was intended this way. See commit ef692162.\n", "created_at": "2011-05-16 04:26:35", "user": 789801, "id": 1171068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171069", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-01-22 02:47:20 UTC\n\nThis is how callbacks are working right now.\n\n``` ruby\nclass A < ApplicationController\n before_filter :ensure_logged_in, :only => [:index] \n def index\n  end\nend\n\nclass B < A\n before_filter :ensure_logged_in, :except => [:index] \n # index will be called without calling ensure_logged_in\n def index\n end\nend\n```\n\nIf the behavior of the callback is changed to not to remove duplicate callbacks then a subclass always has to worry about unwanted changes propagating to it. That would mean any subclass will have to guard itself by using skip_before_filter then use its own filter.\n\nOn the flip side I do think inheritance means subclass probably wants the behavior given to parent class.\n\nThis change would potentially break existing apps if  they are relying in the feature I illustrated above.\n", "created_at": "2011-05-16 04:26:36", "user": 789801, "id": 1171069}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6231\nCreated by **Tom** - 2011-01-03 06:50:19 UTC\n\nI couldn't find any other tickets related to this so I wanted to make sure it was covered.  My functional tests make use of the fixture_file_upload method which isn't representative of the new ActionDispatch::Http::UploadedFile class for uploaded files.  This bit me when my code called the path method on an uploaded file: undefined method `path' for #ActionDispatch::Http::UploadedFile:0x104233110\n", "labels": [], "number": 799, "updated_at": "2014-06-24 13:11:05", "user": 789801, "closed_at": "2011-05-21 15:12:16", "id": 904538, "title": "fixture_file_upload behavior", "url": "https://api.github.com/repos/rails/rails/issues/799", "created_at": "2011-05-16 04:26:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1371756", "text": "Can we reopen this?  The problem is in Rails 3.0.3 ActionDispatch::Http::UploadedFile was changed to no longer directly be a Tempfile, but Rack::Test::UploadedFile still is.  In my case I'm passing the file to FasterCSV.  For an ActionDispatch::Http::UploadedFile I have to call params[:file].tempfile, otherwise FasterCSV gets a NoMethodError for #pos.  On the other side of things, Rack::Test::UploadedFile doesn't have the tempfile method (because it IS a tempfile).  The result is a nasty conditional in my code.\n", "created_at": "2011-06-15 07:16:28", "user": 5603, "id": 1371756}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2721471", "text": "I agree with dasil, there is some issue still with fixture_file_upload, when some code uses the tempfile method with 3.1.1. I had to put a work-around like this in some test code :\n\n```\n@testimage = fixture_file_upload(\"my_file.png\")\nclass << @testimage\n  attr_reader :tempfile\nend\n```\n", "created_at": "2011-11-13 09:30:43", "user": 131461, "id": 2721471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4299943", "text": "I would like to see this fixed as well.\n", "created_at": "2012-03-03 10:54:34", "user": 55320, "id": 4299943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4834292", "text": "+1 -- can we reopen at least?\n\n@mose workaround also worked for me.\n\nAre the 2 options:\n1) Rails monkey-patches something like @mose's solution into source?\n2) Rails builds it's own UploadedFile stub.\n\n?\n\nHere's the issue from Rack::Test https://github.com/brynary/rack-test/issues/30. He makes a valid point that this is a rails issue, not a Rack one.\n", "created_at": "2012-03-30 00:30:16", "user": 426690, "id": 4834292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8805687", "text": "There is some kind of solution for this issue now?\nI cant figure out a way to really functional test my controller since it uses the **tempfile** method too.\n", "created_at": "2012-09-24 01:55:04", "user": 307759, "id": 8805687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9083824", "text": "+1\n", "created_at": "2012-10-02 19:34:44", "user": 215016, "id": 9083824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9243183", "text": "+1\n", "created_at": "2012-10-08 22:45:56", "user": 37291, "id": 9243183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13789800", "text": "+1 monkey patching every object that you want to test file upload kinda sucks\n", "created_at": "2013-02-19 18:39:24", "user": 215016, "id": 13789800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15091494", "text": "+1\n", "created_at": "2013-03-19 00:51:04", "user": 1548203, "id": 15091494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/46968406", "text": "+1\n", "created_at": "2014-06-24 13:11:05", "user": 1837897, "id": 46968406}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6232\nCreated by **Toyama Tokanawa** - 2011-02-16 07:20:10 UTC\n\nIf :mapping option for an aggregated attribute has mappings to a delegated attribute/method, :constructor receives \"nil\" instead of the expected value.\n\nExample:\n\n<pre>\nclass OrderTransaction < ActiveRecord::Base\n  belongs_to :order\n  delegate :currency, :to => :order\n  composed_of :amount\n              :class_name => \"Money\",\n              :mapping => [%w(amount cents), %w(currency currency_as_string)],\n              :constructor => proc { |cents, currency| Money.new(cents, currency) }\nend\n</pre>\n\n\nLater, such order_transaction.amount.currency is always \"USD\" (default currency for Money). Debugging reveals that \"currency\" passed to the :constructor proc is \"nil\".\nThis is caused by doing explicit \"read_attribute\" in aggregations.rb (which doesn't take into account delegations and such). I suggest replacing \"read_attribute(attr_name)\" with \"self.send(attr_name)\".\nThe patch is attached.\n", "labels": [], "number": 800, "updated_at": "2011-06-22 21:03:53", "user": 789801, "closed_at": "2011-05-21 15:12:16", "id": 904539, "title": "ActiveRecord composed_of doesn't work with delegated attributes and methods", "url": "https://api.github.com/repos/rails/rails/issues/800", "created_at": "2011-05-16 04:26:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171070", "text": "Attachments saved to Gist: http://gist.github.com/971757\n", "created_at": "2011-05-16 04:26:49", "user": 789801, "id": 1171070}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6243\nCreated by **Steve Price** - 2011-02-19 09:28:20 UTC\n\nCalling ActionController::Base.class_eval clobbers the value of\nFoobar::Application.config.action_view.\n\n```\n% rails new foobar > /dev/null\n% cd foobar\n% rails c\nLoading development environment (Rails 3.0.3)\nruby-1.9.2-p136 > Foobar::Application.config.action_view\n => {:stylesheet_expansions=>{}, :javascript_expansions=>{:defaults=>[\"prototype\", \"effects\", \"dragdrop\", \"controls\", \"rails\"]}, :debug_rjs=>true} \nruby-1.9.2-p136 > ActionController::Base.class_eval {}\n => nil \nruby-1.9.2-p136 > Foobar::Application.config.action_view\n => {:debug_rjs=>true} \nruby-1.9.2-p136 > quit\n% \n```\n\nBelow is a script that highlights one potential source for\nthe issue.\n\n```\nrequire 'rubygems'\ngem 'rails', '3.0.3'\nrequire 'rails/all'\n\nmodule Rails\n  module Initializable\n    class Initializer\n      def run(*args)\n        # remove the next line to see action_view get clobbered\n        return if :add_view_paths == @name\n        @context.instance_exec(*args, &block)\n      end\n    end\n  end\nend\nmodule Foobar; class Application < Rails::Application; end; end\n\nFoobar::Application.initialize!\nputs Foobar::Application.config.action_view\nActionController::Base.class_eval {}\nputs Foobar::Application.config.action_view\n```\n", "labels": [], "number": 801, "updated_at": "2011-05-21 15:12:16", "user": 789801, "closed_at": "2011-05-21 15:12:16", "id": 904540, "title": "ActionController::Base.class_eval clobbers config.action_view value", "url": "https://api.github.com/repos/rails/rails/issues/801", "created_at": "2011-05-16 04:26:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171072", "text": "_Imported from Lighthouse._\nComment by **Steve Price** - 2011-01-01 03:59:52 UTC\n\nHere's a patch that resolves the issue here. I'm investigating\nwhether the 'action_view.set_configs' initializer should go away\nas well.\n\n```\ndiff --git a/actionpack/lib/action_view/railtie.rb b/actionpack/lib/action_view/railtie.rb\nindex 501ec07..99eaecd 100644\n--- a/actionpack/lib/action_view/railtie.rb\n+++ b/actionpack/lib/action_view/railtie.rb\n@@ -16,22 +16,11 @@ module ActionView\n       end\n     end\n\n-    initializer \"action_view.javascript_expansions\" do |app|\n-      ActiveSupport.on_load(:action_view) do\n-        ActionView::Helpers::AssetTagHelper.register_javascript_expansion(\n-          app.config.action_view.delete(:javascript_expansions)\n-        )\n-\n-        ActionView::Helpers::AssetTagHelper.register_stylesheet_expansion(\n-          app.config.action_view.delete(:stylesheet_expansions)\n-        )\n-      end\n-    end\n-\n     initializer \"action_view.set_configs\" do |app|\n       ActiveSupport.on_load(:action_view) do\n         app.config.action_view.each do |k,v|\n-          send \"#{k}=\", v\n+          send \"#{k}=\", v unless [:javascript_expansions,\n+            :stylesheet_expansions].include? k\n         end\n       end\n     end\n```\n", "created_at": "2011-05-16 04:26:54", "user": 789801, "id": 1171072}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6247\nCreated by **Laurent Farcy** - 2011-03-29 01:29:20 UTC\n\nHere's a reply received from the Twitter API (users/show call) that the YAML-based JSON decoder is unable to parse.\n\n```\n{\"profile_background_tile\":true,\"time_zone\":\"Quito\",\"friends_count\":55,\"favourites_count\":1,\"description\":\"\",\"status\":{\"in_reply_to_status_id_str\":null,\"place\":null,\"in_reply_to_user_id\":null,\"text\":\"RT @oizo3000: .\\u00aa)\\u0004.k\\u00f6\\u00ee\\u02c6_\\u00d9\\u00f1\\u00ba#\\u00eb\\u00d9\\u00ff\\u0000vm\\u00df\\u017d\\u00b0\\u007D\\u0178\\u0018\\u000b\\u00eb\\u00b9\\u00df\\u00fe!w\\u0192\\u00ec\\u00f8\\u00d6f\\u00a4\\u00a58\\u00b2\\u00a8\\u009d8\\u00e9\\\"\\u00fdP\\u201c\\u0012\\u00e8cC\\u00aaZw\\u00d5\\u00b4\\nb\\u001d\\u00ce\\u2014\\u00b3\\u007D\\u00a3K\\u00d6\\u00c7)\\u00be\\u00b18\\u0015\\u001a\\u00a1:\\u00f8\\u00fc\\u00e1\\u00e1\\u0178\\u00ac\\u0000\\u00a2\\u0013\\u0000\\u0018zi\\u00d7\\u00a6\\u00d0\\u0006\\u2022\\u00e5\\u00e1\\u00f8\\u00c0\\u0000f]o&lt;\\u2020\\u00d1\\u00aa\\u017d\\u00c2\\u00001m\\u00a9\\u00b7T\\u2014P\\u00a4 ...\",\"contributors\":null,\"retweet_count\":38,\"in_reply_to_user_id_str\":null,\"retweeted_status\":{\"in_reply_to_status_id_str\":null,\"place\":null,\"in_reply_to_user_id\":null,\"text\":\".\\u00aa)\\u0004.k\\u00f6\\u00ee\\u02c6_\\u00d9\\u00f1\\u00ba#\\u00eb\\u00d9\\u00ff\\u0000vm\\u00df\\u017d\\u00b0\\u007D\\u0178\\u0018\\u000b\\u00eb\\u00b9\\u00df\\u00fe!w\\u0192\\u00ec\\u00f8\\u00d6f\\u00a4\\u00a58\\u00b2\\u00a8\\u009d8\\u00e9\\\"\\u00fdP\\u201c\\u0012\\u00e8cC\\u00aaZw\\u00d5\\u00b4\\nb\\u001d\\u00ce\\u2014\\u00b3\\u007D\\u00a3K\\u00d6\\u00c7)\\u00be\\u00b18\\u0015\\u001a\\u00a1:\\u00f8\\u00fc\\u00e1\\u00e1\\u0178\\u00ac\\u0000\\u00a2\\u0013\\u0000\\u0018zi\\u00d7\\u00a6\\u00d0\\u0006\\u2022\\u00e5\\u00e1\\u00f8\\u00c0\\u0000f]o&lt;\\u2020\\u00d1\\u00aa\\u017d\\u00c2\\u00001m\\u00a9\\u00b7T\\u2014P\\u00a4,ox\\u0000\\u00f9\\t7'&\\u00c2Y\\u0019\\u00ed\\u00aa\\u00bd \\tkl\\u00ad\",\"contributors\":null,\"retweet_count\":38,\"in_reply_to_user_id_str\":null,\"retweeted\":false,\"id_str\":\"18078479593504768\",\"source\":\"web\",\"truncated\":false,\"geo\":null,\"in_reply_to_status_id\":null,\"favorited\":false,\"id\":18078479593504768,\"coordinates\":null,\"in_reply_to_screen_name\":null,\"created_at\":\"Thu Dec 23 23:00:20 +0000 2010\"},\"retweeted\":false,\"id_str\":\"18108105204170753\",\"source\":\"web\",\"truncated\":true,\"geo\":null,\"in_reply_to_status_id\":null,\"favorited\":false,\"id\":18108105204170753,\"coordinates\":null,\"in_reply_to_screen_name\":null,\"created_at\":\"Fri Dec 24 00:58:03 +0000 2010\"},\"verified\":false,\"profile_link_color\":\"0084B4\",\"location\":\"\",\"follow_request_sent\":false,\"profile_sidebar_border_color\":\"BDDCAD\",\"id_str\":\"18656867\",\"show_all_inline_media\":false,\"geo_enabled\":false,\"url\":\"http:\\/\\/fullyfitted.blogspot.com\\/\",\"profile_use_background_image\":true,\"lang\":\"en\",\"profile_background_color\":\"9AE4E8\",\"profile_image_url\":\"http:\\/\\/a0.twimg.com\\/profile_images\\/69874360\\/xxx_logobar_web_normal.jpg\",\"is_translator\":false,\"listed_count\":55,\"profile_background_image_url\":\"http:\\/\\/a2.twimg.com\\/profile_background_images\\/4349971\\/airhorn.gif\",\"followers_count\":1602,\"protected\":false,\"contributors_enabled\":false,\"notifications\":false,\"screen_name\":\"alexxxchange\",\"name\":\"alexxxchange\",\"statuses_count\":737,\"following\":false,\"profile_text_color\":\"333333\",\"id\":18656867,\"utc_offset\":-18000,\"created_at\":\"Tue Jan 06 02:00:44 +0000 2009\",\"profile_sidebar_fill_color\":\"DDFFCC\"}\n```\n\nUnfortunately, I have not managed to pinpoint the exact sequence that the parser fails upon but the culprit seems to be the text attribute with its multiple unicode characters.\n\nHere's the exception that I get (after modifying the original code base to get the root cause)\n\n```\nArgumentError: syntax error on line 0, col 268: `{\"profile_background_tile\": true, \"time_zone\": \"Quito\", \"friends_count\": 55, \"favourites_count\": 1, \"description\": \"\", \"status\": {\"in_reply_to_status_id_str\": null, \"place\": null, \"in_reply_to_user_id\": null, \"text\": \"RT @oizo3000: .¬™).k√∂√ÆÀÜ_√ô√±¬∫#√´√ô√ø'\n        from /usr/local/lib/ruby/1.8/yaml.rb:133:in `load'\n        from /usr/local/lib/ruby/1.8/yaml.rb:133:in `load'\n        from /Volumes/Data/Users/lfarcy/workspace/bugfix/vendor/rails/activesupport/lib/active_support/json/backends/yaml.rb:12:in `decode'\n        from /Volumes/Data/Users/lfarcy/workspace/bugfix/vendor/rails/activesupport/lib/active_support/json/decoding.rb:11:in `__send__'\n        from /Volumes/Data/Users/lfarcy/workspace/bugfix/vendor/rails/activesupport/lib/active_support/json/decoding.rb:11:in `decode'\n        from (irb):4\n```\n\nThe same JSON chunk works with the JSON gem. To work around this issue, I had to enforce JSONGem as the default JSON backend.\n\nSince I'm still running Rails 2.3.5, I tried a fix on convert_json_to_yaml that was introduced in 2.3.6 (see #2831). But it did not fix the issue hereby.\n", "labels": [], "number": 802, "updated_at": "2011-05-21 15:12:16", "user": 789801, "closed_at": "2011-05-21 15:12:16", "id": 904542, "title": "ActiveSupport::JSON.decode fails on long unicode sequence with default YAML-based parser", "url": "https://api.github.com/repos/rails/rails/issues/802", "created_at": "2011-05-16 04:27:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6251\nCreated by **ronin-131274 (at lighthouseapp)** - 2011-01-05 05:15:05 UTC\n\nclass Device < ActiveRecord::Base\n  has_many :units\n  has_many :components, :through => :units\nend\n\nclass Component < ActiveRecord::Base\n  has_one :unit\n  has_one :device, :through => :unit\nend\n\nclass Unit < ActiveRecord::Base\n  belongs_to :device\n  belongs_to :component\nend\n\nEverything I add a device_id to a component, it adds 1 to the device_id stored in the Units table.\n\nx=Component.new\nx.device=1\nx.save\n\ndevice_id=2 in the Unit model\n", "labels": [], "number": 803, "updated_at": "2011-05-21 15:12:16", "user": 789801, "closed_at": "2011-05-21 15:12:16", "id": 904543, "title": "has_one through incorrect id add", "url": "https://api.github.com/repos/rails/rails/issues/803", "created_at": "2011-05-16 04:27:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171074", "text": "_Imported from Lighthouse._\nComment by **glebm** - 2011-01-10 21:31:54 UTC\n\nConfirmed\n", "created_at": "2011-05-16 04:27:07", "user": 789801, "id": 1171074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171075", "text": "_Imported from Lighthouse._\nComment by **gerardc** - 2011-01-11 14:10:58 UTC\n\nWhy would you add 1 as the device for x and not a Component object?\n", "created_at": "2011-05-16 04:27:08", "user": 789801, "id": 1171075}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171076", "text": "_Imported from Lighthouse._\nComment by **gerardc** - 2011-01-11 14:15:05 UTC\n\nEdit to my previous comment:\n\nWhy would you set x.device to hold the value 1 instead of a **Device** object\n\n/newb\n", "created_at": "2011-05-16 04:27:09", "user": 789801, "id": 1171076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171078", "text": "_Imported from Lighthouse._\nComment by **ronin-131274 (at lighthouseapp)** - 2011-01-11 14:23:07 UTC\n\nIf I wanted to assign a component to a device.\n", "created_at": "2011-05-16 04:27:11", "user": 789801, "id": 1171078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171080", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-03-12 16:19:32 UTC\n\nthis looks as though it doesn't honor the contract in associations.\n\nx.device = 1 is not a proper assignment. You must assign x's device association to a device object.\n\nx.device_id = 1 should successfully assign the foreign key for you.\n", "created_at": "2011-05-16 04:27:12", "user": 789801, "id": 1171080}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6266\nCreated by **Ngan** - 2011-02-17 06:48:05 UTC\n\nHi, I'm on Rails 2.3.8, but I think this problem affects Rails 3.x as well.\n\nAfter using ActiveRecord::Base.verify_active_connections! after the mysql going away, or even a manual disconnect, I cannot seem to do a \"LOAD DATA INFILE\" query.  I get an error from MySQL: \"ActiveRecord::StatementInvalid: Mysql::Error: The used command is not allowed with this MySQL version\"\n\nYes, I have checked permissions and what not. I can do the LOAD DATA INFILE before the reconnect.\n\nTo duplicate, simply boot up console:\n\n<code>\n\n> ActiveRecord::Base.connection.disconnect!\n> ActiveRecord::Base.verify_active_connections!\n> ActiveRecord::Base.connection.execute(\"LOAD DATA INFILE '/tmp/some_file.txt' INTO some_table\")\n> </code>\n", "labels": [], "number": 804, "updated_at": "2011-05-21 15:12:17", "user": 789801, "closed_at": "2011-05-21 15:12:16", "id": 904545, "title": "Cannot execute mysql \"LOAD DATA INFILE\" query after using verify_active_connections!", "url": "https://api.github.com/repos/rails/rails/issues/804", "created_at": "2011-05-16 04:27:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171082", "text": "_Imported from Lighthouse._\nComment by **Ngan** - 2011-01-08 07:24:40 UTC\n\n<code>\n\n> ActiveRecord::Base.connection.disconnect!\n> ActiveRecord::Base.verify_active_connections!\n> ActiveRecord::Base.connection.execute(\"LOAD DATA INFILE '/tmp/some_file.txt' INTO some_table\")\n> </code>\n", "created_at": "2011-05-16 04:27:19", "user": 789801, "id": 1171082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171083", "text": "_Imported from Lighthouse._\nComment by **Ngan** - 2011-01-08 08:19:10 UTC\n\nActual console output\n\n```\nruby-1.8.6-p399 :003 > ActiveRecord::Base.connection.execute(\"LOAD DATA LOCAL INFILE '/tmp/test.infile' INTO TABLE users\")\n[Sat Jan 08 00:09:29 2011] (9990)   SQL (1.7ms)   LOAD DATA LOCAL INFILE '/tmp/test.infile' INTO TABLE users\n => nil \nruby-1.8.6-p399 :004 > ActiveRecord::Base.connection.disconnect!\n => #<Mysql:0x104c6f890> \nruby-1.8.6-p399 :005 > ActiveRecord::Base.verify_active_connections!\n[Sat Jan 08 00:09:58 2011] (9990)   SQL (0.2ms)   SET SQL_AUTO_IS_NULL=0\n => {‚Ä¶connection stuff‚Ä¶} \nruby-1.8.6-p399 :006 > ActiveRecord::Base.connection.execute(\"LOAD DATA LOCAL INFILE '/tmp/test.infile' INTO TABLE users\")\n[Sat Jan 08 00:10:00 2011] (9990)   SQL (0.0ms)   Mysql::Error: The used command is not allowed with this MySQL version: LOAD DATA LOCAL INFILE '/Users/Ngan/Development/streamsend/ngan.infile' INTO TABLE users\nActiveRecord::StatementInvalid: Mysql::Error: The used command is not allowed with this MySQL version: LOAD DATA LOCAL INFILE '/tmp/test.infile' INTO TABLE users\n    from /Users/Ngan/.rvm/gems/ruby-1.8.6-p399@streamsend/gems/activerecord-2.3.8/lib/active_record/connection_adapters/abstract_adapter.rb:221:in `log'\n    from /Users/Ngan/.rvm/gems/ruby-1.8.6-p399@streamsend/gems/activerecord-2.3.8/lib/active_record/connection_adapters/mysql_adapter.rb:323:in `execute'\n    from (irb):6\n```\n", "created_at": "2011-05-16 04:27:20", "user": 789801, "id": 1171083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171084", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2011-01-10 10:28:36 UTC\n\nIs the --local-infile option commented on here http://dev.mysql.com/doc/refman/5.0/en/loading-tables.html relevent?\n", "created_at": "2011-05-16 04:27:21", "user": 789801, "id": 1171084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171085", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2011-01-10 10:48:15 UTC\n\n...and probably this too: http://dev.mysql.com/doc/refman/5.1/en/load-data-local.html\n", "created_at": "2011-05-16 04:27:23", "user": 789801, "id": 1171085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171086", "text": "_Imported from Lighthouse._\nComment by **Ngan** - 2011-01-10 22:27:19 UTC\n\nI've gone through all the MySQL documentation and made sure everything has permissions.  You'll notice in my console output, the first I do the LOAD DATA LOCAL INFILE, I am able to do it just fine.  It is only after the reconnect that it has the error.\n\nBTW, I tested this further and it's only happening for LOAD DATA LOCAL INFILE, not LOAD DATA INFILE.  The LOCAL is key.\n", "created_at": "2011-05-16 04:27:24", "user": 789801, "id": 1171086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171087", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2011-01-11 09:11:03 UTC\n\nNote at the bottom of http://dev.mysql.com/doc/refman/5.1/en/load-data-local.html, the last comment details how to configure client and server to always allow LOAD DATA LOCAL INFILE.  Yes LOCAL is key - it _has_ to be enabled explicitly because otherwise it is a security risk to MySQL.\n\nAs for why it works initially, and not after a reconnect, I have no idea other than that the connect is clearly enabling it, whilst the reconnect is not.  I'll leave that to someone more knowledgeable about ActiveRecord, MySQL AR adapter, MySQL gem (or is it mysql2 you are using), mysql client libraries, etc.\n", "created_at": "2011-05-16 04:27:25", "user": 789801, "id": 1171087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171089", "text": "_Imported from Lighthouse._\nComment by **Ngan** - 2011-01-11 18:04:44 UTC\n\nI'm using Rails 2.3.8, so it's on the mysql gem (not mysql2).  I've also updated to the latest gem version of mysql, and still get the same problem.\n", "created_at": "2011-05-16 04:27:27", "user": 789801, "id": 1171089}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171090", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2011-01-13 13:29:20 UTC\n\nWe are running Rails 2.2.1 with the mysql gem, but I believe I have fixed the problem by adding\n\n```\n@connection.options(Mysql::OPT_LOCAL_INFILE, 1)\n```\n\nin `mysql_adapter.rb` in `connect` at line 555 or anywhere before the call to `@connection.real_connect`.\n\nNote also #1797 which fixes the `:reconnect` option if you are running Rails < 2.3: basically you move the line that sets `@connection.reconnect` after the call to `@connection.real_connect`.\n\nWe are in the middle of upgrading to mysql2 gem, so I will confirm that the change also works there.\n", "created_at": "2011-05-16 04:27:28", "user": 789801, "id": 1171090}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171091", "text": "_Imported from Lighthouse._\nComment by **Ngan** - 2011-01-13 19:34:50 UTC\n\nAwesome! I confirmed that it fixed it for me as well.  Any case someone can make a patch for this?\n\nJonathan, do update on how it goes with mysql2.\n\nThanks!\n", "created_at": "2011-05-16 04:27:30", "user": 789801, "id": 1171091}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171092", "text": "_Imported from Lighthouse._\nComment by **Jonathan Monahan** - 2011-01-13 23:18:10 UTC\n\nYup, this also works with the mysql2 gem.\n", "created_at": "2011-05-16 04:27:31", "user": 789801, "id": 1171092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171093", "text": "_Imported from Lighthouse._\nComment by **Ngan** - 2011-02-11 23:15:01 UTC\n\nIs this happening for anyone else?\n", "created_at": "2011-05-16 04:27:32", "user": 789801, "id": 1171093}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171094", "text": "_Imported from Lighthouse._\nComment by **Ngan** - 2011-02-16 19:41:50 UTC\n\nHere's a patch that I did in my Rails app to fix this:\n\n``` ruby\nmodule ActiveRecord\n  module ConnectionAdapters\n    class MysqlAdapter\n    private\n      def connect_with_local_infile\n        @connection.options(Mysql::OPT_LOCAL_INFILE, 1)\n        connect_without_local_infile\n      end\n      alias_method_chain :connect, :local_infile\n    end\n  end\nend\n```\n", "created_at": "2011-05-16 04:27:34", "user": 789801, "id": 1171094}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6273\nCreated by **Paul Schreiber** - 2011-01-10 17:16:44 UTC\n\nNote: I am using Rails 2.3.10. \n\nNormally, you can use Rails‚Äô I18n system to generate label text. \n\nFor example, suppose you have a Person class with a name attribute. And this ERB: \n<%= form_for @person do |f| %> \n<%= f.label :name %> \n<%= f.text_field :name %> \n<% end %> \n\nAnd you‚Äôd construct your en.yml like so: \nen: \n  helpers: \n    label: \n      name: ‚Äúyour name‚Äù \n\nHowever, this doesn‚Äôt work very well with related objects and accepts_nested_attributes_for. Suppose you have the same Person class as before. And person has_many :activities (likewise, activity belongs_to :person) and accepts_nested_attributes_for :activities. \n\nNow your ERB looks like this: \n<%= form_for @person do |f| %> \n<%= f.label :name %> \n<%= f.text_field :name %> \n        <% f.fields_for :activities do |a| %> \n                <%= l.label :difficulty %> \n                <%= l.text_field :difficulty %> \n        <% end %> \n<% end %> \n\nVarious combinations indentation of person / activities / difficulty in my en.yml file didn‚Äôt work. So I looked inside rails to see what‚Äôs going on. \n\nThe relevant code is in actionpack-2.3.10/lib/action_view/helpers/form_helper.rb. The method used is  \n        def to_label_tag(text = nil, options = {}) \non line 758. \n\nAnd the code doing the work is: \n        content = if text.blank? \n          i18n_label = I18n.t(\"helpers.label.#{object_name}.#{method_name}\", :default => ‚Äú‚Äù) \n          i18n_label if i18n_label.present? \n        else \n          text.to_s \n        end \n\nThe problem is you end up with a set of labels like: \n        helpers.label.person[activities_attributes][0].difficulty \n        helpers.label.person[activities_attributes][1].difficulty \n        helpers.label.person[activities_attributes][2].difficulty\n", "labels": [], "number": 805, "updated_at": "2011-07-05 03:42:42", "user": 789801, "closed_at": "2011-05-21 15:12:17", "id": 904548, "title": "Cannot create I18n labels when using accepts_nested_attributes_for", "url": "https://api.github.com/repos/rails/rails/issues/805", "created_at": "2011-05-16 04:27:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171095", "text": "_Imported from Lighthouse._\nComment by **Alexey Nayden** - 2011-01-23 23:53:35 UTC\n\nThe same problem found in rails 3.0.3\n\nHere're test and patch\n", "created_at": "2011-05-16 04:27:41", "user": 789801, "id": 1171095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171097", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-04-30 00:00:08 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:27:42", "user": 789801, "id": 1171097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171098", "text": "_Imported from Lighthouse._\nComment by **Paul Schreiber** - 2011-04-30 00:04:22 UTC\n\n[state:open]\n", "created_at": "2011-05-16 04:27:43", "user": 789801, "id": 1171098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171099", "text": "Attachments saved to Gist: http://gist.github.com/971758\n", "created_at": "2011-05-16 04:27:45", "user": 789801, "id": 1171099}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1501341", "text": "Can someone reopen this? It's still broken.\n", "created_at": "2011-07-05 03:42:42", "user": 86784, "id": 1501341}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6277\nCreated by **Drew Chandler** - 2011-01-11 07:05:44 UTC\n\nOn Postgres when ActiveRecord::Base.schema_format is set to :sql and the user has turned off autocommit(most likely because they have \"\\set AUTOCOMMIT off\" in their .psqlrc) the results of the rake task db:test:clone_structure will not be committed. This leaves the user with an empty test db.\n\nBy adding --single-transaction to the psql command, the contents of the structure sql file gets wrapped in a BEGIN and COMMIT. This will ensure the rake task will commit even if autocommit is disabled. This flag was introduced in 8.2 and is in all the current stable versions. Here is a link to the docs on it: http://www.postgresql.org/docs/9.0/static/app-psql.html\n\nI have a patch to add the flag but did not add any tests. As far as I can tell these rake tasks are untested. If this is not the case I will be more than happy to augment the patch with tests.\n", "labels": [], "number": 806, "updated_at": "2011-05-21 15:12:17", "user": 789801, "closed_at": "2011-05-21 15:12:17", "id": 904549, "title": "results of db:test:clone_structure do not get committed in postgres if the user has autocommit turned off", "url": "https://api.github.com/repos/rails/rails/issues/806", "created_at": "2011-05-16 04:27:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171101", "text": "_Imported from Lighthouse._\nComment by **Juan Manuel Cuello** - 2011-04-09 18:22:59 UTC\n\nI tested the patch and it works OK with PostgreSQL 9.0.3.\n\nBut if --single-transaction was introduced in 8.2, I think would be better to check the server version before using the flag, maybe defining a new method in _postgresql_adapter.rb_ to see if --single-transaction flag is supported, similar to 'supports_insert_with_returning?' method.\n\nSomething like:\n\n```\ndef supports_single_transaction?\n  postgresql_version >= 80200\nend\n```\n\nAnd then you can do:\n\n```\nsingle_transaction = '--single-transaction' if ActiveRecord::Base.connection.supports_single_transaction?\n`psql -U \"#{abcs[\"test\"][\"username\"]}\" #{single_transaction} -f #{Rails.root}/db/#{Rails.env}_structure.sql {abcs[\"test\"][\"database\"]} #{abcs[\"test\"][\"template\"]}`\n\n```\n", "created_at": "2011-05-16 04:27:50", "user": 789801, "id": 1171101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171102", "text": "_Imported from Lighthouse._\nComment by **Juan Manuel Cuello** - 2011-04-18 01:20:43 UTC\n\nBut according to [35b2715456999662cc34390e258962738aaa8dc7], only pg >= 8.2 is supported, so there is no need to check the version.\n", "created_at": "2011-05-16 04:27:52", "user": 789801, "id": 1171102}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171103", "text": "Attachments saved to Gist: http://gist.github.com/971759\n", "created_at": "2011-05-16 04:27:53", "user": 789801, "id": 1171103}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6278\nCreated by **Joseph Holsten** - 2011-01-11 15:59:35 UTC\n\nCodeStatistics is wonky. It's to_s actually just fires a bunch of puts, and there's no good way to get at the data if you want to present it differently. This patch separates CodeStatistics from the printing. I needed this to render a code stats in a web page for https://github.com/dhh/conductor, so I've merged this back in.\n\nAlso, this should make it easier to test #2299 and the spec bit in #4164.\n\nIncludes patch and test.\n", "labels": [], "number": 807, "updated_at": "2011-05-21 15:12:17", "user": 789801, "closed_at": "2011-05-21 15:12:17", "id": 904550, "title": "Seperate CodeStatistics Rendering from Calculation", "url": "https://api.github.com/repos/rails/rails/issues/807", "created_at": "2011-05-16 04:27:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171105", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-03-12 16:11:22 UTC\n\nI dig the approach, and it applies cleanly to edge.\n\nBut, isn't the correlating test a bit brittle in the sense that any changes to the test application will cause your test to fail? I'm not sure I can suggest a better alternative, but I can see this as a potential annoyance when making significant changes to railties.\n", "created_at": "2011-05-16 04:27:59", "user": 789801, "id": 1171105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171106", "text": "Attachments saved to Gist: http://gist.github.com/971760\n", "created_at": "2011-05-16 04:28:01", "user": 789801, "id": 1171106}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6281\nCreated by **Greg Hazel** - 2011-01-12 12:06:42 UTC\n\nWhen specifying the table name in an ActiveRecord model scope, the bind variables expansion runs when it should not:\n\n``` ruby\n>> Action.scoped(:conditions => {:actions => {:message => [\"is this fun?\", \"hats are nice\"]}})\nActiveRecord::PreparedStatementInvalid: wrong number of bind variables (0 for 1) in: `actions`.`message` IN ('is this fun?','hats are nice')\n```\n\nThese forms all work as expected:\n\n``` ruby\n>> # no question mark\n>> Action.scoped(:conditions => {:actions => {:message => [\"is this fun\", \"hats are nice\"]}})\nAction Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun','hats are nice'))\n\n>> # no table name\n>> Action.scoped(:conditions => {:message => [\"is this fun?\", \"hats are nice\"]})\nAction Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))\n\n>> # no nesting\n>> Action.scoped(:conditions => {\"actions.message\" => [\"is this fun?\", \"hats are nice\"]})\nAction Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))\n```\n\nI believe the problem is that sanitize_sql_hash_for_conditions calls itself recursively after generating the table name, and expand_range_bind_variables is called twice instead of once as it unwinds.\n\nhttps://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2355\nhttps://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2359\n", "labels": [], "number": 808, "updated_at": "2011-05-21 15:12:17", "user": 789801, "closed_at": "2011-05-21 15:12:17", "id": 904551, "title": "double bind variable expansion in activerecord condtions", "url": "https://api.github.com/repos/rails/rails/issues/808", "created_at": "2011-05-16 04:28:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171107", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-04-13 00:00:08 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:28:07", "user": 789801, "id": 1171107}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171108", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-04-13 04:17:55 UTC\n\n[state:open]\n", "created_at": "2011-05-16 04:28:09", "user": 789801, "id": 1171108}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6283\nCreated by **bhushan** - 2011-01-12 14:37:23 UTC\n\nIn rails 3 when we attach pdf document in email through action mailer,\nthat pdf is not come as a attachment in e-mail, its come in body like\n\nDate: Wed, 29 Dec 2010 19:56:12 +0530\nMime-Version: 1.0\nContent-Type: application/pdf;\ncharset=UTF-8;\nfilename=free_book.pdf\nContent-Transfer-Encoding: base64\nContent-Disposition: attachment;\nfilename=free_book.pdf\nContent-ID: 4d1b450431abc_e3c211babc122f@xxxxxxxxxxxxx\n\nJVBERi0xLjMKJf////8KMSAwIG9iago8PCAvQ3JlYXRvciAoUHJhd24pCi9Q\ncm9kdWNlciAoUHJhd24pCj4+CmVuZG9iagoyIDAgb2JqCjw8IC9UeXBlIC9Q\nYWdlcwovQ291bnQgMQovS2lkcyBbNSAwIFJdCj4+CmVuZG9iagozIDAgb2Jq\nCjw8IC9UeXBlIC9DYXRhbG9nCi9QYWdlcyAyIDAgUgo+PgplbmRvYmoKNCAw\nIG9iago8PCAvTGVuZ3RoIDU4OAo+PgpzdHJlYW0KL0RldmljZVJHQiBjcwow\nLjAwMCAwLjAwMCAwLjAwMCBzY24KL0RldmljZVJHQiBDUwowLjAwMCAwLjAw\nMCAwLjAwMCBTQ04KcQoKQlQKNDEgNzQzLjUwNCBUZAovRjEuMCA4IFRmCls8\nNGY3MjY0NjU3Mj5dIFRKCkVUCgoKQlQKNDEgNzM0LjI1NiBUZAovRjEuMCA4\nIFRmCls8NTM3NTZkNmQ2MTcyPiAtMzAgPDc5Pl0gVEoKRVQKCjAuMDAwIDAu\nMDAwIDAuMDAwIHNjbgoKQlQKMTA4IDc0My41MDQgVGQKL0YxLjAgOCBUZgpb\nPDQyNjE3NDYzNjgyMDQ0NjE3NDY1MmY1NDY5NmQ2NTNhNTc+IDMwIDw2NTY0\nMjA0NDY1NjMyMDMyMzkyMDMxMzkzYTM1MzYzYTMxMzEyMDJiMzAzNTMzMzAy\nMDMyMzAzMTMwPl0gVEoKRVQKCjAuMDAwIDAuMDAwIDAuMDAwIHNjbgoKQlQK\nMzAyIDc0My41MDQgVGQKL0YxLjAgOCBUZgpbPDRmNzI2NDY1NzIyMDYyNjE3\nNDYzNjgyMDZlNmYzYTMxMzgzMjMxMzEzNTM5Mzk+XSBUSgpFVAoKMC4wMDAg\nMC4wMDAgMC4wMDAgc2NuCgpCVAoyNDIuMTQ4IDY5OC44ODggVGQKL0YxLjAg\nMTIgVGYKWzw1MDcyNmY2NDc1NjM3NDIwNmM2OTczNzQyMDY5NzMyMDZlNmY3\nNDIwNjY+IDMwIDw2Zjc1NmU2NDJlPl0gVEoKRVQKClEKCmVuZHN0cmVhbQpl\nbmRvYmoKNSAwIG9iago8PCAvVHlwZSAvUGFnZQovUGFyZW50IDIgMCBSCi9S\nZXNvdXJjZXMgPDwgL1Byb2NTZXQgWy9QREYgL1RleHQgL0ltYWdlQiAvSW1h\nZ2VDIC9JbWFnZUldCi9Gb250IDw8IC9GMS4wIDYgMCBSCj4+Cj4+Ci9NZWRp\nYUJveCBbMCAwIDYxMi4wIDc5Mi4wXQovQ29udGVudHMgNCAwIFIKPj4KZW5k\nb2JqCjYgMCBvYmoKPDwgL0VuY29kaW5nIC9XaW5BbnNpRW5jb2RpbmcKL1R5\ncGUgL0ZvbnQKL0Jhc2VGb250IC9IZWx2ZXRpY2EKL1N1YnR5cGUgL1R5cGUx\nCj4+CmVuZG9iagp4cmVmCjAgNwowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAw\nMDAwMTUgMDAwMDAgbiAKMDAwMDAwMDA3MSAwMDAwMCBuIAowMDAwMDAwMTI4\nIDAwMDAwIG4gCjAwMDAwMDAxNzcgMDAwMDAgbiAKMDAwMDAwMDgxNiAwMDAw\nMCBuIAowMDAwMDAwOTk0IDAwMDAwIG4gCnRyYWlsZXIKPDwgL1Jvb3QgMyAw\nIFIKL0luZm8gMSAwIFIKL1NpemUgNwo+PgpzdGFydHhyZWYKMTA5MQolJUVP\nRgo=\n\n---\n\nI read whole document of rails3 action mailer and i copied same code\nwhich is mention in action mailer docs, stil its not working. can any\none give me some idea so that code can work. i am using  ruby 1.8.7 and rails 3.0.3\n\nmy code is \n\nrequire 'rubygems'\nclass OrderMailer < ActionMailer::Base\n  default :from => 'bhushan.fegade@arrkgroup.com'\n\n  def email_orders\n    OrderMailer.pdf_email.deliver\n  end\n\n  def pdf_email\n\n```\nattachments['terms.pdf'] = File.read('C:\\\\Bhushan\\\\hello.pdf') \nmail(:to => \"bhushan.fegade@arrkgroup.com\",\n     :subject => \"Please see the Terms and Conditions attached\")\n```\n\n  end\n\nend\n", "labels": [], "number": 809, "updated_at": "2011-05-21 15:12:17", "user": 789801, "closed_at": "2011-05-21 15:12:17", "id": 904553, "title": "Pdf attachment not working rails 3.0.3", "url": "https://api.github.com/repos/rails/rails/issues/809", "created_at": "2011-05-16 04:28:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171109", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-03-12 15:27:10 UTC\n\ndo you have a correlating view for that pdf_email method? If there is no text or html template it looks like it might render the attachments inline. The view (or the text in the mail block) could be blank if you just want to send the attachment without any other messaging.\n", "created_at": "2011-05-16 04:28:16", "user": 789801, "id": 1171109}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6287\nCreated by **Wojciech Wnƒôtrzak** - 2011-01-18 08:52:34 UTC\n\nRails, as the framework with best practices, should use recommended size units, such as: KiB, MiB, etc. instead of KB, MB.\nUsing KB is ambigious because of SI definition of prefix [kilo](http://en.wikipedia.org/wiki/Kilo-)\nRead more:\n[Kilobyte](http://en.wikipedia.org/wiki/Kilobyte)\n[Kibibyte](http://en.wikipedia.org/wiki/Kibibyte)\n\nAdditional patch changes default units.\n", "labels": [], "number": 810, "updated_at": "2011-05-21 15:12:17", "user": 789801, "closed_at": "2011-05-21 15:12:17", "id": 904554, "title": "Correct size units in number_to_human_size helper", "url": "https://api.github.com/repos/rails/rails/issues/810", "created_at": "2011-05-16 04:28:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171111", "text": "_Imported from Lighthouse._\nComment by **Wojciech Wnƒôtrzak** - 2011-03-11 19:10:48 UTC\n\nAny more info is needed with this patch?\n", "created_at": "2011-05-16 04:28:23", "user": 789801, "id": 1171111}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171113", "text": "Attachments saved to Gist: http://gist.github.com/971761\n", "created_at": "2011-05-16 04:28:24", "user": 789801, "id": 1171113}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6290\nCreated by **2kan** - 2011-01-15 00:49:53 UTC\n\nHere is an example:\n\n```\nclass A < ActiveRecord::Base\n  scope :order_by_salary, order(\"salary DESC\")\n  scope :reorder_by_name, except(:order).order(\"name DESC\")\nend\n```\n\nSo this code won't work:\n\n```\nA.order_by_salary.reorder_by_name\n```\n", "labels": [], "number": 811, "updated_at": "2011-05-21 15:12:17", "user": 789801, "closed_at": "2011-05-21 15:12:17", "id": 904557, "title": "[PATCH] except doesn't work in different scopes", "url": "https://api.github.com/repos/rails/rails/issues/811", "created_at": "2011-05-16 04:28:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171115", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-01-15 00:52:39 UTC\n\nHere is my patch (with tests) for it.\n", "created_at": "2011-05-16 04:28:30", "user": 789801, "id": 1171115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171116", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-02 18:30:13 UTC\n\nThe expression scope :reorder_by_name, except(:order).order(\"name DESC\") is computed at evaluation time.\n\nYou need to do this ...\n\n```\nclass A < ActiveRecord::Base\n  scope :order_by_salary, order(\"salary DESC\")\n  scope :reorder_by_name, lambda { except(:order).order(\"name DESC\") }\nend\n```\n\nAnyways seems the code I showed you is not currently working on master with named scopes even though it works if I do ...\n\n```\n>> Post.order(:title).to_sql\n=> \"SELECT \\\"posts\\\".* FROM \\\"posts\\\"  ORDER BY title\"\n>> Post.order(:title).except(:order).to_sql\n=> \"SELECT \\\"posts\\\".* FROM \\\"posts\\\" \"\n>> Post.order(:title).except(:order).order(:body).to_sql\n=> \"SELECT \\\"posts\\\".* FROM \\\"posts\\\"  ORDER BY body\"\n```\n\nSo we need to fix the issue for named scopes.\n", "created_at": "2011-05-16 04:28:31", "user": 789801, "id": 1171116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171117", "text": "_Imported from Lighthouse._\nComment by **Adam Wr√≥bel** - 2011-02-02 23:27:12 UTC\n\nI suggest moving order from MULTI_VALUE_METHODS to SINGLE_VALUE_METHODS and overwriting the order array with each merged scope or new call to order(). There's no benefit in using:\n    Employee.order(:division_name).order(:name)\nover\n    Employee.order(:division_name,:name)\n\nAnd the fact that both of the below calls return Posts by [:created_at,:title] order is just plain misleading:\n    class Post < ActiveRecord::Base\n      default_scope order(:created_at)\n      scope :by_title, order(:title)\n    end\n    Post.order(:title)\n    Post.by_title\n", "created_at": "2011-05-16 04:28:32", "user": 789801, "id": 1171117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171118", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-02-02 23:50:49 UTC\n\nAdam Wr√≥bel, order is a multi value and I can give you a lot of examples from my real apps where you need to use queries like: \n\n```\nSELECT * from employers WHERE ORDER BY salary ASC, name ASC\n```\n\nHere you sort employers by salary and if salary is equal you sort then by name. It is a common task. And so if we're allow user to write order('salary ASC, name ASC') I think we should allow to write order(:salary).order(:name).\n", "created_at": "2011-05-16 04:28:34", "user": 789801, "id": 1171118}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171119", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-02-02 23:56:42 UTC\n\nAdam Wr√≥bel, i mean that it is not intuitive why we can do:\n\n```\norder(:division_name).order(:name)\n```\n\nand can't:\n\n```\nEmployee.order(:division_name,:name)\n```\n\nor do something like:\n\n```\nclass Post < ActiveRecord::Base\n scope popular, where('rating > 1').order('rating DESC')\n scope recent, order('created_at DESC')\nend\n\nPost.popular.recent\n```\n", "created_at": "2011-05-16 04:28:35", "user": 789801, "id": 1171119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171120", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-02-02 23:58:39 UTC\n\nOh, sorry, it is 2:57 AM here. In my previous comment we can't do first and can second and so can't do the last example with a Post class.\n", "created_at": "2011-05-16 04:28:36", "user": 789801, "id": 1171120}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171121", "text": "_Imported from Lighthouse._\nComment by **Adam Wr√≥bel** - 2011-02-03 00:05:58 UTC\n\nAn alternative would be to overwrite on merge, but append on order(). That would be similar to where(:column => value). Multiple where() calls create OR but during a merge only the last one is left.\n", "created_at": "2011-05-16 04:28:38", "user": 789801, "id": 1171121}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171122", "text": "_Imported from Lighthouse._\nComment by **Adam Wr√≥bel** - 2011-02-03 00:22:43 UTC\n\nI know you specify multiple columns for order, but when I referred to multi and single values I meant values that get merged and values that get overwritten. My suggestion was to overwrite array of order columns from the current scope with array of order columns from the relation being merged in.\n\nThe Post.popular.recent example makes sense and might be a reason for why none of my suggestions should be used, but then again order is such a simple operation that it's easy to list all the columns you need in one place. Usually I'd just be confused that my last call to order wasn't the one used rather than happy that I was was able to merge two named order scopes. Take this test from rails tests (tests/cases/relations_test.rb):\n\n```\ndef test_order_using_scoping\n  car1 = CoolCar.order('id DESC').scoping do\n    CoolCar.find(:first, :order => 'id asc')\n  end\n  assert_equal 'zyke', car1.name\n\n  car2 = FastCar.order('id DESC').scoping do\n    FastCar.find(:first, :order => 'id asc')\n  end\n  assert_equal 'zyke', car2.name\nend\n```\n\nTo me it reads \"def test_we_have_a_bug\". I mean - I've specified the order I want right there - in the call to find() - why do you do it reverse, rails?\n", "created_at": "2011-05-16 04:28:39", "user": 789801, "id": 1171122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171123", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-02-03 16:34:44 UTC\n\nSantiago Pastorino, Yes this code computes at evaluation time, but it doesn't matter. I think that there is no reason (point me if i'm wrong) to allow user to use except only inside lambdas. I understand that I need to use lambda when I use Time.now or something but here I need some additional knowledge about how except, order, where and etc works inside rails. I don't think that it is good. I've added to my patch test with scope with lambda like:\n\n```\nlambda { except(:order).order(\"name DESC\") }\n```\n\nand test passes. \n\nHow it works and why I think we can calculate except at evaluation time. A've added a flag into the Relation that it is except and store what we want to except, so when we merge relations when calling the scopes we can figure out that we need to except some values.\n\nPlease, point me if I made a mistake somewhere.\n", "created_at": "2011-05-16 04:28:40", "user": 789801, "id": 1171123}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171124", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-03-21 13:44:52 UTC\n\nOops, I've found that my last uploaded patch wasn't good enough (I've uploaded the wrong diff, sorry). Here is the correct one.\n", "created_at": "2011-05-16 04:28:42", "user": 789801, "id": 1171124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171125", "text": "Attachments saved to Gist: http://gist.github.com/971762\n", "created_at": "2011-05-16 04:28:43", "user": 789801, "id": 1171125}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6298\nCreated by **Paul Hieromnimon** - 2011-01-18 08:52:34 UTC\n\nWhen calling join on an Array comprised entirely of html_safe objects, and using an html_safe separator, the string returned is unsafe.  This seems to be a bug, and has broken many of our own custom helpers without providing any additional safety.\n\nI overrode Array.join to return safe strings (SafeBuffers) when all the elements of the array are safe, and the separator is either not specified or html_safe itself.  This is consistent with Ruby's behavior when joining arrays of untainted objects with an untainted separator.\n\nAdditionally, I overrode html_safe? on Array to return true if every element is safe.  This will allow Array.join to operate properly in the recursive case (joining an Array of arrays).\n", "labels": [], "number": 812, "updated_at": "2011-05-21 15:12:17", "user": 789801, "closed_at": "2011-05-21 15:12:17", "id": 904558, "title": "[PATCH] Array.join making safe strings unsafe", "url": "https://api.github.com/repos/rails/rails/issues/812", "created_at": "2011-05-16 04:28:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171126", "text": "_Imported from Lighthouse._\nComment by **Derek Croft** - 2011-01-18 13:17:02 UTC\n\n+1\n\nUpgrading to Rails 3.0.3 causes all Array.join calls to escape for me.  Cannot get it to work without this patch.\n", "created_at": "2011-05-16 04:28:49", "user": 789801, "id": 1171126}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171127", "text": "_Imported from Lighthouse._\nComment by **Russen Guggemos** - 2011-02-16 21:53:48 UTC\n\nYeah, seeing this in Rails 3.0.3, e.g:\n\n```\nUser.interests.map{|i| link_to i.name, interest_path(i) }.join(', '.html_safe)\n```\n\nPutting that inside of <%= %> renders a bunch of escaped HTML.\n", "created_at": "2011-05-16 04:28:50", "user": 789801, "id": 1171127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171129", "text": "Attachments saved to Gist: http://gist.github.com/971763\n", "created_at": "2011-05-16 04:28:51", "user": 789801, "id": 1171129}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6299\nCreated by **J√∂rg** - 2011-02-17 08:07:24 UTC\n\nWhen you use @limit@ in your query it is possible to inject sql code. Unlike in Rails 2 values for @limit@ won't be converted to integer thus allowing to inject sql.\n\nTestcase in Rails 2.3.10\n\n```\nUser.find(:all, :limit => \"0 UNION ALL SELECT * FROM users WHERE id = 1\")\n=> SELECT * FROM `users` LIMIT 0\n```\n\nTestcase in Rails 3.0.3\n\n```\nUser.find(:all, :limit => \"0 UNION ALL SELECT * FROM users WHERE id = 1\")\n=> SELECT `users`.* FROM `users` LIMIT 0 UNION ALL SELECT * FROM users WHERE id = 1\n\nUser.limit(\"0 UNION ALL SELECT * FROM users WHERE id = 1\")\n=> SELECT `users`.* FROM `users` LIMIT 0 UNION ALL SELECT * FROM users WHERE id = 1\n```\n\nWhile the documentation for @ActiveRecord::FinderMethods#find@ states that the @limit@ parameter must be an integer there is no such hint for @ActiveRecord::QueryMethods#limit@.\n\nGreetings\nHenning and J√∂rg\n", "labels": [], "number": 813, "updated_at": "2011-05-21 15:12:17", "user": 789801, "closed_at": "2011-05-21 15:12:17", "id": 904559, "title": "Possible SQL injection in ActiveRecord limit", "url": "https://api.github.com/repos/rails/rails/issues/813", "created_at": "2011-05-16 04:28:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171130", "text": "_Imported from Lighthouse._\nComment by **Torsten B√ºhl** - 2011-01-18 08:58:56 UTC\n\nWhat version of Arel are you using? I have the problem with Arel 2.0.7 where the limit parameter is not converted to an integer resulting in the wrong query:\n\n**conditions_controller.rb**\n\n```\n@conditions = @conditions.limit(params[:limit].to_i) if params[:limit]\n```\n\n**Error**\n\n```\nActiveRecord::StatementInvalid (Mysql::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''100'' at line 1: SELECT  `conditions`.* FROM `conditions` WHERE (`conditions`.destination_id = 1) ORDER BY conditions.created_at DESC LIMIT '100'):\n  app/controllers/conditions_controller.rb:37:in `history'\n  app/controllers/conditions_controller.rb:35:in `history'\n```\n\nWith Arel 2.0.6 the limit parameter is converted to an integer.\n", "created_at": "2011-05-16 04:28:58", "user": 789801, "id": 1171130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171131", "text": "_Imported from Lighthouse._\nComment by **Torsten B√ºhl** - 2011-01-18 09:05:02 UTC\n\nSorry, my **conditions_controller.rb** looks like (I cannot edit my comment?)\n\n```\n@conditions = @conditions.limit(params[:limit]) if params[:limit]\n```\n\nI had to append the .to_i method to make it work in my application.\n", "created_at": "2011-05-16 04:29:00", "user": 789801, "id": 1171131}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171132", "text": "_Imported from Lighthouse._\nComment by **J√∂rg** - 2011-01-18 09:17:12 UTC\n\nI am using arel 2.0.6.\n\nWe had a look at 2.0.7 and found a new test that checks the escaping of limit in mysql: https://github.com/rails/arel/blob/master/test/visitors/test_mysql.rb#L20\n\nTesting show that 2.0.7 does escape the limit parameter and only integers result in valid mysql queries.\n\nIt looks like activerecord should at least depend on arel 2.0.7.\n", "created_at": "2011-05-16 04:29:01", "user": 789801, "id": 1171132}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171134", "text": "_Imported from Lighthouse._\nComment by **Torsten B√ºhl** - 2011-01-18 10:10:08 UTC\n\nOk I've not checked if the value was escaped, I think the best option would be the conversion to integer. Otherwise it will break some apps.\n", "created_at": "2011-05-16 04:29:03", "user": 789801, "id": 1171134}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171135", "text": "_Imported from Lighthouse._\nComment by **Kevin Bullock** - 2011-02-11 03:17:55 UTC\n\nConverting to integer isn't the solution; the LIMIT clause allows you to specify both a limit _and an offset_, like so: `LIMIT x, y`. To protect against injection, you either have to parse the string passed to `limit`, or extend the syntax to allow an optional second parameter:\n\n```\nUser.limit(10, 20)\n```\n\nand make sure to convert _both_ to integers.\n", "created_at": "2011-05-16 04:29:05", "user": 789801, "id": 1171135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171136", "text": "_Imported from Lighthouse._\nComment by **Kevin Bullock** - 2011-02-11 03:20:09 UTC\n\n...or allow an optional second parameter, and _quote_ them both. That would cause ActiveRecord::StatementInvalid to be thrown when bad (non-integer) params are passed, which might be preferable.\n", "created_at": "2011-05-16 04:29:06", "user": 789801, "id": 1171136}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6301\nCreated by **Erik van Eykelen** - 2011-01-18 08:52:31 UTC\n\n'uninitialized constant' is not thrown for the following use case:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  TEST_FOO = 123\n  validates_presence_of :title, :message => TEST_FOO_WRONG # <- uninitialized constant!\n  belongs_to :user\nend\n\nclass User < ActiveRecord::Base\n  has_many :posts\nend\n\nclass PostsController < ApplicationController\n  def index\n    @post = User.first.posts.first # <- No uninitialized constant thrown!\n    # @post = Post.first # <- Throws uninitialized constant\n    render :text => @post.valid?\n  end\nend\n```\n\nTested under Ruby 1.8.7, 1.9.2 and Rails 3.0.3\n", "labels": [], "number": 814, "updated_at": "2011-05-21 15:12:18", "user": 789801, "closed_at": "2011-05-21 15:12:18", "id": 904560, "title": "No 'uninitialized constant' thrown when referencing AR class", "url": "https://api.github.com/repos/rails/rails/issues/814", "created_at": "2011-05-16 04:29:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171137", "text": "_Imported from Lighthouse._\nComment by **Erik van Eykelen** - 2011-02-17 08:51:37 UTC\n\nI've tested this again under 1.9.2 and 3.0.4 and I cannot reproduce this issue anymore.\n", "created_at": "2011-05-16 04:29:14", "user": 789801, "id": 1171137}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6306\nCreated by **simple10** - 2011-01-18 08:52:33 UTC\n\nThe belongs_to association build method does not currently allow for specifying a :type subclass. This creates a lot of confusion and annoyances around STI support. \n\n``` ruby\n# Currently working...\nu = User.first\nb = u.badges << Badges::Superhero.new\n# b.class == Badges::Superhero\n\n# Not working...\nu = User.first\nu.badges.build(:type => Badges::Superhero)\n# b.class == Badge\n```\n\nThe quick fix is to change the build_association method in ActiveRecord::Reflection::AssociationReflection to detect if :type is a Class object and create the appropriate subclass model.\n\n``` ruby\nclass ActiveRecord::Reflection::AssociationReflection\n  def build_association(*opts)\n    col = klass.inheritance_column.to_sym\n    if (h = opts.first).is_a? Hash and (type = h.symbolize_keys[col]) and type.class == Class\n      opts.first[col].to_s.constantize.new(*opts)\n    elsif klass.abstract_class?\n      raise \"#{klass.to_s} is an abstract class and can not be directly instantiated\"\n    else\n      klass.new(*opts)\n    end\n  end\nend\n```\n\nFull writeup here: http://www.simple10.com/rails-3-sti/\n", "labels": [], "number": 815, "updated_at": "2011-06-14 01:19:40", "user": 789801, "closed_at": "2011-05-21 15:12:18", "id": 904561, "title": "Collection Associations Build Method Not Supported for STI", "url": "https://api.github.com/repos/rails/rails/issues/815", "created_at": "2011-05-16 04:29:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171138", "text": "_Imported from Lighthouse._\nComment by **x37v** - 2011-03-01 19:05:51 UTC\n\nThis works nicely for `parent.collection.build(:type => ClassName)` but it breaks `parent.collection.create(:type => ClassName)`\nthe parent_id isn't filled in in the created object...\n\nI'm not sure why because the original source for build_association is very simple and there is also a create_association which i assume would be called for the collection.create approach..\n", "created_at": "2011-05-16 04:29:22", "user": 789801, "id": 1171138}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171139", "text": "_Imported from Lighthouse._\nComment by **x37v** - 2011-03-01 19:07:30 UTC\n\nwell, besides the fact that the type field is filled in with a class instead of a string.. i figure it should do h.symbolize_keys[col] = type.to_s\n", "created_at": "2011-05-16 04:29:24", "user": 789801, "id": 1171139}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1363004", "text": "Some experimentation indicates this is broken in Rails 3.1.  Reopen?  Was there a patch that the import didn't bring over?\n", "created_at": "2011-06-14 00:39:13", "user": 212750, "id": 1363004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1363142", "text": "I'm just going to submit a pull request, which I think will create a new issue.\n", "created_at": "2011-06-14 01:19:40", "user": 212750, "id": 1363142}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6308\nCreated by **Brian Durand** - 2011-01-18 18:10:11 UTC\n\nThe cleanup method on ActiveSupport::Cache::FileStore on the 3.0 branch is defined but doesn't actually work. I have fixed the implementation so it can be used to clean up old cache entries either by expiration time or by how recently they've been used and added tests.\n\nThis method is needed to keep the cache from growing without bound until if fills up the disk.\n\nThe syntax is:\n\nRails.cache.cleanup(:expired_only => true)\n\nor\n\nRails.cache.cleanup(:not_accessed_in => 2.days)\n", "labels": [], "number": 816, "updated_at": "2011-05-21 15:12:19", "user": 789801, "closed_at": "2011-05-21 15:12:19", "id": 904562, "title": "Fix FileStore cleanup method", "url": "https://api.github.com/repos/rails/rails/issues/816", "created_at": "2011-05-16 04:29:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171140", "text": "_Imported from Lighthouse._\nComment by **Brian Durand** - 2011-02-21 18:07:48 UTC\n\nNew patch file that include documentation update to Rails guide for caching.\n", "created_at": "2011-05-16 04:29:31", "user": 789801, "id": 1171140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171142", "text": "Attachments saved to Gist: http://gist.github.com/971764\n", "created_at": "2011-05-16 04:29:33", "user": 789801, "id": 1171142}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6310\nCreated by **Brian Durand** - 2011-01-18 18:13:28 UTC\n\nI've update the Rails Guide on ActiveRecord validation and callbacks to document the after_commit and after_rollback callbacks added in Rails 3.0.\n", "labels": [], "number": 817, "updated_at": "2011-05-21 15:12:19", "user": 789801, "closed_at": "2011-05-21 15:12:19", "id": 904563, "title": "Rails Guide Update - ActiveRecord  Transaction Callbacks", "url": "https://api.github.com/repos/rails/rails/issues/817", "created_at": "2011-05-16 04:29:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171144", "text": "_Imported from Lighthouse._\nComment by **Peter Abrahamsen** - 2011-04-06 18:32:17 UTC\n\nThis is great, thanks for doing it. I would like to see it explain the behavior around nested transactions. The desired behavior, and I think this is what AR implements is:\n- after_commit is triggered after the outermost transaction commits\n- after_rollback is triggered after the transaction the record was updated/whatever in is rolled back\n\nThis behavior should also be explained in the API docs.\n", "created_at": "2011-05-16 04:29:39", "user": 789801, "id": 1171144}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171145", "text": "Attachments saved to Gist: http://gist.github.com/971765\n", "created_at": "2011-05-16 04:29:41", "user": 789801, "id": 1171145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1173801", "text": "This issue can be closed. The change was already applied to the guides.\n", "created_at": "2011-05-16 14:54:36", "user": 41791, "id": 1173801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1204421", "text": "@bdurand Would be nice if you can mention the commit hash here. Easy for later reference. cc @josevalim \n", "created_at": "2011-05-19 16:03:01", "user": 146214, "id": 1204421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1204918", "text": "Committed in https://github.com/rails/rails/commit/017012b43ac80a79b99afbe35e1d9e7f73e62ee9\n", "created_at": "2011-05-19 17:16:01", "user": 41791, "id": 1204918}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6313\nCreated by **tonycoco** - 2011-02-22 17:42:04 UTC\n\nA quick look at the current code for reference...\n\n``` ruby\n# File actionpack/lib/action_view/helpers/capture_helper.rb, line 38\ndef capture(*args)\n  value = nil\n  buffer = with_output_buffer { value = yield(*args) }\n  if string = buffer.presence || value and string.is_a?(String)\n    ERB::Util.html_escape string\n  end\nend\n```\n\nLet's say I have a block that includes JSON, like if I call #to_json on a Hash, and pass that into capture. Then, that string gets #html_escape'd TWICE. The result is impossible to deal with once you get a few layers into it. Should capture take a option[:no_escape]? Or, have an entirely separate method to call, like, #capture_without_escaping? The latter approach is what I've been doing in the ApplicationHelper of my applications. I'd write a patch file, just want to hear some thoughts on a best-practice for this.\n", "labels": [], "number": 818, "updated_at": "2011-05-21 15:12:19", "user": 789801, "closed_at": "2011-05-21 15:12:19", "id": 904564, "title": "Capture not working when passing pre-escaped blocks (like, JSON)...", "url": "https://api.github.com/repos/rails/rails/issues/818", "created_at": "2011-05-16 04:29:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171148", "text": "_Imported from Lighthouse._\nComment by **tonycoco** - 2011-02-02 00:59:41 UTC\n\nUpon further review of the newest Rails code. The capture method works as advertised. I'll continue to look at it, but I think this one can be closed out.\n", "created_at": "2011-05-16 04:29:47", "user": 789801, "id": 1171148}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6318\nCreated by **rgoytacaz (at gmail)** - 2011-01-20 14:03:20 UTC\n\nrails new proj_name -T or --skip-test-unit\n\nWhile using generators to create a model it still does call test-unit generator.\n\n[]'s\n", "labels": [], "number": 819, "updated_at": "2011-05-16 15:00:54", "user": 789801, "closed_at": "2011-05-16 15:00:54", "id": 904565, "title": "Rails 3.0.3 --skip-test-unit not working correctly.", "url": "https://api.github.com/repos/rails/rails/issues/819", "created_at": "2011-05-16 04:29:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171150", "text": "_Imported from Lighthouse._\nComment by **xds2000** - 2011-01-20 16:09:31 UTC\n\nmac/ruby 1.9.2/rails3.0.3\n\nsame problem:\nxiaodeshi:~/projects$ rails new sample_app --skip-testunit --skip-prototype\n      create  \n      create  README\n      create  Rakefile\n      create  config.ru\n      create  .gitignore\n      create  Gemfile\n      create  app\n      create  app/controllers/application_controller.rb\n      create  app/helpers/application_helper.rb\n      create  app/mailers\n\nxiaodeshi:~/projects/sample_app$ rails g scaffold project name:string\n      invoke  active_record\n      create    db/migrate/20110120161558_create_projects.rb\n      create    app/models/project.rb\n      invoke    test_unit\n      create      test/unit/project_test.rb\n      create      test/fixtures/projects.yml\n       route  resources :projects\n      invoke  scaffold_controller\n      create    app/controllers/projects_controller.rb\n      invoke    erb\n      create      app/views/projects\n      create      app/views/projects/index.html.erb\n      create      app/views/projects/edit.html.erb\n      create      app/views/projects/show.html.erb\n      create      app/views/projects/new.html.erb\n      create      app/views/projects/_form.html.erb\n      invoke    test_unit\n      create      test/functional/projects_controller_test.rb\n      invoke    helper\n      create      app/helpers/projects_helper.rb\n      invoke      test_unit\n      create        test/unit/helpers/projects_helper_test.rb\n      invoke  stylesheets\n      create    public/stylesheets/scaffold.css\n", "created_at": "2011-05-16 04:29:54", "user": 789801, "id": 1171150}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171151", "text": "_Imported from Lighthouse._\nComment by **hemant** - 2011-01-21 19:32:37 UTC\n\n**Working fine for me**\n\nI couldn't replicate the issue with rails 3.0.3 tried using following ruby versions\nREE 1.8.7 patchlevel 248\n1.9.2dev (2009-07-18 trunk 24186)\n\n@xds2000 I guess you typed the skip option incorrectly looking at what you have posted above\nthe correct option is --skip-test-unit\nCan you please check that ?\n\nThanks\n", "created_at": "2011-05-16 04:29:56", "user": 789801, "id": 1171151}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171152", "text": "_Imported from Lighthouse._\nComment by **Matt Fawcett** - 2011-01-22 01:46:04 UTC\n\nIts adding the test folder for me also because `config.generators.test_framework` does not get set in the application.rb file. It looks like it was fixed in commit bafa153 but I can't see it in the Rails 3.03 release.\n", "created_at": "2011-05-16 04:29:57", "user": 789801, "id": 1171152}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171153", "text": "_Imported from Lighthouse._\nComment by **xds2000** - 2011-02-20 16:21:03 UTC\n\n@hemant,\nthis is my typo issue.\n\n@rgoytacaz \n\nI think this behavior is not bug.\n\nsuppose you set -T only affect creating project phase.but in developing phase,\nyou generate model,the model default create test unit folder and code.it is natural.\nif you want to use another test framework.you need add some parameters in /config/application.rb\n", "created_at": "2011-05-16 04:29:58", "user": 789801, "id": 1171153}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171472", "text": "If its intended, you can sure close the ticket, but I think since any other test frameworks have to set env.test_framework = :framework_name, I think that maybe it should set test_framework = :none\n", "created_at": "2011-05-16 04:53:00", "user": 167058, "id": 1171472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171525", "text": "I'm pretty sure this ticket can be closed now. This has been fixed in Rails 3.1. https://github.com/rails/rails/pull/414\n", "created_at": "2011-05-16 05:23:38", "user": 762, "id": 1171525}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6322\nCreated by **Betelgeuse** - 2011-01-21 20:08:04 UTC\n\nTesting against master\n\n```\n$ bundle console\nree-1.8.7-2010.02 > require 'active_support/core_ext/time/calculations'\n => true \nree-1.8.7-2010.02 > Time.now.at_beginning_of_week\nNoMethodError: undefined method `days' for 4:Fixnum\n    from /Users/betelgeuse/.rvm/gems/ree-1.8.7-2010.02/bundler/gems/rails-8491f16e128d/activesupport/lib/active_support/core_ext/time/calculations.rb:168:in `at_beginning_of_week'\n    from (irb):2\n```\n", "labels": [], "number": 820, "updated_at": "2011-05-21 15:12:19", "user": 789801, "closed_at": "2011-05-21 15:12:19", "id": 904566, "title": "activesupport/lib/active_support/core_ext/time/calculations.rb does not declare dependencies for at_beginning_of_week", "url": "https://api.github.com/repos/rails/rails/issues/820", "created_at": "2011-05-16 04:30:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171154", "text": "_Imported from Lighthouse._\nComment by **hundredwatt** - 2011-03-20 05:30:13 UTC\n\nat_beginning_of_week also needs: 'active_support/core_ext/object/conversions'\n\nNot sure if it is assumed that, as a component of core_ext, it should be assumed that at_beginning_of_week would require all of active_support/core_ext.\n\nI attached a trivial patch\n", "created_at": "2011-05-16 04:30:05", "user": 789801, "id": 1171154}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171155", "text": "_Imported from Lighthouse._\nComment by **jz** - 2011-03-23 23:07:50 UTC\n\nSimilarly, on ruby-1.9.2-p136\n\n``` ruby\nrequire 'active_support/json'\nputs({ :hi => 'there' }.to_json)\n```\n\nwill give\n\n```\nuninitialized constant ActiveSupport::OrderedHash (NameError)\n```\n", "created_at": "2011-05-16 04:30:07", "user": 789801, "id": 1171155}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171156", "text": "_Imported from Lighthouse._\nComment by **jz** - 2011-03-23 23:10:40 UTC\n\nfor activesupport 3.0.5\n", "created_at": "2011-05-16 04:30:09", "user": 789801, "id": 1171156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171157", "text": "Attachments saved to Gist: http://gist.github.com/971766\n", "created_at": "2011-05-16 04:30:10", "user": 789801, "id": 1171157}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6343\nCreated by **Sam Kong** - 2011-01-28 01:33:23 UTC\n\nI realized that sometimes a nested form fail to destroy a child in rails 3.0.3.\n\nIt happens when the children are not loaded and the parent is assigned the attributes.\n\nI narrowed down the problem code.\n\n<code>activerecord-3.0.3/lib/active_record/nested_attributes.rb</code>\n\nline# 376: <code>association.send(:add_record_to_target_with_callbacks, existing_record) if association.loaded? && !call_reject_if(association_name, attributes)</code>\n\nThe line was changed from rails 3.0.0.\n\nHere's how I tested it in console.\n(I intentionally removed some outputs for simplicity.)\n\n```\nLoading development environment (Rails 3.0.3)\nruby-1.8.7-p302 > post=Post.find 204\nruby-1.8.7-p302 > post.attachments.loaded?\n => false\nruby-1.8.7-p302 >\npost.attributes={\"attachments_attributes\"=>{\"0\"=>{\"id\"=>\"44\",\n\"_destroy\"=>\"1\"}}}\nruby-1.8.7-p302 > post.save\n => true\nruby-1.8.7-p302 > post.attachments.map { |i| i.id }.join(\", \")\n => \"44, 45, 46, 47, 48, 49\" #44 is still there.\nruby-1.8.7-p302 >\npost.attributes={\"attachments_attributes\"=>{\"0\"=>{\"id\"=>\"44\",\n\"_destroy\"=>\"1\"}}}\n# Now I try to destroy it again when the attachments are loaded.\nruby-1.8.7-p302 > post.save\n => true\nruby-1.8.7-p302 > post.attachments.reload\n# To make sure that attachments are reloaded after the change.\nruby-1.8.7-p302 > post.attachments.map { |i| i.id }.join(\", \")\n => \"45, 46, 47, 48, 49\" # Now 44 is gone.\n```\n\nThe problem doesn't happen in rails 3.0.0.\n\n<em>Edited by [Rohit Arondekar](https://rails.lighthouseapp.com/users/89656) for formatting.</em>\n", "labels": [], "number": 821, "updated_at": "2011-05-21 15:12:19", "user": 789801, "closed_at": "2011-05-21 15:12:19", "id": 904568, "title": "Possible bug of accepts_nested_attributes_for", "url": "https://api.github.com/repos/rails/rails/issues/821", "created_at": "2011-05-16 04:30:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171158", "text": "_Imported from Lighthouse._\nComment by **c.apolzon** - 2011-04-22 23:04:07 UTC\n\nThis is still present in 3.0.7.\n", "created_at": "2011-05-16 04:30:16", "user": 789801, "id": 1171158}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1192528", "text": " Also noticing this problem in 3.0.7. Github doesn't have a way to watch a ticket, so spamming to be notified of changes\n", "created_at": "2011-05-17 19:32:31", "user": 2727, "id": 1192528}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6352\nCreated by **yinhm** - 2011-02-01 08:32:50 UTC\n\nImaging your have a User model, which define a has_many association like:\n\n``` ruby\n\n  has_many(:subscribed_groups,\n           :through => :subscriptions,\n           :conditions => \"streams.category ='group'\",\n           :source => :stream)\n\n```\n\nuser.subscribed_groups and user.subscribed_group_ids will generating different SQL and returns  different records.\n\nAdding a extra criterion fixed this:\n\nactiverecord-3.0.3/lib/active_record/associations.rb diffs:\n\n``` ruby\n1504c1504,1505\n<               if reflection.through_reflection && reflection.source_reflection.belongs_to? \n\n---\n>               if reflection.through_reflection && reflection.source_reflection.belongs_to? && \n>                   reflection.options[:conditions]\n```\n", "labels": [], "number": 822, "updated_at": "2011-05-21 15:12:19", "user": 789801, "closed_at": "2011-05-21 15:12:19", "id": 904569, "title": "collection_singular_ids inconsistent with  collections when source and conditions present", "url": "https://api.github.com/repos/rails/rails/issues/822", "created_at": "2011-05-16 04:30:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171159", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-05-02 00:00:10 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:30:23", "user": 789801, "id": 1171159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171160", "text": "_Imported from Lighthouse._\nComment by **Anatoliy Lysenko** - 2011-05-07 13:29:20 UTC\n\n[state:open] Is not fixed on master c444b0f67bf5f998\n", "created_at": "2011-05-16 04:30:24", "user": 789801, "id": 1171160}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6355\nCreated by **chrisg** - 2011-02-01 16:10:27 UTC\n\nexample:\n\nauto_link(text, :html => { :target => '_blank' }) do |link_text|\n\nend\n\nissue:\n\ntarget is not set as href attribute.\n", "labels": [], "number": 823, "updated_at": "2011-05-21 15:12:19", "user": 789801, "closed_at": "2011-05-21 15:12:19", "id": 904570, "title": "auto_link doesn't accept target='_blank' in Rails 3", "url": "https://api.github.com/repos/rails/rails/issues/823", "created_at": "2011-05-16 04:30:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171161", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-02-07 21:39:43 UTC\n\nIt works in master. Both with and without block.\n", "created_at": "2011-05-16 04:30:31", "user": 789801, "id": 1171161}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171162", "text": "_Imported from Lighthouse._\nComment by **Nico** - 2011-03-02 09:17:43 UTC\n\nNope, can confirm, doesn't work here as well (Rails 3.0.3)\n", "created_at": "2011-05-16 04:30:33", "user": 789801, "id": 1171162}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171163", "text": "_Imported from Lighthouse._\nComment by **Akhil Bansal** - 2011-03-02 12:06:15 UTC\n\nWorking for me in both master and 3.0.3.\n", "created_at": "2011-05-16 04:30:34", "user": 789801, "id": 1171163}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171164", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-03-02 12:07:47 UTC\n\nYes, I can confirm again that it works in master and 3.0.3\n", "created_at": "2011-05-16 04:30:35", "user": 789801, "id": 1171164}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6357\nCreated by **Philip Hallstrom** - 2011-02-01 19:05:47 UTC\n\nCurrently it's possible to end up with a space in the truncated results.  That is:\n\n> \"one two three\".truncate(7)\n> => \"one ...\" \n\nThe attached patch (and tests) change the result to remove that trailing space so that the result is \"one...\".\n\nThis changes the default behavior so may not be desirable, but it seems reasonable.  If not, I could modify truncate() to accept a \"strip\" option which would apply the new behavior otherwise leave it as is.  Thoughts?\n", "labels": [], "number": 824, "updated_at": "2011-05-21 15:12:19", "user": 789801, "closed_at": "2011-05-21 15:12:19", "id": 904571, "title": "Patch to remove trailing spaces from truncate result.", "url": "https://api.github.com/repos/rails/rails/issues/824", "created_at": "2011-05-16 04:30:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171165", "text": "_Imported from Lighthouse._\nComment by **rails** - 2011-05-02 00:00:08 UTC\n\nThis issue has been automatically marked as stale because it has not been commented on for at least three months.\n\nThe resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add \"[state:open]\" to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.\n\nThank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.\n", "created_at": "2011-05-16 04:30:42", "user": 789801, "id": 1171165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171166", "text": "_Imported from Lighthouse._\nComment by **Philip Hallstrom** - 2011-05-02 16:30:01 UTC\n\nThis issue still applies to the 3-0 stable branch and is still applicable.  Previous patch/tests still apply and pass.\n\n[state:open]\n", "created_at": "2011-05-16 04:30:43", "user": 789801, "id": 1171166}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171167", "text": "Attachments saved to Gist: http://gist.github.com/971767\n", "created_at": "2011-05-16 04:30:45", "user": 789801, "id": 1171167}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6379\nCreated by **Alex Tambellini** - 2011-03-01 15:14:05 UTC\n\nSee the comments attached to this commit for details:\n\nhttps://github.com/rails/jquery-ujs/commit/22877193b17f2c257a83faca5ea5b4efa9c42943\n", "labels": [], "number": 825, "updated_at": "2011-05-21 15:12:19", "user": 789801, "closed_at": "2011-05-21 15:12:19", "id": 904572, "title": "accept header with */* does not match html templates", "url": "https://api.github.com/repos/rails/rails/issues/825", "created_at": "2011-05-16 04:30:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171168", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-06 21:14:45 UTC\n\nCan you provide a test case?\n", "created_at": "2011-05-16 04:30:50", "user": 789801, "id": 1171168}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171169", "text": "_Imported from Lighthouse._\nComment by **Alex Tambellini** - 2011-02-06 22:10:41 UTC\n\nAttached is a rails app that demonstrates the bug:\n\nIt has a html controller with an index action and a post action.\n\nThe index action renders 2 forms that use :remote => true.\n\nBoth forms submit to the post action with the accept header containing _/_. However, only the form that includes :\"data-type\" => \"html\" succeeds.\n\nJust start the app (rails 3.0.3) and go to localhost:3000 and then click on \"Submit With Data Type\" and \"Submit Without Data Type\" buttons to see the behavior described above.\n", "created_at": "2011-05-16 04:30:52", "user": 789801, "id": 1171169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171170", "text": "_Imported from Lighthouse._\nComment by **Mathieu Ravaux** - 2011-02-27 01:34:54 UTC\n\nHere is a patch that solves this issue.\nI've tested it against Alex's app.\n", "created_at": "2011-05-16 04:30:53", "user": 789801, "id": 1171170}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171171", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 04:01:02 UTC\n\nhey Methieu we need a test case to apply the patch.\nThanks.\n", "created_at": "2011-05-16 04:30:54", "user": 789801, "id": 1171171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171172", "text": "_Imported from Lighthouse._\nComment by **Mathieu Ravaux** - 2011-02-27 05:05:47 UTC\n\nHi Santiago, thank you for your quick reply. It's encouraging for a first contribution !\n\nHere is the testcase:\n", "created_at": "2011-05-16 04:30:56", "user": 789801, "id": 1171172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171173", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2011-02-27 17:25:27 UTC\n\nHey Mathieu,\n\nNice work on your first patch! The testcase looks good too. \n\nOne thing: could you merge the testcase and the fix into one commit and supply a new patch? :)\n", "created_at": "2011-05-16 04:30:57", "user": 789801, "id": 1171173}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171174", "text": "_Imported from Lighthouse._\nComment by **Mathieu Ravaux** - 2011-02-28 22:50:28 UTC\n\nSure, here it is !\nThanks for reviewing it.\n", "created_at": "2011-05-16 04:30:58", "user": 789801, "id": 1171174}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171175", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2011-02-28 23:43:28 UTC\n\nVerified. The patch applies to master and the provided test fails without it. :)\n", "created_at": "2011-05-16 04:31:00", "user": 789801, "id": 1171175}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171176", "text": "_Imported from Lighthouse._\nComment by **Jason Roth** - 2011-05-07 20:22:54 UTC\n\nAdded this issue to github issues:\nhttps://github.com/rails/rails/issues/439\n\n-j\n", "created_at": "2011-05-16 04:31:01", "user": 789801, "id": 1171176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171177", "text": "_Imported from Lighthouse._\nComment by **Jason Roth** - 2011-05-07 20:35:49 UTC\n\nIgnore my comment above - I posted it to the wrong issue. Sorry  -j\n", "created_at": "2011-05-16 04:31:02", "user": 789801, "id": 1171177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171178", "text": "_Imported from Lighthouse._\nComment by **Jason Noble** - 2011-05-07 21:15:53 UTC\n\nMoved to Github issue https://github.com/rails/rails/issues/444\n", "created_at": "2011-05-16 04:31:04", "user": 789801, "id": 1171178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171179", "text": "_Imported from Lighthouse._\nComment by **Jason Noble** - 2011-05-07 22:36:29 UTC\n\nThis has been pushed to master and can be closed.\n", "created_at": "2011-05-16 04:31:05", "user": 789801, "id": 1171179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171180", "text": "Attachments saved to Gist: http://gist.github.com/971768\n", "created_at": "2011-05-16 04:31:06", "user": 789801, "id": 1171180}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6383\nCreated by **Gavin Brock** - 2011-04-22 05:48:04 UTC\n\nThis is a fix for the invalid ticket: #5081\n\nI also encountered this error, but only after installing the acts-as-tesearch plugin (http://code.google.com/p/acts-as-tsearch/) on OS-X.\n\n```\n$ rails c\nLoading development environment (Rails 3.0.3)\nruby-1.9.2-p0 :001 > Content.all\nNoMethodError: undefined method `money_precision=' for #<Class:0x00000102af3018>\n    from /Users/gavin/.rvm/gems/ruby-1.9.2-p0@HEAD/gems/activerecord-3.0.3/lib/active_record/connection_adapters/postgresql_adapter.rb:937:in `connect'\n    from /Users/gavin/.rvm/gems/ruby-1.9.2-p0@HEAD/gems/activerecord-3.0.3/lib/active_record/connection_adapters/postgresql_adapter.rb:228:in `initialize'\n    from /Users/gavin/.rvm/gems/ruby-1.9.2-p0@HEAD/gems/activerecord-3.0.3/lib/active_record/connection_adapters/postgresql_adapter.rb:25:in `new'\n```\n\nI could fix this by changing line 937:\n\n  `PostgreSQLColumn.money_precision = (postgresql_version >= 80300) ? 19 : 10`\n\nto\n\n  `ActiveRecord::ConnectionAdapters::PostgreSQLColumn.money_precision = (postgresql_version >= 80300) ? 19 : 10`\n\nFrom what I could tell, this is because in the context, class `PostgreSQLColumn` is interpreted as a `ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::PostgreSQLColumn` which as far as I can see is undeclared.\n\n.. Gavin\n", "labels": [], "number": 826, "updated_at": "2011-05-21 15:12:20", "user": 789801, "closed_at": "2011-05-21 15:12:20", "id": 904575, "title": "NoMethodError: undefined method `money_precision=' for #<Class:0x0000010321f788>", "url": "https://api.github.com/repos/rails/rails/issues/826", "created_at": "2011-05-16 04:31:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171182", "text": "_Imported from Lighthouse._\nComment by **Gavin Brock** - 2011-03-01 00:37:02 UTC\n\nAdded a pull request against 3-0-stable: https://github.com/rails/rails/pull/197\n", "created_at": "2011-05-16 04:31:12", "user": 789801, "id": 1171182}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6385\nCreated by **jp.blanco** - 2011-02-07 19:21:47 UTC\n\nI want to be able to exclude the distinct statement in one of my queries, but I have a count operation and an outer join. \nIf you take a look at https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/calculations.rb (line 170 and 177) you can see that is impossible for me to do this.\n", "labels": [], "number": 827, "updated_at": "2011-05-21 15:12:20", "user": 789801, "closed_at": "2011-05-21 15:12:20", "id": 904576, "title": "You can't exclude distinct when you have a count and at least one include in your query", "url": "https://api.github.com/repos/rails/rails/issues/827", "created_at": "2011-05-16 04:31:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6387\nCreated by **Trent Ogren** - 2011-02-08 04:38:59 UTC\n\nIf you do this on Ruby 1.9 (or any encoding aware Ruby) it will get pissed:\n\n``` ruby\nTPS_REPORT_TOPICS = { 'synergy' => \"Synergy\", 'rev_stream' => \"Revenue Streams\" }\n\nclass ActionController::TestCase\n  //...\n  test \"can create a TPS report with a topic\" do\n    get :create, :tps_report => { :topic => TPS_REPORT_TOPICS.keys.first }\n  end\nend\n```\n\nSince rails tries to force encoding in place on all strings that are passed in, it will raise an error if it gets a frozen string.\n\nI included a patch that dups all strings that are passed as parameters so that rails doesn't do in-place encoding on the strings that are passed in as parameters\n", "labels": [], "number": 828, "updated_at": "2011-05-21 15:12:20", "user": 789801, "closed_at": "2011-05-21 15:12:20", "id": 904577, "title": "[patch] ActionController::TestCase#process barfs if it gets any frozen values as params", "url": "https://api.github.com/repos/rails/rails/issues/828", "created_at": "2011-05-16 04:31:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171183", "text": "_Imported from Lighthouse._\nComment by **Derek Croft** - 2011-02-08 15:38:39 UTC\n\n+1 - We need the ability to be able to use frozen strings in our tests.\n", "created_at": "2011-05-16 04:31:25", "user": 789801, "id": 1171183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171184", "text": "Attachments saved to Gist: http://gist.github.com/971769\n", "created_at": "2011-05-16 04:31:26", "user": 789801, "id": 1171184}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6390\nCreated by **ifesdjeen** - 2011-02-19 09:28:24 UTC\n\nHi, \n\nIt seems that Rails and Rack reliy on the order of variables in POST/GET when parsing those.\n\nSample is quite long, so i've put it in separate gist: https://gist.github.com/816599\n\nIf we get rid of \"first[second]\", and replace it with just \"second\", same thing repeats.\n\nSeems that it's rarely met because most of people first specify at least one field from their primary model and only then start specifying underlying model fields.\n\nCould you please take a look? Maybe there's a better solution for my problem, which i'm looking for right now. \n\nThanks\n", "labels": [], "number": 829, "updated_at": "2011-05-21 15:12:20", "user": 789801, "closed_at": "2011-05-21 15:12:20", "id": 904579, "title": "POST variables order ", "url": "https://api.github.com/repos/rails/rails/issues/829", "created_at": "2011-05-16 04:31:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171185", "text": "_Imported from Lighthouse._\nComment by **ifesdjeen** - 2011-02-09 18:00:21 UTC\n\nPlease see a failing test.\n\nA bit more details:\n\nIf you have a form, like:\nUser => Blogs => Posts, and all of the fields should be dynamic, and you want to modify them on the client side without many round trips to server.\n\nIt will work only in case when comment params are before rating params in HTTP set. Otherwise one of the Rating params will get lost.\n\n(sorry if the example doesn't seem to be realistic. just think of any three-level deep model, most of time these things happen to user models, when user have something that has something)\n\nThank you\n", "created_at": "2011-05-16 04:31:32", "user": 789801, "id": 1171185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171186", "text": "Attachments saved to Gist: http://gist.github.com/971770\n", "created_at": "2011-05-16 04:31:34", "user": 789801, "id": 1171186}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6391\nCreated by **Arthur Pirogovski** - 2011-02-08 22:28:53 UTC\n\nActiveRecord natively supports multiple database connections. There's no reason for migrations not to do the same.\n\nNot to mess things up, migrations for default database should still reside in db/migrate, while others should reside in db/migrate/database_config_name_without_environment_name.\n\nAlso, db:migrate should support option for specifying which database to run migrations on.\n\nDirectory layout example:\n\n  db/migrate\n  db/migrate/second\n\nCorresponding db config:\n\n`````` yaml\n### config/database.yml\ndevelopment:\n  adapter: sqlite3\n  database: main_development\n\ntest:\n  adapter: sqlite3\n  database: main_test\n\nproduction:\n  adapter: sqlite3\n  database: main_production\n\nsecond_development:\n  adapter: postgresql\n  database: second_development\n\nsecond_test:\n  adapter: postgresql\n  database: second_test\n\nsecond_production:\n  adapter: postgresql\n  database: second_production\n``` yaml\n``````\n", "labels": [], "number": 830, "updated_at": "2011-10-26 06:32:43", "user": 789801, "closed_at": "2011-05-21 15:12:20", "id": 904580, "title": "Support multiple databases in migrations", "url": "https://api.github.com/repos/rails/rails/issues/830", "created_at": "2011-05-16 04:31:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2527111", "text": "Why was this closed?\n", "created_at": "2011-10-26 06:32:43", "user": 133028, "id": 2527111}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6392\nCreated by **Nick M** - 2011-02-09 05:26:58 UTC\n### Problem\n\nActiveResource doesn't currently support file objects within an instance. If you try and save an ActiveResource instance that contains a file attachment, the file object's attributes get serialized, but not the file itself. For example, this is what ActiveResource currently sends when trying to create a new object that contains an uploaded file:\n\n``` xml\n    <user>\n      <first-name>Tom</first-name>\n      <last-name>Jones</last-name>\n      <address>1234 Test Rd</address>\n      <avatar type=\"yaml\">--- !ruby/object:ActionDispatch::Http::UploadedFile \n    content_type: image/png\n    headers: |\n      Content-Disposition: form-data; name=\"user[avatar]\"; filename=\"Picture 4.png\"\n      Content-Type: image/png\n\n    original_filename: Picture 4.png\n    tempfile: !ruby/object:File {}\n    </avatar>\n    </user>\n```\n\nThat serialized `<avatar>` content obviously won't work on the remote server since it doesn't actually contain the file data. You can try to base64 encode your file content inside the XML or JSON data being sent to the remote server, but that is cumbersome, slow, and requires individual changes to both your client and server code.\n### Patch\n\nI've attached a patch with tests (for both master and the 3-0-stable branch) that gives you the option to send and encode your ActiveResource POST and PUT request data as `application/x-www-form-urlencoded` or, when file attachments are present, `multipart/form-data`. Since Net::HTTP doesn't natively handle mutlipart attachments, I introduced a dependency on the `Payload` class from [rest-client](http://rubygems.org/gems/rest-client).\n\nTo enable this new encoding option, I added a new class attribute, `ActiveRecord::Base.payload_encoding`. It works similar to how the `format` option works (it can be set globally or on a per-class basis). `payload_encoding` defaults to `:serialized` for compatibility (data will continue to be posted as serialized JSON or XML). Or `payload_encoding` can be set to `:form` to encode the attributes as form elements/multipart data for attachments.\n\nThis feature also seems handy to have for remote web services that expect data encoded this way (and not as JSON or XML).\n\nFinally, regarding compatibility, it's disabled by default so it shouldn't interfere, but if you're targeting a Rails-based backend service, I believe enabling it should be mostly seamless. Since a Rails backend will automatically decode the XML and JSON data sent to into form parameters anyway, this simply negates the need for that step.\n### Example\n\n``` ruby\n    class Image < ActiveResource::Base\n      self.site = \"http://localhost:3001/\"\n      self.format = :json\n      self.payload_encoding = :form\n    end\n```\n\n`Image.find` and others will continue to fetch the data using JSON. However, `Image.create` and other save methods will post the data as form attributes, allowing multipart attachments to also work.\n", "labels": [], "number": 831, "updated_at": "2015-01-06 14:19:21", "user": 789801, "closed_at": "2011-05-21 15:12:20", "id": 904581, "title": "[patch] ActiveResource doesn't support file uploads/attachments", "url": "https://api.github.com/repos/rails/rails/issues/831", "created_at": "2011-05-16 04:31:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171188", "text": "Attachments saved to Gist: http://gist.github.com/971771\n", "created_at": "2011-05-16 04:31:45", "user": 789801, "id": 1171188}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3302577", "text": "Any reason this was closed without merging?\n", "created_at": "2011-12-29 17:02:54", "user": 305470, "id": 3302577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4346101", "text": "I'm also curious if this will ever come to fruition.\n", "created_at": "2012-03-06 15:21:53", "user": 110935, "id": 4346101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4481204", "text": "+1 for a way to do this\n", "created_at": "2012-03-13 18:25:01", "user": 310707, "id": 4481204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/52764053", "text": "So, um, no further discussion here?\n", "created_at": "2014-08-20 11:40:04", "user": 89889, "id": 52764053}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/58739076", "text": "+1 would be nice to have it, any idea why this was closed ?\n", "created_at": "2014-10-11 05:40:25", "user": 238278, "id": 58739076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68869270", "text": "+1\n", "created_at": "2015-01-06 14:11:11", "user": 4987386, "id": 68869270}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68870197", "text": "Active resource was extracted from rails\n", "created_at": "2015-01-06 14:19:21", "user": 47848, "id": 68870197}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6394\nCreated by **Robert Pankowecki** - 2011-02-09 10:17:04 UTC\n\nAdding new file in a directory matching the config.i18n.load_path configuration and reloading the application from console (or by executing new request in development mode) does not read the translations that are included in the new file.\n\nRenaming one of existing localization file leads to \"Errno::ENOENT: No such file or directory\" exception after reloading.\n\nThis happens on rails 3.0.3\n", "labels": [], "number": 832, "updated_at": "2011-05-21 15:12:21", "user": 789801, "closed_at": "2011-05-21 15:12:21", "id": 904582, "title": "i18n reload does not read new localization files in matching directories", "url": "https://api.github.com/repos/rails/rails/issues/832", "created_at": "2011-05-16 04:31:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6395\nCreated by **Jaymin Shah** - 2011-02-09 11:38:42 UTC\n\nC:\\test\\typo>rake db:migrate\n(in C:/test/typo)\nTypoPlugins: just registered plugin TypoPlugins::Gravatar for :avatar target.\nc:/ruby187/lib/ruby/gems/1.8/gems/activesupport-3.0.4/lib/active_support/core_ex\nt/module/remove_method.rb:3: [BUG] Segmentation fault\nruby 1.8.7 (2010-08-16 patchlevel 302) [i386-mingw32]\n\nThis application has requested the Runtime to terminate it in an unusual way.\nPlease contact the application's support team for more information.\n\nI have confirmed that this problem do occur in 3.0.0 as well as 3.0.3.\n", "labels": [], "number": 833, "updated_at": "2011-05-21 15:12:21", "user": 789801, "closed_at": "2011-05-21 15:12:21", "id": 904583, "title": "Segmentation fault Ruby 187p302 and Rails 3.0.4", "url": "https://api.github.com/repos/rails/rails/issues/833", "created_at": "2011-05-16 04:31:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6396\nCreated by **Daisuke Fujimura** - 2011-02-09 12:02:35 UTC\n\nHi,\n\nIn 3.0.4 and edge, using dynamic finder(like find_by_id) after where for same column seems misbehaving.\n\nfor example, \n\n```\nArticle.where(:id => 2).find_by_id(1)\n```\n\nreturns Article with id:2, not id:1 nor nil. is it intended behavior?\nin 3.0.3, this code returns nil.\n\nI attached the failing test for this case, but can't find how to fix.\n\nthanks,\n", "labels": [], "number": 834, "updated_at": "2011-05-21 15:12:21", "user": 789801, "closed_at": "2011-05-21 15:12:21", "id": 904584, "title": "dynamic finder after where for same column is ignored", "url": "https://api.github.com/repos/rails/rails/issues/834", "created_at": "2011-05-16 04:32:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171190", "text": "Attachments saved to Gist: http://gist.github.com/971772\n", "created_at": "2011-05-16 04:32:02", "user": 789801, "id": 1171190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1206100", "text": "Can't be reproduced on master.\n", "created_at": "2011-05-19 20:22:42", "user": 108369, "id": 1206100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1206521", "text": "Seems to be fixed in master for me too.\n", "created_at": "2011-05-19 21:24:23", "user": 217126, "id": 1206521}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6398\nCreated by **Bertg** - 2011-02-09 14:06:20 UTC\n\nSay we have this model\n\n``` ruby\nclass Car < ActiveRecord::Base\n  # string  name\n  # integer wheels\nend\n```\n\nExecuting following code\n\n``` ruby\nCar.where(:name  => \"Jeff\").new #=> <Car name: \"Jeff\", wheels: nil>\nCar.where(:wheels => [4,8]).new #=> <Car name: nil, wheels: 1>\n```\n\nThe first case yield expected result, however the second one does not! 1 wheel?\n\n``` ruby\nCar.where(:wheels => 4..8).new #=> <Car name: nil, wheels: nil>\n```\n\nWhen using a range we don't get the issue.\n\nTest in patch\n\nMy suggestion would be to be more careful what values get passed to the scope_for_create (relation.rb:359) method. How this should be achieved, that I do not know.\n", "labels": [], "number": 835, "updated_at": "2011-05-21 15:12:21", "user": 789801, "closed_at": "2011-05-21 15:12:21", "id": 904585, "title": "build model on association creates unexpected results", "url": "https://api.github.com/repos/rails/rails/issues/835", "created_at": "2011-05-16 04:32:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171191", "text": "Attachments saved to Gist: http://gist.github.com/971773\n", "created_at": "2011-05-16 04:32:08", "user": 789801, "id": 1171191}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6401\nCreated by **Jonathan del Strother** - 2011-02-09 16:41:52 UTC\n\nHeya,\nCommit https://github.com/rails/rails/commit/44db47c63e669bdad74e4ac92a79fde13f6b839d caused some problems for us with converting durations to json.  Specifically, running - \n\n   `{:duration => 3.seconds}.to_json`\n\nused to return \"{'duration':3}\" and now returns \"{'duration':{}}\" on ruby 1.8.7.\n\nI'm currently working around it using : \n\n```\nActiveSupport::Duration.class_eval do\n  def as_json(options = nil)\n    to_i\n  end\nend\n```\n\nAny better suggestions?\n", "labels": [], "number": 836, "updated_at": "2011-07-05 13:30:07", "user": 789801, "closed_at": "2011-05-21 15:12:21", "id": 904587, "title": "BasicObject causing problems with duration.to_json", "url": "https://api.github.com/repos/rails/rails/issues/836", "created_at": "2011-05-16 04:32:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1503646", "text": "For anyone else with the same problem, it's fixed in [Rails 3.1](https://github.com/rails/rails/commit/0ac66caac5581c4793d120c8ad4a2cf4137f6ce2), and doesn't show up under ruby 1.9.2.\n", "created_at": "2011-07-05 13:30:07", "user": 2377, "id": 1503646}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6403\nCreated by **Fredrik Thuresson** - 2011-02-09 19:14:50 UTC\n\nCreating a brand new app under Rails 3.0.4 with one model in it, \n\n```\nconfig/database.yml\ndevelopment:\n  database: bogus\ntest:\n  database: bogus_test\n```\n\nThe table exists in products database\n\n```\nclass Item < ActiveRecord::Base\n  def self.table_name_prefix\n    'products.'\n  end\nend\n```\n\nthe table_name_prefix is not honered when running rake test. It works fine in console and in browser to pick it up from the products database.\n\nrake test produces\n\n```\nMysql2::Error: Table 'bogus_test.items' doesn't exist: DELETE FROM `items`\n```\n\nIs this expected?\n", "labels": [], "number": 837, "updated_at": "2011-05-21 15:12:21", "user": 789801, "closed_at": "2011-05-21 15:12:21", "id": 904588, "title": "table_name_prefix not honored under rake test", "url": "https://api.github.com/repos/rails/rails/issues/837", "created_at": "2011-05-16 04:32:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171192", "text": "_Imported from Lighthouse._\nComment by **kenmazaika** - 2011-02-14 01:35:57 UTC\n\nI do not believe MySQL supports having periods in table names, because if it did queries could be ambiguous with federated tables:\n\nmysql> create table something.test (id INT);\nERROR 1049 (42000): Unknown database 'something'\nmysql> create table something_test (id INT);\nQuery OK, 0 rows affected (0.00 sec)\n\nI suspect this will work with other database engines though.\n\n-ken\n", "created_at": "2011-05-16 04:32:20", "user": 789801, "id": 1171192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171193", "text": "_Imported from Lighthouse._\nComment by **Fredrik Thuresson** - 2011-03-16 14:22:17 UTC\n\nkenmazaika: The period is separating the database and the table name. \nDatabase: bogus_test, Table Name: items\n\nThe following worked for me in test/test_helper.rb\n\nReplaced\n@connection = class_name.connection if class_name.respond_to?(:connection)\nwith\n@connection = table_name.classify.constantize.connection\n\nclass Fixtures\n  def initialize(connection, table_name, class_name, fixture_path, file_filter = DEFAULT_FILTER_RE)\n    @connection, @table_name, @fixture_path, @file_filter = connection, table_name, fixture_path, file_filter\n    @name = table_name # preserve fixture base name\n    @class_name = class_name ||\n                  (ActiveRecord::Base.pluralize_table_names ? @table_name.singularize.camelize : @table_name.camelize)\n    @table_name = \"#{ActiveRecord::Base.table_name_prefix}#{@table_name}#{ActiveRecord::Base.table_name_suffix}\"\n    @table_name = class_name.table_name if class_name.respond_to?(:table_name)\n    @connection = table_name.classify.constantize.connection\n    read_fixture_files\n  end\nend\n\n-Fredrik\n", "created_at": "2011-05-16 04:32:21", "user": 789801, "id": 1171193}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171194", "text": "_Imported from Lighthouse._\nComment by **Fredrik Thuresson** - 2011-03-16 14:25:23 UTC\n\nObviously I don't know how to format. Here is another attempt. Ignore the previous comment.\n\nkenmazaika: The period is separating the database and the table name.\nDatabase: bogus_test, Table Name: items\nThe following worked for me in test/test_helper.rb\n\n```\nReplaced\n@connection = class_name.connection if class_name.respond_to?(:connection) \nwith\n@connection = table_name.classify.constantize.connection\n```\n\n```\nclass Fixtures\n  def initialize(connection, table_name, class_name, fixture_path, file_filter = DEFAULT_FILTER_RE)\n    @connection, @table_name, @fixture_path, @file_filter = connection, table_name, fixture_path, file_filter\n    @name = table_name # preserve fixture base name\n    @class_name = class_name ||\n              (ActiveRecord::Base.pluralize_table_names ? @table_name.singularize.camelize : @table_name.camelize)\n    @table_name = \"#{ActiveRecord::Base.table_name_prefix}#{@table_name}#{ActiveRecord::Base.table_name_suffix}\"\n    @table_name = class_name.table_name if class_name.respond_to?(:table_name)\n    @connection = table_name.classify.constantize.connection\n    read_fixture_files\n  end \nend\n```\n\n-Fredrik\n", "created_at": "2011-05-16 04:32:23", "user": 789801, "id": 1171194}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6406\nCreated by **Christopher Thompson** - 2011-02-10 18:05:01 UTC\n\nThis problem exists in Rails 2.3.10. Code inspection in 3-0-stable shows the problem also exists there, but I have not verified this. Below, I am discussing Rails 2.3.10.\n\nActiveRecord::XmlSerializer#add_associations does not properly deal with :has_one relationships. It fails to add the type of the associated data. Worse, if the container object uses STI, the :has_one associated data will claim to be the type of the container object.\n\nConsider for example:\n\n```\nclass Container < ActiveRecord::Base\n  has_many :sti_outer_objs\n\n  def dump\n    to_xml({:include=>{:sti_outer_objs=>{:include=>{:sti_inner_obj=>{}}}}})\n  end\nend\n\nclass StiOuterObj < ActiveRecord::Base\n  belongs_to :container\n  has_one :sti_inner_obj\nend\n\nclass StiOuterDerivedObj < StiOuterObj\nend\n\nclass StiInnerObj < ActiveRecord::Base\n  belongs_to :sti_outer_obj\nend\n\nclass StiInnerDerivedObj < StiInnerObj\nend\n```\n\nNow, use the following hierarchy:\n\n```\ncontainer -> [sti_outer_derived] -> sti_inner_derived\n```\n\nCalling container.dump will show that the generated XML claims that sti_inner_derived's type is \"StiOuterDerived\".\n\nThe fix is simple and straightforward; we have to calculate the type of the :has_one data. Attached is a patch against Rails-2.3.10 which accomplishes this and solves the problem.\n\nThe patch does not apply against Rails 3.x, but I believe the modification is trivial.\n\nI am happy to provide any additional information required.\n", "labels": [], "number": 838, "updated_at": "2011-05-21 15:12:21", "user": 789801, "closed_at": "2011-05-21 15:12:21", "id": 904590, "title": "ActiveRecord::XmlSerializer fails with has_one types", "url": "https://api.github.com/repos/rails/rails/issues/838", "created_at": "2011-05-16 04:32:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171195", "text": "Attachments saved to Gist: http://gist.github.com/971774\n", "created_at": "2011-05-16 04:32:29", "user": 789801, "id": 1171195}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6409\nCreated by **daniel lo** - 2011-02-10 23:04:15 UTC\n\nGreetings,\n\nIn this URL: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#method-c-set_table_name\n\nThe documentation for table_name is missing ... something... See vvvv => a few lines down\n\nclass Invoice < ActiveRecord::Base; end;\nfile                  class               table_name\ninvoice.rb            Invoice             invoices\n\nvvvv => Here it IS ... there are 2 end; end at the line, but no extra class or module\n\nclass Invoice < ActiveRecord::Base; class Lineitem < ActiveRecord::Base; end; end;\nfile                  class               table_name\ninvoice.rb            Invoice::Lineitem   invoice_lineitems\n\nRegards,\n\nDaniel\n", "labels": [], "number": 839, "updated_at": "2011-05-21 15:12:21", "user": 789801, "closed_at": "2011-05-21 15:12:21", "id": 904593, "title": "Documentation correction", "url": "https://api.github.com/repos/rails/rails/issues/839", "created_at": "2011-05-16 04:32:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213976", "text": "What was the issue again? The earlier code was definitely hard on the eyes. But, I can't see any error there. I'm missing something?\n", "created_at": "2011-05-21 09:17:33", "user": 146214, "id": 1213976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213994", "text": "Made changes to more readable. As you see it hard on eyes to read and understand\n", "created_at": "2011-05-21 09:28:32", "user": 16808, "id": 1213994}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213996", "text": "Yes. I agree with that. But I cant see what was the error as reported in the ticket.\n", "created_at": "2011-05-21 09:29:24", "user": 146214, "id": 1213996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213999", "text": "The Bug Description is not clear. But the documentation is not clear.\n", "created_at": "2011-05-21 09:31:30", "user": 16808, "id": 1213999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214004", "text": "Yeah i agree with you vijay. We just made the changes for more readable \n", "created_at": "2011-05-21 09:34:41", "user": 16808, "id": 1214004}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6411\nCreated by **Ola Tuvesson** - 2011-02-11 09:30:57 UTC\n\nGiven that I have set i18n to fall back (e.g. from \"fr-Fr\" to just \"fr\"): \n\nI18n::Backend::Simple.send(:include, I18n::Backend::Fallbacks)\n\nAnd I have created a localized view (e.g. /help/index.fr.html.erb)\n\nWhen i18n locale is set to \"fr-FR\", then the localized view is not found - yet the language file fr.yml is found. \n\nCan I monkey patch this somehow?\n", "labels": ["actionview", "i18n"], "number": 840, "updated_at": "2013-08-14 14:42:39", "user": 789801, "closed_at": "2013-04-11 23:31:18", "id": 904595, "title": "i18n fallback doesn't work for localized views", "url": "https://api.github.com/repos/rails/rails/issues/840", "created_at": "2011-05-16 04:32:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171196", "text": "_Imported from Lighthouse._\nComment by **Ola Tuvesson** - 2011-02-12 05:54:57 UTC\n\nCould someone at least confirm if this is the expected behaviour or not?\n", "created_at": "2011-05-16 04:32:41", "user": 789801, "id": 1171196}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171197", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-13 14:13:45 UTC\n\nHi Ola,\n\nI have spoken to Jos√© about this issue and it does seem to be a bug when using I18n Fallbacks.\n\nThanks for reporting the issue, I will take a look at creating a patch for master this week.\n\nThanks,\n\nJosh\n", "created_at": "2011-05-16 04:32:42", "user": 789801, "id": 1171197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171199", "text": "_Imported from Lighthouse._\nComment by **Ola Tuvesson** - 2011-02-13 16:11:17 UTC\n\nThanks Josh! I need this as I'm working on a site which is available in both France and Canada, as well as in French language in other countries. So I en up with lots of language-country combinations; fr-FR, fr-CA, fr-CH, fr-UK - I really don't want to have separate help files for all of them!\n", "created_at": "2011-05-16 04:32:43", "user": 789801, "id": 1171199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171200", "text": "_Imported from Lighthouse._\nComment by **Ola Tuvesson** - 2011-02-17 12:51:39 UTC\n\nWhile waiting for this to be patched, does anyone have any suggestions how I might implement a temporary fix for this? I need to do a new release of my project within the next day or so and this has to include the help pages.\n", "created_at": "2011-05-16 04:32:45", "user": 789801, "id": 1171200}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171201", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-02-17 12:57:38 UTC\n\nHey Ola,\n\nSorry for the delay, http://travis-ci.org is eating up my time. I have one patch I need to attend to first, then this one.\n\nThe temp fix could be to check if the file exists and render it if it does, otherwise strip off the country portion. This is a hack and ugly controller code, but it should work.\n\nThanks,\n\nJosh\n", "created_at": "2011-05-16 04:32:46", "user": 789801, "id": 1171201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171202", "text": "_Imported from Lighthouse._\nComment by **Ola Tuvesson** - 2011-02-18 09:22:25 UTC\n\nThanks, that makes sense. But I was wondering which method it is I need to override? I've been digging around in the ActionView source, PathResolver and other places but I can't seem to locate the relevant locale based view lookup - though admittedly I'm not very well traveled in the Rails source. Could you drop me a hint? \n\nCheers, \n\nOla\n", "created_at": "2011-05-16 04:32:47", "user": 789801, "id": 1171202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171203", "text": "_Imported from Lighthouse._\nComment by **Ola Tuvesson** - 2011-02-18 10:23:21 UTC\n\nFor example, putting this in an initializer does _not_ give me the German help view: \n\nmodule ActionView\n  class LookupContex\n    module Details\n      def locale\n        :de\n      end\n    end\n  end\nend\n", "created_at": "2011-05-16 04:32:49", "user": 789801, "id": 1171203}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171204", "text": "_Imported from Lighthouse._\nComment by **Ola Tuvesson** - 2011-03-03 17:13:39 UTC\n\nAny thoughts on this, anyone?\n", "created_at": "2011-05-16 04:32:50", "user": 789801, "id": 1171204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8426342", "text": "Should this issue be reopened? I still see it in Rails 3.2.8.\n", "created_at": "2012-09-10 15:21:50", "user": 54260, "id": 8426342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8426919", "text": "If you're seeing it, then yes.\n", "created_at": "2012-09-10 15:36:54", "user": 27786, "id": 8426919}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10833837", "text": "Applying the monkeypatch from #3512, I get these two unrelated failures:\n\n```\n  1) Failure:\ntest_render_file_with_dashed_locale(CachedViewRenderTest) [/Users/steve/src/rails/actionpack/test/template/render_test.rb:117]:\nExpected: \"Ola mundo\"\n  Actual: \"Hello world!\"\n\n  2) Failure:\ntest_render_file_with_dashed_locale(LazyViewRenderTest) [/Users/steve/src/rails/actionpack/test/template/render_test.rb:117]:\nExpected: \"Ola mundo\"\n  Actual: \"Hello world!\"\n```\n\nSo, that won't work as a simple fix.\n", "created_at": "2012-11-29 03:32:37", "user": 27786, "id": 10833837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10833880", "text": "Right. Because we can render things like, for example, `hello_world.pt-BR.html.erb`. So we need a slightly more intelligent fix.\n", "created_at": "2012-11-29 03:35:51", "user": 27786, "id": 10833880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14235490", "text": "I'm not quite sure, but is this problem maybe related to [action_view/lookup_context.rb:203](https://github.com/rails/rails/blob/master/actionpack/lib/action_view/lookup_context.rb#L203) where it returns just the first key instead of an array? \n\nas far as i understand it, if locale would return an Array, the find method would try to find the first match and if locale would return `I18n.fallbacks[I18n.locale]` we had our solution? \n\nedit: would be cool to hear some thoughts from @josevalim, cause he should have the best understanding of latest changes. \n", "created_at": "2013-02-28 14:27:10", "user": 99911, "id": 14235490}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14910036", "text": "This should be fixed by #7368\n", "created_at": "2013-03-14 15:46:18", "user": 36869, "id": 14910036}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14929327", "text": "I just merged https://github.com/rails/rails/pull/7368 , so hopefully that fixes it? Can someone test it out?\n", "created_at": "2013-03-14 21:08:20", "user": 27786, "id": 14929327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16268119", "text": "I'm going to assume that #7368 fixes this until further notice. Let me know if it doesn't.\n", "created_at": "2013-04-11 23:31:18", "user": 27786, "id": 16268119}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6412\nCreated by **Igor Alexandrov** - 2011-02-11 09:35:06 UTC\n\nHello.\nI found that method construct_finder_sql_with_included_associations(options, join_dependency) of Rails 2.3 is not optimal when called from find() method with :order, :include and :limit options. It adds unnecessary checks in WHERE clause after load IDs for limited eager loading.\n\nIf we have already found needed IDs during limited eager loading, we don't need additional checks in WHERE clause.\n\nExample.\n_Before patch_\n\nEducation::Pc Load IDs For Limited Eager Loading (4.7ms)\n\n``` sql\nSELECT * FROM (SELECT DISTINCT ON (\"pcs\".id) \"pcs\".id, COALESCE(pcs.min_cost, pcs.max_cost) AS alias_0 FROM \"pcs\" WHERE ((SELECT COUNT(*) FROM metro_stations_pcs c WHERE c.metro_station_id IN ('57') AND c.pc_id = pcs.id) > 0 AND (SELECT COUNT(*) FROM pcs_durations c WHERE c.duration_id IN ('4') AND c.pc_id = pcs.id) > 0) ) AS id_list ORDER BY id_list.alias_0 LIMIT 20 OFFSET 0\n```\n\nEducation::Pc Load Including Associations (2.3ms)\n\n``` sql\nSELECT \"pcs\".\"id\" AS t0_r0, \"pcs\".\"name\" AS t0_r1, \"pcs\".\"university_id\" AS t0_r2, \"pcs\".\"has_distance_learning\" AS t0_r3, \"pcs\".\"has_sse_preparation\" AS t0_r4, \"pcs\".\"moscow_administrative_district\" AS t0_r5, \"pcs\".\"min_cost\" AS t0_r6, \"pcs\".\"max_cost\" AS t0_r7, \"pcs\".\"address\" AS t0_r8, \"pcs\".\"phones\" AS t0_r9, \"pcs\".\"emails\" AS t0_r10, \"pcs\".\"website\" AS t0_r11, \"pcs\".\"description\" AS t0_r12, \"pcs\".\"entering_information\" AS t0_r13, \"pcs\".\"cost_information\" AS t0_r14, \"pcs\".\"duration\" AS t0_r15, \"pcs\".\"created_at\" AS t0_r16, \"pcs\".\"updated_at\" AS t0_r17, \"metro_stations\".\"id\" AS t1_r0, \"metro_stations\".\"name\" AS t1_r1, \"metro_stations\".\"created_at\" AS t1_r2, \"metro_stations\".\"updated_at\" AS t1_r3, \"metro_stations\".\"universities_count\" AS t1_r4, \"metro_stations\".\"colleges_count\" AS t1_r5, \"metro_stations\".\"schools_count\" AS t1_r6, \"metro_stations\".\"kindergartens_count\" AS t1_r7, \"metro_stations\".\"pcs_count\" AS t1_r8, \"metro_stations\".\"secs_count\" AS t1_r9 FROM \"pcs\" LEFT OUTER JOIN \"metro_stations_pcs\" ON \"metro_stations_pcs\".pc_id = \"pcs\".id LEFT OUTER JOIN \"metro_stations\" ON \"metro_stations\".id = \"metro_stations_pcs\".metro_station_id WHERE ((SELECT COUNT(*) FROM metro_stations_pcs c WHERE c.metro_station_id IN ('57') AND c.pc_id = pcs.id) > 0 AND (SELECT COUNT(*) FROM pcs_durations c WHERE c.duration_id IN ('4') AND c.pc_id = pcs.id) > 0) AND \"pcs\".id IN (469) ORDER BY COALESCE(pcs.min_cost, pcs.max_cost) ASC\n```\n\n**Look at WHERE clause of last query**\n\n_After patch_\nEducation::Pc Load Including Associations (1.7ms)\nSELECT \"pcs\".\"id\" AS t0_r0, \"pcs\".\"name\" AS t0_r1, \"pcs\".\"university_id\" AS t0_r2, \"pcs\".\"has_distance_learning\" AS t0_r3, \"pcs\".\"has_sse_preparation\" AS t0_r4, \"pcs\".\"moscow_administrative_district\" AS t0_r5, \"pcs\".\"min_cost\" AS t0_r6, \"pcs\".\"max_cost\" AS t0_r7, \"pcs\".\"address\" AS t0_r8, \"pcs\".\"phones\" AS t0_r9, \"pcs\".\"emails\" AS t0_r10, \"pcs\".\"website\" AS t0_r11, \"pcs\".\"description\" AS t0_r12, \"pcs\".\"entering_information\" AS t0_r13, \"pcs\".\"cost_information\" AS t0_r14, \"pcs\".\"duration\" AS t0_r15, \"pcs\".\"created_at\" AS t0_r16, \"pcs\".\"updated_at\" AS t0_r17, \"metro_stations\".\"id\" AS t1_r0, \"metro_stations\".\"name\" AS t1_r1, \"metro_stations\".\"created_at\" AS t1_r2, \"metro_stations\".\"updated_at\" AS t1_r3, \"metro_stations\".\"universities_count\" AS t1_r4, \"metro_stations\".\"colleges_count\" AS t1_r5, \"metro_stations\".\"schools_count\" AS t1_r6, \"metro_stations\".\"kindergartens_count\" AS t1_r7, \"metro_stations\".\"pcs_count\" AS t1_r8, \"metro_stations\".\"secs_count\" AS t1_r9 FROM \"pcs\" LEFT OUTER JOIN \"metro_stations_pcs\" ON \"metro_stations_pcs\".pc_id = \"pcs\".id LEFT OUTER JOIN \"metro_stations\" ON \"metro_stations\".id = \"metro_stations_pcs\".metro_station_id WHERE \"pcs\".id IN (469) ORDER BY COALESCE(pcs.min_cost, pcs.max_cost) ASC\n\n**Look at WHERE clause. There is no additional params. Only IN operator.**\nYou can find more information if you will do EXPLAIN. I have run all tests and all is pretty well. \n\nThank. Here is a **patch** and I hope, that it will be useful.\n", "labels": [], "number": 841, "updated_at": "2011-05-21 15:12:22", "user": 789801, "closed_at": "2011-05-21 15:12:22", "id": 904596, "title": "Optimization of construct_finder_sql_with_included_associations(options, join_dependency)  ActiveRecord::Associations::ClassMethods", "url": "https://api.github.com/repos/rails/rails/issues/841", "created_at": "2011-05-16 04:32:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171207", "text": "Attachments saved to Gist: http://gist.github.com/971775\n", "created_at": "2011-05-16 04:32:57", "user": 789801, "id": 1171207}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6414\nCreated by **PJ Davis** - 2011-02-11 19:03:15 UTC\n\nWhen using number_to_phone with a seven digit number and using :area_code => true, I get\n\n> TypeError: can't convert nil into String\n\n```\nnumber_to_phone(5551234, {:area_code => true})\n```\n\nI've attached the following test to confirm.\n", "labels": [], "number": 842, "updated_at": "2011-05-21 15:12:22", "user": 789801, "closed_at": "2011-05-21 15:12:22", "id": 904597, "title": "number_to_phone error when using 7 digits and :area_code => true", "url": "https://api.github.com/repos/rails/rails/issues/842", "created_at": "2011-05-16 04:33:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171208", "text": "_Imported from Lighthouse._\nComment by **PJ Davis** - 2011-02-11 19:08:38 UTC\n\nHere is the proposed patch and updated test.\n", "created_at": "2011-05-16 04:33:03", "user": 789801, "id": 1171208}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171209", "text": "Attachments saved to Gist: http://gist.github.com/971776\n", "created_at": "2011-05-16 04:33:04", "user": 789801, "id": 1171209}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6415\nCreated by **Kedar Mhaswade** - 2011-03-03 09:20:22 UTC\n\nI created an incorrect migration. I tried:\n\nrails destroy migration.\n\nIt prints:\n\n```\nUsage:\n  rails generate migration NAME [field:type field:type] [options]\n\nOptions:\n  -o, --orm=NAME  # Orm to be invoked\n                  # Default: active_record\n\nRuntime options:\n  -f, [--force]    # Overwrite files that already exist\n  -p, [--pretend]  # Run but do not make any changes\n  -q, [--quiet]    # Supress status output\n  -s, [--skip]     # Skip files that already exist\n\nDescription:\n    Create rails files for migration generator.\n```\n\nThis looks like a message for \"generate\".\nAlso, wouldn't it help if this message showed me the list of migrations created and asked me to pick the one I want to delete?\n", "labels": [], "number": 843, "updated_at": "2011-05-21 15:12:22", "user": 789801, "closed_at": "2011-05-21 15:12:22", "id": 904598, "title": "incorrect message on a \"rails destroy\" command invocation?", "url": "https://api.github.com/repos/rails/rails/issues/843", "created_at": "2011-05-16 04:33:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171210", "text": "_Imported from Lighthouse._\nComment by **Kedar Mhaswade** - 2011-02-11 19:41:03 UTC\n\nBTW, I am on 3.0.3.\n", "created_at": "2011-05-16 04:33:10", "user": 789801, "id": 1171210}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6418\nCreated by **Ed4** - 2011-02-11 22:27:20 UTC\n\nIn Rails 2.x, you used to be able to do things like this in integration tests:\n\n``` ruby\n\nget \"/customers/500\"\nassert_response :not_found\n\n```\n\nThis kind of test allows you to verify the behavior of your rescue handlers.  In my case, I'm relying on the built-in default handler to catch the ActiveRecord::RecordNotFound exception and serve up :not_found (and I'm also making assertions about how the exception gets logged and reported).\n\nBut in Rails 3.x, the RecordNotFound exception propagates out through the \"get\" call above, and the whole test halts without ever serving up a response, as far as I can tell.\n\nSo how are we supposed to test rescue behavior in Rails 3?\n", "labels": [], "number": 844, "updated_at": "2011-05-21 15:12:22", "user": 789801, "closed_at": "2011-05-21 15:12:22", "id": 904599, "title": "Exception Propagation in Integration Tests", "url": "https://api.github.com/repos/rails/rails/issues/844", "created_at": "2011-05-16 04:33:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6421\nCreated by **Brian Morearty** - 2011-02-18 10:10:47 UTC\n\nFrom this Rails Core comment by Santiago: https://mail.google.com/a/morearty.org/#inbox/12e0c4594370424a\n\nNow that we have the html_safe function, let's depcrecate the 'escape' option (which is sometimes an option, sometimes a parameter) in many of the helper functions in 3-0-stable.  The default in most cases should now be to escape the text by calling html_safe in the helper.  Let people call html_safe before calling the helper if they want to avoid escaping.  \n\nThese are the helpers that have either an `escape` parameter or `:escape` option that we can deprecate:\n- `FormTagHelper#text_area_tag`. Remove the :escape option. Santiago suggested removing this one.  \n- `TagHelper#content_tag`. Remove the escape param, which currently doesn't work. See below for details.\n- `TagHelper#tag`. Remove escape param, which currently defaults to true. \n\nSantiago asked me to go ahead and make a patch for this deprecation, which I will do.  \n\n---\n\nHere's why I said the escape param for `content_tag` currently doesn't work:\n\nIn a 3.0.1 Rails project the output is never escaped but html_safe? always returns true:\n\n``` ruby\n  rails console\n  Loading development environment (Rails 3.0.1)\n  ruby-1.8.7-p330 :001 > helper.content_tag :div do '<b>hello</b>' end\n  => \"<div><b>hello</b></div>\"\n  ruby-1.8.7-p330 :002 > (helper.content_tag :div do '<b>hello</b>' end).html_safe?\n   => true\n  ruby-1.8.7-p330 :003 > helper.content_tag :div,nil,nil,true do '<b>hello</b>' end\n   => \"<div><b>hello</b></div>\"\n  ruby-1.8.7-p330 :004 > (helper.content_tag :div,nil,nil,true do '<b>hello</b>' end).html_safe?\n   => true\n  ruby-1.8.7-p330 :005 > helper.content_tag :div,nil,nil,false do '<b>hello</b>' end\n   => \"<div><b>hello</b></div>\"\n  ruby-1.8.7-p330 :006 > (helper.content_tag :div,nil,nil,false do '<b>hello</b>' end).html_safe?\n   => true\n```\n\nIn a Rails 3.0.2 project the content is always escaped and html_safe? always returns true:\n\n``` ruby\n  rails console\n  Loading development environment (Rails 3.0.2)\n  ruby-1.8.7-p330 :001 > helper.content_tag :div do '<b>hello</b>' end\n   => \"<div>&lt;b&gt;hello&lt;/b&gt;</div>\"\n  ruby-1.8.7-p330 :002 > (helper.content_tag :div do '<b>hello</b>' end).html_safe?\n   => true\n  ruby-1.8.7-p330 :003 > helper.content_tag :div,nil,nil,true do '<b>hello</b>' end\n   => \"<div>&lt;b&gt;hello&lt;/b&gt;</div>\"\n  ruby-1.8.7-p330 :004 > (helper.content_tag :div,nil,nil,true do '<b>hello</b>' end).html_safe?\n   => true\n  ruby-1.8.7-p330 :005 > helper.content_tag :div,nil,nil,false do '<b>hello</b>' end\n   => \"<div>&lt;b&gt;hello&lt;/b&gt;</div>\"\n  ruby-1.8.7-p330 :006 > (helper.content_tag :div,nil,nil,false do '<b>hello</b>' end).html_safe?\n   => true\n```\n\nSo at least in Rails 3.0.2 the html_safe? function is reporting the truth. But content_tag escapes the output even when escape=false (see the last two lines). \n\n[This is the commit that changed the behavior](https://github.com/rails/rails/commit/bb9c58eb4aa637fa75c69c705a9918d6322ff834). After this change, escape=true doesn't work but calling html_safe still does.\n", "labels": [], "number": 845, "updated_at": "2011-05-21 15:12:22", "user": 789801, "closed_at": "2011-05-21 15:12:22", "id": 904600, "title": "Deprecate 'escape' parameter/option in three helper functions", "url": "https://api.github.com/repos/rails/rails/issues/845", "created_at": "2011-05-16 04:33:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171211", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-02-13 00:37:26 UTC\n\nI'm writing a patch with deprecation notices for 3-0-stable.  But I have a question: what branch do I use for the post-deprecation code?  (The code that no longer supports the escape parameter at all, rather than just giving a deprecation warning.)\n", "created_at": "2011-05-16 04:33:23", "user": 789801, "id": 1171211}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171212", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-13 04:51:38 UTC\n\n3-0-stable for the one that deprecates it and master for the one that removes it.\n", "created_at": "2011-05-16 04:33:25", "user": 789801, "id": 1171212}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171213", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-02-13 22:11:35 UTC\n\nCool, so this patch is done, tested, and ready for you to apply.  The 3 helper functions mentioned above (`FormTagHelper#text_area_tag`, `TagHelper#content_tag`, and `TagHelper#tag` ) will have the following behavior after these patches are applied:\n- In 3.0.5, using the 'escape' parameter or option will show a deprecation message.\n- In 3.1 the 'escape' parameter or option to these 3 methods is removed.  The correct way to specify escaping behavior is to call (or not call) `html_safe` on the parameters.  Both the rdoc and the tests are updated.\n\nThe attached zipfile contains two patches: \n- 3-0-stable-deprecate-escape.diff is a patch for the 3-0-stable branch\n- master-remove-escape.diff is a patch for the master branch\n\nI put a full day's work in to this and was careful. Please let me know if anything looks amiss.\n", "created_at": "2011-05-16 04:33:27", "user": 789801, "id": 1171213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171214", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-17 18:57:38 UTC\n\nHey Brian thanks for your work, can you please upload the patch files directly, don't wrap them in a zip is much easier for me to apply them and test.\n", "created_at": "2011-05-16 04:33:28", "user": 789801, "id": 1171214}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171215", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-02-17 19:11:11 UTC\n\nSure. This is the patch for the 3-0-stable branch...\n", "created_at": "2011-05-16 04:33:30", "user": 789801, "id": 1171215}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171216", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-02-17 19:11:34 UTC\n\nand this is the patch for the master branch.\n", "created_at": "2011-05-16 04:33:32", "user": 789801, "id": 1171216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171217", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-17 23:15:14 UTC\n\nHey Brian, first of all thanks for your work ...\n\nAbout the master patch ...\n\n<pre><code>+      #   tag(\"img\", {:src => \"open &amp; shut.png\".html_safe})</code></pre>\n\n\nI think is not a good example, mark as safe a thing that is going to be escaped otherwise.\n\n<pre><code>-                final_value = value.is_a?(Array) ? value.join(\" \") : value\n-                final_value = ERB::Util.html_escape(final_value) if escape\n+                final_value = value.is_a?(Array) ? value.map{|v|ERB::Util.html_escape(v)}.join(\" \") : ERB::Util.html_escape(value)</code></pre>\n\n\nI think is better if you just do the same as before but remove the if escape, seems more readable to me.\n\n<pre><code>-              unless options[:sanitize] == false\n+              if options.fetch(:sanitize, true)\n                 link_text = sanitize(link_text)\n                 href      = sanitize(href)\n+              else\n+                link_text = link_text.html_safe\n+                href      = href.html_safe\n               end\n-              content_tag(:a, link_text, link_attributes.merge('href' => href), !!options[:sanitize]) + punctuation.reverse.join('')\n+              content_tag(:a, link_text, link_attributes.merge('href' => href)) + punctuation.reverse.join('')</code></pre>\n\n\nThat's wrong we should avoid marking html_safe unsafe content, sanitize != escape\n\nhttp://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/text_helper.rb#L13-29\n", "created_at": "2011-05-16 04:33:34", "user": 789801, "id": 1171217}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171218", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-02-18 00:54:39 UTC\n\nThanks for taking a detailed look at it, Santiago. \n\n```\n+      #   tag(\"img\", {:src => \"open & shut.png\".html_safe})\n```\n\nYou make a good point. I'll change it to something better, like a string with an HTML tag in it.\n\n```\n-                final_value = value.is_a?(Array) ? value.join(\" \") : value\n-                final_value = ERB::Util.html_escape(final_value) if escape\n+                final_value = value.is_a?(Array) ? value.map{|v|ERB::Util.html_escape(v)}.join(\" \") : ERB::Util.html_escape(value)\n```\n\nAt first I did it the way you suggested--just leave the old code in place but always call html_escape. It caused problems because (I think) joining an array of strings, some of which are unsafe, results in a string that's unsafe. Then we escape it so all the content from all the array elements gets escaped. \n\nSo if there's an array and you want one of the elements to be considered safe you have to mark them all safe. If I remember correctly. This approach was a fix for that problem.\n\n```\n-              unless options[:sanitize] == false\n+              if options.fetch(:sanitize, true)\n                 link_text = sanitize(link_text)\n                 href      = sanitize(href)\n+              else\n+                link_text = link_text.html_safe\n+                href      = href.html_safe\n               end\n-              content_tag(:a, link_text, link_attributes.merge('href' => href), !!options[:sanitize]) + punctuation.reverse.join('')\n+              content_tag(:a, link_text, link_attributes.merge('href' => href)) + punctuation.reverse.join('')\n```\n\nYeah, this is a tricky case. I knew that sanitize != escape but the old code was passing !!options[:sanitize] to content_tag's \"escape\" parameter, so the effect was:\n1. If sanitize was true we also escaped it after sanitizing. Now the sanitize function calls html_safe at the end (not as part of my change), so this old behavior is probably broken.\n2. If sanitize was false we didn't escape it. My call to html_safe in the 'else' clause keeps this behavior. But I think you're right, I shouldn't call html_safe here. I should let the content be output as an unsafe string.\n\nI'll revisit this code and let you know what I find.\n", "created_at": "2011-05-16 04:33:36", "user": 789801, "id": 1171218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171219", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-02-18 17:25:08 UTC\n\nHi Santiago,\n\nThanks again for the help! Here is a new patch for the master branch. This is what I did:\n\nRe: your first point, you are right--the example wasn't good. I have fixed the `tag` example to something that makes more sense. The only case I could think of where you would ever put a `<` or `>` in an attribute was JavaScript so I did that. \n\nRe: your second point, for the correct behavior I think it needs to be left the way it was in my patch. Joining a mix of html-safe and unsafe strings results in a single unsafe string, and escaping that would result in escaping some parts that were already safe. This irb session illustrates the difference:\n\n``` ruby\n# This is what my change does\nruby-1.8.7-p330 :011 > [ERB::Util.html_escape('a<b'),ERB::Util.html_escape('b<c'.html_safe)].join(\" \")\n => \"a&lt;b b<c\" \n# This is what your proposed change does--it escapes b<c even though it's safe\nruby-1.8.7-p330 :012 > ERB::Util.html_escape(['a<b','b<c'.html_safe].join(\" \"))\n => \"a&lt;b b&lt;c\" \n```\n\nRe: your third point, I now remember why I added the html_safe calls. I tried reverting them them but the pre-existing `test_auto_link_should_not_sanitize_input_when_sanitize_option_is_false` test failed because all the ampersands are turned into ampersand-amp;. The `auto_link` helper has never escaped ampersands. This makes sense because when you use auto_link the input is an HTML string already, so any escaping that the caller wants is up to them. You said \"we should avoid marking html_safe unsafe content\" but the regex that recognizes a URL stops when it reaches a less-than or greater-than character, so the URL is always safe. My addition of html_safe is required to keep the behavior consistent because the `escape` parameter was removed from the content_tag call on the next line (since it's no longer supported).\n\nIn a side note, it turns out the `sanitize` parameter to `auto_link` is most likely irrelevant because the regexes used for both email and url recognition stop when they reach the first angle bracket. So there will never be anything to sanitize in a url or email. But that's a discussion for another day.\n\nSo to sum it up, in the end the only change from the first patch was the example for `tag`.\n", "created_at": "2011-05-16 04:33:38", "user": 789801, "id": 1171219}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171220", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-02-23 21:07:20 UTC\n\nHi,\n\nI was wondering if there's anything I can do to help push this along. I saw that a 3.0.5rc1 was pushed out today, and the original plan was to put the 'escape' deprecations in 3.0.5.\n\nWould it help if I add some more tests to \"document\" why I made the changes we discussed in the last couple of posts above?\n\nOr would it help if someone else put another pair of eyes on the patch so they could weigh in on the right approach?\n\nI'm willing to do more work to get this patch in.  It would be a shame to let it die.  Thanks.\n", "created_at": "2011-05-16 04:33:39", "user": 789801, "id": 1171220}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171221", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-24 00:23:04 UTC\n\nHey Brian, I'm really sorry for the delay, but I'm running out of time.\nIt takes a lot of time to review patches :( at least for me.\n\nAnyways the idea of this patch is to go for 3.1 and to one 3.0.x but we are late to put it on 3.0.5\nI will take a look ASAP.\nThanks.\n", "created_at": "2011-05-16 04:33:42", "user": 789801, "id": 1171221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171222", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-02-24 00:40:19 UTC\n\nHey, Santiago, no problem. I don't even know how you find time to do everything you do. I know reviewing patches is time-consuming. :-)\n\nIt's not a big deal if it's too late for the deprecations to make it into 3.0.5. There's always another version.\n", "created_at": "2011-05-16 04:33:43", "user": 789801, "id": 1171222}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171223", "text": "_Imported from Lighthouse._\nComment by **Ed Ruder** - 2011-03-20 02:34:23 UTC\n\n+1 This would be a nice change to have, to finalize the migration to html_safe in Rails\n", "created_at": "2011-05-16 04:33:45", "user": 789801, "id": 1171223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171224", "text": "_Imported from Lighthouse._\nComment by **Brian Morearty** - 2011-03-29 04:56:07 UTC\n\nHi again,\n\nSorry to bump this but here goes: is there anything I can do to help get this deprecation of the 'escape' parameter done and approved? It's _so_ close. The patch is in. Santiago has already reviewed it once, gave three suggestions, I implemented one of his suggestions and tried my best to explain why I think the other two should remain as is.  \n\nWould it help if I contribute more tests?  Is there someone else who could approve the change? Should I provide more explanation of the changes I made? Anything?\n\nIt would really be a shame if this work went to waste since (a) it fixes real problems (the escape parameter doesn't work anymore) and (b) there seems to be general agreement that it should be done and no one has expressed opposition.\n\nI'll help any way I can.\n\nThanks.\n\nBrian\n", "created_at": "2011-05-16 04:33:47", "user": 789801, "id": 1171224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171225", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-03-29 13:46:01 UTC\n\nBrian I need time to review a bit more and push I'm really really busy. Don't worry this will go in before 3.1 release.\n", "created_at": "2011-05-16 04:33:49", "user": 789801, "id": 1171225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171226", "text": "Attachments saved to Gist: http://gist.github.com/971777\n", "created_at": "2011-05-16 04:33:51", "user": 789801, "id": 1171226}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6425\nCreated by **Andrey Stikheev** - 2011-02-13 15:49:11 UTC\n\nA has_many through relationship with order raise a exception in rails >= 2.3.9 , in rails 2.3.8 it works fine. \n\nTo replicate:\n\nApply the following patch to rails source:\n\n```\n\ndiff --git a/activerecord/test/cases/associations/eager_test.rb b/activerecord/test/cases/associations/eager_test.rb\nindex b711719..52a9f85 100644\n--- a/activerecord/test/cases/associations/eager_test.rb\n+++ b/activerecord/test/cases/associations/eager_test.rb\n@@ -328,6 +328,12 @@ class EagerAssociationTest < ActiveRecord::TestCase\n     assert_equal authors(:david), assert_no_queries { posts_with_comments_and_author.first.author }\n   end\n\n+  def test_eager_with_has_many_through_with_model_with_include_and_with_order\n+    assert_nothing_raised do\n+      Author.find(authors(:david).id, :include => {:posts => :tags})\n+    end\n+  end\n+\n   def test_eager_with_has_many_through_a_belongs_to_association\n     author = authors(:mary)\n     post = Post.create!(:author => author, :title => \"TITLE\", :body => \"BODY\")\ndiff --git a/activerecord/test/models/post.rb b/activerecord/test/models/post.rb\nindex cf69d04..daab631 100644\n--- a/activerecord/test/models/post.rb\n+++ b/activerecord/test/models/post.rb\n@@ -46,7 +46,7 @@ class Post < ActiveRecord::Base\n   has_and_belongs_to_many :special_categories, :join_table => \"categories_posts\", :association_foreign_key => 'category_id'\n\n   has_many :taggings, :as => :taggable\n-  has_many :tags, :through => :taggings do\n+  has_many :tags, :through => :taggings, :order => 'tags.id' do\n     def add_joins_and_select\n       find :all, :select => 'tags.*, authors.id as author_id', :include => false,\n         :joins => 'left outer join posts on taggings.taggable_id = posts.id left outer join authors on posts.author_id = authors.id'\n\n\n```\n\nResults of test:\n\n```\n\nsand:rails sand$ cd activerecord/\nsand:activerecord sand$ rake  TEST=test/cases/associations/eager_test.rb \n\n...\n\n  1) Failure:\ntest_eager_with_has_many_through_with_model_with_include_and_with_order(EagerAssociationTest)\n    [./test/cases/associations/eager_test.rb:332:in `test_eager_with_has_many_through_with_model_with_include_and_with_order'\n     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'\n     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run']:\nException raised:\nClass: <ActiveRecord::StatementInvalid>\nMessage: <\"SQLite3::SQLException: no such column: tags.id: SELECT \\\"taggings\\\".* FROM \\\"taggings\\\" WHERE (\\\"taggings\\\".\\\"taggable_id\\\" IN (1,2,4,5,6) and \\\"taggings\\\".\\\"taggable_type\\\" = 'Post')  ORDER BY tags.id\">\n---Backtrace---\n./test/cases/../../lib/active_record/connection_adapters/abstract_adapter.rb:227:in `log'\n./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:172:in `execute_without_query_record'\n./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:418:in `catch_schema_changes'\n./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:172:in `execute_without_query_record'\n./test/cases/helper.rb:36:in `execute'\n./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:321:in `select'\n./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'\n./test/cases/../../lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'\n./test/cases/../../lib/active_record/base.rb:665:in `find_by_sql'\n./test/cases/../../lib/active_record/base.rb:1582:in `find_every'\n./test/cases/../../lib/active_record/base.rb:619:in `find'\n./test/cases/../../lib/active_record/association_preload.rb:379:in `find_associated_records'\n./test/cases/../../lib/active_record/base.rb:2182:in `with_scope'\n./test/cases/../../lib/active_record/base.rb:2190:in `with_exclusive_scope'\n./test/cases/../../lib/active_record/association_preload.rb:378:in `find_associated_records'\n./test/cases/../../lib/active_record/association_preload.rb:255:in `preload_has_many_association'\n./test/cases/../../lib/active_record/association_preload.rb:120:in `send'\n./test/cases/../../lib/active_record/association_preload.rb:120:in `preload_one_association'\n./test/cases/../../../activesupport/lib/active_support/ordered_hash.rb:115:in `each'\n./test/cases/../../../activesupport/lib/active_support/ordered_hash.rb:115:in `each'\n./test/cases/../../lib/active_record/association_preload.rb:114:in `preload_one_association'\n./test/cases/../../lib/active_record/association_preload.rb:91:in `preload_associations'\n./test/cases/../../lib/active_record/association_preload.rb:289:in `preload_through_records'\n./test/cases/../../lib/active_record/association_preload.rb:243:in `preload_has_many_association'\n./test/cases/../../lib/active_record/association_preload.rb:120:in `send'\n./test/cases/../../lib/active_record/association_preload.rb:120:in `preload_one_association'\n./test/cases/../../../activesupport/lib/active_support/ordered_hash.rb:115:in `each'\n./test/cases/../../../activesupport/lib/active_support/ordered_hash.rb:115:in `each'\n./test/cases/../../lib/active_record/association_preload.rb:114:in `preload_one_association'\n./test/cases/../../lib/active_record/association_preload.rb:91:in `preload_associations'\n./test/cases/../../lib/active_record/association_preload.rb:99:in `preload_associations'\n./test/cases/../../lib/active_record/association_preload.rb:93:in `each'\n./test/cases/../../lib/active_record/association_preload.rb:93:in `preload_associations'\n./test/cases/../../lib/active_record/association_preload.rb:90:in `preload_associations'\n./test/cases/../../lib/active_record/association_preload.rb:90:in `each'\n./test/cases/../../lib/active_record/association_preload.rb:90:in `preload_associations'\n./test/cases/../../lib/active_record/base.rb:1584:in `find_every'\n./test/cases/../../lib/active_record/base.rb:1617:in `find_one'\n./test/cases/../../lib/active_record/base.rb:1603:in `find_from_ids'\n./test/cases/../../lib/active_record/base.rb:620:in `find'\n./test/cases/associations/eager_test.rb:333:in `test_eager_with_has_many_through_with_model_with_include_and_with_order'\n./test/cases/associations/eager_test.rb:332:in `test_eager_with_has_many_through_with_model_with_include_and_with_order'\n./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'\n./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run'\n---------------\n\n104 tests, 331 assertions, 1 failures, 0 errors\n\n\n```\n\nAs I understood this problem appeared after the commit 0963774c0a6a58ba13ac (https://github.com/rails/rails/commit/0963774c0a6a58ba13ac0ff4763527ea7d994c0a)\n", "labels": [], "number": 846, "updated_at": "2012-01-17 16:58:21", "user": 789801, "closed_at": "2011-05-21 15:12:22", "id": 904602, "title": "has many through with order eager loading problem in rails 2.3.11", "url": "https://api.github.com/repos/rails/rails/issues/846", "created_at": "2011-05-16 04:33:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171227", "text": "Attachments saved to Gist: http://gist.github.com/971778\n", "created_at": "2011-05-16 04:33:57", "user": 789801, "id": 1171227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3531194", "text": " This bug continues to exist in Rails 2.3.14. Why has this issue been closed?\n", "created_at": "2012-01-17 16:58:21", "user": 637263, "id": 3531194}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6426\nCreated by **Igor Alexandrov** - 2011-02-13 16:16:59 UTC\n\nHello. This ticked is enhanced version of this one https://rails.lighthouseapp.com/projects/8994/tickets/1207-postgresqladapter-postgres-error-while-finding-when-using-a-function-with-two-parameters-in-order-clause\n\nThe problem is that PostgreSQL requires the ORDER BY columns in the select list for distinct queries, and also requires that the ORDER BY include the distinct column. All works pretty well if you just have plain parameters in ORDER BY clause. For example, something like \n\n``` sql\nORDER BY \"pcs\".min_cost DESC, \"pcs\".title\n```\n\nwill be parsed well and added to DISTINCT PART as\n\n``` sql\nSELECT DISTINCT ..., \"pcs\".min_cost AS alias_0, \"pcs\".title AS alias_1\n```\n\nBut if you will use something complex in ORDER BY string ‚Äì all will be bad! The problem is that now distinct() method of PostgreSQL adapter simple splits ORDER BY string by ','.\n\nFor example:\n\n``` sql\nORDER BY COALESCE(\"pcs\".min_cost, \"pcs\".max_cost) DESC\n```\n\nwill be parsed, splitted and transformed into incorrect DISTINCT clause:\n\n``` sql\nSELECT DISTINCT ON (\"pcs\".id) \"pcs\".id, COALESCE(pcs.min_cost AS alias_0, pcs.max_cost) AS alias_1 FROM \"pcs\"\n```\n\nThis query won't be executed because of syntax errors. I created patch that allows to use Array as :order param in find() method. \nSee\n**:order => [\"COALESCE(pcs.min_cost, pcs.max_cost) DESC\"]**\nwill be translated into \n\n``` sql\nSELECT DISTINCT ON (\"pcs\".id) \"pcs\".id, COALESCE(pcs.min_cost, pcs.max_cost) AS alias_0\n```\n\nand \n**:order => [\"COALESCE(pcs.min_cost, pcs.max_cost) DESC\", \"pcs.title\"]**\nwill be\n\n``` sql\nSELECT DISTINCT ON (\"pcs\".id) \"pcs\".id, COALESCE(pcs.min_cost, pcs.max_cost) AS alias_0, pcs.title AS alias_1\n```\n\nAll works good, and Array syntax is easy to understand. All test run well. This affects 2.3 and 3.0 branches.\n\nThanks. Hope it will be useful.\n", "labels": [], "number": 847, "updated_at": "2011-05-21 15:12:23", "user": 789801, "closed_at": "2011-05-21 15:12:23", "id": 904603, "title": "[PATCH] Allow array as order param for postgresql", "url": "https://api.github.com/repos/rails/rails/issues/847", "created_at": "2011-05-16 04:34:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171228", "text": "_Imported from Lighthouse._\nComment by **Igor Alexandrov** - 2011-02-21 21:18:21 UTC\n\nGuys, this is really annoying bug. Please review the patch.\nThanks.\n", "created_at": "2011-05-16 04:34:03", "user": 789801, "id": 1171228}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171229", "text": "Attachments saved to Gist: http://gist.github.com/971779\n", "created_at": "2011-05-16 04:34:04", "user": 789801, "id": 1171229}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6429\nCreated by **ReggieB** - 2011-02-14 09:04:23 UTC\n\nIt's easiest to use an example to explain the problem:\n\n```\nclass Articles\n  has_and_belongs_to_many categories\nend\n\nclass Category\n  has_and_belongs_to_many articles\nend\n\nc = Category.first\n\nc.articles.count\n=> 8   # Correct\n\nc.articles.limit(3).count\n=> 8   # Incorrect\n\nc.articles.find(:all, :limit => '3').count\n=> 3   # Correct\n```\n\nThe problem is that \"LIMIT 3\" is appended to the end of the SQL statement joining the two tables in the SQL generated by count:\n\n```\nSELECT COUNT(*) AS count_id FROM `articles` INNER JOIN\n`articles_categories` ON `articles`.id =\n`articles_categories`.article_id WHERE\n(`articles_categories`.category_id = 9 ) LIMIT 3\n```\n\nAs an example of a possible solution, this returns the correct count:\n\n```\nSELECT count(*) FROM (\n  SELECT  *\n  FROM `articles`\n  INNER JOIN `articles_categories` ON `articles`.id =\n`articles_categories`.article_id\n  WHERE (`articles_categories`.category_id = 9 )\n  LIMIT 6, 4) inner_table\n```\n\nMy system is Windows 7 with a MySQL 5.1 database\n", "labels": [], "number": 848, "updated_at": "2011-05-21 15:12:23", "user": 789801, "closed_at": "2011-05-21 15:12:23", "id": 904605, "title": "limit is ignored with has_and_belongs_to_many and count", "url": "https://api.github.com/repos/rails/rails/issues/848", "created_at": "2011-05-16 04:34:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171230", "text": "_Imported from Lighthouse._\nComment by **ReggieB** - 2011-02-14 09:11:36 UTC\n\nThe last SQL is:\n\n```\n\nSELECT count(*) FROM (\n  SELECT  *\n  FROM `articles`\n  INNER JOIN `articles_categories` ON `articles`.id =\n`articles_categories`.article_id\n  WHERE (`articles_categories`.category_id = 9 )\n  LIMIT 6, 4) inner_table\n\n```\n\nFor some reason the two \\* in the first two lines aren't appearing above\n", "created_at": "2011-05-16 04:34:10", "user": 789801, "id": 1171230}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171231", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2011-02-14 18:18:32 UTC\n\nThis doesn't seem like a Rails problem, this is MySQL behavior:\n\n```\n\nmysql> select count(*) from categories;\n+----------+\n| count(*) |\n+----------+\n|       13 | \n+----------+\n1 row in set (0.00 sec)\n\nmysql> select count(*) from categories limit 3;\n+----------+\n| count(*) |\n+----------+\n|       13 | \n+----------+\n1 row in set (0.00 sec)\n```\n\nI don't think Rails should try to \"fix\" this by doing creepy sub query stuff like this, but I'm wondering what the rest thinks. Maybe we can find a nicer solution?\n\nThanks for reporting, Reggie. :)\n", "created_at": "2011-05-16 04:34:11", "user": 789801, "id": 1171231}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171232", "text": "_Imported from Lighthouse._\nComment by **ReggieB** - 2011-02-15 11:26:08 UTC\n\nJeff,\n\nThe problem does occur within a simpler SQL query. However, it only seems to become an ActiveRecord issue if there is a join involved. For example\n\n```\nArticle.count\n=> 10 # Correct\n\nArticle.limit(3).count\n=> 3  # Also correct.\n```\n\nThe SQL generated by this statement is:\n\n```\nSELECT COUNT(*) AS count_id FROM (SELECT 1 FROM `categories` LIMIT 3) AS subquery\n```\n\nSo Rails is already using the sub-query technique for simpler relationships.\n\nThe LIMIT clause acts to limit the number of lines being output. As a simple count only has one output line, LIMIT appears to have no effect. However, compare the output from these three statements:\n\n```\n  SELECT count(*) FROM categories LIMIT 3 \n\n  SELECT count(*) FROM categories GROUP BY id\n\n  SELECT count(*) FROM categories GROUP BY id LIMIT 3\n```\n", "created_at": "2011-05-16 04:34:12", "user": 789801, "id": 1171232}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171233", "text": "_Imported from Lighthouse._\nComment by **x37v** - 2011-02-15 23:57:33 UTC\n\nI've attached a diff which contains a test i added to the active record tests.  This diff is from 3-0-stable\n\nbut basically:\n\nX.join(:y).where(condition).limit(2).count != X.find_by_sql(X.join(:y).where(condition).limit(2).to_sql).count\n", "created_at": "2011-05-16 04:34:14", "user": 789801, "id": 1171233}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171234", "text": "Attachments saved to Gist: http://gist.github.com/971780\n", "created_at": "2011-05-16 04:34:15", "user": 789801, "id": 1171234}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6432\nCreated by **alindeman** - 2011-02-14 22:06:10 UTC\n\nNot 100% sure if this should be considered a bug, but I found it a bit unexpected and it masked a bug in a project I was working:\n\n```\nruby-1.9.2-p136 :001 > \"\".constantize\n => Object \nruby-1.9.2-p136 :003 > \"\".constantize == ::Object\n => true\n```\n\nI expected an error, as if I had done:\n\n```\nruby-1.9.2-p136 :008 > Object.const_get(\"\")\nNameError: wrong constant name \n```\n", "labels": [], "number": 849, "updated_at": "2011-05-21 15:12:23", "user": 789801, "closed_at": "2011-05-21 15:12:23", "id": 904606, "title": "\"\".constantize returns Object", "url": "https://api.github.com/repos/rails/rails/issues/849", "created_at": "2011-05-16 04:34:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171235", "text": "_Imported from Lighthouse._\nComment by **alindeman** - 2011-02-15 05:00:27 UTC\n\nFirst try at a patch + test attached.\n", "created_at": "2011-05-16 04:34:21", "user": 789801, "id": 1171235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171236", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-02-15 06:29:30 UTC\n\nI'm still not sure this is a bug - the default receiver in global namespace is Object and the existing code does take into account the possibility of an empty names array. I'll ask Jeremy Kemper since he wrote the original code.\n", "created_at": "2011-05-16 04:34:22", "user": 789801, "id": 1171236}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171237", "text": "Attachments saved to Gist: http://gist.github.com/971781\n", "created_at": "2011-05-16 04:34:23", "user": 789801, "id": 1171237}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6436\nCreated by **Kurt Stephens** - 2011-02-15 21:10:41 UTC\n\nactionpack-3.0.3/lib/action_dispatch/http/request.rb:\n\n``` ruby\n    LOCALHOST = [/^127\\.0\\.0\\.\\d{1,3}$/, \"::1\", /^0:0:0:0:0:0:0:1(%.*)?$/].freeze\n```\n\nAll IPv4 127.x.x.x addresses are loopback/localhost addresses.  127.0.0.0 is a Class A /8 network.\n\nThis code should be:\n\n``` ruby\n    LOCALHOST = [/^127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/, \"::1\", /^0:0:0:0:0:0:0:1(%.*)?$/].freeze\n```\n\nNot sure if this issue exists elsewhere in Rails 3.\n\nCitations:\n\nhttp://www.faqs.org/rfcs/rfc1700.html: \"Special Addresses\"\n\n```\n  (g)   {127, <any>}\n     Internal host loopback address.  Should never appear outside\n     a host.\n```\n\nhttp://www.faqs.org/rfcs/rfc3330.html\n\n```\n 127.0.0.0/8 - This block is assigned for use as the Internet host\n   loopback address.  A datagram sent by a higher level protocol to an\n   address anywhere within this block should loop back inside the host.\n   This is ordinarily implemented using only 127.0.0.1/32 for loopback,\n   but no addresses within this block should ever appear on any network\n   anywhere [RFC1700, page 5].\n```\n\nifconfig lo:\n\n```\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n```\n", "labels": [], "number": 850, "updated_at": "2011-05-21 15:12:23", "user": 789801, "closed_at": "2011-05-21 15:12:23", "id": 904608, "title": "LOCALHOST: 127.x.x.x is Class A, not Class C", "url": "https://api.github.com/repos/rails/rails/issues/850", "created_at": "2011-05-16 04:34:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171238", "text": "_Imported from Lighthouse._\nComment by **Kurt Stephens** - 2011-02-15 21:47:58 UTC\n\nA naive search yields other potential errors/problems:\n\n```\nactionpack-3.0.3/lib/action_dispatch/http/request.rb:170:    TRUSTED_PROXIES = /^127\\.0\\.0\\.1$|^(10|172\\.(1[6-9]|2[0-9]|30|31)|192\\.168)\\./i\nactionpack-3.0.3/lib/action_dispatch/middleware/remote_ip.rb:41:      regex = '(^127\\.0\\.0\\.1$|^(10|172\\.(1[6-9]|2[0-9]|30|31)|192\\.168)\\.)'\n```\n", "created_at": "2011-05-16 04:34:29", "user": 789801, "id": 1171238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171239", "text": "_Imported from Lighthouse._\nComment by **Kurt Stephens** - 2011-02-17 00:21:15 UTC\n\nThe IPv6 portion of the regexp may also be in error.\n", "created_at": "2011-05-16 04:34:31", "user": 789801, "id": 1171239}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6438\nCreated by **banditj** - 2011-02-16 02:41:07 UTC\n\nhi,\n\nX-Forwarded-For headerfield isn't sanatized if the request comes from a class c network.\n\ni made a poc screencast that shows the bug with the latest rails version with devise and shows more possible attacks\n\nhttp://webservsec.blogspot.com/2011/02/ruby-on-rails-vulnerability.html\n\nquick-fix for internal web-apps:\ncheck request.remote_ip before you use it\n\nbest regards\nJ\n", "labels": [], "number": 851, "updated_at": "2011-10-04 21:45:45", "user": 789801, "closed_at": "2011-05-21 15:12:24", "id": 904609, "title": "rails security bug - request.remote_ip/X-Forwarded-For not sanitized", "url": "https://api.github.com/repos/rails/rails/issues/851", "created_at": "2011-05-16 04:34:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171240", "text": "_Imported from Lighthouse._\nComment by **Michael Koziarski** - 2011-02-16 22:22:14 UTC\n\nThe attack vectors they're talking about there assume no one does any sanitization.  SQL Injection, shell script exploits etc only apply if people don't check those inputs.\n\nThere's certainly a bug here, but it's not a security bug.\n", "created_at": "2011-05-16 04:34:38", "user": 789801, "id": 1171240}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171241", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-02-27 03:15:39 UTC\n\n[[bulk edit](http://rails.lighthouseapp.com/projects/8994/bulk_edits/43692)]\n", "created_at": "2011-05-16 04:34:39", "user": 789801, "id": 1171241}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171242", "text": "_Imported from Lighthouse._\nComment by **Christopher Meiklejohn** - 2011-03-03 04:23:15 UTC\n\nIs the issue here just that the input isn't validated as an actual IP address?\n", "created_at": "2011-05-16 04:34:41", "user": 789801, "id": 1171242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171243", "text": "_Imported from Lighthouse._\nComment by **alindeman** - 2011-03-26 15:19:46 UTC\n\nI'd be happy to help fix this, but there are a existing few tests that make me wonder what the expected behavior is:\n\n```\nrequest = stub_request 'HTTP_X_FORWARDED_FOR' => 'unknown,192.168.0.1'\nassert_equal 'unknown', request.remote_ip\n```\n\nAs the tests are written, it seems like returning a string (non-IP) was thought about.  What's the expected behavior here then?\n", "created_at": "2011-05-16 04:34:42", "user": 789801, "id": 1171243}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2291794", "text": "While this issue does not appear easily exploited as a cross-site scripting (XSS) vulnerability in a traditional manner (the X-Forwarded-For header cannot easily be injected through a malicious URL/web page triggering the request to the vulnerable Ruby on Rails app) it would be good to see the IP address verified as such (e.g. \"0-255.0-255.0-255.0-255\"). Will this issue be addressed as it still appears to be in Ruby on Rails 3.0.10?\n", "created_at": "2011-10-04 21:45:45", "user": 1103135, "id": 2291794}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6440\nCreated by **Bruno Pinto** - 2011-02-16 02:52:57 UTC\n\nAfter upgrading Rails to version 2.3.11 I started receiving this error after calling reset_session:\n\n```\n Backtrace:\n\n  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/request.rb:449:in 'reset_session'\n  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/base.rb:1244:in 'reset_session_without_flash'\n  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/flash.rb:159:in 'reset_session'\n```\n\nMy first reaction was to google for a solution when I couldn't I came here and looked for related tickets and I manage to find this one:\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/4938-patch-session-fixes-sessions-should-not-be-created-until-written-to-and-session-data-should-be-destroyed-on-session-reset\n\nI was digging (read: trying to) for the answer and perharps for an acceptable patch but I couldn't. This was the best I could do (correct me if I'm wrong):\n\nAt first, sessions were created on each request but it was harming performance so they decided to lazy it and then ActionController::Session::AbstractStore::SessionHash was created. It extends the normal Hash class but it's extended with some methods including 'destroy' which is responsible for the error I am receiving.\n\nFor a reason I don't know, when a request is created or reseted, it's content is an empty normal Hash. It's only changed to a SessionHash farther when the method call is called from an AbstractStore instance.\nI don't know why the creation still sets a normal hash to the session variable and not a SessionHash however I made a 'patch' without breaking tests and without changing this behavior.\n\n```\n./actionpack/lib/action_controller/session/abstract_store.rb (original):\n\n  def session\n    @env['rack.session'] ||= {}\n  end\n\n  def reset_session\n    session.destroy if session\n    self.session = {}\n  end\n```\n\n```\n./actionpack/lib/action_controller/session/abstract_store.rb (patch?):\n\n  def session\n    @env['rack.session'] ||= {}\n  end\n\n  def reset_session\n    session.destroy if session && session.is_a?(ActionController::Session::AbstractStore::SessionHash)\n    self.session = {}\n  end\n```\n\nHope it helps, and please correct me when I'm wrong.\n", "labels": [], "number": 852, "updated_at": "2011-05-21 15:12:24", "user": 789801, "closed_at": "2011-05-21 15:12:24", "id": 904610, "title": "Session Reset undefined method `destroy' for {}:Hash", "url": "https://api.github.com/repos/rails/rails/issues/852", "created_at": "2011-05-16 04:34:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171244", "text": "_Imported from Lighthouse._\nComment by **Rob Di Marco** - 2011-03-01 04:04:47 UTC\n\nI submitted a pull request that includes a unit test that illustrates the problem and a patch to fix the destroy method at https://github.com/rails/rails/pull/198\n\nWhile this is waiting to be fixed in the main tree, I have monkey patched the reset_session method like so\n\n```\n# file config/initializers/rails_6440_patch.rb\nActionController::Request.class_eval do\n    def reset_session\n      # session may be a hash, if so, we do not want to call destroy\n      # fixes issue 6440\n      session.destroy if session and session.respond_to?(:destroy)\n      self.session = {}\n    end\nend\n```\n", "created_at": "2011-05-16 04:34:49", "user": 789801, "id": 1171244}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171245", "text": "_Imported from Lighthouse._\nComment by **tiegz** - 2011-04-01 17:41:27 UTC\n\nHaving the same issue, +1! \n\nRelated, it looks like you might have seen this similar issue in master and augmented your solution to match?\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/5634-reset_session-in-action_dispatchhttprequestrb-failing-in-test-mode\n", "created_at": "2011-05-16 04:34:50", "user": 789801, "id": 1171245}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6441\nCreated by **Russell Garner** - 2011-02-16 11:03:24 UTC\n\nIf I have a class hierarchy `ContactIndex < Index`, `GuideIndex < Index`, where `Index` is\n\n``` ruby\n  class Index < ActiveRecord::Base\n    has_many :links, :as => :link_owner, :dependent => :delete_all\n  end\n```\n\nand `Link` is\n\n``` ruby\n  class Link < ActiveRecord::Base\n    belongs_to :link_owner, :polymorphic => true\n  end\n```\n\nWhen I instantiate and save a `GuideIndex`, the `links` table gets a row with a `link_owner_type` of `Index`.  When I subsequently delete the index, the `links` rows are orphaned:\n\n``` ruby\n  i = GuideIndex.new\n  i << Link.new(:url => 'http://somewhere')\n  i.save    # This creates links row with link_owner_type = 'Index'\n  i.destroy # This tries to delete rows with link_owner_type = 'GuideIndex' and finds no rows\n```\n\nAt present, my workaround is this:\n\n``` ruby\n  class Index < ActiveRecord::Base\n    has_many :links, :as => :link_owner\n    before_destroy :delete_links\n\n  private\n    def delete_links\n      Link.delete_all ['links.link_owner_id = ? AND links.link_owner_type = ?', self.id, 'Index']\n    end\n  end\n```\n", "labels": [], "number": 853, "updated_at": "2011-05-21 15:12:25", "user": 789801, "closed_at": "2011-05-21 15:12:24", "id": 904612, "title": "polymorphic :dependent => :delete_all fails to delete rows with abstract_class instances", "url": "https://api.github.com/repos/rails/rails/issues/853", "created_at": "2011-05-16 04:34:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171246", "text": "_Imported from Lighthouse._\nComment by **Russell Garner** - 2011-02-16 11:20:30 UTC\n\n(oops - `abstract_class` is not involved here - the title should read STI.  Sorry!)\n", "created_at": "2011-05-16 04:34:58", "user": 789801, "id": 1171246}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6446\nCreated by **Raymond Gao** - 2011-02-18 10:10:47 UTC\n\nHi, I am building a GEM for retrieving data from Salesforce Force.com using REST API. \nMy class inherits from the ActiveResource::Base class. However, we I tried to make a Salesforce::UserRest.find(:all) call, the ActiveResource fails and complains about 'collect!' as an invalid method.\n\nApparently, in the 'ActiveResource::Base' file, the line#885 of 3.0.4 version release is the culprit for failure. \"collect!\" is a valid method for Array. But, when you have a Hash object as the result of a REST call, it breaks the GEM, because 'collect!' is not a valid method for the Hash class.\n\nSee this:\n        def instantiate_collection(collection, prefix_options = {})\n          collection.collect! { |record| instantiate_record(record, prefix_options) }    #This is the problem line.\n        end\n\nCan someone please fix this?\nThanks,\n", "labels": [], "number": 854, "updated_at": "2011-05-21 15:12:25", "user": 789801, "closed_at": "2011-05-21 15:12:25", "id": 904613, "title": "ActiveResource::Base class is defective", "url": "https://api.github.com/repos/rails/rails/issues/854", "created_at": "2011-05-16 04:35:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6449\nCreated by **Stephan Kaag** - 2011-02-26 12:10:12 UTC\n\n```\nclass Order < ActiveRecord::Base\n  has_many :order_items, :inverse_of => :order\n  accepts_nested_attributes_for :order_items\nend\n\nclass OrderItem < ActiveRecord::Base\n  belongs_to :order, :inverse_of => :order_items\n  accepts_nested_attributes_for :order\nend\n\n> order = Order.new\n => #<Order id: nil, created_at: nil, updated_at: nil> \n> order_item = OrderItem.new\n => #<OrderItem id: nil, order_id: nil, created_at: nil, updated_at: nil> \n> order.order_items << order_item\n => [#<OrderItem id: nil, order_id: nil, created_at: nil, updated_at: nil>] \n> order.valid?\nSystemStackError: stack level too deep\n```\n", "labels": [], "number": 855, "updated_at": "2011-05-21 15:12:25", "user": 789801, "closed_at": "2011-05-21 15:12:25", "id": 904615, "title": "Use accepts_nested_attributes_for with inverse_of cause infinite loop", "url": "https://api.github.com/repos/rails/rails/issues/855", "created_at": "2011-05-16 04:35:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171247", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2011-02-26 12:35:31 UTC\n\nHi Stefan,\n\nI cleaned up your code block. Be sure to use a break after the starting the block with `````:\n\n```\n```\n\n # code goes here\n\n```\n```\n", "created_at": "2011-05-16 04:35:11", "user": 789801, "id": 1171247}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171248", "text": "_Imported from Lighthouse._\nComment by **pechorin-andrey** - 2011-04-26 14:28:35 UTC\n\nsame error on 3.0.7 with 1.8.7 mri\n", "created_at": "2011-05-16 04:35:12", "user": 789801, "id": 1171248}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6452\nCreated by **≈Åukasz Bandzarewicz** - 2011-02-18 17:55:02 UTC\n\nI've added a small improvement to the validation errors processing.\nIt allows to pass the validated record to the proc for generating a custom error message. For instance we could use it this way:\n\n``` ruby\nclass Subscription < ActiveRecord::Base\n\n  validates :city, :presence => true\n  validates_uniqueness_of :email, :scope => [:city_id], \n    :message => proc { |s| \"You're already subscribed to #{city.name}\" }\n\nend\n```\n", "labels": [], "number": 856, "updated_at": "2016-03-08 16:29:40", "user": 789801, "closed_at": "2011-05-21 15:12:25", "id": 904617, "title": "Pass validated record to the custom message proc", "url": "https://api.github.com/repos/rails/rails/issues/856", "created_at": "2011-05-16 04:35:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171249", "text": "Attachments saved to Gist: http://gist.github.com/971782\n", "created_at": "2011-05-16 04:35:19", "user": 789801, "id": 1171249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5204748", "text": "We should reopen this issue because I needed some function like this to customize the error message for the model.\n", "created_at": "2012-04-18 18:01:29", "user": 1273717, "id": 5204748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/193850694", "text": "we'd like this too!\n", "created_at": "2016-03-08 16:29:40", "user": 30216, "id": 193850694}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6454\nCreated by **habermann24** - 2011-02-19 17:15:27 UTC\n\nSay there is the following model with a database column 'reference_id' (of type string).\n\n```\n\nclass Post < ActiveRecord::Base\n\n  def reference_id\n    if self.new_record?\n      return \"test\"\n    else\n      return self[:reference_id]\n    end\n  end\n\nend\n\n```\n\nSomewhere in the form one would do:\n\n```\n\nbuilder.text_field :subject\n\n```\n\nIn Rails 3.0.0 the behaviour was that when i render \"new\" with a new record assigned, the text_field would get the value \"test\" (because that is what the method returns).\n\nNow the text_field will be empty. Rails probably just reads the attribute (which is still nil) and doesn't call the method to fill out the value.\n\nI used that technique to provide my own attribute methods for default values etc. Now i always have to provide \":value => @post.reference_id\" to the text_field, so that i get the same result.\n\nIs this supposed to be the new behaviour? Or was that an unintentional change / bug?\n\nI hope this example is clear enough!\n", "labels": [], "number": 857, "updated_at": "2011-05-21 15:12:25", "user": 789801, "closed_at": "2011-05-21 15:12:25", "id": 904618, "title": "Custom methods' return values won't apply on form helper like text_field!", "url": "https://api.github.com/repos/rails/rails/issues/857", "created_at": "2011-05-16 04:35:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6456\nCreated by **Ludo van den Boom** - 2011-02-20 12:04:27 UTC\n\nThe current to_xml behavior is incorrect. It singularizes already singular association names, resulting in xml that does not represent the original models/associations. Attached patch fixes this.\n## Steps to reproduce\n\nSay we have the following models:\n\n``` ruby\nclass Address < ActiveRecord::Base; belongs_to :person; end\nclass Person < ActiveRecord::Base; has_one :address; end\n```\n\nNow, in Rails console, find a Person and do:\n\n``` ruby\n> @person.to_xml(:skip_instruct => true, :include => :address)\n```\n\nCurrent to_xml result (Rails 3.0.4):\n\n``` xml\n<person>\n  <id type=\"integer\">1</id>\n  <addres>\n    <id type=\"integer\">1</id>\n  </addres>\n</person>\n```\n\nAfter applying patch:\n\n``` xml\n<person>\n  <id type=\"integer\">1</id>\n  <address>\n    <id type=\"integer\">1</id>\n  </address>\n</person>\n```\n\n(notice the difference in the spelling of 'address')\n", "labels": [], "number": 858, "updated_at": "2012-02-14 21:16:52", "user": 789801, "closed_at": "2011-05-21 15:12:25", "id": 904619, "title": "ActiveRecord's XmlSerializer should not singularize already singular association names", "url": "https://api.github.com/repos/rails/rails/issues/858", "created_at": "2011-05-16 04:35:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171250", "text": "Attachments saved to Gist: http://gist.github.com/971783\n", "created_at": "2011-05-16 04:35:31", "user": 789801, "id": 1171250}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3969806", "text": "I am far from being a Rails guru, but is appears adding something like \n\n``` ruby\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.singular /^(.*)ess/i, '\\1ess'\nend\n```\n\nto an initializer it would resolve the problem.\n", "created_at": "2012-02-14 21:16:52", "user": 855290, "id": 3969806}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6457\nCreated by **SooDesuNe** - 2011-02-21 05:38:09 UTC\n\nin #table_exists? the SQL to determine if the table exists is:\n\n```\n    query(<<-SQL).first[0].to_i > 0\n        SELECT COUNT(*)\n        FROM pg_tables\n        WHERE tablename = '#{table.gsub(/(^\"|\"$)/,'')}'\n        #{schema ? \"AND schemaname = '#{schema}'\" : ''}\n```\n\nthis finds all tables in the database, regardless of whether or not they are in the current schema search path.  #table_exists? is frequently used to determine if tables should/can be dropped (as in `active_record/connection_adapters/abstract/schema_statements.rb #create_table`).\n\nPostgres will not let you drop a table that's not in your current search path. `PGError: ERROR:  relation does not exist` is raised.\n\nI believe #table_exists? should return false if the table is not in the current search path.\n", "labels": [], "number": 859, "updated_at": "2011-05-21 15:12:26", "user": 789801, "closed_at": "2011-05-21 15:12:26", "id": 904620, "title": "disregard for schema search path in postgresql_adapter.rb", "url": "https://api.github.com/repos/rails/rails/issues/859", "created_at": "2011-05-16 04:35:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171251", "text": "_Imported from Lighthouse._\nComment by **SooDesuNe** - 2011-02-26 21:11:54 UTC\n\nOne possible solution looks like:\n\n```\n    # `AND schemaname = ANY (current_schemas(false))` added so only tables in the current search path are included\n    query(<<-SQL).first[0].to_i > 0\n        SELECT COUNT(*)\n        FROM pg_tables\n        WHERE tablename = '#{table.gsub(/(^\"|\"$)/,'')}'\n        #{schema ? \"AND schemaname = '#{schema}'\" : ''}\n        AND schemaname = ANY (current_schemas(false))\n    SQL\n```\n", "created_at": "2011-05-16 04:35:37", "user": 789801, "id": 1171251}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6458\nCreated by **Roel van der Hoorn** - 2011-02-21 10:36:42 UTC\n\nSome web crawlers use the `\"text/*\"` MIME type in the HTTP ACCEPT header in their request. This makes Rails throw a MissingTemplate error.\n\nThis ticket covers only the part that `\"text/*\"` should return any text type (e.g. `text/html`, `text/plain`). And `\"image/*\"` any image type for that matter.\n\nNote that this issue is not the same as #5113, which covers the MissingTemplate part, instead of returning a 406 (Not Acceptable), if the HTTP ACCEPT header requests only MIME types for which the respond_to block does not have an adequate response.\n", "labels": [], "number": 860, "updated_at": "2013-11-01 11:42:19", "user": 789801, "closed_at": "2011-05-21 15:12:26", "id": 904621, "title": "Rails does not recognize the \"text/*\" MIME type", "url": "https://api.github.com/repos/rails/rails/issues/860", "created_at": "2011-05-16 04:35:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171252", "text": "_Imported from Lighthouse._\nComment by **Anton Astashov** - 2011-03-03 04:59:52 UTC\n\nAgreed, e.g. Bing Bot uses Accept: text/*, and every its request raises ActionView::MissingTemplate exception in our app.\n", "created_at": "2011-05-16 04:35:44", "user": 789801, "id": 1171252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171253", "text": "_Imported from Lighthouse._\nComment by **Diego Carrion** - 2011-03-05 23:10:30 UTC\n\nThis seems to be fixed on edge.\n", "created_at": "2011-05-16 04:35:45", "user": 789801, "id": 1171253}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3106078", "text": "The recent version happened again. 3.2 beta\n\ncould you show me the fixing code?\n", "created_at": "2011-12-12 13:49:50", "user": 39321, "id": 3106078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3836710", "text": "@hlxwell - I see the fixing commits here ranging from Nov 22, 2010 to Nov 28, 2010: https://github.com/rails/rails/commits/master/actionpack/lib/action_dispatch/http/mime_type.rb, notably:\n- 6f6e754bac4c78f657feb0ea119447546aa87197\n- 18adbe9347727dc3eefe46395d52aafa347a0c73\n\nFor anyone else using an earlier version of Rails that wants this fixed, but can't upgrade just yet, I have posted a monkey-patch with some test cases that you can use to work around this:\n\n  https://gist.github.com/1754727\n", "created_at": "2012-02-06 20:57:22", "user": 91148, "id": 3836710}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3841044", "text": "One question is:\n\n@synonyms of Mime::ALL is blank, still works?\n\nree-1.8.7-2011.03 :001 > Mime::ALL\n => #<Mime::Type:0x106424710 @synonyms=[], @symbol=:all, @string=\"*/*\"> \nree-1.8.7-2011.03 :002 > Mime::HTML\n => #<Mime::Type:0x1064267e0 @synonyms=[\"application/xhtml+xml\"], @symbol=:html, @string=\"text/html\"> \n\n> if Rails.version == \"3.0.7\"\n\nI am using 3.0.11 still has this error. maybe below 3.1?\n", "created_at": "2012-02-07 02:00:51", "user": 39321, "id": 3841044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3841102", "text": "It looks like your pasted code omitted the `#<Mime::Type...>` stuff. Can you try pasting it in a code block or using a gist? I am curious to see what you have. Here is what mine looks like:\n\n```\n1.8.7 :001 > Mime::ALL\n => #<Mime::Type:0x102736970 @string=\"*/*\", @synonyms=[], @symbol=:all> \n1.8.7 :002 > Mime::HTML\n => #<Mime::Type:0x10273ab88 @string=\"text/html\", @synonyms=[\"application/xhtml+xml\"], @symbol=:html>\n```\n\nI don't think this patch changes that behavior.\n", "created_at": "2012-02-07 02:07:24", "user": 91148, "id": 3841102}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6459\nCreated by **GSnyder** - 2011-02-21 19:10:43 UTC\n\nArel::Crud::update silently fails to propagate OFFSET clauses to the update manager, probably because common SQL dialects do not support OFFSET in UPDATEs.\n\nFor example, the following code \n\n``` ruby\n    relation = Thing.order(\"freshness ASC\").offset(20).limit(10)\n    relation.update_all([\"broken = ?\", true])\n```\n\nexecutes as \"UPDATE things SET broken = 1 ORDER BY freshness ASC LIMIT 10\". \n\nThe bug (I would claim) is that the bogus update attempt is not detected and rejected. Instead, erroneous SQL is emitted and allowed to corrupt the database by updating random records.\n\nAR shouldn't try to protect programmers from every possible manifestation of their own folly. However, in this case, Arel is actually partially responsible for _creating_ the problem: it turns an invalid request into a valid-but-inaccurate SQL statement. Better to pass the OFFSET along and let the database choke on the invalid query syntax.\n\nI'm using MySQL, but it looks like Postgres does not even allow LIMIT in updates. I would be curious to know what happens when the example above is run against Postgres.\n", "labels": [], "number": 861, "updated_at": "2011-05-21 15:12:26", "user": 789801, "closed_at": "2011-05-21 15:12:26", "id": 904623, "title": "Arel update method silently drops OFFSET clause", "url": "https://api.github.com/repos/rails/rails/issues/861", "created_at": "2011-05-16 04:35:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171254", "text": "_Imported from Lighthouse._\nComment by **Hugo Peixoto** - 2011-03-06 01:54:37 UTC\n\nIn postgresql, that query gets converted to the something like the following:\n\n```\nUPDATE things SET broken = 1 WHERE id IN (SELECT id FROM things ORDER BY freshness ASC LIMIT 10)\n```\n\nThe OFFSET clause is ignored independently of the RDBMS. I made a patch that fixes this by converting the query to the following:\n\n```\nUPDATE things SET broken = 1 WHERE id IN (SELECT id FROM things ORDER BY freshness ASC LIMIT 10 OFFSET 20)\n```\n\nUnfortunately, this is invalid in MySQL, as it doesn't support LIMIT/OFFSET in subqueries. One possible work-around (http://forums.mysql.com/read.php?86,14788,239000#msg-239000) is to create the following query:\n\n```\nUPDATE things SET broken = 1 WHERE id IN (SELECT id FROM (SELECT id FROM things ORDER BY freshness ASC LIMIT 10 OFFSET 20) alias)\n```\n\nThe patch I'm uploading does both. The first commit adds the ability to specify an OFFSET clause in an UPDATE statement, while the second commit adds this workaround so that it works in MySQL too.\n\nComments on this are welcome.\n", "created_at": "2011-05-16 04:35:53", "user": 789801, "id": 1171254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171255", "text": "_Imported from Lighthouse._\nComment by **Hugo Peixoto** - 2011-03-06 11:01:50 UTC\n\nThe previous patch had a problem. The WHERE conditions should not be in the parent UPDATE statement, but in the subselect one. This is related to [Bug #6058](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6058-update_all-ignores-conditions-when-orders-and-limit-options-are-supplied#ticket-6058-8).\n\nThe patch I'm attaching now removes the WHERE conditions from the UPDATE statement. As there is a bug regarding the where clauses propagation, the patch in the aforementioned ticket should also be applied.\n", "created_at": "2011-05-16 04:35:54", "user": 789801, "id": 1171255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171256", "text": "Attachments saved to Gist: http://gist.github.com/971784\n", "created_at": "2011-05-16 04:35:56", "user": 789801, "id": 1171256}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6461\nCreated by **Aaron Gough** - 2011-02-22 18:33:34 UTC\n\nWhen using a find_or_create_by method with multiple attributes through an association, the hash of attributes is incorrectly assigned to the attribute you are finding on:\n\n```\nParentModel.first.child_models.find_or_create_by_attribute_1(:attribute_1 => \"test1\", :attribute_2 => \"test2\")\n\n#=> #<ChildModel id: 1, attribute_1: {:attribute_1=>\"test1\", :attribute_2=>\"test2\"}, attribute_2: nil, parent_model_id: 1, created_at: \"2011-02-22 17:54:33\", updated_at: \"2011-02-22 17:54:33\">\n```\n\nThe same find_or_create_by method works correctly when not going through the association:\n\n```\nChildModel.find_or_create_by_attribute_1(:attribute_1 => \"test3\", :attribute_2 => \"test5\")\n\n#=> #<ChildModel id: 2, attribute_1: \"test3\", attribute_2: \"test5\", parent_model_id: nil, created_at: \"2011-02-22 17:57:36\", updated_at: \"2011-02-22 17:57:36\">\n```\n\n**Steps to reproduce:**\n\n```\n> rails _2.3.11_ test\n> cd test\n> script/generate model ParentModel\n> script/generate model ChildModel attribute_1:string attribute_2:string parent_model:references\n> rake db:create\n> rake db:migrate\n```\n\n``` ruby\n# app/models/parent_model.rb\nclass ParentModel < ActiveRecord::Base\n  has_many :child_models\nend\n```\n\n``` ruby\n# app/models/child_model.rb\nclass ChildModel < ActiveRecord::Base\n  belongs_to :parent_model\nend\n```\n\nThen run the following:\n\n```\n> script/console\nruby-1.8.7-p330> ParentModel.create\nruby-1.8.7-p330> ParentModel.first.child_models.find_or_create_by_attribute_1(:attribute_1 => \"test1\", :attribute_2 => \"test2\")\n```\n\nI have confirmed that this behaviour was not happening in Rails 2.3.4, but I haven't narrowed down the version more than that yet...\n", "labels": [], "number": 862, "updated_at": "2011-05-21 15:12:27", "user": 789801, "closed_at": "2011-05-21 15:12:26", "id": 904624, "title": "find_or_create_by behaves incorrectly when used with multiple attributes through has_many association", "url": "https://api.github.com/repos/rails/rails/issues/862", "created_at": "2011-05-16 04:36:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6463\nCreated by **judearasu (at gmail)** - 2011-02-24 00:42:55 UTC\n\nIn Active record  readme.rdoc  **Learn more** is having invalid urls pointing to 404 github error page.whether we can map it to api.rubyonrails.org  or not ?\n\nFor example, Automated mapping between classes and tables, attributes and columns.\n\n {Learn more}[link:classes/ActiveRecord/Base.html]\n\nLet the url be mapped to http://api.rubyonrails.org/classes/ActiveRecord/Base.html\n\nPlease let us know\n", "labels": [], "number": 863, "updated_at": "2011-05-16 14:49:36", "user": 789801, "closed_at": "2011-05-16 14:49:36", "id": 904625, "title": "Invalid url's in activerecore RDOc", "url": "https://api.github.com/repos/rails/rails/issues/863", "created_at": "2011-05-16 04:36:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1173745", "text": "@AquaGeek Hey! I fixed the title of this issue in LH long ago. But that doesn't seem to have reflected here. Any ideas why? Would be interesting to know.\n", "created_at": "2011-05-16 14:45:31", "user": 146214, "id": 1173745}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1173756", "text": "The issue is invalid since the urls are meant to be used in RDoc and not on GitHub. This can be closed @josevalim\n", "created_at": "2011-05-16 14:46:46", "user": 146214, "id": 1173756}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6464\nCreated by **Robin Wunderlin** - 2011-02-24 12:54:19 UTC\n\nThere is a different behaviour for \"find_or_create_by\" and \"find_by\".\n\nIf I use \"EventTrack.find_by_profile_id_and_event(5)\" it will execute the SQL statement:\n\n``` sql\nSELECT \"event_tracks\".* FROM \"event_tracks\" WHERE \"event_tracks\".\"event\" IS NULL AND \"event_tracks\".\"profile_id\" = 5 LIMIT 1\n```\n\nBut if I call the method \"EventTrack.find_or_create_by_profile_id_and_event(5)\" it will execute the SQL statement:\n\n``` sql\nSELECT \"event_tracks\".* FROM \"event_tracks\" WHERE \"event_tracks\".\"profile_id\" = 5 LIMIT 1\n```\n\nI would expect that the WHERE cause of both SQL statements would be \n\n``` sql\nWHERE \"event_tracks\".\"event\" IS NULL AND \"event_tracks\".\"profile_id\" = 5 LIMIT 1\n```\n", "labels": [], "number": 864, "updated_at": "2011-05-21 15:12:27", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904626, "title": "Diffrent behaviour for find_or_create_by and find_by", "url": "https://api.github.com/repos/rails/rails/issues/864", "created_at": "2011-05-16 04:36:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6466\nCreated by **Bente Pieck** - 2011-02-24 16:15:21 UTC\n\nRunning rails 3.0.4\nMy modelstructure is something like:\n\n```\nclass Domain < ActiveRecord::Base\n  has_many :domain_server_connectors, :dependent => :destroy\n  has_many :servers, :through => :domain_server_connectors\nend\n\nclass Server < ActiveRecord::Base\n  has_many :domain_server_connectors, :dependent => :destroy\n  has_many :domains, :through => :domain_server_connectors\nend\n\nclass DomainServerConnector < ActiveRecord::Base\n  belongs_to :domain\n  belongs_to :server\n  before_save :create_something\n  before_destroy :destroy_something\nend\n```\n\nif I use\n@domain.servers << server :create_something will be triggered\n\n@domain.servers.delete server\nthe domain_server_connector between is deleted, but the before_destroy callback :destroy_something is not triggered\nthe same with @domain.server_ids = \nAll new ids will trigger :create_something, all missing ids won't trigger :destroy_something (but domain_server_connector will be deleted correctly)\n\nif I use\n@domain.domain_server_connectors.delete DomainServerConnector.find_by_domain_id_and_server_id(@domain.id, server.id)\nthe callback is triggered.\n\nI think it should be triggered in both cases, like the before_save-callback is triggered.\n", "labels": [], "number": 865, "updated_at": "2013-06-27 22:05:43", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904627, "title": "has_many :through, before_destroy is not triggered", "url": "https://api.github.com/repos/rails/rails/issues/865", "created_at": "2011-05-16 04:36:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20158346", "text": "Ran into this issue though it was documented.\n\nWhat is the reason has_many :through must use 'delete' and not 'destroy'?\n", "created_at": "2013-06-27 22:05:43", "user": 77445, "id": 20158346}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6467\nCreated by **Chris Baker** - 2011-02-25 00:45:46 UTC\n\nThis patch creates a range validator for active model. In the simplest case, it validates that a field is a range, e.g.\n\n  validates :field, :range => true\n\nIt is also capable of validating that the range does or does not overlap with other ranges in other models, e.g.\n\n  validates :field, :range => { :not_overlapping => Proc.new{ |record| record.other_records } }\n  validates :field, :range => { :overlapping => :other_records }\n\nI provided some more examples of usage on the github page where I maintain this code as a gem: https://github.com/chrisb87/range_validator\n", "labels": [], "number": 866, "updated_at": "2011-05-21 15:12:27", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904628, "title": "active model range validator", "url": "https://api.github.com/repos/rails/rails/issues/866", "created_at": "2011-05-16 04:36:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171258", "text": "Attachments saved to Gist: http://gist.github.com/971785\n", "created_at": "2011-05-16 04:36:25", "user": 789801, "id": 1171258}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6468\nCreated by **groe** - 2011-02-25 11:17:44 UTC\n\nHello,\n\nI guess this is an unexpected behaviour or even a bug.\n# Calling\n\nModel1.find(1, :lock => true)\nModel1.find(1, :lock => true)\n# results in\n\nModel1 Load (0.2ms)  SELECT `model1`.\\* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE\nCACHE (0.0ms)  SELECT `model1`.\\* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE\n# and calling\n\nfoo = Model1.find(1)\nfoo.lock!\nfoo.lock!\n# results in\n\nModel1 Load (0.2ms)  SELECT `model1`.\\* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1\nModel1 Load (0.3ms)  SELECT `model1`.\\* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE\nCACHE (0.0ms)  SELECT `model1`.\\* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE\n\nIMO queries containing \"FOR UPDATE\" should never get cached by the ActiveRecord query cache, because that way the database doesn¬¥t even notice the row lock request.\n\nCan be fixed manually by wrapping calls of \"lock!\" in Model1.uncached-blocks. But IMO this should be automatically handled by ActiveRecord, am I wrong?\n\nRegards\n", "labels": [], "number": 867, "updated_at": "2012-07-06 14:48:50", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904629, "title": "Caching of Exclusive Row Lock Requests by ActiveRecord", "url": "https://api.github.com/repos/rails/rails/issues/867", "created_at": "2011-05-16 04:36:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171259", "text": "_Imported from Lighthouse._\nComment by **groe** - 2011-02-25 12:01:50 UTC\n\nMy temporary fix:\n\n# config/lock_caching.rb\n\n```\nclass ActiveRecord::Base\n  def lock!(lock=true)\n    self.class.uncached do\n      self.reload(:lock => lock) unless new_record?\n    end\n    self\n  end\nend\n```\n\nThis disables caching of lock requests when calling \"lock!\" but does not handle arguments like {:lock => true} or {:lock => \"FOR UPDATE\"}. So is there a better way to fix this?\n", "created_at": "2011-05-16 04:36:30", "user": 789801, "id": 1171259}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1589816", "text": "Why was this closed? No one else experiencing this isssue?\n", "created_at": "2011-07-17 11:41:28", "user": 515293, "id": 1589816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6774461", "text": "Please reopen this issue, the unexpected behavior is still present.\n\nThis is a very important issue that needs to be addressed either by special-casing query cache for exclusive lock, or by significantly improving documentation with a very salient warning.\n\nAs the OP suggested, `FOR UPDATE` queries should never be cached because they need to reach DB always. Wrapping everything in the `#uncached` block may introduce performance problems, but is still better than wasting few days to understand why a lock doesn't fix race condition.\n\nIf anyone is interested, I pushed [a simplistic app that reproduces this issue](https://github.com/sidonath/bug-repro-lock-failure).\n", "created_at": "2012-07-05 09:18:03", "user": 15397, "id": 6774461}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6787729", "text": "/cc @tenderlove @josh\n", "created_at": "2012-07-05 19:10:08", "user": 6097, "id": 6787729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6806352", "text": "merged! 717aa92dd3f75dec04652940d5571ab34a2f79c3 /cc @groe \n", "created_at": "2012-07-06 14:26:36", "user": 6097, "id": 6806352}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6806429", "text": "Woohoo, nice! I did not expect that anymore :)\n\nThanks!\n", "created_at": "2012-07-06 14:29:46", "user": 515293, "id": 6806429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6806955", "text": "Thank you @rafaelfranca !\n", "created_at": "2012-07-06 14:48:50", "user": 6097, "id": 6806955}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6469\nCreated by **Kirill Lazarev** - 2011-02-25 13:56:05 UTC\n## Environment\n\nRuby: 1.9.2-p136\nRails: 3.0.4\n## Situation\n\nCreate project with STI for Users and inherit one type of User (Support) to another types (Administrator, Employee)\n## Models\n\n``` ruby\n#app/models/user.rb\nclass User < ActiveRecord::Base\nend\n\n#app/models/support.rb\nclass Support < User\nend\n\n#app/models/administrator.rb\nclass Administrator < Support\nend\n\n#app/models/employee.rb\nclass Employee < Support\nend\n```\n## Migration\n\n``` ruby\n#db/migrate/20110225123900_create_users.rb\nclass CreateUsers < ActiveRecord::Migration\n  def self.up\n    create_table :users do |t|\n      t.string :type\n    end\n  end\n\n  def self.down\n    drop_table :users\n  end\nend\n```\n# Console\n\nCreate instances of Administrator and Employee:\n\n``` ruby\n> Administrator.create\n> Employee.create\n```\n\nNow get them(Support's users) using Support.all.\n\n``` ruby\n> Support.all\n=> [#<Administrator id: 1, type: \"Administrator\">, #<Employee id: 2, type: \"Employee\">]\n```\n\nNow we reload environment and check Support.all again. And get this bug!\n\n``` ruby\n> reload!\n> Support.all\n=> []\n```\n## Difference in SQL command\n\nBefore reload!\n\n``` sql\nSELECT `users`.* FROM `users` WHERE (((`users`.`type` = 'Support' OR `users`.`type` = 'Administrator') OR `users`.`type` = 'Employee')\n```\n\nAfter reload!\n\n``` sql\nSELECT `users`.* FROM `users` WHERE (`users`.`type` = 'Support')\n```\n## Workaround\n\nWe can temporary repair it by using before method #all for parent class User:\n\n``` ruby\n> User.all\n=> [#<Administrator id: 1, type: \"Administrator\">, #<Employee id: 2, type: \"Employee\">]\n> Support.all\n=> [#<Administrator id: 1, type: \"Administrator\">, #<Employee id: 2, type: \"Employee\">]\n```\n", "labels": [], "number": 868, "updated_at": "2013-01-02 17:32:25", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904631, "title": "STI, inheritance and reload! bug", "url": "https://api.github.com/repos/rails/rails/issues/868", "created_at": "2011-05-16 04:36:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6470\nCreated by **Franck** - 2011-02-25 15:37:10 UTC\n\nI run into a problem when I submit a form with a text field and a filename of an uploaded file both containing special chars.\n\nTracking down the issue it seems that while ActionDispatch force the encoding of all string paramaters to UTF-8 (see ActionDispatch::Http:Parameters encode_params private method), it does not do at to the filename of the uploaded file.\n\nparams is then filled with two different encoding (UTF-8 and ASCII-8BIT) causing an Encoding::CompatibilityError later on Arel-2.0.8 (to_sql.rb visit_Arel_Nodes_Values method).\n\nI monkey patched ActionDispatch::Http:UploadedFile like so and it works :\n\n``` ruby\n  def initialize(hash)\n    @original_filename = hash[:filename].force_encoding(\"UTF-8\")        \n    @content_type      = hash[:type]\n    @headers           = hash[:head]\n    @tempfile          = hash[:tempfile]\n    raise(ArgumentError, ':tempfile is required') unless @tempfile\n  end\n```\n\nMy computing skill stop here. I let you guys decide if this is a bug or if I'm doing something wrong.\n", "labels": [], "number": 869, "updated_at": "2011-06-14 15:13:46", "user": 789801, "closed_at": "2011-06-14 15:13:46", "id": 904632, "title": "ActionDispatch::Http:Parameters force encoding of all params but filename of an uploaded file", "url": "https://api.github.com/repos/rails/rails/issues/869", "created_at": "2011-05-16 04:36:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171260", "text": "_Imported from Lighthouse._\nComment by **Jim Sagevid** - 2011-04-27 09:09:04 UTC\n\n+1\n", "created_at": "2011-05-16 04:36:43", "user": 789801, "id": 1171260}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358148", "text": "why is this issue closed? is there a better way to deal with this matter? \ni'm still monkey patching the code to bypass this problem.\n", "created_at": "2011-06-13 10:49:30", "user": 148669, "id": 1358148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365040", "text": "+1\n", "created_at": "2011-06-14 10:18:08", "user": 202410, "id": 1365040}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6471\nCreated by **Chad W. Taylor** - 2011-02-25 20:13:56 UTC\n\nThe 422 unprocessable_entity appears to be limited to the \"save\" operations.  It would be nice that it is not limited to saves. It would be nice to use status codes, other than 200, to display errors from the body so we know what was wrong with our get request.\n\nFor instance, if I did this:\n\n[code]\nperson = Person.find(:all, :params => {:first_name => \"John\"})\n[/code]\n\nThe API server may require a combination of both :first_name and :last_name to work so the error message would show that the last name is a required field before the find operation can be processed hence the unprocessable_entity used.  It is able to raise 422 however the response body is not being picked up other than the save operations.\n\nIt would be nice if the following code (activeresource/lib/active_resource/custom_methods.rb) in ActiveResource project shows:\n\n[code]\ndef put(method_name, options = {}, body = '')\n  begin\n    connection.put(custom_method_element_url(method_name, options), body, self.class.headers)\n  rescue ResourceInvalid => error\n    errors.from_xml(error.response.body) # need to also handle JSON requests as well\n  end\n  self \nend\n[/code]\n\nHope that can be considered! \n\nThanks much,\nChad\n", "labels": [], "number": 870, "updated_at": "2012-02-06 22:58:07", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904633, "title": "ActiveResource and 422 Status Code and Response Message", "url": "https://api.github.com/repos/rails/rails/issues/870", "created_at": "2011-05-16 04:36:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171261", "text": "_Imported from Lighthouse._\nComment by **Markus Schwed** - 2011-03-03 08:03:39 UTC\n\nI think, that would be a nice feature/fix could you do this and add a patch?\n", "created_at": "2011-05-16 04:36:50", "user": 789801, "id": 1171261}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3838698", "text": "It's too bad that this ticket were close without further consideration. ActiveResource always shows you the error code but it only captures the error when a POST 422 is returned, that's not very consistent. \n", "created_at": "2012-02-06 22:58:07", "user": 349536, "id": 3838698}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6472\nCreated by **Ilya Zayats** - 2011-02-26 03:36:22 UTC\n\nIf we accidentally try to pass actions as symbols to the controller generator (so I do very often) it will break everything because we will have routes like this:\n     get \"controller/:index\"\n\nAnd that will produce `default_controller_and_action': missing :controller (ArgumentError)' error\n\nI've fixed that, now all colons or commas will be omitted in action names.\n", "labels": [], "number": 871, "updated_at": "2011-05-21 15:12:27", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904634, "title": "Passing actions with colons to the controller generator", "url": "https://api.github.com/repos/rails/rails/issues/871", "created_at": "2011-05-16 04:36:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171262", "text": "_Imported from Lighthouse._\nComment by **Ilya Zayats** - 2011-02-26 04:30:10 UTC\n\nUpdated patch to get rid of the second gsub call\n", "created_at": "2011-05-16 04:36:57", "user": 789801, "id": 1171262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171263", "text": "Attachments saved to Gist: http://gist.github.com/971786\n", "created_at": "2011-05-16 04:36:58", "user": 789801, "id": 1171263}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6473\nCreated by **Markus Schwed** - 2011-03-03 09:20:17 UTC\n\nHello there,\n\nMatthias Folz and I have added the 'has_many' and 'has_one' - associations through reflections in ActiveResource.\n\nNow, It's possible to specify the class for a \"Child-Resource\" via :class_name - option in has_many and has_one - association definition.\n\nWe choosed the way through reflections, because in we plan to add some other cool features for associations like 'autoload' in ActiveResource.\n\nFor example:\n\nGET /posts/123.xml delivers following response body:\n\n```\n<post>\n  <title>ActiveResource now have associations</title>\n  <content> ... </content>\n  <comments>\n    <comment> ... </comment>\n    <comment> ... </comment>\n  </comments>\n</post>\n```\n\n  has_many :comments, :class_name => ‚Äòmyblog/comment‚Äò \n\nWould resolve this comments into the Myblog::Comment class. \n\nGreetz and thanks a lot for viewing this ticket!\nMarkus Schwed\n", "labels": [], "number": 872, "updated_at": "2011-05-21 15:12:27", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904635, "title": "ActiveResource - Adding associations through reflections", "url": "https://api.github.com/repos/rails/rails/issues/872", "created_at": "2011-05-16 04:37:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171264", "text": "_Imported from Lighthouse._\nComment by **Gaston Ramos** - 2011-03-01 09:10:06 UTC\n\nI have sent a pull request that add the same that your patch see: https://github.com/rails/rails/pull/70\n", "created_at": "2011-05-16 04:37:04", "user": 789801, "id": 1171264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171265", "text": "_Imported from Lighthouse._\nComment by **Gregor Melhorn** - 2011-03-02 09:07:21 UTC\n\nLooks like a good useful feature. +1\n", "created_at": "2011-05-16 04:37:05", "user": 789801, "id": 1171265}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171266", "text": "_Imported from Lighthouse._\nComment by **Michael Raidel** - 2011-03-09 20:49:43 UTC\n\nThis would be a very useful feature. +1\n", "created_at": "2011-05-16 04:37:07", "user": 789801, "id": 1171266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171267", "text": "Attachments saved to Gist: http://gist.github.com/971787\n", "created_at": "2011-05-16 04:37:08", "user": 789801, "id": 1171267}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6474\nCreated by **Daniel Morrison** - 2011-03-03 09:20:17 UTC\n\ncsrf_meta_tags is one of the few places that use an html string and not the tag helper. Seems like it should for consistency (and for picking up overrides to the tag helper, which I was doing in project when I discovered this).\n\nI'm not excited about the tap & join pattern, so I'm happy to change it.\n", "labels": [], "number": 873, "updated_at": "2011-05-21 15:12:27", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904636, "title": "Convert csrf_meta_tags to use the tag helper", "url": "https://api.github.com/repos/rails/rails/issues/873", "created_at": "2011-05-16 04:37:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171268", "text": "_Imported from Lighthouse._\nComment by **robinjam** - 2011-04-06 02:09:30 UTC\n\nThe tap-and-join thing seems needlessly complicated. Something like this should work:\n\n[tag('meta', {:name => 'csrf-param', :content => request_forgery_protection_token}),\n tag('meta', {:name => 'csrf-token', :content => form_authenticity_token})].join(\"\\n\").html_safe\n\nAside from that, this is a good fix. Have you tried submitting a pull request?\n", "created_at": "2011-05-16 04:37:14", "user": 789801, "id": 1171268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171269", "text": "Attachments saved to Gist: http://gist.github.com/971788\n", "created_at": "2011-05-16 04:37:15", "user": 789801, "id": 1171269}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6475\nCreated by **thoefer** - 2011-02-27 01:04:36 UTC\n\nIt seems that the require of \"core_ext/module/delegation\" in \"configurable.rb\" is unnecessary: There is no \"delegate\" method called in this file. I just removed the require. Tests are still running green on 3.1.0.beta. \n\nI know it¬¥s not really a big issue and as I am new in contributing please tell me if this kind of optimization is too fine-grained.\n", "labels": [], "number": 874, "updated_at": "2011-05-21 15:12:27", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904637, "title": "require of \"core_ext/module/delegation\" not needed in \"configurable.rb\"", "url": "https://api.github.com/repos/rails/rails/issues/874", "created_at": "2011-05-16 04:37:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171270", "text": "_Imported from Lighthouse._\nComment by **thoefer** - 2011-02-27 01:06:00 UTC\n\nSorry: configurable.rb resides in ActiveSupport\n", "created_at": "2011-05-16 04:37:21", "user": 789801, "id": 1171270}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171271", "text": "Attachments saved to Gist: http://gist.github.com/971789\n", "created_at": "2011-05-16 04:37:22", "user": 789801, "id": 1171271}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6477\nCreated by **Mike Perham** - 2011-03-03 09:20:19 UTC\n\nI'd like to propose adding the notion of transformations and transformers to ActiveModel.  I've found that basically every web project I've ever worked on has needed functionality to strip and clean form inputs, e.g. stripping non-numeric characters from a credit card number field.\n\nSo I'd like to implement something similar to ActiveModel's validations, except that it would happen before the validation stage.  The API is completely open at this point; I was thinking something like this:\n\n``` ruby\nclass CreditCard\n\n  # attributes: number, name\n  transform :number do |num|\n    num.gsub(/\\D/, '')\n  end\n  transform :name do |num|\n    num.strip\n  end\nend\n\ncc = CreditCard.new(:number => '4111-1111-1111-1111', :name => ' Mike Perham ')\ncc.save!\n[cc.number, cc.name] # => ['4111111111111111', 'Mike Perham']\n```\n\nbut I'm happy to discuss use cases and what the API might look like at this point.  Some other possibilities: type coercion (String -> Date, e.g.) and what might we supply as common, built-in transformers.\n", "labels": [], "number": 875, "updated_at": "2011-05-21 15:12:28", "user": 789801, "closed_at": "2011-05-21 15:12:27", "id": 904639, "title": "ActiveModel transformations", "url": "https://api.github.com/repos/rails/rails/issues/875", "created_at": "2011-05-16 04:37:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171272", "text": "_Imported from Lighthouse._\nComment by **thoefer** - 2011-02-27 15:28:13 UTC\n\nHey Mike,\n\nI like your idea basically as this is really default functionality! The first thing that comes to my mind was that these transformers should easily be chainable e.g. like rack-middleware. Output of the first transformer could be treated as input to the next transformer. Furthermore I think it¬¥s important to implement the API in a way that custom transformers can easily be added. \n\nWhat do you think about this: \n\n<pre>\nvalidates :name, :presence => true, :transformer => [:remove_whitespace, :remove_invalid_chars]\n</pre>\n\n\nThis way the entire chain of transformers is grouped with the validator and easily verifyable.\n", "created_at": "2011-05-16 04:37:28", "user": 789801, "id": 1171272}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171273", "text": "_Imported from Lighthouse._\nComment by **thoefer** - 2011-02-27 15:34:20 UTC\n\nAnd I think it¬¥s important to really distinguish between what¬¥s is implemented as a transformer (and therefore before the validation stage) and what should be a validator.\n", "created_at": "2011-05-16 04:37:29", "user": 789801, "id": 1171273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171274", "text": "_Imported from Lighthouse._\nComment by **Josep M. Bach** - 2011-02-27 15:58:55 UTC\n\nHi Mike,\n\nI gave it a shot and tried to implement a first basic draft.\n\nhttps://gist.github.com/846276\n\nI've got it green on ActiveModel master w/ Ruby 1.9.2. There's some stuff pending (inheriting transformations for example).\n\nSomehow I like better the idea of having validations and transformations as two separate sets of callbacks, since they are inherently different concepts. I've mirrored the structure of ActiveModel::Validations, creating a new type of :transform callbacks and all.\n\nThe only thing I don't like with this approach is that transformers are not chainasble, and, as @thoefer says, intuitively it would be a nice feature to have.\n", "created_at": "2011-05-16 04:37:31", "user": 789801, "id": 1171274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171276", "text": "_Imported from Lighthouse._\nComment by **Trevor Turk** - 2011-02-27 23:21:31 UTC\n\nWhy not just override the setter method?\n", "created_at": "2011-05-16 04:37:32", "user": 789801, "id": 1171276}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171277", "text": "_Imported from Lighthouse._\nComment by **thoefer** - 2011-02-28 18:52:35 UTC\n\nYou convinced me Josep. I think it¬¥s better to separate validations and transformations. I think the possibility to chain transformers is almost a must-have. Therefore I tried to implement the basic library in this way, as you can see in https://gist.github.com/847786 (please scroll down for the actual AR-model and transformer usage). \n\nIt basically looks like this:\n\n<pre>\nclass Asset < ActiveRecord::Base\n\n  include ActiveModel::Transformers\n\n  # Usage examples for chainable transformer API. UseCases: \n  # - builtin transformer without customized options \n  # - builtin transformer with customized options \n  # - custom transformer (as a lambda)\n\n  # API for builtin transformers relying on default-options\n  transform :age, :digit, :strip\n\n  # API for builtin transformer with customized options and a custom transformer\n  transform :name do\n    with :strip, :l => false\n    with lambda {|value| \"custom transformer: ...#{value}...\"}\n  end\n  \nend\n</pre>\n\n\n@Trevor: You¬¥re absolutely right with your proposal. Nontheless it would be helpful to have a couple of basic transformers available for filtering. \n\nComments?\n", "created_at": "2011-05-16 04:37:34", "user": 789801, "id": 1171277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171278", "text": "_Imported from Lighthouse._\nComment by **thoefer** - 2011-02-28 18:56:50 UTC\n\nforgot to mention, sorry: output of one transformer is treated as input value for the next one.\n", "created_at": "2011-05-16 04:37:35", "user": 789801, "id": 1171278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171279", "text": "_Imported from Lighthouse._\nComment by **Mike Perham** - 2011-02-28 19:09:49 UTC\n\nAfter weekend consideration, I'm now wondering if this shouldn't just be a before_validation and after_validation block for each model.  I'm not convinced having separate transform blocks is any cleaner or more useful.\n", "created_at": "2011-05-16 04:37:37", "user": 789801, "id": 1171279}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171280", "text": "_Imported from Lighthouse._\nComment by **thoefer** - 2011-02-28 20:45:16 UTC\n\nYou¬¥re right, this could be implemented with validation hook also. Nonetheless I think it would be helpful to have some builtin highlevel-transformer available rather than having to deal with low-level-filter e.g. regular expressions.\n", "created_at": "2011-05-16 04:37:38", "user": 789801, "id": 1171280}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171281", "text": "_Imported from Lighthouse._\nComment by **Oriol Gual** - 2011-03-01 12:49:46 UTC\n\n@thoefer you may want to look at [mdeering's attribute normalizer](https://github.com/mdeering/attribute_normalizer)\n", "created_at": "2011-05-16 04:37:40", "user": 789801, "id": 1171281}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6478\nCreated by **activestylus** - 2011-03-01 15:14:05 UTC\n\nIn the case of Person has_many :phones, :as => :phoneable, this happens when I submit a nested form.\n\nPhone(#2157249660) expected, got Array(#2151973780)\n\nYou can test it for yourself with this app: https://github.com/activestylus/nested_polymorphic_attributes_bug\n\nOn closer inspection it appears the form helpers are not rendering the nested fields correctly, particularly the name attribute:\n\nLooking at the source I see:\n\n<input name=\"person[phones][number]\"...\n\nWhen I'm pretty sure that should be:\n\n<input name =\"person[phones][0][number]\"...\n\nFWIW I can build nested models in the console with no problems whatsoever. And the form helpers do not suffer this problem with a regular has_many relationship.\n", "labels": [], "number": 876, "updated_at": "2011-05-21 15:12:28", "user": 789801, "closed_at": "2011-05-21 15:12:28", "id": 904644, "title": "Error when saving nested polymorphic models in a form", "url": "https://api.github.com/repos/rails/rails/issues/876", "created_at": "2011-05-16 04:38:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171283", "text": "_Imported from Lighthouse._\nComment by **Josep M. Bach** - 2011-02-27 14:01:55 UTC\n\nSeems that the builder doesn't know it's a one-to-many relationship or something like that, could it be?\n\nIn this [particular line](https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/form_helper.rb#L895) it checks for the `[]` naming after `person[phones]` - if it had found it, it would have triggered the `#retrieve_auto_index` method, which assigns an index ([0], [1]...). Sadly it matches nothing, so I'm guessing someone in the call stack is not checking if person->phones is a 1-n relationship.\n\nAny ideas?\n", "created_at": "2011-05-16 04:39:00", "user": 789801, "id": 1171283}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171284", "text": "_Imported from Lighthouse._\nComment by **activestylus** - 2011-02-28 15:54:46 UTC\n\nJust tested in 2.3.8 and works fine. Appears to be a Rails 3 issue.\n", "created_at": "2011-05-16 04:39:01", "user": 789801, "id": 1171284}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6481\nCreated by **Hans Engel** - 2011-02-27 16:23:37 UTC\n\nI've been working on a Rails app and just switched over to PostgreSQL for use on Heroku. The view for the index of my site calls the `round` method for some float values returned from the database. This worked fine when I was using SQLite ‚Äî ActiveRecord returned Ruby `Float`s for columns that held float values in the database. I switched to PostgreSQL and got this error, however, after migrating / seeding the database and visiting the homepage:\n\n```\n2011-02-27T08:14:00-08:00 app[web.1]: ActionView::Template::Error (undefined method `round' for \"86.0000000000000000\":String):\n2011-02-27T08:14:00-08:00 app[web.1]:     16:       %tr\n2011-02-27T08:14:00-08:00 app[web.1]:     17:           %td= link_to p[0].layout + \" / \" + p[0].keyboard, :controller => 'profiles', :action => 'view', :id => p[0].id\n2011-02-27T08:14:00-08:00 app[web.1]:     18:           %td= p[1]\n2011-02-27T08:14:00-08:00 app[web.1]:     19:           %td= p[2].round\n2011-02-27T08:14:00-08:00 app[web.1]:     20:           %td= p[3].round\n2011-02-27T08:14:00-08:00 app[web.1]:   app/views/home/index.haml:19:in `_app_views_home_index_haml__1618257786_23737684188900_0'\n2011-02-27T08:14:00-08:00 app[web.1]:   app/views/home/index.haml:15:in `each'\n2011-02-27T08:14:00-08:00 app[web.1]:   app/views/home/index.haml:15:in `_app_views_home_index_haml__1618257786_23737684188900_0'\n```\n\nI'm guessing this is a bug in how ActiveRecord handles PostgreSQL data types?\n", "labels": [], "number": 877, "updated_at": "2011-05-21 15:12:28", "user": 789801, "closed_at": "2011-05-21 15:12:28", "id": 904646, "title": "ActiveRecord: PostgreSQL floats returned as Strings; SQLite floats returned as floats", "url": "https://api.github.com/repos/rails/rails/issues/877", "created_at": "2011-05-16 04:39:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171285", "text": "_Imported from Lighthouse._\nComment by **Utkarsh Kukreti** - 2011-02-27 21:15:34 UTC\n\nWhat do you have in your `schema.rb`? A similar piece of code works fine for me on Heroku/PostgreSQL\n", "created_at": "2011-05-16 04:39:08", "user": 789801, "id": 1171285}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171287", "text": "_Imported from Lighthouse._\nComment by **Hans Engel** - 2011-02-27 21:19:55 UTC\n\nThis is the relevant table in `schema.rb`:\n\n``` ruby\n  create_table \"records\", :force => true do |t|\n    t.integer  \"user_id\"\n    t.integer  \"profile_id\"\n    t.integer  \"words\"\n    t.integer  \"duration\"\n    t.integer  \"wpm\"\n    t.integer  \"cpm\"\n    t.datetime \"created_at\"\n    t.datetime \"updated_at\"\n  end\n```\n\nThe columns `wpm` and `cpm` were being returned as `String`s. Maybe because I was using an integer type in my migrations instead of specifying a float type?\n", "created_at": "2011-05-16 04:39:09", "user": 789801, "id": 1171287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171288", "text": "_Imported from Lighthouse._\nComment by **Utkarsh Kukreti** - 2011-02-28 10:59:19 UTC\n\nYes. That should have been `t.float`. I'm guessing the data was imported as-is into PostgreSQL, which made the fields behave like String, as they had an invalid value for their column. Could you try again with `t.float`?\n", "created_at": "2011-05-16 04:39:10", "user": 789801, "id": 1171288}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6485\nCreated by **Bob Jones** - 2011-03-03 09:20:20 UTC\n\nThe 3.0.4 and 3.0.3 activesupport gems seem to have some sort of zlib encoding issue.  I cannot install or unpack the gems in ubuntu 10.04 or 10.10\n\nTo reproduce:\n\n$ gem install --version=\"3.0.3\" activesupport \nERROR:  While executing gem ... (Zlib::DataError)\n    invalid stored block lengths\n\nUsing bundler:\n\n```\n$ bundle install\nFetching source index for http://rubygems.org/\nFetching source index for http://gems/\nUsing rake (0.8.7) \nUsing abstract (1.0.0) \n/usr/local/lib/site_ruby/1.8/rubygems/package/tar_input.rb:222:in `finish': invalid stored block lengths (Zlib::DataError)\n    from /usr/local/lib/site_ruby/1.8/rubygems/package/tar_input.rb:222:in `zipped_stream'\n    from /usr/local/lib/site_ruby/1.8/rubygems/package/tar_input.rb:129:in `each'\n    from /usr/local/lib/site_ruby/1.8/rubygems/package/tar_reader.rb:64:in `each'\n    from /usr/local/lib/site_ruby/1.8/rubygems/package/tar_reader.rb:55:in `loop'\n    from /usr/local/lib/site_ruby/1.8/rubygems/package/tar_reader.rb:55:in `each'\n    from /usr/local/lib/site_ruby/1.8/rubygems/package/tar_input.rb:127:in `each'\n    from /usr/local/lib/site_ruby/1.8/rubygems/format.rb:66:in `from_io'\n    from /usr/local/lib/site_ruby/1.8/rubygems/package/tar_input.rb:22:in `open'\n    from /usr/local/lib/site_ruby/1.8/rubygems/package.rb:68:in `open'\n    from /usr/local/lib/site_ruby/1.8/rubygems/format.rb:62:in `from_io'\n    from /usr/local/lib/site_ruby/1.8/rubygems/format.rb:46:in `from_file_by_path'\n    from /usr/lib/ruby/1.8/open-uri.rb:32:in `open_uri_original_open'\n    from /usr/lib/ruby/1.8/open-uri.rb:32:in `open'\n    from /usr/local/lib/site_ruby/1.8/rubygems/format.rb:45:in `from_file_by_path'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/source.rb:73:in `fetch'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/installer.rb:45:in `run'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/spec_set.rb:12:in `each'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/spec_set.rb:12:in `each'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/installer.rb:44:in `run'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/installer.rb:8:in `install'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/cli.rb:226:in `install'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/vendor/thor/task.rb:22:in `send'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/vendor/thor/task.rb:22:in `run'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/vendor/thor/invocation.rb:118:in `invoke_task'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/vendor/thor.rb:246:in `dispatch'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/lib/bundler/vendor/thor/base.rb:389:in `start'\n    from /usr/lib/ruby/gems/1.8/gems/bundler-1.0.10/bin/bundle:13\n    from /usr/bin/bundle:19:in `load'\n    from /usr/bin/bundle:19\n```\n\nAlso, when using tar:\n\n```\n$ wget --no-check-certificate https://rubygems.org/downloads/activesupport-3.0.3.gem\n--2011-02-28 09:11:19--  https://rubygems.org/downloads/activesupport-3.0.3.gem\nResolving rubygems.org... 72.4.120.124\nConnecting to rubygems.org|72.4.120.124|:443... connected.\nWARNING: certificate common name `*.rubygems.org' doesn't match requested host name `rubygems.org'.\nHTTP request sent, awaiting response... 302 Found\nLocation: /gems/activesupport-3.0.3.gem [following]\n--2011-02-28 09:11:21--  https://rubygems.org/gems/activesupport-3.0.3.gem\nReusing existing connection to rubygems.org:443.\nHTTP request sent, awaiting response... 302 Found\nLocation: http://production.cf.rubygems.org/gems/activesupport-3.0.3.gem [following]\n--2011-02-28 09:11:21--  http://production.cf.rubygems.org/gems/activesupport-3.0.3.gem\nResolving production.cf.rubygems.org... 205.251.205.108, 205.251.205.137, 205.251.205.152, ...\nConnecting to production.cf.rubygems.org|205.251.205.108|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 302592 (296K) [binary/octet-stream]\nSaving to: `activesupport-3.0.3.gem'\n\n100%[===================================================================================================================================================================================================>] 302,592     64.5K/s   in 4.6s    \n\n2011-02-28 09:11:28 (64.5 KB/s) - `activesupport-3.0.3.gem' saved [302592/302592]\n\n$ tar xf activesupport-3.0.3.gem \ntar: data.tar.gz: implausibly old time stamp 1970-01-01 02:00:00\ntar: metadata.gz: implausibly old time stamp 1970-01-01 02:00:00\n\n$ tar zxf data.tar.gz \ntar: CHANGELOG: implausibly old time stamp 1970-01-01 02:00:00\ntar: README.rdoc: implausibly old time stamp 1970-01-01 02:00:00\ntar: lib/active_support/all.rb: implausibly old time stamp 1970-01-01 02:00:00\ntar: lib/active_support/backtrace_cleaner.rb: implausibly old time stamp 1970-01-01 02:00:00\ntar: lib/active_support/base64.rb: implausibly old time stamp 1970-01-01 02:00:00\ntar: lib/active_support/basic_object.rb: implausibly old time stamp 1970-01-01 02:00:00\ntar: lib/active_support/benchmarkable.rb: implausibly old time stamp 1970-01-01 02:00:00\ntar: lib/active_support/buffered_logger.rb: implausibly old time stamp 1970-01-01 02:00:00\ntar: lib/active_support/builder.rb: implausibly old time stamp 1970-01-01 02:00:00\n\n<snip/>\n\ngzip: stdin: invalid compressed data--format violated\ntar: Unexpected EOF in archive\ntar: Unexpected EOF in archive\ntar: Error is not recoverable: exiting now\n```\n", "labels": [], "number": 878, "updated_at": "2011-05-21 15:12:28", "user": 789801, "closed_at": "2011-05-21 15:12:28", "id": 904647, "title": "Activesupport gems are corrupt, version 3.0.3 and 3.0.4", "url": "https://api.github.com/repos/rails/rails/issues/878", "created_at": "2011-05-16 04:39:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171289", "text": "_Imported from Lighthouse._\nComment by **Utkarsh Kukreti** - 2011-02-28 11:06:24 UTC\n\nWhat do you get if you run this after wget?\n\n```\ngem install activesupport-3.0.3.gem --local\n```\n", "created_at": "2011-05-16 04:39:17", "user": 789801, "id": 1171289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171290", "text": "_Imported from Lighthouse._\nComment by **Bob Jones** - 2011-02-28 11:35:30 UTC\n\n```\n$ gem install activesupport-3.0.3.gem --local\nERROR:  While executing gem ... (Zlib::DataError)\n    invalid stored block lengths\n```\n", "created_at": "2011-05-16 04:39:19", "user": 789801, "id": 1171290}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6488\nCreated by **Wylliam Miguita** - 2011-03-01 15:14:05 UTC\n\nAfter smelly fix of ticket #6479 (https://rails.lighthouseapp.com/projects/8994/tickets/6479-model-associations-are-trying-to-select-singular-table-names-after-305-upgrade) through inflections, the following error occurs while running tests:\n\n<pre>\nActiveRecord::StatementInvalid: Mysql::Error: Unknown column 'categoria' in 'field list': INSERT INTO `hierarquias` (`categoria`, `subcategoria`) VALUES ('jazz', 'big_bands')\n</pre>\n\n\nwhere:\n\n<pre>\nclass Categoria << ActiveRecord::Base\n  has_many :hierarquias\n  has_many :subcategorias, :through => :hierarquias, :class_name => \"Subcategoria\", :foreign_key => :categoria_id\nend\n\nclass Hierarquia << ActiveRecord::Base\n  belongs_to :categoria\nend\n\nclass Subcategoria < Categoria\n  has_one :hierarquia\n  has_one :categoria, :through => :hierarquia\nend\n</pre>\n", "labels": [], "number": 879, "updated_at": "2011-05-21 15:12:28", "user": 789801, "closed_at": "2011-05-21 15:12:28", "id": 904648, "title": "Rails 3.0.5 load test fixtures doesn't undestand has_many associations", "url": "https://api.github.com/repos/rails/rails/issues/879", "created_at": "2011-05-16 04:39:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171291", "text": "_Imported from Lighthouse._\nComment by **Wylliam Miguita** - 2011-02-28 19:32:03 UTC\n\nforgot the fixtures:\ncategorias.yml\n\n<pre>\nmusica_brasileira:\n    nome: m√∫sica brasileira\n    type: Categoria\njazz:\n    nome: jazz\n    type: Categoria\nrock:\n    nome: rock\n    type: Categoria\nchoro:\n    nome: choro\n    type: Subcategoria\nsamba:\n    nome: samba\n    type: Subcategoria\nbig_bands:\n    nome: big banda\n    type: Subcategoria\njazz_classico:\n    nome: jazz classico\n    type: Subcategoria\n\n</pre>\n\n\nhierarquias.yml\n\n<pre>\nmb_choro:\n    categoria: musica_brasileira\n    subcategoria: choro\nmb_samba:\n    categoria: musica_brasileira\n    subcategoria: samba\njazz_big:\n    categoria: jazz\n    subcategoria: big_bands\njazz_jazz_classico:\n    categoria: jazz\n    subcategoria: jazz_classico\n</pre>\n", "created_at": "2011-05-16 04:39:26", "user": 789801, "id": 1171291}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171292", "text": "_Imported from Lighthouse._\nComment by **Wylliam Miguita** - 2011-04-07 16:04:16 UTC\n\nYou can call off this ticket.\n", "created_at": "2011-05-16 04:39:27", "user": 789801, "id": 1171292}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6491\nCreated by **Sebastian Vogelsang** - 2011-04-14 10:17:34 UTC\n\nHi there,\n\nin my 3.0.4 application I'm trying to set an individual databases for some of my models in the following way within the environment.rb:\n\n```\nmodels.each do |klass|\n  next unless klass < ActiveRecord::Base\n  klass.establish_connection \"processing_#{Rails.env}\"\nend\n```\n\nWhen doing a `Channel.connection.instance_eval {@config[:database]}` afterwards (Channel being one of my models), all appears correct. However, when doing a `Channel.arel_engine.connection.instance_eval {@config[:database]}`, I get the standard ActiveRecord database connection returned. It appears as if Arel does not pick up on the modified `active_record` connection. The funny thing is that this only appears for some of my models. Others return the correct database for both connection and arel_engine. \n\nAnother thing to notice is that while `Channel.first` works fine, I get the following error, when doing a `Channel.find(1)`:\n\n```\nNoMethodError: undefined method `eq' for nil:NilClass\n```\n\nRegards,\n\nSebastian\n", "labels": [], "number": 880, "updated_at": "2011-05-21 15:12:28", "user": 789801, "closed_at": "2011-05-21 15:12:28", "id": 904650, "title": "Arel not picking up on ActiveRecord establish_connection settings", "url": "https://api.github.com/repos/rails/rails/issues/880", "created_at": "2011-05-16 04:39:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171293", "text": "_Imported from Lighthouse._\nComment by **Sebastian Vogelsang** - 2011-03-01 18:21:38 UTC\n\nok, I got it working by changing my code to the following:\n\n```\nmodels.each do |klass|\n  next unless klass < ActiveRecord::Base\n  klass.establish_connection \"processing_#{Rails.env}\"\n  klass.class_eval do\n    @arel_engine = klass\n    @arel_table = Arel::Table.new(klass.table_name, klass)\n    @relation = ActiveRecord::Relation.new(klass, @arel_table)\n  end\nend\n```\n\nI hope this is not the way we have to do it from now?!? Shouldn't establish_connection take care of setting up the AREL Relations appropriately?\n\nSebastian\n", "created_at": "2011-05-16 04:39:34", "user": 789801, "id": 1171293}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171295", "text": "_Imported from Lighthouse._\nComment by **atomgas** - 2011-03-22 11:20:41 UTC\n\nHasAndBelongsToMany did not work with multiple database, this fixed it for me:\n\n```\nmodule ActiveRecord\n  # = Active Record Has And Belongs To Many Association\n  module Associations\n    class HasAndBelongsToManyAssociation < AssociationCollection\n      protected\n        def insert_record(record, force = true, validate = true)\n          if record.new_record?\n            if force\n              record.save!\n            else\n              return false unless record.save(:validate => validate)\n            end\n          end\n\n          if @reflection.options[:insert_sql]\n            @owner.connection.insert(interpolate_and_sanitize_sql(@reflection.options[:insert_sql], record))\n          else\n            # IMPORTANT!!!\n            # here active record does not pass the engine to Arel::Table and thus Arel::Table uses Table.engine = ActiveRecord::Base\n            # IMPORTANT!!!\n            relation   = Arel::Table.new(@reflection.options[:join_table], @owner.class.arel_engine)\n            timestamps = record_timestamp_columns(record)\n            timezone   = record.send(:current_time_from_proper_timezone) if timestamps.any?\n\n\n            # debugger\n            attributes = Hash[columns.map do |column|\n                                name = column.name\n                                value = case name.to_s\n                                when @reflection.primary_key_name.to_s\n                                  @owner.id\n                                when @reflection.association_foreign_key.to_s\n                                  record.id\n                                when *timestamps\n                                  timezone\n                                else\n                                  @owner.send(:quote_value, record[name], column) if record.has_attribute?(name)\n                                end\n\n                                [relation[name], value] unless value.nil?\n            end]\n            relation.insert(attributes)\n          end\n\n          return true\n        end\n\n        def delete_records(records)\n          if sql = @reflection.options[:delete_sql]\n            records.each { |record| @owner.connection.delete(interpolate_and_sanitize_sql(sql, record)) }\n          else\n            # IMPORTANT!!!\n            # here active record does not pass the engine to Arel::Table and thus Arel::Table uses Table.engine = ActiveRecord::Base\n            # IMPORTANT!!!            \n            relation = Arel::Table.new(@reflection.options[:join_table], @owner.class.arel_engine)\n            relation.where(relation[@reflection.primary_key_name].eq(@owner.id).\n              and(relation[@reflection.association_foreign_key].in(records.map { |x| x.id }.compact))\n            ).delete\n          end\n        end\n\n    end\n  end\nend\n\n```\n", "created_at": "2011-05-16 04:39:36", "user": 789801, "id": 1171295}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171296", "text": "_Imported from Lighthouse._\nComment by **Sebastian Vogelsang** - 2011-04-12 10:52:22 UTC\n\nanyone? This is a rather serious issue! I can't imagine that nobody else has encountered these problems when connecting to multiple databases?!\n", "created_at": "2011-05-16 04:39:37", "user": 789801, "id": 1171296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171297", "text": "_Imported from Lighthouse._\nComment by **Ibrahim** - 2011-04-13 11:55:56 UTC\n\nYou don't need to do this in the environment.rb If you want separate connections in your models, use the ActiveRecord::Base.establish_connection method that takes a options hash. Place your database configuration in the appropriate config file and use that in your model:\n\n``` ruby\nclass User < ActiveRecord::Base\n  establish_connection(\n    :adapter => \"mysql\"\n    :host    => \"localhost\"\n  )\nend\n```\n\nIf you want to use your YAML, it is available as a symbol within ActiveRecord::Base like so:\n\n``` ruby\nclass User < ActiveRecord::Base\n  establish_connection :from_yaml\nend\n```\n\nAnd to keep things dry, you can setup a parent model that establishes the connection to the other database and let your models inherit from it, since establish_connection stays in the family!\n\n``` ruby\nclass Person < ActiveRecord::Base\n  establish_connection :private_government_database\nend\n\nclass User < Person\nend\n\nclass Admin < User\nend\n```\n\nHope this helps you ;-)\n", "created_at": "2011-05-16 04:39:39", "user": 789801, "id": 1171297}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6492\nCreated by **Josep M. Bach** - 2011-03-01 15:14:04 UTC\n\nWhen instantiating an `ActionDispatch::TestRequest`, it raises an undefined method error when `Rails.application` is `nil`. Although it checks for `defined?(Rails.application)`, it fails to check whether the application is really present.\n\nIncluded patch adds the additional check needed (with tests).\n", "labels": [], "number": 881, "updated_at": "2011-05-21 15:12:28", "user": 789801, "closed_at": "2011-05-21 15:12:28", "id": 904652, "title": "ActionDispatch::TestRequest - Undefined method `env_config' when Rails.application is nil", "url": "https://api.github.com/repos/rails/rails/issues/881", "created_at": "2011-05-16 04:39:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171298", "text": "Attachments saved to Gist: http://gist.github.com/971790\n", "created_at": "2011-05-16 04:39:45", "user": 789801, "id": 1171298}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6493\nCreated by **Ludo van den Boom** - 2011-03-01 15:23:06 UTC\n\nCopied most of the info from ticket #5074. The problem I encounter is the same as in that ticket, except I don't have issues with rails console (that has already been resolved in ticket #5074), but with running rake tasks. Attached patch resolves this issue for rake tasks as well.\n\n**Versions used**\n\nI am using Ruby 1.8.7 and Rails 3.0.5\n\n**Steps to reproduce**\n\n1) rails new foo\n2) cd foo\n3) rails generate model bar\n4) rails generate observer bar\n5) rake db:migrate\n6) in config/application.rb file:\n\n``` ruby\nconfig.active_record.observers = :bar_observer\n```\n\n6) touch lib/tasks/qux.rake\n7) in lib/tasks/qux.rake:\n\n``` ruby\ndesc \"Qux\"\ntask :qux => :environment do\n  Bar\nend\n```\n\n8) rake qux\n\nResults in an error:\n\n``` ruby\nExpected /Users/ludo/src/foo/app/models/bar.rb to define Bar\n```\n", "labels": ["railties"], "number": 882, "updated_at": "2013-05-14 22:02:58", "user": 789801, "closed_at": "2013-05-12 18:18:11", "id": 904653, "title": "[PATCH] Constant loading when running rake task (expected x.rb to define X)", "url": "https://api.github.com/repos/rails/rails/issues/882", "created_at": "2011-05-16 04:39:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171299", "text": "Attachments saved to Gist: http://gist.github.com/971791\n", "created_at": "2011-05-16 04:39:52", "user": 789801, "id": 1171299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3114247", "text": "Why was this closed? I still get this in Rails 3.1.1. \n", "created_at": "2011-12-12 22:37:30", "user": 58770, "id": 3114247}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3908503", "text": "This bug still occurs with Rails 3.2.1 and Ruby 1.9.3p0. Needs to be reopened and the fix introduced into the mainline.\n", "created_at": "2012-02-10 16:09:28", "user": 157938, "id": 3908503}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4650696", "text": "Problem confirmed with Rails 3.2.2 and ruby 1.9.3p0\n", "created_at": "2012-03-22 23:31:02", "user": 202039, "id": 4650696}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5629568", "text": "Hi everyone. I have the same problem. All models which have observers return the same error in custom rake tasks.\nEnvironment:\nRails 3.2.3\nruby 1.9.3p0 (2011-10-30 revision 33570)\nI have a model User and observer: UserObserver.\nIn application.rb:\n\n``` ruby\nconfig.active_record.observers = :user_observer\n```\n\nAfter that i created simple rake task:\n\n``` ruby\nnamespace :foo_task do\n  desc \"Just for test\"\n  task :get_users_count => :environment do\n    puts User.all.size\n  end\nend\n```\n\nWhen i'm trying to run this rake task it shows:\n\n```\nrake aborted!\nExpected /var/www/foobarapp/app/models/user.rb to define User\n```\n\nIs there some way to fix this problem?\nThanks for help.\n", "created_at": "2012-05-10 16:18:49", "user": 71746, "id": 5629568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8069129", "text": "I have the same problem. It works when I run the code in rails console, but when I try the rake task, it has the same error as described in the ticket. I am using ruby 1.8.7 and rails 3.2.8.\n", "created_at": "2012-08-27 20:18:29", "user": 59257, "id": 8069129}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8070663", "text": "@jiongye Rails 2.3 does not receive support of any kind any more, just so you know.\n", "created_at": "2012-08-27 21:03:34", "user": 27786, "id": 8070663}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8070824", "text": "@steveklabnik sorry, I had a typo. I mean v3.2.8. \nAlso when I added \"ActiveRecord::Base\" inside my rake task, everything works.\n", "created_at": "2012-08-27 21:08:17", "user": 59257, "id": 8070824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8071689", "text": "Awesome! Thanks for clarifying.\n\nI'm going to re-open this since it was only closed in the first place due to the automatic import.\n", "created_at": "2012-08-27 21:37:04", "user": 27786, "id": 8071689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8071726", "text": "The rake task is a red herring,  it is enough to invoke rails runner Bar.\n", "created_at": "2012-08-27 21:38:12", "user": 3387, "id": 8071726}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8071905", "text": "I think the fix can be related with the eager_load work. @josevalim could you confirm?\n", "created_at": "2012-08-27 21:44:05", "user": 47848, "id": 8071905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8102335", "text": "One problem here is that the error message is misleading. The underlying issue is that there is circular autoloading going on: autoloading `Bar` triggers autoloading `BarObserver` triggers autoloading `Bar`.\n\nIn master I just pushed b33700f5580b4cd85379a1dc60fa341ac4d8deb2 to give at least a better error message.\n\nThat does not solve the issue itself, though, this is just a followup.\n", "created_at": "2012-08-28 18:39:45", "user": 3387, "id": 8102335}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8104015", "text": "Hm, also, I wonder how this will interact with the lazy observer stuff too.\n", "created_at": "2012-08-28 19:30:08", "user": 27786, "id": 8104015}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11217708", "text": "Can confirm this is an issue on 3.2.9. Adding \"ActiveRecord::Base\" works. Any plans to add the patch?\n", "created_at": "2012-12-10 21:07:22", "user": 32258, "id": 11217708}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11219775", "text": "This seems to be fixed in Rails 4.0 but not ported back to Rails 3.2.x. https://github.com/rails/rails/commit/9fa3926e4fd1c3c24a9ecc613b98cde6609f2975\n", "created_at": "2012-12-10 21:51:54", "user": 32258, "id": 11219775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11264494", "text": "@espen there is a pull request to backport that fix #7695\n", "created_at": "2012-12-11 21:16:58", "user": 47848, "id": 11264494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17782460", "text": "@espen could you try 3-2-stable? #7695 was merged.\n", "created_at": "2013-05-12 18:18:11", "user": 47848, "id": 17782460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17908318", "text": "@rafaelfranca Not using observers in my app anymore but hopefully this fixes the problem for others.\n", "created_at": "2013-05-14 22:02:58", "user": 32258, "id": 17908318}], "assignees": [3387, 3387], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6494\nCreated by **wildchild** - 2011-03-01 17:04:02 UTC\n\nThis patch adds new option --skip-action-mailer.\n", "labels": [], "number": 883, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904654, "title": "Add an option to skip Action Mailer to app generator", "url": "https://api.github.com/repos/rails/rails/issues/883", "created_at": "2011-05-16 04:39:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171301", "text": "Attachments saved to Gist: http://gist.github.com/971792\n", "created_at": "2011-05-16 04:39:58", "user": 789801, "id": 1171301}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6495\nCreated by **gamov** - 2011-03-01 17:42:08 UTC\n\nWhen using fixtures with \"Label references for associations\" (see doc activerecord/lib/active_record/fixtures.rb), the rake command rake db:fixtures:load fails to load the fixtures properly in the database. The DB column name is not translated properly and the field value isn't looked up and the label is put as the value instead of the id of the associated record.\n\nAttached an app with label references in fixtures, just type rake db:fixtures:load and see it fails:\n\nSQLite3::SQLException: table courses has no column named teacher: INSERT INTO \"courses\" (\"subject\", \"teacher\", \"created_at\", \"updated_at\", \"id\") VALUES ('Math', 'toto', '2011-03-01 16:52:15', '2011-03-01 16:52:15', 690422863)\n\nWith rails 3.0.5. Works with 2.3.10\n", "labels": [], "number": 884, "updated_at": "2012-09-19 00:58:06", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904656, "title": "rake db:fixtures:load doesn't resolve properly label references for associations", "url": "https://api.github.com/repos/rails/rails/issues/884", "created_at": "2011-05-16 04:40:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171302", "text": "_Imported from Lighthouse._\nComment by **gamov** - 2011-03-02 04:48:57 UTC\n\nWeirdly, I've created this test application because my big application that I'm migrating to rails 3 couldn't load the fixtures properly; the same way as this test app.\nToday, my big application loads the many fixtures with label references!?!\n", "created_at": "2011-05-16 04:40:04", "user": 789801, "id": 1171302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5354438", "text": "For reference and help:\nIn the linked application, the problem is that the association belongs_to :teacher is not defined in the model therefore the fixtures cannot derive the foreign key name.\n\nIn my app, the problem was an unrelated but linked class to the currently loaded fixture had an error which prevent the fixture to derive its foreign key. \n", "created_at": "2012-04-26 11:38:31", "user": 124391, "id": 5354438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8675960", "text": "I just started having this problem.  I checked my models and the associations are there, and it was working ...\n\nHmm, maybe I have something similar going on and someone is swallowing the exception.\n", "created_at": "2012-09-19 00:58:06", "user": 76243, "id": 8675960}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6496\nCreated by **parrish** - 2011-03-01 19:14:49 UTC\n\nI started digging into this when I stumbled across this SO question: http://stackoverflow.com/questions/3481406\nTo give an example of the unexpected behavior:\n\n```\nclass Container\n  attr_accessor_with_default :foo, [0, 0]\nend\n\n# This works as expected\nc = Container.new\nc.foo = [\"foo\", \"bar\"]  # => [\"foo\", \"bar\"]\nContainer.new.foo       # => [0, 0]\nc.foo[0] = 0            # => [0, \"bar\"]\nContainer.new.foo       # => [0, 0]\n\n# This changes the class default value\nc2 = Container.new\nc2.foo                  # => [0, 0]\nc2.foo[0] = \"problem!\"  # => [\"problem!\", 0]\nContainer.new.foo       # => [\"problem!\", 0]\n```\n\nI'll be submitting a patch shortly.\n", "labels": [], "number": 885, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904658, "title": "attr_accessor_with_default with collections", "url": "https://api.github.com/repos/rails/rails/issues/885", "created_at": "2011-05-16 04:40:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171303", "text": "_Imported from Lighthouse._\nComment by **parrish** - 2011-03-01 19:24:52 UTC\n\nI'm sure there is a more elegant approach to this, but I couldn't think of a simpler one that maintained scopes correctly.\nRefactoring suggestions are welcome  :)\n\nDiscarding the block option would definitely clarify the intent and code in this method, but that's just my two cents.\n", "created_at": "2011-05-16 04:40:11", "user": 789801, "id": 1171303}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171304", "text": "Attachments saved to Gist: http://gist.github.com/971794\n", "created_at": "2011-05-16 04:40:12", "user": 789801, "id": 1171304}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6497\nCreated by **Jesse Storimer** - 2011-03-01 19:39:04 UTC\n\nTrying to use mem_cache_store with libmemcached (https://rubygems.org/gems/memcached) is difficult because mem_cache_store raises a LoadError unless the memcache-client gem is available. This isn't necessary because the 'memcached' gem provides a compatible API for devs who want a faster interface to memcached, but we still have to have memcache-client installed so ActiveSupport doesn't die.\n\nThe mem_cache_store class even mentions that it's compatible with libmemcached (https://github.com/rails/rails/blob/master/activesupport/lib/active_support/cache/mem_cache_store.rb#L52-53)\n\nRails should also mention somewhere (the Guides?) to use dalli. The memcache-client gem is no longer maintained, the dalli gem is the successor and already has a AS cache store implementation included with the gem.\n\nI attached a patch that removes the re-raising of the LoadError.\n", "labels": [], "number": 886, "updated_at": "2011-08-29 16:52:44", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904659, "title": "MemCacheStore shouldn't raise without memcache-client", "url": "https://api.github.com/repos/rails/rails/issues/886", "created_at": "2011-05-16 04:40:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171305", "text": "_Imported from Lighthouse._\nComment by **jkarlsson** - 2011-04-18 17:53:16 UTC\n\nI second this patch. I'm also using the memcached gem and was surprised when I was prompted to install memcache-client. I'm currently avoiding the problem by simply having an empty lib/memcache.rb file.\n", "created_at": "2011-05-16 04:40:18", "user": 789801, "id": 1171305}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171306", "text": "Attachments saved to Gist: http://gist.github.com/971795\n", "created_at": "2011-05-16 04:40:19", "user": 789801, "id": 1171306}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1933408", "text": "This is still an issue, please reopen.\n", "created_at": "2011-08-29 16:52:44", "user": 38320, "id": 1933408}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6498\nCreated by **Ethan** - 2011-03-01 19:41:32 UTC\n\nPassing an ActiveRecord::Base instance (or any structure containing an activerecord - array, hash, etc) to the PP library's #pp method should result in a nicely-formatted, multi-line output of the record and its attributes. Instead, we get the single-line result of the #inspect method. \n\nThe attached #pretty_print method outputs a separated list (using PP's #seplist method) of each record attribute and its value. It's based on the default object pretty-printer built into PP, which outputs each instance variable and its value, but this instead outputs each attribute of the record and its value. The value is passed through pp so that if it is a serialized array or hash or whatever, that may be indented and split across multiple lines of its own.\n", "labels": [], "number": 887, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904661, "title": "ActiveRecord::Base should be pretty-printable", "url": "https://api.github.com/repos/rails/rails/issues/887", "created_at": "2011-05-16 04:40:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171307", "text": "Attachments saved to Gist: http://gist.github.com/971796\n", "created_at": "2011-05-16 04:40:25", "user": 789801, "id": 1171307}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6504\nCreated by **Joseph Palermo** - 2011-03-02 09:41:28 UTC\n\nCurrently when doing an association preload, it will respect store_full_sti_class and use sti_name for the class it is loading.\n\nHowever, all of the association code that actually sets the value of these columns uses base_class.name rather than sti_name.\n\nThis means association preloading won't work on polymorphic associations if you have store_full_sti_class disabled.\n\nThis patch creates a polymorphic_name class method that just calls base_class.sti_name and then uses that in both the association preload code, as well as when the _type column gets set in the association code.\n\nTest is included.\n", "labels": [], "number": 888, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904662, "title": "Make associations respect store_full_sti_class", "url": "https://api.github.com/repos/rails/rails/issues/888", "created_at": "2011-05-16 04:40:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171308", "text": "_Imported from Lighthouse._\nComment by **Joseph Palermo** - 2011-03-11 16:42:55 UTC\n\nLooking closer, I see a lot of calls to \"constantize\" in the associations, rather than looking up the sti_class_name.  Is store_full_sti_class supposed to apply to polymorphic type columns, or just to sti type columns?\n", "created_at": "2011-05-16 04:40:31", "user": 789801, "id": 1171308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171309", "text": "Attachments saved to Gist: http://gist.github.com/971797\n", "created_at": "2011-05-16 04:40:32", "user": 789801, "id": 1171309}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6505\nCreated by **qoobaa** - 2011-03-02 12:45:19 UTC\n\nI've spent a while looking for \"write once\" functionality in Active Record, but it seems there's anything like that at the moment. I'd expect that attr_writeonce allows to change the attribute from nil to a value (exactly once). It's similar to attr_readonly but it works for persisted records. Do you think it's useful? I can try to prepare a patch if there's a chance that it gets merged to Rails.\n\nMethod attr_readonly seems to be kind of \"badly named\". It actually allows to write a \"readonly\" attribute, but only when creating the record. I think it'd better to use something like\n\n``` ruby\nattr_writeonce :title, :on => :create\n```\n\nIMO attr_readonly shouldn't allow to change the attribute at all.\n", "labels": [], "number": 889, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904663, "title": "attr_writeonce in AR models", "url": "https://api.github.com/repos/rails/rails/issues/889", "created_at": "2011-05-16 04:40:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6506\nCreated by **Jarl Friis** - 2011-03-02 13:58:58 UTC\n\nI discovered this problem in 2.3.11 as\n\n```\nFreezing to the gems for Rails 2.3.11\nrm -rf vendor/rails\nmkdir -p vendor/rails\ncd vendor/rails\nrm -rf vendor/rails\nrake aborted!\nundefined method `version_requirements' for #<Gem::Dependency:0x0000000187c7c8>\n```\n\nSomeone at open SuSE also ran into this and even developed a patch\nhttp://lists.opensuse.org/opensuse-ruby/2011-02/msg00001.html\n", "labels": [], "number": 890, "updated_at": "2011-06-07 16:37:58", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904664, "title": "Task rails:freeze:gems not working with gem 1.5.x", "url": "https://api.github.com/repos/rails/rails/issues/890", "created_at": "2011-05-16 04:40:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1317718", "text": "This is still a problem. I'll have a pull request in a little while to fix it.\n", "created_at": "2011-06-07 16:32:51", "user": 127835, "id": 1317718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1317813", "text": "Nevermind, I see the fix in abc06a2. Will 2.3.12 be landing soon?\n", "created_at": "2011-06-07 16:37:58", "user": 127835, "id": 1317813}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6507\nCreated by **Oscar Del Ben** - 2011-03-02 14:24:59 UTC\n\nHere's my mailer model:\n\nclass Notifier < ActionMailer::Base\n  def message\n    ...\n  end\nend\n\nThe problem with this code is that it will override ActionMailer's message private instance variables, causing all kind of weird and hard to track errors. I understand that this happens because we are subclassing ActionMailer::Base, but there should at least be a warning or something.\n", "labels": [], "number": 891, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904666, "title": "Actionmailer methods should not be redefined", "url": "https://api.github.com/repos/rails/rails/issues/891", "created_at": "2011-05-16 04:40:48", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6508\nCreated by **Florent Piteau** - 2011-03-02 18:07:34 UTC\n\nIn the mail lib used by ActionMailer, there is a really usefull option for people using wildcard and/or self-signed ssl certificates for their mail server : openssl_verify_mode which can take a string value (none, peer, client_once, fail_if_no_peer_cert) or OpenSSL verify mode constant (OpenSSL::SSL::VERIFY_NONE, OpenSSL::SSL::VERIFY_PEER, ...)\n\nThis is how i'm using it :\n\n``` ruby\nActionMailer::Base.smtp_settings = {  \n  :address              => 'mail.mydomain.net',\n  :port                 => 587,  \n  :domain               => 'mydomain.net',  \n  :user_name            => 'user@mydomain.net',  \n  :password             => 'thatsasecret',  \n  :authentication       => :login,  \n  :enable_starttls_auto => true,  \n  :openssl_verify_mode  => 'none' # Only use this option for a self-signed and/or wildcard certificate\n}  \n```\n\nI think this should be mentioned in the \"Configuration options\" section of ActionMailer::Base documentation. Some people could really use it and shouldn't have to go in to the mail lib documentation to find it.\n", "labels": [], "number": 892, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904667, "title": "Undocumented ActionMailer openssl_verify_mode option", "url": "https://api.github.com/repos/rails/rails/issues/892", "created_at": "2011-05-16 04:40:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171310", "text": "_Imported from Lighthouse._\nComment by **Vijay Dev** - 2011-03-02 19:54:06 UTC\n\nHi Florent, \n\nIf you can do the documentation, you can make it directly in [docrails](https://github.com/lifo/docrails). That repo has public commit access. You can make the changes and push it there. Thanks!\n", "created_at": "2011-05-16 04:40:54", "user": 789801, "id": 1171310}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171311", "text": "_Imported from Lighthouse._\nComment by **Florent Piteau** - 2011-04-19 18:47:19 UTC\n\nFinally wrote it : https://github.com/lifo/docrails/commit/a1639ad7524127be0a9e9398dc2ccc8c6629adee\n", "created_at": "2011-05-16 04:40:56", "user": 789801, "id": 1171311}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6510\nCreated by **Marc-Andr√© Lafortune** - 2011-03-03 05:11:39 UTC\n\nI got burned by the fact that `Enumerable#index_by` does not return an Enumerator if called without block, so I took a moment to fix the issues I could find in the enumerable extension, namely:\n\n`#index_by`, `#group_by` and `#each_with_object` now return Enumerators as they should.\n\n`#many`? iterates only as much as needed to determine the result. It also doesn't rely on `#size` (which not all Enuemrables respond to).\n\nThe patch also improves the robustness of the tests. `#each_with_object` is also optimized by not capturing the block.\n\nProblems not addressed:\n- most extensions assume that the Enumerable yields only one argument.\n- the definition of `#many?` can be confusing because the form without block doesn't test for truthiness. Thus `foo.many?` is not necessarily equal to `foo.many?{|x| x}`, and `foo.any?` can be false while foo.many? can be true (e.g. `foo = [nil, nil]`). Discounting nil/false would be ideal, except that it could break compatibility, so I leave this up to the powers that be.\n## Thanks!\n\nMarc-Andr√©\n", "labels": [], "number": 893, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904668, "title": "[PATCH] core_ext/enumerable multiple fixes", "url": "https://api.github.com/repos/rails/rails/issues/893", "created_at": "2011-05-16 04:41:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171313", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2011-03-06 09:16:05 UTC\n\nHi Marc-Andr√©,\n\nI cleaned up your ticket a bit. Please be sure to wrap inline code in backticks, since starting a line with a `#` will turn it into a header. :)\n", "created_at": "2011-05-16 04:41:03", "user": 789801, "id": 1171313}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171314", "text": "Attachments saved to Gist: http://gist.github.com/971798\n", "created_at": "2011-05-16 04:41:04", "user": 789801, "id": 1171314}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6512\nCreated by **Szymon Nowak** - 2011-03-03 15:06:43 UTC\n\nRails 3.0.5:\n\n``` ruby\nclass User < ActiveRecord::Base\n  scope :a, where(:email => \"a\")\n  scope :b, where(:email => \"b\")\n\n  def self.c; where(:email => \"c\"); end\n  def self.d; where(:email => \"d\"); end\nend\n\n# scope + scope\nUser.a.b.to_sql\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"email\" = 'b' - only the last scope is present\n\n# method + scope\nUser.c.b.to_sql\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"email\" = 'b' - only the last scope is present\n\n# scope + method\nUser.a.c.to_sql\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"email\" = 'a' AND \"users\".\"email\" = 'c'\n\n# method + method\nUser.c.d.to_sql\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"email\" = 'c' AND \"users\".\"email\" = 'd'\n```\n\nWhenever there's a scope at the end of the chain, similar scopes before it are overwritten. When using class methods everything works fine.\n", "labels": [], "number": 894, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904670, "title": "AR scopes behave differently than class methods", "url": "https://api.github.com/repos/rails/rails/issues/894", "created_at": "2011-05-16 04:41:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171315", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-03 16:34:01 UTC\n\nThis is the intended behavior as looking for an email address equal to two different values will always give an empty result - [this](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/spawn_methods.rb#L34) section of code is responsible for removing the duplicates. The reason the class methods give the results that they do is they're merging the where values of AR:Relation which are already strings whereas the scope merges hashes.\n", "created_at": "2011-05-16 04:41:14", "user": 789801, "id": 1171315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171317", "text": "_Imported from Lighthouse._\nComment by **Szymon Nowak** - 2011-03-03 16:42:07 UTC\n\nOk, the example with email was maybe not very fortunate, but in case of WHERE IN clause it really is not consisten:\n\n``` ruby\nclass User < ActiveRecord::Base\n  scope :a, where(:state => [\"active\", \"confirmed\"])\n  scope :b, where(:state => [\"deleted\", \"confirmed\"])\nend\n```\n\nIf you try to use both scopes, it will return only the second one, but when you write it using where method explicitly, or using class methods, you'll get intersection of these 2 sets: WHERE IN (\"active\", \"confirmed\") AND WHERE IN (\"deleted\", \"confirmed\").\n", "created_at": "2011-05-16 04:41:16", "user": 789801, "id": 1171317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171318", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-03 17:31:17 UTC\n\nHmm, looking at this again it looks like another instance of this [bug](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/4598). What do you think Aaron? Removing the code breaks a couple of tests which are specifically testing that the later key overrides the earlier key and it would make it consistent with relation merging.\n", "created_at": "2011-05-16 04:41:17", "user": 789801, "id": 1171318}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6514\nCreated by **Mohit Jain** - 2011-03-03 23:45:55 UTC\n\nI sent attachments to Yahoo mail from a few different sources and I tried different content types, transfer encodings (e.g., Base64), different kinds of attachments, etc. The only constant I can find between those that Yahoo shows properly and those it fails on is that the successes do not use parameter folding, e.g.,\n\nSuccess\n\nContent-Disposition: attachment; filename=\"event.ics\"\n\nFail\n\nContent-Disposition: attachment;\n filename=\"event.ics\"\n\nThis (correct) folding appears to be hardwired into the mail gem that Rails uses and I didn't try another way of truly isolating it; I have to say I'd be surprised if that were really the problem.\n\nRegardless, Yahoo is rendering non-inline attachments as inline, so if this is a significant problem for your customer base, I'd take it up with Yahoo directly; maybe they'll fix it or offer you a more concrete statement about what triggers it so you can work around it. For what it's worth, Yahoo does allow the user to access the attachment correctly as it should with Content-Disposition of \"attachment\"; it's just also showing it as if the Disposition where \"inline.\"\n\nThe problem is with New yahoo mail. (Claasic yahoo, Gmail, Hotmail every where its fine.)\nDetailed stuff is present here\n\n[Stackoverflow Question](http://stackoverflow.com/questions/5062531/rails-3-actionmailer-attachments-incorrectly-shown-inline-by-yahoo-mail/ \"Stackoverflow Question\"\n", "labels": [], "number": 895, "updated_at": "2011-05-21 15:12:29", "user": 789801, "closed_at": "2011-05-21 15:12:29", "id": 904673, "title": "Rails 3 ActionMailer attachments incorrectly shown inline by Yahoo! Mail", "url": "https://api.github.com/repos/rails/rails/issues/895", "created_at": "2011-05-16 04:41:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171319", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-04 07:26:23 UTC\n\nThe [RFC](http://tools.ietf.org/html/rfc2183) talks about parameter values of less than 78 characters being presented as a single token - what happens if you send a file with a really long name?\n", "created_at": "2011-05-16 04:41:24", "user": 789801, "id": 1171319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171320", "text": "Attachments saved to Gist: http://gist.github.com/971799\n", "created_at": "2011-05-16 04:41:25", "user": 789801, "id": 1171320}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6520\nCreated by **Jigar Patel** - 2011-03-04 12:40:13 UTC\n\nHello,\n\nI have been researching on using multiple Postgres schemas in a single rails app. One option is to develop the entire app in one schema (default schema) and then create other shemas and dump the database structure in them. Other option is to support running migrations in specified schema and maintain the schema_migrations table in each schema.\n\nI have made some patches, but I am not sure of the correctness of the approach. Here is what I have done -\n1. Modify this method - ActiveRecord::Migrator.schema_migrations_table_name - to return the sm_table name as schema_name.table_name if the adapter is PostgreSQL.\n2. Add an option of specifying the schema name in migration rake tasks.\n\nThis would result in this flow -\nrake db:migrate SCHEMA=demo\n\nRake tasks will have following steps -\na) Set current schema search path\nb) Run the migration (as it is done now)\nc) Set schema_search_path to old schema search path.\n\nNow a developer can develop in a \"dev\" schema, and run the migration in any specified schema or all the schemas.\n\nCan somebody guide me, so that I can write test cases for this?\n", "labels": [], "number": 896, "updated_at": "2011-10-11 08:28:23", "user": 789801, "closed_at": "2011-05-21 15:12:30", "id": 904675, "title": "Running migrations in different PostgreSQL schemas is inconsistent", "url": "https://api.github.com/repos/rails/rails/issues/896", "created_at": "2011-05-16 04:41:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2358911", "text": "??? it's bug or normal?\n", "created_at": "2011-10-11 08:28:23", "user": 357671, "id": 2358911}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6521\nCreated by **Steve Hodgkiss** - 2011-03-04 14:33:23 UTC\n\nI'm trying to use the AppGenerator inside an engine, and the copy_file method is going directly to fileutils instead of using the thor actions method. The error is on master, it works on 3.0.5.\n\nrake generate looks something like this:\n\n```\nrequire 'rails/generators'\nrequire 'rails/generators/rails/app/app_generator'\n\nclass TestAppGenerator < Rails::Generators::AppBase\n  source_root File.expand_path(\"../templates\", __FILE__)\n\n  def run_rails_new\n    invoke Rails::Generators::AppGenerator, [\"spec/dummy\"]\n  end\n  ...\nend\nTestAppGenerator.start\n\n% rake generate --trace\n(in /Users/steve/code/engine_test)\n** Invoke generate (first_time)\n** Execute generate\n       exist  \nrake aborted!\nwrong number of arguments (1 for 2)\n/Users/steve/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/fileutils.rb:471:in `copy_file'\n/Users/steve/code/rails/railties/lib/rails/generators/rails/app/app_generator.rb:33:in `readme'\n/Users/steve/code/rails/railties/lib/rails/generators/app_base.rb:85:in `build'\n/Users/steve/code/rails/railties/lib/rails/generators/rails/app/app_generator.rb:181:in `create_root_files'\n/Users/steve/.rvm/gems/ruby-1.9.2-p180/gems/thor-0.14.6/lib/thor/task.rb:22:in `run'\n```\n\nUsing git diff I've tracked it down to the removal of a bunch of methods being defined in 3.0.5 which are removed in master.\n\ngit diff v3.0.5..master railties/lib/rails/generators/rails/app/app_generator.rb\n\n0904e8256864239f673bf91fce1cfffb9345ee61 - This is the commit that stops it working, although I find it strange that it's from October last year and it's not in the 3.0.5 release. Maybe I'm looking at the wrong commit.\n\nIn any case adding the method definitions back solves the problem I'm having. I can't figure out why it fails in this case but works fine through the rails command though...\n\nThanks\n", "labels": [], "number": 897, "updated_at": "2011-05-21 15:12:30", "user": 789801, "closed_at": "2011-05-21 15:12:30", "id": 904676, "title": "Problem running app generator standalone", "url": "https://api.github.com/repos/rails/rails/issues/897", "created_at": "2011-05-16 04:41:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171323", "text": "_Imported from Lighthouse._\nComment by **Steve Hodgkiss** - 2011-03-06 14:09:36 UTC\n\nThis is due running it with rake, where FileUtils is included into the top level module causing method_missing not to be used on Rails::ActionMethods.\n\nI've put an example on github that demonstrates this - https://github.com/stevehodgkiss/rails-ticket-8994\n", "created_at": "2011-05-16 04:41:37", "user": 789801, "id": 1171323}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171324", "text": "Attachments saved to Gist: http://gist.github.com/971800\n", "created_at": "2011-05-16 04:41:38", "user": 789801, "id": 1171324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1189436", "text": "This was fixed by commit 00379ee998b5ed10d8a4197f3fa0f57873f17ba1\n", "created_at": "2011-05-17 09:53:18", "user": 62331, "id": 1189436}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6522\nCreated by **Clemens Kofler** - 2011-03-04 16:45:14 UTC\n\nIn contrast to most other view helpers, distance_of_time_in_words and time_ago_in_words still use a named argument (include_seconds). I propose to get things in line with the rest and pass :include_seconds => true/false as part of an options hash.\n\n```\n# old\ndistance_of_time_in_words(19.seconds.ago, Time.current, true) # => less than 20 seconds\ntime_ago_in_words(19.seconds.ago, true) # => less than 20 seconds\n\n# new\ndistance_of_time_in_words(19.seconds.ago, Time.current, :include_seconds => true) # => less than 20 seconds\ntime_ago_in_words(19.seconds.ago, :include_seconds => true) # => less than 20 seconds\n```\n\nAlthough there's a little more typing, I'd argue that it's less surprising.\n\nA patch is attached. All tests are green and the patch also adds new tests (same as the old ones with just the argument swapped out for a hash). I've also updated the documentation and added a deprecation warning.\n", "labels": [], "number": 898, "updated_at": "2011-05-21 15:12:30", "user": 789801, "closed_at": "2011-05-21 15:12:30", "id": 904677, "title": "distance_of_time_in_words / time_ago_in_words shouldn't use named arguments", "url": "https://api.github.com/repos/rails/rails/issues/898", "created_at": "2011-05-16 04:41:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171325", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-03-13 17:32:16 UTC\n\nI'm +1 on this and it applies cleanly to master, but it creates a lot of noise in the test suite currently. Can you update the test suite to comply with your new contract?\n", "created_at": "2011-05-16 04:41:44", "user": 789801, "id": 1171325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171326", "text": "_Imported from Lighthouse._\nComment by **Clemens Kofler** - 2011-03-13 21:24:36 UTC\n\nSure ‚Äì I just left the old tests untouched to ensure things still work. They are removed in the attached patch. I've also rebased against the current master.\n", "created_at": "2011-05-16 04:41:45", "user": 789801, "id": 1171326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171327", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-03-14 16:09:46 UTC\n\na model patch. Applies cleanly to master and appears well documented.\n\nThanks Clemens. Assigning to Santiago for his review and signoff.\n", "created_at": "2011-05-16 04:41:46", "user": 789801, "id": 1171327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171328", "text": "_Imported from Lighthouse._\nComment by **Clemens Kofler** - 2011-05-02 14:57:22 UTC\n\nAny news on that one? Not that there's any time pressure on it but I don't want it to become stale. :)\n", "created_at": "2011-05-16 04:41:48", "user": 789801, "id": 1171328}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171329", "text": "Attachments saved to Gist: http://gist.github.com/971801\n", "created_at": "2011-05-16 04:41:49", "user": 789801, "id": 1171329}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6523\nCreated by **Todd Huss** - 2011-03-04 18:02:16 UTC\n\nThe problem I'm seeing is that rake db:create always reports \"database already exists\" on sqlite3 regardless of whether it does or not:\n\n``` bash\n> rails new rails-test\n> cd rails-test\n> rake db:create\n(in /Users/me/src/rails-test)\ndb/test.sqlite3 already exists\ndb/development.sqlite3 already exists\n> rake db:drop\n(in /Users/me/src/rails-test)\n> rake db:create\ndb/test.sqlite3 already exists\ndb/development.sqlite3 already exists\n```\n\nThe problem lies in databases.rake because all the other database attempt to connect and then actually create the database in the rescue clause thereby skipping the final else clause. Whereas SQLite3 is handled before the rescue clause so even when it successfully creates the database it still drops into the else clause on the last line of the create_databases method which prints database already exists. My suggested fix would be to put an unless on the puts:\n\n``` ruby\n    else\n      $stderr.puts \"#{config['database']} already exists\" unless config['adapter'] =~ /sqlite/\n    end\n```\n\nI'm on a Mac running Ruby 1.9.2p0.\n", "labels": [], "number": 899, "updated_at": "2011-07-24 16:22:15", "user": 789801, "closed_at": "2011-05-21 15:12:30", "id": 904678, "title": "SQLite3 incorrectly reports database already exists on db:create ", "url": "https://api.github.com/repos/rails/rails/issues/899", "created_at": "2011-05-16 04:41:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171330", "text": "_Imported from Lighthouse._\nComment by **Todd Huss** - 2011-03-04 19:09:26 UTC\n\nI should add that this issue is specific to all versions of Ruby 1.9.2 that I tested (including the latest 1.9.2p136). To see the problem in action:\n\n``` ruby\ndef return_still_calls_else \n  begin\n    return\n  rescue\n    puts 'rescue'\n  else\n    puts 'else'\n  end\nend\n\nreturn_still_calls_else\n```\n\nIn ruby 1.8 when you call this nothing gets printed but in ruby 1.9.2 it prints 'else' when you run it.\n", "created_at": "2011-05-16 04:41:55", "user": 789801, "id": 1171330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171331", "text": "Attachments saved to Gist: http://gist.github.com/971802\n", "created_at": "2011-05-16 04:41:57", "user": 789801, "id": 1171331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214638", "text": "It's working fine. Must be closed.\n", "created_at": "2011-05-21 15:11:22", "user": 3948, "id": 1214638}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1620204", "text": "When I did this tonight on Rails 3.1.0.rc4 :\n    rails new project1\n    cd project1\n    rake db:create\nI get this:\n    db/test.sqlite3 already exists\n    db/development.sqlite3 already exists\n\nBut I am trying to create brand new databases. I did not do any other command but the above 3.\n", "created_at": "2011-07-21 00:04:55", "user": 43523, "id": 1620204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1636445", "text": "created a pull request here for now. It should be return in a different way.\n\nhttps://github.com/rails/rails/pull/2172\n", "created_at": "2011-07-23 04:15:34", "user": 3948, "id": 1636445}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1640797", "text": "FYI: Verified on 3.1.0.rc4.\n", "created_at": "2011-07-24 13:41:32", "user": 43523, "id": 1640797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1640800", "text": "@jasnow it's fixed in master and 3-1-stable. \n", "created_at": "2011-07-24 13:42:49", "user": 3948, "id": 1640800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1641240", "text": "Thanks for the clarification.\n", "created_at": "2011-07-24 16:22:15", "user": 43523, "id": 1641240}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6524\nCreated by **Chris Anderson** - 2011-03-04 18:49:49 UTC\n\nI'm tracking down performance issues in my app with Rails 3/Ruby 1.8.7. Found a strange issue with a select helper.\n\nIn my Job model...\n\n```\ndef self.provinces\n  [\"AB\", \"BC\", \"SK\"]\nend\n```\n\nIn my view I have in a single form...\n\n```\n<%= select 'time', 'class_code', Job.provinces, {:prompt => true}, {:class => \"quick_entry_field\"} %>\n```\n\nResults in...\n\n```\nCompleted 200 OK in 2481ms (Views: 2312.6ms | ActiveRecord: 3.3ms | Sphinx: 0.0ms)\n```\n\nIf I comment out the select I get...\n\n```\nCompleted 200 OK in 435ms (Views: 265.0ms | ActiveRecord: 2.6ms | Sphinx: 0.0ms)\n```\n\nIf I change the select to...\n\n```\n<%= select 'time', 'class_code', [\"AB, \"BC\", \"SK\"], {:prompt => true}, {:class => \"quick_entry_field\"} %>\n```\n\nI get...\n\n```\nCompleted 200 OK in 460ms (Views: 185.4ms | ActiveRecord: 2.7ms | Sphinx: 0.0ms)\n```\n\nSo I see a 2 second increase in the time to fetch a simple array from the Job model. I freely admit I'm not a super experienced developer but I didn't see this issue in Rails 2.3.8 so it's baffling to me.\n\nThanks,\n\nChris\n", "labels": [], "number": 900, "updated_at": "2011-05-21 15:12:30", "user": 789801, "closed_at": "2011-05-21 15:12:30", "id": 904679, "title": "strange behaviour with select and model method", "url": "https://api.github.com/repos/rails/rails/issues/900", "created_at": "2011-05-16 04:42:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6527\nCreated by **cschiefelbein** - 2011-03-04 20:24:09 UTC\n\nvalidate_uniqueness_of does not quote scoped values when constructing the SQL query, so if the scoped column happens to be text, you get a PGError. (PostgreSQL 8.2 server did not complain)\n\n```\nclass Group < ActiveRecord::Base\n\n  # name, section, and subsection are all text columns\n  validates_uniqueness_of :name, :scope => [:section, :subsection]\n\nend\n\nclass GroupTest < ActiveSupport::TestCase\n  # blows up with PGError\n  should validate_uniqueness_of(:name).scoped_to([:section, :subsection])\nend\n```\n\nHere is the specific error from the database:\n\n```\nActiveRecord::StatementInvalid: PGError: ERROR:  operator does not exist: character varying = integer\nLINE 1: ...\"groups\".\"name\" = E'09-01' AND \"groups\".section = 1 AND \"g...\n                                                             ^\nHINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.\n```\n\nI have written a patch against ActiveRecord::Validations (see attached). I would gladly write tests too, but I'm running on Gentoo, which does not know about libxml2-dev or libxslt1-dev, and \"gem install bundler\" is timing out right now, too. So I don't have a formal test setup (but my patch works in the above case).\n", "labels": [], "number": 901, "updated_at": "2011-05-21 15:12:30", "user": 789801, "closed_at": "2011-05-21 15:12:30", "id": 904681, "title": "validate_uniqueness_of (2.3.5) with scoping broken against PostgreSQL 9.0", "url": "https://api.github.com/repos/rails/rails/issues/901", "created_at": "2011-05-16 04:42:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171333", "text": "Attachments saved to Gist: http://gist.github.com/971803\n", "created_at": "2011-05-16 04:42:08", "user": 789801, "id": 1171333}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6530\nCreated by **Matt Ryall** - 2011-03-05 06:14:19 UTC\n\nWorking on a new machine, I didn't have git installed when I was trying to install a rails plugin. Unfortunately, the plugin installation fails silently with no indication of what is happening:\n\n```\n$ r plugin install git://github.com/toland/app_version.git\n$\n```\n\nIt would be great if this failed with a meaningful message instead. Even just 'git is not installed' would do it.\n\nSeveral other people have also had the same problem:\n- http://stackoverflow.com/questions/231390/installing-a-rails-plugin-from-a-git-repository\n- http://stackoverflow.com/questions/1658139/plugins-not-getting-properly-installed\n", "labels": [], "number": 902, "updated_at": "2011-05-21 15:12:30", "user": 789801, "closed_at": "2011-05-21 15:12:30", "id": 904682, "title": "Plugin install from Github should fail with a message if Git is not installed", "url": "https://api.github.com/repos/rails/rails/issues/902", "created_at": "2011-05-16 04:42:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171334", "text": "_Imported from Lighthouse._\nComment by **Eian Counts** - 2011-03-08 04:45:35 UTC\n\nFor what it is worth, attached a patch that checks (also looks for svn). \n\nAlso created a pull request at https://github.com/rails/rails/pull/208.\n", "created_at": "2011-05-16 04:42:14", "user": 789801, "id": 1171334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171335", "text": "Attachments saved to Gist: http://gist.github.com/971804\n", "created_at": "2011-05-16 04:42:15", "user": 789801, "id": 1171335}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6531\nCreated by **Timur Poperecinii** - 2011-03-05 08:02:23 UTC\n\nI'm using Windows Vista,\nand when I was recently updating my gems I had this error:\n\nInstalling ri documentation for activerecord-3.0.5...\nERROR:  While generating documentation for activerecord-3.0.5\n... MESSAGE:   Invalid argument - ./</cdesc-<.ri\n... RDOC args: --ri --op c:/rubies/Ruby192-p136/lib/ruby/gems/1.9.1/doc/activerecord-3.0.5/ri --main README.rdoc lib README.rdoc --title\n --quiet\n", "labels": [], "number": 903, "updated_at": "2011-05-21 15:12:30", "user": 789801, "closed_at": "2011-05-21 15:12:30", "id": 904683, "title": "Bug at installing ActiveRecord RI on a Winows machine", "url": "https://api.github.com/repos/rails/rails/issues/903", "created_at": "2011-05-16 04:42:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6532\nCreated by **Arik Fraimovich** - 2011-03-05 08:32:24 UTC\n\nI have the following code:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  default_scope :order => 'created_at DESC'\n\n  has_many :replies, :class_name => 'Post', :foreign_key=>\"parent_id\", :order=>\"created_at ASC\"\nend\n```\n\nIn Rails 2.3.8 when I was retrieving the replies (i.e. `post.replies`) I got them in the correct order. But in Rails 3.0.4 I get them in descending order, as if the order clause in the has_many association has no effect. When I checked the SQL resulting from this call I saw that it was generating the following:\n\n``` sql\nSELECT `posts`.* FROM `posts` WHERE (`posts`.parent_id = 514) ORDER BY created_at desc, created_at ASC\n```\n\nWhile this behavior makes sense when the order is using two different fields, in case it is the same field it should just override the one in default scope.\n\nThis behavior is somewhat similar to ticket #2346, but there it was referencing Rails 2.3 and I wasn't it is exactly the same.\n", "labels": [], "number": 904, "updated_at": "2013-03-12 18:15:01", "user": 789801, "closed_at": "2011-05-21 15:12:30", "id": 904685, "title": "default_scope doesn't let override the order", "url": "https://api.github.com/repos/rails/rails/issues/904", "created_at": "2011-05-16 04:42:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14793109", "text": "Note that while fixed, you need to use the arel syntax for the scope (`default_scope order('created_at DESC')`)\n", "created_at": "2013-03-12 18:15:01", "user": 15466, "id": 14793109}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6534\nCreated by **Marc-Andr√© Lafortune** - 2011-03-05 20:51:35 UTC\n\nIf `foo.eql?(bar)` returns `true` then so should `bar.eql?(foo)`.\nMoreover, `foo.hash` must then be the same as `bar.hash`.\nOtherwise the `Hash` lookup will fail. `TimeWithZone` want to act like a `Time`, but currently:\n\n```\nbar = Time.utc(2000)\nfoo = bar.in_time_zone\n\nfoo.eql?(bar) # => true\nbar.eql?(foo) # => false\nfoo.hash == bar.hash # => false (only in Ruby 1.9)\n```\n\nThe attached patch fixes this. Since TimeWithZone wants to be freely replaceable with a Time:\n\n```\nbar.eql?(foo) # => now true\nfoo.hash == bar.hash # => now true (even in Ruby 1.9)\n```\n\nThere is also a problem with DateTime vs TimeWithZone:\n\n```\ndt = foo.to_datetime\nfoo.eql?(dt)  # => true\ndt.eql?(foo)  # => false\ndt.hash == foo # => false.\n```\n\nSince `DateTime` and a `Time` are both builtin classes and that a `Time` is never `eql?` to a `DateTime` or vice-versa (as per the doc and the implementation), the patch also insures that a `TimeWithZone` can not be eql? to a `DateTime`:\n\n```\nfoo.eql?(dt)  # => now false\n```\n\nThanks\n", "labels": [], "number": 905, "updated_at": "2011-05-21 15:12:31", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904686, "title": "[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}", "url": "https://api.github.com/repos/rails/rails/issues/905", "created_at": "2011-05-16 04:42:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171336", "text": "_Imported from Lighthouse._\nComment by **Pan Thomakos** - 2011-03-12 01:26:38 UTC\n\nIt seems to me that these objects should behave like regular ruby objects do. For instance:\n\n```\n10 == 10.00 # Same value\n=> true\n10.eql?(10.00) # Same value different type\n=> false\n```\n\nUsing the latter code as an example, I would expect Time and TimeWithZone to behave like this:\n\n```\nbar = Time.utc(2000)\nfoo = bar.in_time_zone\nfoo.eql?(bar)\n=> false\nbar.eql?(foo)\n=> false\n```\n\nIt seems like making eql? more lenient is removing that flexibility in testing for types. I do believe that `foo.eql?(bar)` should produce the same result as `bar.eql?(foo)`, but I think that if foo and bar are of different types (Time) and (ActiveSupport::TimeWithZone) the eql? comparison should resolve to false.\n", "created_at": "2011-05-16 04:42:33", "user": 789801, "id": 1171336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171338", "text": "_Imported from Lighthouse._\nComment by **Marc-Andr√© Lafortune** - 2011-03-12 18:28:58 UTC\n\n`Floats` and `Integers` are quite different: there is no bijection between them and they don't respond to the same methods (e.g. you can't do `10.0.times{}`).\n\nNote that regular objects do not distinguish class with `eql?`:\n\n```\nclass MyString < String; end\nMyString.new(\"foo\").eql?(\"foo\") # => true\n```\n\nIn any case, one shouldn't care about class/type but about what objects respond to.\n\nUnless I'm mistaken, TimeWithZone is the same as Time, except that it allows for a timezone information and that timezone information is not considered when doing comparisons.\n\n`TimeWithZone` is meant to be so similar to a `Time` that `TimeWithZone#to_time` returns... a `TimeWithZone`. My impression is that one shouldn't have to care too much about what is a `Time` and what is a `TimeWithZone`; I'd like to use Hash lookups without caring either.\n\nThanks.\n", "created_at": "2011-05-16 04:42:34", "user": 789801, "id": 1171338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171340", "text": "_Imported from Lighthouse._\nComment by **Pan Thomakos** - 2011-03-12 20:29:31 UTC\n\nWhat you write makes sense. After taking a look at the class documentation this does seem to be the intent.\n\nI like your implementation, it's simple and elegant, and I was able to get tests to pass in both 1.9.2 and 1.8.7.\n\nYou mentioned that your patch ensures that TimeWithZone cannot eql? a DateTime. Unless I am mistaken I didn't see a test for this. Would it be worth adding one?\n", "created_at": "2011-05-16 04:42:35", "user": 789801, "id": 1171340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171341", "text": "_Imported from Lighthouse._\nComment by **Marc-Andr√© Lafortune** - 2011-03-13 19:48:33 UTC\n\nThanks for testing on your side.\n\nYes, it could be worthwhile to add a test as you suggest.\n", "created_at": "2011-05-16 04:42:37", "user": 789801, "id": 1171341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171342", "text": "_Imported from Lighthouse._\nComment by **Ryan Orr** - 2011-03-21 02:49:12 UTC\n\nI too ran the code that you made and thought it made sense. I added the test that Pan Thomakos discussed in this updated patch.\n", "created_at": "2011-05-16 04:42:38", "user": 789801, "id": 1171342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171343", "text": "Attachments saved to Gist: http://gist.github.com/971805\n", "created_at": "2011-05-16 04:42:39", "user": 789801, "id": 1171343}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6535\nCreated by **Casey Dreier** - 2011-03-05 21:23:59 UTC\n\nCalling a dynamic find_or_create_by_ method on an association always ends up creating a new record because it improperly queries the database when attempting to find the record with the given values.\n\nAttached is a test on a has_many association demonstrating this problem, as well as a simple patch that fixes it (spoiler: the finder arguments were passed incorrectly from a recent patch on this method).\n", "labels": [], "number": 906, "updated_at": "2011-05-21 15:12:31", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904688, "title": "find_or_create_by on an association always creates new records", "url": "https://api.github.com/repos/rails/rails/issues/906", "created_at": "2011-05-16 04:42:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171344", "text": "_Imported from Lighthouse._\nComment by **Casey Dreier** - 2011-03-05 21:28:05 UTC\n\nJust to be clear, this bug report and patch are for Rails 2.3.11.\n", "created_at": "2011-05-16 04:42:45", "user": 789801, "id": 1171344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171345", "text": "_Imported from Lighthouse._\nComment by **Jon Jensen** - 2011-03-22 19:44:14 UTC\n\nIn addition to the incorrect behavior, it can also cause unhandled exceptions for postgres. For example, company.employees.find_or_create_by_group_id_and_name(1, 'bob') would generate some SQL like \"... group_id IN (1, 'bob') AND name IS NULL\". In postgres you get an error, since 'bob' hasn't been explicitly cast to an integer.\n", "created_at": "2011-05-16 04:42:47", "user": 789801, "id": 1171345}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171346", "text": "_Imported from Lighthouse._\nComment by **Leon Miller-Out** - 2011-03-25 19:39:07 UTC\n\n+1\n", "created_at": "2011-05-16 04:42:48", "user": 789801, "id": 1171346}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171348", "text": "Attachments saved to Gist: http://gist.github.com/971806\n", "created_at": "2011-05-16 04:42:49", "user": 789801, "id": 1171348}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6536\nCreated by **Marc-Andr√© Lafortune** - 2011-03-05 21:29:51 UTC\n\nFixtures created by the rails generators are usually valid, except if STI is used. Indeed, the default value `\"MyString\"` is not appropriate for a column of name `\"type\"`.\n\nThis patch changes the default value to `\"\"` for columns with the special name `type`.\n\nThanks\n", "labels": [], "number": 907, "updated_at": "2011-05-21 15:12:31", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904690, "title": "[PATCH] Fix fixture default value for 'type' column", "url": "https://api.github.com/repos/rails/rails/issues/907", "created_at": "2011-05-16 04:42:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171349", "text": "Attachments saved to Gist: http://gist.github.com/971807\n", "created_at": "2011-05-16 04:42:55", "user": 789801, "id": 1171349}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6537\nCreated by **jmoses** - 2011-03-06 01:54:08 UTC\n\nIf you have a helper that `require`'s a file that doesn't exist, you get an error message that is confusing, and wrong.\n\nfile: app/helpers/example_helper.rb\n    require 'md5'\n    module ExampleHelper\n    end\n\nwill generate an error like:\n\n/Users/jmoses/.rvm/gems/ruby-1.9.2-p136@gemset/gems/activesupport-3.0.4/lib/active_support/dependencies.rb:304:in `rescue in depend_on': Missing helper file helpers/md5.rb (LoadError)\nfrom /Users/jmoses/.rvm/gems/ruby-1.9.2-p136@shotrunner/gems/activesupport-3.0.4/lib/active_support/dependencies.rb:299:in`depend_on'\n\nWhere the 'md5' above is replaced by whatever file can't be found.  It's confusing, and incorrect, it should either bubble the load error up, or indicate there's an error in that particular helper.\n", "labels": [], "number": 908, "updated_at": "2011-05-21 15:12:31", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904692, "title": "Loading a helper that generates a load error gives a confusing error message", "url": "https://api.github.com/repos/rails/rails/issues/908", "created_at": "2011-05-16 04:43:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6541\nCreated by **Jarl Friis** - 2011-03-07 20:34:12 UTC\n\nWhen I use request.inspect in controller, integration tests fail with following stack trace in log file:\n    # Logfile created on 2011-03-07 19:38:24 +0100\n\n```\nProcessing PostsController#index (for 127.0.0.1 at 2011-03-07 19:38:25) [GET]\n\nRuntimeError (can't add a new key into hash during iteration):\n  app/controllers/posts_controller.rb:5:in `inspect'\n  app/controllers/posts_controller.rb:5:in `inspect'\n  app/controllers/posts_controller.rb:5:in `index'\n  <internal:prelude>:10:in `synchronize'\n  test/integration/general_stories_test.rb:8:in `block in <class:GeneralStoriesTest>'\n  /home/jarl/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/minitest/unit.rb:680:in `run'\n  /home/jarl/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/minitest/unit.rb:641:in `block (2 levels) in run_test_suites'\n  /home/jarl/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/minitest/unit.rb:635:in `each'\n  /home/jarl/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/minitest/unit.rb:635:in `block in run_test_suites'\n  /home/jarl/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/minitest/unit.rb:634:in `each'\n  /home/jarl/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/minitest/unit.rb:634:in `run_test_suites'\n  /home/jarl/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/minitest/unit.rb:594:in `run'\n  /home/jarl/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/minitest/unit.rb:492:in `block in autorun'\n\nRendered rescues/_trace (66.6ms)\nRendered rescues/_request_and_response (1.6ms)\nRendering rescues/layout (internal_server_error)\n```\n\nI will link to a small github project soon\n", "labels": [], "number": 909, "updated_at": "2011-05-21 15:12:31", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904693, "title": "request.inspect does not work in ruby 1.9.2", "url": "https://api.github.com/repos/rails/rails/issues/909", "created_at": "2011-05-16 04:43:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171350", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2011-03-07 21:26:59 UTC\n\nI have created a small github project that demonstrates the bug on https://github.com/jarl-dk/rails_ticket6541\n\nthe project is created with\n    rails rails_ticket6541\n    cd rails_ticket6541\n    ./script generate scaffold post\n    ./script generate integration_test GeneralStories\n\nAnd then applied commit [5c0531783142132a285cb4330c5710308239d3a7]([local path to private key half of github public key you provided])\n\nIt is interesting to note that only the integration test fails, not the functional test.\nNote also that it only fails with ruby 1.9.2 (not ruby 1.8.x)\n\nJarl\n", "created_at": "2011-05-16 04:43:06", "user": 789801, "id": 1171350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171351", "text": "_Imported from Lighthouse._\nComment by **Jarl Friis** - 2011-03-08 07:19:27 UTC\n\nI forgot to mention... When start the server with `./script/server` and hit http://localhost:3000/posts, I get\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/cookie_store.rb:155:in `[]='\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/cookie_store.rb:155:in`unpacked_cookie_data'\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/cookie_store.rb:138:in `extract_session_id'\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/abstract_store.rb:36:in`load_session_id!'\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/abstract_store.rb:24:in `[]'\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/cookie_store.rb:147:in`current_session_id'\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/cookie_store.rb:151:in `exists?'\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/abstract_store.rb:107:in`exists?'\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/abstract_store.rb:124:in `load_for_read!'\n    /home/jarl/.rvm/gems/ruby-1.9.2-p136@minimal/gems/actionpack-2.3.11/lib/action_controller/session/abstract_store.rb:101:in`inspect'\n    /home/jarl/Private/nokia/projects/bug_demo/app/controllers/posts_controller.rb:6:in `inspect'\n    /home/jarl/Private/nokia/projects/bug_demo/app/controllers/posts_controller.rb:6:in`inspect'\n    /home/jarl/Private/nokia/projects/bug_demo/app/controllers/posts_controller.rb:6:in `index'\n", "created_at": "2011-05-16 04:43:07", "user": 789801, "id": 1171351}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6542\nCreated by **Thomas Fritzsche** - 2011-03-07 22:43:20 UTC\n\nHello Rails-Hackers,\n\nI'm just in process creating some rack-middleware where I try to adjust env[\"SCRIPT_NAME\"] before Rails get's called in order to influence the way links are generated.\nSCRIPT_NAME is defined by Rack as:\n\"SCRIPT_NAME:   The initial portion of the request URL‚Äôs ‚Äúpath‚Äù that corresponds to the application object, so that the application knows its virtual ‚Äúlocation‚Äù. This may be an empty string, if the application corresponds to the ‚Äúroot‚Äù of the server.\"\n\nSo if my app is in www.host.com/my_rails_webapp/ SCRIPT_SERVER it's \"/my_rails_webapp\".\n\nI assume if I overwrite this value in my rack middleware than rails should respect this during link-generation.\nHowever this does not work for me as I expected. I'm just hobby rails programer so by Rails debugging scrills are limited, but it looks like Rails is not using SCRIPT_NAME, but instead is using \"config.relative_url_root\" in Application Controller's.\n\nI try to make a sense out of the rails source greb'ing after string SCRIPT_NAME, but I just come up with actionpack/lib/action_controller/metal/compatibility.rb  that has:\n\n---\n\n```\n  # ROUTES TODO: This should be handled by a middleware and route generation\n  # should be able to handle SCRIPT_NAME\n  self.config.relative_url_root = ENV['RAILS_RELATIVE_URL_ROOT']\n```\n\n---\n\nWell.... I can just agree with the author: I think this should use SCRIPT_NAME. Sorry when my rails's skills are not good enough to provide a patch for this TODO or if I have overlooked something.\n\nThanks a lot!\nThomas\n", "labels": [], "number": 910, "updated_at": "2012-03-06 00:50:49", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904694, "title": "Rails is not a Rack Application (SCRIPT_NAME vs. relative_url_root ?)", "url": "https://api.github.com/repos/rails/rails/issues/910", "created_at": "2011-05-16 04:43:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4335571", "text": "I'm having the same problem.  A patch is forthcoming.\n", "created_at": "2012-03-06 00:49:02", "user": 99377, "id": 4335571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4335601", "text": "See https://github.com/rails/rails/pull/5296\n", "created_at": "2012-03-06 00:50:48", "user": 99377, "id": 4335601}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6543\nCreated by **Ben Johnson** - 2011-03-08 03:47:32 UTC\n\nI found a rather serious problem with named scopes in ActiveRecord 2.3.X. After analyzing my logs I noticed that chaining named scopes actually executes extra unscoped queries along the way. Which is a big deal, especially if they are loading thousands of records.\n\nThe fix is actually very easy, but it involved removing code, and I have no idea what the purpose of the code is. Take the original method:\n\n  def named_scope(name, options = {}, &block)\n    name = name.to_sym\n\n```\nscopes[name] = lambda do |parent_scope, *args|\n  Scope.new(parent_scope, case options\n    when Hash\n      options\n    when Proc\n      if self.model_name != parent_scope.model_name\n        options.bind(parent_scope).call(*args)\n      else\n        options.call(*args)\n      end\n  end, &block)\nend\n\nsingleton_class.send :define_method, name do |*args|\n  scopes[name].call(self, *args)\nend\n```\n\n  end\n\nNotice this line:\n\n  if self.model_name != parent_scope.model_name\n\nThe \"parent_scope.model_name\" actually executes a query, because parent scope can be a proxy that delegates its method calls off to the query result. So doing something like:\n\n  user = User.first\n  user.orders.state_equals(\"pending\").total_greater_than(100).count\n\nThe last line should execute a single \"count\" query. Instead, because of line mentioned above, it actually executes a \"select all\" for the users orders with state \"pending\". Then it executes the count query.\n\nThe fix ix very easy. Change this:\n\n  if self.model_name != parent_scope.model_name\n    options.bind(parent_scope).call(_args)\n  else\n    options.call(_args)\n  end\n\nTo this:\n\n  if self.model_name != parent_scope.model_name\n    options.bind(parent_scope).call(_args)\n  else\n    options.call(_args)\n  end\n\nAgain, I have no idea what the line in question does. Hence the reason I didn't create a pull request on github.\n", "labels": [], "number": 911, "updated_at": "2011-05-21 15:12:31", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904697, "title": "Chaining named scopes executes an unnecessary query.", "url": "https://api.github.com/repos/rails/rails/issues/911", "created_at": "2011-05-16 04:43:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6545\nCreated by **Elias Baixas** - 2011-03-08 17:54:15 UTC\n\nin rails-2.3.11/lib/rails/plugin/loader.rb method \"plugins\", the instance variable @plugins is cached (@plugins||= ...)\n\nthis method (plugins) is called from within the add_plugin_load_paths as seen in this backtrace:\n\n \"/opt/local/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/plugin/loader.rb:24:in `plugins'\",\n \"/opt/local/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/plugin/loader.rb:56:in`add_plugin_load_paths'\",\n \"/opt/local/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:294:in `add_plugin_load_paths'\",\n \"/opt/local/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:136:in`process'\",\n \"/opt/local/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:113:in `send'\",\n \"/opt/local/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:113:in`run'\",\n \"/Users/elias/src/ruby/prueba/config/environment.rb:23\",\n\nsince \"add_plugin_load_paths\" is called before \"load_environment\" in Rails::Initializer.process:\n\n```\ndef process\n  Rails.configuration = configuration\n\n  check_ruby_version\n  install_gem_spec_stubs\n  set_load_path\n  add_gem_load_paths\n\n  require_frameworks\n  set_autoload_paths\n  add_plugin_load_paths\n  load_environment\n```\n\nif one is to configure plugin loading order, and maybe prevention of plugin load, the caching of @plugins _before_ \"load_environment\" renders config.plugins useless if they were set in config/environments/{production,development,test}.rb.\n\nthis renders all the config.plugins functionality useless, since (in my POV) the main use of config.plugins is to enable or disable some plugins in Production or Development.\n\nThis would be fixed just by moving load_environment before add_plugin_load_paths in Rails::Initializer.process.\n\nto reproduce this issue, just do (with rails 2.3.X with X upto 11):\n\nrails prueba\ncd prueba\nscript/plugin install git://github.com/abedra/safe-erb\necho \"config.plugins=[]\" >> config/environments/production.rb\necho \"config.plugins=[:\"safe-erb\"] >> config/environments/development.rb\nscript/generate scaffold post body:text title:string\nRAILS_ENV=production rake db:migrate\nRAILS_ENV=development rake db:migrate\n\nnow \n\nRAILS_ENV=production script/server \n\nand navigate to localhost:3000/posts and see how the plugin was loaded (since safe-erb prevented outputting some strings)\n\nthen\n\nRAILS_ENV=production script/console\n\n> > Rails.configuration.plugins \n> > shows []\n\nbut it is _wrong_, since the plugin was actually loaded.\n", "labels": [], "number": 912, "updated_at": "2011-05-21 15:12:31", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904699, "title": "in versions 2.3.X Configuration/Initialization problem when using config/environments/{xxx}.rb and config.plugins", "url": "https://api.github.com/repos/rails/rails/issues/912", "created_at": "2011-05-16 04:43:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171354", "text": "_Imported from Lighthouse._\nComment by **Elias Baixas** - 2011-03-08 18:00:51 UTC\n\nthe solution offered in the Ticket is wrong (just tried it :P), when I find some other solution, I'll post it.\n", "created_at": "2011-05-16 04:43:25", "user": 789801, "id": 1171354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171355", "text": "_Imported from Lighthouse._\nComment by **Elias Baixas** - 2011-03-08 18:08:03 UTC\n\nSorry once again: the solution offered was indeed right (I had other troubles with my plugins).\n", "created_at": "2011-05-16 04:43:26", "user": 789801, "id": 1171355}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171356", "text": "_Imported from Lighthouse._\nComment by **Anuj Dutta** - 2011-03-09 06:58:25 UTC\n\nMarking it invalid.\n", "created_at": "2011-05-16 04:43:28", "user": 789801, "id": 1171356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171357", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-03-09 08:33:38 UTC\n\nWould be nice to explain why the ticket is invalid.\n", "created_at": "2011-05-16 04:43:29", "user": 789801, "id": 1171357}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171358", "text": "_Imported from Lighthouse._\nComment by **Anuj Dutta** - 2011-03-09 10:12:09 UTC\n\n@Xavier - I thought that was self-explanatory since the person who added the ticket realised the error was due to some other issues with the plugin.\n", "created_at": "2011-05-16 04:43:31", "user": 789801, "id": 1171358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171359", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-03-09 10:18:33 UTC\n\n@Anuj, oh, Elias said in the last comment that the solution is right indeed. The issue with plugins explained why he tought it was wrong in the first comment :).\n\n2-3-stable is mostly frozen anyway, only security fixes and the-universe-is-gonna-collide bug fixes.\n\nI guess the underlying issue is that Rails does not provide a way to configure plugins per environment. This could be perhaps be converted to a feature request for master.\n", "created_at": "2011-05-16 04:43:32", "user": 789801, "id": 1171359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171360", "text": "_Imported from Lighthouse._\nComment by **Anuj Dutta** - 2011-03-09 10:33:36 UTC\n\n@Xavier: Gotcha! Sorry, I should pay more attention before wielding invalid ticket. But would Bundler not solve the same issue.\n", "created_at": "2011-05-16 04:43:33", "user": 789801, "id": 1171360}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171361", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-03-09 10:39:48 UTC\n\n@Anuj, indeed Bundler provides that for gems, but not for plugins.\n", "created_at": "2011-05-16 04:43:35", "user": 789801, "id": 1171361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171362", "text": "_Imported from Lighthouse._\nComment by **Anuj Dutta** - 2011-03-09 10:49:24 UTC\n\n@Xavier: Yeah, true. \n\nI will mark this ticket as open and assign it to myself and explore the possibilities with using bundler and update the ticket accordingly which will result in a resolution either way.\n\nApologies again for acting quickly before thinking.\n", "created_at": "2011-05-16 04:43:36", "user": 789801, "id": 1171362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171363", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-03-09 10:59:02 UTC\n\nExcellent :).\n", "created_at": "2011-05-16 04:43:37", "user": 789801, "id": 1171363}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6546\nCreated by **Pablo Cantero** - 2011-03-09 02:50:19 UTC\n\nHi\n\nI'm using Titanium to create an iPhone app which is integrating with my Rails app\n\n[Titanium XHR client](http://developer.appcelerator.com/apidoc/mobile/1.2/Titanium.Network.HTTPClient-object.html), by default it is sending empty Content-Type. I don't know if it is a problem (it is a suggestion!), but when I try to access Rails app passing empty Content-type, I get this error\n\n> ConditionsController# (NoMethodError) \"undefined method `to_sym' for nil:NilClass\"\n> \n> /app/3b9e4331-7f19-4831-85c3-a3d12c69c2e9/home/.bundle/gems/ruby/1.8/gems/rack-mount-0.6.13/lib/rack/mount/code_generation.rb:63:in `to_proc'\n> /app/3b9e4331-7f19-4831-85c3-a3d12c69c2e9/home/.bundle/gems/ruby/1.8/gems/actionpack-3.0.3/lib/action_controller/metal/instrumentation.rb:22:in`map' \n> ...\n\nThis error occurs at this point \":formats => request.formats.map(&:to_sym)\"\n\n``` ruby\n    # instrumentation.rb\n    def process_action(action, *args)\n      raw_payload = {\n        :controller => self.class.name,\n        :action     => self.action_name,\n        :params     => request.filtered_parameters,\n        :formats    => request.formats.map(&:to_sym),\n        :method     => request.method,\n        :path       => (request.fullpath rescue \"unknown\")\n      }\n```\n\nThe current error message not is clear, my suggest is to add a clear/specific error message\n\nrescue \"The Content-Type was not supplied\" if request.formats.map.empty?, or use \"Content-Type: text/html\" as default\n\nI created this ticket, because the current stacktrace for this problem is hard to understand, I spent a few hours to solve it. I also created a [forum thread](http://developer.appcelerator.com/question/116980/iphone--rails--xhr--undefined-method-tosym-for-nilnilclass#) on Titanium Q&A\n\nPablo Cantero\n", "labels": [], "number": 913, "updated_at": "2011-05-21 15:12:31", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904702, "title": "Error sending empty Content-Type instrumentation.rb#22", "url": "https://api.github.com/repos/rails/rails/issues/913", "created_at": "2011-05-16 04:43:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171364", "text": "_Imported from Lighthouse._\nComment by **Kenn Ejima** - 2011-04-08 15:17:19 UTC\n\nI had the same problem. In our case, some of our API client developers use Titanium and we have no control over what they choose, so I agree that at least we need an appropriate error (probably 400 Bad Request) raised that should be catched to respond an appropriate error JSON message to the client.\n\nOr, to just go ahead without content type, probably Fjan's patch in this ticket could fix this problem as a more robust, generic fallback-to-html approach, to deal with future misbehaving clients?\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6022-content-negotiation-fails-for-some-headers-regression#ticket-6022-2\n", "created_at": "2011-05-16 04:43:44", "user": 789801, "id": 1171364}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171365", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-09 17:20:12 UTC\n\nFix is here. See the last commit.\n\nhttps://github.com/neerajdotname/rails/commits/fix_for_6546\n", "created_at": "2011-05-16 04:43:46", "user": 789801, "id": 1171365}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6547\nCreated by **umair** - 2011-03-09 07:07:02 UTC\n\nHi all \nI am new here \nI am looking for a script (rake file) which when executed can tell me which deprecated things I am using.\nThere exist such a script for rails 2.2\nAnybody knows whether there is such a script for rails 2.3 or not\nThanks\n", "labels": [], "number": 914, "updated_at": "2011-05-21 15:12:31", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904704, "title": "Is there any script for rails 2.3", "url": "https://api.github.com/repos/rails/rails/issues/914", "created_at": "2011-05-16 04:43:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6548\nCreated by **Dmitry Novotochinov** - 2011-03-09 12:54:13 UTC\n\n``` ruby\n  def test_finder_with_include_coalesce_order_by_and_limit\n    query = \"SELECT DISTINCT accounts.firm_name FROM accounts WHERE accounts.firm_id = 1\"\n    assert_nothing_raised { \n      Developer.all(:order => \"COALESCE(developers.id, developers.salary)\",\n                    :conditions => \"developers.name IN (#{query})\",\n                    :include => :audit_logs, \n                    :limit => 100) }\n  end\n\nException raised:\nClass: <ActiveRecord::StatementInvalid>\nMessage: <\"PGError: ERROR:  syntax error at or near \\\"AS\\\"\\nLINE 1: ...pers\\\".id) \\\"developers\\\".id, COALESCE(developers.id AS alias_0...\\n^\\n: \nSELECT * FROM (SELECT DISTINCT ON (\\\"developers\\\".id) \\\"developers\\\".id, COALESCE(developers.id AS alias_0, developers.salary) AS alias_1 FROM \\\"developers\\\" WHERE (developers.name IN (SELECT DISTINCT accounts.firm_name FROM accounts WHERE accounts.firm_id = 1)) ) AS id_list ORDER BY id_list.alias_0 , id_list.alias_1  LIMIT 100\">\n```\n\nGot it on activerecord-2.3.8. No other versions were tested.\n", "labels": [], "number": 915, "updated_at": "2011-05-21 15:12:32", "user": 789801, "closed_at": "2011-05-21 15:12:31", "id": 904705, "title": "ActiveRecord 2.3.8 bug on find with include, order, limit and coalesce", "url": "https://api.github.com/repos/rails/rails/issues/915", "created_at": "2011-05-16 04:43:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171366", "text": "_Imported from Lighthouse._\nComment by **Dmitry Novotochinov** - 2011-03-14 09:14:06 UTC\n\nIs it considered as a bug?\n", "created_at": "2011-05-16 04:43:59", "user": 789801, "id": 1171366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171367", "text": "_Imported from Lighthouse._\nComment by **Vijay Dev** - 2011-03-14 12:27:32 UTC\n\nI guess the 2.3 branch is frozen except for security fixes.\n", "created_at": "2011-05-16 04:44:00", "user": 789801, "id": 1171367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171368", "text": "_Imported from Lighthouse._\nComment by **Dmitry Novotochinov** - 2011-03-14 12:31:39 UTC\n\nOh, really? Didn't know that.\n", "created_at": "2011-05-16 04:44:02", "user": 789801, "id": 1171368}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6551\nCreated by **koichirose** - 2011-03-09 19:36:02 UTC\n\nI'm executing a query with limit, offset and order.\n\nCode:\n\n``` rails\n@restaurants = Restaurant.where(:city_id => params[:city_id]).geo_scope(:bounds => [@sw, @ne]).order(\"name asc\").limit(12).offset(params[:start])\n```\n\nAnd here's the log:\n\n``` rails\nSELECT `restaurants`.* FROM `restaurants` WHERE `restaurants`.`is_active` = 1 AND `restaurants`.`city_id` = 1 AND (restaurants.lat>45.42787 AND restaurants.lat<45.500107 AND restaurants.lon>9.022518 AND restaurants.lon<9.355542) ORDER BY name asc LIMIT 12 OFFSET 0\n```\n\nEverything is ok for now.\n\nIf params[:start](i.e. the offset) is > 0 then only the following query is executed:\n\n``` rails\nSELECT COUNT(*) FROM `restaurants` WHERE `restaurants`.`is_active` = 1 AND `restaurants`.`city_id` = 1 AND (restaurants.lat>45.42787 AND restaurants.lat<45.500107 AND restaurants.lon>9.022518 AND restaurants.lon<9.355542) LIMIT 12 OFFSET 12\n```\n\nThis is returning an empty set, which is wrong.\n\nIf I add '.all' to the same query (overriding, I believe, the Rails optimization system), then it works:\n\n``` rails\n@restaurants = Restaurant.where(:city_id => params[:city_id]).geo_scope(:bounds => [@sw, @ne]).order(\"name asc\").limit(12).offset(params[:start]).all\n```\n\nThis is executed instead:\n\n``` rails\nSELECT `restaurants`.* FROM `restaurants` WHERE `restaurants`.`is_active` = 1 AND `restaurants`.`city_id` = 1 AND (restaurants.lat>45.42787 AND restaurants.lat<45.500107 AND restaurants.lon>9.022518 AND restaurants.lon<9.355542) ORDER BY name asc LIMIT 12 OFFSET 12\n```\n\nAnd it returns the expected set.\n\nI'm sorry if this is not technical enough, but this is my very first experience with Rails.\nI'll be happy to provide more details if needed.\n", "labels": [], "number": 916, "updated_at": "2011-05-21 15:12:32", "user": 789801, "closed_at": "2011-05-21 15:12:32", "id": 904707, "title": "Calculations#count ignores order with offset", "url": "https://api.github.com/repos/rails/rails/issues/916", "created_at": "2011-05-16 04:44:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171369", "text": "_Imported from Lighthouse._\nComment by **Dmitry Ratnikov** - 2011-03-09 19:45:23 UTC\n\nHere's a piece of code similar to what originally caused the issue:\n\n  @posts = Post.offset(10).limit(10)\n\n  <% unless @posts.empty? -%>\n    <% @posts.each do |post| -%>\n      <%= post.title %>\n    <% end -%>\n  <% else -%>\n    No posts!\n  <% end -%>\n\nSince @posts.empty? issued count without order, it returned as if there were no objects, preventing the posts to be displayed.\n\nAfter digging around, seems like the issue is with https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/calculations.rb#L202 which was there intentional.\n", "created_at": "2011-05-16 04:44:09", "user": 789801, "id": 1171369}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6553\nCreated by **Brad Gessler** - 2011-03-10 09:19:12 UTC\n\nWhen providing an interpolated value to the :conditions key in a has_many association where the :dependent key is set to :delete_all\n\n> has_many :clients_with_interpolated_conditions, :class_name => \"Client\", :conditions => 'rating > #{rating}', :dependent => :delete_all\n\nAR would not interpolate the :conditions string and cause the DELETE query to fail (You end up with SQL that looks like `DELETE * FROM clients WHERE rating > #{rating}` instead of `DELETE * FROM clients WHERE rating > 4`)\n\nI patched AR to call the record's interpolate_sql method on the :conditions string.\n\nI believe this is a regression issue between introduced in 2.3.6 and effects all subsequent 2.3.x releases.\n", "labels": [], "number": 917, "updated_at": "2013-02-07 19:10:21", "user": 789801, "closed_at": "2011-05-21 15:12:32", "id": 904708, "title": "has_many :conditions => 'id = #{id}' interpolation doesn't work when :dependent => :delete_all is ", "url": "https://api.github.com/repos/rails/rails/issues/917", "created_at": "2011-05-16 04:44:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171372", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-10 22:07:57 UTC\n\nDoes it only affect 2.3.x?\n", "created_at": "2011-05-16 04:44:16", "user": 789801, "id": 1171372}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171373", "text": "_Imported from Lighthouse._\nComment by **Brad Gessler** - 2011-03-10 22:51:55 UTC\n\nIt effects the 3.0.x branch as well. Here's what one of those failures look like:\n\n```\n  5) Error:\ntest_dependence_with_missing_association(HasOneAssociationsTest):\nActiveRecord::StatementInvalid: SQLite3::SQLException: unrecognized token: \"#\": DELETE FROM \"companies\" WHERE (((\"companies\".\"type\" = 'Client' OR \"companies\".\"type\" = 'SpecialClient') OR \"companies\".\"type\" = 'VerySpecialClient')) AND ((firm_id = 1) AND (rating > #{rating}))\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:207:in `log'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute_without_query_record'\n    ./test/cases/helper.rb:35:in `execute'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:284:in `update_sql'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb:139:in `update_sql'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:289:in `delete_sql'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb:145:in `delete_sql'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:54:in `delete'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:16:in `delete'\n    /Library/Ruby/Gems/1.8/gems/arel-2.0.9/lib/arel/crud.rb:34:in `delete'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/relation.rb:273:in `delete_all'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/relation.rb:273:in `delete_all'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/base.rb:439:in `__send__'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/base.rb:439:in `delete_all'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/associations.rb:1718:in `delete_all_has_many_dependencies'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/associations.rb:1629:in `send'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/associations.rb:1629:in `_callback_before_391'\n    /Users/bgessler/Projects/rails/activesupport/lib/active_support/callbacks.rb:429:in `_run_destroy_callbacks'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/callbacks.rb:260:in `destroy'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/transactions.rb:235:in `destroy'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/transactions.rb:292:in `with_transaction_returning_status'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/transactions.rb:207:in `transaction'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/transactions.rb:290:in `with_transaction_returning_status'\n    /Users/bgessler/Projects/rails/activerecord/lib/active_record/transactions.rb:235:in `destroy'\n    ./test/cases/associations/has_one_associations_test.rb:250:in `test_dependence_with_missing_association'\n    /Users/bgessler/Projects/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n    /Users/bgessler/Projects/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n    /Users/bgessler/Projects/rails/activesupport/lib/active_support/callbacks.rb:418:in `_run_setup_callbacks'\n    /Users/bgessler/Projects/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n```\n\nI've attached a patch for 3.0.x.\n", "created_at": "2011-05-16 04:44:17", "user": 789801, "id": 1171373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171374", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-03-12 17:20:25 UTC\n\nHey Brad,\n\nThe fix looks good, but the 3.0.x patch no longer applies cleanly to edge - would you mind updating so your authorship is preserved?\n", "created_at": "2011-05-16 04:44:18", "user": 789801, "id": 1171374}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171375", "text": "_Imported from Lighthouse._\nComment by **Brad Gessler** - 2011-03-12 19:27:12 UTC\n\nSingle quote string interpolation is deprecated in the edge build in favor of procs (good!) which fixes this issue. This patch just adds :delete_all to the test that was failing before (should prevent this type of bug from happening again).\n", "created_at": "2011-05-16 04:44:20", "user": 789801, "id": 1171375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171376", "text": "Attachments saved to Gist: http://gist.github.com/971808\n", "created_at": "2011-05-16 04:44:21", "user": 789801, "id": 1171376}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13253888", "text": "We are running 2.3.15 and are affected by this bug - a pull request with an identical patch has been opened at https://github.com/rails/rails/pull/9214.\n", "created_at": "2013-02-07 19:10:21", "user": 505458, "id": 13253888}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6554\nCreated by **Wojciech Wnƒôtrzak** - 2011-03-10 10:06:24 UTC\n\nTo be consistent with Ruby 1.9 where we can call round with precision argument on any Numeric object, rounding extension from activesupport should be available to all Numeric subclasses, not only in Float.\n\nAfter this commit: https://github.com/rails/rails/commit/532b77077fc97211cb9f8d047116a72b8cd286a7 this is done only for ruby versions less than 1.9.\nCalling round with precision on Fixnum is useful with negative precision:\n\n``` ruby\n #=> 22.round(-1)\n #=> 20\n```\n\nI tried to move this extension from float to numeric, but it doesn't work since all subclasses of Numeric has own implementation of round method.\nSolution can be to extend all classes directly: Fixnum, Float, Bignum, etc, but I'm not sure if this is right.\nAny suggestions?\n", "labels": [], "number": 918, "updated_at": "2011-05-21 15:12:32", "user": 789801, "closed_at": "2011-05-21 15:12:32", "id": 904709, "title": "round with precission should be available to all Numeric objects", "url": "https://api.github.com/repos/rails/rails/issues/918", "created_at": "2011-05-16 04:44:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171377", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-03-10 10:54:13 UTC\n\nHi Wojciech,\n\nI think this patch has merit. The first step is to create some failing test cases, and then to take a stab at some code. \n\nHave a look at the present extensions as the implementation is different for each class type.\n\nIf you have any questions just ping me. \n\nJosh\n", "created_at": "2011-05-16 04:44:27", "user": 789801, "id": 1171377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171378", "text": "_Imported from Lighthouse._\nComment by **Wojciech Wnƒôtrzak** - 2011-03-10 11:29:32 UTC\n\nThere are only Integer and Float as Numeric subclasses (Bignum and Fixnum are subclasses of Integer), so adding rounding extension to Integer should be enough.\nHowever after playing a while with ruby 1.9.2, there are strange results:\n\n``` ruby\nruby-1.9.2-p180 :034 > (66**10).class\n => Fixnum \nruby-1.9.2-p180 :035 > 66**10\n => 1568336880910795776 \nruby-1.9.2-p180 :036 > (66**10).round(2)\n => 1568336880910795800.0 \nruby-1.9.2-p180 :037 > (77**10).class\n => Bignum \nruby-1.9.2-p180 :038 > 77**10\n => 7326680472586200649 \nruby-1.9.2-p180 :039 > (77**10).round(2)\n => 7326680472586201000.0\n```\n\nAfter extending ruby 1.8.7 Integer class with round method (same as for Float):\n\n``` ruby\nree-1.8.7-2011.03 :020 > (66**10).class\n => Fixnum \nree-1.8.7-2011.03 :021 > 66**10\n => 1568336880910795776 \nree-1.8.7-2011.03 :022 > (66**10).round(2)\n => 1.5683368809108e+18 \nree-1.8.7-2011.03 :023 > (77**10).class\n => Bignum \nree-1.8.7-2011.03 :024 > 77**10\n => 7326680472586200649 \nree-1.8.7-2011.03 :025 > (77**10).round(2)\n => 7.3266804725862e+18\n```\n", "created_at": "2011-05-16 04:44:28", "user": 789801, "id": 1171378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171379", "text": "_Imported from Lighthouse._\nComment by **Wojciech Wnƒôtrzak** - 2011-03-10 12:07:14 UTC\n\nI'm adding a patch with rounding extension to Integer.\nThere is a little difference to Float extension - at the end I'm calling `to_i` to be sure that Float is not returned (in Ruby 1.9 class is not changed after calling round).\n", "created_at": "2011-05-16 04:44:30", "user": 789801, "id": 1171379}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171380", "text": "Attachments saved to Gist: http://gist.github.com/971810\n", "created_at": "2011-05-16 04:44:31", "user": 789801, "id": 1171380}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6555\nCreated by **Akira Matsuda** - 2011-03-10 10:10:09 UTC\n\nGiven a case when `Pet.has_many :toys`, the following `delete_all` fails:\n\n``` ruby\nPet.joins(:toys).where(:toys => {:name => 'Bone'}).delete_all\n```\n\nbacause current Arel implementation ignores `joins` parameter and tries to execute the following SQL.\n\n``` sql\nDELETE FROM \"pets\" WHERE \"toys\".\"name\" = 'Bone'\n```\n\nAttached is a patch that avoids this error by constructing a subquery only when `delete_all` is chained with `joins`.\n", "labels": ["activerecord"], "number": 919, "updated_at": "2015-02-18 17:24:29", "user": 789801, "closed_at": "2012-04-11 02:58:34", "id": 904711, "title": "delete_all doesn't work when chained with joins", "url": "https://api.github.com/repos/rails/rails/issues/919", "created_at": "2011-05-16 04:44:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171381", "text": "_Imported from Lighthouse._\nComment by **Jeff Kreeftmeijer** - 2011-03-12 12:02:25 UTC\n\nAkira's patch fixes the issue for me, but the attached test fails because `Pet.joins(:toys).where(:toys => {:name => 'Bone'}).count` returns `0`.\n\nAlso, I'm not a great fan of the formatting:\n\n```\ndef test_delete_all_with_joins\n  assert (count = Pet.joins(:toys).where(:toys => {:name => 'Bone'}).count) > 0\n\n  assert_equal count, Pet.joins(:toys).where(:toys => {:name => 'Bone'}).delete_all\nend\n```\n\nIt would probably be more readable (and understandable) like this:\n\n```\ndef test_delete_all_with_joins\n  pets = Pet.joins(:toys).where(:toys => {:name => 'Bone'})\n  count = pets.count\n\n  assert count > 0\n  assert_equal count, pets.delete_all\nend\n```\n\nAkira, could you check out if the test fails for you too? What do you think about my code formatting suggestion? Please note I haven't tested the last code snippet, it's just to show how I'd like it to look :)\n", "created_at": "2011-05-16 04:44:37", "user": 789801, "id": 1171381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171382", "text": "Attachments saved to Gist: http://gist.github.com/971811\n", "created_at": "2011-05-16 04:44:39", "user": 789801, "id": 1171382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2820829", "text": "As of Rails 3.1.3, our team here at @thoughtbot still see this issue. So it seems like it drops the join condition altogether, as we got this SQL error:\n\n``` ruby\nLocalization.joins(:blurb).where(:blurbs => { :project_id => self.id }).delete_all\n```\n\n```\n  1) Project#destroy with blurb, locale, and localization data deletes all associated data\n     Failure/Error: subject.destroy\n     ActiveRecord::StatementInvalid:\n       PGError: ERROR:  missing FROM-clause entry for table \"blurbs\"\n       LINE 1: DELETE FROM \"localizations\" WHERE \"blurbs\".\"project_id\" = 11...\n                                                 ^\n       : DELETE FROM \"localizations\" WHERE \"blurbs\".\"project_id\" = 114\n     # ./app/models/project.rb:21:in `_callback_after_566'\n     # ./app/models/project.rb:19:in `_callback_after_566'\n     # ./spec/models/project_spec.rb:205\n```\n", "created_at": "2011-11-21 20:43:28", "user": 4912, "id": 2820829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3232590", "text": "This is the same for me as well:\n\n``` ruby\nOwnership.joins(:profile).where(\"profiles.updated_at < ?\", Date.today).delete_all\n```\n\n``` bash\n  SQL (0.4ms)  DELETE FROM \"ownerships\" WHERE (profiles.updated_at < '2011-12-16')\nActiveRecord::StatementInvalid: PGError: ERROR:  missing FROM-clause entry for table \"profiles\"\nLINE 1: DELETE FROM \"ownerships\" WHERE (profiles.updated_at < '2011-...\n\n```\n", "created_at": "2011-12-21 11:27:22", "user": 11314, "id": 3232590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3248633", "text": "Fixed for edge rails on simonoff/rails@c045cd8220a83c222bd733db332995b9b82f7fbe\n", "created_at": "2011-12-22 12:45:44", "user": 14304, "id": 3248633}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3655160", "text": "Any update for this bug?\n", "created_at": "2012-01-25 17:44:17", "user": 14304, "id": 3655160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3983776", "text": "It is still present for me with rails 3.2.1:\n\n```\n[22] pry(main)> a.album_medias.joins(:media).where(:media => {:creator_id => 2}).delete_all\nSQL (0.7ms)  DELETE FROM \"album_medias\" WHERE \"album_medias\".\"album_id\" = 1 AND \"medias\".\"creator_id\" = 2\n```\n", "created_at": "2012-02-15 16:42:05", "user": 160200, "id": 3983776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5061223", "text": "Fixed!\n", "created_at": "2012-04-11 02:58:23", "user": 47848, "id": 5061223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5219711", "text": "Oh, wow, thanks for the fix @rafaelfranca!\nI'd totally forgotten that I reported this bug but haven't complete the patch...\n", "created_at": "2012-04-19 11:46:23", "user": 11493, "id": 5219711}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8233875", "text": "Can this fix be backported to 3.2-stable?\n", "created_at": "2012-09-03 09:41:12", "user": 150547, "id": 8233875}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8250011", "text": "I don't think it is easy to backport, but if you really want please give it a try.\n", "created_at": "2012-09-04 01:06:49", "user": 47848, "id": 8250011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14375005", "text": "Has this issue reared it's ugly head again?\nI'm getting it on 3.2.11 & 3.2.12\n\n`CareItem.joins(\"left join patients on care_items.careable_id = patients.id\").where(\"patients.id IS NULL\").delete_all`\n\nIt completely drops the join\n\n```\nSQL (1.7ms)  DELETE FROM \"care_items\" WHERE (patients.id IS NULL)\nPG::Error: ERROR:  missing FROM-clause entry for table \"patients\"\nLINE 1: DELETE FROM \"care_items\" WHERE (patients.id IS NULL)\n```\n\n//Sorry I suck, I've now read all the related threads ;)\n", "created_at": "2013-03-04 10:54:53", "user": 37096, "id": 14375005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16655839", "text": "3.2.13, bug still present ...\n", "created_at": "2013-04-19 14:27:28", "user": 648067, "id": 16655839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17511825", "text": "3.2.12, and seeing it as well.\n", "created_at": "2013-05-06 22:16:46", "user": 610274, "id": 17511825}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19681000", "text": "Bumping, same here on 3.2.13...\n", "created_at": "2013-06-19 12:39:49", "user": 198371, "id": 19681000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21550774", "text": "+1, got this also, on 3.2.13. Anyone know of a workaround ?\n", "created_at": "2013-07-25 12:39:52", "user": 300129, "id": 21550774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/24100125", "text": "+1 got this issue as well\n", "created_at": "2013-09-09 17:57:23", "user": 70605, "id": 24100125}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/51588219", "text": "I do not see this fix on the 3-2-stable branch. I needed to use ARModel.where(\"id in (#{scope_with_joins.to_sql})\").delete_all\n", "created_at": "2014-08-08 11:00:59", "user": 48585, "id": 51588219}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/74890751", "text": "It seems the problem is still present for me too in Rails 3-2-stable branch.\nWhen I do the following `User.joins(\"LEFT JOIN categories ON users.category_id = categories.id\").where(categories: { id: nil }).delete_all` I got this message `ActiveRecord::StatementInvalid: Mysql2::Error: Unknown column 'categories.id' in 'where clause'`.\nAnd it's the same when doing: `User.includes(:category).where(categories: { id: nil }).delete_all`.\nWith the destroy_all everything works fine since each elements is instanciated.\n", "created_at": "2015-02-18 16:06:38", "user": 68886, "id": 74890751}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/74906568", "text": "@freiden Rails 3.2 is only accepting security fixes and no changes will be backported. It should be fixed in Rails 4 though. If you find that it is not fixed in Rails 4 please open a new issue with a reproduction script. Thanks!\n", "created_at": "2015-02-18 17:24:29", "user": 1080678, "id": 74906568}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6557\nCreated by **Andrew** - 2011-03-10 22:01:39 UTC\n\nI'm using Rails 3.0.3, and I'm having a problem with passing a block to filter_parameters in application.rb. If I pass a block, an error occurs on line 38 of ActionDispatch::Http::ParameterFilter.compiled_filter: \nkey = key.dup \nwhen key is a symbol. This happens because symbols are not duplicable. Here is the source: \n\n```\ndef compiled_filter\n    ...\n    elsif blocks.present?\n        key = key.dup\n        value = value.dup if value.duplicable?\n        blocks.each { |b| b.call(key, value) }\n    end\n    ...\nend\n```\n\nI'm not sure why there isn't a duplicable? check on key before dup is called, but if I add that my problem is resolved. I'm wondering if that is a safe change to make. I am worried that the original author left that out intentionally.\n\nThe symbol that causes the error is :action, and it occurs whenever an error-email is being processed (using the exception-notifier gem).\n", "labels": [], "number": 920, "updated_at": "2011-05-21 15:12:32", "user": 789801, "closed_at": "2011-05-21 15:12:32", "id": 904712, "title": "Symbol duplication error in ParameterFilter compiled_filter", "url": "https://api.github.com/repos/rails/rails/issues/920", "created_at": "2011-05-16 04:44:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6558\nCreated by **Diego Carrion** - 2011-03-10 23:20:06 UTC\n\nHi, escape_javascript is used a lot in views that render javascript and can difficult the readability of the code. The attached patch ads an alias called js, so the code stays cleaner. Its similar to the h alias for html_escape.\n", "labels": [], "number": 921, "updated_at": "2011-05-21 15:12:32", "user": 789801, "closed_at": "2011-05-21 15:12:32", "id": 904713, "title": "Alias for escape_javascript", "url": "https://api.github.com/repos/rails/rails/issues/921", "created_at": "2011-05-16 04:44:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171383", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-03-11 01:03:23 UTC\n\nHey Diego, I don't think that's a good idea. We already have a j helper to escape json.\nThe best is to deprecate the helper for 3-0-stable and remove it from master.\n", "created_at": "2011-05-16 04:44:50", "user": 789801, "id": 1171383}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171384", "text": "Attachments saved to Gist: http://gist.github.com/971812\n", "created_at": "2011-05-16 04:44:52", "user": 789801, "id": 1171384}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6565\nCreated by **Xavier Spriet** - 2011-03-11 20:01:43 UTC\n\nWhile updating a model with a `datetime` field, if the datetime string is provided in a format that `DateTime#parse` is not able to parse,\nthe field is just set to `nil`.\n\nWhile calling `DateTime#parse` directly against that string, an `ArgumentError: invalid date` exception is thrown.\n## Setting through ActiveRecord:\n\n```\nruby-1.9.2-p180 :001 > record = Production.where(:record_timestamp => nil).last\n\n => #<Production id: 175178, inverter_id: 13, created_at: \"2011-03-11 17:59:16\", updated_at: \"2011-03-11 17:59:16\", kwh_total: -1000.0, irradiance: 0.0, record_timestamp: nil, ambient_temp: nil> \n\n\nruby-1.9.2-p180 :002 > record.record_timestamp = '09/27/2010 22:26:49'\n => \"09/27/2010 22:26:49\" \nruby-1.9.2-p180 :003 > record.record_timestamp\n => nil\n\n```\n## Using DateTime#parse:\n\n```\nruby-1.9.2-p180 :004 > DateTime.parse '09/27/2010 22:26:49'\nArgumentError: invalid date\n...\n```\n", "labels": [], "number": 922, "updated_at": "2011-05-21 15:12:32", "user": 789801, "closed_at": "2011-05-21 15:12:32", "id": 904715, "title": "DateTime#parse exceptions not escalated in ActiveRecord while setting attributes", "url": "https://api.github.com/repos/rails/rails/issues/922", "created_at": "2011-05-16 04:44:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6566\nCreated by **Joey** - 2011-03-12 06:25:46 UTC\n\nIf I create a Team and add two users to it through UsersTeam, one with a position of \"leader\" and another with a position of \"follower\", I receive a uniqueness validation error when I swap the positions on a Team form with UsersTeams nested.  \n    class User \n    has_many :users_teams\n    end\n\n```\nclass Team\nhas_many :users_teams\naccepts_nested_attributes_for :users_teams\nend\n\nclass UsersTeam\nbelongs_to :user\nbelongs_to :team\n\nvalidates_presence_of :position\nvalidates_uniqueness_of :position, :scope => :team_id #Two users with the same position cannot be on the same team\nend\n```\n", "labels": [], "number": 923, "updated_at": "2011-05-21 15:12:32", "user": 789801, "closed_at": "2011-05-21 15:12:32", "id": 904716, "title": "accepts_nested_attributes_for not updating correctly with validates_uniqueness_of", "url": "https://api.github.com/repos/rails/rails/issues/923", "created_at": "2011-05-16 04:45:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171386", "text": "_Imported from Lighthouse._\nComment by **Dan Pickett** - 2011-03-12 16:27:32 UTC\n\nJoey,\n\nCan you provide a failing test that verifies this errant behavior?\n", "created_at": "2011-05-16 04:45:03", "user": 789801, "id": 1171386}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171387", "text": "_Imported from Lighthouse._\nComment by **Joey** - 2011-03-19 10:37:05 UTC\n\nI'm not to good with creating test cases.  I pushed an app to github with the following instructions to reproduce the bug.  \n\nhttps://github.com/joeytheman/Rails3-Bug6566\n\n```\nHow to reproduce Rails Lighthouse Bug #6566\n\n1. Download source from git://github.com/joeytheman/Rails3-Bug6566.git .\n\n2. Run \"bundle install\".\n\n3. Run \"rake db:schema:load\".\n\n4. Navigate to \"/users\" and create 2 users.\n\n5. Navigate to \"/team\" and create a new team with 2 teammates with the following parameters\n    -Teammate 1\n    -- User => 1\n    -- Team => nil\n    -- Position => \"C\"\n\n    -Teammate 2\n    -- User => 2\n    -- Team => nil\n    -- Position => \"A\"\n\n6. Navigate to \"/team/1/edit\".\n\n7. Set the position of player 1 to \"A\" and the position of player 2 to \"C\".\n\n8. Attempt to save.\n```\n", "created_at": "2011-05-16 04:45:04", "user": 789801, "id": 1171387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171388", "text": "_Imported from Lighthouse._\nComment by **Pablo** - 2011-03-24 21:00:16 UTC\n\nHello, I've downloaded to mac the app in Github, follow steps but didn't reproduce the bug, it changed correctly from one value to the other. \nI'll try later to do the same on windows, I think you are using Windows, don't you?\nRegards,\n", "created_at": "2011-05-16 04:45:05", "user": 789801, "id": 1171388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171389", "text": "_Imported from Lighthouse._\nComment by **Joey** - 2011-03-24 21:18:01 UTC\n\nI checked my repo and realized I had the validation commented out from testing in users_team.rb.  If you pull the repo again you can verify the bug.  And I'm using windows 7 x64, Ruby 1.9.2p180, and rails 3.0.5. Sorry for the inconvenience.\n", "created_at": "2011-05-16 04:45:07", "user": 789801, "id": 1171389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171390", "text": "_Imported from Lighthouse._\nComment by **Pablo** - 2011-03-25 23:32:23 UTC\n\nHi. Now I can reproduce it. It even fails when doing in a transaction, ie:\n\nhttps://gist.github.com/887397\n\nActiveRecord::RecordInvalid: Validation failed: Position has already been taken\n\nThe problem is that the SQLs run before updating the database so you get:\n\n  UsersTeam Load (0.2ms)  SELECT \"users_teams\".\"id\" FROM \"users_teams\" WHERE \"users_teams\".\"team_id\" = 1 AND (\"users_teams\".\"position\" = 'p2') AND (\"users_teams\".id <> 1) LIMIT 1\n\n  AREL (0.8ms)  UPDATE \"users_teams\" SET \"position\" = 'p2', \"updated_at\" = '2011-03-25 19:10:46.892606' WHERE \"users_teams\".\"id\" = 1\n", "created_at": "2011-05-16 04:45:08", "user": 789801, "id": 1171390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171391", "text": "_Imported from Lighthouse._\nComment by **Pablo** - 2011-03-27 23:57:06 UTC\n\nOk, here is a test that fails:\n\nMay add it to test/cases/validations/uniqueness_validation_test.rb\n\ndef test_validate_uniqueness_when_swapping_values_within_transaction\n    Event.new( title:'E1').save!\n    Event.new( title:'E2').save!\n    ActiveRecord::Base.transaction do\n      e1 = Event.find(1)\n      e2 = Event.find(2)\n      e1.title = 'E2'\n      e2.title = 'E1'\n      e2.save\n      e1.save\n    end\n    assert_equal Event.find(1).title, 'E2'\n    assert_equal Event.find(2).title, 'E1'\n  end\n", "created_at": "2011-05-16 04:45:09", "user": 789801, "id": 1171391}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6567\nCreated by **Dan Pickett** - 2011-03-12 15:51:47 UTC\n\nOn Mac OSX using the latest version of arel, test_constants_in_app_are_autoloaded in RailTies was failing due to limit= being undefined.\n\nIn reviewing the test I found the count method to be unnecessary so I removed it with the attached patch to get the test passing.\n", "labels": [], "number": 924, "updated_at": "2011-05-21 15:12:32", "user": 789801, "closed_at": "2011-05-21 15:12:32", "id": 904718, "title": "[Patch] Failing Test in Railties", "url": "https://api.github.com/repos/rails/rails/issues/924", "created_at": "2011-05-16 04:45:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171392", "text": "Attachments saved to Gist: http://gist.github.com/971813\n", "created_at": "2011-05-16 04:45:16", "user": 789801, "id": 1171392}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6569\nCreated by **rob g** - 2011-03-13 20:20:23 UTC\n\nWe have a set of models similar to the following:\n\n``` ruby\nclass User < ActiveRecord::Base\n  has_many :taggings, :include => :tag, :order => 'tags.name'\nend\n\nclass Tagging < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :tag\nend\n\nclass Tag < ActiveRecord::Base\n  has_many :taggings\nend\n```\n\nWhen attempting to get the set of tagging_ids:\n\n`User.first.tagging_ids`\n\nwe get a StatementInvalid error\n\n```\n     ActiveRecord::StatementInvalid:\n       Mysql2::Error: Unknown column 'tags.name' in 'order clause': SELECT `taggings`.id FROM `taggings` WHERE (`taggings`.user_id = 227792459) ORDER BY tags.name\n```\n\nI think I've tracked this to https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1510 :\n\n``` ruby\n          redefine_method(\"#{reflection.name.to_s.singularize}_ids\") do\n            if send(reflection.name).loaded? || reflection.options[:finder_sql]\n              send(reflection.name).map { |r| r.id }\n            else\n              if reflection.through_reflection && reflection.source_reflection.belongs_to?\n                through = reflection.through_reflection\n                primary_key = reflection.source_reflection.primary_key_name\n                send(through.name).select(\"DISTINCT #{through.quoted_table_name}.#{primary_key}\").map! { |r| r.send(primary_key) }\n              else\n                send(reflection.name).select(\"#{reflection.quoted_table_name}.#{reflection.klass.primary_key}\").except(:includes).map! { |r| r.id } # <===================\n              end\n            end\n          end\n```\n\nI've tried both removing the call to `except(:includes)` from line 1510 as well as expanding the exceptions to include the association order:\n\n``` ruby\n  send(reflection.name).select(\"#{reflection.quoted_table_name}.#{reflection.klass.primary_key}\").except(:includes, :order).map! { |r| r.id } \n\n```\n\nand either approach will result in valid SQL.  Obviously, the latter approach generates a more performant query but the ids returned will no longer be in the order specified on the association which seems to be a reasonable tradeoff.\n", "labels": [], "number": 925, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:32", "id": 904719, "title": "collection_singular_ids ignores association :include option", "url": "https://api.github.com/repos/rails/rails/issues/925", "created_at": "2011-05-16 04:45:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171393", "text": "_Imported from Lighthouse._\nComment by **Anatoliy Lysenko** - 2011-03-27 13:56:16 UTC\n\nI created simple test for this bug.\n", "created_at": "2011-05-16 04:45:23", "user": 789801, "id": 1171393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171394", "text": "_Imported from Lighthouse._\nComment by **Anatoliy Lysenko** - 2011-04-03 11:45:56 UTC\n\nRob was right, \nThis commit will revert fix from https://github.com/rails/rails/commit/3436fdfc12d58925e3d981e0afa61084ea34736c , but tests is ok.\n", "created_at": "2011-05-16 04:45:24", "user": 789801, "id": 1171394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171395", "text": "Attachments saved to Gist: http://gist.github.com/971814\n", "created_at": "2011-05-16 04:45:26", "user": 789801, "id": 1171395}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6571\nCreated by **Chris Griego** - 2011-03-14 05:20:06 UTC\n\nIf you define around_save, around_update, around_create, or around_destroy on an ActiveRecord::Observer, then any observed classes' save, update, create, and destroy actions will fail respectively. This is because when the callbacks are registered, the blocks passed to around callbacks aren't propagated to the observer so they are never called.\n\nThis affects Rails 3.0+\n", "labels": [], "number": 926, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904720, "title": "Adding around_(save|update|create|destroy) to an ActiveRecord::Observer causes action to fail", "url": "https://api.github.com/repos/rails/rails/issues/926", "created_at": "2011-05-16 04:45:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6573\nCreated by **Marc-Andr√© Lafortune** - 2011-03-14 14:53:36 UTC\n\nCurrently, the following doesn't raise any error:\n\n```\nt = Time.now.in_time_zone(\"There is no such timezone\"); t.utc\n```\n\nMany other methods of `TimeWithZone` will raise a `NoMethodError` as soon as they try to access the timezone (e.g. `t.inspect`).\n\nIt should not be possible to create a TimeWithZone with an invalid timezone.\n", "labels": [], "number": 927, "updated_at": "2011-05-22 05:06:38", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904721, "title": "TimeWithZone should not accept unrecognized time zones", "url": "https://api.github.com/repos/rails/rails/issues/927", "created_at": "2011-05-16 04:45:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171396", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-03-15 11:05:49 UTC\n\nHi Marc-Andr√©,\n\nI agree with this. Are you able to whip up a patch with tests?\n\nThanks,\n\nJosh\n", "created_at": "2011-05-16 04:45:38", "user": 789801, "id": 1171396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171397", "text": "_Imported from Lighthouse._\nComment by **Marc-Andr√© Lafortune** - 2011-03-15 13:41:34 UTC\n\nSure, will do.\n", "created_at": "2011-05-16 04:45:40", "user": 789801, "id": 1171397}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171398", "text": "_Imported from Lighthouse._\nComment by **Marc-Andr√© Lafortune** - 2011-03-16 19:20:38 UTC\n\nHere is my patch.\n\n`{Date}Time#in_time_zone`, `Time.use_zone` and `Time.zone=` now raise an `ArgumentError` on invalid timezone arguments.\n\nNote that I changed `test_time_zone_setter_with_invalid_zone` which used to imply that `Time.zone = \"foo\"` was a no-op. There was no test for `in_time_zone` nor for `use_zone`.\n\nThanks\n", "created_at": "2011-05-16 04:45:41", "user": 789801, "id": 1171398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171399", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-03-16 19:52:14 UTC\n\nHey Marc,\n\nI think the patch and tests look good.\n\n+1 from me, I prefer having ActiveSupport raise an error if the timezone is incorrect.\n\nSantiago, what do you think?\n\nJosh\n", "created_at": "2011-05-16 04:45:42", "user": 789801, "id": 1171399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171400", "text": "Attachments saved to Gist: http://gist.github.com/971815\n", "created_at": "2011-05-16 04:45:44", "user": 789801, "id": 1171400}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6575\nCreated by **Marc-Andr√© Lafortune** - 2011-03-20 05:07:06 UTC\n\nThe documentation for `AbstractController::Helpers#helper` states that `:all` is a special parameter.\n\nIndeed, from a `ActionController::Base`, `helper :all` will use all the helper files. It even does that by default in Rails 3.\n\nOn the other hand, this doesn't work from `ActionMailer::Base` and we get:\n\n```\nMissing helper file helpers/all_helper.rb\n```\n\nNote that `ActionMailer::Base < AbstractController::Helpers` is `true`.\n\n1) It would be nice if `helper :all` could work for `ActionMailer::Base` also. \n\n2) If it did, maybe `ActionMailer::Base` should call it by default, as `ActionController` does\n\n3) If it wont, and `:all` can not handled by all descendants of `AbstractController::Helpers`, then the doc should be updated to reflect this.\n\nThanks\n", "labels": [], "number": 928, "updated_at": "2013-05-28 18:36:28", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904723, "title": "helper :all from ActionMailer", "url": "https://api.github.com/repos/rails/rails/issues/928", "created_at": "2011-05-16 04:45:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171402", "text": "_Imported from Lighthouse._\nComment by **ifesdjeen** - 2011-03-19 12:04:36 UTC\n\n:all is handled by overwritten helper (actionpack/lib/action_controller/metal/helpers.rb), which overwrites modules_for_helpers to \n\n``` ruby\n    def modules_for_helpers(args)\n       args += all_application_helpers if args.delete(:all)\n       super(args)\n    end\n```\n\nWhat most likely happened, that method doesn't get loaded.\nIf someone from Rails team could explain a bit of background behind that situation, I could provide a patch.\nThanks\n\n<em>Edited by <a href=\"https://rails.lighthouseapp.com/users/89656\">Rohit Arondekar</a> for formatting.</em>\n", "created_at": "2011-05-16 04:45:50", "user": 789801, "id": 1171402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171403", "text": "_Imported from Lighthouse._\nComment by **ifesdjeen** - 2011-03-19 12:05:43 UTC\n\nFor some reason my code got all messy, please see it in that gist: https://gist.github.com/877432\n", "created_at": "2011-05-16 04:45:51", "user": 789801, "id": 1171403}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171405", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-09 16:51:30 UTC\n\nFix is here. Please see last two commits.\n\nhttps://github.com/neerajdotname/rails/commits/fix_for_6575\n", "created_at": "2011-05-16 04:45:52", "user": 789801, "id": 1171405}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6577\nCreated by **Curtis Jennings Schofield** - 2011-03-15 00:34:31 UTC\n\ninspect has pretty '4 days' output - views call to_s on Numeric types - can we please\n\n```\nclass ActiveSupport::Duration\n  alias :to_s :inspect\nend\n```\n", "labels": [], "number": 929, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904725, "title": "ActiveSupport::Numberic overloads inspect but not to_s", "url": "https://api.github.com/repos/rails/rails/issues/929", "created_at": "2011-05-16 04:45:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6578\nCreated by **Christopher Meiklejohn** - 2011-03-15 02:26:55 UTC\n\nFollow up to: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6230, as I wasn't able to comment on that ticket (updates kept disappearing).\n\nReported by: Alexander Gorkunov \n\nContent:\n\nIn: activerecord/lib/active_record/locking/optimistic.rb\n\nline 91:\n\n```\nrelation.table[self.class.primary_key].eq(quoted_id).and(\n```\n\nquoted_id is superfluous because it quoted in arel engine.\nSo in compiled SQL we get : '''id''' instead of 'id'\nThis problem has already fixed in destroy statement (see line 117)\n## \n\nIncluded is a patch to resolve this issue. The delete method uses ID, not quoted ID, as ARel will quote it. \n\nFollow this same convention.\n", "labels": [], "number": 930, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904726, "title": "Optimistic Locking and Double Quoting of Strings", "url": "https://api.github.com/repos/rails/rails/issues/930", "created_at": "2011-05-16 04:46:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171406", "text": "_Imported from Lighthouse._\nComment by **Christopher Meiklejohn** - 2011-03-16 18:09:10 UTC\n\nJust wondering if someone had a chance to take a look at the included patch?\n", "created_at": "2011-05-16 04:46:04", "user": 789801, "id": 1171406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171407", "text": "_Imported from Lighthouse._\nComment by **jgpawletko** - 2011-05-02 02:53:02 UTC\n\nI just confirmed the same bug as Christopher Meiklejohn.\n(Thank you Christopher for the fix.)\n\nAs of this writing the problem does not appear to be fixed in the current 3.0-stable release of rails.\nhttps://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/locking/optimistic.rb\nline 91.\n\n(rdb:2) pp quoted_id\n\"'64536156-E2F3-4659-BB55-483FA43BF672'\"\n(rdb:2) pp relation.where(relation.table[self.class.primary_key].eq(quoted_id))\n[](rdb:2) pp relation.where(relation.table[self.class.primary_key].eq('64536156-E2F3-4659-BB55-483FA43BF672'))\n[#<Infopkg rs_id: \"64536156-E2F3-4659-BB55-483FA43BF672\", rs_body: \"test-body\", created_at: \"2011-05-02 01:19:44\", updated_at: \"2011-05-02 01:19:44\", status: \"OK\", lock_version: 0>]\n", "created_at": "2011-05-16 04:46:06", "user": 789801, "id": 1171407}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171408", "text": "Attachments saved to Gist: http://gist.github.com/971816\n", "created_at": "2011-05-16 04:46:07", "user": 789801, "id": 1171408}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6582\nCreated by **Axel Tetzlaff** - 2011-04-22 05:48:04 UTC\n\nI want to write an API client app for our REST API. The app serving the API publicizes it over different subdomains for different clients, i.e.:\nclientA.myapp.org/api/people\nclientB.myapp.org/api/people\nThe client app must be able to query any client depending on the user logged in to the client app. \n\nThe set of possible clients is not static and can change any time.\n\nActiveResource::Base.site is usually set at app startup time, which makes no sense for me, because I don't know to which client the first user accessing my client app belongs to yet.\nResetting site with every request is not a solution, because I think it's not thread safe, since site is a class variable and shared across all parallel requests.\n\nThe solution is imho to make site not a value, but either a function or an object that is capable of calculating the site at runtime.\n\nI hope this makes any sense to you.\n", "labels": [], "number": 931, "updated_at": "2011-11-29 10:59:16", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904729, "title": "evaluate ActiveResource::Base.site at runtime", "url": "https://api.github.com/repos/rails/rails/issues/931", "created_at": "2011-05-16 04:46:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171409", "text": "_Imported from Lighthouse._\nComment by **booamd** - 2011-03-15 12:07:48 UTC\n\nTheirs is a living, breathing, ongoing phenomenon spanning more than three centuries.(http://www.bagsairs.com)\n", "created_at": "2011-05-16 04:46:13", "user": 789801, "id": 1171409}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171410", "text": "_Imported from Lighthouse._\nComment by **Axel Tetzlaff** - 2011-03-15 15:42:47 UTC\n\nI'm using this to work around - but id does not feel right: http://tardigra.de/mcblog/2008/01/handling-multiple-user-authent.html\n", "created_at": "2011-05-16 04:46:14", "user": 789801, "id": 1171410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2894444", "text": "I really would like to reopen this ticket. It's really can be very useful in may cases\n", "created_at": "2011-11-28 08:57:32", "user": 436912, "id": 2894444}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2928305", "text": "For anyone who will hit the same problem, I've made a hack https://gist.github.com/1404284 \n\nProbably there should be a cleaner way\n", "created_at": "2011-11-29 10:59:16", "user": 436912, "id": 2928305}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6583\nCreated by **Axel Tetzlaff** - 2011-03-15 16:54:58 UTC\n\nI appreciate having the encoding strategy in the dedicated Format modules. Unfortunately is the dot not part of the extension method, but hardcoded in the elem_path method. That leads to an unnecessary inflexibility.\n\nsee also:\n\nhttp://stackoverflow.com/questions/767203/how-to-remove-xml-and-json-from-url-when-using-active-resource\n", "labels": [], "number": 932, "updated_at": "2012-05-11 12:37:43", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904730, "title": "ActiveResource Format extension method should contain '.'", "url": "https://api.github.com/repos/rails/rails/issues/932", "created_at": "2011-05-16 04:46:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5649563", "text": "Why this issue is closed? I also think that \".\" should be in the extension part so that we can remove the extension to get more flexible much more easier.\n", "created_at": "2012-05-11 12:37:43", "user": 10137, "id": 5649563}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6584\nCreated by **andrew.hay.kurtz (at gmail)** - 2011-03-15 17:58:10 UTC\n\nI'm on rails 3.0.5. ActionMailer::Base has an internal attribute created with the name 'message', and this fact is not documented. If you happen to try to define a delivery method called 'message' on one of your mailers, fun things happen. It is documented that there is a message object available to a mailer view. However, I do not think of the view and controller as being the exact same context (though they share instance vars), so it did not occur to me that I am not allowed to 'def message' inside a mailer.\n\nSteps to reproduce:\n1. create a new mailer\n2. define two delivery methods, call one of them 'message'. Make it accept an argument or three for extra confusion.\n3. Try to send an email with the method that isn't called 'message'.\n4. Read the exception.\n\nGist of my mailer:\nhttps://gist.github.com/871136\n\nGist of exception from my rspec test:\nhttps://gist.github.com/871143\n\nThanks a lot!\n", "labels": [], "number": 933, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904731, "title": "ActionMailer::Base has an undocumented public attribute, leading to confusion", "url": "https://api.github.com/repos/rails/rails/issues/933", "created_at": "2011-05-16 04:46:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171411", "text": "_Imported from Lighthouse._\nComment by **ifesdjeen** - 2011-03-19 10:44:44 UTC\n\nIt's not a direct part of ActionMailer::Base. It's more a part of MailHelper (actionmailer/lib/action_mailer/mail_helper.rb). \n\nIt's an accessor to @_message instance variable. \n\nNaming things is one of the biggest problems, actually :) If you say it's a delivery method, you should probably call it \"deliver_message\" and the other one would become \"deliver reply\".\n\nSo, having message method is completely legitimate in that particular case. If you want to change a message accessor itself, feel free to override it.\n", "created_at": "2011-05-16 04:46:26", "user": 789801, "id": 1171411}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6585\nCreated by **Jason Lewis** - 2011-03-15 18:41:39 UTC\n\nI'm not sure if this has been considered and/or dismissed, but if #humanize, #camelize, etc called #to_s on the receiver, it would avoid a lot of whiny nils and other errors, and make view code more manageable (i.e., avoid having to remember to call to_s before humanize on values that might be nil.\n", "labels": [], "number": 934, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904732, "title": "ActiveSupport::CoreExtensions::String::Inflections should coerce type", "url": "https://api.github.com/repos/rails/rails/issues/934", "created_at": "2011-05-16 04:46:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171412", "text": "_Imported from Lighthouse._\nComment by **ifesdjeen** - 2011-03-19 10:35:07 UTC\n\nNot sure, why exactly that is raised.\n\nIf it's String::Inflections, it seems to be clear enough that it should be called on string...\n", "created_at": "2011-05-16 04:46:33", "user": 789801, "id": 1171412}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6587\nCreated by **Elben Shira** - 2011-03-15 20:14:24 UTC\n\nI have a snippet:\n\n```\nclass ProjectsController < ApplicationController\n  layout \"stream\", :only => [:stream]\nend\n```\n\nWhen I render projects#stream, it correctly uses the :stream layout. But when I render projects#show, it uses neither the :application nor the :stream layouts. It uses nothing, rending only show.html.erb.\n", "labels": [], "number": 935, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904734, "title": "layouts inheritance in controllers", "url": "https://api.github.com/repos/rails/rails/issues/935", "created_at": "2011-05-16 04:46:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171413", "text": "_Imported from Lighthouse._\nComment by **ifesdjeen** - 2011-03-19 10:33:28 UTC\n\nYou can use conditions for layouts, just give layouts a name of method to calculate current layout\n\n  class ProjectsController < ApplicationController\n    layout :get_layout_name\n\n```\ndef get_layout_name\n   if action_name == \"stream\"\n      \"stream\"\n   else\n      \"application\"\n   end\nend\n```\n\n  end\n\nThis way you will get your layouts working correctly\n", "created_at": "2011-05-16 04:46:40", "user": 789801, "id": 1171413}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6588\nCreated by **Bounga** - 2011-03-16 11:17:03 UTC\n# Checks for Enumerable content uniqueness\n\nReturns true if the collection has no duplicated content.\nCan be called with a block too, much like any?, so people.uniq? { |p| p.age > 26 } returns true if only 1 person is over 26.\n\nUnit test are included.\n\nPlease test and +1 this useful tiny patch.\n", "labels": [], "number": 936, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904736, "title": "Add Enumerable#uniq?", "url": "https://api.github.com/repos/rails/rails/issues/936", "created_at": "2011-05-16 04:46:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171414", "text": "_Imported from Lighthouse._\nComment by **Bounga** - 2011-03-16 11:28:52 UTC\n\nGithub fork / branch is available at https://github.com/Bounga/rails/commits/enumerable_uniq\n", "created_at": "2011-05-16 04:46:46", "user": 789801, "id": 1171414}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171415", "text": "_Imported from Lighthouse._\nComment by **Bounga** - 2011-03-16 12:18:41 UTC\n\nSame one with calculation cache\n", "created_at": "2011-05-16 04:46:48", "user": 789801, "id": 1171415}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171416", "text": "_Imported from Lighthouse._\nComment by **Bounga** - 2011-03-16 15:17:48 UTC\n\nBetter test case for blocks\n", "created_at": "2011-05-16 04:46:49", "user": 789801, "id": 1171416}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171417", "text": "_Imported from Lighthouse._\nComment by **Ryan Orr** - 2011-03-19 18:19:43 UTC\n\nTook a look at the code in the last patch that you posted. I like the implementation but you were missing a test that checked a block that produced a result that wasn't unique. I added a test for this and cleaned up some whitespace errors that I was getting with your patch.\n\nTo avoid whitespacing errors in the future try the command:\n\ngit diff --check\n\nThis will tell you which files are producing whitespace errors if any.\n", "created_at": "2011-05-16 04:46:50", "user": 789801, "id": 1171417}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171418", "text": "Attachments saved to Gist: http://gist.github.com/971817\n", "created_at": "2011-05-16 04:46:52", "user": 789801, "id": 1171418}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6589\nCreated by **Edward Ocampo-Gooding** - 2011-03-17 04:29:10 UTC\n\nWhen setting `:discard_day` as an option in the `date_select` view helper, the default day chosen is the first of the month.\n\nHowever, when setting `:discard_month`, and it implicitly sets `:discard_day`, the default day chosen is the current day instead of the first of the month.\n\nWhich behaviour is correct? Either way, that feels like a bug.\n", "labels": [], "number": 937, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904738, "title": "date_select‚Äôs :discard_month and :discard_day choose different default days", "url": "https://api.github.com/repos/rails/rails/issues/937", "created_at": "2011-05-16 04:46:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171420", "text": "_Imported from Lighthouse._\nComment by **Diego Carrion** - 2011-03-17 17:04:41 UTC\n\nWhen using discard_day, the day chosen is the first day of the month to avoid things like 31/02/2011.\n", "created_at": "2011-05-16 04:46:57", "user": 789801, "id": 1171420}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171421", "text": "_Imported from Lighthouse._\nComment by **Edward Ocampo-Gooding** - 2011-03-17 17:16:14 UTC\n\nDiego: right, except that when :discard_month implicitly sets :discard_day, the first day of the month is _not_ chosen.\n", "created_at": "2011-05-16 04:46:59", "user": 789801, "id": 1171421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171422", "text": "_Imported from Lighthouse._\nComment by **2kan** - 2011-03-21 14:53:24 UTC\n\nEdward, it is not a bug. It is how it is designed: https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/date_helper.rb#L619\n\nYes, maybe it looks strange a bit, but I don't think that it is a good idea to change it now.\n", "created_at": "2011-05-16 04:47:00", "user": 789801, "id": 1171422}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6590\nCreated by **Tyler Hunt** - 2011-03-17 14:01:48 UTC\n\nBecause the logic for handling transaction callbacks (`after_commit` and `after_rollback`) is tied up inside `ActiveRecord::ConnectionAdapters::DatabaseStatements#transaction`, and because the transactional fixtures are implemented by manually calling `begin_db_transaction` and `rollback_db_transaction` rather than using a `transaction` block, the transaction callbacks aren't executed at the end of the test run as should be expected.\n", "labels": [], "number": 938, "updated_at": "2012-03-15 19:16:06", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904740, "title": "Transaction Callbacks Aren't Called by Transactional Fixtures", "url": "https://api.github.com/repos/rails/rails/issues/938", "created_at": "2011-05-16 04:47:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4526797", "text": "Still broken.\n", "created_at": "2012-03-15 19:16:06", "user": 4265, "id": 4526797}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6591\nCreated by **clyfe** - 2011-03-17 19:22:47 UTC\n\nActiveRecord returns Arel::Nodes::Union when I call model.union(active_relation), but it should return an ActiveRelation\n1. What steps will reproduce the problem:\n   \n   class User << AR::Base; end  \n   User.where(:a => 1).union(User.where(:a => 2))  \n2. What is the wrong result:\n   \n   The result is an instance of Arel::Nodes::Union\n3. What is the result that should happen instead:\n   \n   The computation should return an instance of ActiveRelation\n### THE GOOD\n\nThe resulting Arel::Nodes::Union object can be transformed to_sql and then we can use User.find_by_sql(sql)\n\n```\na = User.where(:a => 1).union(User.where(:a => 2))\nsql = a.to_sql # ( SELECT \"users\".* FROM \"users\" WHERE \"users\".\"a\" = 1 UNION SELECT \"users\".* FROM \"users\" WHERE \"users\".\"a\" = 2 )\"\nUser.find_by_sql(sql)\n```\n### THE ISSUE\n\nThe issue is obtaining an ActiveRelation object that we can further chain.\nCaling a method (select, where, includes) on this (ActiveRelation unioned) object would have the behavior of further calling that method on each of the ActiveRelation objects involved in the UNION\n\n---\n\nAll tough in general a UNION query can be avoided, there are some cases where the corect active relation #union functionality is needed.\n\nFor example this wold allow fixing issue #213 of CanCan https://github.com/ryanb/cancan/issues/213\n\nI would be glad to work in this issue, with a little help.\n", "labels": ["activerecord"], "number": 939, "updated_at": "2015-02-03 17:35:50", "user": 789801, "closed_at": "2014-01-16 23:05:37", "id": 904741, "title": "ActiveRecord UNION left out", "url": "https://api.github.com/repos/rails/rails/issues/939", "created_at": "2011-05-16 04:47:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2257505", "text": "Why'd we close this issue? It's a perfectly reasonable request.\n", "created_at": "2011-10-01 16:01:20", "user": 109184, "id": 2257505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2382508", "text": "I agree - this is something that would that would be useful.\n", "created_at": "2011-10-12 18:14:39", "user": 29571, "id": 2382508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2639968", "text": "I have an app that would benefit from this. Please reopen this issue.\n", "created_at": "2011-11-05 11:05:12", "user": 10137, "id": 2639968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2658019", "text": "I would also benefit from union returning a relation object. There's been countless times that I need to combine two queries together but still require a relation object. Please reopen.\n", "created_at": "2011-11-07 19:13:26", "user": 316556, "id": 2658019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2740907", "text": "I had to resort to [string interpolation](http://stackoverflow.com/questions/8045823/how-do-i-write-a-union-chain-with-activerelation) to solve this. A better option would be much appreciated.\n", "created_at": "2011-11-15 04:37:19", "user": 57652, "id": 2740907}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2844349", "text": "+1 for this one, guess it'd be useful.\n", "created_at": "2011-11-23 02:55:54", "user": 4005, "id": 2844349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3118933", "text": "+1\n", "created_at": "2011-12-13 05:02:44", "user": 149870, "id": 3118933}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3169893", "text": "+1\ndefinitely need this! This is causing a lot of redundant code for me.\n", "created_at": "2011-12-15 22:06:17", "user": 332628, "id": 3169893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3174121", "text": "+1\n", "created_at": "2011-12-16 06:56:47", "user": 160962, "id": 3174121}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3175651", "text": "+1\n", "created_at": "2011-12-16 10:30:06", "user": 103073, "id": 3175651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3175734", "text": "+1\n", "created_at": "2011-12-16 10:39:21", "user": 15547, "id": 3175734}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3175756", "text": "+1\n", "created_at": "2011-12-16 10:41:35", "user": 65587, "id": 3175756}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3175775", "text": "cc/ @jonleighton \n", "created_at": "2011-12-16 10:42:56", "user": 3948, "id": 3175775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3177772", "text": "+1\n", "created_at": "2011-12-16 14:32:56", "user": 70491, "id": 3177772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3177828", "text": "Any of you +1ers are welcome to submit a patch...\n", "created_at": "2011-12-16 14:37:01", "user": 1979, "id": 3177828}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3583797", "text": "re patch - Well ... I guess I don't know how.  If someone gave me a pointer, I could try. As the original poster said, it needs a little help from somebody who understands the ActiveQuery internals.\n", "created_at": "2012-01-20 13:58:28", "user": 109184, "id": 3583797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4999147", "text": "Why write a patch if it is CLOSED? Seems like the first step is to flog whoever closed it, the second step is to re-open it, THEN complain that nobody wrote a patch yet.\n", "created_at": "2012-04-06 17:33:34", "user": 29706, "id": 4999147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5000009", "text": "@rubypanther this issue was imported from lighthouse. All the issues imported from lighthouse are closed automatically.\n", "created_at": "2012-04-06 18:27:21", "user": 47848, "id": 5000009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5343158", "text": "Please reopen so this will get attention it deserves.\n", "created_at": "2012-04-25 21:13:47", "user": 24458, "id": 5343158}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5349075", "text": "It's open. Do it guys!! \n", "created_at": "2012-04-26 03:49:09", "user": 3948, "id": 5349075}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6847625", "text": "+1\n", "created_at": "2012-07-09 14:17:29", "user": 339663, "id": 6847625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6862839", "text": "This would also be incredibly helpful for me. I'd be happy to eventually write a patch if no one else can, but for now, +1...\n", "created_at": "2012-07-09 23:22:39", "user": 1731474, "id": 6862839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7058112", "text": "+1\n", "created_at": "2012-07-18 06:47:13", "user": 591, "id": 7058112}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7452573", "text": "I have encountered that problem at some point in 3 projects over the last years. Would be really useful if there was ActiveRecord support for that. +3\n", "created_at": "2012-08-02 11:10:37", "user": 515293, "id": 7452573}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7880151", "text": "+1\n", "created_at": "2012-08-20 19:16:14", "user": 15362, "id": 7880151}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7980873", "text": "+1\n", "created_at": "2012-08-23 19:22:28", "user": 16150, "id": 7980873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8051814", "text": "+1\n", "created_at": "2012-08-27 10:12:56", "user": 16015, "id": 8051814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9050693", "text": "+1\n", "created_at": "2012-10-01 21:26:17", "user": 37790, "id": 9050693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9051047", "text": "There's also the same issue for intersect.\n", "created_at": "2012-10-01 21:37:54", "user": 37790, "id": 9051047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9690793", "text": "+1\n", "created_at": "2012-10-23 05:09:24", "user": 5047, "id": 9690793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12367144", "text": "+1000\n", "created_at": "2013-01-17 13:08:47", "user": 46832, "id": 12367144}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14565506", "text": "Is anyone working on this one? Is there a Pull Request?\n", "created_at": "2013-03-07 15:11:01", "user": 5402, "id": 14565506}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14610727", "text": "I proposed some code, but it actually depends on another issue: rails/arel#118.\nThe right way to solve that issue (and handle other set operations) is still not obvious to me, see [this comment](https://github.com/rails/arel/pull/118#issuecomment-14355964), help is welcomed.\nI'm planning on proposing a proper pull request for the latter within few weeks, when I find time.\nI'll then update my code for this issue and pull request it.\nThat said, someone can still handle these before I do... ;-)\n", "created_at": "2013-03-08 09:24:05", "user": 95129, "id": 14610727}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17647952", "text": "+1\n", "created_at": "2013-05-09 03:48:22", "user": 1530203, "id": 17647952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18813061", "text": "how is going this issue?? It could be so useful!! :P\n", "created_at": "2013-06-02 20:20:21", "user": 1290374, "id": 18813061}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19917387", "text": "+1\n", "created_at": "2013-06-24 16:13:43", "user": 13274, "id": 19917387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23837508", "text": "+1\n", "created_at": "2013-09-05 01:04:11", "user": 1657534, "id": 23837508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/24888008", "text": "+100\n", "created_at": "2013-09-22 18:57:04", "user": 466661, "id": 24888008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/24888016", "text": "+0.9999\n", "created_at": "2013-09-22 18:57:25", "user": 1551105, "id": 24888016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25037119", "text": "would be nice!\n", "created_at": "2013-09-24 19:56:36", "user": 1085902, "id": 25037119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25746512", "text": "Any updates? @ofavre , any updates?\n", "created_at": "2013-10-05 11:17:50", "user": 1063219, "id": 25746512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26072635", "text": "+1\n", "created_at": "2013-10-10 17:15:52", "user": 1782826, "id": 26072635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26307701", "text": "+1\n", "created_at": "2013-10-15 03:55:56", "user": 22600, "id": 26307701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29156511", "text": "+1\n", "created_at": "2013-11-24 14:23:54", "user": 1637937, "id": 29156511}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31709531", "text": "+1 for this and for #intersect\n", "created_at": "2014-01-07 02:56:36", "user": 1471004, "id": 31709531}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32207316", "text": "+1\n", "created_at": "2014-01-13 20:23:10", "user": 282514, "id": 32207316}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32556986", "text": "This issue is stale for more than 2 years. Adding +1's will not help and we don't have time to fix all the issues in the world. So I'm closing this one.\n\nWho is having the issue and care about fixing PDI.\n", "created_at": "2014-01-16 23:05:37", "user": 47848, "id": 32556986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32709728", "text": "Update:\nThe pull request rails/arel#118, replaced by rails/arel#239 (by @jsanders), exposing the required functionality in Arel is ready to be merged.\nOnce done, the code at yakaz/rails@29b8ebd187e0888d5e71b2e1e4a12334860bc76c ([relation-unions-v3.2.2 branch](https://github.com/yakaz/rails/commits/relation-unions-v3.2.2)) can be updated and merged.\n", "created_at": "2014-01-19 14:41:23", "user": 95129, "id": 32709728}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32715255", "text": "@ofavre thank you for the update. I have assigned the arel PR to me and I'll review it and apply your Rails patch too.\n", "created_at": "2014-01-19 18:18:38", "user": 47848, "id": 32715255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32777803", "text": "@rafaelfranca Note that I based the work in rails/arel#239 off of 4-0-stable rather than master. I'm also guessing there is a little work that would need to be done to @ofavre's [relation-unions-v3.2.2 branch](https://github.com/yakaz/rails/commits/relation-unions-v3.2.2) to make it work against either 4-0-stable or master. Does it make sense to get these changes into 4.0 at this point? If not, I'd be glad to submit PRs against master instead.\n", "created_at": "2014-01-20 17:07:02", "user": 38320, "id": 32777803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/40221824", "text": "Have applied @ofavre  and @jsanders changes [rails/issues/939#issuecomment-32709728](https://github.com/rails/rails/issues/939#issuecomment-32709728) against rails [3-2-stable branch](https://github.com/tjgfernandes/rails/commit/e54ad0570a10677834d4e01ec85c656aae2386a7) and [arel 3-0-stable branch](https://github.com/tjgfernandes/arel/commit/2f7368388ff1401829d24986249ad1dde51657fb).\n\nThese changes are being tested and used with cancancan to [combine different ability conditions for same resource by using unions](https://github.com/tjgfernandes/cancancan/commit/a1506a642b5468a4975533393be78a9e7f603460) ([from @clyfe](https://github.com/ryanb/cancan/issues/213#issuecomment-886503)).\n\nSo far changes are working ok for tests and my use cases (rails 3.2.17).\n", "created_at": "2014-04-11 16:18:26", "user": 160485, "id": 40221824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/50784503", "text": "+1\n", "created_at": "2014-07-31 16:37:23", "user": 6533956, "id": 50784503}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/54105046", "text": "I [wrote a gem](https://github.com/brianhempel/active_record_union) to add usable UNION functionality with ActiveRecord::Relation. We are using it in production. The gem's code may or may not provide a good template for a Rails PR, but it does demonstrate solutions to some of the issues along the way:\n- Don't forget about bind values!\n- Subselects with ORDER BY need to be wrapped in parentheses ‚Ä¶ except for SQLite, which just explodes in that case\n- The UNION is aliased to the table name to allow further scoping\n\nThe important code is here for inspection: https://github.com/brianhempel/active_record_union/blob/master/lib/active_record_union/active_record/relation/union.rb\n", "created_at": "2014-09-02 03:03:00", "user": 506950, "id": 54105046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62376438", "text": "+1 \n\nThe problem with using find_by_sql is that it returns an array. However, uglifying it with string interpolation something like this \n\n```\nModel.from(\"(#{Model.scope1.to_sql}) union (#{Model.scope2.to_sql})) #{Model.table_name}\")\n```\n\nwill keep it as a relation for further use\n", "created_at": "2014-11-10 12:16:25", "user": 1073521, "id": 62376438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62380508", "text": "@guyisra you can use ARel for this kind of task: https://github.com/rails/arel/blob/afd98824eb22b67b1f74edd5ea19e4a19a9da981/test/test_select_manager.rb#L257\n\nWorth to look at: https://github.com/rails/arel/pull/320\n", "created_at": "2014-11-10 12:56:59", "user": 5091, "id": 62380508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62395160", "text": "If you do the union with AREL or SQL string interpolation, watch out for bind values. The SQL for `my_user.posts` is:\n\n``` sql\nSELECT \"posts\".* FROM \"posts\"  WHERE \"posts\".\"user_id\" = ?\n```\n\n`to_sql` won't preserve the value that's supposed to bind to the `?`, and I'm pretty sure using AREL won't help you either. So, if you want a useable `ActiveRecord::Relation` upon which to chain further queries, you may have to do some rebinding.[1]\n\n[1] Like here: https://github.com/brianhempel/active_record_union/blob/master/lib/active_record_union/active_record/relation/union.rb#L25\n", "created_at": "2014-11-10 14:58:54", "user": 506950, "id": 62395160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/72696193", "text": "+1\n", "created_at": "2015-02-03 17:35:50", "user": 1296472, "id": 72696193}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6592\nCreated by **raven** - 2011-03-18 06:52:21 UTC\n\nWhen i invoke \n\n```\nnumber_to_percentage(100)\n```\n\nit got a error.\n\nthis method in api is \n\n```\nnumber_to_percentage(number, options = {}) \n```\n\nPoint is if add :precision parameter to it, like \n\n```\nnumber_to_percentage(100, :precision => 2) \n```\n\nit works.\n\nhere is the trace information\n\n```\nactivesupport (3.0.0) lib/active_support/whiny_nil.rb:48:in `method_missing'\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/rational.rb:526:in `**'\nactionpack (3.0.0) lib/action_view/helpers/number_helper.rb:269:in `number_with_precision'\nactionpack (3.0.0) lib/action_view/helpers/number_helper.rb:163:in `number_to_percentage'\n```\n", "labels": [], "number": 940, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904743, "title": "number_to_percentage method error", "url": "https://api.github.com/repos/rails/rails/issues/940", "created_at": "2011-05-16 04:47:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171426", "text": "_Imported from Lighthouse._\nComment by **Josh Kalderimis** - 2011-03-18 11:35:34 UTC\n\nHi Raven,\n\nI have tried reproducing this bug but everything seems to work fine, can you please provide further information on how to reproduce this issue.\n\nAre you using Rails 3.0.0?\n\nCan you confirm if this bug exists against 3.0.6?\n\nThanks\n\nJosh\n", "created_at": "2011-05-16 04:47:18", "user": 789801, "id": 1171426}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171427", "text": "_Imported from Lighthouse._\nComment by **raven** - 2011-03-21 01:10:08 UTC\n\nyes , I'm using Rails 3.0.0 \n\nis this a fixed bug? \n\nbut i've searched tickets list, no results~\n", "created_at": "2011-05-16 04:47:19", "user": 789801, "id": 1171427}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214067", "text": "Its working fine. This ticket is invalid\n", "created_at": "2011-05-21 10:11:53", "user": 16808, "id": 1214067}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6593\nCreated by **calamitas** - 2011-03-18 09:04:29 UTC\n\nActiveSupport::TimeZone.all returns all time zones defined up to the first call to ActiveSupport::TimeZone.all. Time zones added after that first call will never be returned.\n\nThe same is true for ActiveSupport::TimeZone.us_zones.\n\nThis means that e.g., form helpers will not display time zones added after the first ever call to ActiveSupport::TimeZone.all.\n\nWe noticed this with Rails 3.0.4, but the problem appears to be still present in the master.\n", "labels": [], "number": 941, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904744, "title": "ActiveSupport::TimeZone.all is not updated when new time zones are added", "url": "https://api.github.com/repos/rails/rails/issues/941", "created_at": "2011-05-16 04:47:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6596\nCreated by **Jay Crouch** - 2011-03-19 21:03:30 UTC\n### Question: what are 'best practices' for dealing with transient database errors (like Deadlocks and constraint violations) in a highly concurrent Rails system?\n\nThank you in advance to anyone reading this; I spoke with Yehuda Katz yesterday at #mwrc and he thought ithis was a deep enough question to open here. _**Disclaimer_\\* My understanding of the database adapters supported by Rails is limited to MySQL, so any statement below relating to database behavior should be read as MySQL behavior. We are also running Rails 2.3.9 and might be unfamiliar with new functionality available in 3.x*\n\n---\n\nWe have recently scaled our app horizontally using the 'shared nothing' architecture approach, and now that we have multiple servers (and background processes) acting concurrently on the Database we are tracing several ActiveRecord::StatementInvalid exceptions related to deadlock or other constraint violations that are transient and thus retryable.\n\nThe MySQL team believes deadlocks are transient, frequent and inherently safe in transactional databases - and that consuming applications should be _'always prepared to re-issue a transaction'_; see http://dev.mysql.com/doc/refman/5.0/en/innodb-deadlocks.html\n\n> ### 13.2.8.9.¬†How to Cope with Deadlocks\n> \n> Deadlocks are a classic problem in transactional databases, but they are not \n> dangerous unless they are so frequent that you cannot run certain \n> transactions at all. Normally, you must write your applications so that they are \n> always prepared to re-issue a transaction if it gets rolled back because of a deadlock.\n> \n> **InnoDB** uses automatic row-level locking. You can get deadlocks even in the \n> case of transactions that just insert or delete a single row. That is because \n> these operations are not really ‚Äúatomic‚Äù; they automatically set locks on the \n> (possibly several) index records of the row inserted or deleted.\n\n---\n#### My Team has been looking into this for several weeks now and have made the following observations:\n1. Why not use `SHOW ENGINE INNODB STATUS` to identify and remediate deadlocks? While a useful tool, we believe this approach represents an anti-pattern:\n   - because MySQL states as policy that deadlocks are a common occurrence that should be retried as opposed to eliminated\n   - because MySQL states even single statement transactions `INSERT INTO‚Ä¶` will produce deadlocks and are thus at some level deadlocks are unable to be eliminated (reproduced often in our system)\n   - because anticipating deadlocks is an impossible task, and relying on deadlock reports in order to resolve them means that we are creating a poor user experience while we wait for data to respond to\n   - because pessimistic locking to ensure data integrity in situations like 'counters' is expensive and creates more frequent deadlocks\n   - because modifying extensive blocks of execution (theoretically all controller actions) to avoid deadlocks is hardly concise; nor within the ability of many junior members of the community\n2. Why not extend the `ActiveRecord::Base.transaction` method to include automatic retry mechanisms? While this could theoretically solve the problem, we believe this approach also represents an anti-pattern:\n   - because the definition of `transaction` is inherently different in Rails and the Database layer. In the database, a single statement under auto-commit represents a transaction; in Rails a transaction typically represents multiple statements that form an atomic process. In order to use transaction auto-retry, every statement would have to be wrapped in a transaction block - which is hardly readable - or DRY. _caveat: perhaps Rails could wrap single statements in a transparent retry block that the programmer wouldn't see; but I don't know how to go about doing this_\n   - because multi-statement transactions in Rails operate within a lexical scope (typically controller) instance and local variables may be modified during multi-statement blocks; automatic retry of the block would likely fail due to unintended behavior caused by programmers' expectation that statements would only be executed once‚Ä¶ _caveat: perhaps it would be possible to create a binding closure of all variables in scope before performing the transaction block, and to restore this closure before re-trying; however this approach seems to me to very inefficient - and I do not understand Ruby to the degree necessary to implement this_\n   - because IMHO, there are transient database errors caused by concurrency other than deadlocks which I believe should be gracefully retried, and which are not necessarily encapsulated in a single SQL Statement:\n#### Example constraint violation\n\n```\nclass CreateUsers < ActiveRecord::Migration\n  def self.up\n    create_table :users, :options => 'ENGINE=InnoDB DEFAULT CHARSET=utf8' do |t|\n      ‚Ä¶\n      t.string :email, :null => false, :limit => 255\n      ‚Ä¶\n    end\n    add_index :users, :email, :unique => true, :name => 'index_users_unique'\n  end\nend\n\n```\n\n---\n\n```\nclass User < ActiveRecord::Base\n‚Ä¶\nvalidates_uniqueness_of :email, :allow_blank => true\n‚Ä¶\nend\n\n```\n\n---\n\n```\n### I am using two statements here which effectively implement find_or_create_by to illustrate how multi-statement scenarios exist which should be retried.\nProcess #1: User.create(:email => 'somebody@some.host.com') unless User.find_by_email('somebody@some.host.com') \nProcess #2: User.create(:email => 'somebody@some.host.com') unless User.find_by_email('somebody@some.host.com') \n```\n\nHere, we've implemented a unique index on the email column for the users table to guarantee data integrity under concurrent conditions, matched with an 'optimistic' validation in the model. In this scenario neither process finds a user matching the email attribute and thus attempts a create. The create then executes the validates_uniqueness_of validation in both processes, which succeed. The `INSERT INTO USER` statements are then sent to the database which responds with a duplicate key violation.\n### What we have done\n\nBased on our observations, we believe that wholesale retry of requests instead of transactions is the preferred approach. We believe proper controller actions should be implemented to never leave data in an inconsistent state, thus it should be safe to retry any action in its entirety.\n\nDue to our limited knowledge of the Rails core, we have implemented a rescue_from ActiveRecord::StatementInvalid at the ApplicationController base point, and respond with Javascript embedded in a blank HTML document which resubmits the request using the same method as the original attempt.\n\n**We know this is a hack. We know this hack increases network traffic and only works for HTML requests from browsers supporting JS; any actions which respond to any other formats are still hosed.**\n\nWe originally attempted to use the rescue_from to interrupt the exception event and re-envoke the controller action; however, this led to duplicate render errors and a myriad of other problems because instance variables had been set/changed in the controller object. \n\nWe also tried to use a background NetHTTP process to attempt a second request that the user wouldn't experience‚Ä¶ however this approach failed to supply the request context; i.e. the users session and cookies weren't available - much less the request headers.\n\nWhat approach can you Rails geniuses come up with?\n", "labels": [], "number": 942, "updated_at": "2011-05-21 15:12:33", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904745, "title": "What are 'best practices' for dealing with transient database errors (like Deadlocks and constraint violations) in a highly concurrent Rails system?", "url": "https://api.github.com/repos/rails/rails/issues/942", "created_at": "2011-05-16 04:47:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6597\nCreated by **Damian Hamill** - 2011-03-19 21:16:24 UTC\n\nI want to create engines to embed in an application to add functionality but in most cases I want to use the parent application's layout and styles for a consistent look and feel.  When accessing a view in an engine the assets included in the parent application's layout are prefixed with an auto generated engine prefix.  I have an engine mounted at /svc with the following engine.rb file\n\n``` ruby\nmodule Svc\n  class Engine < Rails::Engine\n    config.asset_path = \"/my_engine/%s\"\n  end\nend\n```\n\nand the following helper reference in {app.root}/app/views/layouts/application.html.erb\n\n``` erb\n\n    <%= stylesheet_link_tag \"main\" %>\n```\n\nWhen accessing /svc/index the output for this tag is \n\n``` html\n    <link href=\"/my_engine//stylesheets/main.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n```\n\nremoving the config.asset_path setting gives \n\n``` html\n <link href=\"/svc_engine/stylesheets/main.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n```\n", "labels": [], "number": 943, "updated_at": "2011-05-21 15:12:34", "user": 789801, "closed_at": "2011-05-21 15:12:33", "id": 904746, "title": "view helpers generating assets paths with engine prefix for parent application assets", "url": "https://api.github.com/repos/rails/rails/issues/943", "created_at": "2011-05-16 04:47:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6602\nCreated by **ystael** - 2011-03-21 19:36:12 UTC\n\nWhen include? is called on a has_many :through association proxy which has not yet been loaded, the resulting SQL refers to a column twice in the select list, which is invalid at least on MS SQL Server.  Example:\n\n``` ruby\nclass Foo < ActiveRecord::Base\n  has_many :foos_bars\n  has_many :bars, :through => :foos_bars\nend\n\nclass Bar < ActiveRecord::Base\n  has_many :foos_bars\n  has_many :foos, :through => :foos_bars\nend\n\nclass FoosBar < ActiveRecord::Base\n  belongs_to :foo\n  belongs_to :bar\nend\n```\n\nNow create one Foo, one Bar, and one FoosBar connecting them, then restart the console and try:\n\n``` ruby\n> foo = Foo.first\n> bar = Bar.first\n> foo.bars.include?(bar)\n```\n\nThe following exception results:\n\n``` sql\nActiveRecord::StatementInvalid: ActiveRecord::JDBCError: The column 'id' was specified multiple times for 't'.: SELECT t.* FROM (SELECT ROW_NUMBER() OVER(ORDER BY bars.id) AS _row_num, bars.*, bars.[id] FROM bars INNER JOIN foos_bars ON bars.id = foos_bars.bar_id WHERE bars.[id] = 1 AND ((foos_bars.foo_id = 1))) AS t WHERE t._row_num BETWEEN 1 AND 1\n```\n\nThe issue does not arise if before calling foo.bars.include?(bar) one first causes the association to be loaded, for example by asking for foo.bars.length .\n\nOn MySQL we get similar SQL generated, but on MySQL it is allowed to name a column twice in the select list:\n\n``` sql\nSELECT `bars`.*, `bars`.`id` FROM `bars` INNER JOIN `foos_bars` ON `bars`.id = `foos_bars`.bar_id WHERE `bars`.`id` = 1 AND ((`foos_bars`.foo_id = 1)) LIMIT 1\n```\n\nEnvironment: Rails 3.0.5, JRuby 1.6.0, AR-JDBC 1.1.1, Windows 7, MS SQL Server 2008.  Note that in this exact environment this issue is masked by another bug in AR-JDBC, issue http://kenai.com/jira/browse/ACTIVERECORD_JDBC-156 .  My fork https://github.com/ystael/activerecord-jdbc-adapter contains a tentative fix for that issue which unmasks this one.\n", "labels": [], "number": 944, "updated_at": "2011-05-21 15:12:34", "user": 789801, "closed_at": "2011-05-21 15:12:34", "id": 904748, "title": "Invalid SQL (duplicate columns in select list) generated by include? on not-yet-loaded has_many :through", "url": "https://api.github.com/repos/rails/rails/issues/944", "created_at": "2011-05-16 04:47:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6603\nCreated by **Juan Manuel Cuello** - 2011-04-22 05:48:01 UTC\n\nCurrently, when pg_dump is executed in db:structure:dump for postgres adapter, all the schemas are dumped to the sql file and 'INSERT' statements for the rails schema version are added at the end of the file.\n\nIf many schemas are dumped, the last 'SET search_path ..' statement in the sql file might not refer to the schema where schema_migrations table belongs to. An attempt to run db:test:clone_structure fails with 'ERROR:  relation \"schema_migrations\" does not exist' when executing the INSERTS because the table is not in the last set schema inside the sql file.\n\nThis patch adds the statement \"SET search_path TO #{ActiveRecord::Base.connection.schema_search_path}\" after the pg_dump statements but before the INSERT statements for the schema_migrations table.\n", "labels": [], "number": 945, "updated_at": "2011-05-21 15:12:34", "user": 789801, "closed_at": "2011-05-21 15:12:34", "id": 904749, "title": "rake db:test:clone_structure might fail with multiple schemas in postgres.", "url": "https://api.github.com/repos/rails/rails/issues/945", "created_at": "2011-05-16 04:47:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171429", "text": "_Imported from Lighthouse._\nComment by **Juan Manuel Cuello** - 2011-04-21 20:07:13 UTC\n\nIt is easy to reproduce the problem. These are the steps:\n\nCreate a Rails application that uses postgresql:\n\n```\n$ rails new postgres_clone -d postgresql\n$ cd postgres_clone\n```\n\nThen create a migration:\n\n```\n#db/migrate/20110421194621_my_migration.rb\nclass MyMigration < ActiveRecord::Migration\n  def self.up\n    connection.execute 'CREATE SCHEMA z_schema;'\n    connection.execute 'CREATE TABLE z_schema.table1 (id integer, name varchar[255]);'\n    connection.execute 'CREATE UNIQUE INDEX unique_table1_name ON z_schema.table1 USING btree (name);'\n  end\nend\n```\n\nAnd the run:\n\n```\n$ rake db:create\n$ rake db:migrate\n$ rake db:test:clone_structure\n```\n\n```\n(in /home/juan/projects/postgres_clone)\npsql:/home/juan/projects/postgres_clone/db/development_structure.sql:75: ERROR:  relation \"schema_migrations\" does not exist\nL√çNEA 1: INSERT INTO schema_migrations (version) VALUES ('20110421194...\n                     ^\n```\n", "created_at": "2011-05-16 04:47:48", "user": 789801, "id": 1171429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171430", "text": "Attachments saved to Gist: http://gist.github.com/971818\n", "created_at": "2011-05-16 04:47:50", "user": 789801, "id": 1171430}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1187263", "text": "Because of import from lighthouse we lost the second patch which can only apply.\n\nI applied patch from lighthouse and it works for me. \n\n@Juanmcuello can you provide pull request here?  \n", "created_at": "2011-05-17 01:47:46", "user": 3948, "id": 1187263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1187350", "text": "Pull request created.\n\nhttps://github.com/rails/rails/pull/1094\n", "created_at": "2011-05-17 02:13:39", "user": 112913, "id": 1187350}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6604\nCreated by **David Morton** - 2011-03-22 13:17:38 UTC\n\nON my home network, I have a transparent proxy.  I am connecting to a rails server across the Internet.  I was surprised to see this in the logs:\n\nStarted GET \"/auction/login\" for 192.168.2.1 at 2011-03-22 07:59:12 -0500\n\n192.168.2.1 is the IP address of my home network internal router.  Not my laptop, not my internal proxy... and most of all, not my public IP address.   To the admin of the server, the address makes absolutely no sense.  The server should only need to report the public ip!\n", "labels": [], "number": 946, "updated_at": "2011-05-21 15:12:34", "user": 789801, "closed_at": "2011-05-21 15:12:34", "id": 904750, "title": "log file logs private IP of client home network", "url": "https://api.github.com/repos/rails/rails/issues/946", "created_at": "2011-05-16 04:47:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6606\nCreated by **kempgen** - 2011-03-22 20:50:16 UTC\n# Summary\n\nActiveRecord does not escape NUL (\\x00) bytes in :string fields for the SQLite3 adapter.\n(Rails 3.0.5)\n# How to reproduce\n\n``` sh\nrails new foo\ncd foo\nrails g model Book title:string\nrake db:migrate\nrails c\n```\n\n``` ruby\nb = Book.new( :title => \"-A-\\x00-B-\" )\nb.save\n```\n\nOutput:\n    ActiveRecord::StatementInvalid: SQLite3::SQLException: unrecognized token: \"'-A-\": INSERT INTO \"books\" (\"title\", \"created_at\", \"updated_at\") VALUES ('-A--B-', ..., ...)\n        from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:207:in `rescue in log'\n        from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:199:in`log'\n        from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'\n        from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:282:in`insert_sql'\n        from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:149:in `insert_sql'\n        from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:44:in`insert'\n        from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:16:in `insert'\n        from .../arel-2.0.9/lib/arel/select_manager.rb:217:in`insert'\n        from .../activerecord-3.0.5/lib/active_record/relation.rb:14:in `insert'\n        from .../activerecord-3.0.5/lib/active_record/persistence.rb:270:in`create'\n        from .../activerecord-3.0.5/lib/active_record/timestamp.rb:47:in `create'\n        from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in`block in create'\n        from .../activesupport-3.0.5/lib/active_support/callbacks.rb:413:in `_run_create_callbacks'\n        from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in`create'\n        from .../activerecord-3.0.5/lib/active_record/persistence.rb:246:in `create_or_update'\n        from .../activerecord-3.0.5/lib/active_record/callbacks.rb:277:in`block in create_or_update'\n    ... 3 levels...\n        from .../activerecord-3.0.5/lib/active_record/validations.rb:43:in `save'\n        from .../activerecord-3.0.5/lib/active_record/attribute_methods/dirty.rb:21:in`save'\n        from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block (2 levels) in save'\n        from .../activerecord-3.0.5/lib/active_record/transactions.rb:292:in`block in with_transaction_returning_status'\n        from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'\n        from .../activerecord-3.0.5/lib/active_record/transactions.rb:207:in`transaction'\n        from .../activerecord-3.0.5/lib/active_record/transactions.rb:290:in `with_transaction_returning_status'\n        from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in`block in save'\n        from .../activerecord-3.0.5/lib/active_record/transactions.rb:251:in `rollback_active_record_state!'\n        from .../activerecord-3.0.5/lib/active_record/transactions.rb:239:in`save'\n# How to fix\n\nSQLite does not support NUL bytes in string fields.\n\nHowever, ActiveRecord should never send unescaped values to the database.\n\n\\0 bytes could be escaped as \\\\0 (and \\ as \\\\) when writing and have to be unescaped when reading from the adapter.\n\nAlternatively (Python App Engine SDK does this): \"Nulls in a string (\\0) are replaced with the escape sequence \\1\\1, while \\1 bytes are replaced with \\1\\2. ... This encoding is reversible, but ensures the strings still sort in the same order as they did previously.\"\n\nThe escaping/encoding can easily be done in ActiveRecord::ConnectionAdapters::SQLite3Adapter.quote() but the string will have to be unescaped/decoded somewhere.\n", "labels": [], "number": 947, "updated_at": "2013-01-15 21:05:10", "user": 789801, "closed_at": "2011-05-21 15:12:34", "id": 904752, "title": "ActiveRecord does not escape NUL bytes for SQLite3", "url": "https://api.github.com/repos/rails/rails/issues/947", "created_at": "2011-05-16 04:48:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227856", "text": "Has the issue been fixed?\n", "created_at": "2011-05-24 12:34:41", "user": 418980, "id": 1227856}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12275415", "text": "I doubt it, I just ran across it.\n", "created_at": "2013-01-15 16:26:12", "user": 375743, "id": 12275415}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12277093", "text": "A pull request is very welcome :)\n", "created_at": "2013-01-15 16:54:52", "user": 26328, "id": 12277093}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12281901", "text": "Not sure how this could be patched cleanly, escaping `\\0` (or `\\u0000` for unicode) would work but when unescaping the string you'd have to unescape all occurrences of it -- which may not be what the user wants as it'll corrupt the stored string if it already contains `\\\\0` or `\\\\u0000`.\n\nYou could replace null-bytes with some magic token but the DB may be shared with other systems and that's not really standard behavior for handing that stuff.\n\nLong story short, to avoid this headache (and since I don't know how to properly handle this) I just updated the fields that could contain a lot of junk to be serialized as Strings and let the serializer handle it.\n\nAt least this way it's obvious how 3rd parties should handle those columns.\n", "created_at": "2013-01-15 18:33:50", "user": 375743, "id": 12281901}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12287931", "text": "Cannot reproduce this in master and 3.2.9 so I believe this had been fixed in sqlite3 gem.\n\n```\nLoading development environment (Rails 4.0.0.beta)\nirb(main):001:0> b = Book.new( :title => \"-A-\\x00-B-\" )\n=> #<Book id: nil, title: \"-A-\\u0000-B-\", created_at: nil, updated_at: nil>\nirb(main):002:0> b.save\n   (0.2ms)  begin transaction\n  SQL (34.4ms)  INSERT INTO \"books\" (\"created_at\", \"title\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", Tue, 15 Jan 2013 20:37:07 UTC +00:00], [\"title\", \"-A-\\u0000-B-\"], [\"updated_at\", Tue, 15 Jan 2013 20:37:07 UTC +00:00]]\n   (204.7ms)  commit transaction\n=> true\nirb(main):003:0> \n```\n", "created_at": "2013-01-15 20:38:45", "user": 150174, "id": 12287931}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12288448", "text": "Works with `#create` but fails on `#update_attributes`.\n\nPS. Just noticed that you didn't actually use `#create` but it's the same deal, works on `INSERT` but fails on `UPDATE`.\n", "created_at": "2013-01-15 20:49:45", "user": 375743, "id": 12288448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12288979", "text": "oh I see, then it would be better to open a new ticket to describe this in more detail.\n", "created_at": "2013-01-15 21:01:07", "user": 150174, "id": 12288979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12289203", "text": "Will do shortly, cheers.\n", "created_at": "2013-01-15 21:05:10", "user": 375743, "id": 12289203}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6607\nCreated by **Victor Lin** - 2011-03-22 22:39:21 UTC\n\nIf you yield to an ERB block within a view helper, the result of the yield will be the output buffer (unless you explicitly yield/return in your ERB template). I'm not sure this is a bug per se, but it is rather surprising behavior.\n", "labels": [], "number": 948, "updated_at": "2011-05-21 15:12:34", "user": 789801, "closed_at": "2011-05-21 15:12:34", "id": 904753, "title": "yield in view helpers behaves unexpectedly ", "url": "https://api.github.com/repos/rails/rails/issues/948", "created_at": "2011-05-16 04:48:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171432", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-23 18:18:59 UTC\n\nI think what you're seeing is the consequence of [this change](http://yehudakatz.com/2009/08/31/simplifying-rails-block-helpers-with-a-side-of-rubinius/) in Rails 3. Does the article make things clearer?\n", "created_at": "2011-05-16 04:48:07", "user": 789801, "id": 1171432}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6608\nCreated by **eli.b** - 2011-03-23 03:39:09 UTC\n## Consider these models:\n\n<code>\n`class First < ActiveRecord::Base`\n\n  `has_many :tags`\n\n  `has_many :thirds, :through => :tags`\n\n`end`\n\n`class Second < ActiveRecord::Base\nend`\n\n`class Third < Second`\n\n  `has_many :tags`\n\n  `has_many :firsts, :through => :tags`\n\n`end`\n\n`class Tag < ActiveRecord::Base`\n\n  `belongs_to :first`\n\n  `belongs_to :third`\n\n`end`\n## </code>\n\nIn other words, we have a has_many :through 'tag-style' relationship, but with one of the models (Third) being an STI inheriting from another (Second).\nSay I wanted to do a join to see all instances of Third for some value of First:\n\n@thirds = Third.joins(:firsts).where(\"first.id = 2\")\n\nThis will work as expected; the generated sql (via to_sql) being:\n\nSELECT `seconds`.\\* FROM `seconds`\nINNER JOIN `tags` ON `seconds`.`id` = `tags`.`third_id`\nINNER JOIN `firsts` ON `firsts`.`id` = `tags`.`first_id`\nWHERE `seconds`.`type` = 'Third' AND (first.id = 1)\n\nThis doesn't work in the other direction:\n\n@firsts = First.joins(:thirds).where(\"second.id = 2\")\n\nThe SQL generated being:\n\nSELECT `firsts`.\\* FROM `firsts` \nINNER JOIN `tags` ON `firsts`.`id` = `tags`.`first_id` \nINNER JOIN `seconds` ON `seconds`.`type` = 'Third'\nWHERE (second.id = 2)\n\nThis results in tag duplication due to the fact that :seconds are not joined correctly with the tag table as in the first case above (see third line of sql statement in each case). All firsts with tags will show up in the resulting table, the WHERE clause being entirely ineffectual. \n\nIf something different needs to be stated in the ActiveRecord::Query statements above, it is not documented...\n\nThis is all using Rails 3.0.5.\n", "labels": [], "number": 949, "updated_at": "2011-05-21 15:12:34", "user": 789801, "closed_at": "2011-05-21 15:12:34", "id": 904755, "title": "Generated sql for has_many :through relation wrong when used with STI", "url": "https://api.github.com/repos/rails/rails/issues/949", "created_at": "2011-05-16 04:48:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171433", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-23 18:09:04 UTC\n\nYep, I've confirmed this - if you define the association in the base class it works as expected though.\n", "created_at": "2011-05-16 04:48:13", "user": 789801, "id": 1171433}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171434", "text": "_Imported from Lighthouse._\nComment by **eli.b** - 2011-03-23 18:17:24 UTC\n\nHey-\nThanks Andrew!\n'if you define the association in the base class it works as expected though.'\nWhat do you mean exactly? If I just put the class definition of Third inside second.rb? Sorry, I'm a little new to the not-so-simple associations game.\n-e\n", "created_at": "2011-05-16 04:48:15", "user": 789801, "id": 1171434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171435", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-24 11:59:33 UTC\n\nUsing your models it would be like this:\n\n``` ruby\nclass First < ActiveRecord::Base\n  has_many :tags\n  has_many :seconds, :through => :tags\nend\n\nclass Second < ActiveRecord::Base\n  has_many :tags\n  has_many :firsts, :through => :tags\nend\n\nclass Third < Second; end\n\nclass Tag < ActiveRecord::Base\n  belongs_to :first\n  belongs_to :seconds\nend\n```\n\nSetting it up this way will return the appropriate models when use First.joins(:seconds).where(:seconds => { :id => 1 }). Using more descriptive model names will make it clearer:\n\n``` ruby\nclass Vehicle < ActiveRecord::Base\n  has_many :taggings\n  has_many :tags, :through => :taggings\nend\nclass Car < Vehicle; end\nclass Van < Vehicle; end\nclass Motorbike < Vehicle; end\n\nclass Tag < ActiveRecord::Base\n  has_many :taggings\n  has_many :vehicles, :through => :taggings\nend\n\nclass Tagging < ActiveRecord::Base\n  belongs_to :vehicle\n  belongs_to :tag\nend\n\n>> Tag.joins(:vehicles).where(\"vehicles.id = 1\").to_sql\n=> \"SELECT tags.* FROM tags INNER JOIN taggings ON tags.id = taggings.tag_id INNER JOIN vehicles ON taggings.vehicle_id = vehicles.id WHERE vehicles.id = 1\"\n```\n", "created_at": "2011-05-16 04:48:17", "user": 789801, "id": 1171435}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6611\nCreated by **Corey Ward** - 2011-03-24 03:00:22 UTC\n\nI have created a barebones Rails app demonstrating this bug: https://github.com/coreyward/bug-demo\n\nI also have a Question open on StackOverflow about this: http://stackoverflow.com/questions/5199235/activerecord-query-changing-when-a-dot-period-is-in-condition-value\n\nI don't have the skills/knowledge to know A) where this is coming from or B) how to fix it. Any help would be very much appreciated.\n\n---\n\nThis bug occurs when you have a \"child\" model (one that `belongs_to` another model) with an `order` scope on it and you try to set a `where` condition.\n\nSo for the following models:\n\n```\nclass Person < ActiveRecord::Base\n  has_many :items\nend\n\nclass Item < ActiveRecord::Base\n  belongs_to :person\n  default_scope order(:ordinal)\nend\n```\n\nWith the following calls:\n\n```\nPerson.includes(:items).where(:name => 'John')\n# or\nPerson.includes(:items).find_by_name 'John'\n```\n\nThe items loaded are ordered by the `ordinal` on each `Item`. \n\nIf you introduce a period into the name, though (e.g. \"John.Smith\"), the order scope is ignored.\n\nTo see this in action...\n\n```\n$ git clone git://github.com/coreyward/bug-demo.git\n$ cd bug-demo\n$ rake db:create db:migrate db:seed\n$ rails s\n```\n\nAnd then fire up [http://localhost:3000/](http://localhost:3000/) and see for yourself.\n", "labels": [], "number": 950, "updated_at": "2015-08-27 16:59:16", "user": 789801, "closed_at": "2012-01-16 21:31:15", "id": 904757, "title": "ActiveRecord query changing when a dot/period is in condition value", "url": "https://api.github.com/repos/rails/rails/issues/950", "created_at": "2011-05-16 04:48:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171436", "text": "_Imported from Lighthouse._\nComment by **Anuj Dutta** - 2011-03-24 03:44:43 UTC\n\nThanks for such a detailed info and the demo application. Ran the app and can confirm that this is a bug. I am not sure what is causing it yet but I am investigating.\n", "created_at": "2011-05-16 04:48:23", "user": 789801, "id": 1171436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2047184", "text": "We are still experiencing this issue with Rails 3.1\nCan it please be re-opened\n", "created_at": "2011-09-09 01:44:52", "user": 520580, "id": 2047184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2073597", "text": "Thanks @tenderlove; we're getting this issue in 3.1 with an autocomplete which fails (with an exception) iff the user enters data that contains a period. The work-around for this is to do `user_data.gsub!('.', '_')`, which works as we're doing a LIKE query anway, but one concern is whether we're hitting changes in query behaviour elsewhere that don't manifest themselves so obviously.\n", "created_at": "2011-09-12 18:21:09", "user": 38485, "id": 2073597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2073644", "text": "@jasonhutchens makes sense.  Is this only happening on PG, or any database?  Can you possibly show code that breaks?  Thanks.\n", "created_at": "2011-09-12 18:24:55", "user": 3124, "id": 2073644}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2083317", "text": "@tenderlove sorry for the delay; we will answer those questions as soon as we're able\n", "created_at": "2011-09-13 16:02:18", "user": 38485, "id": 2083317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2095324", "text": "Confirmed on SQLite with https://github.com/coreyward/bug-demo and rails-HEAD after a few changes to make the project 3.1-compatible.\n\nI started down the path of writing a failing unit test but adding new items to the AR fixtures easily causes a bunch of unintended failures. Any advice?\n", "created_at": "2011-09-14 17:01:04", "user": 27847, "id": 2095324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2385339", "text": "Hit this bug too when firing an includes statement on a query with periods in it. (postgres db, rails 3.1.1)\n", "created_at": "2011-10-12 20:31:18", "user": 19973, "id": 2385339}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2409211", "text": "I've also encountered this bug. My version of it was slightly different (in my case, the select query was ignored, not the order query) so I created a different sample application to demonstrate the error. See https://github.com/peterjm/rails-activerecord-bug-demo\n\nI've confirmed the error with both sqlite3 and mysql2.\n", "created_at": "2011-10-14 17:35:06", "user": 55985, "id": 2409211}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2410394", "text": "^^ nice one @peterjm, that makes it even clearer with the 2 characters test, I also tested your sample over postgres, and same deal, so it seems to be independent of database choice.\n\nAlso I tested the same sample with rails 3.1.1, same deal.\n", "created_at": "2011-10-14 19:22:17", "user": 19973, "id": 2410394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2411054", "text": "So as far as i can tell, its this : \n\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation.rb#L523\n\nReturning both 'people' and 'xx' as valid table names, causing it to then alias the string (having a table found count greater than 1), and burning the previously defined values.\n", "created_at": "2011-10-14 20:30:31", "user": 19973, "id": 2411054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2411241", "text": "Yep, I think you're right -- forcing `tables_in_string` to return an empty array definitely fixes my problem.\n\nI think fixing this might be tricky -- I'll need to dive deeper than my current knowledge into the inner workings of ActiveRecord.\n", "created_at": "2011-10-14 20:48:32", "user": 55985, "id": 2411241}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2462575", "text": "I've been looking in to this.  The problem is that there is no way for us to tell the difference between someone referencing a column and string literal without a full blown SQL parser.  The problem stems from the fact that we allow users to add arbitrary snippets of SQL.  Arbitrary snippets of SQL, in addition to reconciling eager loaded tables within those snippets makes everything fail.\n\nWe can't tell if someone is referencing a \"table like thing\" from a string literal because string literal quoting changes from database to database.  As far as I can tell, we have three options:\n1. Disallow arbitrary SQL\n2. Write a SQL parser for every database\n3. Document the problem and move on\n\nI'm firmly in favor of option 3, unless someone more clever than I can come up with a solution.  Maybe @jonleighton?\n\nAnyway, here is a test case that will fail:\n\n``` diff\n\ndiff --git a/activerecord/test/cases/associations/has_many_associations_test.rb b/activerecord/test/cases/associations/has_many_associations_test.rb\nindex cddd2a6..bf4625c 100644\n--- a/activerecord/test/cases/associations/has_many_associations_test.rb\n+++ b/activerecord/test/cases/associations/has_many_associations_test.rb\n@@ -52,6 +52,12 @@ class HasManyAssociationsTest < ActiveRecord::TestCase\n     Client.destroyed_client_ids.clear\n   end\n\n+  def test_select_with_dot_in_name\n+    Developer.where(:name => 'aaron.patterson')\n+    .includes(:audit_logs)\n+    .select('developers.id as omg').order('omg').to_a\n+  end\n+\n   def test_create_from_association_should_respect_default_scope\n     car = Car.create(:name => 'honda')\n     assert_equal 'honda', car.name\n```\n", "created_at": "2011-10-19 23:01:24", "user": 3124, "id": 2462575}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2468171", "text": "Could there be some way to pass down a hint to the Relation that the string contains SQL, or is known not to contain SQL.\n\nI'm just thinking out loud here, but here's a couple possibilities:\n1. Add some way to flag a string as not containing SQL, i.e. `Developer.where(:name => 'aaron.patterson'.sql_safe)` and then have `Relation#tables_in_string` understand the sql_safe flag.\n2. Add a method to Relations to prevent any of the custom strings being parsed as SQL, i.e. `Developer.where(:name => 'aaron.patterson').no_sql.to_a`. (This seems pretty ugly to me, but I'm just brainstorming).\n", "created_at": "2011-10-20 12:50:43", "user": 55985, "id": 2468171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2477978", "text": "@tenderlove, @NZKoz was talking about deprecating the `tables_in_string` magic a while back. I would be in favour of that. We could then simply document that if people are referencing stuff in string conditions that they wish to be eager loaded, then they _must_ use `eager_load(:foo)`. What do you think?\n", "created_at": "2011-10-21 05:48:04", "user": 1979, "id": 2477978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2478915", "text": "people's apps would break in the upgrade, but they'd break predictably (no such table `whatevers`) rather than 'randomly' issuing a much more complicated  query.  Seems like a slightly painful transition but beats the ... madness we have right now :)\n", "created_at": "2011-10-21 08:30:55", "user": 197, "id": 2478915}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2478999", "text": "@NZKoz I don't think there's anything stopping us implementing it as a deprecation before removing entirely?\n", "created_at": "2011-10-21 08:42:15", "user": 1979, "id": 2478999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2479176", "text": "True, a deprecation warning would catch every _intentional_ use of the 'fallback' strategy, it'd just fire false positives where this issue is concerned.  But that's fine ;)\n\n## \n\nCheers,\n\nKoz\n\nOn Friday, 21 October 2011 at 9:42 PM, Jon Leighton wrote:\n\n> @NZKoz I don't think there's anything stopping us implementing it as a deprecation before removing entirely?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/950#issuecomment-2478999\n", "created_at": "2011-10-21 09:07:30", "user": 197, "id": 2479176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2482564", "text": "I like the idea of adding an `eager_load` rather than trying to intuit from the strings what tables people want to load. :+1:\n", "created_at": "2011-10-21 15:26:45", "user": 3124, "id": 2482564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2484873", "text": "Ok, I added a 3.2 milestone for this.\n", "created_at": "2011-10-21 18:51:51", "user": 1979, "id": 2484873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2498945", "text": "+1 \nan explicit eager_load sounds like a good plan\n", "created_at": "2011-10-24 01:15:00", "user": 520580, "id": 2498945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3303069", "text": "This feels like a disproportionate response to this failure case.\n\nI'd propose leaving include as-is and finding a workaround or tweak to the heuristic to fix this particular issue.\n\nAgreed that we don't want to write a whole sql parser, but the batch vs joined loading strategy heuristic has worked great.\n\nSaying \"include\" is at a higher level of abstraction -- it's meant to hide the actual strategy. \"I want all this stuff loaded, thanks! also, with these conditions and orderings on it, btw\"\n\nSo, if anything, I think we should stop over-detecting qualified column names in conditions. And add API, like the `references` than @jonleighton suggested, to make these ambiguous cases explicit.\n", "created_at": "2011-12-29 17:48:10", "user": 199, "id": 3303069}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3303219", "text": "As discussed in campfire, we will investigate using `references` to explicitly state that a table is referenced. E.g.\n\n```\nPost.includes(:comments).where(\"comments.title = 'lol'\").references(:comments)\n# => triggers a JOIN\n```\n\nIn most cases, it should be possible to automatically build up the references, e.g.\n\n```\nPost.includes(:comments).where(:comments => { :title => 'lol' })\n# automatically adds 'comments' to the references\n```\n\nWhere the user is using string SQL, they must add their own references for `includes` to work properly. So after this, we can deprecate the dodgy SQL-parsing regexp.\n\nIt's unlikely that I'll do this in time for 3.2, but if someone else wants to pick it up then be my guest...\n\nReopening for now, then.\n", "created_at": "2011-12-29 18:02:12", "user": 1979, "id": 3303219}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6521694", "text": "I'm not sure I've missed something, but I can't get it to work.\n\n_Works_\n\n``` ruby\nGig.select(\"gigs.*, (SELECT 1 FROM gigs LIMIT 1)\").includes(:song).limit(1)\n```\n\n``` sql\nSELECT gigs.*, (SELECT 1 FROM gigs LIMIT 1) FROM `gigs` LIMIT 1\nSELECT `songs`.* FROM `songs` WHERE `songs`.`id` IN (1)\n```\n\n_Does not work (subquery contains a dot)_\n\n``` ruby\nGig.select(\"gigs.*, (SELECT 1 FROM gigs g2 INNER JOIN songs ON songs.id = g2.song_id LIMIT 1)\").includes(:song).limit(1)\n```\n\n``` sql\nSELECT `gigs`.`id` AS t0_r0, `gigs`.`song_id` AS t0_r1, `gigs`.`channel_id` AS t0_r2, `gigs`.`time` AS t0_r3, `gigs`.`listed` AS t0_r4, `songs`.`id` AS t1_r0, `songs`.`artist_id` AS t1_r1, `songs`.`title` AS t1_r2, `songs`.`grade` AS t1_r3, `songs`.`length` AS t1_r4, `songs`.`play_count` AS t1_r5, `songs`.`gigs_count` AS t1_r6 FROM `gigs` LEFT OUTER JOIN `songs` ON `songs`.`id` = `gigs`.`song_id` LIMIT 1\n```\n\nWhere did the _subquery_ go?\n\nI'm using rails `4.0.0.beta`, e1838bfcb805445b6eaf03f8f23501f560f939e8 with the mysql2 gem version `0.3.10`.\n", "created_at": "2012-06-23 01:58:31", "user": 220827, "id": 6521694}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56522044", "text": "Still in 3.2.19. Any chance to fix this?\n", "created_at": "2014-09-23 13:49:35", "user": 116947, "id": 56522044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56553224", "text": "@dfens 3.2.19 is no longer supported for bug fixes, only security fixes so it will not be back ported into 3.2.19. \n", "created_at": "2014-09-23 16:59:31", "user": 1080678, "id": 56553224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/61637794", "text": "I'm on 4.0.11 and just started getting this.\n", "created_at": "2014-11-04 13:19:08", "user": 134539, "id": 61637794}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/135492906", "text": "same here with this code:\n`scope :label,     -> label { joins(:labels).where(\"labels.name = ?\", label) }`\nwith `label = foo.bar` on latest rails with Postgres\n", "created_at": "2015-08-27 16:59:16", "user": 5732325, "id": 135492906}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6612\nCreated by **Xavier Shay** - 2011-03-24 03:20:16 UTC\n\nUsing the following code in routing (which is recommended on many sites) raises an exception deep inside rack if no user agent is provided by the client:\n\n```\n  constraints :user_agent => /MSIE 6/i do\n    get 'admin' => redirect('/unsupported_browser')\n  end\n```\n\nNot sure where the correct place to fix this is, but attached is one option in two diffs:\n1) Failing test against rails master\n2) Fix for rack-mount\n", "labels": [], "number": 951, "updated_at": "2011-05-18 20:36:32", "user": 789801, "closed_at": "2011-05-18 20:22:14", "id": 904759, "title": "Nil HTTP user agent breaks route constraints on user_agent", "url": "https://api.github.com/repos/rails/rails/issues/951", "created_at": "2011-05-16 04:48:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171437", "text": "_Imported from Lighthouse._\nComment by **Xavier Shay** - 2011-03-24 03:20:53 UTC\n\nAttaching rack-mount fix.\n", "created_at": "2011-05-16 04:48:30", "user": 789801, "id": 1171437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171438", "text": "Attachments saved to Gist: http://gist.github.com/971819\n", "created_at": "2011-05-16 04:48:32", "user": 789801, "id": 1171438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199488", "text": "@josh rack-mount issue?\n", "created_at": "2011-05-18 20:22:14", "user": 199, "id": 1199488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199594", "text": "I don't think this is related to the recent rack-mount change I push.\n", "created_at": "2011-05-18 20:36:32", "user": 137, "id": 1199594}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6615\nCreated by **ajoulie** - 2011-03-24 08:21:22 UTC\n\nIt seems that combinaison of accepts_nested_attributes_for and attributes= is broken into rails 2.3.8. \nThe problem occurs whith following models : \n\n```\nclass Book < ActiveRecord::Base\n  has_many :authors\n  accepts_nested_attributes_for authors\nend\n\nclass Author < ActiveRecord::Base\n  belongs_to :book\nend\n```\n\nand a params hash like this : \n\n```\nparams = {:name=>\"a great book\", \"authors_attributes\"=>{\"1\"=>{:id\"=>\"2\", \"_destroy\"=>\"\", :name => \"Boney M\"}}}\n```\n\nCalling \n\n```\nbook.attributes=params \n```\n\ndo not set @loaded to true into authors AssociationProxy of object book. So the next call to \n\n```\nbook.authors\n```\n\nwill reload author objects from database.\n\nThis was not the case in rails 2.3.5, What is the normal behaviour ? \n\nps : I saw ticket 2646 and it seems to me to be a different problem.\n", "labels": [], "number": 952, "updated_at": "2011-05-21 15:12:35", "user": 789801, "closed_at": "2011-05-21 15:12:34", "id": 904760, "title": "rails 2.3.8 : accepts_nested_attributes_for and attributes= broken", "url": "https://api.github.com/repos/rails/rails/issues/952", "created_at": "2011-05-16 04:48:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6616\nCreated by **vo.x** - 2011-03-24 15:15:01 UTC\n\nI am not sure if it is Rails or Rake problem :/\n\nmock-chroot> rake test\n(in /builddir/build/BUILDROOT/rubygem-activesupport-3.0.5-1.fc15.x86_64/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.5)\n/usr/bin/ruby -w -I\"lib:test\" \"/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb\" \"test/log_subscriber_test.rb\" \"test/descendants_tracker_test.rb\" \"test/isolation_test.rb\" \"test/core_ext/load_error_test.rb\" \"test/core_ext/file_test.rb\" \"test/core_ext/class_test.rb\" \"test/core_ext/uri_ext_test.rb\" \"test/core_ext/module/attribute_aliasing_test.rb\" \"test/core_ext/module/attr_internal_test.rb\" \"test/core_ext/module/reachable_test.rb\" \"test/core_ext/module/anonymous_test.rb\" \"test/core_ext/module/attribute_accessor_test.rb\" \"test/core_ext/module/attr_accessor_with_default_test.rb\" \"test/core_ext/module/synchronization_test.rb\" \"test/core_ext/array_ext_test.rb\" \"test/core_ext/enumerable_test.rb\" \"test/core_ext/base64_ext_test.rb\" \"test/core_ext/float_ext_test.rb\" \"test/core_ext/proc_test.rb\" \"test/core_ext/name_error_test.rb\" \"test/core_ext/duplicable_test.rb\" \"test/core_ext/integer_ext_test.rb\" \"test/core_ext/regexp_ext_test.rb\" \"test/core_ext/blank_test.rb\" \"test/core_ext/object/to_param_test.rb\" \"test/core_ext/object/to_query_test.rb\" \"test/core_ext/class/attribute_test.rb\" \"test/core_ext/class/attribute_accessor_test.rb\" \"test/core_ext/class/delegating_attributes_test.rb\" \"test/core_ext/class/class_inheritable_attributes_test.rb\" \"test/core_ext/cgi_ext_test.rb\" \"test/core_ext/date_ext_test.rb\" \"test/core_ext/date_time_ext_test.rb\" \"test/core_ext/duration_test.rb\" \"test/core_ext/kernel_test.rb\" \"test/core_ext/module_test.rb\" \"test/core_ext/numeric_ext_test.rb\" \"test/core_ext/range_ext_test.rb\" \"test/core_ext/string_ext_test.rb\" \"test/core_ext/time_ext_test.rb\" \"test/core_ext/time_with_zone_test.rb\" \"test/core_ext/bigdecimal_test.rb\" \"test/core_ext/hash_ext_test.rb\" \"test/core_ext/object_and_class_ext_test.rb\" \"test/time_zone_test.rb\" \"test/load_paths_test.rb\" \"test/flush_cache_on_private_memoization_test.rb\" \"test/concern_test.rb\" \"test/clean_backtrace_test.rb\" \"test/message_verifier_test.rb\" \"test/rescuable_test.rb\" \"test/benchmarkable_test.rb\" \"test/ordered_options_test.rb\" \"test/deprecation/proxy_wrappers_test.rb\" \"test/json/decoding_test.rb\" \"test/json/encoding_test.rb\" \"test/option_merger_test.rb\" \"test/xml_mini/nokogiri_engine_test.rb\" \"test/xml_mini/rexml_engine_test.rb\" \"test/xml_mini/jdom_engine_test.rb\" \"test/xml_mini/libxmlsax_engine_test.rb\" \"test/xml_mini/nokogirisax_engine_test.rb\" \"test/xml_mini/libxml_engine_test.rb\" \"test/string_inquirer_test.rb\" \"test/lazy_load_hooks_test.rb\" \"test/deprecation_test.rb\" \"test/multibyte_unicode_database_test.rb\" \"test/secure_random_test.rb\" \"test/memoizable_test.rb\" \"test/multibyte_utils_test.rb\" \"test/i18n_test.rb\" \"test/clean_logger_test.rb\" \"test/file_update_checker_test.rb\" \"test/message_encryptor_test.rb\" \"test/multibyte_chars_test.rb\" \"test/transliterate_test.rb\" \"test/buffered_logger_test.rb\" \"test/callback_inheritance_test.rb\" \"test/callbacks_test.rb\" \"test/configurable_test.rb\" \"test/dependencies_test.rb\" \"test/notifications_test.rb\" \"test/ordered_hash_test.rb\" \"test/safe_buffer_test.rb\" \"test/test_case_test.rb\" \"test/test_test.rb\" \"test/whiny_nil_test.rb\" \"test/gzip_test.rb\" \"test/inflector_test.rb\" \"test/caching_test.rb\" \nSkipping memcached backed store tests. Install memcache-client and try again.\nLoaded suite /usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader\nStarted\n..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................\nFinished in 6.871673 seconds.\n\n2142 tests, 9380 assertions, 0 failures, 0 errors\nmock-chroot> gem install rake --pre\nFetching: rake-0.9.0.beta.5.gem (100%)\nSuccessfully installed rake-0.9.0.beta.5\n1 gem installed\nInstalling ri documentation for rake-0.9.0.beta.5...\nInstalling RDoc documentation for rake-0.9.0.beta.5...\nmock-chroot> rake test\nrake/gempackagetask is deprecated.  Use rubygems/package_task instead\n/usr/bin/ruby -w -I\"lib:test\" -I\"/usr/lib/ruby/gems/1.8/gems/rake-0.9.0.beta.5/lib\" \"/usr/lib/ruby/gems/1.8/gems/rake-0.9.0.beta.5/lib/rake/rake_test_loader.rb\" \"test/*_/__test.rb\" \nSkipping memcached backed store tests. Install memcache-client and try again.\nLoaded suite /usr/lib/ruby/gems/1.8/gems/rake-0.9.0.beta.5/lib/rake/rake_test_loader\nStarted\nnFinished in 6.86375 seconds.\n\n  1) Failure:\ntest_deprecate_class_method(DeprecationTest)\n    [./lib/active_support/testing/deprecation.rb:11:in `assert_deprecated'\n     /builddir/build/BUILDROOT/rubygem-activesupport-3.0.5-1.fc15.x86_64/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.5/test/deprecation_test.rb:65:in`test_deprecate_class_method'\n     ./lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n     ./lib/active_support/testing/setup_and_teardown.rb:67:in`run'\n     ./lib/active_support/callbacks.rb:413:in `_run_setup_callbacks'\n     ./lib/active_support/testing/setup_and_teardown.rb:65:in`run']:\nNo deprecation warning matched (?-mix:none is deprecated.*test_deprecate_class_method): DEPRECATION WARNING: none is deprecated and will be removed from Rails 3.0. (called from collect_deprecations at ./lib/active_support/testing/deprecation.rb:29).\n<false> is not true.\n\n  2) Failure:\ntest_uniq_load_paths(LoadPathsTest)\n    [/builddir/build/BUILDROOT/rubygem-activesupport-3.0.5-1.fc15.x86_64/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.5/test/load_paths_test.rb:13:in `test_uniq_load_paths'\n     /usr/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in`**send**'\n     /usr/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n[\"/builddir/build/BUILDROOT/rubygem-activesupport-3.0.5-1.fc15.x86_64/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.5\", \"lib\", \"test\", \"/usr/lib/ruby/gems/1.8/gems/rake-0.9.0.beta.5/lib\", \"/usr/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib\", \"/usr/lib/ruby/gems/1.8/gems/i18n-0.4.2/lib\", \"/usr/lib/ruby/gems/1.8/gems/tzinfo-0.3.24/lib\", \"/usr/lib/ruby/gems/1.8/gems/builder-2.1.2/lib\", \"/usr/lib/ruby/gems/1.8/gems/rack-1.1.0/lib\", \"/usr/lib/ruby/site_ruby/1.8\", \"/usr/lib64/ruby/site_ruby/1.8\", \"/usr/lib64/ruby/site_ruby/1.8/x86_64-linux\", \"/usr/lib/ruby/site_ruby\", \"/usr/lib64/ruby/site_ruby\", \"/usr/lib64/site_ruby/1.8\", \"/usr/lib64/site_ruby/1.8/x86_64-linux\", \"/usr/lib64/site_ruby\", \"/usr/lib/ruby/1.8\", \"/usr/lib64/ruby/1.8\", \"/usr/lib64/ruby/1.8/x86_64-linux\", \".\"].\n<false> is not true.\n\n2142 tests, 9374 assertions, 2 failures, 0 errors\nrake aborted!\nCommand failed with status (1): [/usr/bin/ruby -w -I\"lib:test\" -I\"/usr/lib/...]\n\nTasks: TOP => test\n(See full trace by running task with --trace)\n", "labels": [], "number": 953, "updated_at": "2011-05-21 15:12:35", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904761, "title": "ActiveSupport test suite fails with Rake 0.9.0.beta*", "url": "https://api.github.com/repos/rails/rails/issues/953", "created_at": "2011-05-16 04:48:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171439", "text": "_Imported from Lighthouse._\nComment by **vo.x** - 2011-03-24 15:19:09 UTC\n\nI have opened ticked also on Rake side for this issue: https://github.com/jimweirich/rake/issues/26\n", "created_at": "2011-05-16 04:48:43", "user": 789801, "id": 1171439}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171440", "text": "_Imported from Lighthouse._\nComment by **vo.x** - 2011-03-24 16:30:36 UTC\n\nHmmm, now it appears to be test suite issue. When I am using different execution command on different system, I got different error count :(\n- ruby -e 'Dir.glob('\\''test/*_/__test.rb'\\'').each {|t| require t}'\n  Skipping memcached backed store tests. Install memcache-client and try again.\n  Loaded suite -e\n  Started\nn  Finished in 8.898557 seconds.\n  1) Failure:\n  test_uniq_load_paths(LoadPathsTest)\n  [./test/load_paths_test.rb:13:in `test_uniq_load_paths'\n   /usr/lib/ruby/gems/1.8/gems/mocha-0.9.8/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:19:in`__send__'\n   /usr/lib/ruby/gems/1.8/gems/mocha-0.9.8/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:19:in `run']:\n  [\"/builddir/build/BUILDROOT/rubygem-activesupport-3.0.5-1.fc15.noarch/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.5/lib\", \"test\", \"/usr/lib/ruby/gems/1.8/gems/rake-0.9.0.beta.4/lib\", \"/usr/lib/ruby/gems/1.8/gems/mocha-0.9.8/lib\", \"/usr/lib/ruby/gems/1.8/gems/i18n-0.4.2/lib\", \"/usr/lib/ruby/gems/1.8/gems/tzinfo-0.3.24/lib\", \"/usr/lib/ruby/gems/1.8/gems/builder-2.1.2/lib\", \"/usr/lib/ruby/gems/1.8/gems/rack-1.1.0/lib\", \"/usr/lib/ruby/site_ruby/1.8\", \"/usr/lib/ruby/site_ruby/1.8\", \"/usr/lib/ruby/site_ruby/1.8/i386-linux\", \"/usr/lib/ruby/site_ruby\", \"/usr/lib/ruby/site_ruby\", \"/usr/lib/site_ruby/1.8\", \"/usr/lib/site_ruby/1.8/i386-linux\", \"/usr/lib/site_ruby\", \"/usr/lib/ruby/1.8\", \"/usr/lib/ruby/1.8\", \"/usr/lib/ruby/1.8/i386-linux\", \".\"].\n  <false> is not true.\n  2142 tests, 9386 assertions, 1 failures, 0 errors\n", "created_at": "2011-05-16 04:48:44", "user": 789801, "id": 1171440}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6618\nCreated by **Szymon Nowak** - 2011-03-24 19:42:56 UTC\n\nI'm not sure how exactly collection.new should behave, as it's not really documented (at least not here: http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html), but it's behavior is inconsistent:\n\n``` ruby\nclass User < ActiveRecord::Base\n  has_many :friendships\n  has_many :friends, :through => :friendships\nend\n\nclass Friendship < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :friend, :class_name => \"User\"\nend\n\nuser.friendships.new\nuser.friendships # => []\nuser.friendships.build\nuser.friendships # => [#<Friendship id: nil, user_id: 1, friend_id: nil>]\n\n# but\nuser.friends # => []\nuser.friends.new\nuser.friends # => [#<User id: nil...>]\n```\n\nI'm not sure how it should behave, but it would be great if it always behaved like for non-through associations. It works like this in Rails 3.0.5 and master.\n", "labels": [], "number": 954, "updated_at": "2011-08-15 10:19:26", "user": 789801, "closed_at": "2011-08-15 10:19:26", "id": 904763, "title": "Inconsistent behavior of collection.new vs collection.build", "url": "https://api.github.com/repos/rails/rails/issues/954", "created_at": "2011-05-16 04:48:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171441", "text": "_Imported from Lighthouse._\nComment by **Szymon Nowak** - 2011-03-24 19:51:11 UTC\n\nTurns out that `HasManyThroughAssociation` has a simple alias: `alias_method :new, :build`, which `HasManyAssociation` doesn't have. Not sure if it's on purpose.\n", "created_at": "2011-05-16 04:48:51", "user": 789801, "id": 1171441}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1487292", "text": "Any news on this?\n", "created_at": "2011-07-01 21:29:32", "user": 156837, "id": 1487292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1806068", "text": "This was fixed in eb7ef2ccd618bc87451b980722ec73ee41c203a1, so closing.\n", "created_at": "2011-08-15 10:19:26", "user": 1979, "id": 1806068}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6619\nCreated by **Kaiting Chen** - 2011-04-11 18:45:38 UTC\n\nWhile it is possible to set paths.{app,config,lib,log,public,tmp,vendor}.\\* in application.rb, some components of Rails do not respect these options. At the very least Rails::Server.start in commands/server.rb should attempt to create the tmp subdirectories in the correct location. Therefore line 62 of that file should read\n\nFileUtils.mkdir_p(Rails.root.join(Rails.application.paths.tmp.first, dir_to_make))\n\nAnd the default location for the server pid file should also take into account paths.tmp.\n", "labels": [], "number": 955, "updated_at": "2011-05-21 15:12:35", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904764, "title": "Rake tasks and script/rails commands should respect Engine paths", "url": "https://api.github.com/repos/rails/rails/issues/955", "created_at": "2011-05-16 04:49:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6621\nCreated by **Greg Hazel** - 2011-03-25 01:38:19 UTC\n\nI was recently bit by a bug where User records were silently not being saved. Here's a mini example of the sort of error I had:\n\n``` ruby\nclass User < ActiveRecord::Base\n\n  before_create :foo\n\n  def foo\n    if self.age > 30\n      self.completed_survey = self.prequalified\n    else\n      self.completed_survey = true\n    end\n  end\n\nend\n\n# this one saves\nuser = User.create(:age => 15, :prequalified => false)\n# this one also saves\nuser = User.create(:age => 35, :prequalified => true)\n# this one does not save!\nuser = User.create(:age => 35, :prequalified => false)\n```\n\nCan you spot the error? The title of the bug gives it away. If the user is over 30 and prequalified is false, foo will accidentally return false and returning false from a before_create callback cancels the save. Also, using User.create instead of User.create! meant no exception was raised, so it went unnoticed for awhile.\n\nThis ticket is a proposal to change the interface so that save cancellation is explicit rather than implicit. Something like self.abort_save! could raise a cancel exception. The old interface could be slowly deprecated by warning when false is returned.\n\nIf this code was written, would it be accepted?\n", "labels": [], "number": 956, "updated_at": "2011-05-21 15:12:35", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904766, "title": "explicit callback cancellation instead of implicit based on return value", "url": "https://api.github.com/repos/rails/rails/issues/956", "created_at": "2011-05-16 04:49:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171442", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-25 07:12:08 UTC\n\nSorry, changing this behaviour would break loads of applications.\n", "created_at": "2011-05-16 04:49:07", "user": 789801, "id": 1171442}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171443", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-03-25 07:38:47 UTC\n\nNo, it wouldn't. As I described there is an obvious deprecation path which could be used to prevent application breakage. If you still don't think a long deprecation path is sufficient, how about a global option which defaults to the current behavior?\n\nLeaving a bad interface will break future applications (like mine, just recently).\n\n[state:open]\n", "created_at": "2011-05-16 04:49:09", "user": 789801, "id": 1171443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171444", "text": "_Imported from Lighthouse._\nComment by **Greg Hazel** - 2011-03-30 23:05:53 UTC\n\nAnother use who experienced breakage due to the current behavior:\n\nhttp://factore.ca/on-the-floor/77-rails-gotcha-with-before-validation\n", "created_at": "2011-05-16 04:49:10", "user": 789801, "id": 1171444}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6622\nCreated by **Andrew V. Stepanov** - 2011-03-25 09:27:24 UTC\n\n1) Error:\ntest_array_type_makes_an_array(NokogiriSAXEngineTest):\nArgumentError: comparison of Array with String failed\n\n```\ntest/xml_mini/nokogirisax_engine_test.rb:213:in `assert_equal_rexml'\ntest/xml_mini/nokogirisax_engine_test.rb:71:in `test_array_type_makes_an_array'\n```\n\nrpm -qa | grep ruby\nlibruby-1.9.2-alt1.r30896.1\nruby-racc-runtime-1.4.6-alt2\nruby-test-unit-2.2.0-alt1\nlibxml-ruby-1.1.3-alt1\nruby-json-1.5.1-alt1\nruby-nokogiri-1.4.4.2-alt2\nrpm-build-ruby-0.1.0-alt1\nruby-tool-setup-3.4.1-alt5\nruby-tool-rdoc-1.9.2-alt1.r30896.1\nruby-1.9.2-alt1.r30896.1\nruby-stdlibs-1.9.2-alt1.r30896.1\nruby-mocha-0.9.12-alt1\nruby-i18n-0.3.7-alt2\nruby-memcache-client-1.7.4-alt1\nruby-tzinfo-0.3.25-alt1\nruby-builder-3.0.0-alt1\nruby-tool-irb-1.9.2-alt1.r30896.1\n", "labels": [], "number": 957, "updated_at": "2011-05-21 15:12:35", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904767, "title": "Does't passes tests.", "url": "https://api.github.com/repos/rails/rails/issues/957", "created_at": "2011-05-16 04:49:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213794", "text": "Test is passing now. It can be closed.\n", "created_at": "2011-05-21 07:15:21", "user": 16808, "id": 1213794}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6623\nCreated by **Jacob Tj√∏rnholm** - 2011-03-25 14:31:39 UTC\n\nI'm using render_to_string in a mailer, and this prevents the rendering of the actual mail from finding the template. \n\nThis seems to be caused by @lookup_context being initialized on the mailer by render_to_string, then reused when rendering the mail. And this breaks because the mail extension (*.text.erb) is not found by the lookup context. \n\nHere's a minimal example: \n\n```\nclass NoteMailer < ActionMailer::Base\n  default :from => \"from@example.com\"\n\n  def foo\n    @notes = []\n    render_to_string(:template => \"notes/index.html.erb\") # <-- Removing this line makes the test pass\n    # self.instance_variable_set(:@lookup_context, nil) # <-- So does enabling this\n    mail(:to => \"example@example.com\")\n  end\nend\n```\n\nI'm attaching a minimal project containing a functional test that demonstrates this.\n", "labels": [], "number": 958, "updated_at": "2013-06-25 01:23:30", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904768, "title": "render_to_string in mailer causes subsequent render to fail", "url": "https://api.github.com/repos/rails/rails/issues/958", "created_at": "2011-05-16 04:49:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171445", "text": "_Imported from Lighthouse._\nComment by **bhu** - 2011-04-06 15:31:51 UTC\n\nthink i got the same error\n\n```\n def cancellation(contract, user)\n    @contract = contract\n    kit = PDFKit.new(render_to_string('pdf/cancellation', :layout => false))\n    kit.stylesheets << 'private/stylesheets/cancellation.css'\n\n    attachments['Cancellation.pdf'] = kit.to_pdf\n\n    options = {}\n    options[:to] = contract.email\n    options[:from] = user.email\n    options[:bcc] = user.email if Variable.send_employee_email_bcc\n    options[:subject] = \"Cancellation\"\n\n    mail options\n  end\n```\n\nit renders nothing except the attachment which breaks the mail completely if there is no body.\n\nthe format block helps getting around this but i dont think that it's intended for this kind of situation\n\n```\nmail options do |format|\n  format.text\n  format.html\nend\n```\n\nwith this block the default behavior is some kind of restored. you have to explicitly specify every format. per real default rails is auto detecting which formats are available.\n\nSorry for not really having a solution, just a workaround :/\n", "created_at": "2011-05-16 04:49:23", "user": 789801, "id": 1171445}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6624\nCreated by **Arun Agrawal** - 2011-03-25 18:44:07 UTC\n\nWhen using rails from master and rack from master.\n\nwhen running rake db:migrate getting this error\n\nundefined method `compile_insert' for #<Arel::Table:0x1028c07a0>\n/Users/arunagw/checkouts/rails/activerecord/lib/active_record/migration.rb:718:in`record_version_state_after_migrating'\n", "labels": [], "number": 959, "updated_at": "2011-05-21 15:12:35", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904770, "title": "undefined method `compile_insert' for #<Arel::Table:0x1028c07a0>", "url": "https://api.github.com/repos/rails/rails/issues/959", "created_at": "2011-05-16 04:49:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171446", "text": "_Imported from Lighthouse._\nComment by **Arun Agrawal** - 2011-03-25 18:52:05 UTC\n\nClose this ticket \n\nSolved problem by using \n\ngem 'arel', :git => \"git://github.com/rails/arel.git\"\n", "created_at": "2011-05-16 04:49:30", "user": 789801, "id": 1171446}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171447", "text": "_Imported from Lighthouse._\nComment by **Arun Agrawal** - 2011-03-25 18:56:15 UTC\n\nI mean ticket is invalid.\n", "created_at": "2011-05-16 04:49:31", "user": 789801, "id": 1171447}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6626\nCreated by **ShogunPanda** - 2011-03-25 20:52:04 UTC\n\nHi!\nI think the mail library (which is used by ActionMailer) this library should handle the enable_tls method of the underlying net/stmp library.\nThis is required for some servers which don't fallback or don't allow plain SMTP connection.\n\nI already forked this repository, wrote a patch and requested a pull.\nYou can see it here:\n\nhttps://github.com/ShogunPanda/mail/commit/8416cc81cd6a03f3bc9a863ee04cc5fdfec8bcc2\n\nHope this helps.\nBest regards,\n   Shogun\n", "labels": [], "number": 960, "updated_at": "2011-05-21 15:12:35", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904771, "title": "net/smtp enable_tls method support for ActionMailer / mail gem", "url": "https://api.github.com/repos/rails/rails/issues/960", "created_at": "2011-05-16 04:49:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6627\nCreated by **S.D.Eagle** - 2011-03-26 17:58:10 UTC\n\nDid just accidently something like that:\n\n<%= f.date_select :birthday, :start_year => Date.today.year - 100.years , :default => {:year => 1999} %>\n\nthe fault is the 100.years, it should be just 100...\n\nbut as i tried this out (on mongrel and Webrick) first the application stoped responding and after waiting a minute or so my total ubuntu froze... some kind of exception would be a lot better :-D\n", "labels": [], "number": 961, "updated_at": "2011-05-21 15:12:35", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904772, "title": "Server hanging when using extreme values for date_select :start_year", "url": "https://api.github.com/repos/rails/rails/issues/961", "created_at": "2011-05-16 04:49:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171450", "text": "_Imported from Lighthouse._\nComment by **Dalto Curvelano Junior** - 2011-03-27 09:40:00 UTC\n\nThis issue occurs because the build_options method loops forever when the range between start_date and end_date is too big.\n\nPull request created at https://github.com/rails/rails/pull/239\n", "created_at": "2011-05-16 04:49:43", "user": 789801, "id": 1171450}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6628\nCreated by **Arun Agrawal** - 2011-03-26 19:59:10 UTC\n\nGetting this error when i am using \"jdbcmysql\" for jruby application with rails.\n\nGetting this error when i am running rake db:create\n\nrake db:migrate is working fine.\n\nTraced and found. May want to have a look.\n\nhttps://github.com/rails/rails/pull/238\n", "labels": [], "number": 962, "updated_at": "2011-05-21 15:12:35", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904774, "title": "uninitialized constant Mysql::Error", "url": "https://api.github.com/repos/rails/rails/issues/962", "created_at": "2011-05-16 04:49:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1207841", "text": "It's fixed. Can we close this\n\n/cc @tenderlove \n", "created_at": "2011-05-20 03:14:46", "user": 3948, "id": 1207841}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6629\nCreated by **Frederick Cheung** - 2011-03-27 00:14:57 UTC\n#6191 reordered how destroy works with habtm associations, with the undesirable side effect of breaking use of foreign keys with such association.\n\nThe patches on this ticket (one for master & one for 3-0-stable) implement the [solution](http://groups.google.com/group/rubyonrails-core/browse_thread/thread/d44e0c4162ccedff) proposed by Jos√© Valim + tests\n", "labels": [], "number": 963, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:35", "id": 904776, "title": "HABTM destroy deletes record before associated records", "url": "https://api.github.com/repos/rails/rails/issues/963", "created_at": "2011-05-16 04:49:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171452", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2011-03-27 17:41:44 UTC\n\nI dont like the test, it has no assertions and the checking is done in the model\n", "created_at": "2011-05-16 04:49:55", "user": 789801, "id": 1171452}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171453", "text": "Attachments saved to Gist: http://gist.github.com/971821\n", "created_at": "2011-05-16 04:49:57", "user": 789801, "id": 1171453}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6632\nCreated by **Brian Jensen** - 2011-03-27 17:46:33 UTC\n\nReal world usecase:\n\nUser\n- belongs_to project\n\nProject \n- has_many :users\n\n``` ruby\nclass User < ActiveRecord::Base \n before_create :update_project_user_action\n\n def update_project_user_action\n   project.user_action_date = Date.today\n   project.save :validate => false\n end\nend\n```\n\nIf I come back a month later or a fellow developer adds some callbacks on Project or validations then my call might fail. My callback does not care about the Project overall state, just the specific field.\n\nIt could also be argued that #update_attribute should also be given this property. Currently it skips validations but not callbacks.\n", "labels": [], "number": 964, "updated_at": "2011-09-21 09:12:14", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904777, "title": "Extend AR#save with :callback => false", "url": "https://api.github.com/repos/rails/rails/issues/964", "created_at": "2011-05-16 04:50:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2154006", "text": "Why has this been closed?\n", "created_at": "2011-09-21 09:00:11", "user": 28734, "id": 2154006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2154079", "text": "All issues imported from lighthouse were closed by default.\n", "created_at": "2011-09-21 09:12:13", "user": 135402, "id": 2154079}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6633\nCreated by **bmconseil** - 2011-03-27 19:40:31 UTC\n\nHi,\n\nWhen trying to chain scopes with joins() and where() relations, it appears that some where conditions are ignored if I use the model's relation's name. Here is a concrete example of the problem.\n\nMy models are\nclass Album < ActiveRecord::Base\n has_many :photos, :dependent => :destroy\nend\nclass Photo < ActiveRecord::Base\n belongs_to :album\nend\n\n===== Case 1\nWith scopes written like below, I get a correct SQL but it's incomplete, missing my where() filters. The where method is called with \":albumS\" \n\nclass Photo < ActiveRecord::Base\n  scope :photo, lambda { |name| where(:name => name.downcase)    }\n  scope :album, lambda { |name| joins(:album).where(:albums => {:name => name.downcase})    }\nend\n\nirb(main):134:0> Photo.photo('ppp').album('aaaaa').to_sql\n=> \"SELECT     `photos`.\\* FROM       `photos`  INNER JOIN `albums` ON `albums`.`id` = `photos`.`album_id` WHERE     (`albums`.`name` = 'aaaaa')\"\n\nHere, the filter on album.name is ok, but we're missing the filter on photo.name from the :photo scope, table names are OK\n\n===== Case 2\nWith scopes written like below, I get an incorrect SQL query but missing my where() filters. The where method is called with \":albumS\" \n\nclass Photo < ActiveRecord::Base\n  scope :photo, lambda { |name| where(:name => name.downcase)    }\n  scope :album, lambda { |name| joins(:album).where(:album => {:name => name.downcase})    }\nend\n\nirb(main):136:0> Photo.photo('ppp').album('aaaaa').to_sql\n=> \"SELECT     `photos`.\\* FROM       `photos`  INNER JOIN `albums` ON `albums`.`id` = `photos`.`album_id` WHERE     (`photos`.`name` = 'ppp') AND (`album`.`name` = 'aaaaa')\"\n\nNow, we find both filters on album.name AND on photo.name, but the table names are not correct!\n# \n\nAm I doing something wrong in those situations?\n\nThanks\n", "labels": [], "number": 965, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904778, "title": "Activerelation skips where() in some scopes", "url": "https://api.github.com/repos/rails/rails/issues/965", "created_at": "2011-05-16 04:50:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6634\nCreated by **Aaron Gibralter** - 2011-03-27 19:48:32 UTC\n\nRails seems to indicate that it accepts a `:expires_after` option for cookies in the session setup. However, it uses Rack's Rack::Utils.set_cookie_header! method... which expects an `:expires` option...\n\nhttps://github.com/rails/rails/blob/v2.3.11/actionpack/lib/action_controller/session/abstract_store.rb#L140-148\n\nhttps://github.com/rack/rack/blob/1.1/lib/rack/utils.rb#L176-205\n", "labels": [], "number": 966, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904779, "title": "Rails/Rack inconsistency about `:expires_after`/`:expires` cookie option.", "url": "https://api.github.com/repos/rails/rails/issues/966", "created_at": "2011-05-16 04:50:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171454", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2011-03-27 20:10:45 UTC\n\nWhat's more -- Rack seems to expect the `:expires` option as a `Time` object. I keep getting `can't clone Fixnum (TypeError)` because I have `:expires` in my environment.rb set to a number of seconds in the future... Setting the `config.action_controller.session = { :expires => '...' }` to a `Time` object doesn't really make sense, does it?\n", "created_at": "2011-05-16 04:50:14", "user": 789801, "id": 1171454}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171455", "text": "_Imported from Lighthouse._\nComment by **gmarik** - 2011-04-04 21:49:06 UTC\n\nFixed in [this commit](https://github.com/gmarik/rails/commit/7686c6ec4b11c3b0f41f9b01b75f84002dee43de)\n", "created_at": "2011-05-16 04:50:16", "user": 789801, "id": 1171455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171456", "text": "_Imported from Lighthouse._\nComment by **gmarik** - 2011-04-04 22:14:02 UTC\n\nAlso [this monkeypatch](https://gist.github.com/902573) works for me (until Rails is fixed)\n", "created_at": "2011-05-16 04:50:17", "user": 789801, "id": 1171456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171457", "text": "_Imported from Lighthouse._\nComment by **Aaron Gibralter** - 2011-04-05 17:09:58 UTC\n\n+1 :)\n", "created_at": "2011-05-16 04:50:18", "user": 789801, "id": 1171457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171458", "text": "_Imported from Lighthouse._\nComment by **gmarik** - 2011-04-07 15:33:23 UTC\n\nForgot to mention here's pending [rails pull request with fix](https://github.com/rails/rails/pull/252)\n", "created_at": "2011-05-16 04:50:19", "user": 789801, "id": 1171458}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6635\nCreated by **mikemaltese** - 2011-03-27 20:36:22 UTC\n\nMy routes.rb looks like this:\n\n  namespace :workflow do\n    resources :articles, :except => [:index, :new, :create] do\n      resources :revisions, :controller => \"articles/revisions\" do\n        get 'body', :on => :member\n      end\n    end\n  end\n\nWhen I call body_workflow_article_revision in my view, it raises an ActionController::RoutingError:\n  No route matches {:controller=>\"workflow/articles/revisions\", :action=>\"body\"}\nThe same thing happens when I try using url_for.\n", "labels": [], "number": 967, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904781, "title": "url_for not matching route", "url": "https://api.github.com/repos/rails/rails/issues/967", "created_at": "2011-05-16 04:50:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171459", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-27 21:20:05 UTC\n\nWorks fine here - are you passing :article_id and :id to the url helper / url_for ?\n", "created_at": "2011-05-16 04:50:26", "user": 789801, "id": 1171459}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171460", "text": "_Imported from Lighthouse._\nComment by **mikemaltese** - 2011-04-01 20:07:42 UTC\n\nRight, it works now, I'm not sure what was happening before. Thanks!\n", "created_at": "2011-05-16 04:50:28", "user": 789801, "id": 1171460}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6636\nCreated by **vo.x** - 2011-03-28 12:02:37 UTC\n\nI have got following error when running activerecord test suite ruby 1.8.7 (2011-02-18 patchlevel 334) [x86_64-linux]\n\n  1) Failure:\ntest_saving_a_unchanged_record_doesnt_update_its_timestamp(TimestampTest)\n    [/builddir/build/BUILD/rubygem-activerecord-3.0.5/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.5/test/cases/timestamp_test.rb:29:in `test_saving_a_unchanged_record_doesnt_update_its_timestamp'\n     /usr/lib/ruby/gems/1.8/gems/activesupport-3.0.5/lib/active_support/testing/setup_and_teardown.rb:67:in`**send**'\n     /usr/lib/ruby/gems/1.8/gems/activesupport-3.0.5/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n     /usr/lib/ruby/gems/1.8/gems/activesupport-3.0.5/lib/active_support/callbacks.rb:418:in`_run_setup_callbacks'\n     /usr/lib/ruby/gems/1.8/gems/activesupport-3.0.5/lib/active_support/testing/setup_and_teardown.rb:65:in `run']:\n<Mon Mar 28 13:52:50 +0200 2011> expected but was\n<Mon Mar 28 13:52:50 +0200 2011>.\n\nI have added some debug output to the test: \n\np @previously_updated_at.to_f\np @developer.updated_at.to_f\n\nand it outputs:\n\n1301313170.0\n1301313170.6389\n\nSo apparently, the timestamps are different. Either test or better the save internals should be fixed IMO.\n", "labels": [], "number": 968, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904782, "title": "activerecord-3.0.5/test/cases/timestamp_test.rb fails.", "url": "https://api.github.com/repos/rails/rails/issues/968", "created_at": "2011-05-16 04:50:34", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6637\nCreated by **quorak** - 2011-03-28 12:32:34 UTC\n\nWhen having a record like \n   Customer::Ticket << ActiveRecord::Base\n\ni would expect to have in my translation\nen:\n  helpers:\n    label:\n      'customer/customer'\n        attribute: Translation\n\nbut it only works with:\nen:\n  helpers:\n    label:\n      'customer_customer'\n        attribute: Translation\n", "labels": [], "number": 969, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904784, "title": "I18n label for modulized records", "url": "https://api.github.com/repos/rails/rails/issues/969", "created_at": "2011-05-16 04:50:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6638\nCreated by **Martin Tepper** - 2011-03-28 12:59:14 UTC\n\nWe've came across this by accident. Some of our tables had the primary key column \"id\" set to SMALLINT (http://dev.mysql.com/doc/refman/5.0/en/numeric-types.html) to save a little disk space. The problem is that the ids generated by Fixtures::identify are too long - they don't take the length of the target column into account, being just a modulo'd hash of the name.\n\nThis is on Rails 2.3.11.\n\nThe question is, is this something warranting attention ?\nI'd like to go and try to make a test and a fix for this, as I consider this a bug - the magic fixtures should be magic enough to work on smaller columns.\n\nBut will a solution, which might make the Fixture system more complicated, be accepted ? Or is this too much of an edge case ?\n", "labels": [], "number": 970, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904785, "title": "Autogenerated fixture ids too long for some MySQL integer types", "url": "https://api.github.com/repos/rails/rails/issues/970", "created_at": "2011-05-16 04:50:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171462", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-28 20:33:51 UTC\n\nWouldn't it be easier just to convert the columns to INT? What's the justification for keeping them as SMALLINT - performance difference would be next to nothing and at most you'd save 130KB before you overflowed the id column. I can see the logic of keeping other columns as small as possible if you're dealing with millions of rows but not for the primary key column.\n", "created_at": "2011-05-16 04:50:45", "user": 789801, "id": 1171462}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171463", "text": "_Imported from Lighthouse._\nComment by **Martin Tepper** - 2011-03-29 15:21:17 UTC\n\nWell, the justification is that if you reference the primary id from other tables, and if those have a large number of rows, the few bytes per foreign key entry can add up. Especially if you have (multiple) indices on the foreign keys.\nThis will probably not be a game-changer for one table, but when you are in a tight spot memory-wise on your DB server, you're trying to optimize where you can.\n", "created_at": "2011-05-16 04:50:47", "user": 789801, "id": 1171463}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171464", "text": "_Imported from Lighthouse._\nComment by **Andrew White** - 2011-03-29 15:27:15 UTC\n\nYep, I can see that would make a difference - go ahead and see if you can fix it.\n", "created_at": "2011-05-16 04:50:48", "user": 789801, "id": 1171464}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6639\nCreated by **Robert Pankowecki** - 2011-03-28 13:20:38 UTC\n\nAlso the way of specifying the license is incoherent.\n\nrails - missing\nactiveresource - missing\n\nactiverecord - info in README.rdoc\nactivesupport - info in README.rdoc\nrailties - info in README.rdoc\n\nactivemodel - MIT-LICENESE\nactionmailer - MIT-LICENSE\nactionpack - MIT-LICENSE\n", "labels": [], "number": 971, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904786, "title": "rails and activeresource gems are missing license information", "url": "https://api.github.com/repos/rails/rails/issues/971", "created_at": "2011-05-16 04:50:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6641\nCreated by **paulbonner** - 2011-03-28 19:50:32 UTC\n\nThis affects likely only us poor corporate slobs using CVS repositories. CVS creates a directory called CVS in every directory you check into its repository. This was not a problem in earlier versions of the Rails 2.x tree, but in 2.3.10 and 2.3.11, the presence of a CVS directory under vendor/gems results in an error during Rails initialization.\n\nThe source of the error appears to be a change introduced post-2.3.8 in  Rails::VendorGemSourceIndex.version_for_dir.\n\nThrough 2.3.8, version_for_dir returned nil when passed a directory name like \"CVS\" that doesn't contain version information:\n\n  def version_for_dir(d)\n      matches = /-([^-]+)$/.match(d)\n      Gem::Version.new(matches[1]) if matches\n  end\n\nin 2.3.10 and 2.3.11, version_for_dir returns a Gem::Version object with an empty version string given the samenon-versioned directory name:\n\ndef version_for_dir(d)\n      version = d.split('-').find { |s| s.match(/^\\d(.\\d|.\\w+)*$/) }\n      Gem::Version.new(version)\nend\n\nAs a result, the \"if dir_version\" check on line 70 of vendor_gem_source_index.rb fails to detect the non-versioned directory, resulting in an undefined method error on line 76:\n\nC:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:78:in `refresh!': undefined method`[]' for nil:NilClass (NoMethodError)\n        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `each'\n        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in`refresh!'\n        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:29:in `initialize'\n        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in`new'\n        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `add_frozen_gem_path'\n        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:298:in`add_gem_load_paths'\n        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:132:in `process'\n        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:113:in`run'\n         ... 7 levels...\n        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/commands/server.rb:36:in `require'\n        from C:/jruby-1.4.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:36:in`require'\n        from script\\server:3\n", "labels": [], "number": 972, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904787, "title": "VendorGemSourceIndex::refresh! fails when vendor\\gems includes CVS directory", "url": "https://api.github.com/repos/rails/rails/issues/972", "created_at": "2011-05-16 04:51:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171465", "text": "_Imported from Lighthouse._\nComment by **paulbonner** - 2011-03-28 21:40:53 UTC\n\nThere are two workarounds for this. The first is just to install all one's required gems and elminate the need for the vendor/gems directory. Alternately, it's possible to monkey-patch VendorGemSourceIndex in config/preinitializer.rb like this: \n\nrequire 'rubygems'\ngem 'rails'\nrequire 'initializer'\n\nmodule Rails\n  class VendorGemSourceIndex\n    def version_for_dir(d)\n      version = d.split('-').find { |s| s.match(/^\\d(.\\d|.\\w+)*$/) }\n      Gem::Version.new(version) if version\n    end\n  end\nend\n", "created_at": "2011-05-16 04:51:00", "user": 789801, "id": 1171465}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6642\nCreated by **kyoto** - 2011-03-29 03:55:47 UTC\n\nI understand that Rails 3.0.5 changed the pluralization/singularization rules to support \"datum\" <-> \"data\", \"stratum\" <-> \"strata\", etc.\n\nHowever, this seems to causes all words ending with \"ta\" to be pluralized incorrectly.\n\nFor example, \"delta\".pluralize => \"delta\" and \"quota\".pluralize => \"quota\".\n\nThe workaround I am using is to fix individual words by adding a rule to config/initializers/inflections.rb like\n    inflect.plural /(del|quo)ta$/, '\\1tas'\n", "labels": [], "number": 973, "updated_at": "2011-07-30 17:12:22", "user": 789801, "closed_at": "2011-05-19 16:21:36", "id": 904789, "title": "Rails 3.0.5 \"datum/data\" inflection rules are used for all words ending with \"ta\"", "url": "https://api.github.com/repos/rails/rails/issues/973", "created_at": "2011-05-16 04:51:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1204429", "text": "@josevalim This can be closed.\n", "created_at": "2011-05-19 16:04:45", "user": 146214, "id": 1204429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1688647", "text": "I decided to rewrite an application from scratch in 3.1\n\nI had a model Quota, table quotas.\n\nCreated the table ok and dbconsole would find it, but reference to the model Quota would give you\n\nActiveRecord::StatementInvalid: Could not find table 'quota'\n\nAfter a bunch of looking for reserved words problems I found this. My work around is:\n\nclass Quota < ActiveRecord::Base\n    set_table_name \"quotas\"\n\nIf it is not a problem, it should be documented.\n", "created_at": "2011-07-30 16:12:31", "user": 125716, "id": 1688647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1688863", "text": "@josevalim The commit referenced above doesn't seem to have anything to do with this issue so it probably had the wrong ticket number. Can we get this reopened?\n", "created_at": "2011-07-30 17:12:22", "user": 34627, "id": 1688863}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6644\nCreated by **ramaboo** - 2011-03-29 17:19:35 UTC\n\nI have a basic rails project and run a generator\n\n$ rails g scaffold foo name:string\n\nPretty straight forward. I am creating a Foo model with a name field. The controller runs fine however if I run the same command again say something like this (realizing that I forgot the age field):\n\n$ rails g scaffold foo name:string age:string\n\nI get the following error\nAnother migration is already named create_foos: /var/www/chimporter.com/db/migrate/20110329171246_create_foos.rb\n\nThe preferred action would be some sort of Do you want to override prompt that is common on the other controller actions. If I delete the above migration file I can then run the second migration and overwrite the existing files as expected.\n\nSolution\nAdd an overwrite prompt to the active_record generator.\n\nDavid\n", "labels": [], "number": 974, "updated_at": "2011-05-21 15:12:36", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904790, "title": "Rails Generator Fails with Existing Migration", "url": "https://api.github.com/repos/rails/rails/issues/974", "created_at": "2011-05-16 04:51:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214186", "text": "This seems to be a valid behavior. Migrations involve more than just the file; they also have related database records if the migrations are already run. If the migration file is overwritten without the underlying database changes reverted, the new migration could fail. I think this is a preferable workflow : the user can take care of the effects of the previous migration, delete the file, and then run the new migration. \n\nThere are specific tests ( https://github.com/rails/rails/blob/master/railties/test/generators/model_generator_test.rb#L167 &  https://github.com/rails/rails/blob/master/railties/test/generators/model_generator_test.rb#L180 ) verifying this behavior. \n\nIn my opinion, the behavior is fine, and this issue can be closed. \n", "created_at": "2011-05-21 11:28:32", "user": 295689, "id": 1214186}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6645\nCreated by **cmouse** - 2011-03-29 18:14:51 UTC\n\nin def_rescue_with_handler (lib/active_support/rescuable.rb:77) the exception is already NameError instead of the custom exception. This makes it impossible to catch custom errors:\n\n```\nNameError (uncaught throw `uncaught throw `StorageExceptions::PermissionDeniedException'')\n\nFull trace\napp/controllers/containers_controller.rb:11:in `throw'\napp/controllers/containers_controller.rb:11:in `show'\nactionpack (3.0.4) lib/action_controller/metal/implicit_render.rb:4:in `send_action'\nactionpack (3.0.4) lib/action_controller/metal/implicit_render.rb:4:in `send_action'\nactionpack (3.0.4) lib/abstract_controller/base.rb:150:in `process_action'\nactionpack (3.0.4) lib/action_controller/metal/rendering.rb:11:in `process_action'\nactionpack (3.0.4) lib/abstract_controller/callbacks.rb:18:in `process_action'\nactivesupport (3.0.4) lib/active_support/callbacks.rb:435:in `_run__445609409__process_action__453433196__callbacks'\nactivesupport (3.0.4) lib/active_support/callbacks.rb:409:in `send'\nactivesupport (3.0.4) lib/active_support/callbacks.rb:409:in `_run_process_action_callbacks'\nactivesupport (3.0.4) lib/active_support/callbacks.rb:93:in `send'\nactivesupport (3.0.4) lib/active_support/callbacks.rb:93:in `run_callbacks'\nactionpack (3.0.4) lib/abstract_controller/callbacks.rb:17:in `process_action'\nactionpack (3.0.4) lib/action_controller/metal/instrumentation.rb:30:in `process_action'\nactivesupport (3.0.4) lib/active_support/notifications.rb:52:in `instrument'\nactivesupport (3.0.4) lib/active_support/notifications/instrumenter.rb:21:in `instrument'\nactivesupport (3.0.4) lib/active_support/notifications.rb:52:in `instrument'\nactionpack (3.0.4) lib/action_controller/metal/instrumentation.rb:29:in `process_action'\nactionpack (3.0.4) lib/action_controller/metal/rescue.rb:17:in `process_action'\nactionpack (3.0.4) lib/abstract_controller/base.rb:119:in `process'\nactionpack (3.0.4) lib/abstract_controller/rendering.rb:41:in `process'\nactionpack (3.0.4) lib/action_controller/metal.rb:138:in `dispatch'\nactionpack (3.0.4) lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\nactionpack (3.0.4) lib/action_controller/metal.rb:178:in `action'\nactionpack (3.0.4) lib/action_dispatch/routing/route_set.rb:62:in `call'\nactionpack (3.0.4) lib/action_dispatch/routing/route_set.rb:62:in `dispatch'\nactionpack (3.0.4) lib/action_dispatch/routing/route_set.rb:27:in `call'\nrack-mount (0.6.13) lib/rack/mount/route_set.rb:148:in `call'\nrack-mount (0.6.13) lib/rack/mount/code_generation.rb:93:in `recognize'\nrack-mount (0.6.13) lib/rack/mount/code_generation.rb:68:in `optimized_each'\nrack-mount (0.6.13) lib/rack/mount/code_generation.rb:92:in `recognize'\nrack-mount (0.6.13) lib/rack/mount/route_set.rb:139:in `call'\nactionpack (3.0.4) lib/action_dispatch/routing/route_set.rb:492:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/head.rb:14:in `call'\nrack (1.2.1) lib/rack/methodoverride.rb:24:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/params_parser.rb:21:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/flash.rb:182:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/session/abstract_store.rb:149:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/cookies.rb:302:in `call'\nactiverecord (3.0.4) lib/active_record/query_cache.rb:32:in `call'\nactiverecord (3.0.4) lib/active_record/connection_adapters/abstract/query_cache.rb:28:in `cache'\nactiverecord (3.0.4) lib/active_record/query_cache.rb:12:in `cache'\nactiverecord (3.0.4) lib/active_record/query_cache.rb:31:in `call'\nactiverecord (3.0.4) lib/active_record/connection_adapters/abstract/connection_pool.rb:354:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/callbacks.rb:46:in `call'\nactivesupport (3.0.4) lib/active_support/callbacks.rb:415:in `_run_call_callbacks'\nactionpack (3.0.4) lib/action_dispatch/middleware/callbacks.rb:44:in `call'\nrack (1.2.1) lib/rack/sendfile.rb:107:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\nrailties (3.0.4) lib/rails/rack/logger.rb:13:in `call'\nrack (1.2.1) lib/rack/runtime.rb:17:in `call'\nactivesupport (3.0.4) lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nrack (1.2.1) lib/rack/lock.rb:11:in `call'\nrack (1.2.1) lib/rack/lock.rb:11:in `synchronize'\nrack (1.2.1) lib/rack/lock.rb:11:in `call'\nactionpack (3.0.4) lib/action_dispatch/middleware/static.rb:30:in `call'\nrailties (3.0.4) lib/rails/application.rb:168:in `call'\nrailties (3.0.4) lib/rails/application.rb:77:in `send'\nrailties (3.0.4) lib/rails/application.rb:77:in `method_missing'\npassenger (3.0.2) lib/phusion_passenger/rack/request_handler.rb:96:in `process_request'\npassenger (3.0.2) lib/phusion_passenger/abstract_request_handler.rb:513:in `accept_and_process_next_request'\npassenger (3.0.2) lib/phusion_passenger/abstract_request_handler.rb:274:in `main_loop'\npassenger (3.0.2) lib/phusion_passenger/classic_rails/application_spawner.rb:321:in `start_request_handler'\npassenger (3.0.2) lib/phusion_passenger/classic_rails/application_spawner.rb:275:in `send'\npassenger (3.0.2) lib/phusion_passenger/classic_rails/application_spawner.rb:275:in `handle_spawn_application'\npassenger (3.0.2) lib/phusion_passenger/utils.rb:479:in `safe_fork'\npassenger (3.0.2) lib/phusion_passenger/classic_rails/application_spawner.rb:270:in `handle_spawn_application'\npassenger (3.0.2) lib/phusion_passenger/abstract_server.rb:357:in `__send__'\npassenger (3.0.2) lib/phusion_passenger/abstract_server.rb:357:in `server_main_loop'\npassenger (3.0.2) lib/phusion_passenger/abstract_server.rb:206:in `start_synchronously'\npassenger (3.0.2) lib/phusion_passenger/abstract_server.rb:180:in `start'\npassenger (3.0.2) lib/phusion_passenger/classic_rails/application_spawner.rb:149:in `start'\npassenger (3.0.2) lib/phusion_passenger/spawn_manager.rb:219:in `spawn_rails_application'\npassenger (3.0.2) lib/phusion_passenger/abstract_server_collection.rb:132:in `lookup_or_add'\npassenger (3.0.2) lib/phusion_passenger/spawn_manager.rb:214:in `spawn_rails_application'\npassenger (3.0.2) lib/phusion_passenger/abstract_server_collection.rb:82:in `synchronize'\npassenger (3.0.2) lib/phusion_passenger/abstract_server_collection.rb:79:in `synchronize'\npassenger (3.0.2) lib/phusion_passenger/spawn_manager.rb:213:in `spawn_rails_application'\npassenger (3.0.2) lib/phusion_passenger/spawn_manager.rb:132:in `spawn_application'\npassenger (3.0.2) lib/phusion_passenger/spawn_manager.rb:275:in `handle_spawn_application'\npassenger (3.0.2) lib/phusion_passenger/abstract_server.rb:357:in `__send__'\npassenger (3.0.2) lib/phusion_passenger/abstract_server.rb:357:in `server_main_loop'\npassenger (3.0.2) lib/phusion_passenger/abstract_server.rb:206:in `start_synchronously'\npassenger (3.0.2) helper-scripts/passenger-spawn-server:99\n\n$ rails --version\nRails 3.0.4\n$ ruby --version\nruby 1.8.7 (2010-08-16 patchlevel 302) [x86_64-linux]\n```\n", "labels": [], "number": 975, "updated_at": "2011-05-21 15:12:37", "user": 789801, "closed_at": "2011-05-21 15:12:36", "id": 904792, "title": "Rails 3 rescue_from cannot handle custom exceptions", "url": "https://api.github.com/repos/rails/rails/issues/975", "created_at": "2011-05-16 04:51:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171466", "text": "_Imported from Lighthouse._\nComment by **cmouse** - 2011-03-29 18:18:08 UTC\n\nOh yes, forgot:\n\n  rescue_from StorageExceptions::PermissionDeniedException, :with => :redirect_403\n\n  private\n  def redirect_403\n    if session[:user_id].nil?\n      redirect_to login_path\n    end\n  end\n", "created_at": "2011-05-16 04:51:19", "user": 789801, "id": 1171466}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171467", "text": "_Imported from Lighthouse._\nComment by **bluepojo** - 2011-04-04 18:17:19 UTC\n\nIt looks like you used `throw` instead of `raise` to raise an exception. `throw` is for a `catch :something { throw :something }` control flow construct and is unrelated to exceptions.\n", "created_at": "2011-05-16 04:51:21", "user": 789801, "id": 1171467}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6646\nCreated by **Philippe Creux** - 2011-03-29 22:21:12 UTC\n\nI'm storing an OrderedHash containing A/R validation errors in a serialized column. When I retreive it from the database the array of errors become a string containing the last item of the array.\n\n**Model:**\n\n```\nclass InvalidRecord < ActiveRecord::Base\n  belongs_to :record, :polymorphic => true\n  serialize :validation_errors\nend\n```\n\n**Schema:**\n\n```\n  create_table \"invalid_records\", :force => true do |t|\n    t.integer  \"record_id\",         :null => false\n    t.string   \"record_type\",       :null => false\n    t.text     \"validation_errors\"\n    t.datetime \"created_at\"\n    t.datetime \"updated_at\"\n  end\n```\n\nThe following code...\n\n```\n  r = InvalidRecord.new(:record => invalid_user, :validation_errors => invalid_user.errors)\n  p r\n  r.save!\n  r.reload\n  p r\n```\n\noutputs:\n\n```\n# new record: (errors on username is an array containing 2 items)\n#<InvalidRecord id: nil, record_id: 1, record_type: \"User\", \nvalidation_errors: #<OrderedHash {:username=>[\"can't be blank\", \"is too short (minimum is 3 characters)\"]}>, \ncreated_at: nil, updated_at: nil>\n\n# saved record: (errors on username is now a string)\n#<InvalidRecord id: 2, record_id: 1, record_type: \"User\", \nvalidation_errors: #<OrderedHash {:username=>\"is too short (minimum is 3 characters)\"}>, \ncreated_at: \"2011-03-29 22:08:24\", updated_at: \"2011-03-29 22:08:26\">\n```\n\nI'm using <code>ree-1.8.7-2010.02 [ x86_64 ]</code> with <code>sqlite3</code>.\n\nHere is the YAML stored in the db:\n\n```\n--- !omap \n   - :username: can't be blank\n   - :username: is too short (minimum is 3 characters)\n```\n", "labels": [], "number": 976, "updated_at": "2011-05-21 15:12:37", "user": 789801, "closed_at": "2011-05-21 15:12:37", "id": 904898, "title": "OrderedHash serialization does not work when storing arrays", "url": "https://api.github.com/repos/rails/rails/issues/976", "created_at": "2011-05-16 05:30:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6647\nCreated by **Anonymass** - 2011-03-30 03:01:36 UTC\n\nHi there:\n\nassociation.build returns unexpected behavior when returning a reference to a unsaved parent object\n\n``` ruby\nclass Recipe < ActiveRecord::Base\n  has_many :ingredients\nend\nclass Ingredient < ActiveRecord::Base\n  belongs_to :recipe\nend\n```\n\n``` ruby\n>> r = Recipe.new\n=> #<Recipe id: nil, title: nil, created_at: nil, updated_at: nil>\n>> r.ingredients.build\n=> #<Ingredient id: nil, name: nil, recipe_id: nil, created_at: nil, updated_at: nil>\n>> r.ingredients.first.recipe\n=> nil\n```\n\nWhy nil?\n\n``` ruby\n>> r.save\n=> true\n>> r.ingredients.first.recipe\n=> #<Recipe id: 3, title: nil, created_at: \"2011-03-30 02:49:58\", updated_at: \"2011-03-30 02:49:58\">\n```\n\nOne would assume a reference to the parent object would be returned and not nil even though the parent object has not been saved\n\n( It would totally make sense if recipe_id would return nil, but recipe should be the unsaved parent object )\n\n---\n\nThis picture sums up how I'm feeling right now:\n\n![fffffffuuuuuuuuuuuu](http://farm6.static.flickr.com/5125/5342658074_8b8eb74327.jpg)\n", "labels": [], "number": 977, "updated_at": "2011-05-21 15:12:37", "user": 789801, "closed_at": "2011-05-21 15:12:37", "id": 904899, "title": "ActiveRecord::Associations::ClassMethods build is kind of misleading with unsaved parent objects", "url": "https://api.github.com/repos/rails/rails/issues/977", "created_at": "2011-05-16 05:30:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6648\nCreated by **John Barker** - 2011-03-30 07:06:33 UTC\n\nWhen adding a column to a table with a migration, like so:\n\n``` ruby\n  add_column :receivables, :arrears, :boolean, :default => false\n```\n\nand using SQLite or MySQL, the column will be added, and all rows will have a value of false for the new column. On PostgreSQL it will contain NULL. \n\n``` ruby\n  Receivable.first.arrears => nil\n```\n\nThis seems a little inconsistent to me so I've written a patch, tested against 2-3-stable and PostgreSQL 9.0.3. It does the add column in one query which is consistent with the other two adaptors mentioned. \n\nPerhaps this consistency is not required, but it's been a bit of a headache migrating from these two databases to postgresql because of it. \n\nOf note: this way is slower, as now add_column needs to write all the default values for the table. If you need the old behaviour simply break out the add column and default:\n\n``` ruby\n  add_column :receivables, :arrears, :boolean\n  change_column_default :receivables, :arrears, false\n```\n", "labels": [], "number": 978, "updated_at": "2011-05-21 15:12:37", "user": 789801, "closed_at": "2011-05-21 15:12:37", "id": 904900, "title": "PostgreSQL add column behaves differently to other adaptors (SQlite, MySQL) when specifying default", "url": "https://api.github.com/repos/rails/rails/issues/978", "created_at": "2011-05-16 05:30:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171550", "text": "_Imported from Lighthouse._\nComment by **Michael Granger** - 2011-04-19 14:28:33 UTC\n\nI'm not sure why your migrations aren't doing this, but PostgreSQL does set the default values on new columns in an ALTER TABLE:\n\n``` sql\n    $ psql test\n    psql (9.0.3)\n    Type \"help\" for help.\n\n    test=> create table foo ( id serial, name text );\n    NOTICE:  CREATE TABLE will create implicit sequence \"foo_id_seq\" for serial column \"foo.id\"\n    CREATE TABLE\n    test=> copy foo (name) from stdin;\n    Enter data to be copied followed by a newline.\n    End with a backslash and a period on a line by itself.\n    >> Tricky  \n    >> Dicky\n    >> Ricky\n    >> Micky\n    >> Maude\n    >> \\.\n    test=> select * from foo;\n     id |  name  \n    ----+--------\n      1 | Tricky\n      2 | Dicky\n      3 | Ricky\n      4 | Micky\n      5 | Maude\n    (5 rows)\n\n    test=> alter table foo add column signed boolean default false;\n    ALTER TABLE\n    test=> select * from foo;\n     id |  name  | signed \n    ----+--------+--------\n      1 | Tricky | f\n      2 | Dicky  | f\n      3 | Ricky  | f\n      4 | Micky  | f\n      5 | Maude  | f\n    (5 rows)\n\n```\n", "created_at": "2011-05-16 05:30:28", "user": 789801, "id": 1171550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171551", "text": "_Imported from Lighthouse._\nComment by **John Barker** - 2011-04-23 10:16:42 UTC\n\nRails actually sends separate commands to the database when you do an add_column, not a single alter table statement. Your example SQL alter table statement is the same behaviour introduced in my patch.\n", "created_at": "2011-05-16 05:30:30", "user": 789801, "id": 1171551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171552", "text": "_Imported from Lighthouse._\nComment by **Michael Granger** - 2011-04-24 03:09:22 UTC\n\nI'm sorry, I must have read the diff backwards for some reason. Your patch modifies it to do exactly what I'd expect.\n", "created_at": "2011-05-16 05:30:32", "user": 789801, "id": 1171552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171553", "text": "_Imported from Lighthouse._\nComment by **Juan Manuel Cuello** - 2011-04-24 03:40:59 UTC\n\nI think the patch was not created the way Rails Guides [explains](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-a-patch), so I cannot apply it for testing. Could you please re-create it?\n", "created_at": "2011-05-16 05:30:34", "user": 789801, "id": 1171553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171554", "text": "_Imported from Lighthouse._\nComment by **John Barker** - 2011-04-25 16:11:52 UTC\n\nJust realised this was also fixed in master, so simply back-ported the fix and made the diff as per the guide, applied it with 'git am ...' and it works, passes all the rake tests.\n", "created_at": "2011-05-16 05:30:35", "user": 789801, "id": 1171554}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171555", "text": "Attachments saved to Gist: http://gist.github.com/971822\n", "created_at": "2011-05-16 05:30:37", "user": 789801, "id": 1171555}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6649\nCreated by **Xavier Shay** - 2011-03-30 10:09:36 UTC\n\nThis is minor, but important! I will explain in code, it will be easier than words. See the commented lines, the second one is currently broken (outputs invalid data):\n\n```\natom_feed(:schema_date => '2008') do |feed|\n  feed.title(\"My great blog!\")\n  feed.updated(@scrolls.first.created_at) # <--- This currently works\n\n  for scroll in @scrolls\n    feed.entry(scroll) do |entry|\n      entry.title(scroll.title)\n      entry.updated(Time.utc(2007, 1, scroll.id)) # <---- This patch allows this to work\n      entry.content(scroll.body, :type => 'html')\n\n      entry.author do |author|\n        author.name(\"DHH\")\n      end\n    end\n  end\nend\n```\n", "labels": [], "number": 979, "updated_at": "2011-05-21 15:12:37", "user": 789801, "closed_at": "2011-05-21 15:12:37", "id": 904901, "title": "[PATCH] Add #updated support to entries in atom_feed", "url": "https://api.github.com/repos/rails/rails/issues/979", "created_at": "2011-05-16 05:30:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171557", "text": "Attachments saved to Gist: http://gist.github.com/971823\n", "created_at": "2011-05-16 05:30:44", "user": 789801, "id": 1171557}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6650\nCreated by **lakshmanan** - 2011-03-30 10:45:26 UTC\n\nThere was a typo in ActionPack README file. Fixed in the attached patch. Nothing big.\n", "labels": [], "number": 980, "updated_at": "2011-05-17 12:34:30", "user": 789801, "closed_at": "2011-05-17 12:34:30", "id": 904902, "title": "[PATCH] ActionPack readme typo fix", "url": "https://api.github.com/repos/rails/rails/issues/980", "created_at": "2011-05-16 05:30:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171558", "text": "Attachments saved to Gist: http://gist.github.com/971824\n", "created_at": "2011-05-16 05:30:49", "user": 789801, "id": 1171558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1190094", "text": "Fixed in docrails here: https://github.com/lifo/docrails/commit/110a066bb4f0109f48025b84cd4b5d0695bd64ca\nCan be closed. @josevalim\n", "created_at": "2011-05-17 12:24:21", "user": 146214, "id": 1190094}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6651\nCreated by **Michael Villar** - 2011-03-30 11:01:31 UTC\n\nI made a simple script to illustrate the problem.\nhttp://sht.tl/8A8kC\n\nThe problem is the script blocks just before \"project.save\" after a while.\nI found out (after a fucking time) that the problem occured because of the BEGIN COMMIT stuff around a UPDATE sql query.\nI think, that two projects want to be saved at the same time, and the first query is not commited yet, so there are two BEGIN started.\nhttp://sht.tl/unV\n\nWe should synchronize the transactions through the threads. \nI made a terrible fix that I don't like but which works. I don't know ActiveRecord code so I wanted something simple.\nhttp://sht.tl/6rMD\n\nThanks for reading. Hope I'm not wrong.\n\nConfig:\nActiveRecord 3.0.5\nPostgresql\nEventMachine\n", "labels": [], "number": 981, "updated_at": "2011-05-21 15:12:37", "user": 789801, "closed_at": "2011-05-21 15:12:37", "id": 904904, "title": "Thread-safe problem with transactions", "url": "https://api.github.com/repos/rails/rails/issues/981", "created_at": "2011-05-16 05:30:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171559", "text": "_Imported from Lighthouse._\nComment by **Michael Villar** - 2011-03-30 11:32:09 UTC\n\nMMh, my fix doesn't work when transaction's yield is making transactions too of course.. deadlock.\n", "created_at": "2011-05-16 05:30:55", "user": 789801, "id": 1171559}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6652\nCreated by **Jan Lelis** - 2011-03-30 11:08:21 UTC\n\nWhen using the Rails console you cannot include **Rails.application.routes.url_helpers** and **ActionView::Helpers** (especially FormHelper/FormTagHelper/UrlHelper) at the same time: the named routes won't work anymore:\n\n```\n>> some_route_url\nNoMethodError: undefined method `host_with_port' for nil:NilClass\n    from /home/ben/.rvm/gems/ruby-1.9.2-p180@rails3/gems/activesupport-3.0.5/lib/active_support/whiny_nil.rb:48:in `method_missing'\n    from /home/ben/.rvm/gems/ruby-1.9.2-p180@rails3/gems/actionpack-3.0.5/lib/action_controller/metal/url_for.rb:9:in `url_options'\n    from /home/ben/.rvm/gems/ruby-1.9.2-p180@rails3/gems/actionpack-3.0.5/lib/action_view/helpers/url_helper.rb:32:in `url_options'\n    from /home/ben/.rvm/gems/ruby-1.9.2-p180@rails3/gems/actionpack-3.0.5/lib/action_dispatch/routing/url_for.rb:131:in `url_for'\n    from /home/ben/.rvm/gems/ruby-1.9.2-p180@rails3/gems/actionpack-3.0.5/lib/action_view/helpers/url_helper.rb:99:in `url_for'\n    from /home/ben/.rvm/gems/ruby-1.9.2-p180@rails3/gems/actionpack-3.0.5/lib/action_dispatch/routing/route_set.rb:195:in `projects_url'\n    from (irb):5\n    from /home/ben/.rvm/gems/ruby-1.9.2-p180@rails3/gems/railties-3.0.5/lib/rails/commands/console.rb:44:in `start'\n    from /home/ben/.rvm/gems/ruby-1.9.2-p180@rails3/gems/railties-3.0.5/lib/rails/commands/console.rb:8:in `start'\n    from /home/ben/.rvm/gems/ruby-1.9.2-p180@rails3/gems/railties-3.0.5/lib/rails/commands.rb:23:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n```\n", "labels": [], "number": 982, "updated_at": "2012-02-23 10:38:36", "user": 789801, "closed_at": "2011-05-21 15:12:37", "id": 904905, "title": "Cannot include ActionView::Helpers and Rails.application.routes.url_helpers at the same time", "url": "https://api.github.com/repos/rails/rails/issues/982", "created_at": "2011-05-16 05:31:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4134072", "text": "Was this fixed or just closed?\n", "created_at": "2012-02-23 10:38:36", "user": 454648, "id": 4134072}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6653\nCreated by **Sokolov Yura** - 2011-03-30 18:24:06 UTC\n\nBy resolved ticket #5894 number_to_currency compose default `:negative_format` only from options sent to method or takes it from `DEFAULT_CURRENCY_VALUES`.\n\nI think, it should also consider format specified in `I18n.translate(:'number.currency.format')`\n\nFor example, gem `Russian` specify `ru.number.currency.format` as `%n %u` so that `number_to_currency(10)=='10,00 rur'`.\nBut for negative values `DEFAULT_CURRENCY_VALUES[:negative_values_format]` is used, so that `number_to_currency(-10)=='-rur.10,00'` which is wrong.\nIf negative format were taken as `'-' + currency[:format]` then formatted value will be `'-10,00 rur.'` which is right.\n\nPatch below.\n", "labels": [], "number": 983, "updated_at": "2011-05-21 15:12:38", "user": 789801, "closed_at": "2011-05-21 15:12:37", "id": 904906, "title": "[PATCH] number_to_currency should take configured format for default negative format", "url": "https://api.github.com/repos/rails/rails/issues/983", "created_at": "2011-05-16 05:31:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171561", "text": "Attachments saved to Gist: http://gist.github.com/971825\n", "created_at": "2011-05-16 05:31:08", "user": 789801, "id": 1171561}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6656\nCreated by **Ben Fyvie** - 2011-03-30 22:38:31 UTC\n\nWhile trying to implement batch processing to alleviate memory bloat from a monolithic copy routine I discovered that I am unable to reference an ActiveRecord object via a belongs_to relationship even though the object id is set. Here is a basic example of what I'm talking about (within the context of batch processing):\n\n```\nmy_comment = my_post.comments.create(:body => 'hello world')\n\nmy_comment.post_id \n=> 1\n\nmy_comment.post\n=> nil\n\nmy_comment.reload\nmy_comment.post\n=> nil\n```\n\nI've attached a patch that adds a test for the issue, but I can't for the life of me figure out why it is happening. If the batch processing is removed (call #each instead of #find_each) then the problem goes away.\n", "labels": [], "number": 984, "updated_at": "2011-05-21 15:12:38", "user": 789801, "closed_at": "2011-05-21 15:12:38", "id": 904908, "title": "Batch processing #find_each and #find_in_batches causes object references to break", "url": "https://api.github.com/repos/rails/rails/issues/984", "created_at": "2011-05-16 05:31:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171562", "text": "Attachments saved to Gist: http://gist.github.com/971826\n", "created_at": "2011-05-16 05:31:14", "user": 789801, "id": 1171562}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6657\nCreated by **Johnathan Conley** - 2011-03-31 14:32:53 UTC\n\nA basic actionmailer mail with text and html pieces (from a test.html.erb + test.text.erb) produces a mail which has a Content-Type of \"multipart/alternative\" only, it is missing the boundary parameter, which makes generated emails unparseable by email clients.\n\nThis is what rails v3.0.5 produces:\nContent-Type: multipart/alternative\n\nThis is what it should produce (using Mail v2.2.15 directly)\nContent-Type: multipart/alternative;\n boundary=\"--==_mimepart_some_random_key\";\n", "labels": [], "number": 985, "updated_at": "2011-05-21 15:12:38", "user": 789801, "closed_at": "2011-05-21 15:12:38", "id": 904909, "title": "multipart emails missing content-type boundary", "url": "https://api.github.com/repos/rails/rails/issues/985", "created_at": "2011-05-16 05:31:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6658\nCreated by **lyo** - 2011-03-31 15:44:38 UTC\n\nRails 3.0.5\nruby 1.9.2p180 (2011-02-18) [i386-mingw32]\n\nwhen I run \"rails generate scaffold Course name:string\",cmd report ``` javascript\n\nerror:\nF:\\Ruby192\\bin\\ptest>rails generate scaffold Course name:string\n      invoke  active_record\nf:/Ruby192/lib/ruby/1.9.1/psych.rb:148:in `parse': couldn't parse YAML at line 9\n column 2 (Psych::SyntaxError)\n        from f:/Ruby192/lib/ruby/1.9.1/psych.rb:148:in`parse_stream'\n        from f:/Ruby192/lib/ruby/1.9.1/psych.rb:119:in `parse'\n        from f:/Ruby192/lib/ruby/1.9.1/psych.rb:106:in`load'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/applic\nation/configuration.rb:88:in `database_configuration'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activerecord-3.0.5/lib/active_r\necord/railtie.rb:58:in`block (2 levels) in class:Railtie'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/lazy_load_hooks.rb:36:in `instance_eval'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/lazy_load_hooks.rb:36:in`execute_hook'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/lazy_load_hooks.rb:43:in `block in run_load_hooks'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/lazy_load_hooks.rb:42:in`each'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/lazy_load_hooks.rb:42:in `run_load_hooks'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activerecord-3.0.5/lib/active_r\necord/base.rb:1900:in`<top (required)>'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/genera\ntors/named_base.rb:97:in `pluralize_table_names?'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/genera\ntors/named_base.rb:44:in`table_name'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activerecord-3.0.5/lib/rails/ge\nnerators/active_record/model/model_generator.rb:16:in `create_migration_file'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/task.rb:22\n:in`run'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:118:in `invoke_task'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:124:in`block in invoke_all'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:124:in `each'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:124:in`map'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:124:in `invoke_all'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/group.rb:2\n26:in`dispatch'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:109:in `invoke'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/group.rb:2\n69:in`block in _invoke_for_class_method'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/shell.rb:7\n4:in `with_padding'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/group.rb:2\n58:in`_invoke_for_class_method'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/group.rb:1\n50:in `_invoke_from_option_orm'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/task.rb:22\n:in`run'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:118:in `invoke_task'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:124:in`block in invoke_all'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:124:in `each'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:124:in`map'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/invocation\n.rb:124:in `invoke_all'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/group.rb:2\n26:in`dispatch'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/thor-0.14.6/lib/thor/base.rb:38\n9:in `start'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/genera\ntors.rb:163:in`invoke'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/comman\nds/generate.rb:10:in `<top (required)>'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/dependencies.rb:239:in `require'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/dependencies.rb:239:in`block in require'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/dependencies.rb:225:in `block in load_dependency'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/dependencies.rb:596:in`new_constants_in'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/dependencies.rb:225:in `load_dependency'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/activesupport-3.0.5/lib/active_\nsupport/dependencies.rb:239:in`require'\n        from f:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/comman\nds.rb:17:in `<top (required)>'\n        from script/rails:6:in`require'\n        from script/rails:6:in `<main>'\n\n```\n\nWhy it happened ? help! Thanks!\n```\n", "labels": [], "number": 986, "updated_at": "2011-05-21 15:12:38", "user": 789801, "closed_at": "2011-05-21 15:12:38", "id": 904910, "title": "run scaffold report error.", "url": "https://api.github.com/repos/rails/rails/issues/986", "created_at": "2011-05-16 05:31:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6659\nCreated by **Ben Orenstein** - 2011-03-31 17:38:16 UTC\n\nA test method misspelled 'local_lambda' as 'local_lamdba'.\n\nAttached patch fixes this.\n", "labels": [], "number": 987, "updated_at": "2011-05-18 20:03:48", "user": 789801, "closed_at": "2011-05-18 20:03:48", "id": 904912, "title": "Fix misspelling of 'lambda' in test", "url": "https://api.github.com/repos/rails/rails/issues/987", "created_at": "2011-05-16 05:31:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171563", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-04-03 10:49:13 UTC\n\nCan you please apply this change in https://github.com/lifo/docrails/\n\nThe repo has public write access and the changes are merged into the main repo upon review.\n\nPlease do update this ticket once you have made the changes so that I can close the ticket. Thanks! :)\n", "created_at": "2011-05-16 05:31:31", "user": 789801, "id": 1171563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171564", "text": "_Imported from Lighthouse._\nComment by **Ben Orenstein** - 2011-04-04 00:10:22 UTC\n\nRohit -- this isn't a documentation change though, it's a code change.\n\nI'm pretty sure docrails isn't the place for this. Could you take a second look?\n\nThanks!\n", "created_at": "2011-05-16 05:31:32", "user": 789801, "id": 1171564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171565", "text": "_Imported from Lighthouse._\nComment by **Rohit Arondekar** - 2011-04-04 00:24:27 UTC\n\nBen, my bad! :)\n", "created_at": "2011-05-16 05:31:33", "user": 789801, "id": 1171565}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171566", "text": "Attachments saved to Gist: http://gist.github.com/971827\n", "created_at": "2011-05-16 05:31:35", "user": 789801, "id": 1171566}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6660\nCreated by **Ary Borenszweig** - 2011-03-31 17:48:22 UTC\n\nIt's very common to want to do the same thing on an update/create callback after commit (example: create/update a related file, but if the file was there then it is just overwritten).\n\nI tried:\n\n```\nafter_commit :do_something, :on => [:update, :create]\n```\n\nbut I get:\n\n```\n/Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:400:in `class_eval': /Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414: syntax error, unexpected '[', expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END (SyntaxError)\nif (transaction_include_action?(:[:create, :update]))\n                                  ^\n```\n\nI tried doing this:\n\n```\nafter_commit :do_something, :on => :create\nafter_commit :do_something, :on => :update\n```\n\nbut the second callback overrides the first one. So for now I'm using two different methods, or just using an alias_method, but I think the :on => [...] is more DRY, useful and it also similar to the controllers :before_filter, :only => [...]\n", "labels": ["activerecord"], "number": 988, "updated_at": "2015-03-31 18:04:31", "user": 789801, "closed_at": "2013-02-24 16:30:50", "id": 904913, "title": "Allow after_commit :do_something, :on => [:update, :create]", "url": "https://api.github.com/repos/rails/rails/issues/988", "created_at": "2011-05-16 05:31:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171567", "text": "_Imported from Lighthouse._\nComment by **bgentry** - 2011-04-01 19:16:51 UTC\n\nI just encountered this same bug today and was fortunate to find this bug report from a day ago. I have the same situation and I'd like to run the same actions but only on create/update, not destroy.\n\nI definitely wouldn't expect that using after_commit twice would override the first action.\n", "created_at": "2011-05-16 05:31:40", "user": 789801, "id": 1171567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171568", "text": "_Imported from Lighthouse._\nComment by **bgentry** - 2011-04-01 19:25:32 UTC\n\nAlso, I believe you can work around this exact issue by defining a single callback and only running it if the object is persisted:\n\n``` ruby\nafter_commit :do_something, :if => :persisted?\n```\n", "created_at": "2011-05-16 05:31:42", "user": 789801, "id": 1171568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171569", "text": "_Imported from Lighthouse._\nComment by **Ary Borenszweig** - 2011-04-01 19:29:00 UTC\n\nYes, thanks! That worked. So what do we do about this? Close as invalid? Still propose to do it? (I will try to make a patch for this)\n", "created_at": "2011-05-16 05:31:43", "user": 789801, "id": 1171569}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171570", "text": "_Imported from Lighthouse._\nComment by **bgentry** - 2011-04-01 20:04:44 UTC\n\nI still thing it's a valid bug, the behavior is certainly not as I'd expect. Callbacks are never supposed to override each other like this. At a glance it didn't look like the patch would be very simple, but go ahead and take a crack at it. Hopefully we can get some assistance from the core team.\n", "created_at": "2011-05-16 05:31:45", "user": 789801, "id": 1171570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171571", "text": "_Imported from Lighthouse._\nComment by **Michael Andrews** - 2011-04-14 01:27:53 UTC\n\nI also recently encountered this problem. Here is a unit test demonstrating this behavior:\n\nhttps://github.com/rails/rails/pull/269\n", "created_at": "2011-05-16 05:31:46", "user": 789801, "id": 1171571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171572", "text": "_Imported from Lighthouse._\nComment by **Michael Andrews** - 2011-04-14 02:11:52 UTC\n\nUpdated the pull request with a fix to prevent the callbacks in separate contexts from overriding one another.\n", "created_at": "2011-05-16 05:31:47", "user": 789801, "id": 1171572}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12653474", "text": "Was this ever fixed? `after_commit` still doesn't accept an array (using Rails 3.2.11):\n\n```\nafter_commit :do_something, :on => [:create, :update] # calls neither but doesn't raise error\n```\n\nStacking them also doesn't work, as mentioned before:\n\n```\nafter_commit :do_something, :on => :create\nafter_commit :do_something, :on => :update # only calls on :update\n```\n\nIn the [official documentation](http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit) they suggest `after_commit :do_something, :if => :persisted?` for `:update` and `:create` but I still feel it makes sense that it accepted an array, as in other filters. \n\nRe-open as a bug?\n", "created_at": "2013-01-24 14:32:54", "user": 250892, "id": 12653474}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12654781", "text": "@naoisegolden done\n", "created_at": "2013-01-24 15:01:58", "user": 47848, "id": 12654781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12937261", "text": "I was trying to send a notification after both creation and deletion when I saw this issue.\n\nThat would be great if this peace of code could work :\n`after_commit :send_notification, :on => [:create, :destroy]`\n\nThe `:if => :persisted?` trick doesn't work in this case.\n", "created_at": "2013-01-31 10:55:14", "user": 1620522, "id": 12937261}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31408106", "text": "This is only for Rails 4, right? Any Rails 3.2.x work around?\n", "created_at": "2013-12-31 19:34:36", "user": 49692, "id": 31408106}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31621550", "text": "@Frexuz the workaround i've used is to do the following\n\n``` ruby\nafter_commit :do_something_on_create, on: :create\nafter_commit :do_something_on_destory, on: :destroy\n\nalias :do_something_on_create :do_something\nalias :do_something_on_destroy :do_something\n```\n\nor alternatively\n\n``` ruby\nafter_commit ->(obj) { obj.do_something }, on: :create\nafter_commit ->(obj) { obj.do_something }, on: :update\n```\n", "created_at": "2014-01-06 01:09:42", "user": 380159, "id": 31621550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56827269", "text": ":+1: to @seako workaround!!\n", "created_at": "2014-09-25 14:32:50", "user": 1290374, "id": 56827269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/88188037", "text": "Hi!\n\nI just came through this bug again in the `4-1-stable` rails branch.\n\nMy code looks like exactly the same as mentioned before:\n\n``` ruby\n  after_commit :my_method, on: :create # not fired\n  after_commit :my_method, on: :update # fired\n```\n\nSo here, `my_method` is called only on an update, but not on a create.\n\nDoes somebody else have the same bug with this branch?\n\nThanks :)\n", "created_at": "2015-03-31 17:55:38", "user": 1698409, "id": 88188037}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/88188474", "text": "It is not a bug. You are defining the same callback just with different arguments, so only the last one will be fired.\n", "created_at": "2015-03-31 17:57:29", "user": 47848, "id": 88188474}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/88191097", "text": "Hi @rafaelfranca !\nThank you for your very quick answer. I thought that was possible on multiple lines like I did and saw on the [above comment](https://github.com/rails/rails/issues/988#issuecomment-12653474). My bad.\nThanks again :)\n", "created_at": "2015-03-31 18:04:31", "user": 1698409, "id": 88191097}], "assignees": [5402, 5402], "state": "closed", "is-pull-request": false}
